{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Ensure your solution is optimized for efficiency considering lists of large sizes.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": ["def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([]) == []", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "def check(strange_sort_list):\n\tassert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "def check(strange_sort_list):\n\tassert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "def check(strange_sort_list):\n\tassert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "def check(strange_sort_list):\n\tassert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "def check(strange_sort_list):\n\tassert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "test_case_list": ["assert strange_sort_list([5, 1, 6, 3, 2]) == [1, 6, 2, 5, 3]", "assert strange_sort_list([1, 2, 1, 3, 5, 8, -8, -4]) == [-8, 8, -4, 5, 1, 3, 1, 2]", "assert strange_sort_list([8, 8, 8, 6, 12, 5]) == [5, 12, 6, 8, 8, 8]", "assert strange_sort_list([5, 6, 4, 6, 6]) == [4, 6, 5, 6, 6]", "assert strange_sort_list([9, 3, 5, 7]) == [3, 9, 5, 7]", "assert strange_sort_list([6, 6, 2, 12, 13]) == [2, 13, 6, 12, 6]", "assert strange_sort_list([3, 2, 4, 9, 9, 6, 7, 4]) == [2, 9, 3, 9, 4, 7, 4, 6]", "assert strange_sort_list([1, 11, 9, 10, 9]) == [1, 11, 9, 10, 9]", "assert strange_sort_list([4, 4, 5, 1, 4]) == [1, 5, 4, 4, 4]", "assert strange_sort_list([6, 3, 1, 6, 10]) == [1, 10, 3, 6, 6]", "assert strange_sort_list([2, 5, 3, 4, 9, 11, 2, 3]) == [2, 11, 2, 9, 3, 5, 3, 4]", "assert strange_sort_list([9, 8, 5, 2]) == [2, 9, 5, 8]", "assert strange_sort_list([5, 2, 7, 5, 2, 4, -3, -1]) == [-3, 7, -1, 5, 2, 5, 2, 4]", "assert strange_sort_list([6, 2, 5, 5]) == [2, 6, 5, 5]", "assert strange_sort_list([10, 10, 2, 11, 10]) == [2, 11, 10, 10, 10]", "assert strange_sort_list([5, 9, 4, 2]) == [2, 9, 4, 5]", "assert strange_sort_list([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]", "assert strange_sort_list([5, 2, 2, 1]) == [1, 5, 2, 2]", "assert strange_sort_list([8, 2, 9, 9]) == [2, 9, 8, 9]", "assert strange_sort_list([2, 2, 6, 8, 6]) == [2, 8, 2, 6, 6]", "assert strange_sort_list([2, 1, 8, 9, 2, 4, 8, 6]) == [1, 9, 2, 8, 2, 8, 4, 6]", "assert strange_sort_list([]) == []", "assert strange_sort_list([6, 2, 1, 4]) == [1, 6, 2, 4]", "assert strange_sort_list([7, 2, 5, 8, 7, 2]) == [2, 8, 2, 7, 5, 7]", "assert strange_sort_list([3, 4, 1, 7, 4, 6, 3, 12]) == [1, 12, 3, 7, 3, 6, 4, 4]", "assert strange_sort_list([4, 4, 8, 8]) == [4, 8, 4, 8]", "assert strange_sort_list([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.", "assert strange_sort_list([8, 4, 9, 7]) == [4, 9, 7, 8]", "assert strange_sort_list([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]", "assert strange_sort_list([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]", "assert strange_sort_list([1, 6, 6, 3]) == [1, 6, 3, 6]", "assert strange_sort_list([1, 6, 5, 7, 3, 2, -7, -6]) == [-7, 7, -6, 6, 1, 5, 2, 3]", "assert strange_sort_list([4, 8, 10, 4, 4]) == [4, 10, 4, 8, 4]", "assert strange_sort_list([6, 4, 4, 8]) == [4, 8, 4, 6]", "assert strange_sort_list([3, 1, 3, 4, 10, 3, 9, 5]) == [1, 10, 3, 9, 3, 5, 3, 4]", "assert strange_sort_list([4, 6, 4, 7, 7, 3, -1, -7]) == [-7, 7, -1, 7, 3, 6, 4, 4]", "assert strange_sort_list([2, 6, 4, 2, 9, 5, -1, -6]) == [-6, 9, -1, 6, 2, 5, 2, 4]", "assert strange_sort_list([1, 5, 7, 3, 8, 6]) == [1, 8, 3, 7, 5, 6]", "assert strange_sort_list([3, 7, 1, 7, 4]) == [1, 7, 3, 7, 4]", "assert strange_sort_list([4, 7, 6, 6, 1, 4, -2, -5]) == [-5, 7, -2, 6, 1, 6, 4, 4]", "assert strange_sort_list([9, 3, 2, 5, 14]) == [2, 14, 3, 9, 5]", "assert strange_sort_list([4, 10, 10, 4, 13]) == [4, 13, 4, 10, 10]", "assert strange_sort_list([2, 4, 3, 4]) == [2, 4, 3, 4]", "assert strange_sort_list([1, 1, 6, 7, 14]) == [1, 14, 1, 7, 6]", "assert strange_sort_list([3, 5, 7, 8, 5]) == [3, 8, 5, 7, 5]", "assert strange_sort_list([5, 1, 7, 5, 8]) == [1, 8, 5, 7, 5]", "assert strange_sort_list([5, 6, 8, 1, 3, 1, 10, 5]) == [1, 10, 1, 8, 3, 6, 5, 5]", "assert strange_sort_list([10, 4, 7, 9]) == [4, 10, 7, 9]", "assert strange_sort_list([6, 2, 7, 5]) == [2, 7, 5, 6]", "assert strange_sort_list([5, 4, 5, 1, 7, 2, -3, -8]) == [-8, 7, -3, 5, 1, 5, 2, 4]", "assert strange_sort_list([1, 3, 7, 3, 9, 11, 4, 6]) == [1, 11, 3, 9, 3, 7, 4, 6]", "assert strange_sort_list([2, 3, 2, 2, 7, 7, 2, 7]) == [2, 7, 2, 7, 2, 7, 2, 3]", "assert strange_sort_list([3, 1, 3, 4]) == [1, 4, 3, 3]", "assert strange_sort_list([1, 1, 3, 6, 3, 10, -6, -1]) == [-6, 10, -1, 6, 1, 3, 1, 3]", "assert strange_sort_list([2, 3, 7, 5, 4, 10, -6, -9]) == [-9, 10, -6, 7, 2, 5, 3, 4]", "assert strange_sort_list([5, 4, 2, 5, 12, 5]) == [2, 12, 4, 5, 5, 5]", "assert strange_sort_list([1, 4, 1, 4, 8]) == [1, 8, 1, 4, 4]", "assert strange_sort_list([1, 2, 7, 3]) == [1, 7, 2, 3]", "assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]", "assert strange_sort_list([3, 4, 3, 7, 9]) == [3, 9, 3, 7, 4]", "assert strange_sort_list([9, 3, 9, 1]) == [1, 9, 3, 9]", "assert strange_sort_list([7, 9, 2, 6, 4]) == [2, 9, 4, 7, 6]", "assert strange_sort_list([2, 2, 4, 4, 7, 4]) == [2, 7, 2, 4, 4, 4]", "assert strange_sort_list([6, 7, 4, 5, 14, 5]) == [4, 14, 5, 7, 5, 6]", "assert strange_sort_list([7, 4, 2, 4, 14, 5]) == [2, 14, 4, 7, 4, 5]", "assert strange_sort_list([10, 11, 9, 6, 12]) == [6, 12, 9, 11, 10]", "assert strange_sort_list([4, 5, 2, 2]) == [2, 5, 2, 4]", "assert strange_sort_list([1, 1, 1, 2, 1]) == [1, 2, 1, 1, 1]", "assert strange_sort_list([5, 1, 7, 2, 10, 7, 5, 5]) == [1, 10, 2, 7, 5, 7, 5, 5]", "assert strange_sort_list([2, 3, 6, 3, 8, 3, 7, 4]) == [2, 8, 3, 7, 3, 6, 3, 4]", "assert strange_sort_list([4, 6, 1, 1]) == [1, 6, 1, 4]", "assert strange_sort_list([3, 1, 3, 6, 3, 10, 7, 13]) == [1, 13, 3, 10, 3, 7, 3, 6]", "assert strange_sort_list([1, 4, 5, 8]) == [1, 8, 4, 5]", "assert strange_sort_list([3, 2, 3, 2]) == [2, 3, 2, 3]", "assert strange_sort_list([4, 9, 7, 9]) == [4, 9, 7, 9]", "assert strange_sort_list([7, 1, 4, 13, 10]) == [1, 13, 4, 10, 7]", "assert strange_sort_list([2, 3, 6, 6]) == [2, 6, 3, 6]", "assert strange_sort_list([1, 3, 5, 4, 9, 1, -9, -10]) == [-10, 9, -9, 5, 1, 4, 1, 3]", "assert strange_sort_list([5, 5, 5, 8, 14]) == [5, 14, 5, 8, 5]", "assert strange_sort_list([8, 9, 2, 8]) == [2, 9, 8, 8]", "assert strange_sort_list([4, 4, 5, 11, 8, 4]) == [4, 11, 4, 8, 4, 5]", "assert strange_sort_list([2, 2, 5, 6, 6, 10, -4, -6]) == [-6, 10, -4, 6, 2, 6, 2, 5]", "assert strange_sort_list([1, 6, 12, 6, 9, 6]) == [1, 12, 6, 9, 6, 6]", "assert strange_sort_list([1, 1, 1, 5, 5, 9, -7, -8]) == [-8, 9, -7, 5, 1, 5, 1, 1]", "assert strange_sort_list([3, 4, 3, 5, 7]) == [3, 7, 3, 5, 4]", "assert strange_sort_list([3, 5, 2, 4, 3, 6, -3, 0]) == [-3, 6, 0, 5, 2, 4, 3, 3]", "assert strange_sort_list([8, 3, 9, 5, 5]) == [3, 9, 5, 8, 5]", "assert strange_sort_list([1, 4, 6, 5, 10, 7, 5, 3]) == [1, 10, 3, 7, 4, 6, 5, 5]", "assert strange_sort_list([4, 2, 9, 6, 5, 1]) == [1, 9, 2, 6, 4, 5]", "assert strange_sort_list([5, 5, 5, 6, 2]) == [2, 6, 5, 5, 5]", "assert strange_sort_list([1, 1, 6, 1, 4]) == [1, 6, 1, 4, 1]", "assert strange_sort_list([7, 2, 6, 11, 10]) == [2, 11, 6, 10, 7]", "assert strange_sort_list([4, 1, 8, 7, 9, 3, 12, 5]) == [1, 12, 3, 9, 4, 8, 5, 7]", "assert strange_sort_list([10, 7, 5, 3]) == [3, 10, 5, 7]", "assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]", "assert strange_sort_list([5, 6, 6, 9]) == [5, 9, 6, 6]", "assert strange_sort_list([7, 8, 12, 11, 11, 5]) == [5, 12, 7, 11, 8, 11]", "assert strange_sort_list([2, 2, 4, 7, 2, 6, 6, 3]) == [2, 7, 2, 6, 2, 6, 3, 4]", "assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]", "assert strange_sort_list([8, 6, 12, 4, 4, 4]) == [4, 12, 4, 8, 4, 6]", "assert strange_sort_list([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]", "assert strange_sort_list([6, 2, 5, 1]) == [1, 6, 2, 5]", "assert strange_sort_list([1, 7, 9, 11, 4]) == [1, 11, 4, 9, 7]", "assert strange_sort_list([2, 7, 12, 13, 8, 2]) == [2, 13, 2, 12, 7, 8]", "assert strange_sort_list([4, 7, 7, 1, 10, 3, 0, -6]) == [-6, 10, 0, 7, 1, 7, 3, 4]", "assert strange_sort_list([4, 9, 6, 8, 11, 3]) == [3, 11, 4, 9, 6, 8]", "assert strange_sort_list([4, 3, 1, 6]) == [1, 6, 3, 4]"], "nl": "\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    ", "func": "def strange_sort_list(lst):", "examples": "Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    ", "repair_prompt": ["def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Ensure your solution is optimized for efficiency considering lists of large sizes.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order. Strange sorting is when you start with the minimum \n    value, then maximum of the remaining integers, then minimum and so on.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the strange order.\n    \"\"\"\n    # Sort the list using Python's built-in Timsort\n    lst.sort()\n\n    # Initialize two pointers\n    start = 0\n    end = len(lst) - 1\n\n    # Result list to store the strange sorted order\n    result = []\n\n    # Alternate between the smallest and largest remaining elements\n    while start <= end:\n        if start == end:\n            result.append(lst[start])\n        else:\n            result.append(lst[start])\n            result.append(lst[end])\n        start += 1\n        end -= 1\n\n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order. Strange sorting is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the strange order.\n    \"\"\"\n    # Sort the list to easily access the minimum and maximum values\n    lst.sort()\n    \n    # Initialize two pointers, one at the start and one at the end of the list\n    left = 0\n    right = len(lst) - 1\n    \n    # Result list to store the strange sorted order\n    result = []\n    \n    # Alternate between selecting the minimum and maximum values\n    while left <= right:\n        # Append the minimum value\n        result.append(lst[left])\n        left += 1\n        \n        # Check if there are still elements left to process\n        if left <= right:\n            # Append the maximum value\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a 'strange' order by alternating between the minimum and maximum of the remaining elements.\n    \n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n    \n    Returns:\n    list[int]: A list of integers sorted in the 'strange' order.\n    \"\"\"\n    result = []\n    toggle = True  # Start with selecting the minimum\n\n    while lst:\n        if toggle:\n            # Select and append the minimum element\n            min_value = min(lst)\n            result.append(min_value)\n            lst.remove(min_value)\n        else:\n            # Select and append the maximum element\n            max_value = max(lst)\n            result.append(max_value)\n            lst.remove(max_value)\n        \n        # Toggle between selecting minimum and maximum\n        toggle = not toggle\n\n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Sorts the list in a 'strange' order by alternating between the minimum and maximum of the remaining elements.\n    \n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n    \n    Returns:\n    list[int]: A list sorted in the 'strange' order.\n    \"\"\"\n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n    \n    # Create a result list to store the sorted elements\n    result = []\n    \n    # Sort the list to easily access min and max elements\n    lst.sort()\n    \n    # Loop until all elements are processed\n    while left <= right:\n        # Select minimum from remaining\n        if left <= right:\n            result.append(lst[left])\n            left += 1\n        \n        # Select maximum from remaining\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [4, 2, 9, 1, 5, 6]\n    sorted_list = strange_sort_list(example_list)\n    print(\"Strange sorted list:\", sorted_list)\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order. Strange sorting is when you start with the minimum \n    value, then maximum of the remaining integers, then minimum and so on.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the strange order.\n    \"\"\"\n    # Sort the list using Python's built-in Timsort\n    lst.sort()\n\n    # Initialize two pointers\n    start = 0\n    end = len(lst) - 1\n\n    # Result list to store the strange sorted order\n    result = []\n\n    # Loop until the start pointer is less than or equal to the end pointer\n    while start <= end:\n        # Append the smallest element\n        result.append(lst[start])\n        start += 1\n\n        # Check if start has not surpassed end before appending the largest element\n        if start <= end:\n            # Append the largest element\n            result.append(lst[end])\n            end -= 1\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [5, 3, 1, 2, 4]\n    print(strange_sort_list(example_list))  # Output: [1, 5, 2, 4, 3]\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order. Strange sorting is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum, and so on.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in the strange order.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize result list\n    result = []\n    \n    # Use two pointers to alternate between minimum and maximum\n    left = 0\n    right = len(sorted_lst) - 1\n    \n    # Loop until all elements are added to the result list\n    while left <= right:\n        # Append the minimum value\n        result.append(sorted_lst[left])\n        left += 1\n        \n        # Check if there are remaining elements to append the maximum value\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order.\n    Strange sorting starts with the minimum value, then maximum of the remaining integers, \n    then minimum and so on.\n\n    Parameters:\n    lst (List[int]): A list of integers to be sorted.\n\n    Returns:\n    List[int]: A list sorted in strange order.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    # Initialize two pointers\n    left_pointer = 0\n    right_pointer = len(lst) - 1\n    \n    # Sort the list to easily access min and max values\n    sorted_lst = sorted(lst)\n    \n    # Result list to store the strange sorted order\n    result = []\n    \n    # Loop until all elements are sorted\n    while left_pointer <= right_pointer:\n        # Select the minimum value\n        if left_pointer <= right_pointer:\n            result.append(sorted_lst[left_pointer])\n            left_pointer += 1\n        \n        # Select the maximum value\n        if left_pointer <= right_pointer:\n            result.append(sorted_lst[right_pointer])\n            right_pointer -= 1\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\n    print(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\n    print(strange_sort_list([]))            # Output: []\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order.\n    Strange sorting starts with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n    Args:\n        lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n        list[int]: A list of integers sorted in the strange order.\n    \"\"\"\n    # Check for edge cases\n    if not lst:\n        return []\n\n    # Initialize pointers\n    left_pointer = 0\n    right_pointer = len(lst) - 1\n\n    # Sort the list to easily access min and max values\n    sorted_lst = sorted(lst)\n\n    # Result list to store the strange sorted order\n    result = []\n\n    # Loop through the list using two pointers\n    while left_pointer <= right_pointer:\n        # Append the minimum value from the remaining list\n        result.append(sorted_lst[left_pointer])\n        left_pointer += 1\n\n        # Check if pointers have crossed\n        if left_pointer <= right_pointer:\n            # Append the maximum value from the remaining list\n            result.append(sorted_lst[right_pointer])\n            right_pointer -= 1\n\n    return result\n", "from typing import List\n## main.py\n\ndef strange_sort_list(lst: list[int]) -> list[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order. Strange sorting is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Parameters:\n    lst (list[int]): A list of integers to be sorted.\n\n    Returns:\n    list[int]: A list of integers sorted in strange order.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    # Initialize two pointers\n    left = 0\n    right = len(lst) - 1\n\n    # Sort the list to easily access min and max elements\n    lst.sort()\n\n    # Result list to store the strange sorted order\n    result = []\n\n    # Alternate between the smallest and largest remaining elements\n    while left <= right:\n        if left == right:\n            # If pointers meet, add the last remaining element\n            result.append(lst[left])\n        else:\n            # Add the smallest remaining element\n            result.append(lst[left])\n            # Add the largest remaining element\n            result.append(lst[right])\n        # Move the pointers inward\n        left += 1\n        right -= 1\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\n    print(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\n    print(strange_sort_list([]))            # Output: []\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order.\n    The order alternates between the minimum and maximum values\n    from the remaining elements of the list.\n\n    Args:\n        lst (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list sorted in strange order.\n    \"\"\"\n    # Resultant list to store the strange sorted order\n    result = []\n\n    # Continue until the original list is empty\n    while lst:\n        # Find and append the minimum value\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n\n        # Check if the list is not empty before finding the max\n        if lst:\n            # Find and append the maximum value\n            max_value = max(lst)\n            result.append(max_value)\n            lst.remove(max_value)\n\n    return result\n\n# Example usage:\n# print(strange_sort_list([4, 1, 3, 2, 5]))  # Output: [1, 5, 2, 4, 3]\n"], "plans": ["requirement analysis:\nThe requirement is to implement a sorting function that alternates between the minimum and maximum values of a list. The function should be efficient, especially for large lists, and maintain simplicity in its implementation.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for large list sizes\n- Ensure code readability and maintainability\n- Test with various edge cases\n- Document the function with examples\nWe will implement the strange sorting algorithm by first sorting the list and then using two pointers to alternate between the smallest and largest remaining elements. This approach ensures that we efficiently handle large lists by leveraging Python's built-in Timsort for the initial sort, which is both fast and stable. The two-pointer technique will allow us to construct the result list in a single pass after sorting, maintaining simplicity and readability.\n", "requirement analysis:\nThe function needs to efficiently sort lists by alternating between the minimum and maximum values. It should handle large lists without performance degradation and provide clear examples for user understanding.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for large list performance\n- Provide documentation and examples\n- Ensure compatibility with existing Python projects\n- Test across various list sizes and contents\nWe will implement a function that alternates between selecting the minimum and maximum values from a list until all elements are sorted in the 'strange' order. To optimize for large lists, we will use a two-pointer technique to efficiently select the minimum and maximum values without repeatedly sorting the list. This approach minimizes the number of operations and ensures consistent performance across different input sizes.\n", "requirement analysis:\nThe function should efficiently sort a list of integers in a 'strange' order, alternating between the minimum and maximum of the remaining elements. It should handle large lists without significant performance degradation.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for large list performance\n- Ensure the function is easy to use and integrate\n- Provide comprehensive documentation\n- Include test cases for various scenarios\nWe will implement a custom sorting algorithm that alternates between selecting the minimum and maximum values from the list. This approach will ensure that the function is optimized for large lists by minimizing the number of operations required to achieve the desired order. We will use Python's built-in list operations to efficiently manage the selection and removal of elements.\n", "requirement analysis:\nThe function should efficiently sort a list of integers in a 'strange' order, alternating between the minimum and maximum of the remaining elements. It should handle large lists and edge cases like duplicates and empty lists without performance issues.\nrequirement pool:\n- Implement the strange sorting algorithm.\n- Optimize for large list sizes.\n- Ensure the function handles duplicates correctly.\n- Handle empty lists gracefully.\n- Maintain code readability and simplicity.\nWe will implement a custom sorting algorithm that alternates between selecting the minimum and maximum values from the list. This approach will ensure that the function handles large lists efficiently by using a two-pointer technique to avoid unnecessary operations. We will use Python's built-in list operations to maintain simplicity and readability.\n", "requirement analysis:\nThe requirement is to implement a sorting function that alternates between the smallest and largest remaining elements. The function should be optimized for performance, especially with large lists, and should handle edge cases like empty lists or lists with identical elements.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize the algorithm for large lists\n- Document the function with clear examples\n- Create comprehensive test cases\n- Ensure code readability and maintainability\nWe will implement the strange sorting algorithm by first sorting the list and then using two pointers to select the smallest and largest elements alternately. This approach ensures that the function is efficient even for large lists, as it leverages Python's built-in Timsort for the initial sorting, which is highly efficient. The function will be documented with clear examples and edge cases to ensure maintainability and understanding.\n", "requirement analysis:\nThe function should efficiently sort lists by alternating between the minimum and maximum values. It must handle large lists without significant performance degradation.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for large list sizes\n- Provide clear examples and documentation\n- Ensure compatibility with existing Python projects\n- Test performance across different data sets\nWe will implement a function that sorts a list by alternating between the minimum and maximum values. To optimize for large list sizes, we will use efficient list operations and avoid unnecessary computations. The function will leverage Python's built-in capabilities for sorting and list manipulation, ensuring compatibility and performance.\n", "requirement analysis:\nThe requirement is to create a sorting function that alternates between the minimum and maximum values of a list. The function should be optimized for efficiency, especially for large lists. The examples provided illustrate the expected behavior of the function.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize the algorithm for large lists\n- Provide clear documentation and examples\n- Ensure compatibility with existing Python projects\n- Test the function with various list sizes\nWe will implement a function that alternates between selecting the minimum and maximum values from a list until all elements are sorted. To optimize for large lists, we will use a two-pointer technique to avoid repeatedly scanning the list for min and max values, thus reducing the time complexity. This approach will ensure efficient performance even for large datasets.\n", "requirement analysis:\nThe function needs to efficiently sort a list of integers in a 'strange' order, alternating between the minimum and maximum of the remaining elements. It should handle large lists and edge cases like empty lists or lists with identical elements. The solution should be optimized for performance while maintaining readability.\nrequirement pool:\n- Implement the strange sorting algorithm efficiently.\n- Ensure the function handles edge cases like empty lists.\n- Optimize the algorithm for large datasets.\n- Maintain code readability and simplicity.\n- Document the function with examples and edge cases.\nWe will implement a custom sorting algorithm that alternates between selecting the minimum and maximum values from the list. This approach will be efficient for large lists by using a two-pointer technique to avoid unnecessary sorting operations. We will use Python's built-in capabilities to handle edge cases like empty lists and lists with identical elements.\n", "requirement analysis:\nThe function should efficiently sort a list of integers in a 'strange' order, alternating between the minimum and maximum of the remaining elements. It must handle large lists and edge cases like empty lists or lists with identical elements.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize for large list sizes\n- Handle edge cases like empty lists\n- Provide clear documentation\n- Include examples in the docstring\nWe will implement a function that sorts a list of integers in a 'strange' order by alternating between the minimum and maximum of the remaining elements. To optimize for large list sizes, we will use a two-pointer technique to efficiently select the minimum and maximum values without repeatedly sorting the list. This approach will ensure consistent performance across different input sizes. We will also handle edge cases such as empty lists and lists with identical elements.\n", "requirement analysis:\nThe requirement is to create a sorting function that alternates between the minimum and maximum values of a list. The function should be optimized for efficiency, especially for large lists, and should handle edge cases like empty lists or lists with identical elements.\nrequirement pool:\n- Implement the strange sorting algorithm\n- Optimize the algorithm for large lists\n- Ensure the algorithm handles edge cases\n- Provide documentation and examples\n- Test the algorithm across different list sizes\nWe will implement a function that alternates between selecting the minimum and maximum values from a list until all elements are sorted. To optimize for large lists, we will use efficient list operations and avoid unnecessary computations. The function will handle edge cases like empty lists and lists with identical elements. We will use Python's built-in list operations to ensure efficiency and simplicity.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [107, 107, 107, 107, 107, 107, 107, 107, 107, 107], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return the list in strange order.\n    The order alternates between the minimum and maximum values\n    from the remaining elements of the list.\n\n    Args:\n        lst (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list sorted in strange order.\n    \"\"\"\n    # Resultant list to store the strange sorted order\n    result = []\n\n    # Continue until the original list is empty\n    while lst:\n        # Find and append the minimum value\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n\n        # Check if the list is not empty before finding the max\n        if lst:\n            # Find and append the maximum value\n            max_value = max(lst)\n            result.append(max_value)\n            lst.remove(max_value)\n\n    return result\n\n# Example usage:\n# print(strange_sort_list([4, 1, 3, 2, 5]))  # Output: [1, 5, 2, 4, 3]\n", "passed": true, "pass": true, "pass_num": 10, "round": 409, "mutate_method": "add_1_sentence_at_end", "parent_index": 200}
