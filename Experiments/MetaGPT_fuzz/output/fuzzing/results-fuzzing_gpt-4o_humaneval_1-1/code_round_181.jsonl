{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Given two integers a and b, find their largest common divisor.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Given two integers a and b, find their largest common divisor.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are positive for the calculation\n    a = abs(a)\n    b = abs(b)\n    \n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Computes the greatest common divisor of two integers a and b.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Use the math.gcd function to compute the GCD\n    return math.gcd(a, b)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    This function computes the GCD of two integers by repeatedly applying the Euclidean algorithm,\n    which involves replacing the larger number by the remainder of the division of the larger number\n    by the smaller number, until one of the numbers becomes zero. The other number at this point is\n    the GCD. The function handles edge cases by taking the absolute value of the inputs.\n\n    Args:\n        a (int): First integer.\n        b (int): Second integer.\n\n    Returns:\n        int: The greatest common divisor of a and b.\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    \n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n\n    while b != 0:\n        a, b = b, a % b\n\n    return abs(a)\n\n# Example usage:\n# gcd = greatest_common_divisor(48, 18)\n# print(gcd)  # Output: 6\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \n    Raises:\n        ValueError: If non-integer inputs are provided.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Inputs must be integers.\")\n    \n    # Ensure the numbers are positive for the calculation\n    a, b = abs(a), abs(b)\n    \n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(greatest_common_divisor(48, 18))  # Expected output: 6\n        print(greatest_common_divisor(-48, 18)) # Expected output: 6\n        print(greatest_common_divisor(0, 18))   # Expected output: 18\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    This function handles both positive and negative integers, as well as zero, by taking\n    the absolute values of the inputs.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    # Take the absolute values of the inputs to handle negative numbers\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    The Euclidean algorithm is based on the principle that the GCD of two numbers also divides their difference.\n    This function will handle negative numbers and zero correctly.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Ensure the inputs are non-negative\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage:\n# gcd = greatest_common_divisor(48, 18)\n# print(gcd)  # Output: 6\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Ensure inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n\n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return abs(a)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example inputs\n    num1 = 48\n    num2 = 18\n\n    # Calculate GCD\n    gcd_result = greatest_common_divisor(num1, num2)\n\n    # Output the result\n    print(f\"The greatest common divisor of {num1} and {num2} is {gcd_result}.\")\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Example:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Inputs must be integers\")\n\n    # Handle edge cases where either number is zero\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n\n    # Use the Euclidean algorithm to find the GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return abs(a)\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    This function handles both positive and negative integers, as well as zero, by taking\n    the absolute values of the inputs. If both inputs are zero, the function will return zero,\n    as the GCD is undefined in this case.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Take absolute values to handle negative numbers\n    a, b = abs(a), abs(b)\n    \n    # If both numbers are zero, return zero as GCD is undefined\n    if a == 0 and b == 0:\n        return 0\n    \n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Output: 6\n    print(greatest_common_divisor(-48, 18)) # Output: 6\n    print(greatest_common_divisor(0, 18))   # Output: 18\n    print(greatest_common_divisor(0, 0))    # Output: 0\n"], "plans": ["requirement analysis:\nThe function should accurately compute the greatest common divisor for any two integers, including edge cases like zero and negative numbers. It should be optimized for performance, especially with large integers, and provide clear documentation and examples for user understanding.\nrequirement pool:\n- Implement the gcd algorithm using Euclidean method\n- Ensure the function handles edge cases like zero and negative numbers\n- Optimize the function for large integer inputs\n- Provide comprehensive documentation and examples\n- Include unit tests for various scenarios\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and widely used for this purpose. We will utilize Python's built-in capabilities to handle large integers efficiently. The function will be designed to handle edge cases such as zero and negative numbers. We will provide comprehensive documentation and examples to ensure user understanding.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any two integers, including edge cases such as zero and negative numbers. It should be optimized for performance, especially with large integers, and be easy to understand and use.\nrequirement pool:\n- Implement the main function to compute the greatest common divisor\n- Optimize the function for large integer inputs\n- Handle edge cases like zero and negative numbers\n- Provide comprehensive documentation and examples\n- Ensure compatibility with other Python libraries\nWe will use the built-in Python library 'math' which provides a highly efficient and optimized function 'gcd' to compute the greatest common divisor. This approach ensures high performance and accuracy, especially for large integers. The function will handle edge cases such as zero and negative numbers by leveraging the properties of the gcd function, which is well-defined for these cases.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user should be able to easily input numbers and understand the output.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Create a user-friendly interface for input and output.\n- Optimize the function for handling large integers.\n- Provide an explanation of the calculation process.\n- Ensure compatibility with various input formats.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle edge cases such as negative numbers and zero by taking the absolute value of the inputs. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user interface should be intuitive, allowing users to easily input numbers and understand the results.\nrequirement pool:\n- Implement the GCD calculation function\n- Design a user-friendly interface for input\n- Optimize the function for large numbers\n- Provide educational content on GCD calculation\n- Ensure cross-platform compatibility\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and well-suited for handling large numbers. We will use Python's built-in capabilities to ensure performance and simplicity. The function will strictly enforce integer-only inputs to maintain clarity and correctness.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user should be able to easily input numbers and understand the output.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Create a user-friendly interface for inputting numbers.\n- Optimize the function for performance with large integers.\n- Provide educational content explaining the GCD calculation.\n- Ensure compatibility with various input formats.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle edge cases such as negative numbers and zero. We will use Python's built-in capabilities to ensure performance and scalability. Additionally, we will provide a simple interface for input and output, and include comments to explain the calculation process.\n", "requirement analysis:\nThe function should efficiently compute the greatest common divisor of two integers, handling both positive and negative inputs. It should be optimized for performance and provide clear documentation for users.\nrequirement pool:\n- Implement the main GCD algorithm using the Euclidean method.\n- Ensure the function handles edge cases such as zero and negative numbers.\n- Provide comprehensive documentation and examples.\n- Optimize the function for performance.\n- Create a simple user interface for input and output.\nWe will implement the GCD function using the Euclidean algorithm, which is efficient and well-suited for this task. The function will handle both positive and negative integers, as well as zero, by taking the absolute values of the inputs. We will use Python's built-in capabilities to ensure high performance and accuracy. Comprehensive documentation will be provided to guide users on how to use the function.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user should be able to easily input the numbers and understand the result.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Create a user-friendly interface for inputting numbers.\n- Optimize the function for performance with large integers.\n- Provide educational content on how the GCD is calculated.\n- Include error handling for invalid inputs.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and widely used for this purpose. We will use Python's built-in capabilities to handle large integers and ensure the function can process negative numbers and zero correctly. For educational content, we will provide comments within the code explaining the steps of the Euclidean algorithm.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user interface should be intuitive, allowing users to easily input numbers and understand the results.\nrequirement pool:\n- Implement the GCD calculation function\n- Design a user-friendly interface for input\n- Optimize the function for large numbers\n- Provide an explanation of the calculation process\n- Ensure compatibility with various devices\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large numbers. The function will strictly enforce integer-only inputs to ensure accurate computation. We will use Python's built-in capabilities to optimize performance and scalability.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The output should be clear and easy to understand.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm\n- Ensure the function handles edge cases like zero and negative numbers\n- Optimize the function for performance with large integers\n- Create a simple user interface for input and output\n- Provide clear documentation and examples for users\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle edge cases such as zero and negative numbers. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user interface should be intuitive, allowing users to easily input numbers and understand the results.\nrequirement pool:\n- Implement the GCD calculation function\n- Design a user-friendly interface for input\n- Optimize the function for large number inputs\n- Provide an explanation of the calculation process\n- Ensure compatibility with various input formats\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and well-suited for handling large numbers. The function will be designed to handle both positive and negative integers, as well as zero, by taking the absolute values of the inputs. We will use Python's built-in capabilities to ensure optimal performance without the need for additional libraries.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    This function handles both positive and negative integers, as well as zero, by taking\n    the absolute values of the inputs. If both inputs are zero, the function will return zero,\n    as the GCD is undefined in this case.\n\n    Args:\n        a (int): First integer\n        b (int): Second integer\n\n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Take absolute values to handle negative numbers\n    a, b = abs(a), abs(b)\n    \n    # If both numbers are zero, return zero as GCD is undefined\n    if a == 0 and b == 0:\n        return 0\n    \n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Output: 6\n    print(greatest_common_divisor(-48, 18)) # Output: 6\n    print(greatest_common_divisor(0, 18))   # Output: 18\n    print(greatest_common_divisor(0, 0))    # Output: 0\n", "passed": true, "pass": true, "pass_num": 10, "round": 181, "mutate_method": "rephrase_one", "parent_index": 9}
