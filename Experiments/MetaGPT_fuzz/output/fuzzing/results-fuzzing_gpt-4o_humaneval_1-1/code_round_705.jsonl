{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a specified number is a prime, and false if it's not.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": ["def check(is_prime):\n\tassert is_prime(255520) == False", "def check(is_prime):\n\tassert is_prime(6) == False", "def check(is_prime):\n\tassert is_prime(85) == False", "def check(is_prime):\n\tassert is_prime(83) == True", "def check(is_prime):\n\tassert is_prime(82) == False", "def check(is_prime):\n\tassert is_prime(7) == True", "def check(is_prime):\n\tassert is_prime(13) == True", "def check(is_prime):\n\tassert is_prime(57) == False", "def check(is_prime):\n\tassert is_prime(81) == False", "def check(is_prime):\n\tassert is_prime(3) == True", "def check(is_prime):\n\tassert is_prime(104) == False", "def check(is_prime):\n\tassert is_prime(90) == False", "def check(is_prime):\n\tassert is_prime(88) == False", "def check(is_prime):\n\tassert is_prime(255344) == False", "def check(is_prime):\n\tassert is_prime(12) == False", "def check(is_prime):\n\tassert is_prime(14316) == False", "def check(is_prime):\n\tassert is_prime(12938) == False", "def check(is_prime):\n\tassert is_prime(8) == False", "def check(is_prime):\n\tassert is_prime(102) == False", "def check(is_prime):\n\tassert is_prime(12628) == False", "def check(is_prime):\n\tassert is_prime(61) == True", "def check(is_prime):\n\tassert is_prime(5 * 17) == False", "def check(is_prime):\n\tassert is_prime(98) == False", "def check(is_prime):\n\tassert is_prime(63) == False", "def check(is_prime):\n\tassert is_prime(19) == True", "def check(is_prime):\n\tassert is_prime(12884) == False", "def check(is_prime):\n\tassert is_prime(87) == False", "def check(is_prime):\n\tassert is_prime(89) == True", "def check(is_prime):\n\tassert is_prime(255139) == False", "def check(is_prime):\n\tassert is_prime(12897) == False", "def check(is_prime):\n\tassert is_prime(73) == True", "def check(is_prime):\n\tassert is_prime(1) == False", "def check(is_prime):\n\tassert is_prime(15) == False", "def check(is_prime):\n\tassert is_prime(75) == False", "def check(is_prime):\n\tassert is_prime(18) == False", "def check(is_prime):\n\tassert is_prime(96) == False", "def check(is_prime):\n\tassert is_prime(5) == True", "def check(is_prime):\n\tassert is_prime(9) == False", "def check(is_prime):\n\tassert is_prime(255046) == False", "def check(is_prime):\n\tassert is_prime(14) == False", "def check(is_prime):\n\tassert is_prime(78) == False", "def check(is_prime):\n\tassert is_prime(255214) == False", "def check(is_prime):\n\tassert is_prime(76) == False", "def check(is_prime):\n\tassert is_prime(2) == True", "def check(is_prime):\n\tassert is_prime(254873) == True", "def check(is_prime):\n\tassert is_prime(13441 * 19) == False", "def check(is_prime):\n\tassert is_prime(13796) == False", "def check(is_prime):\n\tassert is_prime(11) == True", "def check(is_prime):\n\tassert is_prime(14253) == False", "def check(is_prime):\n\tassert is_prime(100) == False", "def check(is_prime):\n\tassert is_prime(20) == False", "def check(is_prime):\n\tassert is_prime(58) == False", "def check(is_prime):\n\tassert is_prime(22) == False", "def check(is_prime):\n\tassert is_prime(17) == True", "def check(is_prime):\n\tassert is_prime(13481) == False", "def check(is_prime):\n\tassert is_prime(12832) == False", "def check(is_prime):\n\tassert is_prime(254513) == False", "def check(is_prime):\n\tassert is_prime(106) == False", "def check(is_prime):\n\tassert is_prime(16) == False", "def check(is_prime):\n\tassert is_prime(13441) == True", "def check(is_prime):\n\tassert is_prime(66) == False", "def check(is_prime):\n\tassert is_prime(65) == False", "def check(is_prime):\n\tassert is_prime(80) == False", "def check(is_prime):\n\tassert is_prime(11 * 7) == False", "def check(is_prime):\n\tassert is_prime(101) == True", "def check(is_prime):\n\tassert is_prime(103) == True", "def check(is_prime):\n\tassert is_prime(56) == False", "def check(is_prime):\n\tassert is_prime(254423) == False", "def check(is_prime):\n\tassert is_prime(254790) == False", "def check(is_prime):\n\tassert is_prime(4) == False"], "test_case_list": ["assert is_prime(255520) == False", "assert is_prime(6) == False", "assert is_prime(85) == False", "assert is_prime(83) == True", "assert is_prime(82) == False", "assert is_prime(7) == True", "assert is_prime(13) == True", "assert is_prime(57) == False", "assert is_prime(81) == False", "assert is_prime(3) == True", "assert is_prime(104) == False", "assert is_prime(90) == False", "assert is_prime(88) == False", "assert is_prime(255344) == False", "assert is_prime(12) == False", "assert is_prime(14316) == False", "assert is_prime(12938) == False", "assert is_prime(8) == False", "assert is_prime(102) == False", "assert is_prime(12628) == False", "assert is_prime(61) == True", "assert is_prime(5 * 17) == False", "assert is_prime(98) == False", "assert is_prime(63) == False", "assert is_prime(19) == True", "assert is_prime(12884) == False", "assert is_prime(87) == False", "assert is_prime(89) == True", "assert is_prime(255139) == False", "assert is_prime(12897) == False", "assert is_prime(73) == True", "assert is_prime(1) == False", "assert is_prime(15) == False", "assert is_prime(75) == False", "assert is_prime(18) == False", "assert is_prime(96) == False", "assert is_prime(5) == True", "assert is_prime(9) == False", "assert is_prime(255046) == False", "assert is_prime(14) == False", "assert is_prime(78) == False", "assert is_prime(255214) == False", "assert is_prime(76) == False", "assert is_prime(2) == True", "assert is_prime(254873) == True", "assert is_prime(13441 * 19) == False", "assert is_prime(13796) == False", "assert is_prime(11) == True", "assert is_prime(14253) == False", "assert is_prime(100) == False", "assert is_prime(20) == False", "assert is_prime(58) == False", "assert is_prime(22) == False", "assert is_prime(17) == True", "assert is_prime(13481) == False", "assert is_prime(12832) == False", "assert is_prime(254513) == False", "assert is_prime(106) == False", "assert is_prime(16) == False", "assert is_prime(13441) == True", "assert is_prime(66) == False", "assert is_prime(65) == False", "assert is_prime(80) == False", "assert is_prime(11 * 7) == False", "assert is_prime(101) == True", "assert is_prime(103) == True", "assert is_prime(56) == False", "assert is_prime(254423) == False", "assert is_prime(254790) == False", "assert is_prime(4) == False"], "nl": "Return true if a given number is prime, and false otherwise.\n    ", "func": "def is_prime(n):", "examples": ">>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    ", "repair_prompt": ["def is_prime(n):\t\n'''Return true if a specified number is a prime, and false if it's not.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''"], "completions": ["from typing import List\n## main.py\n\nimport math\nfrom sympy import isprime as sympy_isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n    \n    This function checks if a number is prime using trial division up to the square root of the number.\n    For very large numbers, it uses the sympy library's isprime function for efficiency.\n    \n    Args:\n        n (int): Integer to check for primality.\n        \n    Returns:\n        bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    # Use trial division up to the square root of n\n    limit = int(math.sqrt(n)) + 1\n    for i in range(5, limit, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    \n    # For very large numbers, use sympy's isprime function\n    if n > 10**6:\n        return sympy_isprime(n)\n    \n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    return isprime(n)\n", "from typing import List\n## main.py\n\nimport math\nfrom sympy import isprime as sympy_isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n    \n    Args:\n        n: Integer to check for primality.\n        \n    Returns:\n        True if n is prime, False otherwise.\n    \"\"\"\n    # Handle edge cases\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    # Use sympy for small numbers\n    if n < 10000:\n        return sympy_isprime(n)\n\n    # Custom algorithm for larger numbers\n    limit = int(math.sqrt(n)) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    '''\n    Determine if a number is prime.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \n    Raises:\n    ValueError: If n is not an integer.\n    '''\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    \n    return True\n\n# Example usage:\n# print(is_prime(5))  # Output: True\n# print(is_prime(4))  # Output: False\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Determine if a number is prime.\n\n    This function uses the sympy library's isprime function to check\n    if the given number is a prime number.\n\n    Args:\n        n (int): The number to check for primality.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    return isprime(n)\n", "from typing import List\n## main.py\n\ndef is_prime(n: int) -> bool:\n    '''\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "from typing import List\n## main.py\n\nfrom sympy import isprime\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Args:\n        n (int): Integer to check for primality.\n\n    Returns:\n        bool: True if n is prime, False otherwise.\n    \"\"\"\n    return isprime(n)\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    max_divisor = math.isqrt(n)\n    for divisor in range(3, max_divisor + 1, 2):\n        if n % divisor == 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    \n    # Check divisibility from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"], "plans": ["requirement analysis:\nThe function should accurately determine if a number is prime, handling both small and large numbers efficiently. The output should be clear and easy to interpret.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for performance with large numbers\n- Ensure output clarity and conciseness\n- Test with a variety of number sizes\n- Document the function usage and examples\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The Sieve of Eratosthenes is not suitable for individual number checks, so we will use trial division up to the square root of the number, which is efficient for both small and large numbers. We will also use the 'sympy' library for its isprime function to handle very large numbers efficiently.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers. Documentation should include examples for clarity.\nrequirement pool:\n- Implement the prime checking algorithm\n- Optimize for performance with large numbers\n- Include comprehensive documentation and examples\n- Add error handling for non-integer inputs\n- Provide a user-friendly interface for testing\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle edge cases such as 1 and 2, and will be optimized for performance with larger numbers. We will use the 'sympy' library for its efficient prime-checking capabilities, which will help us achieve high performance and usability. The function will include comprehensive documentation and examples to ensure clarity.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers. It should be easy to use and integrate into other projects.\nrequirement pool:\n- Implement the main prime-checking algorithm\n- Optimize for performance with large numbers\n- Handle edge cases such as 1 and 2\n- Provide comprehensive documentation\n- Include test cases for validation\nWe will implement a prime-checking function using a simple algorithm optimized for performance. The function will handle edge cases like 1 and 2 and will be easy to integrate into other projects. We will use the 'sympy' library for its efficient prime-checking capabilities, but optimize the function to be faster for large numbers by implementing a custom algorithm for numbers beyond a certain threshold.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with larger numbers.\nrequirement pool:\n- Implement the is_prime function to accurately determine prime numbers.\n- Optimize the function for performance with large numbers.\n- Provide comprehensive documentation and examples.\n- Ensure compatibility with various Python versions.\n- Include error handling for non-integer inputs.\nWe will implement the is_prime function using a simple algorithm that checks divisibility up to the square root of the number, which is efficient for large numbers. We will use the 'math' library for calculating the square root, ensuring compatibility with various Python versions. The function will include error handling for non-integer inputs and provide comprehensive documentation with examples.\n", "requirement analysis:\nThe function should efficiently determine if a number is prime, handling both small and large numbers. It should be easy to use and integrate into other projects, with clear documentation and examples.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Provide comprehensive documentation\n- Include usage examples\n- Ensure compatibility with Python 3.x\nWe will implement a prime-checking function using a simple and efficient algorithm known as the '6k \u00b1 1' optimization, which is suitable for both small and large numbers. This approach balances performance and simplicity, making it easy to integrate into projects without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently determine if a number is prime, handling both small and large numbers accurately. It should be easy to integrate into other projects and provide reliable results.\nrequirement pool:\n- Implement efficient prime-checking algorithm\n- Optimize for performance with large numbers\n- Ensure accurate results for all input ranges\n- Provide comprehensive documentation\n- Facilitate easy integration into other projects\nWe will implement an efficient prime-checking algorithm using the 'sympy' library, which provides a reliable and optimized method for determining if a number is prime. This approach ensures high accuracy and performance, especially for large numbers, and allows for easy integration into other projects.\n", "requirement analysis:\nThe requirement is to create a function that accurately determines if a number is prime. The function should be efficient, especially for large numbers, and provide clear output. User interaction should be simple and intuitive.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Design a user-friendly interface\n- Optimize performance for large numbers\n- Provide detailed explanations for results\n- Allow batch processing of numbers\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle large numbers efficiently by using the 6k \u00b1 1 optimization, which reduces the number of checks needed. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and even numbers efficiently, and provide results quickly even for large inputs.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Design a user-friendly interface\n- Include detailed usage instructions\n- Test extensively with various inputs\nWe will implement a prime-checking function using a simple algorithm that efficiently handles large numbers. The function will use the 'sympy' library, which provides optimized methods for prime number detection. This library is well-suited for handling large numbers and offers a user-friendly interface.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle edge cases like 1 and 2, and be optimized for performance with large numbers. Documentation should be clear for easy integration.\nrequirement pool:\n- Implement the prime-checking algorithm\n- Optimize for performance with large numbers\n- Ensure accurate results for edge cases\n- Provide comprehensive documentation\n- Include test cases for validation\nWe will implement a prime-checking function using a simple and efficient algorithm. The Sieve of Eratosthenes is a well-known algorithm for finding all prime numbers up to a specified integer, but for checking a single number, a trial division method is more appropriate. We will optimize the function to handle large numbers by checking divisibility up to the square root of the number and skipping even numbers after checking for divisibility by 2. We will use the 'math' library for efficient square root calculation.\n", "requirement analysis:\nThe function should accurately determine if a number is prime, handle large numbers efficiently, and provide clear output. It should be easy to use and well-documented.\nrequirement pool:\n- Implement prime number detection algorithm\n- Optimize for performance with large numbers\n- Ensure clear and concise output\n- Provide comprehensive documentation\n- Include user-friendly interface\nWe will implement a function to check if a number is prime using a simple and efficient algorithm. The function will handle large numbers by optimizing the number of checks needed, leveraging the fact that a number n is not prime if it is divisible by any number up to the square root of n. We will use the 'math' library for efficient computation of the square root. The function will be well-documented with examples to ensure usability.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [70, 70, 70, 70, 70, 70, 70, 70, 70, 70], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if n is a prime number, False otherwise.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    \n    # Check divisibility from 2 to sqrt(n)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "passed": true, "pass": true, "pass_num": 10, "round": 705, "mutate_method": "rephrase_one", "parent_index": 357}
