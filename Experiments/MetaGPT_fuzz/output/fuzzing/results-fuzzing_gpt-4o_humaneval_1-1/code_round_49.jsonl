{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": ["def check(common):\n\tassert common([6, 5, 7, 10], [8, 4]) == []", "def check(common):\n\tassert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "def check(common):\n\tassert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "def check(common):\n\tassert common([8, 7, 6, 13], [7, 2]) == [7]", "def check(common):\n\tassert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "def check(common):\n\tassert common([7, 8, 6, 11], [4, 5, 9]) == []", "def check(common):\n\tassert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "def check(common):\n\tassert common([6, 6, 4, 12], [3, 1]) == []", "def check(common):\n\tassert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "def check(common):\n\tassert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "def check(common):\n\tassert common([4, 8, 2, 9], [3, 1]) == []", "def check(common):\n\tassert common([3, 5, 5, 8], [7, 6]) == []", "def check(common):\n\tassert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "def check(common):\n\tassert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "def check(common):\n\tassert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "def check(common):\n\tassert common([3, 7, 6, 3], [2, 4, 5]) == []", "def check(common):\n\tassert common([7, 4, 3, 10], [3, 1]) == [3]", "def check(common):\n\tassert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "def check(common):\n\tassert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "def check(common):\n\tassert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "def check(common):\n\tassert common([3, 1, 6, 11], [6, 6]) == [6]", "def check(common):\n\tassert common([7, 4, 7, 13], [8, 4]) == [4]", "def check(common):\n\tassert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "def check(common):\n\tassert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "def check(common):\n\tassert common([5, 8, 7, 3], [6, 4]) == []", "def check(common):\n\tassert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "def check(common):\n\tassert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "def check(common):\n\tassert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "def check(common):\n\tassert common([6, 6, 4, 5], [3, 3, 8]) == []", "def check(common):\n\tassert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "def check(common):\n\tassert common([2, 1, 7, 9], [6, 3]) == []", "def check(common):\n\tassert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "def check(common):\n\tassert common([7, 6, 3, 9], [6, 5]) == [6]", "def check(common):\n\tassert common([2, 3, 3, 9], [5, 2]) == [2]", "def check(common):\n\tassert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "def check(common):\n\tassert common([8, 3, 4, 10], [8, 7]) == [8]", "def check(common):\n\tassert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "def check(common):\n\tassert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "def check(common):\n\tassert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "def check(common):\n\tassert common([4, 5, 7, 12], [7, 1]) == [7]", "def check(common):\n\tassert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "def check(common):\n\tassert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "def check(common):\n\tassert common([2, 6, 2, 8], [5, 2]) == [2]", "def check(common):\n\tassert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "def check(common):\n\tassert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "def check(common):\n\tassert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "def check(common):\n\tassert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "def check(common):\n\tassert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "def check(common):\n\tassert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "def check(common):\n\tassert common([5, 5, 7, 7], [5, 2]) == [5]", "def check(common):\n\tassert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "def check(common):\n\tassert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "def check(common):\n\tassert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "def check(common):\n\tassert common([5, 2, 1, 3], [8, 3]) == [3]", "def check(common):\n\tassert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "def check(common):\n\tassert common([5, 6, 4, 8], [3, 7, 2]) == []", "def check(common):\n\tassert common([7, 7, 5, 11], [3, 4]) == []", "def check(common):\n\tassert common([4, 3, 2, 8], []) == []", "def check(common):\n\tassert common([7, 7, 7, 3], [2, 4]) == []", "def check(common):\n\tassert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "def check(common):\n\tassert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "def check(common):\n\tassert common([1, 8, 7, 3], [2, 6]) == []", "def check(common):\n\tassert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "def check(common):\n\tassert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "def check(common):\n\tassert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "def check(common):\n\tassert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "def check(common):\n\tassert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "def check(common):\n\tassert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "def check(common):\n\tassert common([8, 4, 1, 9], [6, 3]) == []", "def check(common):\n\tassert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "def check(common):\n\tassert common([9, 7, 7, 7], [5, 2]) == []", "def check(common):\n\tassert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "def check(common):\n\tassert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "def check(common):\n\tassert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "def check(common):\n\tassert common([8, 4, 6, 5], [1, 1]) == []", "def check(common):\n\tassert common([4, 5, 3, 10], [7, 5]) == [5]", "def check(common):\n\tassert common([7, 1, 7, 13], [3, 1]) == [1]", "def check(common):\n\tassert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "def check(common):\n\tassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "def check(common):\n\tassert common([7, 7, 1, 4], [5, 6]) == []", "def check(common):\n\tassert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "def check(common):\n\tassert common([8, 1, 1, 3], [5, 6]) == []", "def check(common):\n\tassert common([6, 3, 6, 3], [8, 5, 8]) == []", "def check(common):\n\tassert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "def check(common):\n\tassert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "def check(common):\n\tassert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "def check(common):\n\tassert common([1, 3, 4, 9], [7, 3]) == [3]", "def check(common):\n\tassert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "def check(common):\n\tassert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "def check(common):\n\tassert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "def check(common):\n\tassert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "def check(common):\n\tassert common([8, 1, 4, 10], [4, 2]) == [4]", "def check(common):\n\tassert common([2, 8, 5, 10], [8, 4]) == [8]", "def check(common):\n\tassert common([8, 4, 4, 6], [3, 6]) == [6]", "def check(common):\n\tassert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "def check(common):\n\tassert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "def check(common):\n\tassert common([3, 1, 4, 5], [1, 1]) == [1]", "def check(common):\n\tassert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "test_case_list": ["assert common([6, 5, 7, 10], [8, 4]) == []", "assert common([6, 3, 2, 37, 657, 2, 6], [5, 9, 1, 6, 4, 654, 125]) == [6]", "assert common([1, 6, 5, 9], [1, 6, 1]) == [1, 6]", "assert common([8, 7, 6, 13], [7, 2]) == [7]", "assert common([1, 1, 3, 11], [5, 3, 2]) == [3]", "assert common([7, 8, 6, 11], [4, 5, 9]) == []", "assert common([1, 6, 5, 34, 651, 3, 3], [7, 8, 1, 7, 9, 653, 121]) == [1]", "assert common([6, 6, 4, 12], [3, 1]) == []", "assert common([6, 1, 5, 36, 648, 1, 6], [3, 4, 2, 1, 12, 654, 123]) == [1]", "assert common([6, 3, 7, 6], [3, 5, 7]) == [3, 7]", "assert common([4, 8, 2, 9], [3, 1]) == []", "assert common([3, 5, 5, 8], [7, 6]) == []", "assert common([1, 8, 3, 4], [8, 7, 6]) == [8]", "assert common([5, 2, 6, 30, 650, 7, 3], [7, 10, 2, 4, 4, 651, 126]) == [2, 7]", "assert common([4, 6, 6, 7], [8, 6, 9]) == [6]", "assert common([3, 7, 6, 3], [2, 4, 5]) == []", "assert common([7, 4, 3, 10], [3, 1]) == [3]", "assert common([3, 3, 1, 4], [4, 6, 4]) == [4]", "assert common([4, 5, 2, 5], [1, 7, 5]) == [5]", "assert common([5, 3, 4, 35, 652, 1, 1], [9, 6, 2, 8, 6, 653, 122]) == []", "assert common([3, 1, 6, 11], [6, 6]) == [6]", "assert common([7, 4, 7, 13], [8, 4]) == [4]", "assert common([4, 4, 4, 34, 652, 5, 10], [8, 2, 1, 4, 5, 652, 117]) == [4, 5, 652]", "assert common([2, 8, 3, 29, 650, 1, 7], [3, 6, 2, 3, 7, 652, 116]) == [2, 3, 7]", "assert common([5, 8, 7, 3], [6, 4]) == []", "assert common([2, 2, 1, 29, 650, 4, 2], [3, 10, 6, 2, 11, 651, 119]) == [2]", "assert common([3, 3, 2, 30, 656, 3, 4], [6, 11, 2, 4, 4, 652, 123]) == [2, 4]", "assert common([6, 1, 4, 33, 651, 4, 3], [4, 10, 1, 10, 12, 657, 126]) == [1, 4]", "assert common([6, 6, 4, 5], [3, 3, 8]) == []", "assert common([5, 5, 4, 34, 648, 5, 5], [3, 7, 6, 2, 10, 648, 116]) == [648]", "assert common([2, 1, 7, 9], [6, 3]) == []", "assert common([4, 1, 4, 12], [5, 1, 7]) == [1]", "assert common([7, 6, 3, 9], [6, 5]) == [6]", "assert common([2, 3, 3, 9], [5, 2]) == [2]", "assert common([1, 4, 1, 32, 657, 7, 6], [4, 10, 2, 2, 4, 650, 124]) == [4]", "assert common([8, 3, 4, 10], [8, 7]) == [8]", "assert common([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]", "assert common([5, 2, 2, 30, 654, 5, 1], [3, 3, 2, 10, 6, 657, 126]) == [2]", "assert common([2, 7, 4, 3], [8, 7, 5]) == [7]", "assert common([4, 5, 7, 12], [7, 1]) == [7]", "assert common([9, 3, 7, 4], [4, 2, 4]) == [4]", "assert common([3, 1, 3, 10], [3, 3, 9]) == [3]", "assert common([4, 4, 1, 37, 654, 7, 5], [3, 11, 2, 6, 9, 656, 120]) == []", "assert common([2, 6, 2, 8], [5, 2]) == [2]", "assert common([2, 4, 3, 12], [4, 5, 6]) == [4]", "assert common([4, 4, 7, 8], [4, 4, 9]) == [4]", "assert common([1, 6, 6, 12], [6, 2, 9]) == [6]", "assert common([2, 7, 1, 4], [1, 2, 1]) == [1, 2]", "assert common([2, 5, 6, 32, 649, 3, 9], [8, 6, 1, 4, 4, 658, 117]) == [6]", "assert common([2, 1, 5, 37, 657, 7, 1], [4, 9, 3, 1, 12, 649, 122]) == [1]", "assert common([5, 5, 7, 7], [5, 2]) == [5]", "assert common([5, 3, 2, 8], [3, 2]) == [2, 3]", "assert common([5, 4, 5, 32, 655, 6, 2], [2, 10, 4, 2, 14, 656, 117]) == [2, 4]", "assert common([3, 4, 4, 8], [3, 3, 9]) == [3]", "assert common([5, 2, 1, 3], [8, 3]) == [3]", "assert common([3, 8, 3, 35, 651, 4, 2], [1, 12, 6, 10, 4, 654, 119]) == [4]", "assert common([5, 6, 4, 8], [3, 7, 2]) == []", "assert common([7, 7, 5, 11], [3, 4]) == []", "assert common([4, 3, 2, 8], []) == []", "assert common([7, 7, 7, 3], [2, 4]) == []", "assert common([2, 9, 3, 36, 649, 6, 7], [10, 12, 4, 4, 14, 656, 116]) == []", "assert common([3, 8, 6, 6], [4, 3, 3]) == [3]", "assert common([1, 8, 7, 3], [2, 6]) == []", "assert common([1, 4, 5, 11], [1, 6, 1]) == [1]", "assert common([6, 2, 3, 8], [7, 6, 8]) == [6, 8]", "assert common([1, 7, 4, 30, 653, 1, 1], [6, 9, 2, 2, 13, 650, 120]) == []", "assert common([6, 8, 4, 32, 657, 7, 6], [4, 10, 1, 5, 14, 652, 120]) == [4]", "assert common([2, 7, 7, 32, 650, 5, 6], [7, 2, 4, 3, 13, 654, 117]) == [2, 7]", "assert common([1, 4, 7, 30, 658, 3, 10], [6, 7, 3, 10, 10, 658, 117]) == [3, 7, 10, 658]", "assert common([8, 4, 1, 9], [6, 3]) == []", "assert common([2, 1, 4, 37, 657, 3, 7], [8, 5, 5, 10, 7, 654, 121]) == [7]", "assert common([9, 7, 7, 7], [5, 2]) == []", "assert common([4, 6, 3, 31, 648, 7, 10], [1, 10, 4, 7, 7, 653, 117]) == [4, 7, 10]", "assert common([6, 5, 2, 3], [3, 3, 3]) == [3]", "assert common([4, 4, 1, 8], [1, 5, 7]) == [1]", "assert common([8, 4, 6, 5], [1, 1]) == []", "assert common([4, 5, 3, 10], [7, 5]) == [5]", "assert common([7, 1, 7, 13], [3, 1]) == [1]", "assert common([1, 5, 5, 29, 655, 4, 1], [5, 3, 2, 1, 5, 648, 118]) == [1, 5]", "assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]", "assert common([7, 7, 1, 4], [5, 6]) == []", "assert common([5, 4, 2, 36, 648, 7, 10], [6, 8, 1, 5, 11, 649, 126]) == [5]", "assert common([8, 1, 1, 3], [5, 6]) == []", "assert common([6, 3, 6, 3], [8, 5, 8]) == []", "assert common([6, 8, 7, 32, 654, 7, 3], [7, 7, 2, 5, 10, 654, 123]) == [7, 654]", "assert common([2, 2, 6, 11], [5, 6, 1]) == [6]", "assert common([1, 4, 6, 39, 653, 4, 3], [6, 12, 2, 3, 14, 654, 116]) == [3, 6]", "assert common([1, 3, 4, 9], [7, 3]) == [3]", "assert common([9, 6, 6, 7], [7, 7, 1]) == [7]", "assert common([5, 6, 2, 34, 654, 3, 7], [7, 9, 1, 7, 8, 650, 122]) == [7]", "assert common([8, 2, 7, 4], [7, 7, 1]) == [7]", "assert common([3, 2, 1, 37, 654, 7, 6], [2, 3, 2, 6, 4, 649, 123]) == [2, 3, 6]", "assert common([9, 2, 7, 4], [5, 4, 1]) == [4]", "assert common([8, 1, 4, 10], [4, 2]) == [4]", "assert common([2, 8, 5, 10], [8, 4]) == [8]", "assert common([8, 4, 4, 6], [3, 6]) == [6]", "assert common([3, 6, 6, 7], [7, 4, 2]) == [7]", "assert common([3, 4, 3, 11], [4, 1, 7]) == [4]", "assert common([3, 1, 4, 5], [1, 1]) == [1]", "assert common([3, 2, 5, 37, 652, 2, 3], [5, 4, 6, 7, 9, 651, 120]) == [5]"], "nl": "Return sorted unique common elements for two lists.\n    ", "func": "def common(l1: list, l2: list):", "examples": ">>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    ", "repair_prompt": ["def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n    \n    Returns:\n    list: A sorted list of unique common elements from both lists.\n    \n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow set operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements to a sorted list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list[int], l2: list[int]) -> list[int]:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    Parameters:\n    l1 (list[int]): The first list of integers.\n    l2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A sorted list of unique common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow set operations\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection to a sorted list\n    result = sorted(intersection)\n\n    return result\n", "from typing import List\n## main.py\n\ndef common(l1: list[int], l2: list[int]) -> list[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    This function takes two lists of integers as input and returns a sorted list\n    of unique common elements. It uses Python's set operations to find the\n    intersection and then sorts the result.\n\n    Args:\n        l1: First list of integers.\n        l2: Second list of integers.\n\n    Returns:\n        A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the intersection to a sorted list\n    sorted_common_elements = sorted(common_elements)\n\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to remove duplicates and allow set operations\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection to a sorted list\n    sorted_common_elements = sorted(intersection)\n\n    return sorted_common_elements\n\n# Example usage:\n# l1 = [1, 2, 3, 4, 5]\n# l2 = [4, 5, 6, 7, 8]\n# print(common(l1, l2))  # Output: [4, 5]\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"Finds and returns a sorted list of unique common elements from two input lists.\n\n    This function takes two lists as input and returns a sorted list of unique common elements.\n    It uses Python's set operations to efficiently find the intersection of the two lists,\n    ensuring that the elements are unique. The final result is sorted using Python's sorted function.\n\n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list containing unique common elements from both input lists.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow set operations\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the set of common elements to a sorted list\n    sorted_common_elements = sorted(common_elements)\n\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    Parameters:\n    l1 (list): First list of elements.\n    l2 (list): Second list of elements.\n\n    Returns:\n    list: Sorted list of unique common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    >>> common([], [3, 2])\n    []\n    >>> common([5, 3, 2, 8], [])\n    []\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert intersection to list and sort it\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): First list of elements.\n        l2 (list): Second list of elements.\n\n    Returns:\n        list: A sorted list of unique common elements.\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the intersection to a sorted list\n    sorted_common_elements = sorted(common_elements)\n\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n\n    This function takes two lists as input and returns a sorted list of unique\n    elements that are common to both lists. It uses set operations to efficiently\n    find the intersection of the two lists and ensures the result is sorted.\n\n    Args:\n        l1: First list of elements.\n        l2: Second list of elements.\n\n    Returns:\n        A sorted list of unique common elements.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and allow set operations\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n\n    # Convert the result to a sorted list\n    sorted_common_elements = sorted(common_elements)\n\n    return sorted_common_elements\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return a sorted list of unique common elements from two input lists.\n\n    Parameters:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n\n    Returns:\n    list: A sorted list containing unique common elements from both lists.\n\n    Example:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements to a sorted list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list1 = [1, 4, 3, 34, 653, 2, 5]\n    example_list2 = [5, 7, 1, 5, 9, 653, 121]\n    print(common(example_list1, example_list2))  # Output: [1, 5, 653]\n", "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    Parameters:\n    l1 (list): First list of elements.\n    l2 (list): Second list of elements.\n\n    Returns:\n    list: A sorted list of unique common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection to a sorted list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n"], "plans": ["requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is unique and sorted. It should handle edge cases such as empty lists and lists with duplicate elements. The implementation should be straightforward and well-documented to aid understanding and usability.\nrequirement pool:\n- Implement the main function to find common elements\n- Optimize the function for performance with large lists\n- Ensure the function handles duplicate elements correctly\n- Provide comprehensive documentation and examples\n- Test the function across different Python versions\nWe will use Python's built-in set operations to efficiently find the common elements between two lists. This approach is both fast and simple, making it ideal for handling large lists. The function will convert the lists to sets to find the intersection, ensuring uniqueness, and then sort the result before returning it. This method is compatible with different Python versions and handles duplicate elements correctly.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains unique elements. It should handle edge cases such as empty lists and large datasets.\nrequirement pool:\n- Implement the main function to find common elements.\n- Ensure the function returns sorted results.\n- Handle edge cases like empty lists.\n- Optimize for performance with large lists.\n- Provide comprehensive documentation and examples.\nWe will use Python's built-in set operations to efficiently find the common elements between two lists, as they are both fast and handle duplicates by default. After finding the intersection, we will convert the result to a sorted list to meet the requirement of returning sorted unique elements. This approach is efficient and leverages Python's capabilities without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains unique elements. It should handle edge cases such as empty lists and large inputs gracefully.\nrequirement pool:\n- Implement the main function to find common elements\n- Optimize the function for performance with large lists\n- Ensure the function returns sorted results\n- Add comprehensive test cases for edge scenarios\n- Document the function usage and examples\nWe will use Python's built-in set operations to efficiently find the common elements between two lists, as they provide a fast way to compute intersections. After finding the intersection, we will convert the result to a sorted list to meet the requirement of returning sorted unique elements. This approach is efficient and leverages Python's capabilities without requiring additional libraries, ensuring compatibility with Python 3.x.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains unique elements. It should handle duplicates in the input lists and be compatible with Python 3.x.\nrequirement pool:\n- Implement the main function to find common elements\n- Ensure the function returns sorted results\n- Handle duplicate elements in input lists\n- Optimize for large list inputs\n- Provide comprehensive documentation and examples\nWe will use Python's built-in set operations to efficiently find common elements between two lists, as they provide a fast way to handle duplicates and find intersections. After finding the intersection, we will convert the result to a sorted list to meet the requirement of returning sorted unique elements. This approach is efficient and leverages Python's capabilities without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is both sorted and unique. It should handle large datasets without performance degradation.\nrequirement pool:\n- Implement the main function to find common elements.\n- Ensure the output is sorted and unique.\n- Optimize the function for large datasets.\n- Provide comprehensive documentation and examples.\n- Consider edge cases such as empty lists.\nWe will implement a function that utilizes Python's built-in set operations to efficiently find common elements between two lists. The use of sets will ensure that the elements are unique, and the final result will be sorted using Python's sorted function. This approach is both efficient and straightforward, making it suitable for handling large datasets.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is unique and sorted. It should handle edge cases such as empty lists and large datasets. The implementation should be straightforward and well-documented to aid understanding and maintenance.\nrequirement pool:\n- Implement the main function to find common elements.\n- Ensure the function returns sorted results.\n- Handle edge cases like empty lists.\n- Optimize for performance with large lists.\n- Provide comprehensive documentation and examples.\nWe will use Python's built-in set operations to efficiently find common elements between two lists, ensuring the result is unique. Then, we will sort the result using the sorted() function. This approach is efficient and straightforward, leveraging Python's capabilities to handle large lists and edge cases like empty lists. The function will be documented with clear examples to aid understanding.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains unique elements. It should handle edge cases such as empty lists and be compatible with various Python versions.\nrequirement pool:\n- Implement the main function to find common elements\n- Ensure the function returns sorted results\n- Handle edge cases like empty lists\n- Optimize for large list inputs\n- Provide comprehensive documentation\nWe will use Python's built-in set operations to efficiently find the common elements between two lists, as they provide a fast way to compute intersections. After finding the intersection, we will convert the result to a sorted list to meet the requirement of returning sorted unique elements. This approach is efficient and compatible with different Python versions. We will handle edge cases such as empty lists by ensuring the function can process them without errors.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the output is sorted and unique. It should handle various data sizes and types gracefully.\nrequirement pool:\n- Implement the main function to find common elements.\n- Ensure the output is sorted and unique.\n- Optimize performance for large datasets.\n- Handle edge cases such as empty lists.\n- Provide clear documentation and examples.\nWe will use Python's set intersection to efficiently find common elements between two lists. This approach is both simple and efficient, as it leverages the built-in set data structure for fast membership testing and intersection operations. The result will be converted to a sorted list to ensure the output is sorted and unique. This method handles edge cases like empty lists gracefully and is optimized for performance with large datasets.\n", "requirement analysis:\nThe function should efficiently find common elements between two lists, ensuring the result is sorted and contains unique elements. It should handle duplicates in the input lists and be easy to use with clear documentation.\nrequirement pool:\n- Implement the main function to find common elements\n- Ensure the result is sorted and contains unique elements\n- Optimize for performance with large lists\n- Provide comprehensive documentation and examples\n- Include error handling for non-list inputs\nWe will use Python's built-in set operations to efficiently find the common elements between two lists, as they provide a fast way to handle duplicates and find intersections. After finding the intersection, we will convert the result to a sorted list to meet the requirement of returning sorted unique elements. This approach ensures compatibility with Python's standard library and handles large lists efficiently.\n", "requirement analysis:\nThe function should efficiently find and return sorted unique common elements from two lists. It should handle duplicates by only considering unique elements and ensure the output is sorted. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- The function must return sorted unique common elements.\n- The function should handle large lists efficiently.\n- The function should have clear documentation and examples.\n- The function should be compatible with Python 3.x.\n- The function should handle edge cases like empty lists.\nWe will use Python's built-in set operations to efficiently find common elements between two lists. This approach is fast and handles duplicates by default, ensuring only unique elements are considered. The sorted function will be used to return the results in sorted order. This method is compatible with Python 3.x and handles edge cases like empty lists gracefully.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "completion": "from typing import List\n## main.py\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    Parameters:\n    l1 (list): First list of elements.\n    l2 (list): Second list of elements.\n\n    Returns:\n    list: A sorted list of unique common elements.\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to find unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the intersection to a sorted list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n", "passed": true, "pass": true, "pass_num": 10, "round": 49, "mutate_method": "condense_two2one", "parent_index": 49}
