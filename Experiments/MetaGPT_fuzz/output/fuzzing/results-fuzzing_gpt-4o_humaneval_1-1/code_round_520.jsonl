{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": ["def check(sort_numbers):\n\tassert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one\") == 'one'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four three six\") == 'three four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one six four\") == 'one four six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two\") == 'one two'", "def check(sort_numbers):\n\tassert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four five five one one\") == 'one one four five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four zero two five\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight\") == 'eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six three\") == 'three six'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero\") == 'zero seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four three zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven\") == 'seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six nine three\") == 'three six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one nine three\") == 'one three four nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "def check(sort_numbers):\n\tassert sort_numbers('three five nine') == 'three five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three\") == 'zero three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four one seven\") == 'one four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six\") == 'six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"four two seven\") == 'two four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine three four five\") == 'three four five nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"two five four zero\") == 'zero two four five'", "def check(sort_numbers):\n\tassert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"three seven two\") == 'two three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four four six four one\") == 'one four four four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight six three\") == 'three six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five three five\") == 'three five five'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four\") == 'four'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero four one\") == 'zero one four six'", "def check(sort_numbers):\n\tassert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine\") == 'nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"three\") == 'three'", "def check(sort_numbers):\n\tassert sort_numbers(\"three four zero\") == 'zero three four'", "def check(sort_numbers):\n\tassert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"five\") == 'five'", "def check(sort_numbers):\n\tassert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "def check(sort_numbers):\n\tassert sort_numbers('three') == 'three'", "def check(sort_numbers):\n\tassert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six\") == 'six'", "def check(sort_numbers):\n\tassert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight five\") == 'five eight'", "def check(sort_numbers):\n\tassert sort_numbers('') == ''", "def check(sort_numbers):\n\tassert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine nine five\") == 'five nine nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven three\") == 'three seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "def check(sort_numbers):\n\tassert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"zero\") == 'zero'", "def check(sort_numbers):\n\tassert sort_numbers(\"nine zero\") == 'zero nine'", "def check(sort_numbers):\n\tassert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "def check(sort_numbers):\n\tassert sort_numbers(\"one six two seven\") == 'one two six seven'"], "test_case_list": ["assert sort_numbers(\"one six one six six seven\") == 'one one six six six seven'", "assert sort_numbers(\"one nine one six six\") == 'one one six six nine'", "assert sort_numbers(\"one\") == 'one'", "assert sort_numbers(\"five six eight six two three nine eight nine\") == 'two three five six six eight eight nine nine'", "assert sort_numbers(\"six zero three eight five one two two seven\") == 'zero one two two three five six seven eight'", "assert sort_numbers(\"eight five one eight five one\") == 'one one five five eight eight'", "assert sort_numbers(\"seven one one four seven seven\") == 'one one four seven seven seven'", "assert sort_numbers(\"two three four five eight nine\") == 'two three four five eight nine'", "assert sort_numbers(\"four four three six\") == 'three four four six'", "assert sort_numbers(\"three six four three zero\") == 'zero three three four six'", "assert sort_numbers(\"nine one six four\") == 'one four six nine'", "assert sort_numbers(\"seven one zero nine eight\") == 'zero one seven eight nine'", "assert sort_numbers(\"three eight one one zero\") == 'zero one one three eight'", "assert sort_numbers(\"five four five two six two zero\") == 'zero two two four five five six'", "assert sort_numbers(\"eight zero zero six\") == 'zero zero six eight'", "assert sort_numbers(\"two three six seven nine four zero\") == 'zero two three four six seven nine'", "assert sort_numbers(\"five zero five three four nine\") == 'zero three four five five nine'", "assert sort_numbers(\"six eight eight two six zero\") == 'zero two six six eight eight'", "assert sort_numbers(\"five eight three nine\") == 'three five eight nine'", "assert sort_numbers(\"one two\") == 'one two'", "assert sort_numbers(\"two eight eight zero seven seven one four\") == 'zero one two four seven seven eight eight'", "assert sort_numbers(\"five nine two four eight\") == 'two four five eight nine'", "assert sort_numbers(\"four five five one one\") == 'one one four five five'", "assert sort_numbers(\"six seven one three two eight\") == 'one two three six seven eight'", "assert sort_numbers(\"four eight four nine three four three five eight\") == 'three three four four four five eight eight nine'", "assert sort_numbers(\"seven two six nine two zero zero\") == 'zero zero two two six seven nine'", "assert sort_numbers(\"seven two one four one nine five five\") == 'one one two four five five seven nine'", "assert sort_numbers(\"four zero two five\") == 'zero two four five'", "assert sort_numbers(\"eight\") == 'eight'", "assert sort_numbers(\"five three nine four one\") == 'one three four five nine'", "assert sort_numbers(\"eight eight zero two two nine four zero\") == 'zero zero two two four eight eight nine'", "assert sort_numbers(\"three five three nine zero\") == 'zero three three five nine'", "assert sort_numbers(\"five zero one zero four eight\") == 'zero zero one four five eight'", "assert sort_numbers(\"six three\") == 'three six'", "assert sort_numbers(\"seven zero\") == 'zero seven'", "assert sort_numbers(\"seven zero three four four\") == 'zero three four four seven'", "assert sort_numbers(\"six one seven two nine six two zero seven\") == 'zero one two two six six seven seven nine'", "assert sort_numbers(\"four three zero\") == 'zero three four'", "assert sort_numbers(\"five six nine nine nine eight\") == 'five six eight nine nine nine'", "assert sort_numbers(\"seven\") == 'seven'", "assert sort_numbers(\"eight one five five six one\") == 'one one five five six eight'", "assert sort_numbers(\"three two four two eight five\") == 'two two three four five eight'", "assert sort_numbers(\"two one two nine eight seven eight\") == 'one two two seven eight eight nine'", "assert sort_numbers(\"five nine eight zero zero four five\") == 'zero zero four five five eight nine'", "assert sort_numbers(\"six nine three\") == 'three six nine'", "assert sort_numbers(\"seven six four five six eight four\") == 'four four five six six seven eight'", "assert sort_numbers(\"two seven zero nine three one eight\") == 'zero one two three seven eight nine'", "assert sort_numbers(\"four one nine three\") == 'one three four nine'", "assert sort_numbers(\"zero two two eight three nine four four four\") == 'zero two two three four four four eight nine'", "assert sort_numbers('three five nine') == 'three five nine'", "assert sort_numbers(\"zero three\") == 'zero three'", "assert sort_numbers(\"three zero one nine nine three\") == 'zero one three three nine nine'", "assert sort_numbers(\"two one eight zero zero nine\") == 'zero zero one two eight nine'", "assert sort_numbers(\"nine three three four nine five five\") == 'three three four five five nine nine'", "assert sort_numbers(\"five five three nine three zero zero zero eight\") == 'zero zero zero three three five five eight nine'", "assert sort_numbers(\"four one seven\") == 'one four seven'", "assert sort_numbers(\"seven six\") == 'six seven'", "assert sort_numbers(\"four two seven\") == 'two four seven'", "assert sort_numbers(\"two five five one nine one two zero six\") == 'zero one one two two five five six nine'", "assert sort_numbers(\"eight three nine three one seven eight nine two\") == 'one two three three seven eight eight nine nine'", "assert sort_numbers(\"nine one three zero nine\") == 'zero one three nine nine'", "assert sort_numbers(\"nine three four five\") == 'three four five nine'", "assert sort_numbers(\"one nine seven eight two nine three two\") == 'one two two three seven eight nine nine'", "assert sort_numbers(\"eight three zero one five one nine\") == 'zero one one three five eight nine'", "assert sort_numbers(\"one five six eight five seven five six four\") == 'one four five five five six six seven eight'", "assert sort_numbers(\"two five four zero\") == 'zero two four five'", "assert sort_numbers(\"six four five one four six eight zero five\") == 'zero one four four five five six six eight'", "assert sort_numbers(\"zero one seven eight three\") == 'zero one three seven eight'", "assert sort_numbers(\"three seven two\") == 'two three seven'", "assert sort_numbers(\"zero three four five eight seven two eight\") == 'zero two three four five seven eight eight'", "assert sort_numbers(\"zero five six five eight zero three three six\") == 'zero zero three three five five six six eight'", "assert sort_numbers(\"nine six two three four one zero two seven\") == 'zero one two two three four six seven nine'", "assert sort_numbers(\"four four six four one\") == 'one four four four six'", "assert sort_numbers(\"eight six three\") == 'three six eight'", "assert sort_numbers(\"five three five\") == 'three five five'", "assert sort_numbers(\"seven one five five zero six four four zero\") == 'zero zero one four four five five six seven'", "assert sort_numbers(\"three two three four one eight five nine one\") == 'one one two three three four five eight nine'", "assert sort_numbers(\"eight eight seven seven two three nine two seven\") == 'two two three seven seven seven eight eight nine'", "assert sort_numbers(\"four\") == 'four'", "assert sort_numbers(\"nine two three two eight six four six\") == 'two two three four six six eight nine'", "assert sort_numbers(\"six zero four one\") == 'zero one four six'", "assert sort_numbers(\"two zero four six zero five\") == 'zero zero two four five six'", "assert sort_numbers(\"three six two five three six\") == 'two three three five six six'", "assert sort_numbers(\"nine\") == 'nine'", "assert sort_numbers(\"two seven eight seven four seven\") == 'two four seven seven seven eight'", "assert sort_numbers(\"one four eight one eight zero\") == 'zero one one four eight eight'", "assert sort_numbers(\"six zero one eight one four two three\") == 'zero one one two three four six eight'", "assert sort_numbers(\"one nine zero one nine three nine\") == 'zero one one three nine nine nine'", "assert sort_numbers(\"three\") == 'three'", "assert sort_numbers(\"three four zero\") == 'zero three four'", "assert sort_numbers(\"six two two seven one\") == 'one two two six seven'", "assert sort_numbers(\"seven three two four zero five three one\") == 'zero one two three three four five seven'", "assert sort_numbers(\"zero seven four seven six seven seven\") == 'zero four six seven seven seven seven'", "assert sort_numbers(\"five six four seven seven\") == 'four five six seven seven'", "assert sort_numbers(\"three two four seven one nine eight four\") == 'one two three four four seven eight nine'", "assert sort_numbers(\"seven five one three seven one five\") == 'one one three five five seven seven'", "assert sort_numbers(\"eight nine one one seven\") == 'one one seven eight nine'", "assert sort_numbers(\"one two four four three seven\") == 'one two three four four seven'", "assert sort_numbers(\"five\") == 'five'", "assert sort_numbers(\"three nine nine eight\") == 'three eight nine nine'", "assert sort_numbers(\"seven zero seven seven two five nine six\") == 'zero two five six seven seven seven nine'", "assert sort_numbers('three') == 'three'", "assert sort_numbers('five zero four seven nine eight') == 'zero four five seven eight nine'", "assert sort_numbers(\"six\") == 'six'", "assert sort_numbers('six five four three two one zero') == 'zero one two three four five six'", "assert sort_numbers(\"eight five\") == 'five eight'", "assert sort_numbers('') == ''", "assert sort_numbers(\"zero seven zero three two nine\") == 'zero zero two three seven nine'", "assert sort_numbers(\"seven two one four two eight\") == 'one two two four seven eight'", "assert sort_numbers(\"eight zero seven\") == 'zero seven eight'", "assert sort_numbers(\"five zero one one two two three\") == 'zero one one two two three five'", "assert sort_numbers(\"nine nine five\") == 'five nine nine'", "assert sort_numbers(\"four eight four two eight zero four seven\") == 'zero two four four four seven eight eight'", "assert sort_numbers(\"seven three\") == 'three seven'", "assert sort_numbers(\"seven six six seven seven two\") == 'two six six seven seven seven'", "assert sort_numbers(\"six five five five two one nine\") == 'one two five five five six nine'", "assert sort_numbers(\"six zero nine six four zero six six\") == 'zero zero four six six six six nine'", "assert sort_numbers(\"zero\") == 'zero'", "assert sort_numbers(\"nine zero\") == 'zero nine'", "assert sort_numbers(\"one eight five eight zero three five\") == 'zero one three five five eight eight'", "assert sort_numbers(\"one six two seven\") == 'one two six seven'"], "nl": " Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    ", "func": "def sort_numbers(numbers: str) -> str:", "examples": ">>> sort_numbers('three one five')\n    'one three five'\n    ", "repair_prompt": ["def sort_numbers(numbers: str) -> str:\t\n'''Input is a string of numerals separated by spaces, ranging from 'zero' to 'nine'. Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sorted from smallest to largest.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces.\n\n    Returns:\n        str: A string with the numeral words sorted from smallest to largest.\n             Returns an error message if any word is outside the specified range.\n    \"\"\"\n    # Mapping of numeral words to their corresponding numeric values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n\n    # Split the input string into words\n    words = numbers.split()\n\n    # Convert words to numbers, checking for invalid inputs\n    try:\n        number_list = [numeral_to_number[word] for word in words]\n    except KeyError:\n        return \"Error: Input contains words outside the range 'zero' to 'nine'.\"\n\n    # Sort the list of numbers\n    number_list.sort()\n\n    # Convert sorted numbers back to words\n    sorted_words = [number_to_numeral[number] for number in number_list]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts numeral words in ascending order.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces.\n\n    Returns:\n        str: A string of numeral words sorted in ascending order or an error message for invalid input.\n    \"\"\"\n    # Mapping of numeral words to their corresponding numeric values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of numeric values back to numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n\n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n\n    # Validate input and map numeral words to numbers\n    try:\n        numeric_values = [numeral_to_number[word] for word in numeral_words]\n    except KeyError:\n        return \"Error: Input contains invalid numeral words.\"\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Map sorted numbers back to numeral words\n    sorted_numeral_words = [number_to_numeral[num] for num in sorted_numeric_values]\n\n    # Join the sorted numeral words into a single string\n    return ' '.join(sorted_numeral_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts spelled-out numbers from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest, or an error message if invalid input is detected.\n    \"\"\"\n    # Mapping of spelled-out numbers to their numeric values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Reverse mapping for converting numbers back to words\n    reverse_number_map = {v: k for k, v in number_map.items()}\n\n    # Split the input string into individual words\n    words = numbers.split()\n\n    # Convert words to numbers, checking for invalid inputs\n    try:\n        numeric_values = [number_map[word] for word in words]\n    except KeyError:\n        return \"Error: Input contains invalid words. Only 'zero' to 'nine' are allowed.\"\n\n    # Sort the numeric values\n    numeric_values.sort()\n\n    # Convert sorted numbers back to words\n    sorted_words = [reverse_number_map[num] for num in numeric_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numeral words from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces.\n\n    Returns:\n        str: A string with the numeral words sorted from smallest to largest.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of integer values back to their numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Split the input string into a list of numeral words\n    numeral_list = numbers.split()\n\n    # Convert numeral words to integers, ignoring invalid inputs\n    int_list = []\n    for numeral in numeral_list:\n        if numeral in numeral_to_int:\n            int_list.append(numeral_to_int[numeral])\n        else:\n            print(f\"Warning: '{numeral}' is not a valid numeral and will be ignored.\")\n\n    # Sort the list of integers\n    int_list.sort()\n\n    # Convert sorted integers back to numeral words\n    sorted_numerals = [int_to_numeral[i] for i in int_list]\n\n    # Join the sorted numeral words into a single string\n    return ' '.join(sorted_numerals)\n\n# Example usage\nif __name__ == \"__main__\":\n    input_string = \"three one five\"\n    sorted_string = sort_numbers(input_string)\n    print(sorted_string)  # Output: 'one three five'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a string of numerals from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of numerals separated by spaces, ranging from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Mapping of word numerals to their corresponding numeric values\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from numeric values back to word numerals\n    reverse_map = {v: k for k, v in number_map.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert valid word numerals to their numeric values\n    valid_numbers = [number_map[word] for word in words if word in number_map]\n    \n    # Sort the numeric values\n    sorted_numbers = sorted(valid_numbers)\n    \n    # Convert sorted numeric values back to word numerals\n    sorted_words = [reverse_map[num] for num in sorted_numbers]\n    \n    # Join the sorted word numerals into a single string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numeral words from 'zero' to 'nine' in ascending order.\n    \n    Args:\n        numbers (str): A string of numeral words separated by spaces.\n        \n    Returns:\n        str: A string with the numeral words sorted from smallest to largest,\n             or an error message if any invalid numeral is detected.\n    \"\"\"\n    # Mapping of numeral words to their corresponding numeric values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numeric values back to their numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n    \n    # Split the input string into individual numeral words\n    numeral_words = numbers.split()\n    \n    # Convert numeral words to numbers, checking for invalid inputs\n    try:\n        number_list = [numeral_to_number[word] for word in numeral_words]\n    except KeyError:\n        return 'Error: Invalid numeral detected'\n    \n    # Sort the list of numbers\n    number_list.sort()\n    \n    # Convert sorted numbers back to numeral words\n    sorted_numeral_words = [number_to_numeral[number] for number in number_list]\n    \n    # Join the sorted numeral words into a single string\n    return ' '.join(sorted_numeral_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a string of numeral words from smallest to largest.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces, ranging from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with numbers sorted from smallest to largest in their word representation.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from integer values back to numeral words\n    reverse_map = {v: k for k, v in numeral_map.items()}\n    \n    # Split the input string into individual words\n    words = numbers.split()\n    \n    # Convert valid numeral words to their corresponding integer values\n    valid_numbers = [numeral_map[word] for word in words if word in numeral_map]\n    \n    # Sort the list of integer values\n    sorted_numbers = sorted(valid_numbers)\n    \n    # Convert sorted integer values back to their numeral word representation\n    sorted_words = ' '.join(reverse_map[num] for num in sorted_numbers)\n    \n    return sorted_words\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Sorts a string of numeral words from smallest to largest.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces, ranging from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with the numeral words sorted from smallest to largest. Returns an error message if invalid input is detected.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Reverse mapping from integer values back to numeral words\n    reverse_map = {v: k for k, v in numeral_map.items()}\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to numbers, handling invalid inputs\n    try:\n        num_list = [numeral_map[word] for word in words]\n    except KeyError:\n        return 'Invalid input detected'\n    \n    # Sort the numbers\n    num_list.sort()\n    \n    # Convert numbers back to words\n    sorted_words = [reverse_map[num] for num in num_list]\n    \n    # Join the sorted words into a string\n    return ' '.join(sorted_words)\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numeral words in ascending order.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces.\n\n    Returns:\n        str: A string of numeral words sorted in ascending order.\n             Returns an error message for invalid inputs.\n    \"\"\"\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n\n    # Handle empty input\n    if not numbers.strip():\n        return 'Invalid input: Please provide numeral words from zero to nine.'\n\n    try:\n        # Convert numeral words to numbers\n        number_list = [numeral_to_number[word] for word in numbers.split()]\n        # Sort the numbers\n        sorted_numbers = sorted(number_list)\n        # Convert numbers back to numeral words\n        sorted_numerals = [number_to_numeral[num] for num in sorted_numbers]\n        return ' '.join(sorted_numerals)\n    except KeyError:\n        return 'Invalid input: Please use numeral words from zero to nine.'\n", "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numeral words in ascending order.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces, ranging from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with the numeral words sorted in ascending order, or an error message for invalid input.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of integer values back to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Validate input\n    if not numbers:\n        return \"Error: Input is empty.\"\n\n    words = numbers.split()\n    invalid_words = [word for word in words if word not in numeral_to_int]\n\n    if invalid_words:\n        return f\"Error: Invalid numeral words found - {', '.join(invalid_words)}.\"\n\n    # Map words to numbers\n    number_list = [numeral_to_int[word] for word in words]\n\n    # Sort numbers\n    number_list.sort()\n\n    # Map numbers back to words\n    sorted_words = [int_to_numeral[number] for number in number_list]\n\n    # Return sorted words as a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers(\"three one four\")\n# print(result)  # Output: \"one three four\"\n"], "plans": ["requirement analysis:\nThe function should accurately sort a string of numbers given in word form. It must handle valid inputs ranging from 'zero' to 'nine' and return them in ascending order. The function should also manage edge cases such as empty strings or invalid words gracefully.\nrequirement pool:\n- Implement the main sorting logic for numeral words\n- Handle edge cases like empty strings or invalid inputs\n- Optimize the function for performance\n- Enhance user experience with clear error messages\n- Provide comprehensive documentation and examples\nWe will implement a function that maps numeral words to their corresponding numeric values, sort them, and then map them back to words. We will use a dictionary for mapping and handle edge cases like empty strings or invalid inputs by returning an appropriate message.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a string of numeral words from 'zero' to 'nine'. The function should handle valid inputs efficiently and return the sorted string. It should also manage invalid inputs gracefully, ensuring a robust user experience.\nrequirement pool:\n- Implement the sorting algorithm for numeral strings.\n- Develop error handling for invalid inputs.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Add support for additional numeral words if needed.\nWe will implement a function that maps numeral words to their corresponding numeric values, sorts them, and then maps them back to numeral words. We'll use a dictionary for mapping and handle invalid inputs by returning an error message or an empty string. The function will be optimized for performance by using efficient sorting algorithms.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a string of spelled-out numbers from 'zero' to 'nine'. The function should handle valid inputs efficiently and return a correctly sorted string. It should also consider edge cases such as empty strings or invalid inputs.\nrequirement pool:\n- Implement the sorting logic for numeral strings\n- Handle invalid inputs gracefully\n- Optimize the function for performance\n- Enhance user experience with clear error messages\n- Ensure compatibility with various input formats\nWe will implement a function that maps spelled-out numbers to their corresponding numeric values, sort them, and then map them back to their spelled-out form. We will use a dictionary for mapping and handle invalid inputs by returning an error message. The function will be optimized for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should accurately sort numeral strings from 'zero' to 'nine'. It must handle various input formats and ensure the output is correctly ordered. The interface should be intuitive, allowing users to easily input and receive sorted results.\nrequirement pool:\n- Accurate sorting of numeral strings\n- Intuitive user interface\n- Handle edge cases gracefully\n- Optimize performance for quick processing\n- Support for additional numeral ranges\nWe will implement a function that maps the numeral strings to their corresponding integer values, sort these integers, and then map them back to their string representations. This approach ensures accurate sorting and handles edge cases by validating input against a predefined list of valid numerals. We will use Python's built-in sorting capabilities for optimal performance.\n", "requirement analysis:\nThe requirement is to sort a string of numbers represented as words from 'zero' to 'nine'. The function should handle valid inputs and return a sorted string. It should also consider edge cases such as empty strings or invalid words.\nrequirement pool:\n- Implement the main sorting function\n- Add error handling for invalid inputs\n- Optimize the sorting algorithm for performance\n- Create a user-friendly interface\n- Ensure compatibility with various input sizes\nWe will implement a function that maps the input words to their corresponding numeric values, sort these values, and then map them back to their word representations. We will use a dictionary for the mapping and handle invalid inputs by ignoring them or returning an error message. The function will be optimized for performance by using Python's built-in sorting capabilities.\n", "requirement analysis:\nThe function should accurately sort a string of numbers given in word form from 'zero' to 'nine'. It should handle edge cases such as repeated numbers and provide feedback for invalid inputs. The solution should be efficient and user-friendly.\nrequirement pool:\n- Implement the main sorting functionality for numeral strings.\n- Add error handling for invalid numeral inputs.\n- Optimize the function for performance.\n- Enhance user interface for better user experience.\n- Include detailed documentation and examples.\nWe will implement a function that maps the input numeral words to their corresponding numeric values, sort them, and then map them back to their word form. We will use a dictionary for mapping and handle invalid inputs by checking against the dictionary keys. The function will return an error message if any invalid numeral is detected.\n", "requirement analysis:\nThe requirement is to sort a string of numbers represented as words from 'zero' to 'nine'. The function should handle valid inputs and return a sorted string. It should also consider edge cases such as empty strings or invalid words.\nrequirement pool:\n- Implement the main sorting function for numeral strings.\n- Add error handling for invalid inputs.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Include comprehensive testing for various input scenarios.\nWe will implement a function that maps the numeral words to their corresponding integer values, sort these integers, and then map them back to their word representation. We will use a dictionary for the mapping. The function will also include error handling to manage invalid inputs by ignoring them or returning an error message. The implementation will focus on performance by using efficient sorting algorithms provided by Python's standard library.\n", "requirement analysis:\nThe requirement is to develop a function that sorts a string of numerals from 'zero' to 'nine'. The function should handle valid inputs and return a sorted string. It should also consider edge cases such as empty strings or invalid inputs.\nrequirement pool:\n- Implement the main sorting function\n- Handle invalid inputs gracefully\n- Optimize the function for performance\n- Design a simple user interface\n- Provide comprehensive documentation\nWe will implement a function that maps the numeral words to their corresponding integer values, sort these integers, and then map them back to their respective words. We will use a dictionary for the mapping and handle invalid inputs by returning an error message or an empty string. The function will be optimized for performance by using efficient sorting algorithms provided by Python's standard library.\n", "requirement analysis:\nThe function should take a string of numeral words, convert them to their respective numeric values, sort them, and then convert them back to words for the output. It should handle invalid inputs gracefully and ensure the output is in a readable format.\nrequirement pool:\n- Implement the main sorting logic for numeral strings.\n- Develop a user-friendly interface for input and output.\n- Optimize the function for performance with large inputs.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for user guidance.\nWe will implement a function that maps numeral words to their corresponding numeric values using a dictionary, sort these numeric values, and then map them back to numeral words for the output. We will use Python's built-in sorting capabilities for efficient performance. The function will include error handling to manage invalid inputs gracefully.\n", "requirement analysis:\nThe requirement is to sort a string of numeral words from 'zero' to 'nine'. The function should handle valid inputs and return them in sorted order. Edge cases such as empty strings or invalid inputs should be considered.\nrequirement pool:\n- Implement the sorting algorithm for numeral strings.\n- Handle edge cases like empty strings or invalid inputs.\n- Optimize the function for performance.\n- Enhance user experience with clear error messages.\n- Ensure compatibility with various input formats.\nWe will implement a function that maps numeral words to their corresponding integer values, sort these integers, and then map them back to numeral words. This approach ensures accurate sorting and handles edge cases like empty strings or invalid inputs by returning an appropriate message. We will use Python's built-in sorting capabilities for efficiency.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9917, 0.9917], "pass_results": [true, true, true, true, true, true, true, true, false, false], "pass_test_cases_num": [121, 121, 121, 121, 121, 121, 121, 121, 120, 120], "completion": "from typing import List\n## main.py\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numeral words in ascending order.\n\n    Args:\n        numbers (str): A string of numeral words separated by spaces, ranging from 'zero' to 'nine'.\n\n    Returns:\n        str: A string with the numeral words sorted in ascending order, or an error message for invalid input.\n    \"\"\"\n    # Mapping of numeral words to their corresponding integer values\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Mapping of integer values back to numeral words\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n\n    # Validate input\n    if not numbers:\n        return \"Error: Input is empty.\"\n\n    words = numbers.split()\n    invalid_words = [word for word in words if word not in numeral_to_int]\n\n    if invalid_words:\n        return f\"Error: Invalid numeral words found - {', '.join(invalid_words)}.\"\n\n    # Map words to numbers\n    number_list = [numeral_to_int[word] for word in words]\n\n    # Sort numbers\n    number_list.sort()\n\n    # Map numbers back to words\n    sorted_words = [int_to_numeral[number] for number in number_list]\n\n    # Return sorted words as a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\n# result = sort_numbers(\"three one four\")\n# print(result)  # Output: \"one three four\"\n", "passed": true, "pass": true, "pass_num": 8, "round": 520, "mutate_method": "rephrase_one", "parent_index": 239}
