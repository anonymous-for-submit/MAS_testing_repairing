{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers. Consider edge cases such as an empty list or a list with a single element.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": ["def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5, 6, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 4, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 7, 4, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 2, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 5, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 4, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8, 1, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 5, 6, 5, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 5, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 4, 6, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([4, 5, 8, 4, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 5, 2, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 1, 3, 6, 3, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 2, 5, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 7, 7, 6, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 2, 5, 8, 11]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 2, 9, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 5, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 1, 2, 3, 3, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 3, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 2, 2, 2, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 7, 4, 2, 2, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 4, 8, 1, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 2, 3, 5, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 4, 4, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 3, 3, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 6, 9, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 3, 3, 3, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 3, 4, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 2, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 7, 3, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 8, 4, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 3, 3, 5, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 8, 4, 7, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 4, 5, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 6, 1, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5]) == True", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 6, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 2, 2, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 6, 3, 9, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 7, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 7, 3, 4, 8, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 8, 6, 7, 8]) == False"], "test_case_list": ["assert is_sorted([1, 1, 3, 6, 7, 8]) == True", "assert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "assert is_sorted([2, 3, 3, 5]) == True", "assert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "assert is_sorted([3, 7, 5]) == False", "assert is_sorted([1, 1, 3, 5, 6, 6]) == True", "assert is_sorted([5, 6, 3]) == False", "assert is_sorted([3, 4, 4, 4, 4, 7]) == False", "assert is_sorted([1, 5, 7, 4, 4, 2]) == False", "assert is_sorted([2, 2, 6, 8]) == True", "assert is_sorted([3, 4, 6, 7, 7]) == True", "assert is_sorted([3, 3, 5, 7, 1, 5]) == False", "assert is_sorted([2, 4, 8, 9]) == True", "assert is_sorted([6, 4, 4]) == False", "assert is_sorted([8, 1, 2]) == False", "assert is_sorted([1, 3, 4, 5]) == True", "assert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "assert is_sorted([3, 2, 1]) == False", "assert is_sorted([1, 1, 3, 5]) == True", "assert is_sorted([4, 3, 5, 6, 5, 3]) == False", "assert is_sorted([1, 3, 5, 5, 7]) == True", "assert is_sorted([5, 4, 6, 7, 1, 5]) == False", "assert is_sorted([4, 5, 8, 4, 2, 7]) == False", "assert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "assert is_sorted([5, 5, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([6, 1, 3, 6, 3, 7]) == False", "assert is_sorted([1, 1, 1, 2, 5, 8]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "assert is_sorted([3, 7, 7, 6, 6, 7]) == False", "assert is_sorted([10]) == True", "assert is_sorted([3, 3, 4, 6, 7, 8]) == True", "assert is_sorted([2, 2, 2, 5, 8, 11]) == False", "assert is_sorted([1, 2, 3, 3, 7, 9]) == True", "assert is_sorted([2, 4, 2, 9, 10]) == False", "assert is_sorted([3, 4, 6, 7]) == True", "assert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "assert is_sorted([1, 2, 3, 5, 5, 8]) == True", "assert is_sorted([6, 1, 2, 3, 3, 3]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "assert is_sorted([1, 3, 3, 4, 5]) == True", "assert is_sorted([1, 4, 4, 4, 5]) == False", "assert is_sorted([3, 2, 2, 2, 3]) == False", "assert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([4]) == True", "assert is_sorted([5, 7, 4, 2, 2, 4]) == False", "assert is_sorted([6]) == True", "assert is_sorted([3, 7, 4, 8, 1, 4]) == False", "assert is_sorted([1, 6, 3]) == False", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([6, 2, 3, 5, 2, 7]) == False", "assert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "assert is_sorted([1, 5, 5, 6, 6, 9]) == True", "assert is_sorted([2, 3, 4, 4, 8, 10]) == True", "assert is_sorted([1, 5, 5, 6, 9]) == True", "assert is_sorted([1, 2, 3, 4]) == True", "assert is_sorted([2, 4, 5]) == True", "assert is_sorted([7]) == True", "assert is_sorted([2, 2, 3, 3, 6, 7]) == True", "assert is_sorted([3, 3, 6, 9, 9]) == True", "assert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "assert is_sorted([5, 3, 3, 3, 10]) == False", "assert is_sorted([1, 5, 3, 4, 3]) == False", "assert is_sorted([2, 4, 4]) == True", "assert is_sorted([1, 1, 2, 4, 5, 5]) == True", "assert is_sorted([2, 5, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "assert is_sorted([1, 2, 3, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 7, 8]) == True", "assert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 1, 1, 7, 3, 8]) == False", "assert is_sorted([3, 8, 4, 4, 10]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "assert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "assert is_sorted([2, 5, 6, 8]) == True", "assert is_sorted([4, 5, 7, 8]) == True", "assert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "assert is_sorted([3]) == True", "assert is_sorted([3, 3, 3, 3, 5, 6]) == False", "assert is_sorted([3, 6, 3]) == False", "assert is_sorted([1, 3, 4, 4, 5, 5]) == True", "assert is_sorted([3, 1, 8, 4, 7, 4]) == False", "assert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "assert is_sorted([1, 4, 5, 5, 7, 8]) == True", "assert is_sorted([1, 4, 6, 1, 6, 7]) == False", "assert is_sorted([2, 3, 6, 7, 7]) == True", "assert is_sorted([5]) == True", "assert is_sorted([]) == True", "assert is_sorted([3, 2, 6, 3, 6, 4]) == False", "assert is_sorted([2, 5, 2, 2, 2, 7]) == False", "assert is_sorted([2, 6, 3, 9, 1]) == False", "assert is_sorted([1, 1, 1, 3, 4]) == False", "assert is_sorted([8]) == True", "assert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "assert is_sorted([2, 4, 5, 7]) == True", "assert is_sorted([3, 1, 3, 2, 1]) == False", "assert is_sorted([3, 3, 4, 7, 8, 9]) == True", "assert is_sorted([1, 5, 6, 6, 7, 7]) == True", "assert is_sorted([6, 7, 3, 4, 8, 6]) == False", "assert is_sorted([1, 8, 6, 7, 8]) == False"], "nl": "\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    ", "func": "def is_sorted(lst):", "examples": "Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ", "repair_prompt": ["def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume no negative numbers and only integers. Consider edge cases such as an empty list or a list with a single element.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Determines if the list is sorted in ascending order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        return True  # An empty list is considered sorted\n\n    count_dict = {}\n    previous_value = lst[0]\n\n    for i, value in enumerate(lst):\n        # Check if the list is sorted\n        if i > 0 and value < previous_value:\n            return False\n        previous_value = value\n\n        # Count occurrences of each number\n        if value in count_dict:\n            count_dict[value] += 1\n            if count_dict[value] > 2:\n                return False\n        else:\n            count_dict[value] = 1\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        # If the list is empty or has only one element, it is trivially sorted.\n        return True\n\n    # Initialize a dictionary to count occurrences of each number.\n    count_dict = {}\n\n    # Iterate through the list to check sorting and count occurrences.\n    for i in range(len(lst) - 1):\n        # Check if the current element is greater than the next element.\n        if lst[i] > lst[i + 1]:\n            return False\n\n        # Count occurrences of the current element.\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # If any number appears more than twice, return False.\n        if count_dict[lst[i]] > 2:\n            return False\n\n    # Check the last element for occurrence count.\n    last_element = lst[-1]\n    if last_element in count_dict:\n        count_dict[last_element] += 1\n    else:\n        count_dict[last_element] = 1\n\n    if count_dict[last_element] > 2:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted\n        return True\n\n    # Initialize a counter for duplicate occurrences\n    duplicate_count = 1\n\n    # Iterate through the list to check order and duplicates\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        if lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous, increment the duplicate count\n            duplicate_count += 1\n            if duplicate_count > 2:\n                # If any number appears more than twice, return False\n                return False\n        else:\n            # Reset duplicate count if the current element is different from the previous\n            duplicate_count = 1\n\n    # If all checks pass, the list is sorted and no number appears more than twice\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if a list of integers is sorted in ascending order and contains no more than one duplicate of the same number.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and contains no more than one duplicate of the same number, False otherwise.\n    \"\"\"\n    # Handle edge cases for empty list or single-element list\n    if len(lst) <= 1:\n        return True\n\n    # Iterate through the list to check sorting and duplicates\n    for i in range(1, len(lst)):\n        # Check if the current element is less than the previous one\n        if lst[i] < lst[i - 1]:\n            return False\n        # Check for more than one duplicate\n        if i > 1 and lst[i] == lst[i - 1] == lst[i - 2]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and contains no more than one duplicate of any number.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and contains no more than one duplicate of any number.\n              False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and has no duplicates.\n        return True\n\n    # Iterate through the list to check for sorting and duplicates.\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous one, the list is not sorted.\n            return False\n\n    # Check for duplicates by converting the list to a set and comparing lengths.\n    # A set automatically removes duplicates, so if the length of the set is less than\n    # the length of the list, there are duplicates.\n    if len(lst) - len(set(lst)) > 1:\n        # More than one duplicate found.\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and meets the condition of no duplicates.\n        return True\n\n    # Iterate through the list to check if it is sorted and count occurrences of each number.\n    previous_number = lst[0]\n    count = 1\n\n    for i in range(1, len(lst)):\n        current_number = lst[i]\n\n        # Check if the list is sorted in ascending order.\n        if current_number < previous_number:\n            return False\n\n        # Check for duplicates.\n        if current_number == previous_number:\n            count += 1\n            if count > 2:\n                return False\n        else:\n            count = 1\n\n        previous_number = current_number\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and contains no consecutive duplicates.\n\n    Args:\n        lst (list[int]): A list of integers to be checked.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and contains no consecutive duplicates,\n              False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Iterate through the list to check order and duplicates\n    for i in range(1, len(lst)):\n        # Check if the current element is less than the previous one\n        if lst[i] < lst[i - 1]:\n            return False\n        # Check if the current element is the same as the previous one\n        if lst[i] == lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if len(lst) <= 1:\n        # An empty list or a single-element list is considered sorted\n        return True\n\n    # Iterate through the list to check sorting and duplicate constraints\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        if i > 1 and lst[i] == lst[i - 1] == lst[i - 2]:\n            # If any number appears more than twice consecutively, return False\n            return False\n\n    # If no issues found, the list is sorted and meets the constraints\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and contains no more than one duplicate of any number.\n\n    Args:\n        lst (list[int]): A list of integers with no negative numbers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and contains no more than one duplicate of any number,\n              otherwise False.\n    \"\"\"\n    if len(lst) <= 1:\n        # An empty list or a single-element list is trivially sorted.\n        return True\n\n    # Iterate through the list to check sorting and duplicates.\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous one, the list is not sorted.\n            return False\n\n    # Check for duplicates by using a set to track seen numbers.\n    seen = set()\n    for num in lst:\n        if num in seen:\n            # If a number is already in the set, it means we have more than one duplicate.\n            return False\n        seen.add(num)\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, else False.\n    \"\"\"\n    if not lst or len(lst) == 1:\n        # An empty list or a single-element list is trivially sorted.\n        return True\n\n    # Iterate through the list to check if it is sorted in ascending order.\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Count occurrences of each number.\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n        # If any number appears more than twice, return False.\n        if count_dict[num] > 2:\n            return False\n\n    return True\n"], "plans": ["requirement analysis:\nThe function must determine if a list is sorted in ascending order while ensuring no number appears more than twice. It should handle edge cases like empty lists or single-element lists efficiently.\nrequirement pool:\n- Implement the main sorting check logic\n- Handle duplicate numbers correctly\n- Optimize for performance with large lists\n- Ensure compatibility with Python's list data structure\n- Provide clear error messages for invalid inputs\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also count occurrences of each number to ensure no number appears more than twice. This approach will efficiently handle the requirements without needing additional libraries, as the built-in capabilities of Python are sufficient for this task.\n", "requirement analysis:\nThe function must determine if a list is sorted in ascending order while ensuring no number appears more than twice. It should handle edge cases like empty lists or single-element lists efficiently.\nrequirement pool:\n- Implement the main sorting check logic.\n- Ensure the function handles duplicates correctly.\n- Optimize for performance with large lists.\n- Include comprehensive test cases for edge scenarios.\n- Document the function usage and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also count occurrences of each number to ensure no number appears more than twice. This approach will efficiently handle edge cases such as empty lists or single-element lists.\n", "requirement analysis:\nThe function must determine if a list is sorted in ascending order while ensuring no number appears more than twice. It should handle edge cases like empty lists or single-element lists efficiently.\nrequirement pool:\n- Implement the main sorting check logic.\n- Ensure the function handles duplicates correctly.\n- Optimize for performance with large lists.\n- Include comprehensive test cases for edge scenarios.\n- Document the function usage and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than twice. We will handle edge cases such as empty lists and single-element lists. The function will be efficient for large lists by using a single pass through the list.\n", "requirement analysis:\nThe function should accurately determine if a list is sorted in ascending order while ensuring no more than one duplicate of the same number exists. It should handle edge cases like empty lists and single-element lists effectively.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure no more than one duplicate of the same number\n- Handle edge cases like empty and single-element lists\n- Provide clear feedback on sorting status\n- Optimize for performance\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than once. We will handle edge cases such as empty lists and single-element lists by returning True for these cases. The function will be simple and efficient, leveraging Python's built-in capabilities without the need for additional libraries.\n", "requirement analysis:\nThe function should accurately determine if a list is sorted in ascending order while also checking for duplicate numbers. It must handle edge cases such as empty lists and single-element lists effectively.\nrequirement pool:\n- Implement sorting check functionality\n- Implement duplicate number check\n- Handle empty list edge case\n- Handle single-element list edge case\n- Optimize for large lists\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and also checks for duplicate numbers. The function will handle edge cases such as empty lists and single-element lists. We will use Python's built-in capabilities to achieve this without any additional libraries, as the requirements are straightforward and do not necessitate complex data structures or algorithms.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than twice. It should handle edge cases like empty lists or lists with a single element. The function should be efficient and handle large lists quickly.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure no number appears more than twice\n- Optimize for performance with large lists\n- Handle edge cases like empty or single-element lists\n- Provide detailed error messages for debugging\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than twice. The function will handle edge cases such as empty lists or lists with a single element. We will use Python's built-in capabilities for list iteration and comparison to achieve this efficiently.\n", "requirement analysis:\nThe function should accurately determine if a list is sorted in ascending order while ensuring no more than one duplicate of any number exists. It should handle edge cases like empty lists and single-element lists effectively.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate constraint is enforced\n- Handle edge cases like empty and single-element lists\n- Optimize for performance\n- Provide clear documentation and examples\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and also ensure that no number appears more than once consecutively. This approach will efficiently handle the constraints and edge cases specified, such as empty lists and single-element lists.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in ascending order while checking for duplicate occurrences. It should handle edge cases like empty lists and single-element lists. The function should be efficient and provide clear feedback for invalid inputs.\nrequirement pool:\n- Implement sorting check functionality\n- Include duplicate occurrence validation\n- Optimize for large list performance\n- Handle edge cases like empty and single-element lists\n- Provide user-friendly error messages\nWe will implement a function that checks if a list of integers is sorted in ascending order and ensures that no number appears more than twice. The function will handle edge cases such as empty lists and single-element lists. We will use Python's built-in capabilities for list iteration and comparison to achieve this efficiently. The function will also provide feedback on why a list is not considered sorted if applicable.\n", "requirement analysis:\nThe function should accurately determine if a list is sorted in ascending order while checking for duplicate numbers. It must handle edge cases such as empty lists and single-element lists efficiently.\nrequirement pool:\n- Implement sorting check functionality\n- Handle duplicate numbers correctly\n- Optimize for performance\n- Ensure compatibility with different list sizes\n- Provide user feedback\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also check for more than one duplicate of the same number. The function will handle edge cases such as empty lists and single-element lists by returning True, as they are trivially sorted. We will use Python's built-in capabilities to ensure the function is efficient and straightforward.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and handle duplicates by returning False if more than one duplicate exists. It should efficiently handle edge cases like empty or single-element lists.\nrequirement pool:\n- Implement the main function to check if a list is sorted.\n- Ensure the function returns False for lists with more than one duplicate.\n- Optimize the function for performance with large lists.\n- Handle edge cases such as empty or single-element lists.\n- Provide comprehensive test cases for various scenarios.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. The function will also count occurrences of each number to ensure no number appears more than twice. We will handle edge cases such as empty lists and single-element lists by returning True, as they are trivially sorted. The function will strictly enforce integer-only lists as per the original requirements.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 0.9, 1.0, 0.7, 1.0, 0.7, 1.0], "pass_results": [true, true, true, true, false, true, false, true, false, true], "pass_test_cases_num": [110, 110, 110, 110, 99, 110, 77, 110, 77, 110], "completion": "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, else False.\n    \"\"\"\n    if not lst or len(lst) == 1:\n        # An empty list or a single-element list is trivially sorted.\n        return True\n\n    # Iterate through the list to check if it is sorted in ascending order.\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # Count occurrences of each number.\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n        # If any number appears more than twice, return False.\n        if count_dict[num] > 2:\n            return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 7, "round": 273, "mutate_method": "add_1_sentence_at_end", "parent_index": 170}
