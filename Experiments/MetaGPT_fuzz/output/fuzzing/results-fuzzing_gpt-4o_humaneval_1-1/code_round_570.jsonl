{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume there are no negative numbers. Only integers are included in the list.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": ["def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5, 6, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 4, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 7, 4, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 2, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 5, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 4, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8, 1, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 3, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 5, 6, 5, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 5, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 4, 6, 7, 1, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([4, 5, 8, 4, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 5, 2, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 1, 3, 6, 3, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 2, 5, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 2, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 7, 7, 6, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([10]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 6, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 2, 5, 8, 11]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 2, 9, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 4, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 5, 5, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 1, 2, 3, 3, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 3, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 4, 4, 5]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 2, 2, 2, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([4]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 7, 4, 2, 2, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([6]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 7, 4, 8, 1, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([6, 2, 3, 5, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 4, 4, 8, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 5, 6, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 2, 3, 3, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 6, 9, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "def check(is_sorted):\n\tassert is_sorted([5, 3, 3, 3, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 5, 3, 4, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 4, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 2, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 5, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 3, 3, 4]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 2, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 4, 5, 6]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 7, 3, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 8, 4, 4, 10]) == False", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 6, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([4, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([3]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 3, 3, 3, 5, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 6, 3]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 3, 4, 4, 5, 5]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 8, 4, 7, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 4, 5, 5, 7, 8]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 4, 6, 1, 6, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 3, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([5]) == True", "def check(is_sorted):\n\tassert is_sorted([]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 2, 6, 3, 6, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 5, 2, 2, 2, 7]) == False", "def check(is_sorted):\n\tassert is_sorted([2, 6, 3, 9, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 1, 1, 3, 4]) == False", "def check(is_sorted):\n\tassert is_sorted([8]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([2, 4, 5, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([3, 1, 3, 2, 1]) == False", "def check(is_sorted):\n\tassert is_sorted([3, 3, 4, 7, 8, 9]) == True", "def check(is_sorted):\n\tassert is_sorted([1, 5, 6, 6, 7, 7]) == True", "def check(is_sorted):\n\tassert is_sorted([6, 7, 3, 4, 8, 6]) == False", "def check(is_sorted):\n\tassert is_sorted([1, 8, 6, 7, 8]) == False"], "test_case_list": ["assert is_sorted([1, 1, 3, 6, 7, 8]) == True", "assert is_sorted([6, 2, 2, 3, 10, 4, 6]) == False", "assert is_sorted([2, 3, 3, 5]) == True", "assert is_sorted([1, 4, 4, 5, 6, 6, 10]) == True", "assert is_sorted([3, 7, 5]) == False", "assert is_sorted([1, 1, 3, 5, 6, 6]) == True", "assert is_sorted([5, 6, 3]) == False", "assert is_sorted([3, 4, 4, 4, 4, 7]) == False", "assert is_sorted([1, 5, 7, 4, 4, 2]) == False", "assert is_sorted([2, 2, 6, 8]) == True", "assert is_sorted([3, 4, 6, 7, 7]) == True", "assert is_sorted([3, 3, 5, 7, 1, 5]) == False", "assert is_sorted([2, 4, 8, 9]) == True", "assert is_sorted([6, 4, 4]) == False", "assert is_sorted([8, 1, 2]) == False", "assert is_sorted([1, 3, 4, 5]) == True", "assert is_sorted([3, 6, 3, 9, 10, 4, 10]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 3, 4, 5, 8]) == True", "assert is_sorted([3, 2, 1]) == False", "assert is_sorted([1, 1, 3, 5]) == True", "assert is_sorted([4, 3, 5, 6, 5, 3]) == False", "assert is_sorted([1, 3, 5, 5, 7]) == True", "assert is_sorted([5, 4, 6, 7, 1, 5]) == False", "assert is_sorted([4, 5, 8, 4, 2, 7]) == False", "assert is_sorted([2, 5, 4, 1, 1, 8, 9]) == False", "assert is_sorted([5, 5, 2, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([6, 1, 3, 6, 3, 7]) == False", "assert is_sorted([1, 1, 1, 2, 5, 8]) == False", "assert is_sorted([1, 2, 2, 2, 3, 4]) == False", "assert is_sorted([2, 4, 6, 4, 3, 6, 4]) == False", "assert is_sorted([3, 7, 7, 6, 6, 7]) == False", "assert is_sorted([10]) == True", "assert is_sorted([3, 3, 4, 6, 7, 8]) == True", "assert is_sorted([2, 2, 2, 5, 8, 11]) == False", "assert is_sorted([1, 2, 3, 3, 7, 9]) == True", "assert is_sorted([2, 4, 2, 9, 10]) == False", "assert is_sorted([3, 4, 6, 7]) == True", "assert is_sorted([4, 3, 6, 6, 4, 1, 9]) == False", "assert is_sorted([1, 2, 3, 5, 5, 8]) == True", "assert is_sorted([6, 1, 2, 3, 3, 3]) == False", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 2, 4, 4, 6, 8]) == True", "assert is_sorted([1, 3, 3, 4, 5]) == True", "assert is_sorted([1, 4, 4, 4, 5]) == False", "assert is_sorted([3, 2, 2, 2, 3]) == False", "assert is_sorted([3, 5, 5, 6, 7, 8, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([4]) == True", "assert is_sorted([5, 7, 4, 2, 2, 4]) == False", "assert is_sorted([6]) == True", "assert is_sorted([3, 7, 4, 8, 1, 4]) == False", "assert is_sorted([1, 6, 3]) == False", "assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == False", "assert is_sorted([6, 2, 3, 5, 2, 7]) == False", "assert is_sorted([1, 2, 4, 4, 6, 7, 10]) == True", "assert is_sorted([1, 5, 5, 6, 6, 9]) == True", "assert is_sorted([2, 3, 4, 4, 8, 10]) == True", "assert is_sorted([1, 5, 5, 6, 9]) == True", "assert is_sorted([1, 2, 3, 4]) == True", "assert is_sorted([2, 4, 5]) == True", "assert is_sorted([7]) == True", "assert is_sorted([2, 2, 3, 3, 6, 7]) == True", "assert is_sorted([3, 3, 6, 9, 9]) == True", "assert is_sorted([1, 5, 6, 7, 9, 10, 10]) == True", "assert is_sorted([5, 3, 3, 3, 10]) == False", "assert is_sorted([1, 5, 3, 4, 3]) == False", "assert is_sorted([2, 4, 4]) == True", "assert is_sorted([1, 1, 2, 4, 5, 5]) == True", "assert is_sorted([2, 5, 4]) == False", "assert is_sorted([1, 2, 2, 3, 3, 4]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == True", "assert is_sorted([6, 3, 7, 3, 5, 6, 6]) == False", "assert is_sorted([1, 2, 3, 3, 3, 4]) == False", "assert is_sorted([1, 2, 2, 7, 8]) == True", "assert is_sorted([2, 1, 1, 7, 8, 9, 3]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6]) == True", "assert is_sorted([1, 1, 1, 7, 3, 8]) == False", "assert is_sorted([3, 8, 4, 4, 10]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 3, 3, 5, 7, 9]) == True", "assert is_sorted([2, 6, 1, 4, 5, 4, 2]) == False", "assert is_sorted([2, 5, 6, 8]) == True", "assert is_sorted([4, 5, 7, 8]) == True", "assert is_sorted([3, 4, 4, 4, 6, 7, 8]) == False", "assert is_sorted([3]) == True", "assert is_sorted([3, 3, 3, 3, 5, 6]) == False", "assert is_sorted([3, 6, 3]) == False", "assert is_sorted([1, 3, 4, 4, 5, 5]) == True", "assert is_sorted([3, 1, 8, 4, 7, 4]) == False", "assert is_sorted([5, 7, 5, 7, 10, 6, 8]) == False", "assert is_sorted([1, 4, 5, 5, 7, 8]) == True", "assert is_sorted([1, 4, 6, 1, 6, 7]) == False", "assert is_sorted([2, 3, 6, 7, 7]) == True", "assert is_sorted([5]) == True", "assert is_sorted([]) == True", "assert is_sorted([3, 2, 6, 3, 6, 4]) == False", "assert is_sorted([2, 5, 2, 2, 2, 7]) == False", "assert is_sorted([2, 6, 3, 9, 1]) == False", "assert is_sorted([1, 1, 1, 3, 4]) == False", "assert is_sorted([8]) == True", "assert is_sorted([2, 3, 3, 5, 5, 6, 7]) == True", "assert is_sorted([2, 4, 5, 7]) == True", "assert is_sorted([3, 1, 3, 2, 1]) == False", "assert is_sorted([3, 3, 4, 7, 8, 9]) == True", "assert is_sorted([1, 5, 6, 6, 7, 7]) == True", "assert is_sorted([6, 7, 3, 4, 8, 6]) == False", "assert is_sorted([1, 8, 6, 7, 8]) == False"], "nl": "\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    ", "func": "def is_sorted(lst):", "examples": "Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    ", "repair_prompt": ["def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list has more than 1 duplicate of the same number, return False. Assume there are no negative numbers. Only integers are included in the list.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list of integers is sorted in ascending order and no number appears more than once consecutively.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted in ascending order and no number appears more than once consecutively, False otherwise.\n    \"\"\"\n    if not lst:  # Handle empty list case\n        return True\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:  # Check if the list is sorted in ascending order\n            return False\n        if lst[i] == lst[i + 1]:  # Check for consecutive duplicates\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if the list is sorted in ascending order and no number appears more than twice.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        return True\n\n    previous_value = lst[0]\n    count = 1\n\n    for i in range(1, len(lst)):\n        current_value = lst[i]\n\n        # Check if the list is sorted\n        if current_value < previous_value:\n            return False\n\n        # Check for duplicates\n        if current_value == previous_value:\n            count += 1\n            if count > 2:\n                return False\n        else:\n            count = 1\n\n        previous_value = current_value\n\n    return True\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order.\n    If list has more than 1 duplicate of the same number, return False.\n    Assume there are no negative numbers. Only integers are included in the list.\n    \n    Parameters:\n    lst (list[int]): A list of positive integers.\n    \n    Returns:\n    bool: True if the list is sorted in ascending order and has no more than one duplicate of any number, False otherwise.\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    # Count duplicates using collections.Counter\n    count = Counter(lst)\n    \n    # Check if any number appears more than once\n    for value in count.values():\n        if value > 1:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted\n        return True\n\n    # Initialize a dictionary to count occurrences of each number\n    count_dict = {}\n\n    # Iterate through the list to check order and count occurrences\n    for i in range(len(lst)):\n        # Count occurrences of the current number\n        if lst[i] in count_dict:\n            count_dict[lst[i]] += 1\n        else:\n            count_dict[lst[i]] = 1\n\n        # Check if any number appears more than twice\n        if count_dict[lst[i]] > 2:\n            return False\n\n        # Check if the list is sorted in ascending order\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Checks if a list of integers is sorted in ascending order and ensures no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of positive integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, otherwise False.\n    \"\"\"\n    if not lst:\n        return True  # An empty list is considered sorted\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n\n    # Check if any number appears more than twice\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:\n                return False\n        else:\n            count[num] = 1\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and has no consecutive duplicates.\n\n    Args:\n        lst (list[int]): A list of non-negative integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and has no consecutive duplicates,\n              False otherwise.\n    \"\"\"\n    # Handle edge case for empty list\n    if not lst:\n        return True\n\n    # Iterate through the list to check sorting and consecutive duplicates\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1] or lst[i] == lst[i - 1]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Determines if a list of positive integers is sorted in ascending order\n    and ensures that no number appears more than twice.\n\n    Args:\n        lst: A list of positive integers.\n\n    Returns:\n        True if the list is sorted in ascending order and no number appears\n        more than twice, otherwise False.\n    \"\"\"\n    if not lst:\n        # An empty list is trivially sorted.\n        return True\n\n    previous = lst[0]\n    count = 1\n\n    for i in range(1, len(lst)):\n        current = lst[i]\n        if current < previous:\n            # If the current element is less than the previous, the list is not sorted.\n            return False\n        if current == previous:\n            count += 1\n            if count > 2:\n                # If any number appears more than twice, return False.\n                return False\n        else:\n            # Reset count for a new number.\n            count = 1\n        previous = current\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"Check if the list is sorted in ascending order and no number appears more than twice.\n\n    Args:\n        lst (list[int]): A list of positive integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and no number appears more than twice, otherwise False.\n    \"\"\"\n    if not lst:\n        # An empty list is trivially sorted\n        return True\n\n    # Initialize a counter for duplicate occurrences\n    current_count = 1\n\n    # Iterate through the list to check sorting and duplicate conditions\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous, the list is not sorted\n            return False\n        if lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous, increment the duplicate counter\n            current_count += 1\n            if current_count > 2:\n                # If any number appears more than twice, return False\n                return False\n        else:\n            # Reset the duplicate counter if the current element is different\n            current_count = 1\n\n    # If all checks pass, the list is sorted and no number appears more than twice\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Given a list of positive integers, return whether or not they are sorted in ascending order.\n    If the list has more than one duplicate of the same number, return False.\n    Assumes there are no negative numbers.\n\n    Parameters:\n    lst (list[int]): A list of positive integers.\n\n    Returns:\n    bool: True if the list is sorted in ascending order and contains no more than one duplicate of any number, False otherwise.\n    \"\"\"\n    # Handle edge cases for empty list or list with a single element\n    if len(lst) <= 1:\n        return True\n\n    # Initialize a set to track seen numbers\n    seen_numbers = set()\n\n    # Traverse the list to check sorting and duplicates\n    for i in range(len(lst) - 1):\n        # Check if the current number is greater than the next number (not sorted)\n        if lst[i] > lst[i + 1]:\n            return False\n        \n        # Check for duplicates\n        if lst[i] in seen_numbers:\n            return False\n        seen_numbers.add(lst[i])\n\n    # Check the last element for duplicates\n    if lst[-1] in seen_numbers:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending order and contains no more than one duplicate of the same number.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and contains no more than one duplicate of the same number, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and has no duplicates.\n        return True\n\n    # Iterate through the list to check sorting and duplicates\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous one, the list is not sorted.\n            return False\n        if lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous one, check for further duplicates.\n            if i + 1 < len(lst) and lst[i] == lst[i + 1]:\n                # If there is another duplicate, return False.\n                return False\n\n    # If no issues were found, the list is sorted and has no more than one duplicate of the same number.\n    return True\n"], "plans": ["requirement analysis:\nThe function must check if a list of integers is sorted in ascending order and ensure that no number appears more than once consecutively. It should handle edge cases such as single-element lists and assume all numbers are non-negative.\nrequirement pool:\n- Implement the main sorting check functionality.\n- Ensure the function returns False for lists with more than one duplicate of the same number.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases for edge scenarios.\n- Provide detailed documentation and examples.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than once consecutively. We will use Python's built-in capabilities to achieve this without any additional libraries, as the requirements are straightforward and do not necessitate complex data structures or algorithms.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no number appears more than twice. It should handle only non-negative integers and be efficient for large lists.\nrequirement pool:\n- Implement the main sorting check logic\n- Ensure duplicate handling logic is correct\n- Optimize for performance with large lists\n- Add comprehensive test cases\n- Document the function usage and edge cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than twice. We will use Python's built-in capabilities for iteration and comparison to achieve this efficiently. The function will handle only non-negative integers as specified.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in ascending order and ensure no number appears more than once. It should handle only positive integers and be optimized for performance.\nrequirement pool:\n- Implement sorting check functionality\n- Implement duplicate check functionality\n- Optimize for large list performance\n- Ensure compatibility with Python integer lists\n- Provide clear error messages for invalid input\nWe will implement a function that checks if a list of integers is sorted in ascending order and ensures no number appears more than once. We will use Python's built-in capabilities for list operations and leverage the collections module to efficiently count duplicates. The function will handle edge cases such as empty lists or lists with a single element by returning True, as they are trivially sorted.\n", "requirement analysis:\nThe function must determine if a list is sorted in ascending order and ensure no number appears more than twice. It should handle only non-negative integers and be optimized for performance.\nrequirement pool:\n- Implement the main function to check if a list is sorted.\n- Ensure the function returns False for lists with more than one duplicate of the same number.\n- Optimize the function for performance with large lists.\n- Add comprehensive test cases to validate functionality.\n- Document the function usage and edge cases.\nWe will implement a function that iterates through the list to check if it is sorted in ascending order. During the iteration, we will also count occurrences of each number to ensure no number appears more than twice. This approach will efficiently handle large lists without the need for additional sorting operations.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in ascending order while ensuring no number appears more than twice. It should handle only positive integers and be optimized for performance.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate number constraint\n- Optimize for large list performance\n- Handle edge cases with single element lists\n- Provide user feedback for unsorted lists\nWe will implement a function that checks if a list of integers is sorted in ascending order and ensures no number appears more than twice. We will use Python's built-in capabilities for list operations to achieve this efficiently. The function will iterate through the list to check sorting and count occurrences of each number, ensuring performance optimization for large lists.\n", "requirement analysis:\nThe function must check if a list of integers is sorted in ascending order and ensure no number appears more than once consecutively. It should handle edge cases like single-element lists and large lists efficiently. The function should only accept non-negative integers.\nrequirement pool:\n- Implement the main sorting check functionality\n- Ensure no number appears more than once consecutively\n- Optimize for performance with large lists\n- Handle edge cases like single-element lists\n- Provide user feedback for invalid inputs\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than once consecutively. We will use Python's built-in capabilities to handle the list operations efficiently. The function will also handle edge cases such as single-element lists and will return False for lists with more than one duplicate of the same number. The function will only accept lists of non-negative integers.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in ascending order while ensuring no more than one duplicate of any number exists. It should handle only positive integers and be optimized for performance.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate number handling\n- Optimize for large list performance\n- Provide clear error messages\n- Include comprehensive test cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and ensure that no number appears more than twice. This approach will efficiently handle large lists by using a single pass through the list, which is O(n) in complexity. We will not use any external libraries as the task can be accomplished with basic Python operations.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and ensure no more than one duplicate of the same number exists. It should handle only positive integers and be optimized for performance.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure duplicate handling\n- Optimize for large lists\n- Test with various list sizes\n- Document edge cases\nWe will implement a function that iterates through the list to check if it is sorted in ascending order and also ensure that no number appears more than twice. This approach will efficiently handle large lists by using a single pass through the list, which is O(n) in complexity. We will not use any external libraries as the task can be accomplished with basic Python constructs.\n", "requirement analysis:\nThe function must accurately determine if a list is sorted in ascending order and ensure no number appears more than once. It should handle only positive integers and be optimized for performance with large lists.\nrequirement pool:\n- Implement sorting check functionality\n- Ensure no more than one duplicate of the same number\n- Optimize for large list performance\n- Handle only positive integers\n- Provide clear error messages for invalid input\nWe will implement a function that checks if a list of positive integers is sorted in ascending order and ensures no number appears more than once. We will use Python's built-in capabilities for efficient list traversal and comparison, avoiding external libraries to maintain simplicity and performance. The function will handle edge cases such as empty lists or lists with a single element by returning True, as they are trivially sorted.\n", "requirement analysis:\nThe function must check if a list is sorted in ascending order and handle duplicates by returning False if more than one duplicate exists. It should assume all numbers are non-negative integers.\nrequirement pool:\n- Implement the main sorting check functionality.\n- Handle duplicate numbers correctly.\n- Optimize for performance with large lists.\n- Provide comprehensive test cases.\n- Document the function usage and edge cases.\nWe will implement a function that checks if a list of non-negative integers is sorted in ascending order. The function will also ensure that no number appears more than once consecutively. We will use Python's built-in capabilities to efficiently iterate through the list and check the conditions. The function will be optimized for performance with large lists by minimizing the number of iterations and comparisons.\n"], "scores": [0.7, 1.0, 0.7, 1.0, 1.0, 0.7, 1.0, 1.0, 0.7, 1.0], "pass_results": [false, true, false, true, true, false, true, true, false, true], "pass_test_cases_num": [77, 110, 77, 110, 110, 77, 110, 110, 77, 110], "completion": "from typing import List\n## main.py\n\ndef is_sorted(lst: list[int]) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending order and contains no more than one duplicate of the same number.\n\n    Parameters:\n    lst (list[int]): A list of non-negative integers.\n\n    Returns:\n    bool: True if the list is sorted and contains no more than one duplicate of the same number, False otherwise.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted and has no duplicates.\n        return True\n\n    # Iterate through the list to check sorting and duplicates\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            # If the current element is less than the previous one, the list is not sorted.\n            return False\n        if lst[i] == lst[i - 1]:\n            # If the current element is equal to the previous one, check for further duplicates.\n            if i + 1 < len(lst) and lst[i] == lst[i + 1]:\n                # If there is another duplicate, return False.\n                return False\n\n    # If no issues were found, the list is sorted and has no more than one duplicate of the same number.\n    return True\n", "passed": true, "pass": true, "pass_num": 6, "round": 570, "mutate_method": "expand_one2two", "parent_index": 232}
