{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The greatest common divisor is the largest positive integer that divides both of the numbers without leaving a remainder. This number can also be defined as the greatest among the common divisors of a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": ["def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 16) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(47, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(45, 15) == 15", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 6) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 12) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 63) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 64) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 2) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(53, 14) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(149, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 2) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 12) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 12) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 5) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 18) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 12) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 12) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 9) == 9", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 57) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(5, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(142, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 63) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 65) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(145, 55) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 3) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 20) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(141, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(7, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(51, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 16) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(46, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 3) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(10, 15) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 20) == 5", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 4) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(1, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(13, 17) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 58) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 64) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(3, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(52, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(50, 10) == 10", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 10) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 62) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(144, 60) == 12", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 14) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 59) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 4) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(148, 60) == 4", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(4, 7) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(15, 16) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 13) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 16) == 8", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(54, 19) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 11) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 9) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(12, 14) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(146, 55) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(139, 61) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(147, 65) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(11, 10) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(143, 62) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(140, 63) == 7", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(49, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 15) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(2, 6) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(8, 18) == 2", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(6, 6) == 6", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(48, 15) == 3", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(44, 9) == 1", "def check(greatest_common_divisor):\n\tassert greatest_common_divisor(14, 20) == 2"], "test_case_list": ["assert greatest_common_divisor(6, 16) == 2", "assert greatest_common_divisor(47, 19) == 1", "assert greatest_common_divisor(141, 65) == 1", "assert greatest_common_divisor(45, 15) == 15", "assert greatest_common_divisor(1, 6) == 1", "assert greatest_common_divisor(50, 14) == 2", "assert greatest_common_divisor(53, 16) == 1", "assert greatest_common_divisor(3, 9) == 3", "assert greatest_common_divisor(50, 11) == 1", "assert greatest_common_divisor(48, 12) == 12", "assert greatest_common_divisor(49, 9) == 1", "assert greatest_common_divisor(6, 14) == 2", "assert greatest_common_divisor(141, 63) == 3", "assert greatest_common_divisor(5, 11) == 1", "assert greatest_common_divisor(11, 12) == 1", "assert greatest_common_divisor(12, 13) == 1", "assert greatest_common_divisor(15, 19) == 1", "assert greatest_common_divisor(46, 18) == 2", "assert greatest_common_divisor(4, 12) == 4", "assert greatest_common_divisor(46, 13) == 1", "assert greatest_common_divisor(12, 11) == 1", "assert greatest_common_divisor(11, 17) == 1", "assert greatest_common_divisor(148, 64) == 4", "assert greatest_common_divisor(5, 9) == 1", "assert greatest_common_divisor(5, 2) == 1", "assert greatest_common_divisor(1, 11) == 1", "assert greatest_common_divisor(141, 61) == 1", "assert greatest_common_divisor(53, 14) == 1", "assert greatest_common_divisor(12, 10) == 2", "assert greatest_common_divisor(147, 62) == 1", "assert greatest_common_divisor(2, 4) == 2", "assert greatest_common_divisor(142, 63) == 1", "assert greatest_common_divisor(4, 6) == 2", "assert greatest_common_divisor(149, 64) == 1", "assert greatest_common_divisor(6, 2) == 2", "assert greatest_common_divisor(5, 13) == 1", "assert greatest_common_divisor(148, 58) == 2", "assert greatest_common_divisor(46, 10) == 2", "assert greatest_common_divisor(44, 12) == 4", "assert greatest_common_divisor(5, 12) == 1", "assert greatest_common_divisor(13, 15) == 1", "assert greatest_common_divisor(10, 17) == 1", "assert greatest_common_divisor(2, 7) == 1", "assert greatest_common_divisor(5, 5) == 5", "assert greatest_common_divisor(1, 7) == 1", "assert greatest_common_divisor(48, 18) == 6", "assert greatest_common_divisor(46, 12) == 2", "assert greatest_common_divisor(3, 12) == 3", "assert greatest_common_divisor(54, 9) == 9", "assert greatest_common_divisor(142, 57) == 1", "assert greatest_common_divisor(5, 16) == 1", "assert greatest_common_divisor(142, 55) == 1", "assert greatest_common_divisor(44, 16) == 4", "assert greatest_common_divisor(145, 63) == 1", "assert greatest_common_divisor(144, 59) == 1", "assert greatest_common_divisor(8, 9) == 1", "assert greatest_common_divisor(148, 62) == 2", "assert greatest_common_divisor(49, 16) == 1", "assert greatest_common_divisor(140, 65) == 5", "assert greatest_common_divisor(145, 55) == 5", "assert greatest_common_divisor(1, 3) == 1", "assert greatest_common_divisor(12, 20) == 4", "assert greatest_common_divisor(6, 13) == 1", "assert greatest_common_divisor(141, 59) == 1", "assert greatest_common_divisor(7, 10) == 1", "assert greatest_common_divisor(51, 11) == 1", "assert greatest_common_divisor(12, 16) == 4", "assert greatest_common_divisor(46, 14) == 2", "assert greatest_common_divisor(6, 3) == 3", "assert greatest_common_divisor(14, 13) == 1", "assert greatest_common_divisor(10, 15) == 5", "assert greatest_common_divisor(15, 20) == 5", "assert greatest_common_divisor(6, 17) == 1", "assert greatest_common_divisor(147, 61) == 1", "assert greatest_common_divisor(4, 4) == 4", "assert greatest_common_divisor(1, 9) == 1", "assert greatest_common_divisor(13, 17) == 1", "assert greatest_common_divisor(139, 65) == 1", "assert greatest_common_divisor(144, 58) == 2", "assert greatest_common_divisor(147, 64) == 1", "assert greatest_common_divisor(3, 7) == 1", "assert greatest_common_divisor(52, 19) == 1", "assert greatest_common_divisor(50, 10) == 10", "assert greatest_common_divisor(2, 9) == 1", "assert greatest_common_divisor(44, 10) == 2", "assert greatest_common_divisor(144, 62) == 2", "assert greatest_common_divisor(148, 55) == 1", "assert greatest_common_divisor(144, 60) == 12", "assert greatest_common_divisor(49, 14) == 7", "assert greatest_common_divisor(143, 59) == 1", "assert greatest_common_divisor(6, 4) == 2", "assert greatest_common_divisor(148, 60) == 4", "assert greatest_common_divisor(11, 19) == 1", "assert greatest_common_divisor(4, 7) == 1", "assert greatest_common_divisor(15, 16) == 1", "assert greatest_common_divisor(49, 13) == 1", "assert greatest_common_divisor(8, 16) == 8", "assert greatest_common_divisor(54, 19) == 1", "assert greatest_common_divisor(8, 11) == 1", "assert greatest_common_divisor(8, 6) == 2", "assert greatest_common_divisor(6, 9) == 3", "assert greatest_common_divisor(12, 14) == 2", "assert greatest_common_divisor(146, 55) == 1", "assert greatest_common_divisor(139, 61) == 1", "assert greatest_common_divisor(147, 65) == 1", "assert greatest_common_divisor(11, 10) == 1", "assert greatest_common_divisor(143, 62) == 1", "assert greatest_common_divisor(140, 63) == 7", "assert greatest_common_divisor(49, 15) == 1", "assert greatest_common_divisor(44, 15) == 1", "assert greatest_common_divisor(2, 6) == 2", "assert greatest_common_divisor(8, 18) == 2", "assert greatest_common_divisor(6, 6) == 6", "assert greatest_common_divisor(48, 15) == 3", "assert greatest_common_divisor(44, 9) == 1", "assert greatest_common_divisor(14, 20) == 2"], "nl": " Return a greatest common divisor of two integers a and b\n    ", "func": "def greatest_common_divisor(a: int, b: int) -> int:", "examples": ">>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    ", "repair_prompt": ["def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The greatest common divisor is the largest positive integer that divides both of the numbers without leaving a remainder. This number can also be defined as the greatest among the common divisors of a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''"], "completions": ["from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive, negative, or zero.\n    b (int): Second integer, can be positive, negative, or zero.\n\n    Returns:\n    int: The greatest common divisor of a and b. If both a and b are zero, returns 0 as GCD is undefined.\n    \"\"\"\n    # Handle the case where both inputs are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Use absolute values to handle negative numbers\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\n\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Use the math library's gcd function to calculate the gcd\n    return math.gcd(a, b)\n\n# Unit tests to validate the function's correctness\ndef test_greatest_common_divisor():\n    # Test cases with positive integers\n    assert greatest_common_divisor(48, 18) == 6, \"Test case 1 failed\"\n    assert greatest_common_divisor(100, 10) == 10, \"Test case 2 failed\"\n    \n    # Test cases with one zero input\n    assert greatest_common_divisor(0, 5) == 5, \"Test case 3 failed\"\n    assert greatest_common_divisor(7, 0) == 7, \"Test case 4 failed\"\n    \n    # Test cases with both zero inputs\n    assert greatest_common_divisor(0, 0) == 0, \"Test case 5 failed\"\n    \n    # Test cases with negative integers\n    assert greatest_common_divisor(-48, 18) == 6, \"Test case 6 failed\"\n    assert greatest_common_divisor(48, -18) == 6, \"Test case 7 failed\"\n    assert greatest_common_divisor(-48, -18) == 6, \"Test case 8 failed\"\n    \n    print(\"All test cases passed!\")\n\n# Run the unit tests\nif __name__ == \"__main__\":\n    test_greatest_common_divisor()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \"\"\"\n    # Ensure the function handles negative integers by taking their absolute values\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\ndef main():\n    \"\"\"\n    Main function to demonstrate the usage of greatest_common_divisor function.\n    \"\"\"\n    # Example usage\n    num1 = 56\n    num2 = 98\n    gcd = greatest_common_divisor(num1, num2)\n    print(f\"The greatest common divisor of {num1} and {num2} is {gcd}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(0, 0)\n    0\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(5, 0)\n    5\n    \"\"\"\n    # Handle the case where both inputs are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Use absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Use absolute values to handle negative numbers\n    a = abs(a)\n    b = abs(b)\n\n    # Implementing the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers a and b using the Euclidean algorithm.\n    \n    Args:\n        a (int): First integer\n        b (int): Second integer\n    \n    Returns:\n        int: The greatest common divisor of a and b\n    \n    Raises:\n        TypeError: If either a or b is not an integer.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both a and b must be integers.\")\n    \n    # Ensure the GCD is always positive\n    a, b = abs(a), abs(b)\n    \n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Example usage:\n# gcd = greatest_common_divisor(48, 18)\n# print(gcd)  # Output: 6\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b\n    \"\"\"\n    # Handle edge case where both numbers are zero\n    if a == 0 and b == 0:\n        return 0\n\n    # Use absolute values to handle negative numbers\n    a = abs(a)\n    b = abs(b)\n\n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(-25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are non-negative\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    '''\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n    \n    Parameters:\n    a (int): First integer, can be positive or negative.\n    b (int): Second integer, can be positive or negative.\n    \n    Returns:\n    int: The greatest common divisor of a and b, always positive.\n    \n    Note:\n    If both a and b are zero, the function will return 0 as the GCD.\n    '''\n    # Handle the case where both inputs are zero\n    if a == 0 and b == 0:\n        return 0\n    \n    # Use absolute values to handle negative inputs\n    a = abs(a)\n    b = abs(b)\n    \n    # Implement the Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n", "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b, always positive regardless of input sign.\n    \"\"\"\n    # Ensure both numbers are positive for the calculation\n    a = abs(a)\n    b = abs(b)\n\n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Output: 6\n    print(greatest_common_divisor(-48, 18)) # Output: 6\n    print(greatest_common_divisor(48, -18)) # Output: 6\n    print(greatest_common_divisor(-48, -18))# Output: 6\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user interface should be intuitive, allowing users to easily input numbers and understand the results.\nrequirement pool:\n- Implement the GCD calculation function\n- Design a user-friendly interface for input and output\n- Optimize the function for large integer inputs\n- Provide educational content on how GCD is calculated\n- Ensure compatibility with various devices\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle both positive and negative integers, as well as zero, by taking the absolute value of the inputs. We will use Python's built-in capabilities to ensure optimal performance without the need for additional libraries.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any two integers, including edge cases such as zero inputs. It should be optimized for performance, especially with large integers, and include clear documentation for ease of use.\nrequirement pool:\n- Implement the main gcd calculation logic\n- Optimize for large integer inputs\n- Handle edge cases like zero inputs\n- Provide comprehensive documentation\n- Include unit tests for validation\nWe will use the built-in Python library 'math' which provides an efficient and reliable gcd function. This will ensure accurate calculation and optimized performance for large integer inputs. The function will handle edge cases such as zero inputs by leveraging the properties of the gcd function, where gcd(a, 0) = |a| and gcd(0, b) = |b|. We will also provide comprehensive documentation and unit tests to validate the function's correctness.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user interface should be intuitive, allowing users to easily input numbers and understand the results.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm\n- Design a simple and intuitive user interface\n- Optimize the function for large integer inputs\n- Provide educational content on how the GCD is calculated\n- Ensure compatibility with various input formats\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The Euclidean algorithm repeatedly replaces the larger number by the remainder of the division of the larger number by the smaller number until one of the numbers becomes zero. The other number at this point is the GCD. We will use Python's built-in capabilities to handle large integers efficiently.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers using an efficient algorithm. It should handle edge cases such as zero inputs and large integers. The user interface should be intuitive, providing clear instructions and examples.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Design a simple and intuitive user interface.\n- Optimize the function for performance with large integers.\n- Provide detailed usage instructions and examples.\n- Ensure compatibility with various input formats.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be designed to handle both positive and negative integers, returning the absolute value of the GCD. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor for any pair of integers, including edge cases such as zero and negative numbers. It should be optimized for performance, especially when dealing with large integers, and should be easy to use and understand.\nrequirement pool:\n- Implement the GCD calculation using Euclidean algorithm\n- Handle edge cases like zero and negative numbers\n- Optimize for large integer inputs\n- Provide comprehensive documentation and examples\n- Ensure compatibility with existing Python libraries\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will also handle edge cases such as zero and negative numbers by using the absolute value of the inputs. We will leverage Python's built-in capabilities to ensure optimal performance.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient, especially for large numbers, and provide accurate results. User interaction should be straightforward, with clear input and output processes.\nrequirement pool:\n- Implement the GCD calculation function\n- Optimize the function for large integer inputs\n- Design a user-friendly interface for input and output\n- Provide documentation and usage examples\n- Ensure compatibility with various platforms\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for large integers. The function will handle both positive and negative integers, and zero, by returning the absolute value of the GCD. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor of two integers. The function should be efficient and handle edge cases such as negative numbers and zero. The user should be able to easily input numbers and understand the output.\nrequirement pool:\n- Implement the main GCD calculation function\n- Develop a user-friendly interface for input and output\n- Optimize the function for large integer inputs\n- Provide educational content on how GCD is calculated\n- Ensure compatibility with various input formats\nWe will implement the greatest common divisor (GCD) function using the Euclidean algorithm, which is efficient and well-suited for handling large integers. We will use Python's built-in capabilities to ensure optimal performance. The function will handle edge cases such as negative numbers and zero by taking the absolute value of inputs and returning zero if both inputs are zero.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers using an efficient algorithm, such as the Euclidean algorithm. It should handle edge cases, such as when one or both numbers are zero, and provide clear documentation and examples for users.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Ensure the function handles edge cases correctly\n- Optimize for performance with large integers\n- Provide comprehensive documentation\n- Include examples for user verification\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) of two integers. This algorithm is efficient and well-suited for handling large integers. We will use Python's built-in capabilities to ensure optimal performance. The function will handle edge cases, such as when one or both numbers are zero, and will include comprehensive documentation and examples. We will also clarify the handling of negative integers by taking the absolute value of inputs before computation.\n", "requirement analysis:\nThe function should accurately compute the greatest common divisor of two integers using an efficient algorithm, such as the Euclidean algorithm. It should handle edge cases, including when one or both numbers are zero, and provide clear output.\nrequirement pool:\n- Implement the Euclidean algorithm for GCD calculation\n- Design a simple and intuitive user interface\n- Optimize the function for large integer inputs\n- Provide detailed user instructions and examples\n- Ensure compatibility with various input formats\nWe will implement the Euclidean algorithm for calculating the greatest common divisor (GCD) as it is efficient and well-suited for handling large integers. We will use Python's built-in capabilities to ensure the function is simple and performs well. The function will handle both positive and negative integers by taking the absolute value of the inputs, and it will return a positive GCD. We will provide clear documentation and examples for user guidance.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the greatest common divisor (GCD) of two integers. The function should be efficient, especially for large numbers, and provide accurate results. User interaction should be straightforward, with clear input and output processes.\nrequirement pool:\n- Implement the GCD calculation using the Euclidean algorithm.\n- Optimize the function for performance with large integers.\n- Design a simple and intuitive user interface for input and output.\n- Provide documentation and examples for user guidance.\n- Ensure compatibility with various platforms and devices.\nWe will implement the GCD calculation using the Euclidean algorithm, which is efficient and well-suited for handling large integers. The function will be simple and intuitive, allowing users to input two integers and receive their GCD. We will use Python's built-in capabilities to ensure compatibility and performance.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [116, 116, 116, 116, 116, 116, 116, 116, 116, 116], "completion": "from typing import List\n## main.py\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Calculate the greatest common divisor of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): First integer\n    b (int): Second integer\n\n    Returns:\n    int: The greatest common divisor of a and b, always positive regardless of input sign.\n    \"\"\"\n    # Ensure both numbers are positive for the calculation\n    a = abs(a)\n    b = abs(b)\n\n    # Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(greatest_common_divisor(48, 18))  # Output: 6\n    print(greatest_common_divisor(-48, 18)) # Output: 6\n    print(greatest_common_divisor(48, -18)) # Output: 6\n    print(greatest_common_divisor(-48, -18))# Output: 6\n", "passed": true, "pass": true, "pass_num": 10, "round": 873, "mutate_method": "expand_one2two", "parent_index": 9}
