{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter a list of input strings to find only those that contain a given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": ["def check(filter_by_substring):\n\tassert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "def check(filter_by_substring):\n\tassert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'john') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "def check(filter_by_substring):\n\tassert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "def check(filter_by_substring):\n\tassert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'agw') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'y') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'ii') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "def check(filter_by_substring):\n\tassert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'hm') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "def check(filter_by_substring):\n\tassert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'u') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "def check(filter_by_substring):\n\tassert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "def check(filter_by_substring):\n\tassert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "def check(filter_by_substring):\n\tassert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "def check(filter_by_substring):\n\tassert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "def check(filter_by_substring):\n\tassert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "def check(filter_by_substring):\n\tassert filter_by_substring([], 'p') == []", "def check(filter_by_substring):\n\tassert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "def check(filter_by_substring):\n\tassert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "def check(filter_by_substring):\n\tassert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "def check(filter_by_substring):\n\tassert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "def check(filter_by_substring):\n\tassert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "def check(filter_by_substring):\n\tassert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "def check(filter_by_substring):\n\tassert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "def check(filter_by_substring):\n\tassert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "def check(filter_by_substring):\n\tassert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "def check(filter_by_substring):\n\tassert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "def check(filter_by_substring):\n\tassert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "def check(filter_by_substring):\n\tassert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "def check(filter_by_substring):\n\tassert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "def check(filter_by_substring):\n\tassert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "def check(filter_by_substring):\n\tassert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "def check(filter_by_substring):\n\tassert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "def check(filter_by_substring):\n\tassert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "test_case_list": ["assert filter_by_substring(['ugk', 'lxpl', 'dofffwbjmkjs', 'dakolixjey', 'EKbFGGOve', 'jcu'], 'ak') == ['dakolixjey']", "assert filter_by_substring(['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj'], '') == ['swxwhcluk', 'fhg', 'atcoek', 'umgyypaszwj']", "assert filter_by_substring(['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej'], '') == ['enusexwhv', 'wjuj', 'itxe', 'jcahiex', 'dUOiZxVAWtGw', 'uebyej']", "assert filter_by_substring(['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn'], '') == ['fgshev', 'vjs', 'viu', ' abtlp', 'oZf', 'vxyuqn']", "assert filter_by_substring(['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq'], '') == ['vzjrawyh', 'bygp', 'jngw', 'fj avcms', 'qCrKdp', 'smmywcfxq']", "assert filter_by_substring(['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp'], '') == ['xpwyfshyd', 'hyfpiqgtc', 'jirhnl', ' nsh', 'QErZpVdIJ', 'tdp']", "assert filter_by_substring(['vuk', 'miq', 'lpogymr', 'dwxkxx', 'zpZrzWLRQz', 'iygu'], 'yg') == ['iygu']", "assert filter_by_substring(['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn'], '') == ['tnmljjqc', 'pvncnz', 'tcbsyxeh', 'cwven z op', 'IdYgwAIIu', 'enadhn']", "assert filter_by_substring(['kdtqsykk', 'bgykpzt', 'tkht', 'bgr'], 't') == ['kdtqsykk', 'bgykpzt', 'tkht']", "assert filter_by_substring(['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg'], '') == ['mnndulgj', 'yapued', 'yfxknmffe', 'z kflj', 'FIBkIkjyjVq', 'gdtvwpg']", "assert filter_by_substring(['oni', 'zleaohlkif', 'grzeqgllx', 'xsavijydab'], 'sa') == ['xsavijydab']", "assert filter_by_substring(['kqox', 'knr', 'qlaaxt', 'pst', 'XduWEmb', 'egaqop'], 'ps') == ['pst']", "assert filter_by_substring(['rdce', 'pepwrjoo', 'ozdnanxsiqj', ' jclyvgb', 'sfsgenBWtFR', 'ozpzyu'], 's') == ['ozdnanxsiqj', 'sfsgenBWtFR']", "assert filter_by_substring(['fot', 'eum', 'pxgsbphx', 'gzaorjz', 'KFVOhWwpoC', 'leht'], 'le') == ['leht']", "assert filter_by_substring(['tconue', 'mlney', 'akxtnzl', 'edrad'], 'on') == ['tconue']", "assert filter_by_substring([], 'john') == []", "assert filter_by_substring(['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje'], '') == ['rpaywuhf', 'ngiwurfdsfer', 'ykgawxq', 'wexngsllje']", "assert filter_by_substring(['eilf', 'mpj', 'nhqktxlz', 'tafvngt', 'rgP', 'lqedsgz'], 'h') == ['nhqktxlz']", "assert filter_by_substring(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']", "assert filter_by_substring(['exkbpmyod', 'wafdw', 'essen', 'gycuxrrp'], 'af') == ['wafdw']", "assert filter_by_substring(['sxivcdjg', 'npgx', 'inpeumlqwmth', 'fckeci', 'LsDtYSsBmG', 'qicaol'], 'c') == ['sxivcdjg', 'fckeci', 'qicaol']", "assert filter_by_substring(['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw'], '') == ['wxvqpbar', 'xftqp', 'hlvnmogt', 'zgvuggyylbgw']", "assert filter_by_substring(['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd'], '') == ['viwul', 'khgf', 'tbio', 'lyobs', 'jAsuPR', 'masd']", "assert filter_by_substring(['rei', 'lfmvyvcl', 'uodn', 'bwbaijeudy'], 'od') == ['uodn']", "assert filter_by_substring(['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh'], '') == ['paomoryvt', 'zpjnoiwnocgg', 'nngcya', 'kkftckjrgluh']", "assert filter_by_substring(['usqvhbm', 'igpyd', 'gszactxzm', 'vqiyslsqnfe', 'vOhpjWbUu', 'awuwl'], 'w') == ['awuwl']", "assert filter_by_substring(['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig'], '') == ['jvlewbhwa', 'mmf', 'tbhpeekfak', 'ymygffilhg', 'oxQwujZ', 'tfwdzweig']", "assert filter_by_substring(['rzlmq', 'nypmkzsg', 'aqngjmg', 'hldubutw', 'ZoTIDt', 'fgohcqf'], 'zl') == ['rzlmq']", "assert filter_by_substring(['puma', 'ahtk', 'glkv', 'vkdc'], 'um') == ['puma']", "assert filter_by_substring(['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb'], 's') == ['osl', 'asvubuummn', 'sjjlousus', 'gymryaasxsb']", "assert filter_by_substring(['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf'], '') == ['pnu', 'olmqbfixg', 'hcgtvdu', 'aveaoupyvlm', 'PNv', 'rdzpgoaf']", "assert filter_by_substring(['fekndc', 'bey', 'xhysf', 'pwobsqo l', 'OSx', 'ftpidu'], 'p') == ['pwobsqo l', 'ftpidu']", "assert filter_by_substring(['tjbhxevmk', 'lutcztrn', 'vzwocf', 'lxmhqfqzcidl'], 'zw') == ['vzwocf']", "assert filter_by_substring([], 'agw') == []", "assert filter_by_substring(['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr'], '') == ['oyjdxmhhj', 'jhue', 'akpxcr', 'mol', 'wmmikhyYQDvR', 'qmctr']", "assert filter_by_substring(['jfrgxtn', 'emgcjlv', 'kzfda', 'wsgvtzsoe', 'ALCGgsNR', 'ryv'], 'e') == ['emgcjlv', 'wsgvtzsoe']", "assert filter_by_substring([], 'y') == []", "assert filter_by_substring(['btfesq', 'rkagnsvsnzrs', 'eubbokyrm', 'gaxepuosip'], 'ga') == ['gaxepuosip']", "assert filter_by_substring(['zupqmk', 'rwsqpdth', 'nlocbgvg', 'icfuzakjtknb', 'hyo', 'bqtjtn'], 'oc') == ['nlocbgvg']", "assert filter_by_substring(['shxzctwmk', 'sdwufvy', 'olicmd', ' qjur', 'zTRvOovqTV', 'ehumiisy'], 'ol') == ['olicmd']", "assert filter_by_substring(['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz'], '') == ['hidrl', 'ugjomisw', 'uxexjoldi', 'zpnwvhrgldoz']", "assert filter_by_substring(['jfgi', 'exrlzppdsje', 'tdpgsobl', 'yjok'], 't') == ['tdpgsobl']", "assert filter_by_substring(['gfikjrgy', 'onqcptegu', 'eyzyby', 'wbixoc ym', 'FHqsfXhbS', 'ark'], 'yz') == ['eyzyby']", "assert filter_by_substring([], 'ii') == []", "assert filter_by_substring(['augunz', 'fsyn', 'rzbjmi', 'nesckl', 'oCjPtbazAEsA', 'eyxtyx'], 'b') == ['rzbjmi', 'oCjPtbazAEsA']", "assert filter_by_substring(['scuasnve', 'yydy', 'fbjkc', 'syqw', 'zvO', 'pdlry'], 'y') == ['yydy', 'syqw', 'pdlry']", "assert filter_by_substring(['xjp', 'mpsdixcyw', 'mfqlwxatj', 'fiorka', 'kJUIVY', 'dekjfnmm'], 'ek') == ['dekjfnmm']", "assert filter_by_substring(['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq'], '') == ['znf', 'xikmjd', 'yvwxvgvm', 'gnvhrlich', 'smGBJ', 'jrtcaxfq']", "assert filter_by_substring([], 'hm') == []", "assert filter_by_substring(['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag'], '') == ['jou', 'hpvkzz', 'hop', 'fetqrbiqivq', 'Ths', 'nallwag']", "assert filter_by_substring(['onw', 'vxqogmm', 'igoksz', 'sug xjoxjadz', 'PDxYMxKzL', 'caez'], 'P') == ['PDxYMxKzL']", "assert filter_by_substring(['oxmaldkqp', 'oksz', 'mjo', 'hlyomadtjj'], 'ma') == ['oxmaldkqp', 'hlyomadtjj']", "assert filter_by_substring(['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq'], '') == ['mhgaqqxzo', 'merpgcx', 'wscb', 'htz', 'yQndvelwwpj', 'kcvmtq']", "assert filter_by_substring(['avdkvxgq', 'tcln', 'vvvmj', 'hgidnvs'], 'v') == ['avdkvxgq', 'vvvmj', 'hgidnvs']", "assert filter_by_substring(['fjtbhk', 'zagej', 'ecstspbf', 'dpftwhjpsdon', 'RcVDi', 'mmrqfzoed'], 'ag') == ['zagej']", "assert filter_by_substring(['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt'], '') == ['bvrnc', 'ztjbx', 'spqodlmab', 'dhcfc ', 'xyjCNubAoMtv', 'srt']", "assert filter_by_substring([], 'u') == []", "assert filter_by_substring(['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo'], '') == ['tdzdgdges', 'nzkx', 'upxr', 'sqpqvpvypjv', 'uFZZz', 'msreruyvo']", "assert filter_by_substring(['vlzqs', 'vaa', 'jyokyuek', 'blq'], 'va') == ['vaa']", "assert filter_by_substring(['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym'], '') == ['byhxj', 'ojyu', 'bue', 'ztkejbhy', 'fnp', 'tjcym']", "assert filter_by_substring(['yrbqlzt', 'yoljy', 'hgnst', 'egwkaepxkr', 'pHPzwAlLi', 'jnzsvjnqd'], 'j') == ['yoljy', 'jnzsvjnqd']", "assert filter_by_substring(['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf'], '') == ['kufpywimp', 'oysr', 'sidolbcrux', 'zufyfpupfsv', 'uLaJw', 'dfdpf']", "assert filter_by_substring(['eqthk', 'hnfe', 'ywjz', 'pntutudpdu', 'yJmt', 'eufmcif'], 'nf') == ['hnfe']", "assert filter_by_substring(['jwzdw', 'cft', 'tvleiwn', 'wnbp', 'yQfFUrje', 'uhg'], 'bp') == ['wnbp']", "assert filter_by_substring(['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj'], '') == ['zggckveb', 'ahyihxix', 'nbjxphh', 'ofntj']", "assert filter_by_substring(['jmftlg', 'svpf', 'ahstcm', 'ulxugoklqs'], 's') == ['svpf', 'ahstcm', 'ulxugoklqs']", "assert filter_by_substring(['wfvacvya', 'rrz', 'vgsagcsb', 'mvn', 'aDs', 'mphoywuq'], 'fv') == ['wfvacvya']", "assert filter_by_substring(['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv'], '') == ['pghu', 'pmwp', 'pyjqtd', 'xdsmzdggpwqv']", "assert filter_by_substring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']", "assert filter_by_substring(['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg'], '') == ['urcttvjaz', 'mjyarapkn', 'hcrrak', 'pcwcwj', 'aMWv', 'ppurg']", "assert filter_by_substring(['potgjni', 'snwj', 'pzzoklax', 'wnxdznip', 'JTlXExklWu', 'wgb'], 'n') == ['potgjni', 'snwj', 'wnxdznip']", "assert filter_by_substring([], 'p') == []", "assert filter_by_substring(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']", "assert filter_by_substring(['usmxmm', 'lewsordxonk', 'ozdow', 'fgacbnf'], 'u') == ['usmxmm']", "assert filter_by_substring(['ysuub', 'ebnfgbery', 'scgbpwkjl', 'adenslpxeqwf'], 'u') == ['ysuub']", "assert filter_by_substring(['sftm', 'dioyco', 'iuuqfi', 'rbqlkpykbbzf', 'bWJjEcloelv', 'bfbjmgjql'], 'W') == ['bWJjEcloelv']", "assert filter_by_substring(['oqoinujt', 'rkikbewjm', 'zpgfpdmyn', 'dmwxjss', 'qcgDNg', 'rmpqswrd'], 'ki') == ['rkikbewjm']", "assert filter_by_substring(['gnu', 'qounpksy', 'atrzxeqfp', 'lurboel', 'RjIGVEs', 'nwiq'], 'qo') == ['qounpksy']", "assert filter_by_substring(['dkgduwon', 'gxku', 'dou', 'yuidgjkbxe'], 'id') == ['yuidgjkbxe']", "assert filter_by_substring(['jaqamxam', 'racvaeu', 'gpshdiwef', 'gmcaonpp'], 'ps') == ['gpshdiwef']", "assert filter_by_substring(['dgscqyaz', 'dykyill', 'lvher', 'ibqz', 'SmsHmLTEgw', 'keisthr'], 'e') == ['lvher', 'keisthr']", "assert filter_by_substring(['jqbhage', 'ydq', 'ddcagpb', 'edvnjuevted', 'DZcBCg', 'hyrsi'], 'q') == ['jqbhage', 'ydq']", "assert filter_by_substring(['dhpuhk', 'cmayyfjgv', 'grutd', ' tu hovh', 'QGCCvFPAXHHQ', 'mbxovs'], 'm') == ['cmayyfjgv', 'mbxovs']", "assert filter_by_substring(['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp'], '') == ['kmcficwq', 'deevgeasp', 'jwfzzywsj', 'yrepttfi r', 'PFBCPQXrAEE', 'fzp']", "assert filter_by_substring(['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz'], '') == ['qottbmhx', 'dvrz', 'ryynfcsc', 'wyvhz']", "assert filter_by_substring(['ffq', 'ymkokonn', 'vtu', 'nzghjgyk'], 'm') == ['ymkokonn']", "assert filter_by_substring(['qsut', 'igzl', 'zpaen', 'yphoctvqw'], 'yp') == ['yphoctvqw']", "assert filter_by_substring(['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd'], '') == ['tcnmtr', 'fzfkluce', 'dzabikh', 'hsqd']", "assert filter_by_substring(['ntbtue', 'xfmvt', 'wtrzaz', 'wuyjr ldgwwm', 'RxIxdKCol', 'hmt'], 'xf') == ['xfmvt']", "assert filter_by_substring(['hvoihyj', 'ulmqpwdl', 'crhrgo', 'ukcsrdksd', 'jsNWfXSsxHE', 'mla'], 'a') == ['mla']", "assert filter_by_substring(['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy'], '') == ['xjl', 'bsxgjx', 'zoyqaxoh', 'yliujksqoy']", "assert filter_by_substring(['fimum', 'xmnmw', 'chbdrhlkt', 'difxuhc', 'gTlhU', 'qdikcnl'], 'im') == ['fimum']", "assert filter_by_substring(['cst', 'akmh', 'lva', 'fpy fm', 'gfqijgxkhm', 'jkriy'], 'k') == ['akmh', 'gfqijgxkhm', 'jkriy']", "assert filter_by_substring(['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk'], '') == ['kqji', 'sfia', 'mjna', 'x v', 'mFSHZVEmc', 'bigycesk']", "assert filter_by_substring(['qaplgtthu', 'ylkvtgeipq', 'qseb', 'ghigzmkfxss'], 'qa') == ['qaplgtthu']", "assert filter_by_substring(['smcse', 'gxzwz', 'olbea', 'yukag', 'JaDjvdHbtfLM', 'kncvrbzg'], 'yu') == ['yukag']", "assert filter_by_substring(['mskf', 'qltsxwf', 'vuxg', 'jty', 'rnyqYyDjQ', 'opmcslazf'], 'pm') == ['opmcslazf']", "assert filter_by_substring(['ygndao', 'umazijg', 'ujv', 'i kyrfjq', 'nyXNlvWstDr', 'kioxvagx'], 'u') == ['umazijg', 'ujv']", "assert filter_by_substring(['dmnu', 'snp', 'khydvutwhm', 'cgv', 'LClfX', 'wihfwkg'], 'ih') == ['wihfwkg']", "assert filter_by_substring(['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq'], '') == ['ncawljf', 'gnpchna', 'remvtbgc', 'zpxx', 'LJjyj', 'eiq']", "assert filter_by_substring(['tbbahnqmx', 'yaw', 'upedb', 'bwz', 'xptoH', 'wxhm'], 'pe') == ['upedb']", "assert filter_by_substring(['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg'], '') == ['okoqz', 'mshcjbssvd', 'wrreaqu', 'fzg']", "assert filter_by_substring(['nkvfmcpka', 'iugtl', 'tvjvei', 'vnhwdmwc i', 'ZzXH', 'bbh'], 'n') == ['nkvfmcpka', 'vnhwdmwc i']", "assert filter_by_substring(['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh'], '') == ['nbuz', 'tokenv', 'dbvcfrnl', 'yorgey', 'HNIEl', 'cfkoafrjh']", "assert filter_by_substring(['tcvb', 'idguap', 'ukgtnfzqj', 'vfwmburpzqgg', 'jDFfcfd', 'cfbauoso'], 'c') == ['tcvb', 'jDFfcfd', 'cfbauoso']", "assert filter_by_substring(['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx'], '') == ['lxpem', 'fbvojuium', 'amfr', 'cnzbtveckbvs', 'tEYQXHDxdFv', 'arozyzx']"], "nl": " Filter an input list of strings only for ones that contain given substring\n    ", "func": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:", "examples": ">>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    ", "repair_prompt": ["def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter a list of input strings to find only those that contain a given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filters a list of input strings to find only those that contain a given substring.\n\n    Args:\n        strings: List of strings to be filtered.\n        substring: Substring to search for within each string.\n\n    Returns:\n        A list of strings that contain the substring.\n    \"\"\"\n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If present, add the string to the filtered list\n            filtered_strings.append(string)\n\n    # Return the list of filtered strings\n    return filtered_strings\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n    \n    Parameters:\n    strings (List[str]): A list of strings to be filtered.\n    substring (str): The substring to search for within each string.\n    \n    Returns:\n    List[str]: A list of strings that contain the given substring.\n    \n    Examples:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Using list comprehension to filter strings containing the substring\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['abc', 'bacd', 'cde', 'array']\n    example_substring = 'a'\n    print(filter_by_substring(example_strings, example_substring))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str, case_insensitive: bool = False) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n\n    Parameters:\n    - strings: List[str] - A list of strings to be filtered.\n    - substring: str - The substring to search for within each string.\n    - case_insensitive: bool - Optional; if True, perform case-insensitive filtering.\n\n    Returns:\n    - List[str] - A list of strings containing the substring.\n    \"\"\"\n    if case_insensitive:\n        substring = substring.lower()\n        return [s for s in strings if substring in s.lower()]\n    else:\n        return [s for s in strings if substring in s]\n\n# Example usage:\n# strings = [\"Hello World\", \"hello there\", \"HELLO\", \"world\"]\n# substring = \"hello\"\n# result = filter_by_substring(strings, substring, case_insensitive=True)\n# print(result)  # Output: ['Hello World', 'hello there', 'HELLO']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter a list of input strings to find only those that contain a given substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n\n    Returns:\n        List[str]: A list of strings containing the substring.\n    \"\"\"\n    # Using list comprehension to filter strings containing the substring\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n    example_substring = \"an\"\n    result = filter_by_substring(example_strings, example_substring)\n    print(result)  # Output: ['banana']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str, case_insensitive: bool = False) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n    If case_insensitive is True, the filtering will be case-insensitive.\n\n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for.\n    case_insensitive (bool): Whether the search should be case-insensitive.\n\n    Returns:\n    List[str]: A list of strings containing the substring.\n    \"\"\"\n    if not isinstance(strings, list) or not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"The 'strings' parameter must be a list of strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The 'substring' parameter must be a string.\")\n    \n    if case_insensitive:\n        substring = substring.lower()\n        filtered_strings = [s for s in strings if substring in s.lower()]\n    else:\n        filtered_strings = [s for s in strings if substring in s]\n    \n    return filtered_strings\n\n# Example usage:\n# strings = [\"Hello\", \"world\", \"HELLO\", \"World\"]\n# substring = \"hello\"\n# result = filter_by_substring(strings, substring, case_insensitive=True)\n# print(result)  # Output: ['Hello', 'HELLO']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter a list of input strings to find only those that contain a given substring.\n\n    This function uses list comprehensions to efficiently filter strings based on the presence\n    of a given substring. It handles edge cases like empty lists and substrings not present\n    in any string.\n\n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for within each string.\n\n    Returns:\n    List[str]: A list of strings that contain the given substring.\n\n    Examples:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['abc', 'bacd', 'cde', 'array']\n    example_substring = 'a'\n    filtered_strings = filter_by_substring(example_strings, example_substring)\n    print(filtered_strings)  # Output: ['abc', 'bacd', 'array']\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str, case_sensitive: bool = True) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n\n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n        case_sensitive (bool): Flag to determine if the search should be case-sensitive. Defaults to True.\n\n    Returns:\n        List[str]: A list of strings containing the substring.\n    \"\"\"\n    if not strings:\n        return []\n\n    filtered_strings = []\n    for string in strings:\n        if case_sensitive:\n            if substring in string:\n                filtered_strings.append(string)\n        else:\n            if substring.lower() in string.lower():\n                filtered_strings.append(string)\n\n    return filtered_strings\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n    \n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for within each string.\n    \n    Returns:\n    List[str]: A list of strings that contain the substring.\n    \n    Examples:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Using list comprehension to filter strings containing the substring\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['abc', 'bacd', 'cde', 'array']\n    example_substring = 'a'\n    print(filter_by_substring(example_strings, example_substring))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n    \n    Args:\n        strings (List[str]): A list of strings to be filtered.\n        substring (str): The substring to search for within each string.\n    \n    Returns:\n        List[str]: A list of strings containing the substring.\n    \n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef filter_by_substring(strings: List[str], substring: str, case_insensitive: bool = False) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n    If case_insensitive is True, the filtering will ignore case.\n\n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for.\n    case_insensitive (bool): Flag to indicate if the search should be case-insensitive.\n\n    Returns:\n    List[str]: A list of strings containing the substring.\n    \"\"\"\n    if case_insensitive:\n        # Compile a case-insensitive regular expression pattern\n        pattern = re.compile(re.escape(substring), re.IGNORECASE)\n        # Use list comprehension to filter strings based on the pattern\n        filtered_strings = [s for s in strings if pattern.search(s)]\n    else:\n        # Use list comprehension to filter strings based on the presence of the substring\n        filtered_strings = [s for s in strings if substring in s]\n\n    return filtered_strings\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that filters a list of strings based on the presence of a specified substring. The function should be efficient and handle edge cases such as empty lists or substrings.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Design a simple user interface for input and output\n- Include error handling for invalid inputs\n- Provide documentation and examples for users\nWe will implement a simple function that iterates over the list of strings and checks if each string contains the specified substring. We will use Python's built-in 'in' keyword for substring checking, which is efficient and straightforward. The function will handle edge cases such as empty lists or substrings. We will not handle case sensitivity or special characters unless specified otherwise.\n", "requirement analysis:\nThe function should efficiently filter strings based on the presence of a substring, handling edge cases like empty lists and providing clear examples for user understanding.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Include comprehensive documentation\n- Handle edge cases like empty input lists\n- Provide usage examples\nWe will implement a simple function using Python's built-in list comprehension to filter strings based on the presence of a substring. This approach is efficient for handling large datasets and is straightforward to understand. We will also include comprehensive documentation and examples to ensure usability.\n", "requirement analysis:\nThe function should efficiently filter strings based on the presence of a substring, handling various input scenarios including empty lists and substrings. It should be optimized for performance and usability.\nrequirement pool:\n- Implement the main filtering function.\n- Optimize for performance with large datasets.\n- Ensure compatibility with different Python versions.\n- Add support for case-insensitive filtering.\n- Include comprehensive test cases for edge scenarios.\nWe will implement a simple and efficient function using Python's built-in capabilities to filter a list of strings based on the presence of a given substring. The function will handle edge cases such as empty lists and substrings. We will also consider adding an optional parameter for case-insensitive filtering to enhance usability.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a given substring. It should handle edge cases such as empty lists and ensure compatibility with large datasets. Documentation should be clear to facilitate ease of use.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation\n- Include unit tests for edge cases\nWe will implement a simple function using Python's list comprehensions and string methods to efficiently filter strings based on the presence of a given substring. This approach is both efficient and easy to understand, making it suitable for handling large datasets and edge cases like empty lists.\n", "requirement analysis:\nThe requirement is to filter a list of strings based on the presence of a given substring. The function should handle empty lists and return an empty list if no matches are found. It should be efficient and easy to use.\nrequirement pool:\n- Implement the main filtering function\n- Optimize for performance with large datasets\n- Design a user-friendly interface\n- Add support for case-insensitive filtering\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in capabilities to filter strings based on the presence of a substring. To optimize performance for large datasets, we will use list comprehensions which are efficient in Python. The function will be case-sensitive by default, but we can add an option for case-insensitive filtering if needed. We will ensure the function handles empty lists and invalid inputs gracefully.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a given substring. It must handle edge cases such as empty lists and substrings not present in any string. The implementation should be straightforward, leveraging Python's capabilities to ensure performance and readability.\nrequirement pool:\n- Implement the main filtering logic\n- Handle edge cases like empty input lists\n- Ensure compatibility with Python 3.x\n- Optimize for performance with large datasets\n- Provide comprehensive documentation and examples\nWe will implement a simple and efficient function using Python's list comprehensions to filter strings based on the presence of a given substring. This approach is both efficient and easy to understand, making it suitable for handling edge cases like empty lists and substrings not present in any string. We will ensure compatibility with Python 3.x and provide comprehensive documentation with examples.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a given substring. It should handle edge cases such as empty lists and ensure compatibility with Python's standard library.\nrequirement pool:\n- Implement the main filtering logic\n- Handle edge cases like empty input lists\n- Provide comprehensive documentation and examples\n- Optimize for performance with large datasets\n- Ensure compatibility with different Python versions\nWe will implement a simple function using Python's standard library to filter strings based on the presence of a given substring. The function will handle edge cases such as empty lists and will be case-sensitive by default unless specified otherwise. We will ensure the function is efficient and easy to integrate into existing projects.\n", "requirement analysis:\nThe function should efficiently filter a list of strings to include only those containing a specified substring. It should handle edge cases such as empty lists and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the main filtering function\n- Handle edge cases like empty input lists\n- Provide comprehensive documentation and examples\n- Optimize for performance with large datasets\n- Ensure compatibility with Python's standard library\nWe will implement a simple function using Python's list comprehension to filter strings based on the presence of a substring. This approach is efficient and leverages Python's standard library, ensuring compatibility and ease of use. We will also handle edge cases such as empty input lists and provide comprehensive documentation with examples.\n", "requirement analysis:\nThe function should efficiently filter a list of strings based on the presence of a given substring. It should handle edge cases such as empty lists and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the main filtering function\n- Handle edge cases like empty input lists\n- Provide comprehensive documentation and examples\n- Optimize for performance with large datasets\n- Ensure compatibility with different Python versions\nWe will implement a simple function using Python's list comprehensions to efficiently filter strings based on the presence of a given substring. This approach is both efficient and easy to understand, making it suitable for handling edge cases like empty lists. We will ensure compatibility with Python's standard library without relying on third-party libraries.\n", "requirement analysis:\nThe function should efficiently filter strings based on the presence of a specified substring. It must handle edge cases such as empty lists and ensure performance does not degrade with larger datasets.\nrequirement pool:\n- Implement the main filtering function.\n- Optimize for performance with large datasets.\n- Ensure compatibility with various Python versions.\n- Add support for case-insensitive filtering.\n- Include comprehensive unit tests.\nWe will implement a simple function using Python's built-in capabilities to filter strings based on the presence of a specified substring. To ensure high performance, especially with large datasets, we will utilize list comprehensions which are efficient in Python. We will also consider adding case-insensitive filtering as an optional feature, using the 're' module for regular expressions if needed.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [106, 106, 106, 106, 106, 106, 106, 106, 106, 106], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nimport re\n\ndef filter_by_substring(strings: List[str], substring: str, case_insensitive: bool = False) -> List[str]:\n    \"\"\"\n    Filter a list of input strings to find only those that contain a given substring.\n    If case_insensitive is True, the filtering will ignore case.\n\n    Parameters:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to search for.\n    case_insensitive (bool): Flag to indicate if the search should be case-insensitive.\n\n    Returns:\n    List[str]: A list of strings containing the substring.\n    \"\"\"\n    if case_insensitive:\n        # Compile a case-insensitive regular expression pattern\n        pattern = re.compile(re.escape(substring), re.IGNORECASE)\n        # Use list comprehension to filter strings based on the pattern\n        filtered_strings = [s for s in strings if pattern.search(s)]\n    else:\n        # Use list comprehension to filter strings based on the presence of the substring\n        filtered_strings = [s for s in strings if substring in s]\n\n    return filtered_strings\n", "passed": true, "pass": true, "pass_num": 10, "round": 803, "mutate_method": "rephrase_one", "parent_index": 394}
