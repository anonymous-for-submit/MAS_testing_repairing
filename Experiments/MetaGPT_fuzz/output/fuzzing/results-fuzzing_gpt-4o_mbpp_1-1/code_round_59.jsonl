{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 140, "prompt": "Write a function to collapse the list of lists into one set of numbers.", "code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "test_imports": [], "test_list": ["assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]", "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]", "assert extract_singly([(3, 7, 5), (7, 7, 9), (5, 2)]) == [3, 7, 5, 9, 2]", "assert extract_singly([(3, 9, 6), (1, 6, 6), (4, 3)]) == [3, 9, 6, 1, 4]", "assert extract_singly([(1, 7, 2), (5, 10, 5), (2, 6)]) == [1, 7, 2, 5, 10, 6]", "assert extract_singly([(6, 8, 9), (5, 8, 11), (4, 1)]) == [6, 8, 9, 5, 11, 4, 1]", "assert extract_singly([(6, 9, 4), (3, 9, 10), (3, 3)]) == [6, 9, 4, 3, 10]", "assert extract_singly([(2, 4, 9), (1, 3, 12), (2, 5)]) == [2, 4, 9, 1, 3, 12, 5]", "assert extract_singly([(8, 9, 4), (4, 6, 2), (2, 6)]) == [8, 9, 4, 6, 2]", "assert extract_singly([(6, 4, 2), (2, 5, 12), (5, 8)]) == [6, 4, 2, 5, 12, 8]", "assert extract_singly([(2, 6, 6), (3, 4, 2), (3, 4)]) == [2, 6, 3, 4]", "assert extract_singly([(4, 6, 5), (8, 3, 5), (6, 9)]) == [4, 6, 5, 8, 3, 9]", "assert extract_singly([(3, 9, 1), (4, 7, 7), (6, 4)]) == [3, 9, 1, 4, 7, 6]", "assert extract_singly([(4, 9, 2), (6, 8, 5), (5, 1)]) == [4, 9, 2, 6, 8, 5, 1]", "assert extract_singly([(6, 8, 10), (5, 5, 7), (4, 9)]) == [6, 8, 10, 5, 7, 4, 9]", "assert extract_singly([(8, 1, 5), (8, 9, 6), (2, 6)]) == [8, 1, 5, 9, 6, 2]", "assert extract_singly([(6, 1, 1), (9, 8, 6), (1, 7)]) == [6, 1, 9, 8, 7]", "assert extract_singly([(4, 5, 5), (8, 10, 2), (5, 6)]) == [4, 5, 8, 10, 2, 6]", "assert extract_singly([(6, 2, 8), (8, 5, 8), (6, 7)]) == [6, 2, 8, 5, 7]", "assert extract_singly([(5, 8, 9), (2, 3, 6), (5, 6)]) == [5, 8, 9, 2, 3, 6]", "assert extract_singly([(7, 4, 1), (6, 3, 11), (2, 1)]) == [7, 4, 1, 6, 3, 11, 2]", "assert extract_singly([(1, 4, 2), (8, 8, 3), (4, 6)]) == [1, 4, 2, 8, 3, 6]", "assert extract_singly([(3, 1, 2), (2, 3, 10), (5, 5)]) == [3, 1, 2, 10, 5]", "assert extract_singly([(6, 5, 10), (7, 3, 12), (4, 1)]) == [6, 5, 10, 7, 3, 12, 4, 1]", "assert extract_singly([(2, 6, 8), (9, 5, 4), (1, 5)]) == [2, 6, 8, 9, 5, 4, 1]", "assert extract_singly([(4, 5, 2), (1, 1, 11), (4, 1)]) == [4, 5, 2, 1, 11]", "assert extract_singly([(2, 4, 7), (7, 9, 4), (6, 3)]) == [2, 4, 7, 9, 6, 3]", "assert extract_singly([(4, 8, 7), (5, 10, 11), (3, 2)]) == [4, 8, 7, 5, 10, 11, 3, 2]", "assert extract_singly([(5, 4, 10), (7, 3, 11), (4, 4)]) == [5, 4, 10, 7, 3, 11]", "assert extract_singly([(6, 5, 2), (8, 10, 5), (1, 1)]) == [6, 5, 2, 8, 10, 1]", "assert extract_singly([(5, 5, 10), (5, 3, 11), (3, 9)]) == [5, 10, 3, 11, 9]", "assert extract_singly([(2, 5, 9), (7, 5, 6), (3, 6)]) == [2, 5, 9, 7, 6, 3]", "assert extract_singly([(2, 6, 5), (8, 2, 11), (6, 1)]) == [2, 6, 5, 8, 11, 1]", "assert extract_singly([(1, 2, 10), (4, 2, 5), (3, 2)]) == [1, 2, 10, 4, 5, 3]", "assert extract_singly([(8, 1, 10), (8, 3, 2), (1, 3)]) == [8, 1, 10, 3, 2]", "assert extract_singly([(3, 7, 4), (1, 1, 5), (5, 5)]) == [3, 7, 4, 1, 5]", "assert extract_singly([(6, 7, 1), (6, 5, 3), (11, 3)]) == [6, 7, 1, 5, 3, 11]", "assert extract_singly([(1, 7, 4), (2, 2, 7), (2, 7)]) == [1, 7, 4, 2]", "assert extract_singly([(4, 2, 3), (3, 7, 7), (2, 5)]) == [4, 2, 3, 7, 5]", "assert extract_singly([(5, 6, 1), (7, 4, 3), (6, 4)]) == [5, 6, 1, 7, 4, 3]", "assert extract_singly([(4, 1, 4), (8, 2, 5), (10, 12)]) == [4, 1, 8, 2, 5, 10, 12]", "assert extract_singly([(6, 1, 2), (8, 2, 5), (4, 9)]) == [6, 1, 2, 8, 5, 4, 9]", "assert extract_singly([(1, 5, 3), (9, 2, 6), (10, 4)]) == [1, 5, 3, 9, 2, 6, 10, 4]", "assert extract_singly([(4, 3, 8), (6, 1, 6), (12, 12)]) == [4, 3, 8, 6, 1, 12]", "assert extract_singly([(4, 7, 5), (9, 5, 3), (11, 11)]) == [4, 7, 5, 9, 3, 11]", "assert extract_singly([(5, 3, 6), (4, 6, 3), (2, 7)]) == [5, 3, 6, 4, 2, 7]", "assert extract_singly([(5, 1, 8), (1, 7, 8), (7, 9)]) == [5, 1, 8, 7, 9]", "assert extract_singly([(4, 7, 1), (3, 2, 1), (11, 3)]) == [4, 7, 1, 3, 2, 11]", "assert extract_singly([(6, 3, 6), (1, 2, 2), (8, 9)]) == [6, 3, 1, 2, 8, 9]", "assert extract_singly([(5, 1, 4), (5, 3, 1), (2, 9)]) == [5, 1, 4, 3, 2, 9]", "assert extract_singly([(2, 2, 2), (6, 5, 8), (12, 3)]) == [2, 6, 5, 8, 12, 3]", "assert extract_singly([(5, 4, 3), (1, 5, 2), (12, 5)]) == [5, 4, 3, 1, 2, 12]", "assert extract_singly([(4, 3, 4), (7, 2, 3), (8, 10)]) == [4, 3, 7, 2, 8, 10]", "assert extract_singly([(3, 3, 4), (4, 1, 4), (4, 9)]) == [3, 4, 1, 9]", "assert extract_singly([(5, 4, 3), (3, 5, 1), (3, 10)]) == [5, 4, 3, 1, 10]", "assert extract_singly([(3, 7, 1), (6, 4, 8), (8, 8)]) == [3, 7, 1, 6, 4, 8]", "assert extract_singly([(6, 3, 8), (3, 1, 1), (9, 13)]) == [6, 3, 8, 1, 9, 13]", "assert extract_singly([(6, 2, 1), (2, 3, 6), (4, 13)]) == [6, 2, 1, 3, 4, 13]", "assert extract_singly([(3, 7, 2), (8, 4, 1), (2, 10)]) == [3, 7, 2, 8, 4, 1, 10]", "assert extract_singly([(5, 7, 4), (4, 7, 1), (11, 5)]) == [5, 7, 4, 1, 11]", "assert extract_singly([(3, 3, 3), (4, 1, 7), (8, 12)]) == [3, 4, 1, 7, 8, 12]", "assert extract_singly([(3, 5, 7), (6, 1, 8), (4, 7)]) == [3, 5, 7, 6, 1, 8, 4]", "assert extract_singly([(2, 2, 2), (6, 4, 8), (12, 6)]) == [2, 6, 4, 8, 12]", "assert extract_singly([(1, 2, 3), (8, 2, 7), (6, 4)]) == [1, 2, 3, 8, 7, 6, 4]", "assert extract_singly([(5, 4, 1), (9, 6, 3), (6, 3)]) == [5, 4, 1, 9, 6, 3]", "assert extract_singly([(6, 3, 4), (3, 1, 4), (6, 6)]) == [6, 3, 4, 1]", "assert extract_singly([(1, 4, 1), (6, 3, 2), (10, 3)]) == [1, 4, 6, 3, 2, 10]", "assert extract_singly([(2, 5, 7), (3, 2, 8), (12, 7)]) == [2, 5, 7, 3, 8, 12]", "assert extract_singly([(6, 3, 8), (7, 9, 7), (10, 12)]) == [6, 3, 8, 7, 9, 10, 12]", "assert extract_singly([(7, 9, 7), (13, 11, 8), (14, 6)]) == [7, 9, 13, 11, 8, 14, 6]", "assert extract_singly([(3, 7, 11), (11, 14, 8), (11, 8)]) == [3, 7, 11, 14, 8]", "assert extract_singly([(12, 12, 5), (15, 14, 13), (15, 13)]) == [12, 5, 15, 14, 13]", "assert extract_singly([(6, 7, 13), (5, 12, 10), (14, 7)]) == [6, 7, 13, 5, 12, 10, 14]", "assert extract_singly([(10, 10, 4), (14, 6, 8), (9, 9)]) == [10, 4, 14, 6, 8, 9]", "assert extract_singly([(3, 11, 9), (12, 10, 12), (5, 16)]) == [3, 11, 9, 12, 10, 5, 16]", "assert extract_singly([(4, 11, 10), (8, 10, 12), (14, 8)]) == [4, 11, 10, 8, 12, 14]", "assert extract_singly([(5, 11, 9), (13, 15, 8), (9, 13)]) == [5, 11, 9, 13, 15, 8]", "assert extract_singly([(7, 8, 5), (8, 14, 12), (13, 9)]) == [7, 8, 5, 14, 12, 13, 9]", "assert extract_singly([(5, 13, 10), (7, 11, 13), (5, 7)]) == [5, 13, 10, 7, 11]", "assert extract_singly([(12, 4, 12), (7, 16, 8), (7, 12)]) == [12, 4, 7, 16, 8]", "assert extract_singly([(9, 10, 6), (7, 7, 8), (14, 16)]) == [9, 10, 6, 7, 8, 14, 16]", "assert extract_singly([(3, 3, 9), (6, 8, 13), (7, 14)]) == [3, 9, 6, 8, 13, 7, 14]", "assert extract_singly([(9, 7, 6), (9, 8, 9), (8, 6)]) == [9, 7, 6, 8]", "assert extract_singly([(9, 13, 4), (13, 6, 15), (11, 13)]) == [9, 13, 4, 6, 15, 11]", "assert extract_singly([(10, 4, 10), (7, 14, 9), (10, 15)]) == [10, 4, 7, 14, 9, 15]", "assert extract_singly([(7, 11, 9), (10, 9, 15), (8, 12)]) == [7, 11, 9, 10, 15, 8, 12]", "assert extract_singly([(8, 7, 10), (8, 10, 13), (6, 7)]) == [8, 7, 10, 13, 6]", "assert extract_singly([(6, 8, 9), (7, 15, 11), (5, 12)]) == [6, 8, 9, 7, 15, 11, 5, 12]", "assert extract_singly([(4, 7, 7), (8, 13, 17), (11, 13)]) == [4, 7, 8, 13, 17, 11]", "assert extract_singly([(8, 7, 14), (8, 14, 7), (15, 7)]) == [8, 7, 14, 15]", "assert extract_singly([(7, 7, 11), (13, 16, 9), (15, 7)]) == [7, 11, 13, 16, 9, 15]", "assert extract_singly([(5, 8, 13), (12, 16, 9), (10, 6)]) == [5, 8, 13, 12, 16, 9, 10, 6]", "assert extract_singly([(9, 3, 5), (11, 12, 8), (9, 8)]) == [9, 3, 5, 11, 12, 8]", "assert extract_singly([(11, 12, 10), (13, 9, 12), (5, 15)]) == [11, 12, 10, 13, 9, 5, 15]", "assert extract_singly([(4, 6, 14), (6, 8, 10), (11, 11)]) == [4, 6, 14, 8, 10, 11]", "assert extract_singly([(10, 6, 7), (8, 13, 16), (14, 13)]) == [10, 6, 7, 8, 13, 16, 14]", "assert extract_singly([(12, 12, 5), (6, 14, 15), (9, 16)]) == [12, 5, 6, 14, 15, 9, 16]", "assert extract_singly([(5, 5, 6), (14, 7, 7), (9, 13)]) == [5, 6, 14, 7, 9, 13]", "assert extract_singly([(11, 8, 8), (13, 12, 15), (12, 6)]) == [11, 8, 13, 12, 15, 6]", "assert extract_singly([(9, 3, 5), (12, 13, 15), (8, 14)]) == [9, 3, 5, 12, 13, 15, 8, 14]", "assert extract_singly([(7, 4, 5), (7, 14, 10), (14, 7)]) == [7, 4, 5, 14, 10]"], "entry_point": "extract_singly", "repair_prompt": ["Write a function extract_singly to collapse the list of lists into one set of numbers.\nextract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n"], "completions": ["from typing import List\n## main.py\n\ndef extract_singly(nested_lists: list[tuple[int]]) -> list[int]:\n    \"\"\"Flattens a list of tuples into a single list of unique integers.\n\n    This function takes a list of tuples, where each tuple contains integers,\n    and returns a list of unique integers extracted from these tuples.\n\n    Args:\n        nested_lists (list of tuples): A list where each element is a tuple containing integers.\n\n    Returns:\n        list: A list of unique integers extracted from the nested lists.\n    \"\"\"\n    # Flatten the list of tuples into a single list of integers\n    flattened_list = [item for sublist in nested_lists for item in sublist]\n    \n    # Convert the list to a set to ensure uniqueness\n    unique_set = set(flattened_list)\n    \n    # Convert the set back to a list\n    unique_list = list(unique_set)\n    \n    return unique_list\n", "from typing import List\n## main.py\n\nfrom itertools import chain\n\ndef extract_singly(list_of_lists: list[list[int]]) -> list[int]:\n    '''\n    Collapses a list of lists into a single list of unique numbers.\n\n    Parameters:\n    list_of_lists (list[list[int]]): A list containing sublists of integers.\n\n    Returns:\n    list[int]: A list of unique integers, maintaining the order of first appearance.\n    '''\n    # Flatten the list of lists using itertools.chain\n    flattened_list = chain.from_iterable(list_of_lists)\n    \n    # Use a set to track seen numbers and a list to maintain order\n    seen = set()\n    unique_numbers = []\n    \n    for number in flattened_list:\n        if number not in seen:\n            seen.add(number)\n            unique_numbers.append(number)\n    \n    return unique_numbers\n", "from typing import List\n## main.py\n\ndef extract_singly(list_of_lists: list[list[int]]) -> list[int]:\n    \"\"\"\n    Collapse a list of lists into a single list of unique numbers.\n\n    Parameters:\n    list_of_lists (list[list[int]]): A list containing sublists of integers.\n\n    Returns:\n    list[int]: A list of unique integers.\n    \"\"\"\n    # Initialize an empty set to store unique numbers\n    unique_numbers = set()\n\n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Add each number in the sublist to the set\n        for number in sublist:\n            # Check if the number is an integer\n            if isinstance(number, int):\n                unique_numbers.add(number)\n            else:\n                raise ValueError(f\"Non-numeric data found: {number}\")\n\n    # Convert the set back to a list to return\n    return list(unique_numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        result = extract_singly([[3, 4, 5], [4, 5, 7], [1, 4]])\n        print(result)  # Output: [3, 4, 5, 7, 1]\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef extract_singly(list_of_lists: list[list[int]]) -> list[int]:\n    \"\"\"\n    Collapse a list of lists into a single list of unique numbers, maintaining the order of first appearance.\n\n    Parameters:\n    list_of_lists (list[list[int]]): A list containing sublists of integers.\n\n    Returns:\n    list[int]: A list of unique integers in the order of their first appearance.\n    \"\"\"\n    # Initialize an empty list to store unique elements\n    unique_elements = []\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # Add the element to the unique_elements list if it's not already present\n            if element not in unique_elements:\n                unique_elements.append(element)\n    \n    # Return the list of unique elements\n    return unique_elements\n\n# Example usage:\n# result = extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n# print(result)  # Output: [3, 4, 5, 7, 1]\n", "from typing import List\n## main.py\n\nfrom itertools import chain\n\ndef extract_singly(data: list) -> list:\n    \"\"\"\n    Takes a list of tuples or lists and returns a sorted list of unique numbers.\n\n    Parameters:\n    data (list): A list containing tuples or lists of numbers.\n\n    Returns:\n    list: A sorted list of unique numbers.\n    \"\"\"\n    # Flatten the list of tuples/lists using itertools.chain\n    flattened_data = chain.from_iterable(data)\n    \n    # Convert the flattened data to a set to ensure uniqueness\n    unique_numbers = set(flattened_data)\n    \n    # Sort the unique numbers and return as a list\n    sorted_unique_numbers = sorted(unique_numbers)\n    \n    return sorted_unique_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    example_data = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    result = extract_singly(example_data)\n    print(result)  # Output: [1, 3, 4, 5, 7]\n", "from typing import List\n## main.py\n\nfrom itertools import chain\n\ndef extract_singly(list_of_lists: list[list[int]]) -> list[int]:\n    '''\n    Collapse a list of lists into a single list of unique numbers.\n\n    Parameters:\n    list_of_lists (list[list[int]]): A list containing multiple lists of integers.\n\n    Returns:\n    list[int]: A list of unique integers.\n    '''\n    # Flatten the list of lists using itertools.chain\n    flattened_list = chain.from_iterable(list_of_lists)\n    \n    # Convert the flattened list to a set to ensure uniqueness\n    unique_numbers_set = set(flattened_list)\n    \n    # Convert the set back to a list\n    unique_numbers_list = list(unique_numbers_set)\n    \n    return unique_numbers_list\n\n# Example usage\nif __name__ == \"__main__\":\n    example_input = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    result = extract_singly(example_input)\n    print(result)  # Output: [3, 4, 5, 7, 1]\n", "from typing import List\n## main.py\n\ndef extract_singly(list_of_lists: list[list[int]]) -> list[int]:\n    \"\"\"\n    This function takes a list of lists containing integers and returns a list of unique integers.\n    The order of first appearance is preserved.\n\n    Parameters:\n    list_of_lists (list[list[int]]): A list containing multiple lists of integers.\n\n    Returns:\n    list[int]: A list of unique integers.\n    \"\"\"\n    # Initialize an empty set to track seen integers\n    seen = set()\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Iterate over each integer in the sublist\n        for number in sublist:\n            # Check if the number has not been seen before\n            if number not in seen:\n                # Add the number to the set of seen numbers\n                seen.add(number)\n                # Append the number to the result list\n                result.append(number)\n\n    # Return the list of unique integers preserving the order of first appearance\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_input = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    print(extract_singly(example_input))  # Output: [3, 4, 5, 7, 1]\n", "from typing import List\n## main.py\n\nfrom itertools import chain\n\ndef extract_singly(nested_lists: list[list[int]]) -> list[int]:\n    \"\"\"\n    Flattens a list of lists into a single list of unique integers.\n\n    This function takes a list of lists containing integers and returns a list\n    of unique integers by flattening the nested lists and removing duplicates.\n\n    Parameters:\n    nested_lists (list[list[int]]): A list containing sublists of integers.\n\n    Returns:\n    list[int]: A list of unique integers.\n    \"\"\"\n    # Flatten the list of lists using itertools.chain\n    flattened_list = chain.from_iterable(nested_lists)\n    \n    # Convert the flattened list to a set to ensure uniqueness\n    unique_integers = set(flattened_list)\n    \n    # Convert the set back to a list to return the result\n    return list(unique_integers)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_input = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    result = extract_singly(example_input)\n    print(result)  # Output: [3, 4, 5, 7, 1]\n", "from typing import List\n## main.py\n\ndef extract_singly(list_of_tuples: list[tuple[int, ...]]) -> list[int]:\n    \"\"\"\n    Extracts unique numbers from a list of tuples.\n\n    Parameters:\n    list_of_tuples (list of tuples): A list where each element is a tuple containing integers.\n\n    Returns:\n    list: A list of unique integers in the order they first appear.\n    \"\"\"\n    unique_numbers_set = set()\n    unique_numbers_list = []\n\n    for tuple_item in list_of_tuples:\n        for number in tuple_item:\n            if number not in unique_numbers_set:\n                unique_numbers_set.add(number)\n                unique_numbers_list.append(number)\n\n    return unique_numbers_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_input = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    result = extract_singly(example_input)\n    print(result)  # Output: [3, 4, 5, 7, 1]\n", "from typing import List\n## main.py\n\nfrom itertools import chain\nfrom typing import List, Union\n\ndef extract_singly(list_of_lists: List[Union[List[int], tuple]]) -> List[int]:\n    \"\"\"\n    Flattens a list of lists into a list of unique numbers.\n\n    Parameters:\n    list_of_lists (List[Union[List[int], tuple]]): A list containing other lists or tuples of numbers.\n\n    Returns:\n    List[int]: A list of unique numbers.\n    \"\"\"\n    if not isinstance(list_of_lists, list):\n        raise ValueError(\"Input must be a list of lists or tuples.\")\n\n    # Flatten the list of lists/tuples\n    flattened = chain.from_iterable(list_of_lists)\n\n    # Convert to set to ensure uniqueness\n    unique_numbers = set(flattened)\n\n    # Convert set back to list\n    return list(unique_numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_input = [[1, 2, 3], (4, 5, 6), [7, 8, 9], [1, 2, 3]]\n    result = extract_singly(example_input)\n    print(result)  # Output will be a list of unique numbers, order is not guaranteed\n"], "plans": ["requirement analysis:\nThe function should efficiently collapse nested lists into a single list of unique numbers, ensuring no duplicates and maintaining performance even with large datasets.\nrequirement pool:\n- Implement the function to collapse nested lists into a single list\n- Ensure the function returns unique numbers\n- Optimize the function for performance with large datasets\n- Provide clear documentation for integration\n- Test the function with various input scenarios\nWe will use Python's built-in set operations to efficiently handle the uniqueness requirement and list comprehension to flatten the list of lists. This approach ensures that the function is both efficient and easy to integrate into existing projects, while also being optimized for performance with large datasets.\n", "requirement analysis:\nThe function should efficiently collapse a list of lists into a single set of unique numbers, ensuring no duplicates and maintaining performance with large datasets.\nrequirement pool:\n- The function must handle lists of varying lengths and types of numbers.\n- The function should return a list of unique numbers.\n- The function should be optimized for performance with large datasets.\n- The function should include error handling for non-iterable inputs.\n- The function should maintain the order of first appearance of numbers.\nWe will use Python's built-in set to efficiently handle uniqueness and itertools.chain to flatten the list of lists. This approach ensures high efficiency and usability, as it combines the strengths of both tools without overcomplicating the solution.\n", "requirement analysis:\nThe function should efficiently collapse a list of lists into a single set of unique numbers, ensuring no duplicates and maintaining performance across large datasets.\nrequirement pool:\n- Efficiently collapse list of lists into a set of unique numbers\n- Handle large datasets without performance degradation\n- Provide clear documentation and usage examples\n- Ensure compatibility with existing Python projects\n- Maintain simplicity in implementation\nWe will use Python's built-in set function to efficiently collapse the list of lists into a set of unique numbers. This approach is simple, effective, and handles large datasets well. We will ensure the function is compatible with existing Python projects and provide clear documentation and examples for user understanding.\n", "requirement analysis:\nThe function should efficiently collapse a list of lists into a single set of unique numbers, maintaining the order of first appearance. It should handle various input sizes and types gracefully.\nrequirement pool:\n- The function must collapse a list of lists into a single set of unique numbers.\n- The function should maintain the order of first appearance of numbers.\n- The function should handle empty lists and return an empty set.\n- The function should be optimized for performance with large inputs.\n- The function should include comprehensive documentation and examples.\nWe will use Python's built-in set to ensure uniqueness and maintain the order of first appearance by using a list to collect elements before converting to a set. This approach is efficient and leverages native Python capabilities without requiring additional libraries.\n", "requirement analysis:\nThe function should take a list of tuples or lists and return a sorted list of unique numbers. It should efficiently handle large datasets and be easy to integrate into existing Python projects.\nrequirement pool:\n- The function must return a sorted list of unique numbers.\n- The function should handle large datasets efficiently.\n- The function should be easy to integrate into existing codebases.\n- The function should have clear and concise documentation.\n- The function should maintain compatibility with Python 3.x.\nWe will use Python's built-in set to ensure uniqueness and sorting, combined with itertools.chain to efficiently flatten the list of lists. This approach is simple, efficient, and easy to integrate into existing codebases.\n", "requirement analysis:\nThe function should efficiently collapse multiple lists into a single list of unique numbers, ensuring no duplicates and maintaining performance with large datasets.\nrequirement pool:\n- The function must handle large datasets efficiently.\n- The function should return a list of unique numbers.\n- Provide clear documentation and examples.\n- Ensure compatibility with existing Python versions.\n- Optimize for performance in real-time applications.\nWe will use Python's built-in set to ensure uniqueness and itertools.chain to efficiently flatten the list of lists. This approach is simple, fast, and handles large datasets effectively. We will also provide clear documentation and examples to ensure ease of integration and understanding.\n", "requirement analysis:\nThe function should efficiently collapse a list of lists into a single list of unique numbers, ensuring no duplicates and maintaining performance even with large datasets.\nrequirement pool:\n- The function must return a list of unique numbers.\n- The function should handle large datasets efficiently.\n- The function should be easy to integrate into existing projects.\n- The function should maintain the order of first appearance.\n- The function should be well-documented for user understanding.\nWe will use Python's built-in set operations to ensure uniqueness and list comprehension to efficiently flatten the list of lists. This approach is simple, efficient, and easy to integrate into existing projects. The order of first appearance will be preserved using a combination of set and list operations.\n", "requirement analysis:\nThe function should efficiently flatten a list of lists into a single list of unique numbers. It should handle various input sizes and types, ensuring that the output is a list of unique integers. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- The function must flatten nested lists into a single list of unique numbers.\n- The function should handle large datasets efficiently.\n- The function should be compatible with Python 3.x versions.\n- Provide documentation and examples for ease of use.\n- Ensure the function is easy to integrate into existing projects.\nWe will use Python's built-in set to efficiently handle uniqueness and itertools.chain to flatten the list of lists. This approach ensures high efficiency and usability, as it leverages Python's native capabilities without requiring additional libraries.\n", "requirement analysis:\nThe function should take a list of tuples as input and return a list of unique numbers. It should efficiently handle the extraction and deduplication of numbers, ensuring that the output is a list of unique elements in the order they first appear.\nrequirement pool:\n- Implement the function to extract unique numbers from a list of tuples\n- Optimize the function for performance with large datasets\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will implement a function using Python's built-in set to efficiently extract unique numbers from a list of tuples. This approach ensures that the function is both simple and effective, leveraging Python's native capabilities for deduplication and maintaining the order of first appearance using a list.\n", "requirement analysis:\nThe function should efficiently collapse a list of lists into a unique set of numbers, ensuring no duplicates and maintaining performance. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- The function must handle lists of varying sizes and types.\n- The function should return a list of unique numbers.\n- The function should be optimized for performance.\n- The function should include error handling for invalid inputs.\n- The function should be compatible with Python 3.x.\nWe will use Python's built-in set to ensure uniqueness and itertools.chain to efficiently flatten the list of lists. This approach is both efficient and easy to integrate into existing codebases. The function will handle edge cases by checking for invalid inputs and will be compatible with Python 3.x.\n"], "test": ["def check(extract_singly):\n\tassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]", "def check(extract_singly):\n\tassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]", "def check(extract_singly):\n\tassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]", "def check(extract_singly):\n\tassert extract_singly([(3, 7, 5), (7, 7, 9), (5, 2)]) == [3, 7, 5, 9, 2]", "def check(extract_singly):\n\tassert extract_singly([(3, 9, 6), (1, 6, 6), (4, 3)]) == [3, 9, 6, 1, 4]", "def check(extract_singly):\n\tassert extract_singly([(1, 7, 2), (5, 10, 5), (2, 6)]) == [1, 7, 2, 5, 10, 6]", "def check(extract_singly):\n\tassert extract_singly([(6, 8, 9), (5, 8, 11), (4, 1)]) == [6, 8, 9, 5, 11, 4, 1]", "def check(extract_singly):\n\tassert extract_singly([(6, 9, 4), (3, 9, 10), (3, 3)]) == [6, 9, 4, 3, 10]", "def check(extract_singly):\n\tassert extract_singly([(2, 4, 9), (1, 3, 12), (2, 5)]) == [2, 4, 9, 1, 3, 12, 5]", "def check(extract_singly):\n\tassert extract_singly([(8, 9, 4), (4, 6, 2), (2, 6)]) == [8, 9, 4, 6, 2]", "def check(extract_singly):\n\tassert extract_singly([(6, 4, 2), (2, 5, 12), (5, 8)]) == [6, 4, 2, 5, 12, 8]", "def check(extract_singly):\n\tassert extract_singly([(2, 6, 6), (3, 4, 2), (3, 4)]) == [2, 6, 3, 4]", "def check(extract_singly):\n\tassert extract_singly([(4, 6, 5), (8, 3, 5), (6, 9)]) == [4, 6, 5, 8, 3, 9]", "def check(extract_singly):\n\tassert extract_singly([(3, 9, 1), (4, 7, 7), (6, 4)]) == [3, 9, 1, 4, 7, 6]", "def check(extract_singly):\n\tassert extract_singly([(4, 9, 2), (6, 8, 5), (5, 1)]) == [4, 9, 2, 6, 8, 5, 1]", "def check(extract_singly):\n\tassert extract_singly([(6, 8, 10), (5, 5, 7), (4, 9)]) == [6, 8, 10, 5, 7, 4, 9]", "def check(extract_singly):\n\tassert extract_singly([(8, 1, 5), (8, 9, 6), (2, 6)]) == [8, 1, 5, 9, 6, 2]", "def check(extract_singly):\n\tassert extract_singly([(6, 1, 1), (9, 8, 6), (1, 7)]) == [6, 1, 9, 8, 7]", "def check(extract_singly):\n\tassert extract_singly([(4, 5, 5), (8, 10, 2), (5, 6)]) == [4, 5, 8, 10, 2, 6]", "def check(extract_singly):\n\tassert extract_singly([(6, 2, 8), (8, 5, 8), (6, 7)]) == [6, 2, 8, 5, 7]", "def check(extract_singly):\n\tassert extract_singly([(5, 8, 9), (2, 3, 6), (5, 6)]) == [5, 8, 9, 2, 3, 6]", "def check(extract_singly):\n\tassert extract_singly([(7, 4, 1), (6, 3, 11), (2, 1)]) == [7, 4, 1, 6, 3, 11, 2]", "def check(extract_singly):\n\tassert extract_singly([(1, 4, 2), (8, 8, 3), (4, 6)]) == [1, 4, 2, 8, 3, 6]", "def check(extract_singly):\n\tassert extract_singly([(3, 1, 2), (2, 3, 10), (5, 5)]) == [3, 1, 2, 10, 5]", "def check(extract_singly):\n\tassert extract_singly([(6, 5, 10), (7, 3, 12), (4, 1)]) == [6, 5, 10, 7, 3, 12, 4, 1]", "def check(extract_singly):\n\tassert extract_singly([(2, 6, 8), (9, 5, 4), (1, 5)]) == [2, 6, 8, 9, 5, 4, 1]", "def check(extract_singly):\n\tassert extract_singly([(4, 5, 2), (1, 1, 11), (4, 1)]) == [4, 5, 2, 1, 11]", "def check(extract_singly):\n\tassert extract_singly([(2, 4, 7), (7, 9, 4), (6, 3)]) == [2, 4, 7, 9, 6, 3]", "def check(extract_singly):\n\tassert extract_singly([(4, 8, 7), (5, 10, 11), (3, 2)]) == [4, 8, 7, 5, 10, 11, 3, 2]", "def check(extract_singly):\n\tassert extract_singly([(5, 4, 10), (7, 3, 11), (4, 4)]) == [5, 4, 10, 7, 3, 11]", "def check(extract_singly):\n\tassert extract_singly([(6, 5, 2), (8, 10, 5), (1, 1)]) == [6, 5, 2, 8, 10, 1]", "def check(extract_singly):\n\tassert extract_singly([(5, 5, 10), (5, 3, 11), (3, 9)]) == [5, 10, 3, 11, 9]", "def check(extract_singly):\n\tassert extract_singly([(2, 5, 9), (7, 5, 6), (3, 6)]) == [2, 5, 9, 7, 6, 3]", "def check(extract_singly):\n\tassert extract_singly([(2, 6, 5), (8, 2, 11), (6, 1)]) == [2, 6, 5, 8, 11, 1]", "def check(extract_singly):\n\tassert extract_singly([(1, 2, 10), (4, 2, 5), (3, 2)]) == [1, 2, 10, 4, 5, 3]", "def check(extract_singly):\n\tassert extract_singly([(8, 1, 10), (8, 3, 2), (1, 3)]) == [8, 1, 10, 3, 2]", "def check(extract_singly):\n\tassert extract_singly([(3, 7, 4), (1, 1, 5), (5, 5)]) == [3, 7, 4, 1, 5]", "def check(extract_singly):\n\tassert extract_singly([(6, 7, 1), (6, 5, 3), (11, 3)]) == [6, 7, 1, 5, 3, 11]", "def check(extract_singly):\n\tassert extract_singly([(1, 7, 4), (2, 2, 7), (2, 7)]) == [1, 7, 4, 2]", "def check(extract_singly):\n\tassert extract_singly([(4, 2, 3), (3, 7, 7), (2, 5)]) == [4, 2, 3, 7, 5]", "def check(extract_singly):\n\tassert extract_singly([(5, 6, 1), (7, 4, 3), (6, 4)]) == [5, 6, 1, 7, 4, 3]", "def check(extract_singly):\n\tassert extract_singly([(4, 1, 4), (8, 2, 5), (10, 12)]) == [4, 1, 8, 2, 5, 10, 12]", "def check(extract_singly):\n\tassert extract_singly([(6, 1, 2), (8, 2, 5), (4, 9)]) == [6, 1, 2, 8, 5, 4, 9]", "def check(extract_singly):\n\tassert extract_singly([(1, 5, 3), (9, 2, 6), (10, 4)]) == [1, 5, 3, 9, 2, 6, 10, 4]", "def check(extract_singly):\n\tassert extract_singly([(4, 3, 8), (6, 1, 6), (12, 12)]) == [4, 3, 8, 6, 1, 12]", "def check(extract_singly):\n\tassert extract_singly([(4, 7, 5), (9, 5, 3), (11, 11)]) == [4, 7, 5, 9, 3, 11]", "def check(extract_singly):\n\tassert extract_singly([(5, 3, 6), (4, 6, 3), (2, 7)]) == [5, 3, 6, 4, 2, 7]", "def check(extract_singly):\n\tassert extract_singly([(5, 1, 8), (1, 7, 8), (7, 9)]) == [5, 1, 8, 7, 9]", "def check(extract_singly):\n\tassert extract_singly([(4, 7, 1), (3, 2, 1), (11, 3)]) == [4, 7, 1, 3, 2, 11]", "def check(extract_singly):\n\tassert extract_singly([(6, 3, 6), (1, 2, 2), (8, 9)]) == [6, 3, 1, 2, 8, 9]", "def check(extract_singly):\n\tassert extract_singly([(5, 1, 4), (5, 3, 1), (2, 9)]) == [5, 1, 4, 3, 2, 9]", "def check(extract_singly):\n\tassert extract_singly([(2, 2, 2), (6, 5, 8), (12, 3)]) == [2, 6, 5, 8, 12, 3]", "def check(extract_singly):\n\tassert extract_singly([(5, 4, 3), (1, 5, 2), (12, 5)]) == [5, 4, 3, 1, 2, 12]", "def check(extract_singly):\n\tassert extract_singly([(4, 3, 4), (7, 2, 3), (8, 10)]) == [4, 3, 7, 2, 8, 10]", "def check(extract_singly):\n\tassert extract_singly([(3, 3, 4), (4, 1, 4), (4, 9)]) == [3, 4, 1, 9]", "def check(extract_singly):\n\tassert extract_singly([(5, 4, 3), (3, 5, 1), (3, 10)]) == [5, 4, 3, 1, 10]", "def check(extract_singly):\n\tassert extract_singly([(3, 7, 1), (6, 4, 8), (8, 8)]) == [3, 7, 1, 6, 4, 8]", "def check(extract_singly):\n\tassert extract_singly([(6, 3, 8), (3, 1, 1), (9, 13)]) == [6, 3, 8, 1, 9, 13]", "def check(extract_singly):\n\tassert extract_singly([(6, 2, 1), (2, 3, 6), (4, 13)]) == [6, 2, 1, 3, 4, 13]", "def check(extract_singly):\n\tassert extract_singly([(3, 7, 2), (8, 4, 1), (2, 10)]) == [3, 7, 2, 8, 4, 1, 10]", "def check(extract_singly):\n\tassert extract_singly([(5, 7, 4), (4, 7, 1), (11, 5)]) == [5, 7, 4, 1, 11]", "def check(extract_singly):\n\tassert extract_singly([(3, 3, 3), (4, 1, 7), (8, 12)]) == [3, 4, 1, 7, 8, 12]", "def check(extract_singly):\n\tassert extract_singly([(3, 5, 7), (6, 1, 8), (4, 7)]) == [3, 5, 7, 6, 1, 8, 4]", "def check(extract_singly):\n\tassert extract_singly([(2, 2, 2), (6, 4, 8), (12, 6)]) == [2, 6, 4, 8, 12]", "def check(extract_singly):\n\tassert extract_singly([(1, 2, 3), (8, 2, 7), (6, 4)]) == [1, 2, 3, 8, 7, 6, 4]", "def check(extract_singly):\n\tassert extract_singly([(5, 4, 1), (9, 6, 3), (6, 3)]) == [5, 4, 1, 9, 6, 3]", "def check(extract_singly):\n\tassert extract_singly([(6, 3, 4), (3, 1, 4), (6, 6)]) == [6, 3, 4, 1]", "def check(extract_singly):\n\tassert extract_singly([(1, 4, 1), (6, 3, 2), (10, 3)]) == [1, 4, 6, 3, 2, 10]", "def check(extract_singly):\n\tassert extract_singly([(2, 5, 7), (3, 2, 8), (12, 7)]) == [2, 5, 7, 3, 8, 12]", "def check(extract_singly):\n\tassert extract_singly([(6, 3, 8), (7, 9, 7), (10, 12)]) == [6, 3, 8, 7, 9, 10, 12]", "def check(extract_singly):\n\tassert extract_singly([(7, 9, 7), (13, 11, 8), (14, 6)]) == [7, 9, 13, 11, 8, 14, 6]", "def check(extract_singly):\n\tassert extract_singly([(3, 7, 11), (11, 14, 8), (11, 8)]) == [3, 7, 11, 14, 8]", "def check(extract_singly):\n\tassert extract_singly([(12, 12, 5), (15, 14, 13), (15, 13)]) == [12, 5, 15, 14, 13]", "def check(extract_singly):\n\tassert extract_singly([(6, 7, 13), (5, 12, 10), (14, 7)]) == [6, 7, 13, 5, 12, 10, 14]", "def check(extract_singly):\n\tassert extract_singly([(10, 10, 4), (14, 6, 8), (9, 9)]) == [10, 4, 14, 6, 8, 9]", "def check(extract_singly):\n\tassert extract_singly([(3, 11, 9), (12, 10, 12), (5, 16)]) == [3, 11, 9, 12, 10, 5, 16]", "def check(extract_singly):\n\tassert extract_singly([(4, 11, 10), (8, 10, 12), (14, 8)]) == [4, 11, 10, 8, 12, 14]", "def check(extract_singly):\n\tassert extract_singly([(5, 11, 9), (13, 15, 8), (9, 13)]) == [5, 11, 9, 13, 15, 8]", "def check(extract_singly):\n\tassert extract_singly([(7, 8, 5), (8, 14, 12), (13, 9)]) == [7, 8, 5, 14, 12, 13, 9]", "def check(extract_singly):\n\tassert extract_singly([(5, 13, 10), (7, 11, 13), (5, 7)]) == [5, 13, 10, 7, 11]", "def check(extract_singly):\n\tassert extract_singly([(12, 4, 12), (7, 16, 8), (7, 12)]) == [12, 4, 7, 16, 8]", "def check(extract_singly):\n\tassert extract_singly([(9, 10, 6), (7, 7, 8), (14, 16)]) == [9, 10, 6, 7, 8, 14, 16]", "def check(extract_singly):\n\tassert extract_singly([(3, 3, 9), (6, 8, 13), (7, 14)]) == [3, 9, 6, 8, 13, 7, 14]", "def check(extract_singly):\n\tassert extract_singly([(9, 7, 6), (9, 8, 9), (8, 6)]) == [9, 7, 6, 8]", "def check(extract_singly):\n\tassert extract_singly([(9, 13, 4), (13, 6, 15), (11, 13)]) == [9, 13, 4, 6, 15, 11]", "def check(extract_singly):\n\tassert extract_singly([(10, 4, 10), (7, 14, 9), (10, 15)]) == [10, 4, 7, 14, 9, 15]", "def check(extract_singly):\n\tassert extract_singly([(7, 11, 9), (10, 9, 15), (8, 12)]) == [7, 11, 9, 10, 15, 8, 12]", "def check(extract_singly):\n\tassert extract_singly([(8, 7, 10), (8, 10, 13), (6, 7)]) == [8, 7, 10, 13, 6]", "def check(extract_singly):\n\tassert extract_singly([(6, 8, 9), (7, 15, 11), (5, 12)]) == [6, 8, 9, 7, 15, 11, 5, 12]", "def check(extract_singly):\n\tassert extract_singly([(4, 7, 7), (8, 13, 17), (11, 13)]) == [4, 7, 8, 13, 17, 11]", "def check(extract_singly):\n\tassert extract_singly([(8, 7, 14), (8, 14, 7), (15, 7)]) == [8, 7, 14, 15]", "def check(extract_singly):\n\tassert extract_singly([(7, 7, 11), (13, 16, 9), (15, 7)]) == [7, 11, 13, 16, 9, 15]", "def check(extract_singly):\n\tassert extract_singly([(5, 8, 13), (12, 16, 9), (10, 6)]) == [5, 8, 13, 12, 16, 9, 10, 6]", "def check(extract_singly):\n\tassert extract_singly([(9, 3, 5), (11, 12, 8), (9, 8)]) == [9, 3, 5, 11, 12, 8]", "def check(extract_singly):\n\tassert extract_singly([(11, 12, 10), (13, 9, 12), (5, 15)]) == [11, 12, 10, 13, 9, 5, 15]", "def check(extract_singly):\n\tassert extract_singly([(4, 6, 14), (6, 8, 10), (11, 11)]) == [4, 6, 14, 8, 10, 11]", "def check(extract_singly):\n\tassert extract_singly([(10, 6, 7), (8, 13, 16), (14, 13)]) == [10, 6, 7, 8, 13, 16, 14]", "def check(extract_singly):\n\tassert extract_singly([(12, 12, 5), (6, 14, 15), (9, 16)]) == [12, 5, 6, 14, 15, 9, 16]", "def check(extract_singly):\n\tassert extract_singly([(5, 5, 6), (14, 7, 7), (9, 13)]) == [5, 6, 14, 7, 9, 13]", "def check(extract_singly):\n\tassert extract_singly([(11, 8, 8), (13, 12, 15), (12, 6)]) == [11, 8, 13, 12, 15, 6]", "def check(extract_singly):\n\tassert extract_singly([(9, 3, 5), (12, 13, 15), (8, 14)]) == [9, 3, 5, 12, 13, 15, 8, 14]", "def check(extract_singly):\n\tassert extract_singly([(7, 4, 5), (7, 14, 10), (14, 7)]) == [7, 4, 5, 14, 10]"], "scores": [0.0196, 1.0, 0.0196, 1.0, 0.0196, 0.0196, 1.0, 0.0196, 1.0, 0.0196], "pass_results": [false, true, false, true, false, false, true, false, true, false], "pass_test_cases_num": [2, 102, 2, 102, 2, 2, 102, 2, 102, 2], "completion": "from typing import List\n## main.py\n\ndef extract_singly(list_of_tuples: list[tuple[int, ...]]) -> list[int]:\n    \"\"\"\n    Extracts unique numbers from a list of tuples.\n\n    Parameters:\n    list_of_tuples (list of tuples): A list where each element is a tuple containing integers.\n\n    Returns:\n    list: A list of unique integers in the order they first appear.\n    \"\"\"\n    unique_numbers_set = set()\n    unique_numbers_list = []\n\n    for tuple_item in list_of_tuples:\n        for number in tuple_item:\n            if number not in unique_numbers_set:\n                unique_numbers_set.add(number)\n                unique_numbers_list.append(number)\n\n    return unique_numbers_list\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_input = [(3, 4, 5), (4, 5, 7), (1, 4)]\n    result = extract_singly(example_input)\n    print(result)  # Output: [3, 4, 5, 7, 1]\n", "passed": true, "pass": true, "pass_num": 4, "round": 59, "mutate_method": "rephrase_one", "parent_index": 59}
