{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Create a function to determine the sum (n - 2*i) from i=0 to n // 2, for example n + (n-2) + (n-4)... (until n-x =< 0).", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25", "assert sum_series(5) == 9", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(1) == 1", "assert sum_series(4) == 6", "assert sum_series(4) == 6", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(10) == 30", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(6) == 12", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(8) == 20", "assert sum_series(9) == 25", "assert sum_series(10) == 30", "assert sum_series(5) == 9", "assert sum_series(3) == 4", "assert sum_series(1) == 1", "assert sum_series(11) == 36", "assert sum_series(3) == 4", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(9) == 25", "assert sum_series(3) == 4", "assert sum_series(6) == 12", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(13) == 49", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(15) == 64", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(15) == 64", "assert sum_series(15) == 64", "assert sum_series(12) == 42", "assert sum_series(11) == 36", "assert sum_series(11) == 36", "assert sum_series(15) == 64", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(5) == 9", "assert sum_series(10) == 30", "assert sum_series(12) == 42", "assert sum_series(7) == 16", "assert sum_series(15) == 64", "assert sum_series(9) == 25", "assert sum_series(14) == 56", "assert sum_series(7) == 16", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(12) == 42", "assert sum_series(4) == 6", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(12) == 42", "assert sum_series(10) == 30", "assert sum_series(4) == 6", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(9) == 25", "assert sum_series(12) == 42", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(13) == 49", "assert sum_series(8) == 20", "assert sum_series(9) == 25"], "entry_point": "sum_series", "repair_prompt": ["Create a function sum_series to determine the sum (n - 2*i) from i=0 to n // 2, for example n + (n-2) + (n-4)... (until n-x =< 0).\nsum_series(6)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i from 0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to zero\n    series_sum = 0\n    \n    # Iterate over the range from 0 to n//2\n    for i in range(n // 2 + 1):\n        # Add the term (n - 2*i) to the sum\n        series_sum += (n - 2 * i)\n    \n    return series_sum\n\n# Example usage:\n# result = sum_series(5)\n# print(result)  # Output should be 9\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    '''\n    Calculate the sum of the series (n - 2*i) for i from 0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    '''\n    # Handle edge case where n is less than or equal to 0\n    if n <= 0:\n        return 0\n\n    # Initialize sum variable\n    series_sum = 0\n\n    # Iterate over the range from 0 to n//2\n    for i in range(n // 2 + 1):\n        series_sum += (n - 2 * i)\n\n    return series_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) + ... until the term is non-positive.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the series terms\n    current_term = n\n    while current_term > 0:\n        total_sum += current_term\n        current_term -= 2\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    result = sum_series(10)\n    print(f\"The sum of the series starting from 10 is: {result}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to zero\n    series_sum = 0\n    \n    # Iterate from 0 to n//2\n    for i in range(n // 2 + 1):\n        # Add the term (n - 2*i) to the sum\n        series_sum += (n - 2 * i)\n    \n    return series_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    n = 5\n    result = sum_series(n)\n    print(f\"The sum of the series for n={n} is: {result}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) + ... until the term is non-positive.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series.\n\n    Example:\n    >>> sum_series(6)\n    12\n    \"\"\"\n    # Initialize the sum to 0\n    series_sum = 0\n    \n    # Iterate over the series, adding each term to the sum\n    while n > 0:\n        series_sum += n\n        n -= 2  # Decrease the term by 2 for the next iteration\n    \n    return series_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example\n    example_result = sum_series(6)\n    print(f\"The sum of the series starting from 6 is: {example_result}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) + ... until the term is non-positive.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge case where n is zero or negative\n    if n <= 0:\n        return 0\n\n    # Initialize sum variable\n    total_sum = 0\n\n    # Iterate over the series terms\n    for i in range(0, n // 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total_sum += term\n        else:\n            break\n\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_series(10))  # Expected output: 30 (10 + 8 + 6 + 4 + 2)\n    print(sum_series(5))   # Expected output: 9 (5 + 3 + 1)\n    print(sum_series(0))   # Expected output: 0\n    print(sum_series(-5))  # Expected output: 0\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i from 0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Initialize sum\n    series_sum = 0\n\n    # Calculate the sum of the series\n    for i in range(n // 2 + 1):\n        series_sum += (n - 2 * i)\n\n    return series_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_series(0))  # Expected output: 0\n    print(sum_series(1))  # Expected output: 1\n    print(sum_series(5))  # Expected output: 9\n    print(sum_series(10)) # Expected output: 30\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge cases where n is zero or negative\n    if n <= 0:\n        return 0\n\n    # Initialize sum variable\n    series_sum = 0\n\n    # Calculate the sum of the series\n    for i in range(n // 2 + 1):\n        series_sum += (n - 2 * i)\n\n    return series_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to zero\n    series_sum = 0\n    \n    # Iterate over the range from 0 to n//2\n    for i in range(n // 2 + 1):\n        # Calculate the term (n - 2*i) and add it to the sum\n        series_sum += (n - 2 * i)\n    \n    return series_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    n = 5\n    result = sum_series(n)\n    print(f\"The sum of the series for n={n} is: {result}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i from 0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge cases where n is less than or equal to zero\n    if n <= 0:\n        return 0\n\n    # Initialize sum variable\n    total_sum = 0\n\n    # Calculate the sum of the series\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle edge cases and be efficient for large n.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Optimize the function for performance with large inputs\n- Include comprehensive test cases for edge scenarios\n- Document the function with examples and usage instructions\n- Ensure compatibility with Python 3.x\nWe will implement a simple function using basic Python constructs to calculate the sum of the series. Given the simplicity of the task, no external libraries are necessary. The function will iterate over the range from 0 to n//2, summing the terms (n - 2*i). We will ensure the function handles edge cases such as n=0 and n=1 efficiently.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle both even and odd values of n and return the correct sum.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Ensure the function handles edge cases such as n=0 or negative values\n- Provide documentation and examples for the function\n- Optimize the function for performance with large inputs\n- Include unit tests to verify the function's correctness\nWe will implement the sum_series function using pure Python to keep it simple and efficient. The function will iterate over the range from 0 to n//2, calculating the sum of the series (n - 2*i). This approach is straightforward and performs well even for large inputs. We will also handle edge cases such as n=0 or negative values by returning 0, as the series would not have any valid terms in these cases.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is derived by subtracting twice the index from the initial number n. The series continues until the term becomes non-positive. The function should handle edge cases and be efficient for large n.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Ensure the function handles edge cases like n=0 or n=1\n- Optimize the function for large values of n\n- Provide documentation and examples for the function\n- Test the function with a variety of inputs\nWe will implement a simple function using basic Python constructs to calculate the sum of the series. Given the simplicity of the task, no external libraries are necessary. The function will iterate over the series terms, summing them until a non-positive term is reached. We will ensure the function handles edge cases like n=0 or n=1 efficiently.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle cases where n is small or even zero, and should be efficient for larger values of n.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large n values.\n- Include comprehensive test cases to cover edge cases.\n- Document the function with examples and usage notes.\n- Ensure compatibility with Python 3.x versions.\nWe will implement a simple function using basic Python constructs to calculate the sum of the series efficiently. Given the nature of the series, a loop will be used to iterate from 0 to n//2, summing the terms (n - 2*i). This approach ensures compatibility with Python 3.x and handles edge cases like n=0 or n=1. We will avoid using heavy libraries like NumPy or SymPy as they are overkill for this task.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is derived by subtracting twice the index from the initial number, n. The series continues until the term becomes non-positive. The function should handle both even and odd values of n efficiently.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Ensure the function handles edge cases like n=0 or negative n\n- Provide documentation and examples for the function\n- Optimize the function for performance with large n\n- Include unit tests to verify the function's correctness\nWe will implement the sum_series function using pure Python to ensure simplicity and efficiency. The function will iterate over the series, calculating each term by subtracting twice the index from the initial number, n, until the term becomes non-positive. We will handle edge cases such as n=0 or negative n by returning 0, as the series would not have any positive terms. Documentation and examples will be provided to ensure usability.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is derived by subtracting twice the index from the initial number n, iterating until the term is non-positive. The function should be efficient and handle edge cases such as n being zero or negative.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum.\n- Ensure the function handles edge cases like n=0 or negative values.\n- Provide documentation and examples for the function.\n- Optimize the function for large input values.\n- Include unit tests to verify the function's correctness.\nWe will implement a simple function named sum_series that calculates the sum of the series by iterating from 0 to n // 2, subtracting twice the index from n for each term. The function will handle edge cases such as n being zero or negative by returning 0 in such cases. We will ensure the function is efficient and easy to understand, with clear documentation and examples. We will not use any external libraries as the task is straightforward and can be handled with basic Python constructs.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle cases where n is small or large and ensure that the series stops when the term becomes non-positive.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Ensure the function handles edge cases such as n=0 or n=1.\n- Optimize the function for performance with large values of n.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify the function's correctness.\nWe will implement a simple function named sum_series that calculates the sum of the series (n - 2*i) for i ranging from 0 to n//2. The function will handle edge cases such as n=0 or n=1 by returning 0 or n respectively. The function will be optimized for performance by using a loop to iterate through the series terms. We will not use any external libraries as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle cases where n is small or large efficiently.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Ensure the function handles edge cases such as n=0 or negative n\n- Provide documentation and examples for the function\n- Optimize the function for performance with large inputs\n- Include unit tests to verify the function's correctness\nWe will implement a simple function named sum_series that calculates the sum of the series (n - 2*i) from i=0 to n//2. The function will handle edge cases such as n=0 or negative n by returning 0, as a negative or zero value for n does not make sense in the context of this series. The function will be efficient and easy to understand, using basic Python operations without the need for external libraries, as the task is straightforward and does not require complex computations.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle both even and odd values of n and return the correct sum.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Optimize the function for performance with large n\n- Include comprehensive test cases\n- Provide detailed documentation and usage examples\n- Ensure compatibility with Python 3.x\nWe will implement a simple function using basic Python constructs to calculate the sum of the series. Given the simplicity of the task, no external libraries are necessary. The function will iterate over the range from 0 to n//2, calculating the sum of terms (n - 2*i). We will ensure the function handles edge cases such as n=0 and n=1 efficiently.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle cases where n is small or large and should stop when the term becomes non-positive.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum\n- Ensure the function handles edge cases like n=0 or negative n\n- Provide documentation and examples for the function\n- Optimize the function for performance with large n\n- Include unit tests to verify function correctness\nWe will implement a simple function using basic Python constructs to calculate the sum of the series. Given the simplicity of the task, no external libraries are necessary. The function will handle edge cases such as n=0 and negative n by returning 0, as the series would not have any positive terms.\n"], "test": ["def check(sum_series):\n\tassert sum_series(6)==12", "def check(sum_series):\n\tassert sum_series(10)==30", "def check(sum_series):\n\tassert sum_series(9)==25", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(14) == 56", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i from 0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge cases where n is less than or equal to zero\n    if n <= 0:\n        return 0\n\n    # Initialize sum variable\n    total_sum = 0\n\n    # Calculate the sum of the series\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 442, "mutate_method": "rephrase_one", "parent_index": 63}
