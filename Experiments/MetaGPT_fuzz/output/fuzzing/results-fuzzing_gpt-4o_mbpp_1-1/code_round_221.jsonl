{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 731, "prompt": "Create a function to compute the lateral surface area of a cone when the radius r and the height h are provided.", "code": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  LSA = math.pi * r  * l\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388", "assert lateralsurface_cone(4, 10) == 135.3439535717124", "assert lateralsurface_cone(8, 11) == 341.84223862609196", "assert lateralsurface_cone(10, 14) == 540.5000372546194", "assert lateralsurface_cone(10, 17) == 619.6189241803191", "assert lateralsurface_cone(2, 17) == 107.55080826324239", "assert lateralsurface_cone(1, 11) == 34.700025027842585", "assert lateralsurface_cone(10, 17) == 619.6189241803191", "assert lateralsurface_cone(3, 12) == 116.5780650907367", "assert lateralsurface_cone(1, 15) == 47.22849346153437", "assert lateralsurface_cone(9, 14) == 470.5787011194216", "assert lateralsurface_cone(7, 8) == 233.76911594312833", "assert lateralsurface_cone(6, 12) == 252.89333031746617", "assert lateralsurface_cone(10, 13) == 515.25950586991", "assert lateralsurface_cone(9, 7) == 322.3770065365564", "assert lateralsurface_cone(9, 14) == 470.5787011194216", "assert lateralsurface_cone(9, 15) == 494.59884217959996", "assert lateralsurface_cone(10, 9) == 422.6580647044575", "assert lateralsurface_cone(5, 17) == 278.3458182702795", "assert lateralsurface_cone(6, 15) == 304.52389553635294", "assert lateralsurface_cone(4, 12) == 158.95341225273762", "assert lateralsurface_cone(6, 9) == 203.88912118450162", "assert lateralsurface_cone(8, 16) == 449.5881427866065", "assert lateralsurface_cone(9, 11) == 401.85378834922545", "assert lateralsurface_cone(8, 8) == 284.34450804213543", "assert lateralsurface_cone(1, 10) == 31.572615420804546", "assert lateralsurface_cone(6, 17) == 339.8152019741693", "assert lateralsurface_cone(1, 14) == 44.09435413989645", "assert lateralsurface_cone(5, 7) == 135.12500931365486", "assert lateralsurface_cone(1, 13) == 40.9613567668991", "assert lateralsurface_cone(1, 10) == 31.572615420804546", "assert lateralsurface_cone(1, 13) == 40.9613567668991", "assert lateralsurface_cone(4, 7) == 101.31331885360844", "assert lateralsurface_cone(8, 9) == 302.63828052992443", "assert lateralsurface_cone(7, 10) == 268.43617813616964", "assert lateralsurface_cone(14, 16) == 935.0764637725133", "assert lateralsurface_cone(6, 12) == 252.89333031746617", "assert lateralsurface_cone(6, 17) == 339.8152019741693", "assert lateralsurface_cone(6, 14) == 287.1078820894653", "assert lateralsurface_cone(6, 20) == 393.59028275542903", "assert lateralsurface_cone(6, 18) == 357.6451775686596", "assert lateralsurface_cone(11, 19) == 758.6929997570384", "assert lateralsurface_cone(13, 15) == 810.6648374334094", "assert lateralsurface_cone(15, 11) == 876.5550197362436", "assert lateralsurface_cone(11, 12) == 562.5556551319436", "assert lateralsurface_cone(11, 20) == 788.7900424378303", "assert lateralsurface_cone(14, 12) == 810.9934878213232", "assert lateralsurface_cone(9, 18) == 569.0099932142988", "assert lateralsurface_cone(14, 12) == 810.9934878213232", "assert lateralsurface_cone(9, 13) == 447.0564719608245", "assert lateralsurface_cone(9, 18) == 569.0099932142988", "assert lateralsurface_cone(12, 16) == 753.9822368615503", "assert lateralsurface_cone(10, 11) == 467.03132364336636", "assert lateralsurface_cone(14, 18) == 1002.9506870026199", "assert lateralsurface_cone(15, 10) == 849.5380049354233", "assert lateralsurface_cone(14, 10) == 756.7000521564672", "assert lateralsurface_cone(14, 17) == 968.6096191797571", "assert lateralsurface_cone(11, 12) == 562.5556551319436", "assert lateralsurface_cone(14, 10) == 756.7000521564672", "assert lateralsurface_cone(13, 16) == 841.9526923219875", "assert lateralsurface_cone(5, 13) == 218.78661143973912", "assert lateralsurface_cone(12, 11) == 613.6970783257566", "assert lateralsurface_cone(12, 11) == 613.6970783257566", "assert lateralsurface_cone(8, 20) == 541.3758142868496", "assert lateralsurface_cone(9, 16) == 519.0477736553122", "assert lateralsurface_cone(7, 20) == 465.98408387880266", "assert lateralsurface_cone(13, 19) == 940.2236256367811", "assert lateralsurface_cone(19, 22) == 1735.1292385670592", "assert lateralsurface_cone(22, 16) == 1880.1323124435057", "assert lateralsurface_cone(22, 19) == 2009.0970130776475", "assert lateralsurface_cone(24, 13) == 2057.9710009121764", "assert lateralsurface_cone(14, 16) == 935.0764637725133", "assert lateralsurface_cone(22, 18) == 1964.6185208184352", "assert lateralsurface_cone(19, 15) == 1444.9482110556244", "assert lateralsurface_cone(21, 19) == 1868.3418915675168", "assert lateralsurface_cone(15, 12) == 905.2203628953802", "assert lateralsurface_cone(15, 19) == 1140.748587675493", "assert lateralsurface_cone(21, 16) == 1741.7489463162146", "assert lateralsurface_cone(17, 15) == 1210.8221402684294", "assert lateralsurface_cone(22, 12) == 1732.0178974017306", "assert lateralsurface_cone(22, 22) == 2150.355342068649", "assert lateralsurface_cone(17, 16) == 1246.8007223263787", "assert lateralsurface_cone(24, 16) == 2174.8172926346833", "assert lateralsurface_cone(16, 20) == 1287.4245161178742", "assert lateralsurface_cone(17, 12) == 1111.3292428165107", "assert lateralsurface_cone(23, 12) == 1874.4991197817697", "assert lateralsurface_cone(19, 17) == 1521.8090132193388", "assert lateralsurface_cone(20, 19) == 1733.2938526665353", "assert lateralsurface_cone(16, 15) == 1102.4080948235726", "assert lateralsurface_cone(24, 22) == 2454.7883133030264", "assert lateralsurface_cone(15, 22) == 1254.7703543213713", "assert lateralsurface_cone(17, 20) == 1401.8721403713373", "assert lateralsurface_cone(16, 14) == 1068.6588157400154", "assert lateralsurface_cone(15, 19) == 1140.748587675493", "assert lateralsurface_cone(19, 17) == 1521.8090132193388", "assert lateralsurface_cone(20, 15) == 1570.7963267948965", "assert lateralsurface_cone(17, 17) == 1283.9931691277677", "assert lateralsurface_cone(17, 21) == 1442.9797089695412", "assert lateralsurface_cone(24, 13) == 2057.9710009121764", "assert lateralsurface_cone(15, 16) == 1033.5075888970994"], "entry_point": "lateralsurface_cone", "repair_prompt": ["Create a function lateralsurface_cone to compute the lateral surface area of a cone when the radius r and the height h are provided.\nlateralsurface_cone(5,12)==204.20352248333654\n"], "completions": ["from typing import List\n## main.py\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the cone's base.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If r or h are negative.\n    \"\"\"\n    # Validate inputs\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative values.\")\n\n    # Compute lateral surface area\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    \n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cone.\n\n    This function calculates the lateral surface area of a cone using the formula:\n    \u03c0 * r * sqrt(r^2 + h^2). It includes input validation to handle edge cases\n    such as zero or negative values for radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone if inputs are valid.\n    Raises ValueError if the radius or height is zero or negative.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n\n# Example usage:\n# try:\n#     area = lateralsurface_cone(3.0, 4.0)\n#     print(f\"The lateral surface area of the cone is: {area}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cone.\n\n    This function calculates the lateral surface area of a cone using the formula:\n    \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2).\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone. If the input values are invalid\n    (e.g., negative or zero), it returns -1 to indicate an error.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        print(\"Invalid input: Radius and height must be positive numbers.\")\n        return -1\n\n    # Calculate the slant height\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cone.\n\n    This function calculates the lateral surface area of a cone using the formula:\n    \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2).\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone. If the input values are invalid\n    (e.g., negative or zero), it returns -1 to indicate an error.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        print(\"Invalid input: Radius and height must be positive numbers.\")\n        return -1\n\n    # Calculate the slant height\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or an error message if inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    \n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be a positive number.\n    h (float): The height of the cone. Must be a positive number.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is not a positive number.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise ValueError(\"The radius and height must be numeric values.\")\n    if r <= 0 or h <= 0:\n        raise ValueError(\"The radius and height must be positive numbers.\")\n\n    # Calculate the slant height\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cone.\n\n    This function computes the lateral surface area of a cone using the formula:\n    \u03c0 * r * sqrt(r^2 + h^2). It handles edge cases for zero or negative values\n    for radius and height by returning an appropriate message or value.\n\n    Parameters:\n    r (float): The radius of the cone's base.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone, or -1 if inputs are invalid.\n    \"\"\"\n    if r <= 0 or h <= 0:\n        print(\"Invalid input: Radius and height must be positive numbers.\")\n        return -1\n\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be positive.\n    h (float): The height of the cone. Must be positive.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If r or h are not positive numbers.\n    \"\"\"\n    # Validate inputs\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n\n    # Calculate slant height\n    l = math.sqrt(r**2 + h**2)\n\n    # Calculate lateral surface area\n    area = math.pi * r * l\n\n    return area\n", "from typing import List\n## main.py\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone given the radius and height.\n\n    Parameters:\n    r (float): The radius of the base of the cone. Must be non-negative.\n    h (float): The height of the cone. Must be non-negative.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n    \"\"\"\n    # Validate inputs\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative values.\")\n\n    # Calculate the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2)\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative or zero.\n    \"\"\"\n    # Validate inputs\n    if r <= 0:\n        raise ValueError(\"The radius must be a positive number.\")\n    if h <= 0:\n        raise ValueError(\"The height must be a positive number.\")\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    \n    return lateral_surface_area\n"], "plans": ["requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle various input types and provide error messages for invalid inputs.\nrequirement pool:\n- Implement the main function to calculate lateral surface area\n- Ensure the function handles edge cases and invalid inputs\n- Provide documentation explaining the formula and usage\n- Optimize the function for performance\n- Include unit tests to verify accuracy\nWe will implement a function named lateralsurface_cone to calculate the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for accurate mathematical computations. The function will include error handling for invalid inputs such as negative values for radius and height, and provide clear documentation on usage and formula.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle typical edge cases such as zero or negative values for radius and height.\nrequirement pool:\n- Implement the function to compute lateral surface area of a cone\n- Ensure the function handles edge cases\n- Provide documentation for the function\n- Optimize the function for performance\n- Include unit tests for validation\nWe will implement a function named lateralsurface_cone that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for accurate mathematical computations. The function will include checks to handle edge cases such as zero or negative values for radius and height, returning appropriate messages or values. Documentation will be provided to explain the formula and usage. Performance optimization will be considered, especially for large inputs, by ensuring efficient mathematical operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the given radius and height. The formula for the lateral surface area of a cone is \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should return a precise floating-point result.\nrequirement pool:\n- Implement the function to calculate the lateral surface area of a cone.\n- Ensure the function handles edge cases like zero or negative inputs gracefully.\n- Optimize the function for performance with large input values.\n- Create a simple UI for users to input values and see results.\n- Add documentation and examples for user guidance.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the `math` library for accurate mathematical computations. The function will handle edge cases such as zero or negative inputs by returning a message indicating invalid input. The function will be optimized for performance to handle large input values efficiently.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the given radius and height. The formula for the lateral surface area of a cone is \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should return a precise floating-point result.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula.\n- Ensure the function handles edge cases, such as zero or negative inputs.\n- Optimize the function for performance to handle large inputs efficiently.\n- Create a simple user interface for input and output.\n- Include documentation and examples for user guidance.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the `math` library for mathematical operations to ensure precision and performance. The function will handle edge cases such as zero or negative inputs by returning a message indicating invalid input.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle typical input values for radius and height and return a floating-point number.\nrequirement pool:\n- Implement the function to calculate lateral surface area using the correct formula.\n- Ensure the function handles edge cases like zero or negative values.\n- Provide documentation explaining the function's usage and formula.\n- Optimize the function for performance.\n- Include unit tests to verify the function's accuracy.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the `math` library for mathematical operations to ensure accuracy and performance. The function will include error handling for edge cases such as zero or negative values for radius and height, returning an appropriate message or value.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cone using the formula: \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). The function should be accurate and handle edge cases such as zero or negative inputs.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cone.\n- Validate inputs to ensure they are positive numbers.\n- Optimize the function for performance.\n- Create a user interface for input and output.\n- Add error handling for invalid inputs.\nWe will implement a function to calculate the lateral surface area of a cone using the formula \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the math library for accurate mathematical computations. The function will include input validation to ensure the radius and height are positive numbers, and handle invalid inputs gracefully.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle typical input ranges for radius and height and return results with precision.\nrequirement pool:\n- Implement the mathematical formula for lateral surface area of a cone.\n- Ensure the function handles edge cases like zero or negative values.\n- Optimize the function for performance.\n- Create a user-friendly interface for input.\n- Provide documentation for the function usage.\nWe will implement the mathematical formula for the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for accurate computation of square root and pi. The function will handle typical input ranges and return results with precision. We will also ensure the function handles edge cases like zero or negative values for radius and height by returning an appropriate message or value.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). It should handle typical input ranges and provide results with high precision.\nrequirement pool:\n- Implement the main function to calculate lateral surface area.\n- Ensure the function handles invalid inputs gracefully.\n- Provide documentation explaining the formula and usage.\n- Optimize the function for performance with large inputs.\n- Include unit tests to verify accuracy.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * l, where l is the slant height calculated as sqrt(r^2 + h^2). We will use the `math` library for mathematical operations to ensure precision. The function will include input validation to handle edge cases such as negative or zero values for radius and height, returning an appropriate error message or handling them gracefully.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It must handle typical input ranges for radius and height and return results with high precision.\nrequirement pool:\n- Implement the mathematical formula for lateral surface area of a cone.\n- Ensure the function handles edge cases like zero or negative values.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Include error handling for invalid inputs.\nWe will implement the mathematical formula for the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the math library for precise calculations. The function will include error handling to manage edge cases such as zero or negative values for radius and height, which are not physically meaningful. The function will return a precise floating-point number representing the lateral surface area.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area using the formula: \u03c0 * r * sqrt(r^2 + h^2). It should handle typical input values and return results with precision.\nrequirement pool:\n- Implement the main function to calculate lateral surface area.\n- Design a user-friendly interface for input and output.\n- Ensure the function handles edge cases and invalid inputs gracefully.\n- Optimize the function for performance.\n- Provide detailed documentation and examples.\nWe will implement a function named `lateralsurface_cone` that calculates the lateral surface area of a cone using the formula: \u03c0 * r * sqrt(r^2 + h^2). We will use the `math` library for mathematical operations to ensure precision. The function will include basic input validation to handle edge cases such as negative or zero values for radius and height.\n"], "test": ["def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5,12)==204.20352248333654", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10,15)==566.3586699569488", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19,17)==1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 10) == 135.3439535717124", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 11) == 341.84223862609196", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 14) == 540.5000372546194", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 17) == 619.6189241803191", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(2, 17) == 107.55080826324239", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 11) == 34.700025027842585", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 17) == 619.6189241803191", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(3, 12) == 116.5780650907367", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 15) == 47.22849346153437", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 14) == 470.5787011194216", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 8) == 233.76911594312833", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 12) == 252.89333031746617", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 13) == 515.25950586991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 7) == 322.3770065365564", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 14) == 470.5787011194216", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 15) == 494.59884217959996", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 9) == 422.6580647044575", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 17) == 278.3458182702795", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 15) == 304.52389553635294", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 12) == 158.95341225273762", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 9) == 203.88912118450162", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 16) == 449.5881427866065", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 11) == 401.85378834922545", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 8) == 284.34450804213543", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 10) == 31.572615420804546", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 17) == 339.8152019741693", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 14) == 44.09435413989645", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 7) == 135.12500931365486", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 13) == 40.9613567668991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 10) == 31.572615420804546", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(1, 13) == 40.9613567668991", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(4, 7) == 101.31331885360844", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 9) == 302.63828052992443", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 10) == 268.43617813616964", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 16) == 935.0764637725133", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 12) == 252.89333031746617", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 17) == 339.8152019741693", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 14) == 287.1078820894653", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 20) == 393.59028275542903", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(6, 18) == 357.6451775686596", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 19) == 758.6929997570384", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 15) == 810.6648374334094", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 11) == 876.5550197362436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 12) == 562.5556551319436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 20) == 788.7900424378303", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 12) == 810.9934878213232", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 18) == 569.0099932142988", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 12) == 810.9934878213232", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 13) == 447.0564719608245", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 18) == 569.0099932142988", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 16) == 753.9822368615503", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(10, 11) == 467.03132364336636", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 18) == 1002.9506870026199", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 10) == 849.5380049354233", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 10) == 756.7000521564672", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 17) == 968.6096191797571", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(11, 12) == 562.5556551319436", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 10) == 756.7000521564672", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 16) == 841.9526923219875", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(5, 13) == 218.78661143973912", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 11) == 613.6970783257566", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(12, 11) == 613.6970783257566", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(8, 20) == 541.3758142868496", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(9, 16) == 519.0477736553122", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(7, 20) == 465.98408387880266", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(13, 19) == 940.2236256367811", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 22) == 1735.1292385670592", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 16) == 1880.1323124435057", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 19) == 2009.0970130776475", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 13) == 2057.9710009121764", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(14, 16) == 935.0764637725133", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 18) == 1964.6185208184352", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 15) == 1444.9482110556244", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(21, 19) == 1868.3418915675168", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 12) == 905.2203628953802", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 19) == 1140.748587675493", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(21, 16) == 1741.7489463162146", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 15) == 1210.8221402684294", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 12) == 1732.0178974017306", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(22, 22) == 2150.355342068649", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 16) == 1246.8007223263787", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 16) == 2174.8172926346833", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 20) == 1287.4245161178742", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 12) == 1111.3292428165107", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(23, 12) == 1874.4991197817697", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 17) == 1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(20, 19) == 1733.2938526665353", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 15) == 1102.4080948235726", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 22) == 2454.7883133030264", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 22) == 1254.7703543213713", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 20) == 1401.8721403713373", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(16, 14) == 1068.6588157400154", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 19) == 1140.748587675493", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(19, 17) == 1521.8090132193388", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(20, 15) == 1570.7963267948965", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 17) == 1283.9931691277677", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(17, 21) == 1442.9797089695412", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(24, 13) == 2057.9710009121764", "def check(lateralsurface_cone):\n\tassert lateralsurface_cone(15, 16) == 1033.5075888970994"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative or zero.\n    \"\"\"\n    # Validate inputs\n    if r <= 0:\n        raise ValueError(\"The radius must be a positive number.\")\n    if h <= 0:\n        raise ValueError(\"The height must be a positive number.\")\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    \n    return lateral_surface_area\n", "passed": true, "pass": true, "pass_num": 10, "round": 221, "mutate_method": "rephrase_one", "parent_index": 221}
