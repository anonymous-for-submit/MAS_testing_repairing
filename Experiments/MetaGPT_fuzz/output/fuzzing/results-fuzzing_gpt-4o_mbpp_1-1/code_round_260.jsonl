{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 796, "prompt": "Write a function to find the sum of all items in the given dictionary.", "code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "assert return_sum({'k': 101, 'f': 199, 'n': 302}) == 602", "assert return_sum({'x': 97, 'i': 295}) == 392", "assert return_sum({'q': 95, 'u': 198, 'k': 298}) == 591", "assert return_sum({'d': 100, 'c': 200, 'y': 305}) == 605", "assert return_sum({'c': 105, 'z': 301}) == 406", "assert return_sum({'w': 99, 'm': 196, 'j': 295}) == 590", "assert return_sum({'t': 104, 'k': 198, 'q': 303}) == 605", "assert return_sum({'n': 98, 's': 203, 'r': 300}) == 601", "assert return_sum({'u': 96, 'i': 201, 'h': 303}) == 600", "assert return_sum({'d': 101, 'f': 197, 'q': 304}) == 602", "assert return_sum({'u': 99, 'g': 200, 'j': 299}) == 598", "assert return_sum({'j': 97, 'x': 197, 'd': 305}) == 599", "assert return_sum({'b': 99, 'h': 204, 'z': 303}) == 606", "assert return_sum({'p': 104, 'u': 198, 'k': 295}) == 597", "assert return_sum({'p': 102, 'l': 201, 'h': 300}) == 603", "assert return_sum({'r': 95, 'l': 204, 'j': 304}) == 603", "assert return_sum({'o': 101, 's': 198, 'h': 297}) == 596", "assert return_sum({'l': 96, 'b': 195, 'g': 303}) == 594", "assert return_sum({'p': 97, 'r': 205, 'j': 303}) == 605", "assert return_sum({'v': 104, 'd': 204, 'm': 295}) == 603", "assert return_sum({'a': 105, 'm': 200, 'n': 297}) == 602", "assert return_sum({'v': 103, 'q': 198, 'r': 298}) == 599", "assert return_sum({'y': 99, 'w': 203, 'v': 295}) == 597", "assert return_sum({'l': 102, 's': 205, 'r': 299}) == 606", "assert return_sum({'d': 196, 'c': 296}) == 492", "assert return_sum({'u': 97, 'g': 197, 'a': 298}) == 592", "assert return_sum({'m': 96, 'u': 196, 'g': 300}) == 592", "assert return_sum({'a': 105, 'n': 200, 's': 296}) == 601", "assert return_sum({'w': 100, 'k': 296}) == 396", "assert return_sum({'v': 97, 'x': 200, 's': 297}) == 594", "assert return_sum({'u': 102, 't': 202, 'l': 296}) == 600", "assert return_sum({'x': 103, 'f': 203, 'd': 299}) == 605", "assert return_sum({'h': 98, 'x': 202, 't': 299}) == 599", "assert return_sum({'j': 22, 'e': 17, 'b': 48}) == 87", "assert return_sum({'x': 22, 'j': 19, 'u': 46}) == 87", "assert return_sum({'k': 29, 'n': 14, 'y': 42}) == 85", "assert return_sum({'y': 30, 'h': 17, 'k': 46}) == 93", "assert return_sum({'t': 29, 'r': 15, 'e': 43}) == 87", "assert return_sum({'l': 21, 'o': 20, 'p': 42}) == 83", "assert return_sum({'j': 21, 'u': 16, 'd': 42}) == 79", "assert return_sum({'g': 29, 'd': 15, 'c': 48}) == 92", "assert return_sum({'n': 16, 's': 47}) == 63", "assert return_sum({'p': 21, 'n': 16, 'd': 42}) == 79", "assert return_sum({'u': 27, 'x': 15, 'z': 44}) == 86", "assert return_sum({'x': 23, 'j': 18, 'm': 40}) == 81", "assert return_sum({'y': 26, 'v': 14, 'a': 42}) == 82", "assert return_sum({'u': 21, 'w': 23, 'k': 50}) == 94", "assert return_sum({'b': 28, 'h': 23, 'e': 45}) == 96", "assert return_sum({'i': 29, 'w': 49}) == 78", "assert return_sum({'a': 27, 'y': 17, 'f': 50}) == 94", "assert return_sum({'j': 29, 'u': 22, 'h': 50}) == 101", "assert return_sum({'u': 21, 'r': 17, 'p': 40}) == 78", "assert return_sum({'o': 25, 'q': 45}) == 70", "assert return_sum({'j': 21, 'g': 15, 'b': 47}) == 83", "assert return_sum({'j': 18, 'o': 46}) == 64", "assert return_sum({'g': 25, 'p': 14, 'b': 47}) == 86", "assert return_sum({'r': 28, 's': 14, 'l': 41}) == 83", "assert return_sum({'u': 28, 'w': 21, 'z': 49}) == 98", "assert return_sum({'a': 25, 'h': 21, 'v': 50}) == 96", "assert return_sum({'o': 25, 'b': 18, 'h': 50}) == 93", "assert return_sum({'u': 30, 'g': 21, 'm': 50}) == 101", "assert return_sum({'g': 25, 'v': 14, 'n': 47}) == 86", "assert return_sum({'n': 25, 'z': 18, 'e': 43}) == 86", "assert return_sum({'g': 23, 'l': 22, 'y': 40}) == 85", "assert return_sum({'i': 21, 'e': 19, 'c': 45}) == 85", "assert return_sum({'o': 28, 'j': 22, 'y': 43}) == 93", "assert return_sum({'g': 32, 'm': 34, 'b': 53}) == 119", "assert return_sum({'q': 38, 's': 40, 'v': 45}) == 123", "assert return_sum({'n': 35, 'e': 43, 'p': 51}) == 129", "assert return_sum({'w': 31, 'n': 35, 'h': 44}) == 110", "assert return_sum({'d': 35, 'a': 41, 'k': 54}) == 130", "assert return_sum({'u': 38, 'o': 42, 'y': 46}) == 126", "assert return_sum({'q': 37, 'a': 39, 'm': 48}) == 124", "assert return_sum({'i': 38, 'g': 36, 'q': 51}) == 125", "assert return_sum({'l': 37, 'g': 38, 'e': 54}) == 129", "assert return_sum({'g': 34, 'b': 39, 'z': 53}) == 126", "assert return_sum({'w': 31, 'z': 35, 'd': 44}) == 110", "assert return_sum({'r': 32, 'o': 38, 'j': 46}) == 116", "assert return_sum({'y': 31, 'v': 34, 'a': 45}) == 110", "assert return_sum({'x': 35, 'd': 37, 's': 50}) == 122", "assert return_sum({'b': 35, 'k': 41, 'f': 51}) == 127", "assert return_sum({'x': 34, 'y': 39, 'z': 44}) == 117", "assert return_sum({'p': 46, 'd': 44}) == 90", "assert return_sum({'s': 34, 'o': 34, 'r': 47}) == 115", "assert return_sum({'b': 37, 'd': 40, 'z': 47}) == 124", "assert return_sum({'v': 34, 'q': 42, 'i': 49}) == 125", "assert return_sum({'y': 35, 'j': 39, 'u': 47}) == 121", "assert return_sum({'v': 41, 'j': 40, 'x': 49}) == 130", "assert return_sum({'u': 35, 'h': 43, 'a': 50}) == 128", "assert return_sum({'e': 39, 'c': 36, 'x': 54}) == 129", "assert return_sum({'v': 31, 'u': 44, 'h': 50}) == 125", "assert return_sum({'t': 39, 'c': 39, 'w': 50}) == 128", "assert return_sum({'h': 43, 'd': 44}) == 87", "assert return_sum({'l': 39, 'e': 39, 'w': 53}) == 131", "assert return_sum({'o': 37, 'q': 35, 'k': 48}) == 120", "assert return_sum({'i': 35, 'f': 37, 'y': 45}) == 117", "assert return_sum({'c': 32, 'h': 38, 'i': 47}) == 117", "assert return_sum({'u': 34, 'l': 44, 'z': 51}) == 129", "assert return_sum({'p': 36, 't': 44, 'q': 52}) == 132"], "entry_point": "return_sum", "repair_prompt": ["Write a function return_sum to find the sum of all items in the given dictionary.\nreturn_sum({'a': 100, 'b':200, 'c':300}) == 600\n"], "completions": ["from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    This function iterates over the dictionary values, checks if they are numeric,\n    and sums them up. Non-numeric values are ignored.\n\n    Parameters:\n    data (dict): A dictionary with values that may be numeric or non-numeric.\n\n    Returns:\n    int: The sum of all numeric values in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in data.values():\n        if isinstance(value, (int, float)):\n            total_sum += value\n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': '300', 'd': 400.5})\n# print(result)  # Output should be 700.5\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    '''\n    Calculate the sum of all numeric values in the dictionary.\n    \n    Parameters:\n    data (dict): A dictionary with values to be summed.\n    \n    Returns:\n    float: The sum of all numeric values in the dictionary.\n    '''\n    # Initialize sum to 0.0\n    total_sum = 0.0\n    \n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add numeric value to total_sum\n            total_sum += value\n    \n    # Return the computed sum\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    example_data = {'a': 100, 'b': 200, 'c': 300, 'd': 'non-numeric', 'e': 50.5}\n    result = return_sum(example_data)\n    print(f\"The sum of numeric values is: {result}\")\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    \"\"\"\n    Computes the sum of all numeric values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to be summed.\n\n    Returns:\n    float: The sum of all numeric values in the dictionary.\n    \"\"\"\n    # Initialize the sum to 0.0\n    total_sum = 0.0\n\n    # Iterate over the dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add the numeric value to the total sum\n            total_sum += value\n\n    # Return the computed sum\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    example_data = {'a': 100, 'b': 200, 'c': 300, 'd': 'non-numeric', 'e': 50.5}\n    result = return_sum(example_data)\n    print(f\"The sum of numeric values is: {result}\")\n", "from typing import List\n## main.py\n\ndef return_sum(input_dict: dict) -> int:\n    \"\"\"\n    Calculate the sum of all values in the input dictionary.\n\n    Parameters:\n    input_dict (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    # Check if the dictionary is empty and return 0 if true\n    if not input_dict:\n        return 0\n    \n    # Use Python's built-in sum function to calculate the sum of the dictionary values\n    return sum(input_dict.values())\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    \"\"\"\n    Calculate the sum of all numeric values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to be summed.\n\n    Returns:\n    float: The sum of all numeric values in the dictionary.\n    \"\"\"\n    if not isinstance(data, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    total_sum = 0.0\n    for value in data.values():\n        if isinstance(value, (int, float)):\n            total_sum += value\n        else:\n            # Ignoring non-numeric values\n            continue\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    '''\n    Calculate the sum of all numeric values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to sum.\n\n    Returns:\n    float: The sum of all numeric values in the dictionary.\n    '''\n    # Initialize sum to 0.0\n    total_sum = 0.0\n    \n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add numeric value to total_sum\n            total_sum += value\n        else:\n            # Ignore non-numeric values\n            pass\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to be summed.\n\n    Returns:\n    float: The sum of all numeric values in the dictionary.\n\n    Raises:\n    ValueError: If any value in the dictionary is non-numeric.\n    \"\"\"\n    total_sum = 0.0\n    for key, value in data.items():\n        if isinstance(value, (int, float)):\n            total_sum += value\n        else:\n            raise ValueError(f\"Non-numeric value found for key '{key}': {value}\")\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        result = return_sum({'a': 100, 'b': 200, 'c': 300})\n        print(f\"The sum of the dictionary values is: {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with numerical values.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n\n    Example:\n    >>> return_sum({'a': 100, 'b': 200, 'c': 300})\n    600\n    >>> return_sum({})\n    0\n    \"\"\"\n    # Use Python's built-in sum function to calculate the sum of dictionary values\n    return sum(data.values())\n", "from typing import List\n## main.py\n\ndef return_sum(input_dict: dict) -> int:\n    \"\"\"\n    Computes the sum of all numeric values in the given dictionary.\n\n    Parameters:\n    input_dict (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all numeric values in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in input_dict.values():\n        if isinstance(value, (int, float)):\n            total_sum += value\n        else:\n            raise ValueError(f\"Non-numeric value encountered: {value}\")\n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': 300})\n# print(result)  # Output: 600\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to be summed.\n\n    Returns:\n    float: The sum of all numeric values in the dictionary.\n\n    Example:\n    >>> return_sum({'a': 100, 'b': 200, 'c': 300})\n    600\n    \"\"\"\n    # Initialize sum to 0.0\n    total_sum = 0.0\n\n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add numeric value to total_sum\n            total_sum += value\n\n    # Return the computed sum\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the sum of values in a dictionary, handle various data types, and be easy to use and integrate.\nrequirement pool:\n- Implement the main function to sum dictionary values\n- Ensure the function handles empty dictionaries\n- Provide documentation and examples\n- Optimize for performance with large datasets\n- Test compatibility with different Python versions\nWe will implement a simple function using Python's built-in sum() function to efficiently compute the sum of dictionary values. This approach is optimal for performance and usability, as it directly leverages Python's capabilities without unnecessary complexity. We will ensure the function handles empty dictionaries and provide documentation for ease of integration.\n", "requirement analysis:\nThe function should iterate over the dictionary values and compute their sum. It should handle edge cases like empty dictionaries and non-numeric values gracefully.\nrequirement pool:\n- Implement the main function to sum dictionary values.\n- Handle edge cases such as empty dictionaries.\n- Ensure compatibility with Python 3.x versions.\n- Provide comprehensive documentation and examples.\n- Optimize for performance with large datasets.\nWe will implement a simple function using Python's built-in sum function to efficiently compute the sum of dictionary values. The function will handle edge cases like empty dictionaries and non-numeric values by filtering out non-numeric values before summing. This approach ensures compatibility with Python 3.x versions and provides a straightforward solution without requiring additional libraries.\n", "requirement analysis:\nThe function should accurately compute the sum of values in a dictionary, handle large datasets efficiently, and be easy to integrate into existing projects.\nrequirement pool:\n- Accurate computation of dictionary values\n- Efficient handling of large dictionaries\n- Clear and concise documentation\n- Easy integration into projects\n- User-friendly interface\nWe will implement a simple function using Python's built-in capabilities to sum the values of a dictionary. The function will handle large dictionaries efficiently by leveraging Python's sum function, which is optimized for performance. We will ensure the function is easy to integrate by providing clear documentation and usage examples. For edge cases, the function will return 0 for empty dictionaries and ignore non-numeric values, summing only numeric ones.\n", "requirement analysis:\nThe function should iterate over the dictionary values and compute their sum. It should handle edge cases such as empty dictionaries and ensure compatibility with various Python versions.\nrequirement pool:\n- Implement the function to sum dictionary values\n- Handle edge cases like empty dictionaries\n- Ensure compatibility with Python 3.x\n- Optimize for performance with large datasets\n- Provide comprehensive documentation\nWe will implement a simple function using Python's built-in sum function to efficiently sum the values of a dictionary. This approach is straightforward and ensures compatibility with different Python versions. We will handle edge cases like empty dictionaries by returning 0 in such cases.\n", "requirement analysis:\nThe function should efficiently compute the sum of all values in a dictionary, ensuring it handles both small and large datasets. It should be easy to use and integrate into various projects, with clear documentation and examples.\nrequirement pool:\n- The function must correctly sum all values in a dictionary.\n- The function should handle empty dictionaries without errors.\n- The function should be optimized for performance with large dictionaries.\n- The function should include error handling for non-numeric values.\n- The function should be compatible with Python 3.x versions.\nWe will implement a simple function using Python's built-in sum() function to efficiently compute the sum of all numeric values in a dictionary. The function will handle empty dictionaries gracefully and include error handling for non-numeric values by ignoring them. This approach ensures compatibility with Python 3.x versions and provides clear documentation for easy integration.\n", "requirement analysis:\nThe function should efficiently compute the sum of values in a dictionary, ensuring accuracy and performance. It should be simple to use and integrate into various projects.\nrequirement pool:\n- The function must accurately sum all values in a dictionary.\n- The function should handle large dictionaries efficiently.\n- The function should be easy to integrate into existing codebases.\n- The function should maintain readability and simplicity.\n- The function should be optimized for performance.\nWe will use Python's built-in sum() function to efficiently compute the sum of all values in the dictionary. This approach is simple, readable, and performs well even with large dictionaries. We will ensure that the function handles only numeric values by filtering out non-numeric values before summing.\n", "requirement analysis:\nThe function should efficiently compute the sum of all values in a dictionary. It should be simple to use, with clear documentation and examples. The function should handle various dictionary sizes and be compatible with different Python versions.\nrequirement pool:\n- Implement the return_sum function to calculate the sum of dictionary values.\n- Ensure compatibility with Python 3.x versions.\n- Provide documentation and usage examples.\n- Optimize for performance with large dictionaries.\n- Include error handling for non-numeric values.\nWe will implement a simple function using Python's built-in sum() function to efficiently calculate the sum of dictionary values. This approach ensures compatibility with Python 3.x versions and provides optimal performance for large dictionaries. We will include error handling to manage non-numeric values in the dictionary.\n", "requirement analysis:\nThe function should efficiently compute the sum of all values in a dictionary, handle edge cases like empty dictionaries, and be compatible with various Python versions. It should be easy to integrate and understand.\nrequirement pool:\n- Implement the main function to sum dictionary values\n- Handle edge cases such as empty dictionaries\n- Ensure compatibility with Python 3.x\n- Provide comprehensive documentation\n- Optimize for performance with large dictionaries\nWe will implement a simple function using Python's built-in sum() function to efficiently compute the sum of all values in a dictionary. This approach is straightforward and leverages Python's native capabilities for handling numerical operations. We will ensure the function handles edge cases like empty dictionaries and is compatible with Python 3.x versions. Comprehensive documentation will be provided to facilitate easy integration and understanding.\n", "requirement analysis:\nThe function should accurately compute the sum of all values in a dictionary, handle large datasets efficiently, and be easy to integrate and understand.\nrequirement pool:\n- Accurate computation of dictionary values\n- Performance optimization for large dictionaries\n- Clear and concise documentation\n- Ease of integration into existing projects\n- Support for various data types within dictionary values\nWe will implement a simple function using Python's built-in capabilities to sum the values of a dictionary. The function will iterate over the dictionary values and compute their sum. We will ensure that the function handles large dictionaries efficiently by leveraging Python's optimized sum function. Additionally, we will provide clear documentation to facilitate easy integration and understanding.\n", "requirement analysis:\nThe function should iterate over the dictionary values and compute their sum. It should handle empty dictionaries and non-numeric values gracefully, possibly by ignoring non-numeric values or raising an informative error.\nrequirement pool:\n- Implement the main function to sum dictionary values\n- Handle edge cases such as empty dictionaries\n- Document the function with examples\n- Ensure compatibility with Python 3.x\n- Optimize for performance with large dictionaries\nWe will implement a function that iterates over the dictionary values and computes their sum using the built-in sum() function for simplicity and efficiency. The function will handle edge cases such as empty dictionaries and non-numeric values by ignoring non-numeric values. This approach ensures compatibility with Python 3.x and maintains performance even with large dictionaries.\n"], "test": ["def check(return_sum):\n\tassert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "def check(return_sum):\n\tassert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "def check(return_sum):\n\tassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "def check(return_sum):\n\tassert return_sum({'k': 101, 'f': 199, 'n': 302}) == 602", "def check(return_sum):\n\tassert return_sum({'x': 97, 'i': 295}) == 392", "def check(return_sum):\n\tassert return_sum({'q': 95, 'u': 198, 'k': 298}) == 591", "def check(return_sum):\n\tassert return_sum({'d': 100, 'c': 200, 'y': 305}) == 605", "def check(return_sum):\n\tassert return_sum({'c': 105, 'z': 301}) == 406", "def check(return_sum):\n\tassert return_sum({'w': 99, 'm': 196, 'j': 295}) == 590", "def check(return_sum):\n\tassert return_sum({'t': 104, 'k': 198, 'q': 303}) == 605", "def check(return_sum):\n\tassert return_sum({'n': 98, 's': 203, 'r': 300}) == 601", "def check(return_sum):\n\tassert return_sum({'u': 96, 'i': 201, 'h': 303}) == 600", "def check(return_sum):\n\tassert return_sum({'d': 101, 'f': 197, 'q': 304}) == 602", "def check(return_sum):\n\tassert return_sum({'u': 99, 'g': 200, 'j': 299}) == 598", "def check(return_sum):\n\tassert return_sum({'j': 97, 'x': 197, 'd': 305}) == 599", "def check(return_sum):\n\tassert return_sum({'b': 99, 'h': 204, 'z': 303}) == 606", "def check(return_sum):\n\tassert return_sum({'p': 104, 'u': 198, 'k': 295}) == 597", "def check(return_sum):\n\tassert return_sum({'p': 102, 'l': 201, 'h': 300}) == 603", "def check(return_sum):\n\tassert return_sum({'r': 95, 'l': 204, 'j': 304}) == 603", "def check(return_sum):\n\tassert return_sum({'o': 101, 's': 198, 'h': 297}) == 596", "def check(return_sum):\n\tassert return_sum({'l': 96, 'b': 195, 'g': 303}) == 594", "def check(return_sum):\n\tassert return_sum({'p': 97, 'r': 205, 'j': 303}) == 605", "def check(return_sum):\n\tassert return_sum({'v': 104, 'd': 204, 'm': 295}) == 603", "def check(return_sum):\n\tassert return_sum({'a': 105, 'm': 200, 'n': 297}) == 602", "def check(return_sum):\n\tassert return_sum({'v': 103, 'q': 198, 'r': 298}) == 599", "def check(return_sum):\n\tassert return_sum({'y': 99, 'w': 203, 'v': 295}) == 597", "def check(return_sum):\n\tassert return_sum({'l': 102, 's': 205, 'r': 299}) == 606", "def check(return_sum):\n\tassert return_sum({'d': 196, 'c': 296}) == 492", "def check(return_sum):\n\tassert return_sum({'u': 97, 'g': 197, 'a': 298}) == 592", "def check(return_sum):\n\tassert return_sum({'m': 96, 'u': 196, 'g': 300}) == 592", "def check(return_sum):\n\tassert return_sum({'a': 105, 'n': 200, 's': 296}) == 601", "def check(return_sum):\n\tassert return_sum({'w': 100, 'k': 296}) == 396", "def check(return_sum):\n\tassert return_sum({'v': 97, 'x': 200, 's': 297}) == 594", "def check(return_sum):\n\tassert return_sum({'u': 102, 't': 202, 'l': 296}) == 600", "def check(return_sum):\n\tassert return_sum({'x': 103, 'f': 203, 'd': 299}) == 605", "def check(return_sum):\n\tassert return_sum({'h': 98, 'x': 202, 't': 299}) == 599", "def check(return_sum):\n\tassert return_sum({'j': 22, 'e': 17, 'b': 48}) == 87", "def check(return_sum):\n\tassert return_sum({'x': 22, 'j': 19, 'u': 46}) == 87", "def check(return_sum):\n\tassert return_sum({'k': 29, 'n': 14, 'y': 42}) == 85", "def check(return_sum):\n\tassert return_sum({'y': 30, 'h': 17, 'k': 46}) == 93", "def check(return_sum):\n\tassert return_sum({'t': 29, 'r': 15, 'e': 43}) == 87", "def check(return_sum):\n\tassert return_sum({'l': 21, 'o': 20, 'p': 42}) == 83", "def check(return_sum):\n\tassert return_sum({'j': 21, 'u': 16, 'd': 42}) == 79", "def check(return_sum):\n\tassert return_sum({'g': 29, 'd': 15, 'c': 48}) == 92", "def check(return_sum):\n\tassert return_sum({'n': 16, 's': 47}) == 63", "def check(return_sum):\n\tassert return_sum({'p': 21, 'n': 16, 'd': 42}) == 79", "def check(return_sum):\n\tassert return_sum({'u': 27, 'x': 15, 'z': 44}) == 86", "def check(return_sum):\n\tassert return_sum({'x': 23, 'j': 18, 'm': 40}) == 81", "def check(return_sum):\n\tassert return_sum({'y': 26, 'v': 14, 'a': 42}) == 82", "def check(return_sum):\n\tassert return_sum({'u': 21, 'w': 23, 'k': 50}) == 94", "def check(return_sum):\n\tassert return_sum({'b': 28, 'h': 23, 'e': 45}) == 96", "def check(return_sum):\n\tassert return_sum({'i': 29, 'w': 49}) == 78", "def check(return_sum):\n\tassert return_sum({'a': 27, 'y': 17, 'f': 50}) == 94", "def check(return_sum):\n\tassert return_sum({'j': 29, 'u': 22, 'h': 50}) == 101", "def check(return_sum):\n\tassert return_sum({'u': 21, 'r': 17, 'p': 40}) == 78", "def check(return_sum):\n\tassert return_sum({'o': 25, 'q': 45}) == 70", "def check(return_sum):\n\tassert return_sum({'j': 21, 'g': 15, 'b': 47}) == 83", "def check(return_sum):\n\tassert return_sum({'j': 18, 'o': 46}) == 64", "def check(return_sum):\n\tassert return_sum({'g': 25, 'p': 14, 'b': 47}) == 86", "def check(return_sum):\n\tassert return_sum({'r': 28, 's': 14, 'l': 41}) == 83", "def check(return_sum):\n\tassert return_sum({'u': 28, 'w': 21, 'z': 49}) == 98", "def check(return_sum):\n\tassert return_sum({'a': 25, 'h': 21, 'v': 50}) == 96", "def check(return_sum):\n\tassert return_sum({'o': 25, 'b': 18, 'h': 50}) == 93", "def check(return_sum):\n\tassert return_sum({'u': 30, 'g': 21, 'm': 50}) == 101", "def check(return_sum):\n\tassert return_sum({'g': 25, 'v': 14, 'n': 47}) == 86", "def check(return_sum):\n\tassert return_sum({'n': 25, 'z': 18, 'e': 43}) == 86", "def check(return_sum):\n\tassert return_sum({'g': 23, 'l': 22, 'y': 40}) == 85", "def check(return_sum):\n\tassert return_sum({'i': 21, 'e': 19, 'c': 45}) == 85", "def check(return_sum):\n\tassert return_sum({'o': 28, 'j': 22, 'y': 43}) == 93", "def check(return_sum):\n\tassert return_sum({'g': 32, 'm': 34, 'b': 53}) == 119", "def check(return_sum):\n\tassert return_sum({'q': 38, 's': 40, 'v': 45}) == 123", "def check(return_sum):\n\tassert return_sum({'n': 35, 'e': 43, 'p': 51}) == 129", "def check(return_sum):\n\tassert return_sum({'w': 31, 'n': 35, 'h': 44}) == 110", "def check(return_sum):\n\tassert return_sum({'d': 35, 'a': 41, 'k': 54}) == 130", "def check(return_sum):\n\tassert return_sum({'u': 38, 'o': 42, 'y': 46}) == 126", "def check(return_sum):\n\tassert return_sum({'q': 37, 'a': 39, 'm': 48}) == 124", "def check(return_sum):\n\tassert return_sum({'i': 38, 'g': 36, 'q': 51}) == 125", "def check(return_sum):\n\tassert return_sum({'l': 37, 'g': 38, 'e': 54}) == 129", "def check(return_sum):\n\tassert return_sum({'g': 34, 'b': 39, 'z': 53}) == 126", "def check(return_sum):\n\tassert return_sum({'w': 31, 'z': 35, 'd': 44}) == 110", "def check(return_sum):\n\tassert return_sum({'r': 32, 'o': 38, 'j': 46}) == 116", "def check(return_sum):\n\tassert return_sum({'y': 31, 'v': 34, 'a': 45}) == 110", "def check(return_sum):\n\tassert return_sum({'x': 35, 'd': 37, 's': 50}) == 122", "def check(return_sum):\n\tassert return_sum({'b': 35, 'k': 41, 'f': 51}) == 127", "def check(return_sum):\n\tassert return_sum({'x': 34, 'y': 39, 'z': 44}) == 117", "def check(return_sum):\n\tassert return_sum({'p': 46, 'd': 44}) == 90", "def check(return_sum):\n\tassert return_sum({'s': 34, 'o': 34, 'r': 47}) == 115", "def check(return_sum):\n\tassert return_sum({'b': 37, 'd': 40, 'z': 47}) == 124", "def check(return_sum):\n\tassert return_sum({'v': 34, 'q': 42, 'i': 49}) == 125", "def check(return_sum):\n\tassert return_sum({'y': 35, 'j': 39, 'u': 47}) == 121", "def check(return_sum):\n\tassert return_sum({'v': 41, 'j': 40, 'x': 49}) == 130", "def check(return_sum):\n\tassert return_sum({'u': 35, 'h': 43, 'a': 50}) == 128", "def check(return_sum):\n\tassert return_sum({'e': 39, 'c': 36, 'x': 54}) == 129", "def check(return_sum):\n\tassert return_sum({'v': 31, 'u': 44, 'h': 50}) == 125", "def check(return_sum):\n\tassert return_sum({'t': 39, 'c': 39, 'w': 50}) == 128", "def check(return_sum):\n\tassert return_sum({'h': 43, 'd': 44}) == 87", "def check(return_sum):\n\tassert return_sum({'l': 39, 'e': 39, 'w': 53}) == 131", "def check(return_sum):\n\tassert return_sum({'o': 37, 'q': 35, 'k': 48}) == 120", "def check(return_sum):\n\tassert return_sum({'i': 35, 'f': 37, 'y': 45}) == 117", "def check(return_sum):\n\tassert return_sum({'c': 32, 'h': 38, 'i': 47}) == 117", "def check(return_sum):\n\tassert return_sum({'u': 34, 'l': 44, 'z': 51}) == 129", "def check(return_sum):\n\tassert return_sum({'p': 36, 't': 44, 'q': 52}) == 132"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> float:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to be summed.\n\n    Returns:\n    float: The sum of all numeric values in the dictionary.\n\n    Example:\n    >>> return_sum({'a': 100, 'b': 200, 'c': 300})\n    600\n    \"\"\"\n    # Initialize sum to 0.0\n    total_sum = 0.0\n\n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add numeric value to total_sum\n            total_sum += value\n\n    # Return the computed sum\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 260, "mutate_method": "condense_two2one", "parent_index": 260}
