{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 264, "prompt": "Create a function to determine a dog's age in dog years.", "code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "test_imports": [], "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109", "assert dog_age(17) == 81", "assert dog_age(14) == 69", "assert dog_age(9) == 49", "assert dog_age(8) == 45", "assert dog_age(11) == 57", "assert dog_age(12) == 61", "assert dog_age(10) == 53", "assert dog_age(12) == 61", "assert dog_age(7) == 41", "assert dog_age(14) == 69", "assert dog_age(7) == 41", "assert dog_age(9) == 49", "assert dog_age(17) == 81", "assert dog_age(8) == 45", "assert dog_age(15) == 73", "assert dog_age(12) == 61", "assert dog_age(16) == 77", "assert dog_age(8) == 45", "assert dog_age(11) == 57", "assert dog_age(16) == 77", "assert dog_age(17) == 81", "assert dog_age(12) == 61", "assert dog_age(7) == 41", "assert dog_age(11) == 57", "assert dog_age(14) == 69", "assert dog_age(17) == 81", "assert dog_age(14) == 69", "assert dog_age(16) == 77", "assert dog_age(15) == 73", "assert dog_age(11) == 57", "assert dog_age(12) == 61", "assert dog_age(10) == 53", "assert dog_age(16) == 77", "assert dog_age(13) == 65", "assert dog_age(14) == 69", "assert dog_age(18) == 85", "assert dog_age(20) == 93", "assert dog_age(19) == 89", "assert dog_age(10) == 53", "assert dog_age(16) == 77", "assert dog_age(16) == 77", "assert dog_age(13) == 65", "assert dog_age(11) == 57", "assert dog_age(19) == 89", "assert dog_age(17) == 81", "assert dog_age(19) == 89", "assert dog_age(20) == 93", "assert dog_age(19) == 89", "assert dog_age(15) == 73", "assert dog_age(13) == 65", "assert dog_age(10) == 53", "assert dog_age(18) == 85", "assert dog_age(15) == 73", "assert dog_age(17) == 81", "assert dog_age(18) == 85", "assert dog_age(12) == 61", "assert dog_age(17) == 81", "assert dog_age(17) == 81", "assert dog_age(18) == 85", "assert dog_age(18) == 85", "assert dog_age(16) == 77", "assert dog_age(11) == 57", "assert dog_age(14) == 69", "assert dog_age(11) == 57", "assert dog_age(16) == 77", "assert dog_age(16) == 77", "assert dog_age(22) == 101", "assert dog_age(25) == 113", "assert dog_age(20) == 93", "assert dog_age(24) == 109", "assert dog_age(23) == 105", "assert dog_age(24) == 109", "assert dog_age(19) == 89", "assert dog_age(28) == 125", "assert dog_age(26) == 117", "assert dog_age(26) == 117", "assert dog_age(20) == 93", "assert dog_age(20) == 93", "assert dog_age(23) == 105", "assert dog_age(25) == 113", "assert dog_age(28) == 125", "assert dog_age(26) == 117", "assert dog_age(20) == 93", "assert dog_age(28) == 125", "assert dog_age(26) == 117", "assert dog_age(23) == 105", "assert dog_age(20) == 93", "assert dog_age(25) == 113", "assert dog_age(29) == 129", "assert dog_age(27) == 121", "assert dog_age(29) == 129", "assert dog_age(22) == 101", "assert dog_age(25) == 113", "assert dog_age(23) == 105", "assert dog_age(29) == 129", "assert dog_age(20) == 93", "assert dog_age(26) == 117", "assert dog_age(29) == 129", "assert dog_age(19) == 89"], "entry_point": "dog_age", "repair_prompt": ["Create a function dog_age to determine a dog's age in dog years.\ndog_age(12)==61\n"], "completions": ["from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n\n    The conversion formula is as follows:\n    - The first two human years are equivalent to 10.5 dog years each.\n    - Each subsequent human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 0:\n        return 0\n    elif human_years == 1:\n        return 10.5\n    elif human_years == 2:\n        return 21\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# dog_years = dog_age(5)\n# print(f\"The dog's age in dog years is: {dog_years}\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"Convert human years to dog years.\n\n    This function uses a widely accepted conversion formula where the first two\n    human years are equivalent to 10.5 dog years each, and each subsequent human\n    year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 0:\n        return 0\n    elif human_years == 1:\n        return 10\n    elif human_years == 2:\n        return 21\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# print(dog_age(12))  # Output should be 61\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years using the formula: dog_years = human_years * 5.083\n    \n    Parameters:\n    human_years (int): The age of the dog in human years.\n    \n    Returns:\n    int: The age of the dog in dog years, or a message indicating invalid input.\n    \"\"\"\n    # Validate input\n    if human_years < 0:\n        return \"Invalid input: Age cannot be negative.\"\n    elif human_years == 0:\n        return \"Invalid input: Age cannot be zero.\"\n    \n    # Calculate dog years\n    dog_years = int(human_years * 5.083)\n    \n    return dog_years\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(dog_age(12))  # Expected output: 61\n    print(dog_age(-1))  # Expected output: \"Invalid input: Age cannot be negative.\"\n    print(dog_age(0))   # Expected output: \"Invalid input: Age cannot be zero.\"\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years using a linear conversion factor.\n    \n    The conversion is based on the example where 12 human years equate to 61 dog years.\n    This implies a conversion factor that can be calculated and applied to any input.\n    \n    Args:\n        human_years (int): Age of the dog in human years.\n        \n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Conversion factor derived from the example: 12 human years = 61 dog years\n    conversion_factor = 61 / 12\n    \n    # Calculate dog years using the conversion factor\n    dog_years = int(human_years * conversion_factor)\n    \n    return dog_years\n\n# Example usage\nif __name__ == \"__main__\":\n    # Example: Convert 12 human years to dog years\n    example_human_years = 12\n    example_dog_years = dog_age(example_human_years)\n    print(f\"{example_human_years} human years is approximately {example_dog_years} dog years.\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n    \n    This function uses a simple linear formula to convert the age of a dog in human years\n    to dog years. The formula is based on a general conversion and does not account for\n    breed-specific differences.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Conversion formula: 1 human year is approximately 5.083 dog years\n    conversion_factor = 5.083\n    \n    # Calculate dog years\n    dog_years = int(human_years * conversion_factor)\n    \n    return dog_years\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example input\n    example_human_years = 12\n    print(f\"Dog age for {example_human_years} human years is {dog_age(example_human_years)} dog years.\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years using a linear conversion factor.\n    \n    The conversion is based on the example where 12 human years equate to 61 dog years.\n    This implies a conversion factor of approximately 5.08 dog years per human year.\n    \n    Args:\n        human_years: Age of the dog in human years.\n        \n    Returns:\n        Age of the dog in dog years.\n        \n    Raises:\n        ValueError: If the input human_years is negative.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n    \n    # Conversion factor derived from the example: 61 dog years / 12 human years\n    conversion_factor = 61 / 12\n    \n    # Calculate dog years\n    dog_years = int(human_years * conversion_factor)\n    \n    return dog_years\n\n# Example usage:\n# dog_age(12) should return 61\n# dog_age(0) should return 0\n# dog_age(-1) should raise ValueError\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n\n    This function uses a linear conversion formula to calculate the age of a dog in dog years\n    based on its age in human years. The formula accounts for the accelerated aging in the first\n    two years of a dog's life.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Validate input\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    # Conversion formula\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = (human_years - 2) * 4 + 21\n\n    return int(dog_years)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        human_years = 5\n        print(f\"The dog's age in dog years is: {dog_age(human_years)}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"Convert human years to dog years.\n\n    This function uses a standard conversion formula:\n    - For the first two years, each human year is equivalent to 10.5 dog years.\n    - For each year after that, each human year is equivalent to 4 dog years.\n\n    Args:\n        human_years: Age of the dog in human years.\n\n    Returns:\n        Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 0:\n        return 0\n\n    if human_years == 1:\n        return 10\n\n    if human_years == 2:\n        return 21\n\n    # For human years greater than 2\n    dog_years = 21 + (human_years - 2) * 4\n    return dog_years\n\n# Example usage:\n# print(dog_age(5))  # Output should be 33\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n    \n    This function uses a derived formula based on the example provided\n    where 12 human years equate to 61 dog years. The conversion formula\n    is calculated to maintain this ratio.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Derived conversion formula based on the example provided\n    # 12 human years = 61 dog years implies a conversion factor\n    conversion_factor = 61 / 12\n    \n    # Calculate dog years using the conversion factor\n    dog_years = int(human_years * conversion_factor)\n    \n    return dog_years\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example\n    example_human_years = 12\n    print(f\"{example_human_years} human years is approximately {dog_age(example_human_years)} dog years.\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n\n    This function uses a commonly accepted conversion formula:\n    - For the first two human years, each year is equivalent to 10.5 dog years.\n    - For each year after the first two, each human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n\n    return int(dog_years)\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Design a user-friendly interface for input and output.\n- Ensure the function performs efficiently for quick results.\n- Include error handling for invalid inputs.\n- Provide additional information about dog life stages based on age.\nWe will implement a simple function named `dog_age` that converts human years to dog years using a specific conversion formula. Based on the example provided, we will assume a conversion formula where the first two human years are equivalent to 10.5 dog years each, and each subsequent human year is equivalent to 4 dog years. This approach ensures accuracy and simplicity. We will use Python's built-in capabilities to handle the conversion efficiently.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion rate that needs to be determined and implemented.\nrequirement pool:\n- Implement the dog_age function with accurate conversion logic.\n- Ensure the function is optimized for performance.\n- Provide clear documentation and usage examples.\n- Create a simple user interface for non-technical users.\n- Include additional features like age comparison with other pets.\nWe will implement a simple function called dog_age that converts human years to dog years using a specific conversion rate. Based on the example provided (dog_age(12) == 61), we can deduce a conversion formula. We will use a common approach where the first two human years are equivalent to 10.5 dog years each, and each subsequent human year is equivalent to 4 dog years. This approach is widely accepted and provides a balance between accuracy and simplicity.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years.\n- Ensure the function handles edge cases such as zero or negative input.\n- Provide documentation for the conversion formula used.\n- Create a user interface for input and output display.\n- Optimize the function for performance.\nWe will implement a simple function using a straightforward conversion formula to convert human years to dog years. Given the example dog_age(12) == 61, we can deduce a formula where each human year corresponds to approximately 5.083 dog years. We will use this formula for conversion. The function will handle edge cases such as zero or negative input by returning a message indicating invalid input.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Design a user-friendly interface for input and output.\n- Optimize the function for performance.\n- Include a help section explaining the conversion logic.\n- Add support for different dog breeds if needed.\nWe will implement a simple function called dog_age that converts human years to dog years using a specific conversion formula. Based on the example provided, we will assume the conversion formula is linear and follows the pattern where 12 human years equate to 61 dog years. This implies a conversion factor that can be calculated and applied to any input. We will use Python's built-in capabilities to ensure quick calculations without the need for additional libraries.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the conversion formula for dog years accurately.\n- Design a simple user interface for input and output.\n- Optimize the function for performance.\n- Ensure the function handles edge cases gracefully.\n- Consider adding additional features like breed-specific calculations.\nWe will implement a simple function to convert human years to dog years using a linear formula derived from the example provided. The function will be optimized for performance and will handle edge cases gracefully. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex calculations or data handling.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts a dog's age from human years to dog years. The example provided suggests a specific conversion formula or logic that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Design a simple and intuitive user interface for input and output.\n- Ensure the function performs efficiently for quick results.\n- Include error handling for invalid inputs.\n- Provide additional information about the dog's life stage based on age.\nWe will implement a simple function called dog_age that converts human years to dog years using a specific conversion formula. The formula will be based on the example provided, where 12 human years equate to 61 dog years. We will use a linear conversion factor derived from this example. The function will be optimized for performance and will include error handling for invalid inputs.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function with the correct conversion formula.\n- Ensure the function is optimized for performance.\n- Design a simple and intuitive interface for the function.\n- Integrate the function into a larger pet care application.\n- Provide documentation for developers to use the function.\nWe will implement a simple function called dog_age that converts human years to dog years using a linear conversion formula. Based on the example provided, we will use the formula: dog_years = (human_years - 2) * 4 + 21, which accounts for the accelerated aging in the first two years of a dog's life.\n", "requirement analysis:\nThe function should accurately convert human years to dog years using a standard conversion formula. It should be simple to use and integrate into other systems.\nrequirement pool:\n- Implement the dog_age function with accurate conversion.\n- Ensure the function is optimized for performance.\n- Design a simple and intuitive interface for the function.\n- Provide documentation for integration into larger systems.\n- Include error handling for invalid inputs.\nWe will implement a simple function using a standard conversion formula for dog years. The formula often used is: for the first two years, each human year is equivalent to 10.5 dog years, and for each year after that, each human year is equivalent to 4 dog years. This approach ensures accuracy and simplicity. We will use Python's built-in capabilities to optimize performance and ensure the function is easily integrable into larger systems.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years.\n- Ensure the function is optimized for performance.\n- Design a simple and intuitive interface for user interaction.\n- Include additional information about dog life stages.\n- Provide breed-specific age conversion options.\nWe will implement a simple function to convert human years to dog years using a specific conversion formula. The example provided suggests that 12 human years equate to 61 dog years, which implies a specific conversion rate. We will use this information to derive a formula. The function will be optimized for performance and designed to be easily integrable into larger systems.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts a dog's age from human years to dog years. The example provided suggests a specific conversion formula or method that needs to be determined.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Design a user-friendly interface for input and output.\n- Ensure the function performs efficiently for quick results.\n- Include additional information about dog life stages.\n- Provide support for different dog breeds if applicable.\nWe will implement a simple function called dog_age that converts human years to dog years using a commonly accepted conversion formula. The formula typically used is: for the first two years, each human year is equivalent to 10.5 dog years, and for each year after that, each human year is equivalent to 4 dog years. This approach ensures accuracy and simplicity.\n"], "test": ["def check(dog_age):\n\tassert dog_age(12)==61", "def check(dog_age):\n\tassert dog_age(15)==73", "def check(dog_age):\n\tassert dog_age(24)==109", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(9) == 49", "def check(dog_age):\n\tassert dog_age(8) == 45", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(7) == 41", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(7) == 41", "def check(dog_age):\n\tassert dog_age(9) == 49", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(8) == 45", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(8) == 45", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(7) == 41", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(13) == 65", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(13) == 65", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(13) == 65", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(22) == 101", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(24) == 109", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(24) == 109", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(28) == 125", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(28) == 125", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(28) == 125", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(27) == 121", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(22) == 101", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(19) == 89"], "scores": [1.0, 1.0, 0.0, 0.0686, 0.0, 0.0686, 1.0, 1.0, 0.0686, 1.0], "pass_results": [true, true, false, false, false, false, true, true, false, true], "pass_test_cases_num": [102, 102, 0, 7, 0, 7, 102, 102, 7, 102], "completion": "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n\n    This function uses a commonly accepted conversion formula:\n    - For the first two human years, each year is equivalent to 10.5 dog years.\n    - For each year after the first two, each human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years <= 2:\n        dog_years = human_years * 10.5\n    else:\n        dog_years = 21 + (human_years - 2) * 4\n\n    return int(dog_years)\n", "passed": true, "pass": true, "pass_num": 5, "round": 98, "mutate_method": "rephrase_one", "parent_index": 98}
