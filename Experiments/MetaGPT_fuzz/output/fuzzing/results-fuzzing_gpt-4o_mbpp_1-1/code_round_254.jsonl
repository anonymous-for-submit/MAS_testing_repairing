{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 783, "prompt": "Write a function to convert rgb color to hsv color. This conversion can be useful in various applications, such as image processing.", "code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v", "test_imports": [], "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "assert rgb_to_hsv(257, 253, 258) == (288.0, 1.937984496124024, 101.17647058823529)", "assert rgb_to_hsv(250, 257, 250) == (120.0, 2.7237354085603127, 100.7843137254902)", "assert rgb_to_hsv(257, 258, 258) == (180.0, 0.38759689922480484, 101.17647058823529)", "assert rgb_to_hsv(258, 260, 255) == (84.0, 1.9230769230769162, 101.96078431372548)", "assert rgb_to_hsv(250, 252, 258) == (224.99999999999983, 3.10077519379845, 101.17647058823529)", "assert rgb_to_hsv(253, 260, 252) == (112.5, 3.0769230769230664, 101.96078431372548)", "assert rgb_to_hsv(256, 252, 257) == (288.0, 1.9455252918287869, 100.7843137254902)", "assert rgb_to_hsv(255, 259, 250) == (86.66666666666659, 3.4749034749034733, 101.56862745098039)", "assert rgb_to_hsv(254, 254, 254) == (0, 0.0, 99.6078431372549)", "assert rgb_to_hsv(255, 255, 253) == (60.0, 0.7843137254901933, 100.0)", "assert rgb_to_hsv(255, 252, 260) == (262.5, 3.0769230769230664, 101.96078431372548)", "assert rgb_to_hsv(255, 258, 256) == (140.0, 1.1627906976744147, 101.17647058823529)", "assert rgb_to_hsv(260, 255, 259) == (312.0, 1.9230769230769162, 101.96078431372548)", "assert rgb_to_hsv(260, 255, 251) == (26.666666666666742, 3.4615384615384603, 101.96078431372548)", "assert rgb_to_hsv(250, 256, 256) == (180.0, 2.3437500000000027, 100.3921568627451)", "assert rgb_to_hsv(253, 252, 251) == (30.000000000000455, 0.7905138339921032, 99.2156862745098)", "assert rgb_to_hsv(250, 250, 257) == (240.0, 2.7237354085603127, 100.7843137254902)", "assert rgb_to_hsv(259, 258, 256) == (40.0, 1.1583011583011542, 101.56862745098039)", "assert rgb_to_hsv(254, 254, 252) == (60.0, 0.7874015748031469, 99.6078431372549)", "assert rgb_to_hsv(255, 252, 260) == (262.5, 3.0769230769230664, 101.96078431372548)", "assert rgb_to_hsv(253, 250, 258) == (262.5000000000001, 3.10077519379845, 101.17647058823529)", "assert rgb_to_hsv(256, 253, 251) == (24.000000000000227, 1.9531250000000042, 100.3921568627451)", "assert rgb_to_hsv(253, 256, 257) == (195.0, 1.5564202334630295, 100.7843137254902)", "assert rgb_to_hsv(255, 258, 258) == (180.0, 1.1627906976744147, 101.17647058823529)", "assert rgb_to_hsv(257, 252, 258) == (290.0, 2.3255813953488293, 101.17647058823529)", "assert rgb_to_hsv(252, 256, 251) == (107.99999999999973, 1.9531250000000042, 100.3921568627451)", "assert rgb_to_hsv(256, 260, 251) == (86.66666666666659, 3.4615384615384603, 101.96078431372548)", "assert rgb_to_hsv(251, 254, 252) == (140.00000000000037, 1.1811023622047314, 99.6078431372549)", "assert rgb_to_hsv(257, 256, 260) == (255.0, 1.5384615384615332, 101.96078431372548)", "assert rgb_to_hsv(252, 254, 251) == (99.99999999999962, 1.1811023622047314, 99.6078431372549)", "assert rgb_to_hsv(253, 252, 257) == (252.0, 1.9455252918287869, 100.7843137254902)", "assert rgb_to_hsv(253, 258, 257) == (168.0, 1.937984496124024, 101.17647058823529)", "assert rgb_to_hsv(250, 252, 254) == (209.99999999999977, 1.5748031496063049, 99.6078431372549)", "assert rgb_to_hsv(1, 218, 1) == (120.0, 99.54128440366972, 85.49019607843137)", "assert rgb_to_hsv(2, 216, 4) == (120.5607476635514, 99.07407407407408, 84.70588235294117)", "assert rgb_to_hsv(1, 212, 4) == (120.85308056872037, 99.52830188679246, 83.13725490196079)", "assert rgb_to_hsv(3, 210, 5) == (120.57971014492753, 98.57142857142858, 82.35294117647058)", "assert rgb_to_hsv(5, 217, 5) == (120.0, 97.6958525345622, 85.09803921568627)", "assert rgb_to_hsv(2, 214, 3) == (120.28301886792453, 99.06542056074767, 83.92156862745098)", "assert rgb_to_hsv(5, 219, 4) == (119.72093023255815, 98.17351598173515, 85.88235294117646)", "assert rgb_to_hsv(2, 212, 1) == (119.71563981042654, 99.52830188679246, 83.13725490196079)", "assert rgb_to_hsv(5, 217, 2) == (119.16279069767442, 99.07834101382488, 85.09803921568627)", "assert rgb_to_hsv(1, 215, 1) == (120.0, 99.53488372093024, 84.31372549019608)", "assert rgb_to_hsv(1, 220, 1) == (120.0, 99.54545454545455, 86.27450980392157)", "assert rgb_to_hsv(2, 212, 2) == (120.0, 99.05660377358491, 83.13725490196079)", "assert rgb_to_hsv(3, 210, 2) == (119.71153846153847, 99.04761904761905, 82.35294117647058)", "assert rgb_to_hsv(4, 216, 2) == (119.4392523364486, 99.07407407407408, 84.70588235294117)", "assert rgb_to_hsv(5, 220, 1) == (118.9041095890411, 99.54545454545455, 86.27450980392157)", "assert rgb_to_hsv(2, 212, 2) == (120.0, 99.05660377358491, 83.13725490196079)", "assert rgb_to_hsv(5, 220, 2) == (119.1743119266055, 99.0909090909091, 86.27450980392157)", "assert rgb_to_hsv(5, 214, 4) == (119.71428571428571, 98.13084112149532, 83.92156862745098)", "assert rgb_to_hsv(1, 217, 1) == (120.0, 99.53917050691244, 85.09803921568627)", "assert rgb_to_hsv(4, 217, 3) == (119.7196261682243, 98.61751152073734, 85.09803921568627)", "assert rgb_to_hsv(1, 220, 4) == (120.82191780821918, 99.54545454545455, 86.27450980392157)", "assert rgb_to_hsv(1, 218, 5) == (121.10599078341014, 99.54128440366972, 85.49019607843137)", "assert rgb_to_hsv(1, 216, 1) == (120.0, 99.53703703703704, 84.70588235294117)", "assert rgb_to_hsv(4, 210, 5) == (120.29126213592232, 98.0952380952381, 82.35294117647058)", "assert rgb_to_hsv(1, 218, 2) == (120.27649769585254, 99.54128440366972, 85.49019607843137)", "assert rgb_to_hsv(4, 214, 3) == (119.71563981042654, 98.5981308411215, 83.92156862745098)", "assert rgb_to_hsv(1, 215, 3) == (120.5607476635514, 99.53488372093024, 84.31372549019608)", "assert rgb_to_hsv(3, 215, 2) == (119.71830985915493, 99.06976744186046, 84.31372549019608)", "assert rgb_to_hsv(5, 210, 4) == (119.70873786407768, 98.0952380952381, 82.35294117647058)", "assert rgb_to_hsv(3, 219, 3) == (120.0, 98.63013698630138, 85.88235294117646)", "assert rgb_to_hsv(4, 213, 2) == (119.43127962085308, 99.06103286384977, 83.52941176470588)", "assert rgb_to_hsv(3, 220, 1) == (119.45205479452055, 99.54545454545455, 86.27450980392157)", "assert rgb_to_hsv(4, 215, 1) == (119.1588785046729, 99.53488372093024, 84.31372549019608)", "assert rgb_to_hsv(9, 210, 106) == (148.95522388059703, 95.71428571428572, 82.35294117647058)", "assert rgb_to_hsv(10, 212, 110) == (149.7029702970297, 95.28301886792453, 83.13725490196079)", "assert rgb_to_hsv(13, 215, 108) == (148.21782178217822, 93.95348837209302, 84.31372549019608)", "assert rgb_to_hsv(8, 214, 111) == (150.0, 96.26168224299066, 83.92156862745098)", "assert rgb_to_hsv(9, 214, 113) == (150.4390243902439, 95.7943925233645, 83.92156862745098)", "assert rgb_to_hsv(5, 214, 115) == (151.57894736842107, 97.66355140186916, 83.92156862745098)", "assert rgb_to_hsv(6, 219, 112) == (149.85915492957747, 97.26027397260275, 85.88235294117646)", "assert rgb_to_hsv(13, 217, 112) == (149.11764705882354, 94.00921658986175, 85.09803921568627)", "assert rgb_to_hsv(5, 217, 114) == (150.8490566037736, 97.6958525345622, 85.09803921568627)", "assert rgb_to_hsv(13, 214, 114) == (150.1492537313433, 93.9252336448598, 83.92156862745098)", "assert rgb_to_hsv(13, 211, 106) == (148.1818181818182, 93.8388625592417, 82.74509803921568)", "assert rgb_to_hsv(13, 216, 108) == (148.07881773399015, 93.98148148148148, 84.70588235294117)", "assert rgb_to_hsv(10, 217, 106) == (147.82608695652175, 95.39170506912443, 85.09803921568627)", "assert rgb_to_hsv(14, 210, 105) == (147.85714285714286, 93.33333333333333, 82.35294117647058)", "assert rgb_to_hsv(5, 218, 113) == (150.42253521126761, 97.70642201834862, 85.49019607843137)", "assert rgb_to_hsv(10, 220, 107) == (147.71428571428572, 95.45454545454545, 86.27450980392157)", "assert rgb_to_hsv(10, 218, 105) == (147.40384615384616, 95.41284403669725, 85.49019607843137)", "assert rgb_to_hsv(6, 213, 113) == (151.0144927536232, 97.18309859154928, 83.52941176470588)", "assert rgb_to_hsv(6, 211, 113) == (151.3170731707317, 97.15639810426539, 82.74509803921568)", "assert rgb_to_hsv(15, 212, 107) == (148.0203045685279, 92.9245283018868, 83.13725490196079)", "assert rgb_to_hsv(8, 214, 110) == (149.70873786407768, 96.26168224299066, 83.92156862745098)", "assert rgb_to_hsv(5, 213, 113) == (151.15384615384616, 97.65258215962442, 83.52941176470588)", "assert rgb_to_hsv(8, 213, 113) == (150.7317073170732, 96.24413145539906, 83.52941176470588)", "assert rgb_to_hsv(12, 217, 113) == (149.5609756097561, 94.47004608294931, 85.09803921568627)", "assert rgb_to_hsv(10, 216, 113) == (150.0, 95.37037037037037, 84.70588235294117)", "assert rgb_to_hsv(12, 216, 115) == (150.2941176470588, 94.44444444444446, 84.70588235294117)", "assert rgb_to_hsv(6, 216, 113) == (150.57142857142856, 97.22222222222221, 84.70588235294117)", "assert rgb_to_hsv(7, 220, 115) == (150.42253521126761, 96.81818181818181, 86.27450980392157)", "assert rgb_to_hsv(10, 213, 106) == (148.3743842364532, 95.30516431924883, 83.52941176470588)", "assert rgb_to_hsv(9, 218, 115) == (150.4306220095694, 95.87155963302753, 85.49019607843137)", "assert rgb_to_hsv(6, 214, 105) == (148.55769230769232, 97.19626168224299, 83.92156862745098)", "assert rgb_to_hsv(8, 214, 107) == (148.83495145631068, 96.26168224299066, 83.92156862745098)", "assert rgb_to_hsv(11, 220, 111) == (148.70813397129186, 95.0, 86.27450980392157)"], "entry_point": "rgb_to_hsv", "repair_prompt": ["Write a function rgb_to_hsv to convert rgb color to hsv color. This conversion can be useful in various applications, such as image processing.\nrgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n"], "completions": ["from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"Convert RGB color to HSV color.\n\n    This function uses the colorsys library to convert RGB values to HSV format.\n    The RGB values should be in the range of 0 to 255. The returned HSV values\n    will have the hue in degrees (0-360), and saturation and value as percentages (0-100).\n\n    Args:\n        r (int): Red component (0-255)\n        g (int): Green component (0-255)\n        b (int): Blue component (0-255)\n\n    Returns:\n        tuple: A tuple containing HSV values (hue in degrees, saturation as a percentage, value as a percentage)\n    \"\"\"\n    # Normalize the RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert the normalized RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert the hue to degrees and saturation/value to percentages\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample RGB value\n    rgb_sample = (255, 0, 0)  # Red color\n    hsv_result = rgb_to_hsv(*rgb_sample)\n    print(f\"RGB {rgb_sample} converts to HSV {hsv_result}\")\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color values to HSV.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue, saturation, value) where\n           hue is in degrees (0-360), saturation and value are percentages (0-100).\n    \"\"\"\n    # Normalize the RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert the normalized RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert the HSV values to the desired range\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"Convert RGB color to HSV color.\n\n    This function uses the colorsys library to convert RGB values to HSV values.\n    The RGB values should be in the range of 0 to 255. The function returns a\n    tuple containing the HSV values where hue is in degrees, and saturation and\n    value are percentages.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue in degrees, saturation as a percentage, value as a percentage)\n    \"\"\"\n    # Normalize the RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert the normalized RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert the hue to degrees and saturation and value to percentages\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample RGB value\n    rgb_sample = (255, 0, 0)  # Pure red\n    hsv_result = rgb_to_hsv(*rgb_sample)\n    print(f\"RGB {rgb_sample} converts to HSV {hsv_result}\")\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color values to HSV.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: (h, s, v) where h is hue (0-360), s is saturation (0-100), and v is value (0-100)\n    \"\"\"\n    # Normalize RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue from normalized value (0-1) to degrees (0-360)\n    h_degrees = h * 360\n\n    # Convert saturation and value from normalized value (0-1) to percentage (0-100)\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with white color\n    result = rgb_to_hsv(255, 255, 255)\n    print(f\"HSV: {result}\")  # Expected output: HSV: (0, 0.0, 100.0)\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color values to HSV.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue in degrees, saturation as a percentage, value as a percentage)\n    \"\"\"\n    # Normalize RGB values to the range [0, 1]\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Convert normalized RGB to HSV using colorsys\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue to degrees, saturation and value to percentage\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example RGB value\n    rgb_example = (255, 0, 0)  # Red color\n    hsv_result = rgb_to_hsv(*rgb_example)\n    print(f\"RGB: {rgb_example} -> HSV: {hsv_result}\")\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color values to HSV.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue, saturation, value) where\n           hue is in degrees (0-360), saturation and value are percentages (0-100).\n    \"\"\"\n    # Normalize RGB values to the range [0, 1] for colorsys compatibility\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Convert normalized RGB to HSV using colorsys\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue to degrees (0-360) and saturation/value to percentages (0-100)\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example RGB value\n    rgb_example = (255, 0, 0)  # Red color\n    hsv_result = rgb_to_hsv(*rgb_example)\n    print(f\"RGB: {rgb_example} -> HSV: {hsv_result}\")\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color values to HSV.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: HSV representation (hue, saturation, value) where\n           hue is in degrees (0-360),\n           saturation is a percentage (0-100),\n           value is a percentage (0-100).\n    \"\"\"\n    # Normalize RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Convert normalized RGB to HSV using colorsys\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue to degrees (0-360)\n    h_degrees = h * 360\n\n    # Convert saturation and value to percentage (0-100)\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue in degrees, saturation in percentage, value in percentage)\n    \"\"\"\n    # Normalize RGB values to the range [0, 1]\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue to degrees (0-360), saturation and value to percentage (0-100)\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample RGB value\n    rgb_value = (255, 0, 0)  # Pure red\n    hsv_value = rgb_to_hsv(*rgb_value)\n    print(f\"RGB: {rgb_value} -> HSV: {hsv_value}\")\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color values to HSV.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: (h, s, v) where h is hue (0-360), s is saturation (0-100), v is value (0-100)\n    \"\"\"\n    # Normalize the RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert the normalized RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert the HSV values to the desired range\n    h_degrees = h * 360\n    s_percent = s * 100\n    v_percent = v * 100\n\n    return (h_degrees, s_percent, v_percent)\n", "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue in degrees, saturation as a percentage, value as a percentage)\n    \"\"\"\n    # Normalize the RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue to degrees, saturation and value to percentage\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample RGB value\n    rgb_color = (255, 0, 0)  # Red color\n    hsv_color = rgb_to_hsv(*rgb_color)\n    print(f\"RGB: {rgb_color} -> HSV: {hsv_color}\")\n"], "plans": ["requirement analysis:\nThe function should accurately convert RGB values to HSV, ensuring the output is suitable for image processing applications. It should handle edge cases like maximum and minimum RGB values and be optimized for performance.\nrequirement pool:\n- Implement RGB to HSV conversion algorithm\n- Optimize for real-time performance\n- Ensure compatibility with popular image processing libraries\n- Handle edge cases in color conversion\n- Provide comprehensive documentation\nWe will implement the RGB to HSV conversion using the colorsys library, which is part of Python's standard library. This library provides a straightforward and efficient way to perform color space conversions, ensuring compatibility with various image processing libraries. The function will handle edge cases such as maximum and minimum RGB values and will be optimized for performance to support real-time applications.\n", "requirement analysis:\nThe requirement is to develop a function that accurately converts RGB color values to HSV format, which is essential for applications in image processing and design. The function should handle edge cases, such as maximum and minimum RGB values, and ensure compatibility with various image formats.\nrequirement pool:\n- Implement the RGB to HSV conversion algorithm\n- Optimize the function for real-time performance\n- Ensure compatibility with different image formats\n- Provide detailed documentation for developers\n- Include unit tests for accuracy verification\nWe will use the colorsys library, which is a part of Python's standard library, to perform the RGB to HSV conversion. This library provides a reliable and efficient way to handle color conversions, ensuring accuracy and performance. The function will be optimized for real-time applications by minimizing computational overhead and will be compatible with various image formats by adhering to standard RGB input ranges.\n", "requirement analysis:\nThe function should accurately convert RGB values to HSV, ensuring precision in hue, saturation, and value calculations. It should handle edge cases like pure white, black, and primary colors efficiently.\nrequirement pool:\n- Implement RGB to HSV conversion algorithm\n- Optimize for real-time processing\n- Ensure compatibility with various image formats\n- Provide detailed documentation for developers\n- Include unit tests for edge cases\nWe will implement the RGB to HSV conversion using the colorsys library, which is part of Python's standard library. This library provides a reliable and efficient way to perform color space conversions, ensuring accuracy and performance. The function will take RGB values as input and return the corresponding HSV values, handling edge cases like pure white, black, and primary colors.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts RGB color values to HSV. This involves understanding the mathematical conversion process and ensuring the function handles edge cases, such as maximum and minimum RGB values, correctly.\nrequirement pool:\n- Implement the RGB to HSV conversion function.\n- Optimize the function for performance.\n- Ensure the function is easy to use and integrate.\n- Document the function with examples and edge cases.\n- Test the function with a variety of RGB inputs.\nWe will use the colorsys module from Python's standard library, which provides a reliable and efficient way to convert RGB values to HSV. This module is well-suited for our needs as it offers accurate color conversion and is optimized for performance, making it ideal for real-time applications.\n", "requirement analysis:\nThe requirement is to develop a function that accurately converts RGB color values to HSV. This involves understanding the mathematical conversion process and ensuring the function handles edge cases, such as maximum and minimum RGB values.\nrequirement pool:\n- Implement the RGB to HSV conversion function.\n- Optimize the function for performance.\n- Ensure the function handles edge cases correctly.\n- Create a user-friendly interface for the function.\n- Document the function with examples and use cases.\nWe will implement the RGB to HSV conversion function using the colorsys module from Python's standard library, which provides a reliable and efficient way to perform this conversion. This approach ensures accuracy and performance, suitable for real-time applications. The function will handle edge cases by normalizing RGB values and converting them to the HSV color space.\n", "requirement analysis:\nThe function should accurately convert RGB values to HSV, considering edge cases like pure black (0,0,0) and pure white (255,255,255). It should be optimized for performance to support real-time applications and include comprehensive documentation for ease of use.\nrequirement pool:\n- Accurate RGB to HSV conversion\n- Handle edge cases like pure black and white\n- Optimize for real-time performance\n- Provide clear documentation\n- Include examples for common use cases\nWe will use the colorsys module from Python's standard library, which provides a straightforward and efficient way to convert RGB values to HSV. This module is well-suited for our needs as it is lightweight and optimized for performance, making it ideal for real-time applications. Additionally, we will ensure comprehensive documentation and examples to facilitate ease of use.\n", "requirement analysis:\nThe function should accurately convert RGB values to HSV, ensuring the output is suitable for image processing tasks. It should handle edge cases like full white (255, 255, 255) and black (0, 0, 0) correctly.\nrequirement pool:\n- Implement the RGB to HSV conversion algorithm.\n- Optimize the function for performance in real-time applications.\n- Ensure compatibility with popular image processing libraries.\n- Include comprehensive documentation for developers.\n- Test the function with various RGB inputs to ensure accuracy.\nWe will implement the RGB to HSV conversion using the colorsys library, which is part of Python's standard library and provides a reliable and efficient way to handle color space conversions. This approach ensures compatibility with popular image processing libraries and optimizes performance for real-time applications.\n", "requirement analysis:\nThe function should accurately convert RGB values to HSV, considering edge cases like pure black and white. It should be optimized for performance to support real-time applications and include clear documentation for ease of use.\nrequirement pool:\n- Accurate RGB to HSV conversion\n- Handle edge cases like pure black and white\n- Optimize for real-time performance\n- Provide clear documentation\n- Include examples for common use cases\nWe will implement the rgb_to_hsv function using the colorsys module from Python's standard library, which provides a reliable and efficient way to perform color space conversions. This approach ensures accuracy and performance suitable for real-time applications. The function will handle edge cases like pure black and white colors by ensuring the output is correctly formatted.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts RGB color values to HSV. This involves understanding the mathematical conversion process and ensuring the function handles edge cases, such as maximum and minimum RGB values, correctly.\nrequirement pool:\n- Implement the RGB to HSV conversion function.\n- Optimize the function for performance.\n- Ensure the function is easy to use and integrate.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify accuracy.\nWe will use the Python standard library module 'colorsys' for the RGB to HSV conversion. This module is well-suited for our needs as it provides a straightforward and efficient way to perform color system conversions, ensuring accuracy and ease of use. The 'colorsys' module handles the conversion process internally, which optimizes performance for real-time applications.\n", "requirement analysis:\nThe function should accurately convert RGB values to HSV format, ensuring precision in hue, saturation, and value calculations. It should be optimized for performance to handle real-time image processing tasks and be compatible with popular image processing libraries.\nrequirement pool:\n- Accurate RGB to HSV conversion\n- Optimized for real-time performance\n- Compatibility with image processing libraries\n- Ease of integration into existing systems\n- User-friendly documentation\nWe will implement the rgb_to_hsv function using the colorsys module from Python's standard library, which provides a reliable and efficient way to perform color space conversions. This approach ensures compatibility with various image processing libraries and optimizes performance for real-time applications.\n"], "test": ["def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(257, 253, 258) == (288.0, 1.937984496124024, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(250, 257, 250) == (120.0, 2.7237354085603127, 100.7843137254902)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(257, 258, 258) == (180.0, 0.38759689922480484, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(258, 260, 255) == (84.0, 1.9230769230769162, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(250, 252, 258) == (224.99999999999983, 3.10077519379845, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(253, 260, 252) == (112.5, 3.0769230769230664, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(256, 252, 257) == (288.0, 1.9455252918287869, 100.7843137254902)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 259, 250) == (86.66666666666659, 3.4749034749034733, 101.56862745098039)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(254, 254, 254) == (0, 0.0, 99.6078431372549)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 255, 253) == (60.0, 0.7843137254901933, 100.0)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 252, 260) == (262.5, 3.0769230769230664, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 258, 256) == (140.0, 1.1627906976744147, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(260, 255, 259) == (312.0, 1.9230769230769162, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(260, 255, 251) == (26.666666666666742, 3.4615384615384603, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(250, 256, 256) == (180.0, 2.3437500000000027, 100.3921568627451)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(253, 252, 251) == (30.000000000000455, 0.7905138339921032, 99.2156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(250, 250, 257) == (240.0, 2.7237354085603127, 100.7843137254902)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(259, 258, 256) == (40.0, 1.1583011583011542, 101.56862745098039)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(254, 254, 252) == (60.0, 0.7874015748031469, 99.6078431372549)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 252, 260) == (262.5, 3.0769230769230664, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(253, 250, 258) == (262.5000000000001, 3.10077519379845, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(256, 253, 251) == (24.000000000000227, 1.9531250000000042, 100.3921568627451)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(253, 256, 257) == (195.0, 1.5564202334630295, 100.7843137254902)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(255, 258, 258) == (180.0, 1.1627906976744147, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(257, 252, 258) == (290.0, 2.3255813953488293, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(252, 256, 251) == (107.99999999999973, 1.9531250000000042, 100.3921568627451)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(256, 260, 251) == (86.66666666666659, 3.4615384615384603, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(251, 254, 252) == (140.00000000000037, 1.1811023622047314, 99.6078431372549)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(257, 256, 260) == (255.0, 1.5384615384615332, 101.96078431372548)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(252, 254, 251) == (99.99999999999962, 1.1811023622047314, 99.6078431372549)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(253, 252, 257) == (252.0, 1.9455252918287869, 100.7843137254902)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(253, 258, 257) == (168.0, 1.937984496124024, 101.17647058823529)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(250, 252, 254) == (209.99999999999977, 1.5748031496063049, 99.6078431372549)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 218, 1) == (120.0, 99.54128440366972, 85.49019607843137)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(2, 216, 4) == (120.5607476635514, 99.07407407407408, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 212, 4) == (120.85308056872037, 99.52830188679246, 83.13725490196079)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(3, 210, 5) == (120.57971014492753, 98.57142857142858, 82.35294117647058)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 217, 5) == (120.0, 97.6958525345622, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(2, 214, 3) == (120.28301886792453, 99.06542056074767, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 219, 4) == (119.72093023255815, 98.17351598173515, 85.88235294117646)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(2, 212, 1) == (119.71563981042654, 99.52830188679246, 83.13725490196079)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 217, 2) == (119.16279069767442, 99.07834101382488, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 215, 1) == (120.0, 99.53488372093024, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 220, 1) == (120.0, 99.54545454545455, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(2, 212, 2) == (120.0, 99.05660377358491, 83.13725490196079)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(3, 210, 2) == (119.71153846153847, 99.04761904761905, 82.35294117647058)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(4, 216, 2) == (119.4392523364486, 99.07407407407408, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 220, 1) == (118.9041095890411, 99.54545454545455, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(2, 212, 2) == (120.0, 99.05660377358491, 83.13725490196079)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 220, 2) == (119.1743119266055, 99.0909090909091, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 214, 4) == (119.71428571428571, 98.13084112149532, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 217, 1) == (120.0, 99.53917050691244, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(4, 217, 3) == (119.7196261682243, 98.61751152073734, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 220, 4) == (120.82191780821918, 99.54545454545455, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 218, 5) == (121.10599078341014, 99.54128440366972, 85.49019607843137)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 216, 1) == (120.0, 99.53703703703704, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(4, 210, 5) == (120.29126213592232, 98.0952380952381, 82.35294117647058)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 218, 2) == (120.27649769585254, 99.54128440366972, 85.49019607843137)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(4, 214, 3) == (119.71563981042654, 98.5981308411215, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(1, 215, 3) == (120.5607476635514, 99.53488372093024, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(3, 215, 2) == (119.71830985915493, 99.06976744186046, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 210, 4) == (119.70873786407768, 98.0952380952381, 82.35294117647058)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(3, 219, 3) == (120.0, 98.63013698630138, 85.88235294117646)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(4, 213, 2) == (119.43127962085308, 99.06103286384977, 83.52941176470588)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(3, 220, 1) == (119.45205479452055, 99.54545454545455, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(4, 215, 1) == (119.1588785046729, 99.53488372093024, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(9, 210, 106) == (148.95522388059703, 95.71428571428572, 82.35294117647058)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 212, 110) == (149.7029702970297, 95.28301886792453, 83.13725490196079)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(13, 215, 108) == (148.21782178217822, 93.95348837209302, 84.31372549019608)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(8, 214, 111) == (150.0, 96.26168224299066, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(9, 214, 113) == (150.4390243902439, 95.7943925233645, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 214, 115) == (151.57894736842107, 97.66355140186916, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(6, 219, 112) == (149.85915492957747, 97.26027397260275, 85.88235294117646)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(13, 217, 112) == (149.11764705882354, 94.00921658986175, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 217, 114) == (150.8490566037736, 97.6958525345622, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(13, 214, 114) == (150.1492537313433, 93.9252336448598, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(13, 211, 106) == (148.1818181818182, 93.8388625592417, 82.74509803921568)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(13, 216, 108) == (148.07881773399015, 93.98148148148148, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 217, 106) == (147.82608695652175, 95.39170506912443, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(14, 210, 105) == (147.85714285714286, 93.33333333333333, 82.35294117647058)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 218, 113) == (150.42253521126761, 97.70642201834862, 85.49019607843137)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 220, 107) == (147.71428571428572, 95.45454545454545, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 218, 105) == (147.40384615384616, 95.41284403669725, 85.49019607843137)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(6, 213, 113) == (151.0144927536232, 97.18309859154928, 83.52941176470588)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(6, 211, 113) == (151.3170731707317, 97.15639810426539, 82.74509803921568)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(15, 212, 107) == (148.0203045685279, 92.9245283018868, 83.13725490196079)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(8, 214, 110) == (149.70873786407768, 96.26168224299066, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(5, 213, 113) == (151.15384615384616, 97.65258215962442, 83.52941176470588)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(8, 213, 113) == (150.7317073170732, 96.24413145539906, 83.52941176470588)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(12, 217, 113) == (149.5609756097561, 94.47004608294931, 85.09803921568627)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 216, 113) == (150.0, 95.37037037037037, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(12, 216, 115) == (150.2941176470588, 94.44444444444446, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(6, 216, 113) == (150.57142857142856, 97.22222222222221, 84.70588235294117)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(7, 220, 115) == (150.42253521126761, 96.81818181818181, 86.27450980392157)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(10, 213, 106) == (148.3743842364532, 95.30516431924883, 83.52941176470588)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(9, 218, 115) == (150.4306220095694, 95.87155963302753, 85.49019607843137)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(6, 214, 105) == (148.55769230769232, 97.19626168224299, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(8, 214, 107) == (148.83495145631068, 96.26168224299066, 83.92156862745098)", "def check(rgb_to_hsv):\n\tassert rgb_to_hsv(11, 220, 111) == (148.70813397129186, 95.0, 86.27450980392157)"], "scores": [0.6275, 0.6275, 0.6275, 0.6275, 0.6275, 0.6275, 0.6275, 0.6275, 0.6275, 0.6275], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [64, 64, 64, 64, 64, 64, 64, 64, 64, 64], "completion": "from typing import List\n## main.py\n\nimport colorsys\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> tuple:\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Parameters:\n    r (int): Red component (0-255)\n    g (int): Green component (0-255)\n    b (int): Blue component (0-255)\n\n    Returns:\n    tuple: A tuple containing HSV values (hue in degrees, saturation as a percentage, value as a percentage)\n    \"\"\"\n    # Normalize the RGB values to the range 0-1\n    r_normalized = r / 255.0\n    g_normalized = g / 255.0\n    b_normalized = b / 255.0\n\n    # Use colorsys to convert RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r_normalized, g_normalized, b_normalized)\n\n    # Convert hue to degrees, saturation and value to percentage\n    h_degrees = h * 360\n    s_percentage = s * 100\n    v_percentage = v * 100\n\n    return (h_degrees, s_percentage, v_percentage)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample RGB value\n    rgb_color = (255, 0, 0)  # Red color\n    hsv_color = rgb_to_hsv(*rgb_color)\n    print(f\"RGB: {rgb_color} -> HSV: {hsv_color}\")\n", "passed": false, "pass": false, "pass_num": 0, "round": 254, "mutate_method": "condense_two2one", "parent_index": 254}
