{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 572, "prompt": "Construct a Python function that accepts several lists as input and removes duplicate numbers from them.", "code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]", "test_imports": [], "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "assert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "assert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "assert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "assert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "assert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "assert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "assert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "assert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "assert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "assert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "assert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "assert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "assert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "assert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "assert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "assert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "assert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "assert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "assert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "assert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "assert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "assert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "assert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "assert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "assert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "assert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "assert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "assert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "assert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "assert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "assert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "assert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "assert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "assert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "assert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "assert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "assert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "assert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "assert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "assert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "assert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "assert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "assert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "assert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "assert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "assert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "assert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "assert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "assert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "assert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "assert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "assert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "assert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "assert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "assert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "assert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "assert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "assert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "assert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "assert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "assert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "assert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "assert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "assert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "assert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "assert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "assert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "assert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "assert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "assert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "assert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "assert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "assert two_unique_nums([1, 6, 1, 6, 6]) == []", "assert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "assert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "assert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "assert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "assert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "assert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "assert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "assert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "assert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "assert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "assert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "assert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "assert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "assert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "assert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "assert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "assert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "assert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "assert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "assert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "assert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "assert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "assert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "assert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "assert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "assert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "entry_point": "two_unique_nums", "repair_prompt": ["Construct a Python function two_unique_nums that accepts several lists as input and removes duplicate numbers from them.\ntwo_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"], "completions": ["from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list[int]) -> list[int]:\n    \"\"\"\n    Accepts multiple lists of integers and returns a list of numbers that are unique across all lists.\n    \n    Parameters:\n    lists (list[int]): Variable number of lists containing integers.\n    \n    Returns:\n    list[int]: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Create a dictionary to count occurrences of each number across all lists\n    num_count = {}\n\n    # Iterate through each list\n    for lst in lists:\n        # Convert the list to a set to remove duplicates within the list\n        unique_nums = set(lst)\n        # Count each number in the set\n        for num in unique_nums:\n            if num in num_count:\n                num_count[num] += 1\n            else:\n                num_count[num] = 1\n\n    # Collect numbers that appear only once across all lists\n    unique_across_all = [num for num, count in num_count.items() if count == 1]\n\n    return unique_across_all\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [5, 6, 7, 8])\n# print(result)  # Output: [1, 4, 6, 7, 8]\n", "from typing import List\n## main.py\n\nimport typing\nfrom collections import Counter\n\ndef two_unique_nums(*lists: typing.List[int]) -> typing.List[int]:\n    \"\"\"\n    Accepts several lists as input and returns a list of numbers that appear only once across all lists, preserving their order.\n    \n    Parameters:\n    lists (List[int]): Variable number of lists containing integers.\n    \n    Returns:\n    List[int]: A list of unique integers.\n    \"\"\"\n    # Flatten the input lists into a single list\n    flattened_list = [num for sublist in lists for num in sublist]\n    \n    # Count occurrences of each number using collections.Counter\n    num_counts = Counter(flattened_list)\n    \n    # Filter numbers that appear only once, preserving their order\n    unique_nums = [num for num in flattened_list if num_counts[num] == 1]\n    \n    return unique_nums\n", "from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list[int]) -> list[int]:\n    \"\"\"\n    Accepts multiple lists of integers and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    lists (list[int]): Variable number of lists containing integers.\n\n    Returns:\n    list[int]: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Initialize a dictionary to count occurrences of each number\n    num_count = {}\n\n    # Iterate through each list\n    for lst in lists:\n        # Convert list to a set to remove duplicates within the list\n        unique_nums = set(lst)\n        \n        # Count occurrences of each number across all lists\n        for num in unique_nums:\n            if num in num_count:\n                num_count[num] += 1\n            else:\n                num_count[num] = 1\n\n    # Filter numbers that appear only once across all lists\n    unique_across_lists = [num for num, count in num_count.items() if count == 1]\n\n    return unique_across_lists\n\n# Example usage\nif __name__ == \"__main__\":\n    result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [3, 4, 5, 6])\n    print(result)  # Output: [1, 6]\n", "from typing import List\n## main.py\nimport typing\n\ndef two_unique_nums(*lists: typing.List[int]) -> typing.List[int]:\n    \"\"\"\n    Accepts multiple lists of integers and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    lists (List[int]): Variable number of lists containing integers.\n\n    Returns:\n    List[int]: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Convert each list to a set to remove duplicates within each list\n    sets = [set(lst) for lst in lists]\n    \n    # Initialize a set to store all numbers\n    all_numbers = set()\n    \n    # Initialize a set to store numbers that appear more than once\n    duplicates = set()\n    \n    # Iterate through each set\n    for s in sets:\n        # Update duplicates with numbers that are already in all_numbers\n        duplicates.update(all_numbers.intersection(s))\n        # Update all_numbers with the current set\n        all_numbers.update(s)\n    \n    # Unique numbers are those in all_numbers but not in duplicates\n    unique_numbers = all_numbers - duplicates\n    \n    # Return the unique numbers as a sorted list for consistency\n    return sorted(unique_numbers)\n", "from typing import List\n## main.py\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"\n    Accepts multiple lists of integers and returns a list of numbers that appear only once across all lists.\n\n    Parameters:\n    lists (List[int]): Variable number of lists containing integers.\n\n    Returns:\n    List[int]: A list of integers that appear only once across all input lists, maintaining the order of first occurrence.\n    \"\"\"\n    # Flatten the input lists into a single list\n    flattened_list = [num for sublist in lists for num in sublist]\n    \n    # Count occurrences of each number using collections.Counter\n    num_counts = Counter(flattened_list)\n    \n    # Filter numbers that appear only once and maintain the order of first occurrence\n    unique_nums = [num for num in flattened_list if num_counts[num] == 1]\n    \n    return unique_nums\n", "from typing import List\n## main.py\n\nfrom collections import OrderedDict\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"Accepts multiple lists as input and returns a list of unique numbers,\n    maintaining the order of first occurrence.\n\n    Args:\n        *lists (List[int]): Variable number of lists containing integers.\n\n    Returns:\n        List[int]: A list of unique integers.\n    \"\"\"\n    # Concatenate all input lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n    \n    # Use OrderedDict to remove duplicates while maintaining order\n    unique_nums = list(OrderedDict.fromkeys(combined_list))\n    \n    return unique_nums\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [5, 6, 7, 8])\n# print(result)  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    This function accepts multiple lists as input and returns a list of numbers that are unique across all lists,\n    preserving their order of first appearance.\n\n    Parameters:\n    *lists (list): Variable number of lists containing integers.\n\n    Returns:\n    list: A list of unique integers.\n    \"\"\"\n    # Flatten the input lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n\n    # Count occurrences of each number using collections.Counter\n    num_counts = Counter(combined_list)\n\n    # Filter numbers that appear only once, preserving their order of first appearance\n    unique_nums = [num for num in combined_list if num_counts[num] == 1]\n\n    return unique_nums\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [6, 7, 8, 1, 9])\n# print(result)  # Output: [4, 5, 6, 7, 8, 9]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that appear only once across all lists, maintaining their order.\n    \n    Parameters:\n    lists (list): Variable number of lists containing integers.\n    \n    Returns:\n    list: A list of unique numbers that appear only once across all input lists.\n    \n    Raises:\n    ValueError: If any input is not a list.\n    \"\"\"\n    # Validate inputs\n    for lst in lists:\n        if not isinstance(lst, list):\n            raise ValueError(\"All inputs must be lists.\")\n\n    # Concatenate all lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n\n    # Count occurrences of each number using collections.Counter\n    number_counts = Counter(combined_list)\n\n    # Filter numbers that appear only once and maintain their order\n    unique_numbers = [num for num in combined_list if number_counts[num] == 1]\n\n    return unique_numbers\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [5, 6, 7])\n# print(result)  # Output: [1, 4, 6, 7]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"\n    Accepts multiple lists of integers and returns a list of numbers that appear only once across all lists,\n    maintaining the order of their first occurrence.\n    \n    Parameters:\n    lists (List[int]): Variable number of lists containing integers.\n    \n    Returns:\n    List[int]: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Flatten the input lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n    \n    # Count occurrences of each number using Counter\n    num_counts = Counter(combined_list)\n    \n    # Identify numbers that appear only once and maintain their first occurrence order\n    unique_nums = []\n    seen = set()\n    for num in combined_list:\n        if num_counts[num] == 1 and num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    \n    return unique_nums\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [5, 6, 7, 8])\n# print(result)  # Output: [1, 4, 6, 7, 8]\n", "from typing import List\n## main.py\nfrom collections import Counter\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that appear only once across all lists, maintaining their order.\n    \n    Parameters:\n    lists (list): Variable number of lists containing integers.\n    \n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \n    Raises:\n    ValueError: If any input is not a list or contains non-integer elements.\n    \"\"\"\n    # Validate inputs\n    for lst in lists:\n        if not isinstance(lst, list):\n            raise ValueError(\"All inputs must be lists.\")\n        for item in lst:\n            if not isinstance(item, int):\n                raise ValueError(\"All elements in the lists must be integers.\")\n    \n    # Flatten the list of lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n    \n    # Count occurrences of each number using Counter\n    number_counts = Counter(combined_list)\n    \n    # Filter numbers that appear only once and maintain their order\n    unique_numbers = [num for num in combined_list if number_counts[num] == 1]\n    \n    return unique_numbers\n"], "plans": ["requirement analysis:\nThe function should efficiently process multiple lists to remove duplicates, ensuring the output contains only unique numbers. It should handle large datasets without performance degradation and provide results that are easy to interpret.\nrequirement pool:\n- Efficiently remove duplicates from multiple lists\n- Ensure output is a list of unique numbers\n- Handle large lists without performance issues\n- Provide clear documentation for user understanding\n- Include error handling for invalid inputs\nWe will use Python's built-in set data structure to efficiently remove duplicates from multiple lists. The function will iterate through each list, convert it to a set to remove duplicates, and then identify numbers that appear only once across all lists. This approach ensures efficient processing even for large datasets.\n", "requirement analysis:\nThe function should efficiently remove duplicates from multiple lists while preserving the order of unique elements. It should handle large datasets and provide accurate results quickly.\nrequirement pool:\n- The function must remove duplicates from multiple lists\n- The function should preserve the order of unique elements\n- The function should handle large datasets efficiently\n- The function should be easy to integrate into existing projects\n- The function should be well-documented for user understanding\nWe will use Python's built-in collections module, specifically the Counter class, to efficiently count occurrences of each number in the lists. Then, we will filter out numbers that appear more than once, preserving the order of their first appearance using a list comprehension.\n", "requirement analysis:\nThe function should efficiently process multiple lists to remove duplicates and return only unique numbers. It should handle large datasets and provide clear output.\nrequirement pool:\n- Efficiently process input lists to remove duplicates\n- Ensure clear and accurate output\n- Handle large datasets without performance issues\n- Provide intuitive functionality for user satisfaction\n- Maintain simplicity in user interface\nWe will use Python's built-in set data structure to efficiently remove duplicates from the lists. The function will iterate through each list, convert it to a set to remove duplicates, and then filter out numbers that appear in more than one list. This approach ensures efficient processing and clear output.\n", "requirement analysis:\nThe function should efficiently process multiple lists to extract unique numbers, ensuring no duplicates are present in the output. It should handle large datasets without performance degradation and provide results in a clear format.\nrequirement pool:\n- Efficiently process multiple lists\n- Remove duplicate numbers\n- Handle large datasets\n- Provide clear output format\n- Ensure user-friendly interface\nWe will use Python's built-in set data structure to efficiently handle duplicate removal and ensure unique numbers are extracted from multiple lists. The function will iterate through each list, convert it to a set to remove duplicates, and then use set operations to find numbers that are unique across all lists. This approach is efficient and suitable for handling large datasets.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrence. It should handle multiple lists and return a single list with unique elements.\nrequirement pool:\n- The function must remove duplicates efficiently\n- The function should maintain the order of first occurrence\n- The function should handle multiple lists as input\n- The function should be compatible with various Python versions\n- The function should include clear documentation and comments\nWe will use Python's collections.Counter to efficiently count occurrences of each number across multiple lists, then filter out numbers that appear more than once to maintain the order of first occurrence. This approach ensures compatibility with various Python versions and handles large datasets efficiently.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrence. It should handle multiple lists as input and return a single list of unique numbers.\nrequirement pool:\n- The function must remove duplicates and maintain order\n- The function should handle multiple lists as input\n- The function should be efficient with large datasets\n- The function should be well-documented\n- The function should be easy to integrate\nWe will use Python's collections library to efficiently remove duplicates while maintaining the order of first occurrence. The function will handle multiple lists as input by concatenating them into a single list before processing. This approach ensures efficiency and ease of integration into existing projects.\n", "requirement analysis:\nThe function should efficiently remove duplicates while preserving the order of unique elements. It should handle multiple lists and provide a simple interface for integration.\nrequirement pool:\n- The function must remove duplicates and preserve order\n- The function should handle multiple lists as input\n- Provide clear documentation for the function\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\nWe will implement a function that iterates through each list, counts the occurrences of each number using the collections.Counter, and then filters out numbers that appear more than once. This approach ensures that we preserve the order of the first occurrence of each unique number. We will use Python's built-in libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of unique elements. It should handle multiple lists and provide clear error handling for invalid inputs.\nrequirement pool:\n- Efficiently remove duplicates from lists\n- Maintain order of unique elements\n- Handle multiple lists as input\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with different Python versions\nWe will use Python's collections.Counter to efficiently count occurrences of each number in the lists. This will allow us to identify numbers that appear only once across all lists, maintaining their order. The function will handle multiple lists by concatenating them and then processing the combined list. We will ensure compatibility with different Python versions by using standard libraries and provide clear error messages for invalid inputs.\n", "requirement analysis:\nThe function should efficiently remove duplicates from multiple lists while maintaining the order of first occurrences. It should be easy to use and integrate into various projects, with clear documentation to support users.\nrequirement pool:\n- The function must remove duplicates and maintain order\n- The function should handle multiple lists as input\n- The function should be optimized for performance\n- The function should be compatible with Python 3.x\n- The function should include comprehensive documentation\nWe will use Python's built-in collections module, specifically the Counter class, to efficiently count occurrences of numbers across multiple lists. This will allow us to identify and remove duplicates while maintaining the order of first occurrences. The function will be designed to handle flat lists only, as nested lists were not specified in the requirements.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of unique elements. It should handle multiple lists and provide clear error handling for invalid inputs.\nrequirement pool:\n- Efficiently remove duplicates from lists\n- Maintain order of unique elements\n- Handle multiple lists as input\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with various Python versions\nWe will implement a function that processes each list to remove duplicates while maintaining the order of unique elements. We will use Python's collections module, specifically the Counter class, to efficiently count occurrences and filter out duplicates. This approach ensures compatibility with various Python versions and handles large datasets efficiently. We will also include error handling to manage invalid inputs.\n"], "test": ["def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 1, 6, 6]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "scores": [0.0098, 1.0, 0.0098, 0.0098, 1.0, 0.1176, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, false, false, true, false, true, true, true, true], "pass_test_cases_num": [1, 102, 1, 1, 102, 12, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\nfrom collections import Counter\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that appear only once across all lists, maintaining their order.\n    \n    Parameters:\n    lists (list): Variable number of lists containing integers.\n    \n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \n    Raises:\n    ValueError: If any input is not a list or contains non-integer elements.\n    \"\"\"\n    # Validate inputs\n    for lst in lists:\n        if not isinstance(lst, list):\n            raise ValueError(\"All inputs must be lists.\")\n        for item in lst:\n            if not isinstance(item, int):\n                raise ValueError(\"All elements in the lists must be integers.\")\n    \n    # Flatten the list of lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n    \n    # Count occurrences of each number using Counter\n    number_counts = Counter(combined_list)\n    \n    # Filter numbers that appear only once and maintain their order\n    unique_numbers = [num for num in combined_list if number_counts[num] == 1]\n    \n    return unique_numbers\n", "passed": true, "pass": true, "pass_num": 6, "round": 658, "mutate_method": "rephrase_one", "parent_index": 504}
