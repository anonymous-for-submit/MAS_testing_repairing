{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 17, "prompt": "Write a function that returns the perimeter of a square given its side length as input. The function must be able to handle different scenarios. It should handle edge cases where the side length is zero or negative gracefully.", "code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16", "assert square_perimeter(8) == 32", "assert square_perimeter(12) == 48", "assert square_perimeter(15) == 60", "assert square_perimeter(14) == 56", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(13) == 52", "assert square_perimeter(6) == 24", "assert square_perimeter(9) == 36", "assert square_perimeter(6) == 24", "assert square_perimeter(11) == 44", "assert square_perimeter(5) == 20", "assert square_perimeter(11) == 44", "assert square_perimeter(10) == 40", "assert square_perimeter(14) == 56", "assert square_perimeter(6) == 24", "assert square_perimeter(6) == 24", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(8) == 32", "assert square_perimeter(12) == 48", "assert square_perimeter(15) == 60", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(8) == 32", "assert square_perimeter(11) == 44", "assert square_perimeter(9) == 36", "assert square_perimeter(10) == 40", "assert square_perimeter(9) == 36", "assert square_perimeter(11) == 44", "assert square_perimeter(15) == 60", "assert square_perimeter(6) == 24", "assert square_perimeter(13) == 52", "assert square_perimeter(5) == 20", "assert square_perimeter(9) == 36", "assert square_perimeter(5) == 20", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(4) == 16", "assert square_perimeter(5) == 20", "assert square_perimeter(10) == 40", "assert square_perimeter(7) == 28", "assert square_perimeter(10) == 40", "assert square_perimeter(2) == 8", "assert square_perimeter(7) == 28", "assert square_perimeter(2) == 8", "assert square_perimeter(1) == 4", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(7) == 28", "assert square_perimeter(4) == 16", "assert square_perimeter(4) == 16", "assert square_perimeter(8) == 32", "assert square_perimeter(9) == 36", "assert square_perimeter(9) == 36", "assert square_perimeter(8) == 32", "assert square_perimeter(4) == 16", "assert square_perimeter(10) == 40", "assert square_perimeter(8) == 32", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(2) == 8", "assert square_perimeter(2) == 8", "assert square_perimeter(4) == 16", "assert square_perimeter(9) == 36", "assert square_perimeter(1) == 4", "assert square_perimeter(2) == 8", "assert square_perimeter(6) == 24", "assert square_perimeter(4) == 16", "assert square_perimeter(3) == 12", "assert square_perimeter(9) == 36", "assert square_perimeter(2) == 8", "assert square_perimeter(6) == 24", "assert square_perimeter(1) == 4", "assert square_perimeter(7) == 28", "assert square_perimeter(2) == 8", "assert square_perimeter(5) == 20", "assert square_perimeter(7) == 28", "assert square_perimeter(8) == 32", "assert square_perimeter(1) == 4", "assert square_perimeter(6) == 24", "assert square_perimeter(7) == 28", "assert square_perimeter(3) == 12", "assert square_perimeter(9) == 36", "assert square_perimeter(9) == 36", "assert square_perimeter(7) == 28", "assert square_perimeter(1) == 4", "assert square_perimeter(6) == 24", "assert square_perimeter(5) == 20", "assert square_perimeter(5) == 20", "assert square_perimeter(4) == 16", "assert square_perimeter(8) == 32", "assert square_perimeter(6) == 24", "assert square_perimeter(3) == 12", "assert square_perimeter(8) == 32", "assert square_perimeter(2) == 8", "assert square_perimeter(2) == 8"], "entry_point": "square_perimeter", "repair_prompt": ["Write a function square_perimeter that returns the perimeter of a square given its side length as input. The function must be able to handle different scenarios. It should handle edge cases where the side length is zero or negative gracefully.\nsquare_perimeter(10)==40\n"], "completions": ["from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"Calculate the perimeter of a square given its side length.\n\n    This function checks if the input side length is valid (non-negative).\n    If the side length is negative, it returns an error message.\n    If the side length is zero, it returns a perimeter of zero.\n    Otherwise, it calculates and returns the perimeter.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square if the side length is valid.\n        str: Error message if the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        return 'Error: Side length cannot be negative.'\n    elif side_length == 0:\n        return 0.0\n    else:\n        return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square if the input is valid.\n\n    Raises:\n        ValueError: If the side_length is negative or not a number.\n    \"\"\"\n    if not isinstance(side_length, (int, float)):\n        raise ValueError(\"The side length must be a numeric value.\")\n    \n    if side_length < 0:\n        raise ValueError(\"The side length cannot be negative.\")\n    \n    return 4 * side_length\n\n# Example usage:\n# try:\n#     perimeter = square_perimeter(5)\n#     print(f\"The perimeter of the square is: {perimeter}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square if the side length is positive.\n    Raises ValueError if the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square if the side length is valid.\n\n    Raises:\n        ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    perimeter = 4 * side_length\n    return perimeter\n\n# Example usage:\n# try:\n#     print(square_perimeter(5.0))  # Expected output: 20.0\n#     print(square_perimeter(-3.0)) # Expected to raise ValueError\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square if the side length is valid.\n\n    Raises:\n    ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square if the input is valid.\n    Raises ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Example usage:\n# try:\n#     perimeter = square_perimeter(5.0)\n#     print(f\"The perimeter of the square is: {perimeter}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"Calculate the perimeter of a square.\n\n    This function calculates the perimeter of a square given the length of one side.\n    It checks if the input side_length is positive and returns the perimeter.\n    If the side_length is zero or negative, it raises a ValueError.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square if the side length is positive.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError('Side length must be positive.')\n    return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square if the side length is valid.\n\n    Raises:\n    ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    elif side_length == 0:\n        return 0.0\n    else:\n        return 4 * side_length\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"\n    Calculate the perimeter of a square given the side length.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    elif side_length == 0:\n        return 0.0\n    else:\n        return side_length * 4.0\n", "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"Calculate the perimeter of a square.\n\n    This function calculates the perimeter of a square given the length of one side.\n    It checks if the input side length is positive and raises a ValueError if it is zero or negative.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square if the side length is positive.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length\n"], "plans": ["requirement analysis:\nThe function should accurately compute the perimeter of a square given a side length. It must handle edge cases such as zero or negative side lengths by returning appropriate messages or values. The function should be robust and user-friendly.\nrequirement pool:\n- Implement the main function to calculate square perimeter\n- Handle edge cases for zero and negative side lengths\n- Provide error messages for invalid inputs\n- Optimize performance for large inputs\n- Ensure compatibility with different Python versions\nWe will implement a simple function using Python that calculates the perimeter of a square. The function will check if the input side length is valid (non-negative) and return an appropriate error message if it is not. For zero side length, the function will return a perimeter of zero. We will use basic Python functionality without any external libraries as the calculation is straightforward.\n", "requirement analysis:\nThe function should calculate the perimeter of a square accurately based on the given side length. It must handle edge cases such as zero or negative side lengths by providing appropriate error messages or handling them gracefully.\nrequirement pool:\n- Accurate calculation of square perimeter\n- Graceful handling of zero or negative side lengths\n- Provide clear error messages for invalid inputs\n- Optimize performance for large inputs\n- Ensure compatibility with various input types\nWe will implement a simple function `square_perimeter` that calculates the perimeter of a square given its side length. The function will include input validation to handle edge cases such as zero or negative side lengths. If the input is invalid (negative or non-numeric), the function will return a clear error message. We will use Python's built-in capabilities for this task, as no external libraries are necessary for such a straightforward calculation.\n", "requirement analysis:\nThe function should accurately compute the perimeter of a square using the formula 4 * side_length. It must handle edge cases where the side length is zero or negative by returning a meaningful message or value.\nrequirement pool:\n- Implement the main function to calculate perimeter\n- Handle zero and negative side length inputs\n- Provide error messages for invalid inputs\n- Optimize performance for large inputs\n- Ensure compatibility with different Python versions\nWe will implement a simple function that calculates the perimeter of a square using the formula 4 * side_length. The function will handle edge cases by checking if the side length is zero or negative and will return a clear error message in such cases. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should accurately compute the perimeter of a square given a side length. It must handle edge cases such as zero or negative inputs by returning appropriate messages or values. The function should be robust and user-friendly.\nrequirement pool:\n- Implement the main function to calculate square perimeter\n- Handle zero and negative side length inputs gracefully\n- Provide clear error messages for invalid inputs\n- Ensure the function is efficient and easy to use\n- Consider extending functionality for other shapes\nWe will implement a simple function using Python that calculates the perimeter of a square. The function will check for edge cases such as zero or negative side lengths and return appropriate error messages. We will use Python's built-in capabilities for error handling and input validation.\n", "requirement analysis:\nThe function should accurately calculate the perimeter of a square using the formula 4 * side_length. It must handle edge cases where the side length is zero or negative by returning a meaningful error message or a specific value indicating invalid input.\nrequirement pool:\n- Implement the main function to calculate square perimeter.\n- Handle edge cases for zero and negative side lengths.\n- Provide informative error messages for invalid inputs.\n- Optimize the function for performance.\n- Ensure compatibility with different Python versions.\nWe will implement a simple function to calculate the perimeter of a square using the formula 4 * side_length. The function will handle edge cases by checking if the side length is zero or negative and will return informative error messages for invalid inputs. We will use Python's built-in exception handling to manage these scenarios effectively.\n", "requirement analysis:\nThe function should calculate the perimeter of a square accurately based on the given side length. It must handle edge cases such as zero or negative side lengths by providing appropriate feedback or error messages. The function should be user-friendly and intuitive.\nrequirement pool:\n- Accurate calculation of square perimeter\n- Graceful handling of zero or negative side lengths\n- Provide clear error messages for invalid inputs\n- Ensure compatibility with various input types\n- Optimize performance for large inputs\nWe will implement a simple function named `square_perimeter` that calculates the perimeter of a square given its side length. The function will handle edge cases by checking if the input is zero or negative and will return an appropriate error message for invalid inputs. We will use Python's built-in capabilities to handle these scenarios without the need for additional libraries, ensuring simplicity and ease of use.\n", "requirement analysis:\nThe function should accurately calculate the perimeter of a square using the formula 4 * side_length. It must handle edge cases where the side length is zero or negative by returning a specific message or value indicating invalid input.\nrequirement pool:\n- Implement the main function to calculate square perimeter\n- Handle zero and negative side length inputs gracefully\n- Provide clear error messages for invalid inputs\n- Ensure the function is efficient and easy to use\n- Consider extending functionality to other shapes\nWe will implement a simple function named `square_perimeter` that calculates the perimeter of a square using the formula 4 * side_length. The function will handle edge cases by checking if the input is zero or negative and will return a clear error message in such cases. We will use Python's built-in capabilities for this task, as no external libraries are necessary for such a straightforward calculation.\n", "requirement analysis:\nThe function should accurately compute the perimeter of a square using the formula 4 * side_length. It must handle edge cases where the side length is zero or negative by returning a meaningful message or value. The function should be robust and user-friendly.\nrequirement pool:\n- Implement perimeter calculation using 4 * side_length\n- Handle zero and negative side lengths gracefully\n- Provide informative error messages for invalid inputs\n- Ensure the function is efficient and easy to use\n- Consider extending functionality for other shapes\nWe will implement a simple function that calculates the perimeter of a square using the formula 4 * side_length. The function will handle edge cases by checking if the side length is zero or negative and will return informative error messages for invalid inputs. We will use Python's built-in capabilities to achieve this without any additional libraries.\n", "requirement analysis:\nThe function should accurately compute the perimeter of a square given a side length. It must handle edge cases such as zero or negative side lengths by returning appropriate messages or values. The function should be robust and user-friendly.\nrequirement pool:\n- Accurate perimeter calculation\n- Graceful handling of zero and negative side lengths\n- Clear error messages for invalid inputs\n- Efficient performance\n- User-friendly interface\nWe will implement a simple function that calculates the perimeter of a square by multiplying the side length by four. The function will include error handling to manage edge cases such as zero or negative side lengths. For negative side lengths, the function will return an error message indicating invalid input. For a side length of zero, the function will return a perimeter of zero, as this is a valid geometric scenario.\n", "requirement analysis:\nThe function should calculate the perimeter of a square accurately, considering edge cases such as zero or negative side lengths. It should provide clear feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to calculate square perimeter.\n- Handle edge cases for zero and negative side lengths.\n- Provide informative error messages for invalid inputs.\n- Optimize performance for large input values.\n- Ensure compatibility with different Python versions.\nWe will implement a simple function to calculate the perimeter of a square. The function will handle edge cases by checking if the input is zero or negative and will return an error message in such cases. We will use Python's built-in capabilities to handle these scenarios without the need for additional libraries.\n"], "test": ["def check(square_perimeter):\n\tassert square_perimeter(10)==40", "def check(square_perimeter):\n\tassert square_perimeter(5)==20", "def check(square_perimeter):\n\tassert square_perimeter(4)==16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(12) == 48", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(14) == 56", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(13) == 52", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(14) == 56", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(12) == 48", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(11) == 44", "def check(square_perimeter):\n\tassert square_perimeter(15) == 60", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(13) == 52", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(10) == 40", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(9) == 36", "def check(square_perimeter):\n\tassert square_perimeter(7) == 28", "def check(square_perimeter):\n\tassert square_perimeter(1) == 4", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(5) == 20", "def check(square_perimeter):\n\tassert square_perimeter(4) == 16", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(6) == 24", "def check(square_perimeter):\n\tassert square_perimeter(3) == 12", "def check(square_perimeter):\n\tassert square_perimeter(8) == 32", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8", "def check(square_perimeter):\n\tassert square_perimeter(2) == 8"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef square_perimeter(side_length: float) -> float:\n    \"\"\"Calculate the perimeter of a square.\n\n    This function calculates the perimeter of a square given the length of one side.\n    It checks if the input side length is positive and raises a ValueError if it is zero or negative.\n\n    Args:\n        side_length (float): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square if the side length is positive.\n\n    Raises:\n        ValueError: If the side length is zero or negative.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be positive.\")\n    \n    return 4 * side_length\n", "passed": true, "pass": true, "pass_num": 10, "round": 346, "mutate_method": "expand_one2two", "parent_index": 302}
