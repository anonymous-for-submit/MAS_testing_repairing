{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 588, "prompt": "Write a python function to find the difference between largest and smallest value in a given list.", "code": "def big_diff(nums):\n     diff= max(nums)-min(nums)\n     return diff", "test_imports": [], "test_list": ["assert big_diff([1,2,3,4]) == 3", "assert big_diff([4,5,12]) == 8", "assert big_diff([9,2,3]) == 7", "assert big_diff([5, 4, 6, 1]) == 5", "assert big_diff([5, 3, 3, 1]) == 4", "assert big_diff([5, 4, 6, 8]) == 4", "assert big_diff([3, 5, 5, 8]) == 5", "assert big_diff([4, 6, 1, 5]) == 5", "assert big_diff([3, 5, 7, 8]) == 5", "assert big_diff([5, 3, 5, 1]) == 4", "assert big_diff([3, 1, 5, 1]) == 4", "assert big_diff([4, 6, 1, 9]) == 8", "assert big_diff([5, 1, 1, 8]) == 7", "assert big_diff([6, 3, 4, 6]) == 3", "assert big_diff([2, 2, 6, 1]) == 5", "assert big_diff([3, 7, 8, 6]) == 5", "assert big_diff([5, 7, 2, 4]) == 5", "assert big_diff([1, 7, 5, 1]) == 6", "assert big_diff([5, 4, 2, 6]) == 4", "assert big_diff([5, 2, 7, 5]) == 5", "assert big_diff([4, 2, 5, 5]) == 3", "assert big_diff([1, 4, 1, 5]) == 4", "assert big_diff([3, 7, 3, 7]) == 4", "assert big_diff([5, 6, 6, 3]) == 3", "assert big_diff([1, 5, 2, 2]) == 4", "assert big_diff([4, 1, 6, 1]) == 5", "assert big_diff([4, 7, 4, 4]) == 3", "assert big_diff([4, 3, 5, 1]) == 4", "assert big_diff([6, 4, 2, 4]) == 4", "assert big_diff([3, 2, 8, 1]) == 7", "assert big_diff([4, 2, 4, 9]) == 7", "assert big_diff([6, 2, 7, 5]) == 5", "assert big_diff([6, 6, 2, 4]) == 4", "assert big_diff([5, 3, 1, 6]) == 5", "assert big_diff([5, 2, 2, 6]) == 4", "assert big_diff([6, 1, 7, 1]) == 6", "assert big_diff([2, 8, 9]) == 7", "assert big_diff([8, 10, 10]) == 2", "assert big_diff([1, 8, 9]) == 8", "assert big_diff([9, 9, 16]) == 7", "assert big_diff([4, 9, 15]) == 11", "assert big_diff([7, 10, 11]) == 4", "assert big_diff([7, 6, 13]) == 7", "assert big_diff([6, 10, 10]) == 4", "assert big_diff([5, 6, 14]) == 9", "assert big_diff([2, 4, 10]) == 8", "assert big_diff([2, 9, 15]) == 13", "assert big_diff([8, 9, 17]) == 9", "assert big_diff([5, 7, 11]) == 6", "assert big_diff([1, 6, 11]) == 10", "assert big_diff([8, 5, 12]) == 7", "assert big_diff([6, 1, 15]) == 14", "assert big_diff([2, 5, 12]) == 10", "assert big_diff([3, 9, 14]) == 11", "assert big_diff([5, 6, 8]) == 3", "assert big_diff([9, 10, 17]) == 8", "assert big_diff([1, 5, 9]) == 8", "assert big_diff([5, 7, 15]) == 10", "assert big_diff([7, 1, 11]) == 10", "assert big_diff([1, 1, 17]) == 16", "assert big_diff([4, 2, 9]) == 7", "assert big_diff([9, 1, 16]) == 15", "assert big_diff([6, 3, 8]) == 5", "assert big_diff([3, 3, 8]) == 5", "assert big_diff([6, 1, 12]) == 11", "assert big_diff([4, 2, 13]) == 11", "assert big_diff([3, 3, 7]) == 4", "assert big_diff([3, 3, 17]) == 14", "assert big_diff([6, 8, 12]) == 6", "assert big_diff([12, 7, 5]) == 7", "assert big_diff([5, 4, 5]) == 1", "assert big_diff([13, 2, 8]) == 11", "assert big_diff([12, 3, 4]) == 9", "assert big_diff([6, 6, 5]) == 1", "assert big_diff([6, 5, 1]) == 5", "assert big_diff([14, 3, 7]) == 11", "assert big_diff([5, 1, 7]) == 6", "assert big_diff([7, 6, 5]) == 2", "assert big_diff([5, 7, 1]) == 6", "assert big_diff([11, 7, 5]) == 6", "assert big_diff([7, 4, 5]) == 3", "assert big_diff([13, 4, 5]) == 9", "assert big_diff([7, 3, 6]) == 4", "assert big_diff([8, 1, 8]) == 7", "assert big_diff([8, 7, 8]) == 1", "assert big_diff([6, 1, 5]) == 5", "assert big_diff([5, 1, 4]) == 4", "assert big_diff([4, 2, 7]) == 5", "assert big_diff([12, 7, 1]) == 11", "assert big_diff([8, 5, 7]) == 3", "assert big_diff([6, 2, 2]) == 4", "assert big_diff([8, 2, 3]) == 6", "assert big_diff([8, 6, 8]) == 2", "assert big_diff([9, 6, 5]) == 4", "assert big_diff([13, 5, 8]) == 8", "assert big_diff([6, 2, 8]) == 6", "assert big_diff([13, 1, 8]) == 12", "assert big_diff([4, 7, 1]) == 6", "assert big_diff([12, 3, 1]) == 11", "assert big_diff([13, 3, 6]) == 10", "assert big_diff([5, 5, 4]) == 1", "assert big_diff([9, 1, 1]) == 8"], "entry_point": "big_diff", "repair_prompt": ["Write a python function big_diff to find the difference between largest and smallest value in a given list.\nbig_diff([1,2,3,4]) == 3\n"], "completions": ["from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> float:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    float: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list is empty. Please provide a list with numeric values.\")\n    \n    try:\n        min_value = min(numbers)\n        max_value = max(numbers)\n    except TypeError:\n        raise ValueError(\"The list contains non-numeric values. Please provide a list with numeric values.\")\n    \n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> float:\n    '''\n    Calculate the difference between the largest and smallest values in a list.\n    \n    Parameters:\n    numbers (list): A list of numeric values.\n    \n    Returns:\n    float: The difference between the largest and smallest values.\n    \n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    '''\n    if not numbers:\n        raise ValueError(\"The list is empty.\")\n    \n    try:\n        min_value = min(numbers)\n        max_value = max(numbers)\n    except TypeError:\n        raise ValueError(\"The list contains non-numeric values.\")\n    \n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    '''\n    Calculate the difference between the largest and smallest values in a list.\n    \n    Parameters:\n    numbers (list): A list of numeric values.\n    \n    Returns:\n    int: The difference between the largest and smallest values.\n    \n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    '''\n    if not numbers:\n        raise ValueError('List is empty')\n    \n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise ValueError('List contains non-numeric values')\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"List is empty\")\n\n    try:\n        min_value = min(numbers)\n        max_value = max(numbers)\n    except TypeError:\n        raise ValueError(\"List contains non-numeric values\")\n\n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the input is not a list of numbers or if the list is empty.\n    \"\"\"\n    # Validate input\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list.\")\n    if not numbers:\n        raise ValueError(\"List cannot be empty.\")\n    if not all(isinstance(n, (int, float)) for n in numbers):\n        raise ValueError(\"All elements in the list must be numbers.\")\n\n    # Calculate min and max\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Return the difference\n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    '''\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    '''\n    if not numbers:\n        raise ValueError(\"List is empty\")\n\n    try:\n        min_value = min(numbers)\n        max_value = max(numbers)\n    except TypeError:\n        raise ValueError(\"List contains non-numeric values\")\n\n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list is empty.\")\n    \n    # Validate all elements are numeric\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n\n# Example usage:\n# try:\n#     result = big_diff([10, 3, 5, 6])\n#     print(\"The difference is:\", result)\n# except ValueError as e:\n#     print(\"Error:\", e)\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the list is empty or contains non-numeric values.\n    \"\"\"\n    # Validate input\n    if not numbers:\n        raise ValueError(\"The list is empty.\")\n    \n    # Check for non-numeric values\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"The list contains non-numeric values.\")\n    \n    # Calculate max and min\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    # Return the difference\n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    ValueError: If the input is not a list of numbers or if the list is empty.\n    \"\"\"\n    # Validate input\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    if not numbers:\n        raise ValueError(\"List cannot be empty.\")\n    \n    # Check if all elements are numeric\n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"All elements in the list must be numeric.\")\n    \n    # Calculate the difference between the largest and smallest values\n    max_value = max(numbers)\n    min_value = min(numbers)\n    \n    return max_value - min_value\n", "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list contains non-numeric values or is empty.\n    \"\"\"\n    # Validate input type\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Validate list content and check for empty list\n    if not numbers:\n        raise ValueError(\"List cannot be empty.\")\n    \n    for item in numbers:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List must contain numeric values only.\")\n\n    # Calculate min and max\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Return the difference\n    return max_value - min_value\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists or non-numeric values gracefully.\nrequirement pool:\n- Implement the main function to calculate the difference between largest and smallest values.\n- Optimize the function for performance with large lists.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for user guidance.\n- Test the function with various list sizes and types.\nWe will use Python's built-in min and max functions to efficiently find the largest and smallest values in the list. This approach is simple and effective for small to large lists. We will also include error handling to manage cases where the list is empty or contains non-numeric values, raising informative error messages in such scenarios.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists and lists with a single element.\nrequirement pool:\n- Implement the main function to calculate the difference\n- Handle edge cases like empty lists\n- Optimize for performance with large lists\n- Provide user-friendly error messages\n- Ensure compatibility with different data types\nWe will use Python's built-in min and max functions to efficiently find the smallest and largest values in the list. This approach is simple and effective for handling lists of various sizes. We will also include error handling for empty lists and non-numeric values.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists and provide clear error messages. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function to calculate the difference\n- Handle edge cases like empty lists\n- Optimize performance for large lists\n- Provide user-friendly error messages\n- Ensure compatibility with different data types\nWe will use Python's built-in functions to efficiently calculate the difference between the largest and smallest values in a list. This approach is simple and effective for handling large lists. We will also include error handling for empty lists and non-numeric values, providing clear error messages.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists and large datasets, providing clear error messages when necessary.\nrequirement pool:\n- Implement the main function to calculate the difference.\n- Optimize the function for performance with large lists.\n- Include error handling for empty or invalid lists.\n- Document the function usage and edge cases.\n- Test the function with various list sizes and values.\nWe will use Python's built-in min and max functions to efficiently find the smallest and largest values in the list. This approach is simple and effective for both small and large lists. We will include error handling to manage cases where the list is empty or contains non-numeric values, providing clear error messages.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists or non-numeric inputs gracefully.\nrequirement pool:\n- Implement the main function to calculate the difference between largest and smallest values.\n- Optimize the function for performance with large lists.\n- Add error handling for invalid inputs.\n- Document the function usage and edge cases.\n- Test the function with various list sizes and types.\nWe will use Python's built-in min and max functions to efficiently find the smallest and largest values in the list. This approach is simple and effective for small to large lists. We will also implement error handling to ensure the input is a list of numbers, providing clear error messages for invalid inputs.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists and provide meaningful error messages. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function to calculate the difference between largest and smallest values.\n- Optimize the function for performance with large lists.\n- Include error handling for empty or invalid lists.\n- Document the function usage and edge cases.\n- Test the function with various list sizes and values.\nWe will use Python's built-in min and max functions to efficiently find the smallest and largest values in the list. This approach is simple and effective for both small and large lists. We will also include error handling to manage cases where the list is empty or contains non-numeric values, providing clear error messages in such scenarios.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists or non-numeric inputs gracefully.\nrequirement pool:\n- Implement the main function to calculate the difference.\n- Optimize the function for performance with large lists.\n- Include error handling for invalid inputs.\n- Document the function with examples and usage instructions.\n- Test the function with various list sizes and types.\nWe will use Python's built-in functions to find the maximum and minimum values in the list, which are efficient and simple for this task. We will also include error handling to manage cases such as empty lists or non-numeric inputs. The function will be optimized for performance by directly using these built-in functions without additional overhead.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists or non-numeric inputs gracefully, providing clear error messages.\nrequirement pool:\n- Implement the main function to calculate the difference between largest and smallest values.\n- Optimize the function for performance with large lists.\n- Include error handling for invalid inputs.\n- Document the function usage and edge cases.\n- Test the function with various input scenarios.\nWe will use Python's built-in functions to find the maximum and minimum values in the list and calculate their difference. This approach is simple and efficient for most use cases. We will also implement error handling to manage invalid inputs such as empty lists or non-numeric values.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list. It must handle edge cases such as empty lists or non-numeric inputs gracefully.\nrequirement pool:\n- Implement the main function to calculate the difference between largest and smallest values\n- Optimize the function for performance with large lists\n- Include error handling for invalid inputs\n- Document the function usage and edge cases\n- Test the function with various list sizes and types\nWe will implement a simple Python function using built-in min and max functions to calculate the difference between the largest and smallest values in a list. We will include error handling to ensure the input is a list of numbers and handle edge cases such as empty lists. This approach is efficient and leverages Python's built-in capabilities, which are suitable for this task.\n", "requirement analysis:\nThe function should efficiently compute the difference between the largest and smallest values in a list, handle errors gracefully, and be optimized for performance.\nrequirement pool:\n- Implement the main function to calculate the difference\n- Optimize the function for large lists\n- Add error handling for non-list inputs\n- Document the function usage and examples\n- Test the function with various list sizes\nWe will use Python's built-in min and max functions to efficiently find the smallest and largest values in the list. This approach is simple and effective for the task at hand. We will also include error handling to ensure the input is a list and contains numeric values only. For large lists, Python's built-in functions are optimized and should perform well.\n"], "test": ["def check(big_diff):\n\tassert big_diff([1,2,3,4]) == 3", "def check(big_diff):\n\tassert big_diff([4,5,12]) == 8", "def check(big_diff):\n\tassert big_diff([9,2,3]) == 7", "def check(big_diff):\n\tassert big_diff([5, 4, 6, 1]) == 5", "def check(big_diff):\n\tassert big_diff([5, 3, 3, 1]) == 4", "def check(big_diff):\n\tassert big_diff([5, 4, 6, 8]) == 4", "def check(big_diff):\n\tassert big_diff([3, 5, 5, 8]) == 5", "def check(big_diff):\n\tassert big_diff([4, 6, 1, 5]) == 5", "def check(big_diff):\n\tassert big_diff([3, 5, 7, 8]) == 5", "def check(big_diff):\n\tassert big_diff([5, 3, 5, 1]) == 4", "def check(big_diff):\n\tassert big_diff([3, 1, 5, 1]) == 4", "def check(big_diff):\n\tassert big_diff([4, 6, 1, 9]) == 8", "def check(big_diff):\n\tassert big_diff([5, 1, 1, 8]) == 7", "def check(big_diff):\n\tassert big_diff([6, 3, 4, 6]) == 3", "def check(big_diff):\n\tassert big_diff([2, 2, 6, 1]) == 5", "def check(big_diff):\n\tassert big_diff([3, 7, 8, 6]) == 5", "def check(big_diff):\n\tassert big_diff([5, 7, 2, 4]) == 5", "def check(big_diff):\n\tassert big_diff([1, 7, 5, 1]) == 6", "def check(big_diff):\n\tassert big_diff([5, 4, 2, 6]) == 4", "def check(big_diff):\n\tassert big_diff([5, 2, 7, 5]) == 5", "def check(big_diff):\n\tassert big_diff([4, 2, 5, 5]) == 3", "def check(big_diff):\n\tassert big_diff([1, 4, 1, 5]) == 4", "def check(big_diff):\n\tassert big_diff([3, 7, 3, 7]) == 4", "def check(big_diff):\n\tassert big_diff([5, 6, 6, 3]) == 3", "def check(big_diff):\n\tassert big_diff([1, 5, 2, 2]) == 4", "def check(big_diff):\n\tassert big_diff([4, 1, 6, 1]) == 5", "def check(big_diff):\n\tassert big_diff([4, 7, 4, 4]) == 3", "def check(big_diff):\n\tassert big_diff([4, 3, 5, 1]) == 4", "def check(big_diff):\n\tassert big_diff([6, 4, 2, 4]) == 4", "def check(big_diff):\n\tassert big_diff([3, 2, 8, 1]) == 7", "def check(big_diff):\n\tassert big_diff([4, 2, 4, 9]) == 7", "def check(big_diff):\n\tassert big_diff([6, 2, 7, 5]) == 5", "def check(big_diff):\n\tassert big_diff([6, 6, 2, 4]) == 4", "def check(big_diff):\n\tassert big_diff([5, 3, 1, 6]) == 5", "def check(big_diff):\n\tassert big_diff([5, 2, 2, 6]) == 4", "def check(big_diff):\n\tassert big_diff([6, 1, 7, 1]) == 6", "def check(big_diff):\n\tassert big_diff([2, 8, 9]) == 7", "def check(big_diff):\n\tassert big_diff([8, 10, 10]) == 2", "def check(big_diff):\n\tassert big_diff([1, 8, 9]) == 8", "def check(big_diff):\n\tassert big_diff([9, 9, 16]) == 7", "def check(big_diff):\n\tassert big_diff([4, 9, 15]) == 11", "def check(big_diff):\n\tassert big_diff([7, 10, 11]) == 4", "def check(big_diff):\n\tassert big_diff([7, 6, 13]) == 7", "def check(big_diff):\n\tassert big_diff([6, 10, 10]) == 4", "def check(big_diff):\n\tassert big_diff([5, 6, 14]) == 9", "def check(big_diff):\n\tassert big_diff([2, 4, 10]) == 8", "def check(big_diff):\n\tassert big_diff([2, 9, 15]) == 13", "def check(big_diff):\n\tassert big_diff([8, 9, 17]) == 9", "def check(big_diff):\n\tassert big_diff([5, 7, 11]) == 6", "def check(big_diff):\n\tassert big_diff([1, 6, 11]) == 10", "def check(big_diff):\n\tassert big_diff([8, 5, 12]) == 7", "def check(big_diff):\n\tassert big_diff([6, 1, 15]) == 14", "def check(big_diff):\n\tassert big_diff([2, 5, 12]) == 10", "def check(big_diff):\n\tassert big_diff([3, 9, 14]) == 11", "def check(big_diff):\n\tassert big_diff([5, 6, 8]) == 3", "def check(big_diff):\n\tassert big_diff([9, 10, 17]) == 8", "def check(big_diff):\n\tassert big_diff([1, 5, 9]) == 8", "def check(big_diff):\n\tassert big_diff([5, 7, 15]) == 10", "def check(big_diff):\n\tassert big_diff([7, 1, 11]) == 10", "def check(big_diff):\n\tassert big_diff([1, 1, 17]) == 16", "def check(big_diff):\n\tassert big_diff([4, 2, 9]) == 7", "def check(big_diff):\n\tassert big_diff([9, 1, 16]) == 15", "def check(big_diff):\n\tassert big_diff([6, 3, 8]) == 5", "def check(big_diff):\n\tassert big_diff([3, 3, 8]) == 5", "def check(big_diff):\n\tassert big_diff([6, 1, 12]) == 11", "def check(big_diff):\n\tassert big_diff([4, 2, 13]) == 11", "def check(big_diff):\n\tassert big_diff([3, 3, 7]) == 4", "def check(big_diff):\n\tassert big_diff([3, 3, 17]) == 14", "def check(big_diff):\n\tassert big_diff([6, 8, 12]) == 6", "def check(big_diff):\n\tassert big_diff([12, 7, 5]) == 7", "def check(big_diff):\n\tassert big_diff([5, 4, 5]) == 1", "def check(big_diff):\n\tassert big_diff([13, 2, 8]) == 11", "def check(big_diff):\n\tassert big_diff([12, 3, 4]) == 9", "def check(big_diff):\n\tassert big_diff([6, 6, 5]) == 1", "def check(big_diff):\n\tassert big_diff([6, 5, 1]) == 5", "def check(big_diff):\n\tassert big_diff([14, 3, 7]) == 11", "def check(big_diff):\n\tassert big_diff([5, 1, 7]) == 6", "def check(big_diff):\n\tassert big_diff([7, 6, 5]) == 2", "def check(big_diff):\n\tassert big_diff([5, 7, 1]) == 6", "def check(big_diff):\n\tassert big_diff([11, 7, 5]) == 6", "def check(big_diff):\n\tassert big_diff([7, 4, 5]) == 3", "def check(big_diff):\n\tassert big_diff([13, 4, 5]) == 9", "def check(big_diff):\n\tassert big_diff([7, 3, 6]) == 4", "def check(big_diff):\n\tassert big_diff([8, 1, 8]) == 7", "def check(big_diff):\n\tassert big_diff([8, 7, 8]) == 1", "def check(big_diff):\n\tassert big_diff([6, 1, 5]) == 5", "def check(big_diff):\n\tassert big_diff([5, 1, 4]) == 4", "def check(big_diff):\n\tassert big_diff([4, 2, 7]) == 5", "def check(big_diff):\n\tassert big_diff([12, 7, 1]) == 11", "def check(big_diff):\n\tassert big_diff([8, 5, 7]) == 3", "def check(big_diff):\n\tassert big_diff([6, 2, 2]) == 4", "def check(big_diff):\n\tassert big_diff([8, 2, 3]) == 6", "def check(big_diff):\n\tassert big_diff([8, 6, 8]) == 2", "def check(big_diff):\n\tassert big_diff([9, 6, 5]) == 4", "def check(big_diff):\n\tassert big_diff([13, 5, 8]) == 8", "def check(big_diff):\n\tassert big_diff([6, 2, 8]) == 6", "def check(big_diff):\n\tassert big_diff([13, 1, 8]) == 12", "def check(big_diff):\n\tassert big_diff([4, 7, 1]) == 6", "def check(big_diff):\n\tassert big_diff([12, 3, 1]) == 11", "def check(big_diff):\n\tassert big_diff([13, 3, 6]) == 10", "def check(big_diff):\n\tassert big_diff([5, 5, 4]) == 1", "def check(big_diff):\n\tassert big_diff([9, 1, 1]) == 8"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef big_diff(numbers: list) -> int:\n    \"\"\"\n    Calculate the difference between the largest and smallest values in a list.\n\n    Parameters:\n    numbers (list): A list of numeric values.\n\n    Returns:\n    int: The difference between the largest and smallest values.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list contains non-numeric values or is empty.\n    \"\"\"\n    # Validate input type\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Validate list content and check for empty list\n    if not numbers:\n        raise ValueError(\"List cannot be empty.\")\n    \n    for item in numbers:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List must contain numeric values only.\")\n\n    # Calculate min and max\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    # Return the difference\n    return max_value - min_value\n", "passed": true, "pass": true, "pass_num": 10, "round": 291, "mutate_method": "condense_two2one", "parent_index": 291}
