{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 401, "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.", "code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ", "test_imports": [], "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "assert add_nested_tuples(((2, 7), (9, 3), (2, 6), (2, 6)), ((7, 4), (8, 14), (6, 6), (3, 7))) == ((9, 11), (17, 17), (8, 12), (5, 13))", "assert add_nested_tuples(((1, 8), (4, 8), (4, 9), (3, 13)), ((7, 12), (3, 11), (1, 4), (10, 1))) == ((8, 20), (7, 19), (5, 13), (13, 14))", "assert add_nested_tuples(((6, 4), (6, 5), (1, 8), (1, 12)), ((9, 7), (5, 13), (4, 6), (10, 1))) == ((15, 11), (11, 18), (5, 14), (11, 13))", "assert add_nested_tuples(((3, 4), (6, 6), (1, 5), (5, 15)), ((10, 5), (6, 9), (6, 3), (9, 2))) == ((13, 9), (12, 15), (7, 8), (14, 17))", "assert add_nested_tuples(((4, 5), (2, 1), (3, 10), (3, 12)), ((11, 6), (7, 12), (1, 1), (4, 6))) == ((15, 11), (9, 13), (4, 11), (7, 18))", "assert add_nested_tuples(((1, 1), (2, 7), (2, 4), (5, 7)), ((11, 11), (5, 12), (2, 3), (12, 3))) == ((12, 12), (7, 19), (4, 7), (17, 10))", "assert add_nested_tuples(((3, 8), (2, 8), (6, 8), (2, 9)), ((5, 9), (3, 11), (3, 3), (8, 2))) == ((8, 17), (5, 19), (9, 11), (10, 11))", "assert add_nested_tuples(((6, 4), (2, 2), (3, 10), (2, 9)), ((7, 6), (8, 14), (6, 4), (10, 4))) == ((13, 10), (10, 16), (9, 14), (12, 13))", "assert add_nested_tuples(((3, 3), (3, 1), (5, 6), (2, 12)), ((8, 9), (4, 14), (3, 6), (11, 7))) == ((11, 12), (7, 15), (8, 12), (13, 19))", "assert add_nested_tuples(((5, 6), (3, 9), (6, 7), (3, 8)), ((6, 12), (2, 5), (2, 3), (9, 7))) == ((11, 18), (5, 14), (8, 10), (12, 15))", "assert add_nested_tuples(((3, 4), (4, 9), (3, 10), (5, 8)), ((6, 12), (2, 13), (5, 1), (2, 1))) == ((9, 16), (6, 22), (8, 11), (7, 9))", "assert add_nested_tuples(((6, 7), (4, 2), (6, 13), (4, 11)), ((11, 3), (2, 8), (1, 4), (8, 1))) == ((17, 10), (6, 10), (7, 17), (12, 12))", "assert add_nested_tuples(((6, 3), (8, 7), (3, 9), (6, 15)), ((6, 6), (3, 9), (6, 2), (3, 1))) == ((12, 9), (11, 16), (9, 11), (9, 16))", "assert add_nested_tuples(((2, 4), (2, 6), (3, 10), (6, 9)), ((2, 11), (6, 8), (3, 4), (8, 1))) == ((4, 15), (8, 14), (6, 14), (14, 10))", "assert add_nested_tuples(((1, 4), (9, 4), (4, 7), (2, 11)), ((5, 2), (2, 5), (6, 5), (7, 2))) == ((6, 6), (11, 9), (10, 12), (9, 13))", "assert add_nested_tuples(((3, 5), (2, 8), (3, 10), (1, 11)), ((7, 2), (4, 12), (4, 3), (6, 6))) == ((10, 7), (6, 20), (7, 13), (7, 17))", "assert add_nested_tuples(((5, 3), (2, 2), (5, 5), (5, 11)), ((4, 3), (3, 14), (4, 2), (2, 2))) == ((9, 6), (5, 16), (9, 7), (7, 13))", "assert add_nested_tuples(((5, 1), (2, 9), (3, 11), (3, 15)), ((2, 12), (7, 9), (4, 4), (11, 5))) == ((7, 13), (9, 18), (7, 15), (14, 20))", "assert add_nested_tuples(((4, 5), (3, 9), (6, 13), (1, 14)), ((10, 2), (1, 11), (1, 4), (12, 5))) == ((14, 7), (4, 20), (7, 17), (13, 19))", "assert add_nested_tuples(((3, 8), (6, 9), (5, 12), (6, 5)), ((9, 5), (2, 11), (5, 4), (9, 3))) == ((12, 13), (8, 20), (10, 16), (15, 8))", "assert add_nested_tuples(((3, 8), (6, 2), (3, 9), (3, 10)), ((11, 3), (1, 7), (5, 5), (12, 6))) == ((14, 11), (7, 9), (8, 14), (15, 16))", "assert add_nested_tuples(((2, 6), (5, 6), (1, 11), (4, 11)), ((6, 3), (1, 12), (2, 3), (6, 5))) == ((8, 9), (6, 18), (3, 14), (10, 16))", "assert add_nested_tuples(((4, 2), (9, 1), (2, 4), (4, 9)), ((3, 8), (4, 9), (6, 1), (7, 2))) == ((7, 10), (13, 10), (8, 5), (11, 11))", "assert add_nested_tuples(((1, 3), (2, 2), (6, 14), (4, 11)), ((7, 4), (5, 9), (1, 6), (12, 2))) == ((8, 7), (7, 11), (7, 20), (16, 13))", "assert add_nested_tuples(((4, 5), (5, 5), (5, 10), (1, 13)), ((3, 7), (2, 14), (1, 1), (9, 6))) == ((7, 12), (7, 19), (6, 11), (10, 19))", "assert add_nested_tuples(((5, 3), (4, 2), (7, 6), (1, 7)), ((9, 5), (6, 7), (5, 1), (10, 4))) == ((14, 8), (10, 9), (12, 7), (11, 11))", "assert add_nested_tuples(((5, 3), (6, 10), (1, 10), (5, 9)), ((7, 4), (2, 11), (1, 5), (11, 4))) == ((12, 7), (8, 21), (2, 15), (16, 13))", "assert add_nested_tuples(((2, 6), (7, 7), (2, 5), (4, 7)), ((7, 6), (8, 5), (5, 1), (5, 2))) == ((9, 12), (15, 12), (7, 6), (9, 9))", "assert add_nested_tuples(((3, 8), (4, 10), (3, 5), (6, 14)), ((7, 7), (6, 5), (2, 5), (11, 5))) == ((10, 15), (10, 15), (5, 10), (17, 19))", "assert add_nested_tuples(((3, 3), (6, 4), (2, 8), (3, 13)), ((11, 9), (2, 13), (2, 2), (10, 3))) == ((14, 12), (8, 17), (4, 10), (13, 16))", "assert add_nested_tuples(((5, 2), (1, 10), (3, 8), (2, 13)), ((4, 5), (2, 12), (1, 3), (3, 7))) == ((9, 7), (3, 22), (4, 11), (5, 20))", "assert add_nested_tuples(((4, 6), (7, 9), (2, 4), (6, 12)), ((7, 11), (7, 8), (3, 1), (4, 7))) == ((11, 17), (14, 17), (5, 5), (10, 19))", "assert add_nested_tuples(((5, 5), (5, 3), (5, 6), (1, 9)), ((8, 12), (4, 9), (6, 5), (9, 2))) == ((13, 17), (9, 12), (11, 11), (10, 11))", "assert add_nested_tuples(((2, 7), (1, 2), (8, 6), (7, 11)), ((2, 5), (8, 14), (7, 3), (6, 2))) == ((4, 12), (9, 16), (15, 9), (13, 13))", "assert add_nested_tuples(((2, 2), (9, 3), (5, 14), (7, 9)), ((2, 12), (5, 5), (6, 1), (11, 6))) == ((4, 14), (14, 8), (11, 15), (18, 15))", "assert add_nested_tuples(((1, 6), (7, 2), (8, 15), (1, 15)), ((6, 6), (8, 12), (4, 2), (6, 6))) == ((7, 12), (15, 14), (12, 17), (7, 21))", "assert add_nested_tuples(((3, 3), (3, 10), (7, 6), (2, 11)), ((2, 5), (3, 12), (6, 5), (11, 8))) == ((5, 8), (6, 22), (13, 11), (13, 19))", "assert add_nested_tuples(((6, 2), (5, 5), (4, 7), (3, 13)), ((11, 8), (3, 8), (1, 7), (4, 5))) == ((17, 10), (8, 13), (5, 14), (7, 18))", "assert add_nested_tuples(((6, 4), (8, 5), (7, 7), (6, 10)), ((7, 13), (8, 7), (1, 4), (13, 6))) == ((13, 17), (16, 12), (8, 11), (19, 16))", "assert add_nested_tuples(((7, 7), (5, 1), (8, 7), (3, 13)), ((7, 11), (9, 13), (6, 7), (4, 6))) == ((14, 18), (14, 14), (14, 14), (7, 19))", "assert add_nested_tuples(((4, 6), (2, 2), (2, 13), (6, 8)), ((11, 10), (4, 10), (4, 1), (13, 4))) == ((15, 16), (6, 12), (6, 14), (19, 12))", "assert add_nested_tuples(((4, 4), (4, 9), (8, 12), (4, 16)), ((7, 12), (7, 5), (5, 3), (6, 8))) == ((11, 16), (11, 14), (13, 15), (10, 24))", "assert add_nested_tuples(((4, 3), (3, 10), (3, 14), (1, 9)), ((10, 11), (5, 8), (1, 3), (6, 2))) == ((14, 14), (8, 18), (4, 17), (7, 11))", "assert add_nested_tuples(((7, 2), (10, 1), (1, 14), (7, 9)), ((6, 12), (1, 6), (3, 4), (12, 4))) == ((13, 14), (11, 7), (4, 18), (19, 13))", "assert add_nested_tuples(((3, 7), (2, 5), (8, 14), (1, 6)), ((3, 7), (2, 12), (3, 1), (13, 8))) == ((6, 14), (4, 17), (11, 15), (14, 14))", "assert add_nested_tuples(((3, 9), (6, 11), (8, 8), (6, 12)), ((2, 11), (6, 5), (7, 5), (4, 4))) == ((5, 20), (12, 16), (15, 13), (10, 16))", "assert add_nested_tuples(((4, 6), (9, 5), (6, 12), (4, 11)), ((10, 10), (5, 8), (1, 7), (10, 4))) == ((14, 16), (14, 13), (7, 19), (14, 15))", "assert add_nested_tuples(((5, 2), (9, 3), (6, 11), (7, 14)), ((5, 12), (1, 10), (1, 3), (9, 9))) == ((10, 14), (10, 13), (7, 14), (16, 23))", "assert add_nested_tuples(((4, 7), (8, 7), (3, 10), (6, 7)), ((2, 10), (2, 11), (3, 1), (4, 3))) == ((6, 17), (10, 18), (6, 11), (10, 10))", "assert add_nested_tuples(((4, 9), (1, 7), (8, 5), (1, 16)), ((8, 11), (7, 9), (4, 6), (4, 8))) == ((12, 20), (8, 16), (12, 11), (5, 24))", "assert add_nested_tuples(((7, 1), (6, 6), (4, 14), (2, 9)), ((4, 4), (9, 8), (7, 4), (3, 6))) == ((11, 5), (15, 14), (11, 18), (5, 15))", "assert add_nested_tuples(((4, 3), (5, 7), (5, 14), (2, 7)), ((10, 13), (6, 14), (1, 1), (6, 4))) == ((14, 16), (11, 21), (6, 15), (8, 11))", "assert add_nested_tuples(((3, 2), (10, 2), (4, 8), (1, 7)), ((4, 6), (2, 14), (6, 1), (10, 7))) == ((7, 8), (12, 16), (10, 9), (11, 14))", "assert add_nested_tuples(((3, 3), (3, 6), (1, 15), (1, 7)), ((10, 11), (4, 14), (1, 7), (10, 2))) == ((13, 14), (7, 20), (2, 22), (11, 9))", "assert add_nested_tuples(((7, 6), (6, 2), (4, 13), (2, 11)), ((12, 8), (6, 5), (2, 4), (8, 9))) == ((19, 14), (12, 7), (6, 17), (10, 20))", "assert add_nested_tuples(((3, 8), (7, 8), (5, 7), (4, 8)), ((8, 3), (4, 7), (6, 6), (13, 3))) == ((11, 11), (11, 15), (11, 13), (17, 11))", "assert add_nested_tuples(((4, 7), (8, 9), (1, 9), (3, 10)), ((4, 11), (6, 12), (4, 5), (12, 3))) == ((8, 18), (14, 21), (5, 14), (15, 13))", "assert add_nested_tuples(((5, 6), (2, 9), (5, 13), (2, 10)), ((12, 4), (5, 7), (1, 6), (5, 8))) == ((17, 10), (7, 16), (6, 19), (7, 18))", "assert add_nested_tuples(((1, 4), (4, 1), (6, 11), (1, 14)), ((9, 4), (6, 12), (2, 2), (8, 1))) == ((10, 8), (10, 13), (8, 13), (9, 15))", "assert add_nested_tuples(((4, 7), (4, 5), (7, 12), (5, 16)), ((11, 8), (6, 8), (5, 5), (6, 4))) == ((15, 15), (10, 13), (12, 17), (11, 20))", "assert add_nested_tuples(((3, 3), (3, 6), (2, 13), (1, 10)), ((5, 11), (4, 11), (5, 6), (5, 9))) == ((8, 14), (7, 17), (7, 19), (6, 19))", "assert add_nested_tuples(((1, 4), (9, 5), (1, 11), (3, 12)), ((11, 5), (1, 14), (7, 5), (11, 7))) == ((12, 9), (10, 19), (8, 16), (14, 19))", "assert add_nested_tuples(((5, 2), (2, 6), (8, 6), (5, 10)), ((8, 5), (5, 6), (3, 4), (12, 4))) == ((13, 7), (7, 12), (11, 10), (17, 14))", "assert add_nested_tuples(((4, 3), (1, 2), (7, 15), (4, 15)), ((2, 7), (7, 11), (6, 5), (10, 3))) == ((6, 10), (8, 13), (13, 20), (14, 18))", "assert add_nested_tuples(((7, 9), (7, 10), (5, 14), (2, 14)), ((11, 7), (3, 13), (1, 2), (5, 2))) == ((18, 16), (10, 23), (6, 16), (7, 16))", "assert add_nested_tuples(((6, 6), (3, 2), (8, 13), (3, 6)), ((8, 10), (9, 5), (4, 7), (7, 4))) == ((14, 16), (12, 7), (12, 20), (10, 10))", "assert add_nested_tuples(((1, 7), (7, 12), (6, 11), (8, 16)), ((6, 10), (8, 9), (6, 7), (5, 8))) == ((7, 17), (15, 21), (12, 18), (13, 24))", "assert add_nested_tuples(((4, 1), (8, 3), (2, 13), (3, 13)), ((6, 11), (8, 16), (3, 4), (7, 3))) == ((10, 12), (16, 19), (5, 17), (10, 16))", "assert add_nested_tuples(((8, 2), (1, 2), (5, 13), (8, 14)), ((9, 4), (5, 14), (8, 4), (13, 9))) == ((17, 6), (6, 16), (13, 17), (21, 23))", "assert add_nested_tuples(((8, 9), (6, 9), (5, 13), (5, 10)), ((7, 9), (1, 8), (6, 7), (6, 2))) == ((15, 18), (7, 17), (11, 20), (11, 12))", "assert add_nested_tuples(((4, 1), (10, 11), (6, 11), (7, 13)), ((5, 5), (7, 9), (8, 5), (7, 6))) == ((9, 6), (17, 20), (14, 16), (14, 19))", "assert add_nested_tuples(((1, 6), (6, 11), (3, 12), (1, 16)), ((11, 12), (2, 15), (2, 4), (7, 4))) == ((12, 18), (8, 26), (5, 16), (8, 20))", "assert add_nested_tuples(((6, 5), (3, 4), (2, 9), (2, 7)), ((5, 13), (5, 13), (1, 1), (12, 5))) == ((11, 18), (8, 17), (3, 10), (14, 12))", "assert add_nested_tuples(((5, 9), (4, 9), (1, 11), (5, 11)), ((7, 7), (6, 10), (8, 7), (9, 5))) == ((12, 16), (10, 19), (9, 18), (14, 16))", "assert add_nested_tuples(((6, 1), (6, 6), (3, 8), (4, 14)), ((7, 5), (10, 14), (8, 4), (7, 7))) == ((13, 6), (16, 20), (11, 12), (11, 21))", "assert add_nested_tuples(((4, 3), (9, 11), (7, 8), (7, 7)), ((7, 13), (9, 15), (7, 6), (11, 2))) == ((11, 16), (18, 26), (14, 14), (18, 9))", "assert add_nested_tuples(((3, 5), (8, 6), (8, 14), (1, 10)), ((3, 12), (9, 8), (7, 7), (12, 6))) == ((6, 17), (17, 14), (15, 21), (13, 16))", "assert add_nested_tuples(((5, 9), (5, 2), (9, 13), (2, 9)), ((6, 8), (2, 7), (8, 7), (14, 9))) == ((11, 17), (7, 9), (17, 20), (16, 18))", "assert add_nested_tuples(((3, 10), (1, 2), (2, 10), (8, 8)), ((5, 8), (3, 11), (1, 7), (8, 6))) == ((8, 18), (4, 13), (3, 17), (16, 14))", "assert add_nested_tuples(((5, 9), (4, 2), (2, 16), (1, 16)), ((6, 9), (7, 7), (6, 7), (9, 5))) == ((11, 18), (11, 9), (8, 23), (10, 21))", "assert add_nested_tuples(((7, 1), (9, 10), (4, 12), (2, 14)), ((10, 12), (4, 16), (7, 8), (6, 2))) == ((17, 13), (13, 26), (11, 20), (8, 16))", "assert add_nested_tuples(((1, 4), (2, 4), (2, 16), (1, 17)), ((11, 10), (7, 6), (5, 8), (5, 7))) == ((12, 14), (9, 10), (7, 24), (6, 24))", "assert add_nested_tuples(((2, 10), (9, 11), (9, 6), (5, 17)), ((12, 7), (8, 14), (5, 5), (5, 4))) == ((14, 17), (17, 25), (14, 11), (10, 21))", "assert add_nested_tuples(((2, 4), (6, 9), (4, 14), (2, 9)), ((13, 11), (1, 10), (6, 3), (7, 2))) == ((15, 15), (7, 19), (10, 17), (9, 11))", "assert add_nested_tuples(((1, 3), (5, 12), (3, 11), (5, 16)), ((6, 11), (7, 10), (7, 7), (6, 1))) == ((7, 14), (12, 22), (10, 18), (11, 17))", "assert add_nested_tuples(((8, 5), (5, 5), (1, 16), (4, 10)), ((6, 4), (2, 7), (5, 1), (7, 5))) == ((14, 9), (7, 12), (6, 17), (11, 15))", "assert add_nested_tuples(((5, 9), (1, 6), (7, 7), (1, 11)), ((13, 6), (5, 9), (4, 8), (10, 9))) == ((18, 15), (6, 15), (11, 15), (11, 20))", "assert add_nested_tuples(((4, 5), (3, 12), (2, 12), (5, 8)), ((11, 10), (3, 7), (6, 7), (5, 5))) == ((15, 15), (6, 19), (8, 19), (10, 13))", "assert add_nested_tuples(((8, 8), (8, 2), (7, 15), (2, 17)), ((7, 8), (8, 15), (6, 6), (10, 6))) == ((15, 16), (16, 17), (13, 21), (12, 23))", "assert add_nested_tuples(((5, 8), (2, 2), (8, 7), (8, 17)), ((5, 6), (7, 15), (1, 2), (8, 3))) == ((10, 14), (9, 17), (9, 9), (16, 20))", "assert add_nested_tuples(((2, 1), (9, 5), (9, 11), (4, 15)), ((6, 12), (2, 11), (2, 5), (14, 3))) == ((8, 13), (11, 16), (11, 16), (18, 18))", "assert add_nested_tuples(((7, 7), (5, 6), (7, 8), (1, 14)), ((4, 13), (2, 7), (7, 4), (14, 6))) == ((11, 20), (7, 13), (14, 12), (15, 20))", "assert add_nested_tuples(((3, 2), (8, 3), (6, 11), (4, 10)), ((8, 9), (1, 8), (5, 1), (9, 2))) == ((11, 11), (9, 11), (11, 12), (13, 12))", "assert add_nested_tuples(((8, 3), (6, 9), (4, 13), (7, 17)), ((5, 12), (8, 7), (5, 1), (10, 9))) == ((13, 15), (14, 16), (9, 14), (17, 26))", "assert add_nested_tuples(((4, 3), (6, 7), (3, 15), (3, 9)), ((11, 10), (1, 12), (2, 2), (8, 5))) == ((15, 13), (7, 19), (5, 17), (11, 14))", "assert add_nested_tuples(((8, 3), (8, 9), (8, 10), (4, 14)), ((8, 9), (4, 7), (5, 3), (6, 10))) == ((16, 12), (12, 16), (13, 13), (10, 24))", "assert add_nested_tuples(((5, 3), (7, 9), (1, 15), (5, 10)), ((5, 13), (10, 12), (8, 7), (8, 4))) == ((10, 16), (17, 21), (9, 22), (13, 14))", "assert add_nested_tuples(((1, 2), (6, 3), (6, 6), (5, 9)), ((3, 13), (8, 15), (5, 5), (8, 2))) == ((4, 15), (14, 18), (11, 11), (13, 11))", "assert add_nested_tuples(((2, 3), (8, 7), (7, 13), (5, 8)), ((12, 6), (1, 8), (1, 5), (9, 7))) == ((14, 9), (9, 15), (8, 18), (14, 15))"], "entry_point": "add_nested_tuples", "repair_prompt": ["Write a function add_nested_tuples to perform index wise addition of tuple elements in the given two nested tuples.\nadd_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n"], "completions": ["from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple, tuple2: tuple) -> tuple:\n    '''\n    Perform index-wise addition of elements in two nested tuples.\n\n    Parameters:\n    tuple1 (tuple): The first nested tuple.\n    tuple2 (tuple): The second nested tuple.\n\n    Returns:\n    tuple: A new nested tuple with added elements.\n    '''\n    # Determine the maximum length of the tuples to handle different lengths\n    max_length = max(len(tuple1), len(tuple2))\n    \n    # Initialize the result list to store the added elements\n    result = []\n    \n    # Iterate over the range of the maximum length\n    for i in range(max_length):\n        # Get the element from tuple1 if it exists, otherwise use 0\n        elem1 = tuple1[i] if i < len(tuple1) else 0\n        \n        # Get the element from tuple2 if it exists, otherwise use 0\n        elem2 = tuple2[i] if i < len(tuple2) else 0\n        \n        # Add the elements and append to the result list\n        result.append(elem1 + elem2)\n    \n    # Convert the result list back to a tuple\n    return tuple(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    tuple1 = (1, 2, 3)\n    tuple2 = (4, 5)\n    result = add_nested_tuples(tuple1, tuple2)\n    print(result)  # Output: (5, 7, 3)\n", "from typing import List\n## main.py\n\ndef add_nested_tuples(\n    tuple1: tuple[tuple[int, ...], ...], \n    tuple2: tuple[tuple[int, ...], ...]\n) -> tuple[tuple[int, ...], ...]:\n    \"\"\"\n    Adds two nested tuples index-wise.\n\n    Parameters:\n    tuple1 (tuple of tuples of int): The first nested tuple.\n    tuple2 (tuple of tuples of int): The second nested tuple.\n\n    Returns:\n    tuple of tuples of int: A new nested tuple with index-wise addition of elements.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the pairs of tuples from both inputs\n    for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2):\n        # Add corresponding elements from the sub-tuples\n        added_sub_tuple = tuple(a + b for a, b in zip(sub_tuple1, sub_tuple2))\n        # Append the result to the result list\n        result.append(added_sub_tuple)\n\n    # Convert the result list back to a tuple of tuples\n    return tuple(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    tuple1 = ((1, 3), (4, 5))\n    tuple2 = ((6, 7), (3, 9))\n    result = add_nested_tuples(tuple1, tuple2)\n    print(result)  # Output: ((7, 10), (7, 14))\n", "from typing import List\n## main.py\nfrom typing import Tuple\n\ndef add_nested_tuples(tuple1: Tuple[Tuple[int, ...], ...], tuple2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"\n    Adds elements of two nested tuples index-wise.\n\n    Parameters:\n    tuple1 (Tuple[Tuple[int, ...], ...]): The first nested tuple.\n    tuple2 (Tuple[Tuple[int, ...], ...]): The second nested tuple.\n\n    Returns:\n    Tuple[Tuple[int, ...], ...]: A new nested tuple with added elements.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n    \"\"\"\n    # Validate input tuples\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Use zip to pair elements and perform index-wise addition\n    result = tuple(\n        tuple(a + b for a, b in zip(sub_tuple1, sub_tuple2))\n        for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2)\n    )\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    tuple1 = ((1, 2, 3), (4, 5, 6))\n    tuple2 = ((7, 8, 9), (10, 11, 12))\n    try:\n        result = add_nested_tuples(tuple1, tuple2)\n        print(\"Result:\", result)\n    except ValueError as e:\n        print(\"Error:\", e)\n", "from typing import List\n## main.py\n\nfrom typing import Tuple\n\ndef add_nested_tuples(tuple1: Tuple[Tuple[int, ...], ...], tuple2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    '''\n    Adds elements of two nested tuples index-wise.\n    \n    Parameters:\n    tuple1 (Tuple[Tuple[int, ...], ...]): The first nested tuple.\n    tuple2 (Tuple[Tuple[int, ...], ...]): The second nested tuple.\n    \n    Returns:\n    Tuple[Tuple[int, ...], ...]: A new nested tuple with added elements.\n    '''\n    # Determine the maximum length of the outer tuples\n    max_outer_length = max(len(tuple1), len(tuple2))\n    \n    # Initialize the result tuple\n    result = []\n    \n    for i in range(max_outer_length):\n        # Get the inner tuples, defaulting to an empty tuple if index is out of range\n        inner_tuple1 = tuple1[i] if i < len(tuple1) else ()\n        inner_tuple2 = tuple2[i] if i < len(tuple2) else ()\n        \n        # Determine the maximum length of the inner tuples\n        max_inner_length = max(len(inner_tuple1), len(inner_tuple2))\n        \n        # Initialize the result inner tuple\n        result_inner = []\n        \n        for j in range(max_inner_length):\n            # Get the elements, defaulting to zero if index is out of range\n            elem1 = inner_tuple1[j] if j < len(inner_tuple1) else 0\n            elem2 = inner_tuple2[j] if j < len(inner_tuple2) else 0\n            \n            # Add the elements and append to the result inner tuple\n            result_inner.append(elem1 + elem2)\n        \n        # Convert the result inner list to a tuple and append to the result tuple\n        result.append(tuple(result_inner))\n    \n    # Convert the result list to a tuple and return\n    return tuple(result)\n", "from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple, tuple2: tuple) -> tuple:\n    \"\"\"\n    Adds two nested tuples index-wise.\n\n    Parameters:\n    tuple1 (tuple): The first nested tuple.\n    tuple2 (tuple): The second nested tuple.\n\n    Returns:\n    tuple: A new nested tuple with elements added index-wise.\n\n    Raises:\n    ValueError: If the input tuples are of different lengths.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    def add_elements(element1, element2):\n        \"\"\"Recursively adds elements of the tuples.\"\"\"\n        if isinstance(element1, tuple) and isinstance(element2, tuple):\n            if len(element1) != len(element2):\n                raise ValueError(\"Nested tuples must be of the same length.\")\n            return tuple(add_elements(e1, e2) for e1, e2 in zip(element1, element2))\n        else:\n            return element1 + element2\n\n    return tuple(add_elements(e1, e2) for e1, e2 in zip(tuple1, tuple2))\n", "from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple, tuple2: tuple) -> tuple:\n    \"\"\"\n    Perform index-wise addition of elements in two nested tuples.\n\n    Parameters:\n    tuple1 (tuple): First nested tuple.\n    tuple2 (tuple): Second nested tuple.\n\n    Returns:\n    tuple: A new nested tuple with added elements.\n\n    Raises:\n    ValueError: If the input tuples are of different lengths.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    # Perform index-wise addition using list comprehension\n    result = tuple(\n        (a + b for a, b in zip(sub_tuple1, sub_tuple2))\n        for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2)\n    )\n\n    return result\n\n# Example usage:\n# result = add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n# print(result)  # Output: ((7, 10), (7, 14), (3, 10), (8, 13))\n", "from typing import List\n## main.py\n\nfrom typing import Tuple\n\ndef add_nested_tuples(tuple1: Tuple[Tuple[int, ...], ...], tuple2: Tuple[Tuple[int, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\"\n    Perform index-wise addition of elements in two nested tuples.\n\n    Parameters:\n    tuple1 (Tuple[Tuple[int, ...], ...]): The first nested tuple.\n    tuple2 (Tuple[Tuple[int, ...], ...]): The second nested tuple.\n\n    Returns:\n    Tuple[Tuple[int, ...], ...]: A new nested tuple with added elements.\n    \n    Raises:\n    ValueError: If the input tuples are of different lengths.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same number of elements.\")\n\n    result = tuple(\n        tuple(a + b for a, b in zip(inner1, inner2))\n        for inner1, inner2 in zip(tuple1, tuple2)\n    )\n    \n    return result\n\n# Example usage:\n# tuple1 = ((1, 2, 3), (4, 5, 6))\n# tuple2 = ((7, 8, 9), (10, 11, 12))\n# result = add_nested_tuples(tuple1, tuple2)\n# print(result)  # Output: ((8, 10, 12), (14, 16, 18))\n", "from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple[tuple[int, ...], ...], tuple2: tuple[tuple[int, ...], ...]) -> tuple[tuple[int, ...], ...]:\n    \"\"\"\n    Perform index-wise addition of elements in two nested tuples.\n\n    Parameters:\n    tuple1 (tuple of tuples of ints): The first nested tuple.\n    tuple2 (tuple of tuples of ints): The second nested tuple.\n\n    Returns:\n    tuple of tuples of ints: A new nested tuple with added elements.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both nested tuples must have the same length.\")\n\n    # Perform index-wise addition using list comprehension\n    result = tuple(\n        tuple(a + b for a, b in zip(inner_tuple1, inner_tuple2))\n        for inner_tuple1, inner_tuple2 in zip(tuple1, tuple2)\n    )\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    tuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\n    tuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))\n    result = add_nested_tuples(tuple1, tuple2)\n    print(result)  # Output: ((7, 10), (7, 14), (3, 10), (8, 13))\n", "from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple[tuple[int, ...], ...], tuple2: tuple[tuple[int, ...], ...]) -> tuple[tuple[int, ...], ...]:\n    \"\"\"\n    Adds two nested tuples index-wise.\n\n    Parameters:\n    tuple1 (tuple of tuples of ints): The first nested tuple.\n    tuple2 (tuple of tuples of ints): The second nested tuple.\n\n    Returns:\n    tuple of tuples of ints: A new nested tuple with elements added index-wise.\n    \n    Raises:\n    ValueError: If the input tuples are not of the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n    \n    result = tuple(\n        tuple(a + b for a, b in zip(inner1, inner2))\n        for inner1, inner2 in zip(tuple1, tuple2)\n    )\n    \n    return result\n\n# Example usage:\n# result = add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n# print(result)  # Output: ((7, 10), (7, 14), (3, 10), (8, 13))\n", "from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple[tuple[int, ...], ...], tuple2: tuple[tuple[int, ...], ...]) -> tuple[tuple[int, ...], ...]:\n    \"\"\"\n    Adds two nested tuples index-wise.\n\n    Parameters:\n    tuple1 (tuple of tuples of ints): The first nested tuple.\n    tuple2 (tuple of tuples of ints): The second nested tuple.\n\n    Returns:\n    tuple of tuples of ints: A new nested tuple with elements added index-wise.\n\n    Raises:\n    ValueError: If the input tuples are of different lengths.\n    \"\"\"\n    # Check if the lengths of the outer tuples are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The input tuples must have the same number of elements.\")\n\n    # Check if the lengths of the inner tuples are equal\n    for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2):\n        if len(sub_tuple1) != len(sub_tuple2):\n            raise ValueError(\"All inner tuples must have the same number of elements.\")\n\n    # Perform index-wise addition using tuple comprehensions\n    result = tuple(\n        tuple(a + b for a, b in zip(sub_tuple1, sub_tuple2))\n        for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2)\n    )\n\n    return result\n"], "plans": ["requirement analysis:\nThe function should efficiently perform index-wise addition on nested tuples, ensuring compatibility with varying tuple sizes and optimizing for performance. It should be easy to use and maintain.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Ensure compatibility with varying tuple sizes\n- Optimize performance for large datasets\n- Enhance code readability and maintainability\n- Provide comprehensive documentation\nWe will implement a function that performs index-wise addition on nested tuples using Python's built-in capabilities. The function will iterate over the tuples and add corresponding elements, ensuring compatibility with varying tuple sizes by handling cases where tuples have different lengths. We will use list comprehension for efficient processing and ensure the function is optimized for performance by minimizing unnecessary operations.\n", "requirement analysis:\nThe function should efficiently handle index-wise addition of elements in nested tuples, ensuring compatibility with large datasets and maintaining code readability.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize performance for large datasets\n- Ensure code readability and maintainability\n- Provide clear documentation\n- Test function with various tuple sizes\nWe will implement a function `add_nested_tuples` that takes two nested tuples as input and returns a new nested tuple with index-wise addition of the elements. We will use Python's built-in capabilities for tuple manipulation, ensuring the function is efficient and readable. The function will handle tuples of the same length, and we will assume that the input tuples are well-formed and of equal length for simplicity. We will also provide clear documentation and examples to enhance usability.\n", "requirement analysis:\nThe function should efficiently add elements of nested tuples index-wise, ensuring compatibility with various tuple structures and sizes. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize function for large datasets\n- Provide comprehensive documentation and examples\n- Ensure compatibility with different tuple structures\n- Test function with edge cases and varied inputs\nWe will implement a function that performs index-wise addition of elements in nested tuples using Python's built-in capabilities. The function will iterate over the tuples and add corresponding elements, ensuring compatibility with tuples of the same length. We will use the zip function to pair elements from the nested tuples efficiently.\n", "requirement analysis:\nThe function should efficiently add elements of two nested tuples index-wise, ensuring compatibility with various tuple structures and providing clear documentation for ease of use.\nrequirement pool:\n- Efficiently handle large nested tuples\n- Provide clear documentation and examples\n- Ensure compatibility with existing systems\n- Handle edge cases gracefully\n- Maintain simplicity in function design\nWe will implement a function that iterates over the nested tuples and performs index-wise addition of corresponding elements. The function will handle tuples of equal length efficiently and will include checks for edge cases such as tuples of different lengths. We will use Python's built-in capabilities for tuple manipulation, ensuring simplicity and compatibility with existing systems.\n", "requirement analysis:\nThe function should efficiently add elements of two nested tuples index-wise, ensuring the result is a new tuple with the same structure. It should handle varying sizes of tuples and maintain performance.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize for large tuple datasets\n- Ensure code readability and maintainability\n- Include error handling for mismatched tuple sizes\n- Provide documentation and examples\nWe will implement a function `add_nested_tuples` that takes two nested tuples as input and returns a new tuple with elements added index-wise. We will use Python's built-in capabilities to handle tuple operations efficiently. The function will include error handling for mismatched tuple sizes by raising a ValueError. This approach ensures simplicity and performance, aligning with the product goals.\n", "requirement analysis:\nThe function should efficiently handle index-wise addition of elements in nested tuples, ensuring compatibility with large datasets and maintaining code readability.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize performance for large datasets\n- Ensure code readability and maintainability\n- Provide comprehensive documentation\n- Test for edge cases and error handling\nWe will implement a function that performs index-wise addition of elements in nested tuples using Python's built-in capabilities. The function will iterate over the tuples and add corresponding elements, ensuring efficient handling of large datasets. We will use list comprehension for concise and readable code.\n", "requirement analysis:\nThe function should efficiently handle index-wise addition of elements in nested tuples, ensuring accuracy and performance. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize performance for large datasets\n- Ensure code readability and maintainability\n- Provide clear documentation and examples\n- Test function with various tuple sizes\nWe will implement a function that performs index-wise addition of elements in nested tuples using Python's built-in capabilities. The function will iterate over the tuples and add corresponding elements, ensuring efficient handling of large datasets. We will use list comprehension for concise and readable code.\n", "requirement analysis:\nThe function should efficiently handle index-wise addition of elements in nested tuples, ensuring accuracy and performance. It should be easy to understand and maintain.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize for large datasets\n- Ensure code readability and maintainability\n- Provide clear documentation\n- Test for edge cases\nWe will implement a function that performs index-wise addition of elements in nested tuples using Python's built-in capabilities. The function will iterate over the tuples and add corresponding elements, ensuring it handles tuples of the same length efficiently. We will use list comprehension for concise and readable code.\n", "requirement analysis:\nThe function should efficiently add elements of two nested tuples index-wise, ensuring that the operation is performed correctly for each pair of tuples. It should handle various sizes of nested tuples and maintain performance.\nrequirement pool:\n- Implement index-wise addition for nested tuples.\n- Optimize performance for large nested tuples.\n- Ensure code readability and maintainability.\n- Provide comprehensive documentation for the function.\n- Include error handling for invalid inputs.\nWe will implement a function `add_nested_tuples` that takes two nested tuples as input and returns a new nested tuple with elements added index-wise. We will use Python's built-in capabilities to handle tuple operations efficiently. The function will iterate over the tuples and use tuple comprehension for concise and readable code. We will ensure that the function handles tuples of the same length, as the requirement does not specify behavior for tuples of different lengths.\n", "requirement analysis:\nThe function should efficiently add elements of two nested tuples index-wise, ensuring performance and simplicity. It should handle various tuple sizes and provide clear documentation for ease of use.\nrequirement pool:\n- Implement index-wise addition for nested tuples\n- Optimize for large tuple inputs\n- Ensure code readability and maintainability\n- Provide comprehensive documentation\n- Test function with edge cases\nWe will implement a function that performs index-wise addition of elements in two nested tuples. The function will iterate over the tuples and use a simple loop to add corresponding elements. We will ensure the function is optimized for performance by using tuple comprehensions and built-in functions. The function will also handle tuples of different lengths by raising an error or returning a specific message. We will use Python's built-in capabilities without any additional libraries to maintain simplicity and performance.\n"], "test": ["def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 7), (9, 3), (2, 6), (2, 6)), ((7, 4), (8, 14), (6, 6), (3, 7))) == ((9, 11), (17, 17), (8, 12), (5, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 8), (4, 8), (4, 9), (3, 13)), ((7, 12), (3, 11), (1, 4), (10, 1))) == ((8, 20), (7, 19), (5, 13), (13, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 4), (6, 5), (1, 8), (1, 12)), ((9, 7), (5, 13), (4, 6), (10, 1))) == ((15, 11), (11, 18), (5, 14), (11, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 4), (6, 6), (1, 5), (5, 15)), ((10, 5), (6, 9), (6, 3), (9, 2))) == ((13, 9), (12, 15), (7, 8), (14, 17))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 5), (2, 1), (3, 10), (3, 12)), ((11, 6), (7, 12), (1, 1), (4, 6))) == ((15, 11), (9, 13), (4, 11), (7, 18))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 1), (2, 7), (2, 4), (5, 7)), ((11, 11), (5, 12), (2, 3), (12, 3))) == ((12, 12), (7, 19), (4, 7), (17, 10))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 8), (2, 8), (6, 8), (2, 9)), ((5, 9), (3, 11), (3, 3), (8, 2))) == ((8, 17), (5, 19), (9, 11), (10, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 4), (2, 2), (3, 10), (2, 9)), ((7, 6), (8, 14), (6, 4), (10, 4))) == ((13, 10), (10, 16), (9, 14), (12, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 3), (3, 1), (5, 6), (2, 12)), ((8, 9), (4, 14), (3, 6), (11, 7))) == ((11, 12), (7, 15), (8, 12), (13, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 6), (3, 9), (6, 7), (3, 8)), ((6, 12), (2, 5), (2, 3), (9, 7))) == ((11, 18), (5, 14), (8, 10), (12, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 4), (4, 9), (3, 10), (5, 8)), ((6, 12), (2, 13), (5, 1), (2, 1))) == ((9, 16), (6, 22), (8, 11), (7, 9))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 7), (4, 2), (6, 13), (4, 11)), ((11, 3), (2, 8), (1, 4), (8, 1))) == ((17, 10), (6, 10), (7, 17), (12, 12))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 3), (8, 7), (3, 9), (6, 15)), ((6, 6), (3, 9), (6, 2), (3, 1))) == ((12, 9), (11, 16), (9, 11), (9, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 4), (2, 6), (3, 10), (6, 9)), ((2, 11), (6, 8), (3, 4), (8, 1))) == ((4, 15), (8, 14), (6, 14), (14, 10))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 4), (9, 4), (4, 7), (2, 11)), ((5, 2), (2, 5), (6, 5), (7, 2))) == ((6, 6), (11, 9), (10, 12), (9, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 5), (2, 8), (3, 10), (1, 11)), ((7, 2), (4, 12), (4, 3), (6, 6))) == ((10, 7), (6, 20), (7, 13), (7, 17))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 3), (2, 2), (5, 5), (5, 11)), ((4, 3), (3, 14), (4, 2), (2, 2))) == ((9, 6), (5, 16), (9, 7), (7, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 1), (2, 9), (3, 11), (3, 15)), ((2, 12), (7, 9), (4, 4), (11, 5))) == ((7, 13), (9, 18), (7, 15), (14, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 5), (3, 9), (6, 13), (1, 14)), ((10, 2), (1, 11), (1, 4), (12, 5))) == ((14, 7), (4, 20), (7, 17), (13, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 8), (6, 9), (5, 12), (6, 5)), ((9, 5), (2, 11), (5, 4), (9, 3))) == ((12, 13), (8, 20), (10, 16), (15, 8))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 8), (6, 2), (3, 9), (3, 10)), ((11, 3), (1, 7), (5, 5), (12, 6))) == ((14, 11), (7, 9), (8, 14), (15, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 6), (5, 6), (1, 11), (4, 11)), ((6, 3), (1, 12), (2, 3), (6, 5))) == ((8, 9), (6, 18), (3, 14), (10, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 2), (9, 1), (2, 4), (4, 9)), ((3, 8), (4, 9), (6, 1), (7, 2))) == ((7, 10), (13, 10), (8, 5), (11, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 3), (2, 2), (6, 14), (4, 11)), ((7, 4), (5, 9), (1, 6), (12, 2))) == ((8, 7), (7, 11), (7, 20), (16, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 5), (5, 5), (5, 10), (1, 13)), ((3, 7), (2, 14), (1, 1), (9, 6))) == ((7, 12), (7, 19), (6, 11), (10, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 3), (4, 2), (7, 6), (1, 7)), ((9, 5), (6, 7), (5, 1), (10, 4))) == ((14, 8), (10, 9), (12, 7), (11, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 3), (6, 10), (1, 10), (5, 9)), ((7, 4), (2, 11), (1, 5), (11, 4))) == ((12, 7), (8, 21), (2, 15), (16, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 6), (7, 7), (2, 5), (4, 7)), ((7, 6), (8, 5), (5, 1), (5, 2))) == ((9, 12), (15, 12), (7, 6), (9, 9))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 8), (4, 10), (3, 5), (6, 14)), ((7, 7), (6, 5), (2, 5), (11, 5))) == ((10, 15), (10, 15), (5, 10), (17, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 3), (6, 4), (2, 8), (3, 13)), ((11, 9), (2, 13), (2, 2), (10, 3))) == ((14, 12), (8, 17), (4, 10), (13, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 2), (1, 10), (3, 8), (2, 13)), ((4, 5), (2, 12), (1, 3), (3, 7))) == ((9, 7), (3, 22), (4, 11), (5, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 6), (7, 9), (2, 4), (6, 12)), ((7, 11), (7, 8), (3, 1), (4, 7))) == ((11, 17), (14, 17), (5, 5), (10, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 5), (5, 3), (5, 6), (1, 9)), ((8, 12), (4, 9), (6, 5), (9, 2))) == ((13, 17), (9, 12), (11, 11), (10, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 7), (1, 2), (8, 6), (7, 11)), ((2, 5), (8, 14), (7, 3), (6, 2))) == ((4, 12), (9, 16), (15, 9), (13, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 2), (9, 3), (5, 14), (7, 9)), ((2, 12), (5, 5), (6, 1), (11, 6))) == ((4, 14), (14, 8), (11, 15), (18, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 6), (7, 2), (8, 15), (1, 15)), ((6, 6), (8, 12), (4, 2), (6, 6))) == ((7, 12), (15, 14), (12, 17), (7, 21))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 3), (3, 10), (7, 6), (2, 11)), ((2, 5), (3, 12), (6, 5), (11, 8))) == ((5, 8), (6, 22), (13, 11), (13, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 2), (5, 5), (4, 7), (3, 13)), ((11, 8), (3, 8), (1, 7), (4, 5))) == ((17, 10), (8, 13), (5, 14), (7, 18))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 4), (8, 5), (7, 7), (6, 10)), ((7, 13), (8, 7), (1, 4), (13, 6))) == ((13, 17), (16, 12), (8, 11), (19, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 7), (5, 1), (8, 7), (3, 13)), ((7, 11), (9, 13), (6, 7), (4, 6))) == ((14, 18), (14, 14), (14, 14), (7, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 6), (2, 2), (2, 13), (6, 8)), ((11, 10), (4, 10), (4, 1), (13, 4))) == ((15, 16), (6, 12), (6, 14), (19, 12))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 4), (4, 9), (8, 12), (4, 16)), ((7, 12), (7, 5), (5, 3), (6, 8))) == ((11, 16), (11, 14), (13, 15), (10, 24))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 3), (3, 10), (3, 14), (1, 9)), ((10, 11), (5, 8), (1, 3), (6, 2))) == ((14, 14), (8, 18), (4, 17), (7, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 2), (10, 1), (1, 14), (7, 9)), ((6, 12), (1, 6), (3, 4), (12, 4))) == ((13, 14), (11, 7), (4, 18), (19, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 7), (2, 5), (8, 14), (1, 6)), ((3, 7), (2, 12), (3, 1), (13, 8))) == ((6, 14), (4, 17), (11, 15), (14, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 9), (6, 11), (8, 8), (6, 12)), ((2, 11), (6, 5), (7, 5), (4, 4))) == ((5, 20), (12, 16), (15, 13), (10, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 6), (9, 5), (6, 12), (4, 11)), ((10, 10), (5, 8), (1, 7), (10, 4))) == ((14, 16), (14, 13), (7, 19), (14, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 2), (9, 3), (6, 11), (7, 14)), ((5, 12), (1, 10), (1, 3), (9, 9))) == ((10, 14), (10, 13), (7, 14), (16, 23))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 7), (8, 7), (3, 10), (6, 7)), ((2, 10), (2, 11), (3, 1), (4, 3))) == ((6, 17), (10, 18), (6, 11), (10, 10))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 9), (1, 7), (8, 5), (1, 16)), ((8, 11), (7, 9), (4, 6), (4, 8))) == ((12, 20), (8, 16), (12, 11), (5, 24))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 1), (6, 6), (4, 14), (2, 9)), ((4, 4), (9, 8), (7, 4), (3, 6))) == ((11, 5), (15, 14), (11, 18), (5, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 3), (5, 7), (5, 14), (2, 7)), ((10, 13), (6, 14), (1, 1), (6, 4))) == ((14, 16), (11, 21), (6, 15), (8, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 2), (10, 2), (4, 8), (1, 7)), ((4, 6), (2, 14), (6, 1), (10, 7))) == ((7, 8), (12, 16), (10, 9), (11, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 3), (3, 6), (1, 15), (1, 7)), ((10, 11), (4, 14), (1, 7), (10, 2))) == ((13, 14), (7, 20), (2, 22), (11, 9))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 6), (6, 2), (4, 13), (2, 11)), ((12, 8), (6, 5), (2, 4), (8, 9))) == ((19, 14), (12, 7), (6, 17), (10, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 8), (7, 8), (5, 7), (4, 8)), ((8, 3), (4, 7), (6, 6), (13, 3))) == ((11, 11), (11, 15), (11, 13), (17, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 7), (8, 9), (1, 9), (3, 10)), ((4, 11), (6, 12), (4, 5), (12, 3))) == ((8, 18), (14, 21), (5, 14), (15, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 6), (2, 9), (5, 13), (2, 10)), ((12, 4), (5, 7), (1, 6), (5, 8))) == ((17, 10), (7, 16), (6, 19), (7, 18))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 4), (4, 1), (6, 11), (1, 14)), ((9, 4), (6, 12), (2, 2), (8, 1))) == ((10, 8), (10, 13), (8, 13), (9, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 7), (4, 5), (7, 12), (5, 16)), ((11, 8), (6, 8), (5, 5), (6, 4))) == ((15, 15), (10, 13), (12, 17), (11, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 3), (3, 6), (2, 13), (1, 10)), ((5, 11), (4, 11), (5, 6), (5, 9))) == ((8, 14), (7, 17), (7, 19), (6, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 4), (9, 5), (1, 11), (3, 12)), ((11, 5), (1, 14), (7, 5), (11, 7))) == ((12, 9), (10, 19), (8, 16), (14, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 2), (2, 6), (8, 6), (5, 10)), ((8, 5), (5, 6), (3, 4), (12, 4))) == ((13, 7), (7, 12), (11, 10), (17, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 3), (1, 2), (7, 15), (4, 15)), ((2, 7), (7, 11), (6, 5), (10, 3))) == ((6, 10), (8, 13), (13, 20), (14, 18))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 9), (7, 10), (5, 14), (2, 14)), ((11, 7), (3, 13), (1, 2), (5, 2))) == ((18, 16), (10, 23), (6, 16), (7, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 6), (3, 2), (8, 13), (3, 6)), ((8, 10), (9, 5), (4, 7), (7, 4))) == ((14, 16), (12, 7), (12, 20), (10, 10))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 7), (7, 12), (6, 11), (8, 16)), ((6, 10), (8, 9), (6, 7), (5, 8))) == ((7, 17), (15, 21), (12, 18), (13, 24))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 1), (8, 3), (2, 13), (3, 13)), ((6, 11), (8, 16), (3, 4), (7, 3))) == ((10, 12), (16, 19), (5, 17), (10, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((8, 2), (1, 2), (5, 13), (8, 14)), ((9, 4), (5, 14), (8, 4), (13, 9))) == ((17, 6), (6, 16), (13, 17), (21, 23))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((8, 9), (6, 9), (5, 13), (5, 10)), ((7, 9), (1, 8), (6, 7), (6, 2))) == ((15, 18), (7, 17), (11, 20), (11, 12))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 1), (10, 11), (6, 11), (7, 13)), ((5, 5), (7, 9), (8, 5), (7, 6))) == ((9, 6), (17, 20), (14, 16), (14, 19))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 6), (6, 11), (3, 12), (1, 16)), ((11, 12), (2, 15), (2, 4), (7, 4))) == ((12, 18), (8, 26), (5, 16), (8, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 5), (3, 4), (2, 9), (2, 7)), ((5, 13), (5, 13), (1, 1), (12, 5))) == ((11, 18), (8, 17), (3, 10), (14, 12))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 9), (4, 9), (1, 11), (5, 11)), ((7, 7), (6, 10), (8, 7), (9, 5))) == ((12, 16), (10, 19), (9, 18), (14, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((6, 1), (6, 6), (3, 8), (4, 14)), ((7, 5), (10, 14), (8, 4), (7, 7))) == ((13, 6), (16, 20), (11, 12), (11, 21))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 3), (9, 11), (7, 8), (7, 7)), ((7, 13), (9, 15), (7, 6), (11, 2))) == ((11, 16), (18, 26), (14, 14), (18, 9))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 5), (8, 6), (8, 14), (1, 10)), ((3, 12), (9, 8), (7, 7), (12, 6))) == ((6, 17), (17, 14), (15, 21), (13, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 9), (5, 2), (9, 13), (2, 9)), ((6, 8), (2, 7), (8, 7), (14, 9))) == ((11, 17), (7, 9), (17, 20), (16, 18))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 10), (1, 2), (2, 10), (8, 8)), ((5, 8), (3, 11), (1, 7), (8, 6))) == ((8, 18), (4, 13), (3, 17), (16, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 9), (4, 2), (2, 16), (1, 16)), ((6, 9), (7, 7), (6, 7), (9, 5))) == ((11, 18), (11, 9), (8, 23), (10, 21))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 1), (9, 10), (4, 12), (2, 14)), ((10, 12), (4, 16), (7, 8), (6, 2))) == ((17, 13), (13, 26), (11, 20), (8, 16))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 4), (2, 4), (2, 16), (1, 17)), ((11, 10), (7, 6), (5, 8), (5, 7))) == ((12, 14), (9, 10), (7, 24), (6, 24))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 10), (9, 11), (9, 6), (5, 17)), ((12, 7), (8, 14), (5, 5), (5, 4))) == ((14, 17), (17, 25), (14, 11), (10, 21))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 4), (6, 9), (4, 14), (2, 9)), ((13, 11), (1, 10), (6, 3), (7, 2))) == ((15, 15), (7, 19), (10, 17), (9, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 3), (5, 12), (3, 11), (5, 16)), ((6, 11), (7, 10), (7, 7), (6, 1))) == ((7, 14), (12, 22), (10, 18), (11, 17))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((8, 5), (5, 5), (1, 16), (4, 10)), ((6, 4), (2, 7), (5, 1), (7, 5))) == ((14, 9), (7, 12), (6, 17), (11, 15))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 9), (1, 6), (7, 7), (1, 11)), ((13, 6), (5, 9), (4, 8), (10, 9))) == ((18, 15), (6, 15), (11, 15), (11, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 5), (3, 12), (2, 12), (5, 8)), ((11, 10), (3, 7), (6, 7), (5, 5))) == ((15, 15), (6, 19), (8, 19), (10, 13))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((8, 8), (8, 2), (7, 15), (2, 17)), ((7, 8), (8, 15), (6, 6), (10, 6))) == ((15, 16), (16, 17), (13, 21), (12, 23))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 8), (2, 2), (8, 7), (8, 17)), ((5, 6), (7, 15), (1, 2), (8, 3))) == ((10, 14), (9, 17), (9, 9), (16, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 1), (9, 5), (9, 11), (4, 15)), ((6, 12), (2, 11), (2, 5), (14, 3))) == ((8, 13), (11, 16), (11, 16), (18, 18))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((7, 7), (5, 6), (7, 8), (1, 14)), ((4, 13), (2, 7), (7, 4), (14, 6))) == ((11, 20), (7, 13), (14, 12), (15, 20))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((3, 2), (8, 3), (6, 11), (4, 10)), ((8, 9), (1, 8), (5, 1), (9, 2))) == ((11, 11), (9, 11), (11, 12), (13, 12))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((8, 3), (6, 9), (4, 13), (7, 17)), ((5, 12), (8, 7), (5, 1), (10, 9))) == ((13, 15), (14, 16), (9, 14), (17, 26))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((4, 3), (6, 7), (3, 15), (3, 9)), ((11, 10), (1, 12), (2, 2), (8, 5))) == ((15, 13), (7, 19), (5, 17), (11, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((8, 3), (8, 9), (8, 10), (4, 14)), ((8, 9), (4, 7), (5, 3), (6, 10))) == ((16, 12), (12, 16), (13, 13), (10, 24))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((5, 3), (7, 9), (1, 15), (5, 10)), ((5, 13), (10, 12), (8, 7), (8, 4))) == ((10, 16), (17, 21), (9, 22), (13, 14))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((1, 2), (6, 3), (6, 6), (5, 9)), ((3, 13), (8, 15), (5, 5), (8, 2))) == ((4, 15), (14, 18), (11, 11), (13, 11))", "def check(add_nested_tuples):\n\tassert add_nested_tuples(((2, 3), (8, 7), (7, 13), (5, 8)), ((12, 6), (1, 8), (1, 5), (9, 7))) == ((14, 9), (9, 15), (8, 18), (14, 15))"], "scores": [0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [0, 102, 102, 102, 102, 0, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef add_nested_tuples(tuple1: tuple[tuple[int, ...], ...], tuple2: tuple[tuple[int, ...], ...]) -> tuple[tuple[int, ...], ...]:\n    \"\"\"\n    Adds two nested tuples index-wise.\n\n    Parameters:\n    tuple1 (tuple of tuples of ints): The first nested tuple.\n    tuple2 (tuple of tuples of ints): The second nested tuple.\n\n    Returns:\n    tuple of tuples of ints: A new nested tuple with elements added index-wise.\n\n    Raises:\n    ValueError: If the input tuples are of different lengths.\n    \"\"\"\n    # Check if the lengths of the outer tuples are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The input tuples must have the same number of elements.\")\n\n    # Check if the lengths of the inner tuples are equal\n    for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2):\n        if len(sub_tuple1) != len(sub_tuple2):\n            raise ValueError(\"All inner tuples must have the same number of elements.\")\n\n    # Perform index-wise addition using tuple comprehensions\n    result = tuple(\n        tuple(a + b for a, b in zip(sub_tuple1, sub_tuple2))\n        for sub_tuple1, sub_tuple2 in zip(tuple1, tuple2)\n    )\n\n    return result\n", "passed": true, "pass": true, "pass_num": 8, "round": 489, "mutate_method": "condense_two2one", "parent_index": 141}
