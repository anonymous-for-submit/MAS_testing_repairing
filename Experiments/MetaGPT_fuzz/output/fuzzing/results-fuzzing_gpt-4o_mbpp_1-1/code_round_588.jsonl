{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values. Ensure the function handles edge cases where strings may be shorter than the specified size. Consider implementing additional checks to handle scenarios where the input list is empty or contains non-string elements.", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "assert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "assert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "assert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "assert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "assert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "assert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "assert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "assert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "assert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "assert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "assert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "assert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "assert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "assert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "assert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "assert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "assert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "assert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "assert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "assert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "assert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "assert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "assert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "assert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "assert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "assert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "assert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "assert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "assert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "assert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "assert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "assert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "assert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "assert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "assert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "assert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "assert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "assert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "assert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "assert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "assert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "assert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "assert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "assert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "assert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "assert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "assert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "assert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "assert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "assert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "assert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "assert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "assert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "assert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "assert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "assert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "assert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "assert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "assert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "assert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "assert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "assert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "assert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "assert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "assert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "assert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "assert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "assert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "assert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "assert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "assert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "assert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "assert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "assert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "assert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "assert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "assert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "assert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "assert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "assert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "assert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "assert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "assert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "assert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "assert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "assert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "assert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "assert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "assert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "assert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "assert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "assert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "assert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "assert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "assert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "assert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "assert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "assert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "assert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "entry_point": "extract_string", "repair_prompt": ["Write a function extract_string to extract specified size of strings from a given list of string values. Ensure the function handles edge cases where strings may be shorter than the specified size. Consider implementing additional checks to handle scenarios where the input list is empty or contains non-string elements.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n"], "completions": ["from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified size from a given list.\n\n    This function filters out strings from the provided list that match the specified length.\n    It ignores non-string elements and returns an empty list if the input list is empty.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings that are of the specified size.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the string to the result list\n            result.append(element)\n\n    # Return the list of strings that match the specified size\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified length from a list.\n\n    This function iterates through the provided list, checking each element\n    to ensure it is a string and has a length equal to or greater than the\n    specified size. Non-string elements are ignored.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The minimum length of strings to be extracted.\n\n    Returns:\n        list: A list of strings that are equal to or longer than the specified size.\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(size, int):\n        raise TypeError(\"The second argument must be an integer.\")\n\n    # Use list comprehension to filter strings based on the specified size\n    result = [s for s in strings if isinstance(s, str) and len(s) >= size]\n\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises'], 8)\n# print(result)  # Output: ['exercises']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified length from a list.\n\n    This function filters out strings from the provided list that match the specified length.\n    It ignores non-string elements and handles edge cases such as empty lists.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The length of strings to be extracted.\n\n    Returns:\n        list: A list of strings that are of the specified length.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the element to the result list\n            result.append(element)\n\n    # Return the list of strings that match the specified length\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings from the input list that have a length greater than or equal to the specified size.\n\n    Parameters:\n    strings (list): A list of elements to be filtered.\n    size (int): The minimum length of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are of the specified size or longer.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length is greater than or equal to the specified size\n        if isinstance(element, str) and len(element) >= size:\n            # Add the element to the result list\n            result.append(element)\n\n    # Return the list of strings that meet the criteria\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    minimum_size = 8\n    filtered_strings = extract_string(example_strings, minimum_size)\n    print(filtered_strings)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings from the input list that are at least the specified size.\n\n    This function iterates over the input list, checks if each element is a string,\n    and then checks if its length is greater than or equal to the specified size.\n    Non-string elements are ignored.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The minimum length of strings to be extracted.\n\n    Returns:\n        list: A list of strings that are at least the specified size.\n    \"\"\"\n    # Initialize an empty list to store strings that meet the criteria\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length is greater than or equal to the specified size\n        if isinstance(element, str) and len(element) >= size:\n            # Add the element to the result list\n            result.append(element)\n\n    # Return the list of strings that meet the criteria\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): The list of strings to be filtered.\n    size (int): The length of strings to be extracted.\n\n    Returns:\n    list: A list containing strings of the specified length.\n    \"\"\"\n    # Using list comprehension to filter strings based on the specified length\n    return [s for s in strings if isinstance(s, str) and len(s) == size]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    test_size = 8\n    result = extract_string(test_strings, test_size)\n    print(result)  # Expected output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings from the list that are at least the specified size.\n\n    Parameters:\n    strings (list): A list of elements to be filtered.\n    size (int): The minimum length of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are at least the specified size.\n    \"\"\"\n    # Initialize an empty list to store the valid strings\n    valid_strings = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length is greater than or equal to the specified size\n        if isinstance(element, str) and len(element) >= size:\n            # Append the valid string to the result list\n            valid_strings.append(element)\n\n    # Return the list of valid strings\n    return valid_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['Python', 'list', 'exercises', 'practice', 'solution']\n    min_size = 8\n    result = extract_string(example_list, min_size)\n    print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): A list containing string elements.\n    size (int): The length of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are of the specified length.\n    \"\"\"\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the string to the filtered list\n            filtered_strings.append(element)\n\n    # Return the list of filtered strings\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    example_size = 8\n    result = extract_string(example_strings, example_size)\n    print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings of a specified size from a given list.\n\n    Parameters:\n    strings (list): A list containing string elements.\n    size (int): The size of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are of the specified size.\n    \"\"\"\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the element to the filtered list\n            filtered_strings.append(element)\n\n    # Return the list of filtered strings\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n    print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified size from a list.\n\n    This function filters out strings from the provided list that match the specified length.\n    It ignores non-string elements and returns an empty list if the input list is empty.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings that are of the specified size.\n    \"\"\"\n    # Validate input list and filter strings based on the specified size\n    return [s for s in strings if isinstance(s, str) and len(s) == size]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['Python', 'list', 'exercises', 123, None, 'code']\n    specified_size = 8\n    result = extract_string(example_list, specified_size)\n    print(result)  # Output: ['exercises']\n"], "plans": ["requirement analysis:\nThe function should efficiently filter strings based on length while handling edge cases such as empty lists and non-string elements. It should be optimized for performance without sacrificing readability.\nrequirement pool:\n- Handle empty list inputs gracefully\n- Ignore non-string elements in the list\n- Optimize performance for large lists\n- Ensure code readability and simplicity\n- Provide clear error messages for invalid inputs\nWe will implement a function named extract_string that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list for empty inputs. We will use Python's built-in capabilities to ensure simplicity and readability, while optimizing performance for large lists.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, handling edge cases such as shorter strings, empty lists, and non-string elements. It should provide clear error messages for invalid inputs and maintain performance with large datasets.\nrequirement pool:\n- Implement string extraction based on specified length\n- Handle edge cases for shorter strings and empty lists\n- Ignore non-string elements in the list\n- Provide error messages for invalid inputs\n- Optimize performance for large datasets\nWe will implement a function named extract_string that takes a list of strings and an integer specifying the desired length. The function will iterate through the list, checking each element to ensure it is a string and has a length equal to or greater than the specified size. Non-string elements will be ignored, and the function will handle empty lists gracefully. We will use Python's built-in capabilities for list comprehension and type checking to ensure efficient performance and robust error handling.\n", "requirement analysis:\nThe function should efficiently filter strings based on length, handle empty lists, and ignore non-string elements. It should be robust against edge cases and maintain performance with large datasets.\nrequirement pool:\n- Implement string length filtering\n- Handle empty list inputs\n- Ignore non-string elements\n- Optimize for large lists\n- Ensure code readability\nWe will implement a function named extract_string that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by ignoring them. We will use Python's built-in capabilities to ensure simplicity and performance, avoiding unnecessary complexity.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, handling edge cases such as empty lists and non-string elements. It should be optimized for performance and maintain simplicity in its implementation.\nrequirement pool:\n- Handle empty list inputs gracefully\n- Ignore non-string elements in the list\n- Optimize for large list performance\n- Ensure code readability and simplicity\n- Provide clear error messages for invalid inputs\nWe will implement a function named `extract_string` that iterates over the input list, checks if each element is a string, and then checks if its length is greater than or equal to the specified size. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if the input list is empty. We will use Python's built-in capabilities to ensure simplicity and performance.\n", "requirement analysis:\nThe function needs to efficiently extract strings of a specified length from a list, while handling edge cases such as empty lists and non-string elements. It should also ensure that strings shorter than the specified length are not included in the output.\nrequirement pool:\n- Implement the main extraction logic\n- Handle empty list scenarios\n- Ignore non-string elements\n- Optimize for performance\n- Ensure code readability\nWe will implement a function named `extract_string` that iterates over the input list, checks if each element is a string, and then checks if its length is greater than or equal to the specified size. We will use Python's built-in capabilities to handle these checks efficiently. The function will return a list of strings that meet the criteria. We will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if no strings meet the criteria.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, handling edge cases such as empty lists and non-string elements. It should prioritize error handling and performance optimization.\nrequirement pool:\n- Implement the main extraction logic\n- Handle edge cases for empty lists\n- Ignore non-string elements in the list\n- Optimize performance for large lists\n- Ensure code readability and simplicity\nWe will implement a function named extract_string that iterates over the input list, checks each element to ensure it is a string, and then checks its length against the specified size. Strings that meet the criteria will be added to the result list. We will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if the input list is empty. The function will be optimized for performance by using list comprehensions.\n", "requirement analysis:\nThe function needs to efficiently extract strings of a specified length from a list, while handling edge cases such as empty lists and non-string elements. It should be optimized for performance and maintain simplicity in its implementation.\nrequirement pool:\n- Handle empty list inputs gracefully\n- Ignore non-string elements in the list\n- Optimize for performance with large lists\n- Ensure code readability and simplicity\n- Provide detailed error messages for invalid inputs\nWe will implement a function named `extract_string` that iterates over the input list, checks if each element is a string, and then checks if its length is greater than or equal to the specified size. The function will handle edge cases such as empty lists and non-string elements by simply ignoring them. We will use Python's built-in capabilities to ensure simplicity and performance.\n", "requirement analysis:\nThe function should efficiently filter strings based on length while handling edge cases such as empty lists and non-string elements. It should return a list of strings that meet the specified length criteria.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure error handling for non-string elements\n- Optimize performance for large input lists\n- Handle empty input list gracefully\n- Provide clear documentation and examples\nWe will implement a function named extract_string that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if no strings match the criteria. We will use Python's built-in capabilities to ensure simplicity and readability.\n", "requirement analysis:\nThe function should efficiently filter strings based on length, handle empty lists, and ignore non-string elements. It should be optimized for performance and maintain readability.\nrequirement pool:\n- Implement string length filtering logic\n- Handle empty list input gracefully\n- Ignore non-string elements in the list\n- Optimize for performance with large lists\n- Maintain simplicity and readability\nWe will implement a function named `extract_string` that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if the input list is empty. We will use Python's built-in capabilities to ensure simplicity and readability, while optimizing performance for large lists.\n", "requirement analysis:\nThe function should efficiently filter strings based on length, handle edge cases such as empty lists and non-string elements, and provide meaningful error messages for invalid inputs.\nrequirement pool:\n- Implement string extraction based on specified size\n- Handle empty list inputs gracefully\n- Ignore non-string elements in the list\n- Provide error messages for invalid inputs\n- Optimize performance for large lists\nWe will implement a function named extract_string that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list for empty inputs. We will use Python's built-in capabilities to achieve this efficiently without any third-party libraries.\n"], "test": ["def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "def check(extract_string):\n\tassert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "def check(extract_string):\n\tassert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "def check(extract_string):\n\tassert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "def check(extract_string):\n\tassert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "def check(extract_string):\n\tassert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "def check(extract_string):\n\tassert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "def check(extract_string):\n\tassert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "def check(extract_string):\n\tassert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "def check(extract_string):\n\tassert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "def check(extract_string):\n\tassert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "def check(extract_string):\n\tassert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "def check(extract_string):\n\tassert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "def check(extract_string):\n\tassert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "def check(extract_string):\n\tassert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "def check(extract_string):\n\tassert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "def check(extract_string):\n\tassert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "def check(extract_string):\n\tassert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "def check(extract_string):\n\tassert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "def check(extract_string):\n\tassert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "def check(extract_string):\n\tassert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "def check(extract_string):\n\tassert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "def check(extract_string):\n\tassert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "def check(extract_string):\n\tassert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "def check(extract_string):\n\tassert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "def check(extract_string):\n\tassert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "def check(extract_string):\n\tassert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "def check(extract_string):\n\tassert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "def check(extract_string):\n\tassert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "def check(extract_string):\n\tassert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "def check(extract_string):\n\tassert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "def check(extract_string):\n\tassert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "def check(extract_string):\n\tassert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "def check(extract_string):\n\tassert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "def check(extract_string):\n\tassert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "def check(extract_string):\n\tassert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "def check(extract_string):\n\tassert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "def check(extract_string):\n\tassert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "def check(extract_string):\n\tassert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "def check(extract_string):\n\tassert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "def check(extract_string):\n\tassert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "def check(extract_string):\n\tassert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "def check(extract_string):\n\tassert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "def check(extract_string):\n\tassert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "def check(extract_string):\n\tassert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "def check(extract_string):\n\tassert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "def check(extract_string):\n\tassert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "def check(extract_string):\n\tassert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "def check(extract_string):\n\tassert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "def check(extract_string):\n\tassert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "def check(extract_string):\n\tassert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "def check(extract_string):\n\tassert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "def check(extract_string):\n\tassert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "def check(extract_string):\n\tassert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "def check(extract_string):\n\tassert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "def check(extract_string):\n\tassert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "def check(extract_string):\n\tassert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "def check(extract_string):\n\tassert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "def check(extract_string):\n\tassert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "def check(extract_string):\n\tassert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "def check(extract_string):\n\tassert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "def check(extract_string):\n\tassert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "def check(extract_string):\n\tassert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "def check(extract_string):\n\tassert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "def check(extract_string):\n\tassert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "def check(extract_string):\n\tassert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "def check(extract_string):\n\tassert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "def check(extract_string):\n\tassert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "def check(extract_string):\n\tassert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "def check(extract_string):\n\tassert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "def check(extract_string):\n\tassert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "def check(extract_string):\n\tassert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "def check(extract_string):\n\tassert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "def check(extract_string):\n\tassert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "def check(extract_string):\n\tassert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "def check(extract_string):\n\tassert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "def check(extract_string):\n\tassert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "def check(extract_string):\n\tassert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "def check(extract_string):\n\tassert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "def check(extract_string):\n\tassert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "def check(extract_string):\n\tassert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "def check(extract_string):\n\tassert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "def check(extract_string):\n\tassert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "def check(extract_string):\n\tassert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "def check(extract_string):\n\tassert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "def check(extract_string):\n\tassert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "def check(extract_string):\n\tassert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "def check(extract_string):\n\tassert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "def check(extract_string):\n\tassert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "def check(extract_string):\n\tassert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "scores": [1.0, 0.1863, 1.0, 0.1863, 0.1863, 1.0, 0.1863, 1.0, 1.0, 1.0], "pass_results": [true, false, true, false, false, true, false, true, true, true], "pass_test_cases_num": [102, 19, 102, 19, 19, 102, 19, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified size from a list.\n\n    This function filters out strings from the provided list that match the specified length.\n    It ignores non-string elements and returns an empty list if the input list is empty.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings that are of the specified size.\n    \"\"\"\n    # Validate input list and filter strings based on the specified size\n    return [s for s in strings if isinstance(s, str) and len(s) == size]\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['Python', 'list', 'exercises', 123, None, 'code']\n    specified_size = 8\n    result = extract_string(example_list, specified_size)\n    print(result)  # Output: ['exercises']\n", "passed": true, "pass": true, "pass_num": 6, "round": 588, "mutate_method": "add_1_sentence_at_end", "parent_index": 482}
