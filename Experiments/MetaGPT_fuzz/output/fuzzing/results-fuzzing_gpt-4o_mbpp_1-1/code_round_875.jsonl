{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 567, "prompt": "Write a function to check whether a specified list is sorted or not. Ensure that your solution handles both ascending and descending order checks.", "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    return result", "test_imports": [], "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "assert issort_list([3, 4, 5, 6, 5, 5, 17, 13, 13, 20]) == False", "assert issort_list([3, 5, 1, 11, 12, 13, 12, 16, 18, 16]) == False", "assert issort_list([1, 2, 9, 2, 7, 9, 12, 10, 21, 21]) == False", "assert issort_list([1, 7, 1, 10, 8, 11, 10, 11, 15, 18]) == False", "assert issort_list([4, 4, 4, 6, 7, 8, 9, 17, 15, 22]) == False", "assert issort_list([2, 6, 2, 1, 6, 11, 14, 15, 19, 16]) == False", "assert issort_list([5, 5, 9, 3, 7, 9, 7, 19, 18, 16]) == False", "assert issort_list([5, 3, 2, 8, 11, 13, 8, 13, 18, 16]) == False", "assert issort_list([1, 6, 9, 7, 4, 10, 8, 15, 16, 17]) == False", "assert issort_list([4, 6, 8, 6, 12, 7, 14, 10, 20, 16]) == False", "assert issort_list([4, 1, 2, 5, 7, 10, 9, 17, 14, 13]) == False", "assert issort_list([5, 6, 7, 3, 13, 12, 11, 10, 12, 22]) == False", "assert issort_list([5, 3, 4, 7, 4, 10, 11, 11, 15, 13]) == False", "assert issort_list([6, 3, 7, 9, 10, 11, 16, 13, 13, 17]) == False", "assert issort_list([5, 3, 4, 10, 10, 12, 14, 17, 17, 18]) == False", "assert issort_list([3, 3, 2, 3, 5, 13, 8, 13, 17, 15]) == False", "assert issort_list([2, 3, 5, 1, 6, 6, 12, 16, 11, 15]) == False", "assert issort_list([2, 2, 8, 4, 7, 12, 15, 9, 19, 19]) == False", "assert issort_list([1, 4, 6, 10, 12, 10, 8, 12, 19, 19]) == False", "assert issort_list([2, 7, 8, 11, 3, 9, 10, 15, 15, 21]) == False", "assert issort_list([5, 1, 9, 1, 10, 14, 8, 15, 19, 12]) == False", "assert issort_list([5, 4, 6, 8, 11, 14, 16, 11, 19, 15]) == False", "assert issort_list([3, 3, 5, 3, 5, 14, 13, 12, 13, 19]) == False", "assert issort_list([3, 3, 5, 4, 10, 12, 8, 15, 11, 12]) == False", "assert issort_list([4, 1, 9, 8, 13, 13, 10, 15, 17, 22]) == False", "assert issort_list([2, 6, 7, 2, 7, 9, 11, 16, 13, 16]) == False", "assert issort_list([3, 2, 2, 8, 9, 10, 9, 19, 17, 13]) == False", "assert issort_list([4, 3, 8, 6, 11, 7, 8, 10, 11, 16]) == False", "assert issort_list([1, 7, 1, 5, 11, 13, 14, 17, 20, 15]) == False", "assert issort_list([1, 7, 8, 2, 13, 8, 7, 12, 12, 18]) == False", "assert issort_list([5, 2, 5, 2, 11, 13, 11, 18, 17, 15]) == False", "assert issort_list([2, 1, 9, 7, 5, 12, 12, 19, 11, 13]) == False", "assert issort_list([3, 6, 8, 2, 8, 10, 13, 11, 19, 15]) == False", "assert issort_list([1, 2, 2, 10, 10, 14, 13, 18, 20, 13]) == False", "assert issort_list([3, 2, 7, 2, 6, 10, 9, 17, 21, 22]) == False", "assert issort_list([5, 6, 7, 7, 12, 6, 15, 10, 21, 20]) == False", "assert issort_list([3, 3, 3, 2, 11, 15, 14, 16, 23, 22]) == False", "assert issort_list([6, 2, 9, 1, 13, 12, 11, 9, 20, 17]) == False", "assert issort_list([1, 7, 1, 7, 13, 12, 16, 12, 22, 22]) == False", "assert issort_list([1, 4, 2, 7, 5, 8, 12, 11, 24, 21]) == False", "assert issort_list([6, 4, 1, 11, 3, 9, 9, 17, 23, 19]) == False", "assert issort_list([4, 7, 4, 2, 12, 7, 9, 13, 15, 12]) == False", "assert issort_list([6, 1, 1, 7, 3, 12, 12, 10, 18, 19]) == False", "assert issort_list([4, 4, 5, 11, 9, 10, 9, 17, 15, 15]) == False", "assert issort_list([6, 6, 7, 1, 9, 14, 14, 17, 15, 21]) == False", "assert issort_list([4, 5, 6, 3, 6, 7, 14, 12, 17, 15]) == False", "assert issort_list([5, 6, 8, 4, 10, 8, 9, 10, 22, 18]) == False", "assert issort_list([2, 6, 2, 10, 3, 13, 15, 10, 17, 12]) == False", "assert issort_list([2, 1, 2, 1, 10, 14, 10, 12, 19, 17]) == False", "assert issort_list([1, 4, 9, 3, 8, 14, 10, 9, 18, 15]) == False", "assert issort_list([2, 2, 4, 5, 13, 12, 7, 15, 25, 15]) == False", "assert issort_list([1, 2, 7, 9, 3, 15, 13, 11, 17, 18]) == False", "assert issort_list([2, 4, 7, 1, 11, 5, 14, 9, 22, 21]) == False", "assert issort_list([4, 6, 9, 10, 11, 11, 12, 12, 20, 21]) == True", "assert issort_list([1, 4, 6, 11, 12, 7, 11, 15, 15, 21]) == False", "assert issort_list([2, 1, 8, 9, 10, 5, 16, 12, 20, 17]) == False", "assert issort_list([4, 3, 3, 10, 12, 14, 9, 17, 17, 21]) == False", "assert issort_list([2, 6, 1, 10, 3, 11, 16, 18, 20, 21]) == False", "assert issort_list([3, 4, 9, 1, 4, 12, 17, 19, 25, 12]) == False", "assert issort_list([5, 7, 7, 6, 3, 11, 16, 17, 21, 12]) == False", "assert issort_list([2, 4, 9, 4, 4, 11, 7, 19, 24, 15]) == False", "assert issort_list([2, 6, 3, 10, 6, 11, 15, 9, 19, 19]) == False", "assert issort_list([3, 5, 1, 11, 4, 15, 8, 15, 17, 19]) == False", "assert issort_list([1, 7, 4, 7, 13, 5, 13, 11, 23, 19]) == False", "assert issort_list([5, 7, 8, 4, 11, 15, 17, 12, 20, 19]) == False", "assert issort_list([3, 1, 3, 2, 7, 12, 9, 17, 19, 20]) == False", "assert issort_list([3, 4, 2, 7, 11, 15, 20, 16, 16]) == False", "assert issort_list([5, 4, 2, 10, 3, 15, 14, 11, 21]) == False", "assert issort_list([6, 7, 2, 3, 7, 6, 13, 9, 25]) == False", "assert issort_list([5, 1, 3, 4, 11, 9, 12, 13, 23]) == False", "assert issort_list([4, 1, 5, 4, 7, 6, 11, 14, 16]) == False", "assert issort_list([3, 5, 4, 1, 10, 7, 18, 16, 22]) == False", "assert issort_list([3, 7, 9, 9, 4, 14, 19, 13, 19]) == False", "assert issort_list([5, 4, 5, 7, 13, 11, 10, 9, 23]) == False", "assert issort_list([6, 1, 8, 4, 13, 12, 19, 13, 19]) == False", "assert issort_list([6, 3, 9, 9, 9, 12, 15, 13, 23]) == False", "assert issort_list([5, 4, 4, 6, 7, 10, 11, 14, 23]) == False", "assert issort_list([4, 6, 6, 6, 3, 7, 18, 17, 23]) == False", "assert issort_list([6, 7, 1, 2, 9, 8, 20, 16, 16]) == False", "assert issort_list([2, 6, 9, 1, 4, 13, 17, 18, 21]) == False", "assert issort_list([6, 4, 8, 4, 6, 7, 16, 9, 17]) == False", "assert issort_list([1, 6, 2, 5, 8, 5, 13, 17, 25]) == False", "assert issort_list([5, 3, 8, 5, 7, 11, 15, 11, 22]) == False", "assert issort_list([5, 3, 5, 10, 8, 11, 17, 11, 24]) == False", "assert issort_list([2, 5, 4, 7, 3, 7, 15, 19, 25]) == False", "assert issort_list([5, 4, 9, 5, 8, 15, 16, 19, 15]) == False", "assert issort_list([4, 5, 8, 6, 6, 7, 20, 11, 16]) == False", "assert issort_list([6, 6, 9, 1, 12, 5, 11, 18, 19]) == False", "assert issort_list([4, 4, 5, 4, 3, 14, 13, 14, 19]) == False", "assert issort_list([2, 1, 6, 3, 4, 10, 11, 15, 23]) == False", "assert issort_list([4, 4, 7, 4, 12, 14, 10, 12, 20]) == False", "assert issort_list([4, 2, 1, 8, 11, 6, 11, 9, 25]) == False", "assert issort_list([2, 1, 3, 1, 9, 7, 15, 18, 17]) == False", "assert issort_list([4, 6, 9, 4, 4, 14, 11, 19, 19]) == False", "assert issort_list([5, 5, 6, 6, 6, 15, 10, 11, 23]) == False", "assert issort_list([3, 2, 8, 2, 13, 10, 11, 15, 18]) == False", "assert issort_list([4, 3, 6, 10, 4, 7, 12, 17, 21]) == False", "assert issort_list([5, 1, 8, 2, 4, 14, 12, 16, 16]) == False", "assert issort_list([5, 2, 5, 1, 10, 7, 20, 11, 15]) == False"], "entry_point": "issort_list", "repair_prompt": ["Write a function issort_list to check whether a specified list is sorted or not. Ensure that your solution handles both ascending and descending order checks.\nissort_list([1,2,4,6,8,10,12,14,16,17])==True\n"], "completions": ["from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Args:\n        lst: List of elements to check.\n\n    Returns:\n        True if the list is sorted, False otherwise.\n    \"\"\"\n    if not lst:  # Handle empty list\n        return True\n\n    ascending = True\n    descending = True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            ascending = False\n        if lst[i] > lst[i - 1]:\n            descending = False\n\n    return ascending or descending\n\n# Example usage:\n# print(issort_list([1, 2, 3, 4]))  # Should return True\n# print(issort_list([4, 3, 2, 1]))  # Should return True\n# print(issort_list([1, 3, 2, 4]))  # Should return False\n# print(issort_list([]))            # Should return True\n# print(issort_list([1, 1, 1, 1]))  # Should return True\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> tuple[bool, str]:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    tuple[bool, str]: A tuple containing a boolean indicating if the list is sorted and a string message detailing the sorting status.\n    \"\"\"\n    if not lst:\n        return (True, \"The list is empty and considered sorted.\")\n\n    # Check for ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    if is_ascending:\n        return (True, \"The list is sorted in ascending order.\")\n\n    # Check for descending order\n    is_descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    if is_descending:\n        return (True, \"The list is sorted in descending order.\")\n\n    return (False, \"The list is not sorted.\")\n\n# Example usage:\n# result = issort_list([1, 2, 3, 4])\n# print(result)  # Output: (True, \"The list is sorted in ascending order.\")\n", "from typing import List\n## main.py\n\ndef issort_list(input_list: list) -> bool:\n    '''\n    Check if the input list is sorted in ascending or descending order.\n    \n    Parameters:\n    input_list (list): The list to check.\n    \n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not a list or contains mixed data types.\n    '''\n    # Validate input\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if len(input_list) == 0:\n        return True  # An empty list is considered sorted\n\n    # Check for mixed data types\n    first_type = type(input_list[0])\n    for item in input_list:\n        if not isinstance(item, first_type):\n            raise TypeError(\"List contains mixed data types.\")\n\n    # Check if the list is sorted in ascending order\n    is_ascending = True\n    for i in range(len(input_list) - 1):\n        if input_list[i] > input_list[i + 1]:\n            is_ascending = False\n            break\n\n    # Check if the list is sorted in descending order\n    is_descending = True\n    for i in range(len(input_list) - 1):\n        if input_list[i] < input_list[i + 1]:\n            is_descending = False\n            break\n\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    if not lst:  # Check if the list is empty\n        return True  # An empty list is considered sorted\n\n    ascending = True\n    descending = True\n\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            descending = False\n        elif lst[i] > lst[i + 1]:\n            ascending = False\n\n    return ascending or descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> str:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    str: 'ascending' if the list is sorted in ascending order,\n         'descending' if the list is sorted in descending order,\n         'not sorted' if the list is not sorted.\n    \"\"\"\n    if not lst or len(lst) == 1:\n        # An empty list or a list with one element is considered sorted\n        return 'ascending'\n\n    is_ascending = True\n    is_descending = True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            is_ascending = False\n        if lst[i] > lst[i - 1]:\n            is_descending = False\n\n    if is_ascending:\n        return 'ascending'\n    elif is_descending:\n        return 'descending'\n    else:\n        return 'not sorted'\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Check if the list is sorted in ascending or descending order.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted in ascending or descending order, False otherwise.\n    \"\"\"\n    if not lst:  # Handle empty list case\n        return True\n\n    # Check for ascending order\n    is_ascending = True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            is_ascending = False\n            break\n\n    # Check for descending order\n    is_descending = True\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            is_descending = False\n            break\n\n    # Return True if either ascending or descending\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(lst: list) -> bool:\n    \"\"\"\n    Checks if the given list is sorted in ascending or descending order.\n    Returns True if sorted, False otherwise.\n    Handles empty lists and lists with identical elements.\n    Raises ValueError for lists with mixed data types.\n\n    Args:\n        lst (list): The list to check.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n\n    Raises:\n        ValueError: If the list contains mixed data types.\n    \"\"\"\n    if not lst:\n        # An empty list is considered sorted\n        return True\n\n    # Check for mixed data types\n    first_type = type(lst[0])\n    if not all(isinstance(item, first_type) for item in lst):\n        raise ValueError(\"List contains mixed data types.\")\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n    if is_descending:\n        return True\n\n    # If neither ascending nor descending, return False\n    return False\n", "from typing import List\n## main.py\n\ndef issort_list(input_list: list) -> bool:\n    \"\"\"\n    Checks if the given list is sorted in ascending or descending order.\n\n    Parameters:\n    input_list (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted in either ascending or descending order, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-comparable elements.\n    \"\"\"\n    # Validate input\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if len(input_list) < 2:\n        # An empty list or a list with one element is considered sorted\n        return True\n\n    # Check for non-comparable elements\n    try:\n        # Attempt to compare the first two elements to ensure they are comparable\n        _ = input_list[0] < input_list[1]\n    except TypeError:\n        raise TypeError(\"List contains non-comparable elements.\")\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(input_list[i] <= input_list[i + 1] for i in range(len(input_list) - 1))\n    \n    # Check if the list is sorted in descending order\n    is_descending = all(input_list[i] >= input_list[i + 1] for i in range(len(input_list) - 1))\n\n    # Return True if the list is sorted in either order\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(input_list: list) -> bool:\n    \"\"\"\n    Checks if the provided list is sorted in ascending or descending order.\n\n    Parameters:\n    input_list (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Handle edge cases: empty list or list with identical elements\n    if len(input_list) <= 1 or all(x == input_list[0] for x in input_list):\n        return True\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(input_list[i] <= input_list[i + 1] for i in range(len(input_list) - 1))\n    \n    # Check if the list is sorted in descending order\n    is_descending = all(input_list[i] >= input_list[i + 1] for i in range(len(input_list) - 1))\n\n    return is_ascending or is_descending\n", "from typing import List\n## main.py\n\ndef issort_list(input_list: list) -> bool:\n    \"\"\"\n    Checks if the input list is sorted in ascending or descending order.\n\n    Parameters:\n    input_list (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains mixed data types.\n    \"\"\"\n    # Validate input\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if len(input_list) == 0:\n        return True  # An empty list is considered sorted\n\n    # Check for mixed data types\n    first_type = type(input_list[0])\n    if not all(isinstance(x, first_type) for x in input_list):\n        raise TypeError(\"List contains mixed data types.\")\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(input_list[i] <= input_list[i + 1] for i in range(len(input_list) - 1))\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = all(input_list[i] >= input_list[i + 1] for i in range(len(input_list) - 1))\n    if is_descending:\n        return True\n\n    return False\n"], "plans": ["requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be optimized for performance, especially with large datasets.\nrequirement pool:\n- Implement the main function to check sorting order.\n- Optimize the function for performance with large lists.\n- Ensure the function handles both ascending and descending checks.\n- Provide user feedback on the sorting status.\n- Test the function with various edge cases.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will iterate through the list once to determine the order, making it efficient for large lists. We will handle edge cases such as empty lists and lists with identical elements. The function will be simple and intuitive, providing a boolean response indicating if the list is sorted.\n", "requirement analysis:\nThe function should accurately determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets efficiently.\nrequirement pool:\n- Implement function to check ascending order\n- Implement function to check descending order\n- Optimize performance for large lists\n- Provide user feedback on sorting status\n- Handle edge cases like empty lists\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. We will use Python's built-in capabilities to efficiently handle large lists and edge cases like empty lists or lists with identical elements. The function will return a boolean value and provide a message detailing the sorting status.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be compatible with various Python versions and provide meaningful error messages for invalid inputs.\nrequirement pool:\n- The function must check for both ascending and descending order\n- The function should handle edge cases like empty lists\n- The function should provide clear error messages for invalid inputs\n- The function should be efficient for large lists\n- The function should be compatible with different Python versions\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. It will provide clear error messages for invalid inputs, such as non-list inputs or lists with mixed data types. The function will be compatible with different Python versions and will not rely on third-party libraries to ensure simplicity and efficiency.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be simple and not rely on external libraries.\nrequirement pool:\n- The function must check for both ascending and descending order.\n- The function should handle edge cases like empty lists.\n- The function should be efficient with large lists.\n- The function should be compatible with different Python versions.\n- The function should have clear documentation.\nWe will implement a simple function that checks if a list is sorted in either ascending or descending order without relying on external libraries. The function will iterate through the list and compare each element with the next one to determine the order. This approach ensures efficiency and compatibility with different Python versions.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement the main function to check sorting order.\n- Optimize the function for performance with large lists.\n- Handle edge cases like empty lists and single-element lists.\n- Provide user feedback on the sorting status.\n- Ensure compatibility with different data types within lists.\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to efficiently iterate through the list and compare elements. The function will return clear feedback indicating whether the list is sorted in ascending, descending, or not sorted at all.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be optimized for performance, especially with large datasets.\nrequirement pool:\n- Implement the main function to check sorting in both orders.\n- Optimize the function for performance with large lists.\n- Handle edge cases like empty lists and lists with identical elements.\n- Provide user feedback on the sorting status.\n- Ensure the function is easy to use and integrate.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will iterate through the list once to check for ascending order and once for descending order, ensuring optimal performance even for large lists. We will handle edge cases such as empty lists and lists with identical elements by returning True for these cases, as they can be considered sorted. The function will return a boolean indicating if the list is sorted in any order.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It must handle edge cases such as empty lists and lists with identical elements. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement sorting detection for both ascending and descending orders\n- Optimize performance for large lists\n- Provide error messages for invalid inputs\n- Handle edge cases like empty lists\n- Ensure compatibility with different data types\nWe will implement a function `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. We will use Python's built-in capabilities to ensure optimal performance for large lists. The function will also provide clear error messages for invalid inputs, such as lists containing mixed data types.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be compatible with various Python versions and provide clear documentation.\nrequirement pool:\n- The function must check for both ascending and descending order.\n- The function should handle edge cases like empty lists.\n- The function should provide clear error messages for invalid inputs.\n- The function should be optimized for large lists.\n- The function should be compatible with different Python versions.\nWe will implement a function `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. It will also provide clear error messages for invalid inputs. We will use Python's built-in capabilities to ensure compatibility across different Python versions and optimize for large lists by using efficient list traversal techniques.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be compatible with various Python versions and provide meaningful feedback for invalid inputs.\nrequirement pool:\n- The function must check for both ascending and descending order.\n- The function should handle edge cases like empty lists.\n- The function should provide clear error messages for invalid inputs.\n- The function should be optimized for performance with large lists.\n- The function should be compatible with different Python versions.\nWe will implement a function named `issort_list` that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. It will also provide clear error messages for invalid inputs. We will use Python's built-in capabilities to ensure compatibility across different Python versions and optimize for performance with large lists. The function will be designed to handle both numeric and non-numeric lists, as the requirement is not limited to numeric lists only.\n", "requirement analysis:\nThe function should efficiently determine if a list is sorted in either ascending or descending order. It should handle edge cases such as empty lists and lists with identical elements. The solution should be compatible with various Python versions and provide meaningful error messages for invalid inputs.\nrequirement pool:\n- The function must check for both ascending and descending order.\n- The function should handle edge cases like empty lists.\n- The function should provide clear error messages for invalid inputs.\n- The function should be optimized for large lists.\n- The function should be compatible with different Python versions.\nWe will implement a function named issort_list that checks if a list is sorted in either ascending or descending order. The function will handle edge cases such as empty lists and lists with identical elements. It will provide clear error messages for invalid inputs, such as non-list inputs or lists with mixed data types. We will use Python's built-in capabilities to ensure compatibility across different versions and optimize for large lists.\n"], "test": ["def check(issort_list):\n\tassert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "def check(issort_list):\n\tassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "def check(issort_list):\n\tassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False", "def check(issort_list):\n\tassert issort_list([3, 4, 5, 6, 5, 5, 17, 13, 13, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 1, 11, 12, 13, 12, 16, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 9, 2, 7, 9, 12, 10, 21, 21]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 10, 8, 11, 10, 11, 15, 18]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 4, 6, 7, 8, 9, 17, 15, 22]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 2, 1, 6, 11, 14, 15, 19, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 5, 9, 3, 7, 9, 7, 19, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 2, 8, 11, 13, 8, 13, 18, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 6, 9, 7, 4, 10, 8, 15, 16, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 8, 6, 12, 7, 14, 10, 20, 16]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 2, 5, 7, 10, 9, 17, 14, 13]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 7, 3, 13, 12, 11, 10, 12, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 4, 7, 4, 10, 11, 11, 15, 13]) == False", "def check(issort_list):\n\tassert issort_list([6, 3, 7, 9, 10, 11, 16, 13, 13, 17]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 4, 10, 10, 12, 14, 17, 17, 18]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 2, 3, 5, 13, 8, 13, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 3, 5, 1, 6, 6, 12, 16, 11, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 2, 8, 4, 7, 12, 15, 9, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 6, 10, 12, 10, 8, 12, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([2, 7, 8, 11, 3, 9, 10, 15, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 9, 1, 10, 14, 8, 15, 19, 12]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 6, 8, 11, 14, 16, 11, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 5, 3, 5, 14, 13, 12, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 5, 4, 10, 12, 8, 15, 11, 12]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 9, 8, 13, 13, 10, 15, 17, 22]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 7, 2, 7, 9, 11, 16, 13, 16]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 2, 8, 9, 10, 9, 19, 17, 13]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 8, 6, 11, 7, 8, 10, 11, 16]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 5, 11, 13, 14, 17, 20, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 8, 2, 13, 8, 7, 12, 12, 18]) == False", "def check(issort_list):\n\tassert issort_list([5, 2, 5, 2, 11, 13, 11, 18, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 9, 7, 5, 12, 12, 19, 11, 13]) == False", "def check(issort_list):\n\tassert issort_list([3, 6, 8, 2, 8, 10, 13, 11, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 2, 10, 10, 14, 13, 18, 20, 13]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 7, 2, 6, 10, 9, 17, 21, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 7, 7, 12, 6, 15, 10, 21, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 3, 3, 2, 11, 15, 14, 16, 23, 22]) == False", "def check(issort_list):\n\tassert issort_list([6, 2, 9, 1, 13, 12, 11, 9, 20, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 1, 7, 13, 12, 16, 12, 22, 22]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 2, 7, 5, 8, 12, 11, 24, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 4, 1, 11, 3, 9, 9, 17, 23, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 7, 4, 2, 12, 7, 9, 13, 15, 12]) == False", "def check(issort_list):\n\tassert issort_list([6, 1, 1, 7, 3, 12, 12, 10, 18, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 5, 11, 9, 10, 9, 17, 15, 15]) == False", "def check(issort_list):\n\tassert issort_list([6, 6, 7, 1, 9, 14, 14, 17, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([4, 5, 6, 3, 6, 7, 14, 12, 17, 15]) == False", "def check(issort_list):\n\tassert issort_list([5, 6, 8, 4, 10, 8, 9, 10, 22, 18]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 2, 10, 3, 13, 15, 10, 17, 12]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 2, 1, 10, 14, 10, 12, 19, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 4, 9, 3, 8, 14, 10, 9, 18, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 2, 4, 5, 13, 12, 7, 15, 25, 15]) == False", "def check(issort_list):\n\tassert issort_list([1, 2, 7, 9, 3, 15, 13, 11, 17, 18]) == False", "def check(issort_list):\n\tassert issort_list([2, 4, 7, 1, 11, 5, 14, 9, 22, 21]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 9, 10, 11, 11, 12, 12, 20, 21]) == True", "def check(issort_list):\n\tassert issort_list([1, 4, 6, 11, 12, 7, 11, 15, 15, 21]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 8, 9, 10, 5, 16, 12, 20, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 3, 10, 12, 14, 9, 17, 17, 21]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 1, 10, 3, 11, 16, 18, 20, 21]) == False", "def check(issort_list):\n\tassert issort_list([3, 4, 9, 1, 4, 12, 17, 19, 25, 12]) == False", "def check(issort_list):\n\tassert issort_list([5, 7, 7, 6, 3, 11, 16, 17, 21, 12]) == False", "def check(issort_list):\n\tassert issort_list([2, 4, 9, 4, 4, 11, 7, 19, 24, 15]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 3, 10, 6, 11, 15, 9, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 1, 11, 4, 15, 8, 15, 17, 19]) == False", "def check(issort_list):\n\tassert issort_list([1, 7, 4, 7, 13, 5, 13, 11, 23, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 7, 8, 4, 11, 15, 17, 12, 20, 19]) == False", "def check(issort_list):\n\tassert issort_list([3, 1, 3, 2, 7, 12, 9, 17, 19, 20]) == False", "def check(issort_list):\n\tassert issort_list([3, 4, 2, 7, 11, 15, 20, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 2, 10, 3, 15, 14, 11, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 7, 2, 3, 7, 6, 13, 9, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 3, 4, 11, 9, 12, 13, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 1, 5, 4, 7, 6, 11, 14, 16]) == False", "def check(issort_list):\n\tassert issort_list([3, 5, 4, 1, 10, 7, 18, 16, 22]) == False", "def check(issort_list):\n\tassert issort_list([3, 7, 9, 9, 4, 14, 19, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 5, 7, 13, 11, 10, 9, 23]) == False", "def check(issort_list):\n\tassert issort_list([6, 1, 8, 4, 13, 12, 19, 13, 19]) == False", "def check(issort_list):\n\tassert issort_list([6, 3, 9, 9, 9, 12, 15, 13, 23]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 4, 6, 7, 10, 11, 14, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 6, 6, 3, 7, 18, 17, 23]) == False", "def check(issort_list):\n\tassert issort_list([6, 7, 1, 2, 9, 8, 20, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([2, 6, 9, 1, 4, 13, 17, 18, 21]) == False", "def check(issort_list):\n\tassert issort_list([6, 4, 8, 4, 6, 7, 16, 9, 17]) == False", "def check(issort_list):\n\tassert issort_list([1, 6, 2, 5, 8, 5, 13, 17, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 8, 5, 7, 11, 15, 11, 22]) == False", "def check(issort_list):\n\tassert issort_list([5, 3, 5, 10, 8, 11, 17, 11, 24]) == False", "def check(issort_list):\n\tassert issort_list([2, 5, 4, 7, 3, 7, 15, 19, 25]) == False", "def check(issort_list):\n\tassert issort_list([5, 4, 9, 5, 8, 15, 16, 19, 15]) == False", "def check(issort_list):\n\tassert issort_list([4, 5, 8, 6, 6, 7, 20, 11, 16]) == False", "def check(issort_list):\n\tassert issort_list([6, 6, 9, 1, 12, 5, 11, 18, 19]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 5, 4, 3, 14, 13, 14, 19]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 6, 3, 4, 10, 11, 15, 23]) == False", "def check(issort_list):\n\tassert issort_list([4, 4, 7, 4, 12, 14, 10, 12, 20]) == False", "def check(issort_list):\n\tassert issort_list([4, 2, 1, 8, 11, 6, 11, 9, 25]) == False", "def check(issort_list):\n\tassert issort_list([2, 1, 3, 1, 9, 7, 15, 18, 17]) == False", "def check(issort_list):\n\tassert issort_list([4, 6, 9, 4, 4, 14, 11, 19, 19]) == False", "def check(issort_list):\n\tassert issort_list([5, 5, 6, 6, 6, 15, 10, 11, 23]) == False", "def check(issort_list):\n\tassert issort_list([3, 2, 8, 2, 13, 10, 11, 15, 18]) == False", "def check(issort_list):\n\tassert issort_list([4, 3, 6, 10, 4, 7, 12, 17, 21]) == False", "def check(issort_list):\n\tassert issort_list([5, 1, 8, 2, 4, 14, 12, 16, 16]) == False", "def check(issort_list):\n\tassert issort_list([5, 2, 5, 1, 10, 7, 20, 11, 15]) == False"], "scores": [1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, false, true, true, true, true, true], "pass_test_cases_num": [102, 0, 102, 102, 0, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef issort_list(input_list: list) -> bool:\n    \"\"\"\n    Checks if the input list is sorted in ascending or descending order.\n\n    Parameters:\n    input_list (list): The list to check.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n\n    Raises:\n    TypeError: If the input is not a list or contains mixed data types.\n    \"\"\"\n    # Validate input\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    if len(input_list) == 0:\n        return True  # An empty list is considered sorted\n\n    # Check for mixed data types\n    first_type = type(input_list[0])\n    if not all(isinstance(x, first_type) for x in input_list):\n        raise TypeError(\"List contains mixed data types.\")\n\n    # Check if the list is sorted in ascending order\n    is_ascending = all(input_list[i] <= input_list[i + 1] for i in range(len(input_list) - 1))\n    if is_ascending:\n        return True\n\n    # Check if the list is sorted in descending order\n    is_descending = all(input_list[i] >= input_list[i + 1] for i in range(len(input_list) - 1))\n    if is_descending:\n        return True\n\n    return False\n", "passed": true, "pass": true, "pass_num": 8, "round": 875, "mutate_method": "condense_two2one", "parent_index": 408}
