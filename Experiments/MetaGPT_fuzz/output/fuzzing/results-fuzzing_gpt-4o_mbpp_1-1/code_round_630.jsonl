{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 638, "prompt": "Create a function that computes the wind chill index rounded to the nearest whole number, given the wind speed in km/h and a temperature in celsius.", "code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,70)==86", "assert wind_chill(10,100)==116", "assert wind_chill(116, 30) == 33", "assert wind_chill(122, 32) == 36", "assert wind_chill(125, 32) == 36", "assert wind_chill(123, 32) == 36", "assert wind_chill(124, 38) == 45", "assert wind_chill(118, 40) == 48", "assert wind_chill(122, 33) == 37", "assert wind_chill(115, 34) == 39", "assert wind_chill(116, 33) == 37", "assert wind_chill(117, 39) == 46", "assert wind_chill(125, 31) == 34", "assert wind_chill(125, 39) == 46", "assert wind_chill(124, 39) == 46", "assert wind_chill(118, 33) == 37", "assert wind_chill(117, 32) == 36", "assert wind_chill(118, 35) == 40", "assert wind_chill(121, 32) == 36", "assert wind_chill(119, 31) == 34", "assert wind_chill(124, 37) == 43", "assert wind_chill(118, 32) == 36", "assert wind_chill(115, 40) == 48", "assert wind_chill(125, 38) == 45", "assert wind_chill(125, 36) == 42", "assert wind_chill(122, 32) == 36", "assert wind_chill(122, 34) == 39", "assert wind_chill(121, 40) == 48", "assert wind_chill(117, 38) == 45", "assert wind_chill(123, 36) == 42", "assert wind_chill(117, 36) == 42", "assert wind_chill(120, 33) == 37", "assert wind_chill(116, 39) == 46", "assert wind_chill(122, 40) == 48", "assert wind_chill(124, 31) == 34", "assert wind_chill(38, 69) == 85", "assert wind_chill(39, 69) == 85", "assert wind_chill(38, 73) == 90", "assert wind_chill(45, 69) == 85", "assert wind_chill(38, 73) == 90", "assert wind_chill(39, 69) == 85", "assert wind_chill(42, 71) == 88", "assert wind_chill(38, 72) == 89", "assert wind_chill(42, 66) == 81", "assert wind_chill(45, 73) == 91", "assert wind_chill(41, 73) == 90", "assert wind_chill(39, 73) == 90", "assert wind_chill(43, 70) == 87", "assert wind_chill(45, 65) == 80", "assert wind_chill(39, 66) == 81", "assert wind_chill(45, 67) == 83", "assert wind_chill(45, 70) == 87", "assert wind_chill(44, 72) == 89", "assert wind_chill(43, 68) == 84", "assert wind_chill(39, 70) == 86", "assert wind_chill(39, 70) == 86", "assert wind_chill(40, 72) == 89", "assert wind_chill(38, 71) == 87", "assert wind_chill(44, 69) == 85", "assert wind_chill(41, 67) == 82", "assert wind_chill(37, 73) == 90", "assert wind_chill(43, 69) == 85", "assert wind_chill(43, 75) == 93", "assert wind_chill(40, 73) == 90", "assert wind_chill(40, 66) == 81", "assert wind_chill(41, 71) == 88", "assert wind_chill(40, 71) == 88", "assert wind_chill(38, 70) == 86", "assert wind_chill(11, 100) == 117", "assert wind_chill(15, 102) == 121", "assert wind_chill(14, 102) == 121", "assert wind_chill(14, 102) == 121", "assert wind_chill(7, 104) == 119", "assert wind_chill(8, 100) == 115", "assert wind_chill(11, 98) == 114", "assert wind_chill(5, 102) == 114", "assert wind_chill(9, 105) == 121", "assert wind_chill(6, 102) == 115", "assert wind_chill(6, 96) == 108", "assert wind_chill(7, 102) == 116", "assert wind_chill(9, 102) == 118", "assert wind_chill(14, 97) == 115", "assert wind_chill(8, 103) == 118", "assert wind_chill(14, 96) == 114", "assert wind_chill(14, 95) == 112", "assert wind_chill(6, 100) == 113", "assert wind_chill(15, 105) == 125", "assert wind_chill(5, 96) == 107", "assert wind_chill(14, 103) == 122", "assert wind_chill(12, 96) == 113", "assert wind_chill(10, 95) == 110", "assert wind_chill(14, 101) == 120", "assert wind_chill(13, 95) == 112", "assert wind_chill(14, 103) == 122", "assert wind_chill(13, 100) == 118", "assert wind_chill(14, 101) == 120", "assert wind_chill(8, 105) == 121", "assert wind_chill(11, 102) == 119", "assert wind_chill(10, 105) == 122", "assert wind_chill(6, 96) == 108", "assert wind_chill(13, 101) == 119"], "entry_point": "wind_chill", "repair_prompt": ["Create a function wind_chill that computes the wind chill index rounded to the nearest whole number, given the wind speed in km/h and a temperature in celsius.\nwind_chill(120,35)==40\n"], "completions": ["from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given temperature in Celsius and wind speed in km/h.\n    \n    The formula used is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h.\n    \n    Args:\n        temperature: Temperature in Celsius.\n        wind_speed: Wind speed in km/h.\n    \n    Returns:\n        Wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the conditions for using the formula are met\n    if temperature >= 10 or wind_speed <= 4.8:\n        raise ValueError(\"The formula is only applicable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h.\")\n    \n    # Calculate the wind chill using the given formula\n    wind_chill_index = (\n        13.12 \n        + 0.6215 * temperature \n        - 11.37 * (wind_speed ** 0.16) \n        + 0.3965 * temperature * (wind_speed ** 0.16)\n    )\n    \n    # Round the result to the nearest whole number\n    return round(wind_chill_index)\n\n# Example usage:\n# try:\n#     print(wind_chill(5.0, 10.0))  # Should print the wind chill index\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef wind_chill(wind_speed: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind speed in km/h and temperature in Celsius.\n\n    Parameters:\n    wind_speed (float): The wind speed in kilometers per hour.\n    temperature (float): The temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the conditions for applying the wind chill formula are met\n    if wind_speed <= 4.8 or temperature > 10:\n        # If conditions are not met, return the temperature as is\n        return round(temperature)\n\n    # Wind chill formula as per the National Weather Service\n    wind_chill_index = (\n        13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) +\n        0.3965 * temperature * (wind_speed ** 0.16)\n    )\n\n    # Return the wind chill index rounded to the nearest whole number\n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\ndef wind_chill(wind_speed_kmh: float, temperature_celsius: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind speed in km/h and temperature in Celsius.\n\n    The formula used is suitable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h.\n    The wind chill index is rounded to the nearest whole number.\n\n    Parameters:\n    wind_speed_kmh (float): The wind speed in kilometers per hour.\n    temperature_celsius (float): The temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the conditions for calculating wind chill are met\n    if temperature_celsius > 10 or wind_speed_kmh <= 4.8:\n        # If conditions are not met, return the actual temperature as the wind chill index\n        return round(temperature_celsius)\n\n    # Wind chill formula as per the National Weather Service\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature_celsius -\n        11.37 * (wind_speed_kmh ** 0.16) +\n        0.3965 * temperature_celsius * (wind_speed_kmh ** 0.16)\n    )\n\n    # Return the wind chill index rounded to the nearest whole number\n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n    \n    This function uses the formula for wind chill index commonly used in meteorology:\n    Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16,\n    where T is the temperature in Celsius and V is the wind speed in km/h.\n    This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h.\n    \n    Args:\n        temperature (float): Temperature in Celsius.\n        wind_speed (float): Wind speed in km/h.\n    \n    Returns:\n        int: Wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the conditions for applying the formula are met\n    if temperature >= 10 or wind_speed <= 4.8:\n        raise ValueError(\"The wind chill formula is not applicable for temperatures above 10\u00b0C or wind speeds below 4.8 km/h.\")\n    \n    # Implementation of the wind chill formula\n    wind_chill_index = (\n        13.12 \n        + 0.6215 * temperature \n        - 11.37 * wind_speed**0.16 \n        + 0.3965 * temperature * wind_speed**0.16\n    )\n    \n    # Return the wind chill index rounded to the nearest whole number\n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"Calculate the wind chill index given temperature in Celsius and wind speed in km/h.\n\n    Args:\n        temperature (float): The temperature in Celsius.\n        wind_speed (float): The wind speed in km/h.\n\n    Returns:\n        int: The wind chill index rounded to the nearest whole number.\n\n    Raises:\n        ValueError: If the temperature or wind speed is not a valid number.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(temperature, (int, float)):\n        raise ValueError(\"Temperature must be a number.\")\n    if not isinstance(wind_speed, (int, float)):\n        raise ValueError(\"Wind speed must be a number.\")\n    if wind_speed < 0:\n        raise ValueError(\"Wind speed cannot be negative.\")\n\n    # Calculate wind chill using the formula\n    wind_chill_index = (\n        13.12\n        + 0.6215 * temperature\n        - 11.37 * (wind_speed ** 0.16)\n        + 0.3965 * temperature * (wind_speed ** 0.16)\n    )\n\n    # Round result to nearest whole number\n    return round(wind_chill_index)\n\n# Example usage:\n# print(wind_chill(10, 20))  # This will calculate the wind chill for 10\u00b0C and 20 km/h wind speed.\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given temperature in Celsius and wind speed in km/h.\n\n    This function uses the formula:\n    Wind Chill = 13.12 + 0.6215 * T - 11.37 * (V**0.16) + 0.3965 * T * (V**0.16)\n\n    Parameters:\n    temperature (float): The temperature in Celsius.\n    wind_speed (float): The wind speed in km/h.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the conditions for the formula are met\n    if temperature > 10 or wind_speed <= 4.8:\n        raise ValueError(\"The wind chill formula is only applicable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h.\")\n\n    # Calculate the wind chill index using the given formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n\n    # Round the result to the nearest whole number and return\n    return round(wind_chill_index)\n\n# Example usage:\n# try:\n#     print(wind_chill(5.0, 10.0))  # Should return a valid wind chill index\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef wind_chill(wind_speed: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind speed in km/h and temperature in Celsius.\n\n    This function uses the formula:\n    Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16\n    where T is the air temperature in degrees Celsius and V is the wind speed in km/h.\n\n    Parameters:\n    wind_speed (float): The wind speed in kilometers per hour.\n    temperature (float): The temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the input values are within the typical range for wind chill calculation\n    if temperature > 10 or wind_speed < 4.8:\n        raise ValueError(\"Wind chill calculation is only valid for temperatures below 10\u00b0C and wind speeds above 4.8 km/h.\")\n\n    # Calculate the wind chill using the given formula\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature -\n        11.37 * (wind_speed ** 0.16) +\n        0.3965 * temperature * (wind_speed ** 0.16)\n    )\n\n    # Round the result to the nearest whole number\n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n    \n    The wind chill formula is applicable for temperatures below 10 degrees Celsius and wind speeds above 4.8 km/h.\n    The formula used is:\n    Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16\n    \n    :param temperature: float - The air temperature in degrees Celsius.\n    :param wind_speed: float - The wind speed in kilometers per hour.\n    :return: int - The wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Check if the conditions for applying the wind chill formula are met\n    if temperature > 10 or wind_speed <= 4.8:\n        # If conditions are not met, return the temperature as is\n        return round(temperature)\n    \n    # Calculate the wind chill using the formula\n    wind_chill_index = (\n        13.12 + \n        0.6215 * temperature - \n        11.37 * wind_speed**0.16 + \n        0.3965 * temperature * wind_speed**0.16\n    )\n    \n    # Round the result to the nearest whole number\n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n\n    Parameters:\n    temperature (float): The air temperature in degrees Celsius.\n    wind_speed (float): The wind speed in kilometers per hour.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number.\n    \"\"\"\n    # Validate inputs\n    if temperature > 10:\n        return \"Error: Temperature must be 10\u00b0C or below for wind chill calculation.\"\n    if wind_speed <= 4.8:\n        return \"Error: Wind speed must be above 4.8 km/h for wind chill calculation.\"\n\n    # Calculate wind chill using the standard formula\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature -\n        11.37 * (wind_speed ** 0.16) +\n        0.3965 * temperature * (wind_speed ** 0.16)\n    )\n\n    # Round the result to the nearest whole number\n    return round(wind_chill_index)\n\n# Example usage:\n# result = wind_chill(5.0, 10.0)\n# print(result)  # Output should be the wind chill index as an integer\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature_celsius: float, wind_speed_kmh: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n\n    The formula is applicable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h.\n    If the inputs do not meet these conditions, an error message is returned.\n\n    Parameters:\n    temperature_celsius (float): The temperature in degrees Celsius.\n    wind_speed_kmh (float): The wind speed in kilometers per hour.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number, or an error message if inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if temperature_celsius > 10:\n        return \"Error: Temperature must be at or below 10 degrees Celsius.\"\n    if wind_speed_kmh <= 4.8:\n        return \"Error: Wind speed must be above 4.8 km/h.\"\n\n    # Calculate wind chill index using the formula\n    wind_chill_index = (\n        13.12 + 0.6215 * temperature_celsius\n        - 11.37 * (wind_speed_kmh ** 0.16)\n        + 0.3965 * temperature_celsius * (wind_speed_kmh ** 0.16)\n    )\n\n    # Round the result to the nearest whole number\n    return round(wind_chill_index)\n"], "plans": ["requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round it to the nearest whole number. It should handle various input ranges for wind speed and temperature efficiently.\nrequirement pool:\n- Accurate wind chill calculation\n- User-friendly input and output interface\n- Responsive design for mobile and desktop\n- Quick performance for real-time calculations\n- Integration with other weather data sources\nWe will use the formula for wind chill index commonly used in North America, which is: Wind Chill = 13.12 + 0.6215 * T - 11.37 * (V**0.16) + 0.3965 * T * (V**0.16), where T is the temperature in Celsius and V is the wind speed in km/h. This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. We will use Python's built-in round function to round the result to the nearest whole number.\n", "requirement analysis:\nThe function needs to accurately compute the wind chill index using the given formula and round the result to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Accurate wind chill calculation\n- Rounding result to nearest whole number\n- User-friendly input interface\n- Quick performance\n- Responsive design for different devices\nWe will implement a function named wind_chill that calculates the wind chill index using the formula provided by the National Weather Service. This formula is suitable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h. The function will take wind speed in km/h and temperature in Celsius as inputs, compute the wind chill index, and return the result rounded to the nearest whole number. We will use Python's built-in round function for rounding. The function will be simple and efficient, ensuring quick performance.\n", "requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round it to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Accurate wind chill calculation\n- User-friendly input and output interface\n- Quick performance for calculations\n- Responsive design for mobile and desktop\n- Integration with other weather data\nWe will implement a function named wind_chill that calculates the wind chill index using the formula provided by the National Weather Service. This formula is suitable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h. The function will take wind speed in km/h and temperature in Celsius as inputs and return the wind chill index rounded to the nearest whole number. We will use Python's built-in round function for rounding.\n", "requirement analysis:\nThe requirement is to create a function that calculates the wind chill index based on wind speed and temperature. The output should be rounded to the nearest whole number, ensuring accuracy and ease of understanding for users.\nrequirement pool:\n- Accurate wind chill calculation\n- User-friendly input and output interface\n- Quick performance for calculations\n- Clear documentation for users\n- Responsive design for various devices\nWe will use the formula for wind chill index commonly used in meteorology: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the temperature in Celsius and V is the wind speed in km/h. This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. We will use Python's built-in math functions to perform the calculations and round the result to the nearest whole number.\n", "requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round the result to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Implement the wind chill calculation formula\n- Ensure rounding to the nearest whole number\n- Optimize for performance and quick response\n- Design a user-friendly input interface\n- Include error handling for invalid inputs\nWe will implement the wind chill calculation using the formula provided by the National Weather Service, which is: Wind Chill = 13.12 + 0.6215 * T - 11.37 * (V**0.16) + 0.3965 * T * (V**0.16), where T is the temperature in Celsius and V is the wind speed in km/h. We will use Python's built-in round function to ensure the result is rounded to the nearest whole number. The function will be optimized for performance and will include error handling for invalid inputs.\n", "requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round the result to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Accurate wind chill calculation\n- User-friendly input and output interface\n- Quick performance for calculations\n- Responsive design for various devices\n- Additional weather insights\nWe will use the formula for wind chill index commonly used in meteorology: Wind Chill = 13.12 + 0.6215 * T - 11.37 * (V**0.16) + 0.3965 * T * (V**0.16), where T is the temperature in Celsius and V is the wind speed in km/h. This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. We will use Python's built-in functions to perform the calculations and round the result to the nearest whole number.\n", "requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round it to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Accurate wind chill calculation\n- User-friendly input method\n- Quick response time\n- Clear output display\n- Support for a wide range of input values\nWe will implement a function named 'wind_chill' that calculates the wind chill index using the formula: Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in degrees Celsius and V is the wind speed in km/h. The result will be rounded to the nearest whole number. This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. We will use Python's built-in functions to perform the calculations and rounding.\n", "requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round the result to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Implement the wind chill calculation formula\n- Ensure rounding to the nearest whole number\n- Optimize for performance with large input values\n- Create a user-friendly interface for input\n- Provide additional weather insights\nWe will implement the wind chill calculation using the standard formula for wind chill index, which is applicable for temperatures below 10 degrees Celsius and wind speeds above 4.8 km/h. The formula is: Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in degrees Celsius and V is the wind speed in km/h. We will use Python's built-in round function to round the result to the nearest whole number. The function will be simple and efficient, ensuring quick calculations.\n", "requirement analysis:\nThe function needs to accurately compute the wind chill index using the given formula and round it to the nearest whole number. It should handle various input ranges for wind speed and temperature efficiently.\nrequirement pool:\n- Implement the wind chill calculation formula\n- Ensure rounding to the nearest whole number\n- Optimize for performance with large input values\n- Create a user-friendly interface for input\n- Provide error handling for invalid inputs\nWe will implement the wind chill calculation using the standard formula for wind chill index, which is applicable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. The formula is: Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in Celsius and V is the wind speed in km/h. We will ensure the result is rounded to the nearest whole number. The function will handle input validation to ensure the inputs are within the valid range for the formula.\n", "requirement analysis:\nThe function should accurately compute the wind chill index using the given formula and round it to the nearest whole number. It should handle various input values for wind speed and temperature efficiently.\nrequirement pool:\n- Accurate wind chill calculation\n- User-friendly input method\n- Clear output display\n- Responsive performance\n- Compatibility with various devices\nWe will implement a function named 'wind_chill' that calculates the wind chill index using the formula provided by the National Weather Service. The formula is applicable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h. We will ensure the function rounds the result to the nearest whole number and handles input validation for the specified conditions.\n"], "test": ["def check(wind_chill):\n\tassert wind_chill(120,35)==40", "def check(wind_chill):\n\tassert wind_chill(40,70)==86", "def check(wind_chill):\n\tassert wind_chill(10,100)==116", "def check(wind_chill):\n\tassert wind_chill(116, 30) == 33", "def check(wind_chill):\n\tassert wind_chill(122, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(125, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(123, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(124, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(118, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(122, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(115, 34) == 39", "def check(wind_chill):\n\tassert wind_chill(116, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(117, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(125, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(125, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(124, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(118, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(117, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(118, 35) == 40", "def check(wind_chill):\n\tassert wind_chill(121, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(119, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(124, 37) == 43", "def check(wind_chill):\n\tassert wind_chill(118, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(115, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(125, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(125, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(122, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(122, 34) == 39", "def check(wind_chill):\n\tassert wind_chill(121, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(117, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(123, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(117, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(120, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(116, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(122, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(124, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(38, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(39, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(38, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(45, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(38, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(39, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(42, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(38, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(42, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(45, 73) == 91", "def check(wind_chill):\n\tassert wind_chill(41, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(39, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(43, 70) == 87", "def check(wind_chill):\n\tassert wind_chill(45, 65) == 80", "def check(wind_chill):\n\tassert wind_chill(39, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(45, 67) == 83", "def check(wind_chill):\n\tassert wind_chill(45, 70) == 87", "def check(wind_chill):\n\tassert wind_chill(44, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(43, 68) == 84", "def check(wind_chill):\n\tassert wind_chill(39, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(39, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(40, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(38, 71) == 87", "def check(wind_chill):\n\tassert wind_chill(44, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(41, 67) == 82", "def check(wind_chill):\n\tassert wind_chill(37, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(43, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(43, 75) == 93", "def check(wind_chill):\n\tassert wind_chill(40, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(40, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(41, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(40, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(38, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(11, 100) == 117", "def check(wind_chill):\n\tassert wind_chill(15, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(14, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(14, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(7, 104) == 119", "def check(wind_chill):\n\tassert wind_chill(8, 100) == 115", "def check(wind_chill):\n\tassert wind_chill(11, 98) == 114", "def check(wind_chill):\n\tassert wind_chill(5, 102) == 114", "def check(wind_chill):\n\tassert wind_chill(9, 105) == 121", "def check(wind_chill):\n\tassert wind_chill(6, 102) == 115", "def check(wind_chill):\n\tassert wind_chill(6, 96) == 108", "def check(wind_chill):\n\tassert wind_chill(7, 102) == 116", "def check(wind_chill):\n\tassert wind_chill(9, 102) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 97) == 115", "def check(wind_chill):\n\tassert wind_chill(8, 103) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 96) == 114", "def check(wind_chill):\n\tassert wind_chill(14, 95) == 112", "def check(wind_chill):\n\tassert wind_chill(6, 100) == 113", "def check(wind_chill):\n\tassert wind_chill(15, 105) == 125", "def check(wind_chill):\n\tassert wind_chill(5, 96) == 107", "def check(wind_chill):\n\tassert wind_chill(14, 103) == 122", "def check(wind_chill):\n\tassert wind_chill(12, 96) == 113", "def check(wind_chill):\n\tassert wind_chill(10, 95) == 110", "def check(wind_chill):\n\tassert wind_chill(14, 101) == 120", "def check(wind_chill):\n\tassert wind_chill(13, 95) == 112", "def check(wind_chill):\n\tassert wind_chill(14, 103) == 122", "def check(wind_chill):\n\tassert wind_chill(13, 100) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 101) == 120", "def check(wind_chill):\n\tassert wind_chill(8, 105) == 121", "def check(wind_chill):\n\tassert wind_chill(11, 102) == 119", "def check(wind_chill):\n\tassert wind_chill(10, 105) == 122", "def check(wind_chill):\n\tassert wind_chill(6, 96) == 108", "def check(wind_chill):\n\tassert wind_chill(13, 101) == 119"], "scores": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "completion": "from typing import List\n## main.py\n\ndef wind_chill(temperature_celsius: float, wind_speed_kmh: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n\n    The formula is applicable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h.\n    If the inputs do not meet these conditions, an error message is returned.\n\n    Parameters:\n    temperature_celsius (float): The temperature in degrees Celsius.\n    wind_speed_kmh (float): The wind speed in kilometers per hour.\n\n    Returns:\n    int: The wind chill index rounded to the nearest whole number, or an error message if inputs are invalid.\n    \"\"\"\n    # Validate inputs\n    if temperature_celsius > 10:\n        return \"Error: Temperature must be at or below 10 degrees Celsius.\"\n    if wind_speed_kmh <= 4.8:\n        return \"Error: Wind speed must be above 4.8 km/h.\"\n\n    # Calculate wind chill index using the formula\n    wind_chill_index = (\n        13.12 + 0.6215 * temperature_celsius\n        - 11.37 * (wind_speed_kmh ** 0.16)\n        + 0.3965 * temperature_celsius * (wind_speed_kmh ** 0.16)\n    )\n\n    # Round the result to the nearest whole number\n    return round(wind_chill_index)\n", "passed": false, "pass": false, "pass_num": 0, "round": 630, "mutate_method": "rephrase_one", "parent_index": 380}
