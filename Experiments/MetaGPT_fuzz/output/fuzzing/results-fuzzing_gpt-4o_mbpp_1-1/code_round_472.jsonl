{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 282, "prompt": "Write a function to subtract two lists element-wise. Ensure that both lists are of equal length to avoid index errors when performing subtraction.", "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]", "assert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "assert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "assert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "assert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "assert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "assert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "assert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "assert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "assert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "assert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "assert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "assert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "assert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "assert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "assert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "assert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "assert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "assert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "assert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "assert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "assert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "assert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "assert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "assert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "assert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "assert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "assert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "assert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "assert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "assert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "assert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "assert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "assert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "assert sub_list([5, 6], [4, 8]) == [1, -2]", "assert sub_list([2, 6], [3, 9]) == [-1, -3]", "assert sub_list([5, 3], [6, 2]) == [-1, 1]", "assert sub_list([3, 5], [3, 5]) == [0, 0]", "assert sub_list([4, 6], [3, 6]) == [1, 0]", "assert sub_list([6, 3], [7, 6]) == [-1, -3]", "assert sub_list([3, 2], [2, 6]) == [1, -4]", "assert sub_list([4, 6], [1, 1]) == [3, 5]", "assert sub_list([1, 2], [1, 1]) == [0, 1]", "assert sub_list([1, 3], [6, 8]) == [-5, -5]", "assert sub_list([2, 2], [7, 6]) == [-5, -4]", "assert sub_list([1, 6], [3, 6]) == [-2, 0]", "assert sub_list([3, 2], [3, 7]) == [0, -5]", "assert sub_list([2, 2], [4, 1]) == [-2, 1]", "assert sub_list([3, 2], [7, 7]) == [-4, -5]", "assert sub_list([4, 7], [8, 8]) == [-4, -1]", "assert sub_list([3, 6], [1, 6]) == [2, 0]", "assert sub_list([1, 7], [1, 6]) == [0, 1]", "assert sub_list([3, 3], [4, 7]) == [-1, -4]", "assert sub_list([3, 2], [8, 6]) == [-5, -4]", "assert sub_list([4, 1], [6, 2]) == [-2, -1]", "assert sub_list([6, 2], [6, 9]) == [0, -7]", "assert sub_list([2, 4], [2, 2]) == [0, 2]", "assert sub_list([3, 4], [5, 4]) == [-2, 0]", "assert sub_list([3, 7], [3, 8]) == [0, -1]", "assert sub_list([2, 5], [1, 3]) == [1, 2]", "assert sub_list([4, 6], [4, 2]) == [0, 4]", "assert sub_list([5, 6], [3, 4]) == [2, 2]", "assert sub_list([1, 6], [3, 9]) == [-2, -3]", "assert sub_list([6, 3], [3, 2]) == [3, 1]", "assert sub_list([2, 1], [5, 9]) == [-3, -8]", "assert sub_list([5, 1], [5, 5]) == [0, -4]", "assert sub_list([4, 6], [7, 7]) == [-3, -1]", "assert sub_list([88, 120], [55, 65]) == [33, 55]", "assert sub_list([85, 121], [45, 71]) == [40, 50]", "assert sub_list([92, 125], [46, 74]) == [46, 51]", "assert sub_list([93, 115], [50, 68]) == [43, 47]", "assert sub_list([90, 116], [45, 72]) == [45, 44]", "assert sub_list([88, 119], [51, 67]) == [37, 52]", "assert sub_list([91, 121], [47, 74]) == [44, 47]", "assert sub_list([94, 118], [53, 71]) == [41, 47]", "assert sub_list([89, 119], [51, 65]) == [38, 54]", "assert sub_list([85, 124], [48, 72]) == [37, 52]", "assert sub_list([89, 124], [53, 67]) == [36, 57]", "assert sub_list([90, 118], [50, 67]) == [40, 51]", "assert sub_list([85, 123], [54, 70]) == [31, 53]", "assert sub_list([85, 118], [48, 75]) == [37, 43]", "assert sub_list([91, 122], [45, 73]) == [46, 49]", "assert sub_list([90, 115], [47, 71]) == [43, 44]", "assert sub_list([89, 125], [55, 70]) == [34, 55]", "assert sub_list([89, 115], [50, 71]) == [39, 44]", "assert sub_list([94, 119], [45, 75]) == [49, 44]", "assert sub_list([89, 117], [46, 68]) == [43, 49]", "assert sub_list([90, 118], [54, 67]) == [36, 51]", "assert sub_list([90, 118], [53, 70]) == [37, 48]", "assert sub_list([88, 125], [54, 69]) == [34, 56]", "assert sub_list([92, 115], [49, 71]) == [43, 44]", "assert sub_list([86, 119], [50, 71]) == [36, 48]", "assert sub_list([85, 119], [48, 67]) == [37, 52]", "assert sub_list([93, 122], [54, 69]) == [39, 53]", "assert sub_list([93, 119], [49, 74]) == [44, 45]", "assert sub_list([88, 123], [46, 67]) == [42, 56]", "assert sub_list([90, 116], [50, 73]) == [40, 43]", "assert sub_list([93, 120], [46, 68]) == [47, 52]", "assert sub_list([85, 116], [53, 69]) == [32, 47]", "assert sub_list([86, 123], [46, 75]) == [40, 48]"], "entry_point": "sub_list", "repair_prompt": ["Write a function sub_list to subtract two lists element-wise. Ensure that both lists are of equal length to avoid index errors when performing subtraction.\nsub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n"], "completions": ["from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"Subtracts elements of list2 from list1 element-wise.\n    \n    Raises ValueError if lists are of unequal length.\n    \n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n    \n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of equal length.')\n    \n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the lists are of unequal length.\n    TypeError: If the lists contain non-numeric elements.\n    \"\"\"\n    # Check if both lists are of equal length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of equal length.\")\n\n    # Check if all elements in both lists are numeric\n    if not all(isinstance(x, (int, float)) for x in list1 + list2):\n        raise TypeError(\"All elements in both lists must be numeric.\")\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    '''\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are of unequal length.\n    '''\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of equal length.\")\n\n    return [a - b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are not of equal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n    return result\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If the lists are of unequal length.\n    TypeError: If the lists contain non-numeric elements.\n    \"\"\"\n    # Check if lengths of list1 and list2 are equal\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of equal length')\n\n    # Check if all elements in both lists are numeric\n    if not all(isinstance(x, (int, float)) for x in list1 + list2):\n        raise TypeError('Lists must contain only numeric elements')\n\n    # Perform element-wise subtraction using NumPy\n    np_list1 = np.array(list1)\n    np_list2 = np.array(list2)\n    result = np_list1 - np_list2\n\n    return result.tolist()\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts two lists element-wise.\n    \n    Args:\n        list1: First list of integers.\n        list2: Second list of integers.\n    \n    Returns:\n        A new list containing the element-wise subtraction of list1 and list2.\n    \n    Raises:\n        ValueError: If the lists are not of equal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of equal length.')\n    \n    return [a - b for a, b in zip(list1, list2)]\n\n# Example usage:\n# result = sub_list([10, 20, 30], [1, 2, 3])\n# print(result)  # Output: [9, 18, 27]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers, must be of the same length as list1.\n\n    Returns:\n    list: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are not of equal length.\n    TypeError: If any element in the lists is not a number.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must be of the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        if not isinstance(list1[i], (int, float)) or not isinstance(list2[i], (int, float)):\n            raise TypeError(\"All elements in the lists must be numbers.\")\n        result.append(list1[i] - list2[i])\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are of unequal length.\n    TypeError: If any element in the lists is non-numeric.\n    \"\"\"\n    # Check if both lists are of equal length\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of equal length.\")\n\n    # Check if all elements in both lists are numeric\n    for element in list1 + list2:\n        if not isinstance(element, (int, float)):\n            raise TypeError(\"All elements in the lists must be numeric.\")\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are not of equal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length.\")\n    \n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        list1 = [10, 20, 30]\n        list2 = [1, 2, 3]\n        print(sub_list(list1, list2))  # Output: [9, 18, 27]\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the lists are of unequal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n\n    return [a - b for a, b in zip(list1, list2)]\n\n# Example usage:\n# result = sub_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [-3, -3, -3]\n"], "plans": ["requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length, providing an error message for unequal lengths. It should be optimized for performance, especially with large lists.\nrequirement pool:\n- Implement element-wise subtraction for lists\n- Ensure lists are of equal length before subtraction\n- Optimize performance for large lists\n- Provide clear error messages for mismatched lengths\n- Consider edge cases like empty lists\nWe will implement a function named sub_list that performs element-wise subtraction of two lists. The function will first check if both lists are of equal length to prevent index errors. If the lengths are not equal, it will raise a ValueError with a clear error message. For efficient performance, especially with large lists, we will use list comprehension, which is a native Python feature known for its efficiency in handling element-wise operations.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists while ensuring both lists are of equal length. It should handle errors gracefully and be optimized for performance, especially with large datasets.\nrequirement pool:\n- Implement element-wise subtraction ensuring equal list lengths\n- Provide error handling for unequal list lengths\n- Optimize performance for large lists\n- Include documentation for usage and error handling\n- Test the function with various list sizes and data types\nWe will implement a simple function using native Python list operations to perform element-wise subtraction. The function will first check if both lists are of equal length and raise a ValueError with a clear message if they are not. For performance optimization, we will use list comprehension, which is efficient for handling large lists. We will also include type checking to ensure the lists contain numeric elements.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists while ensuring both lists are of equal length. It should handle errors gracefully and be optimized for performance.\nrequirement pool:\n- Implement element-wise subtraction of two lists\n- Ensure lists are of equal length before subtraction\n- Provide error handling for unequal list lengths\n- Optimize performance for large lists\n- Document the function usage and edge cases\nWe will implement a function `sub_list` that performs element-wise subtraction of two lists. The function will first check if both lists are of equal length to prevent index errors. If the lengths are unequal, it will raise a ValueError with a clear error message. For efficient handling of large lists, we will use list comprehension, which is both concise and efficient in Python. We will not use external libraries like NumPy or Pandas to keep the solution simple and avoid unnecessary complexity.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists while ensuring they are of equal length. It should handle errors gracefully and be optimized for performance.\nrequirement pool:\n- Implement element-wise subtraction ensuring equal list lengths\n- Provide error handling for unequal list lengths\n- Optimize performance for large lists\n- Include documentation for usage and error handling\n- Test the function with various list sizes and types\nWe will implement a simple function using native Python list operations to perform element-wise subtraction. We will ensure that both lists are of equal length before proceeding with the subtraction to prevent index errors. For error handling, we will raise a ValueError with a clear message if the lists are not of equal length. To optimize performance for large lists, we will use list comprehension, which is efficient and concise for this purpose.\n", "requirement analysis:\nThe function should perform element-wise subtraction of two lists, ensuring both lists are of equal length to prevent index errors. It should handle errors gracefully and be optimized for performance.\nrequirement pool:\n- Implement element-wise subtraction for two lists\n- Ensure lists are of equal length before subtraction\n- Provide error handling for unequal list lengths\n- Optimize performance for large lists\n- Document the function usage and edge cases\nWe will use NumPy for efficient element-wise subtraction of lists, as it provides high performance and usability for such operations. NumPy will handle large lists efficiently and provide clear error handling for mismatched list lengths.\n", "requirement analysis:\nThe function should perform element-wise subtraction of two lists, ensuring both lists are of equal length to prevent index errors. The solution should be efficient and handle large lists gracefully.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Validate that both lists are of equal length before subtraction.\n- Optimize the function for performance with large lists.\n- Provide informative error messages for invalid inputs.\n- Consider edge cases such as empty lists.\nWe will use native Python list comprehensions to perform element-wise subtraction, ensuring both lists are of equal length before proceeding. This approach is efficient for handling large lists and provides clear error messages for invalid inputs. We will not use any third-party libraries as native Python is sufficient for this task.\n", "requirement analysis:\nThe function should perform element-wise subtraction of two lists, ensuring both lists are of equal length to prevent index errors. It should handle errors gracefully and be optimized for performance.\nrequirement pool:\n- Implement element-wise subtraction for lists\n- Ensure lists are of equal length before subtraction\n- Provide error handling for mismatched list lengths\n- Optimize performance for large lists\n- Document the function usage and edge cases\nWe will implement a simple function using Python's built-in capabilities to perform element-wise subtraction of two lists. The function will first check if the lists are of equal length and raise a ValueError with a clear message if they are not. This approach ensures simplicity and efficiency, especially for large lists, without the need for external libraries.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists while ensuring both lists are of equal length. It should handle potential errors gracefully and provide informative feedback to the user.\nrequirement pool:\n- Implement element-wise subtraction for lists\n- Ensure lists are of equal length before subtraction\n- Optimize performance for large lists\n- Provide clear error messages for mismatched list lengths\n- Consider edge cases such as empty lists\nWe will implement a function named `sub_list` that performs element-wise subtraction of two lists. To ensure efficiency and usability, we will use Python's built-in list comprehension for this task, as it is simple and effective for small to medium-sized lists. We will include error handling to check if the lists are of equal length and provide informative error messages if they are not. Additionally, we will handle edge cases such as empty lists by returning an empty list if both input lists are empty.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists while ensuring both lists are of equal length. It should handle errors gracefully and be optimized for performance.\nrequirement pool:\n- Implement element-wise subtraction for lists\n- Ensure lists are of equal length before subtraction\n- Optimize performance for large lists\n- Provide clear error messages for mismatched lengths\n- Consider edge cases like empty lists\nWe will implement a function named sub_list that performs element-wise subtraction of two lists. The function will first check if both lists are of equal length to prevent index errors. If the lengths are not equal, it will raise a ValueError with a clear error message. For efficient handling of large lists, we will use list comprehension, which is both efficient and concise. We will not use external libraries like NumPy or Pandas to keep the solution simple and avoid unnecessary complexity.\n", "requirement analysis:\nThe function should perform element-wise subtraction of two lists, ensuring both lists are of equal length to prevent index errors. It should handle errors gracefully and be optimized for performance.\nrequirement pool:\n- Implement element-wise subtraction for lists\n- Ensure lists are of equal length before subtraction\n- Provide error handling for unequal list lengths\n- Optimize performance for large lists\n- Document the function usage and edge cases\nWe will implement a simple function using Python's built-in capabilities to perform element-wise subtraction of two lists. We will ensure both lists are of equal length before performing the subtraction to avoid index errors. The function will include error handling to provide informative messages if the lists are of unequal length. For performance optimization, we will use list comprehension, which is efficient for handling large lists.\n"], "test": ["def check(sub_list):\n\tassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "def check(sub_list):\n\tassert sub_list([1,2],[3,4])==[-2,-2]", "def check(sub_list):\n\tassert sub_list([90,120],[50,70])==[40,50]", "def check(sub_list):\n\tassert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "def check(sub_list):\n\tassert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "def check(sub_list):\n\tassert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "def check(sub_list):\n\tassert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "def check(sub_list):\n\tassert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "def check(sub_list):\n\tassert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "def check(sub_list):\n\tassert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "def check(sub_list):\n\tassert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "def check(sub_list):\n\tassert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "def check(sub_list):\n\tassert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "def check(sub_list):\n\tassert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "def check(sub_list):\n\tassert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "def check(sub_list):\n\tassert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "def check(sub_list):\n\tassert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "def check(sub_list):\n\tassert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "def check(sub_list):\n\tassert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "def check(sub_list):\n\tassert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "def check(sub_list):\n\tassert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "def check(sub_list):\n\tassert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "def check(sub_list):\n\tassert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "def check(sub_list):\n\tassert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "def check(sub_list):\n\tassert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "def check(sub_list):\n\tassert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "def check(sub_list):\n\tassert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "def check(sub_list):\n\tassert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "def check(sub_list):\n\tassert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "def check(sub_list):\n\tassert sub_list([5, 6], [4, 8]) == [1, -2]", "def check(sub_list):\n\tassert sub_list([2, 6], [3, 9]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([5, 3], [6, 2]) == [-1, 1]", "def check(sub_list):\n\tassert sub_list([3, 5], [3, 5]) == [0, 0]", "def check(sub_list):\n\tassert sub_list([4, 6], [3, 6]) == [1, 0]", "def check(sub_list):\n\tassert sub_list([6, 3], [7, 6]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([3, 2], [2, 6]) == [1, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [1, 1]) == [3, 5]", "def check(sub_list):\n\tassert sub_list([1, 2], [1, 1]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([1, 3], [6, 8]) == [-5, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [7, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 6]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 2], [3, 7]) == [0, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [4, 1]) == [-2, 1]", "def check(sub_list):\n\tassert sub_list([3, 2], [7, 7]) == [-4, -5]", "def check(sub_list):\n\tassert sub_list([4, 7], [8, 8]) == [-4, -1]", "def check(sub_list):\n\tassert sub_list([3, 6], [1, 6]) == [2, 0]", "def check(sub_list):\n\tassert sub_list([1, 7], [1, 6]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([3, 3], [4, 7]) == [-1, -4]", "def check(sub_list):\n\tassert sub_list([3, 2], [8, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([4, 1], [6, 2]) == [-2, -1]", "def check(sub_list):\n\tassert sub_list([6, 2], [6, 9]) == [0, -7]", "def check(sub_list):\n\tassert sub_list([2, 4], [2, 2]) == [0, 2]", "def check(sub_list):\n\tassert sub_list([3, 4], [5, 4]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 7], [3, 8]) == [0, -1]", "def check(sub_list):\n\tassert sub_list([2, 5], [1, 3]) == [1, 2]", "def check(sub_list):\n\tassert sub_list([4, 6], [4, 2]) == [0, 4]", "def check(sub_list):\n\tassert sub_list([5, 6], [3, 4]) == [2, 2]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 9]) == [-2, -3]", "def check(sub_list):\n\tassert sub_list([6, 3], [3, 2]) == [3, 1]", "def check(sub_list):\n\tassert sub_list([2, 1], [5, 9]) == [-3, -8]", "def check(sub_list):\n\tassert sub_list([5, 1], [5, 5]) == [0, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [7, 7]) == [-3, -1]", "def check(sub_list):\n\tassert sub_list([88, 120], [55, 65]) == [33, 55]", "def check(sub_list):\n\tassert sub_list([85, 121], [45, 71]) == [40, 50]", "def check(sub_list):\n\tassert sub_list([92, 125], [46, 74]) == [46, 51]", "def check(sub_list):\n\tassert sub_list([93, 115], [50, 68]) == [43, 47]", "def check(sub_list):\n\tassert sub_list([90, 116], [45, 72]) == [45, 44]", "def check(sub_list):\n\tassert sub_list([88, 119], [51, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([91, 121], [47, 74]) == [44, 47]", "def check(sub_list):\n\tassert sub_list([94, 118], [53, 71]) == [41, 47]", "def check(sub_list):\n\tassert sub_list([89, 119], [51, 65]) == [38, 54]", "def check(sub_list):\n\tassert sub_list([85, 124], [48, 72]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([89, 124], [53, 67]) == [36, 57]", "def check(sub_list):\n\tassert sub_list([90, 118], [50, 67]) == [40, 51]", "def check(sub_list):\n\tassert sub_list([85, 123], [54, 70]) == [31, 53]", "def check(sub_list):\n\tassert sub_list([85, 118], [48, 75]) == [37, 43]", "def check(sub_list):\n\tassert sub_list([91, 122], [45, 73]) == [46, 49]", "def check(sub_list):\n\tassert sub_list([90, 115], [47, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([89, 125], [55, 70]) == [34, 55]", "def check(sub_list):\n\tassert sub_list([89, 115], [50, 71]) == [39, 44]", "def check(sub_list):\n\tassert sub_list([94, 119], [45, 75]) == [49, 44]", "def check(sub_list):\n\tassert sub_list([89, 117], [46, 68]) == [43, 49]", "def check(sub_list):\n\tassert sub_list([90, 118], [54, 67]) == [36, 51]", "def check(sub_list):\n\tassert sub_list([90, 118], [53, 70]) == [37, 48]", "def check(sub_list):\n\tassert sub_list([88, 125], [54, 69]) == [34, 56]", "def check(sub_list):\n\tassert sub_list([92, 115], [49, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([86, 119], [50, 71]) == [36, 48]", "def check(sub_list):\n\tassert sub_list([85, 119], [48, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([93, 122], [54, 69]) == [39, 53]", "def check(sub_list):\n\tassert sub_list([93, 119], [49, 74]) == [44, 45]", "def check(sub_list):\n\tassert sub_list([88, 123], [46, 67]) == [42, 56]", "def check(sub_list):\n\tassert sub_list([90, 116], [50, 73]) == [40, 43]", "def check(sub_list):\n\tassert sub_list([93, 120], [46, 68]) == [47, 52]", "def check(sub_list):\n\tassert sub_list([85, 116], [53, 69]) == [32, 47]", "def check(sub_list):\n\tassert sub_list([86, 123], [46, 75]) == [40, 48]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the lists are of unequal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length\")\n\n    return [a - b for a, b in zip(list1, list2)]\n\n# Example usage:\n# result = sub_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [-3, -3, -3]\n", "passed": true, "pass": true, "pass_num": 10, "round": 472, "mutate_method": "add_1_sentence_at_end", "parent_index": 112}
