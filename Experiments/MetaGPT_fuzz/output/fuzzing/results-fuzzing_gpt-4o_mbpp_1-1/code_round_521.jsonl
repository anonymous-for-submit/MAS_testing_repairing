{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to convert degrees to radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Write a function radian_degree to convert degrees to radians.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    '''\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    '''\n    # Convert degrees to radians using math.radians\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function\n    test_degrees = [0, 90, 180, 270, 360]\n    for degrees in test_degrees:\n        radians = radian_degree(degrees)\n        print(f\"{degrees} degrees is {radians} radians\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the math.radians function from Python's standard library.\n\n    Args:\n        degrees (float): Angle in degrees.\n\n    Returns:\n        float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians using\n    the formula: radians = degrees * (pi / 180). It utilizes the math module\n    for the constant pi and ensures accurate conversion.\n\n    Parameters:\n    degrees (float): Angle in degrees. Can be positive, negative, or zero.\n\n    Returns:\n    float: Angle in radians.\n\n    Examples:\n        >>> radian_degree(0)\n        0.0\n        >>> radian_degree(180)\n        3.141592653589793\n        >>> radian_degree(360)\n        6.283185307179586\n        >>> radian_degree(-90)\n        -1.5707963267948966\n    \"\"\"\n    # Convert degrees to radians using the math module\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function\n    test_degrees = [0, 180, 360, -90]\n    for degrees in test_degrees:\n        print(f\"{degrees} degrees is {radian_degree(degrees)} radians\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert an angle from degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    angle_in_degrees = 90.0\n    angle_in_radians = radian_degree(angle_in_degrees)\n    print(f\"{angle_in_degrees} degrees is {angle_in_radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_angle_degrees = 90.0\n    test_angle_radians = radian_degree(test_angle_degrees)\n    print(f\"{test_angle_degrees} degrees is {test_angle_radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    # Convert degrees to radians using math.radians\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate functionality\n    test_degrees = [0, 90, 180, 270, 360, -45, 450]\n    for degrees in test_degrees:\n        radians = radian_degree(degrees)\n        print(f\"{degrees} degrees is {radians:.4f} radians\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the math.radians function from the Python standard library.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degree: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degree (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees * (pi / 180)\n    radians = degree * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert an angle from degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the mathematical constant pi from the math module.\n\n    Args:\n        degrees (float): Angle in degrees.\n\n    Returns:\n        float: Angle in radians.\n    \"\"\"\n    # Conversion formula: radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a known value\n    test_angle_degrees = 90.0\n    test_angle_radians = radian_degree(test_angle_degrees)\n    print(f\"{test_angle_degrees} degrees is {test_angle_radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians, which is a fundamental mathematical operation. The function should be efficient and easy to understand, catering to both developers and learners.\nrequirement pool:\n- Implement the conversion formula using Python's math library\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance in real-time applications\n- Provide documentation explaining the conversion process\n- Include examples of usage in different scenarios\nWe will use Python's built-in math library to implement the conversion formula from degrees to radians. This ensures accuracy and efficiency, leveraging the library's optimized mathematical functions. The function will handle edge cases like 0 and 360 degrees, and we will provide documentation explaining the conversion process along with examples.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be easy to use and integrate into other projects, ensuring high performance and accuracy.\nrequirement pool:\n- Implement the degree to radian conversion function\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide documentation and examples for usage\n- Include error handling for invalid inputs\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module provides a reliable and efficient way to handle mathematical operations, ensuring high accuracy and performance. The function will be simple and intuitive, allowing easy integration into other projects.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple, efficient, and well-documented to ensure ease of use and understanding.\nrequirement pool:\n- Implement the conversion function using Python's math module\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Provide documentation explaining the conversion process\n- Optimize the function for performance with large datasets\n- Include examples in the documentation for user reference\nWe will implement the conversion function using Python's math module, which provides a reliable and efficient way to convert degrees to radians. The math module is well-suited for this task as it includes the constant pi, which is essential for the conversion formula. We will ensure the function handles edge cases like 0 and 360 degrees, and provide documentation explaining the conversion process. Examples will be included in the documentation for user reference.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple, efficient, and easy to understand, ensuring it meets the needs of developers and users who require precise angle conversions.\nrequirement pool:\n- Implement the radian_degree function for accurate conversion\n- Optimize the function for performance\n- Provide documentation for user understanding\n- Ensure compatibility with existing Python libraries\n- Test the function with various input values\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. This approach ensures accuracy and efficiency, leveraging the math module's capabilities while keeping the function easy to understand and use.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians, which is a fundamental mathematical operation. The function should be efficient and easy to use, with clear documentation to aid understanding.\nrequirement pool:\n- Implement the conversion formula: radians = degrees * (pi/180)\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide documentation explaining the conversion process\n- Include examples of usage in different scenarios\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module provides a reliable and efficient way to handle mathematical operations, including the constant pi, which is essential for the conversion formula. The function will be simple, focusing on accuracy and performance, and will include documentation to explain the conversion process.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple, efficient, and handle typical edge cases. It should be easy to integrate into existing projects without additional dependencies.\nrequirement pool:\n- Implement the radian_degree function\n- Optimize the function for performance\n- Include edge case handling\n- Provide usage examples and documentation\n- Ensure compatibility with Python 3.x\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. This approach ensures accuracy and efficiency without the need for additional dependencies. The function will handle edge cases such as 0 and 360 degrees, and will be optimized for performance to handle large datasets.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use and provide precise results, as this is crucial for mathematical and scientific calculations.\nrequirement pool:\n- Implement the degree to radian conversion function.\n- Ensure the function handles edge cases, such as negative degrees.\n- Optimize the function for performance.\n- Create a user-friendly interface for inputting degree values.\n- Include documentation and examples for user guidance.\nWe will use the math library in Python, which provides a reliable and efficient method for converting degrees to radians using the math.radians function. This approach ensures accurate mathematical conversions and optimizes performance for quick calculations.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians accurately. The function should be easy to use and integrate into other projects. It should handle common edge cases and provide results quickly.\nrequirement pool:\n- Implement the degree to radian conversion function\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide documentation and examples for usage\n- Include error handling for invalid inputs\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. This approach ensures high accuracy and performance while keeping the function easy to use and integrate. The math module is a standard library in Python, so it doesn't require additional installations, making it optimal for quick calculations. The function will handle edge cases like 0 and 360 degrees by directly applying the conversion formula.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians, which is a common mathematical operation. The function should be efficient and easy to understand, catering to developers and learners alike.\nrequirement pool:\n- Implement the radian_degree function for accurate conversion\n- Optimize the function for performance\n- Provide documentation for educational purposes\n- Ensure compatibility with existing mathematical libraries\n- Test the function with various input values\nWe will use the math module from Python's standard library to implement the radian_degree function. This module provides a reliable and efficient way to perform mathematical operations, including the conversion from degrees to radians using the constant math.pi.\n", "requirement analysis:\nThe requirement is to create a function that converts degrees to radians accurately. The function should be simple to use and integrate into other projects. It should handle typical use cases for students, developers, and general users needing quick conversions.\nrequirement pool:\n- Implement the degree to radian conversion function.\n- Ensure the function handles edge cases like 0 and 360 degrees.\n- Optimize the function for performance.\n- Provide documentation and examples for usage.\n- Include error handling for invalid inputs.\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. This approach ensures high accuracy and performance while keeping the function easy to integrate into other projects. The math module is a standard library in Python, so it does not require any additional installations.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "passed": true, "pass": true, "pass_num": 10, "round": 521, "mutate_method": "condense_two2one", "parent_index": 191}
