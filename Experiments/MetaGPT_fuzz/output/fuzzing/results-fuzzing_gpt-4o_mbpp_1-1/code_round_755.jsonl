{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is a magic square. You should check if all rows, columns, and diagonals sum up to the same number. This means checking every row's sum and comparing it to the column sums. Additionally, ensure that both diagonals have the correct summed value.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function magic_square_test to calculate whether the matrix is a magic square. You should check if all rows, columns, and diagonals sum up to the same number. This means checking every row's sum and comparing it to the column sums. Additionally, ensure that both diagonals have the correct summed value.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\n## main.py\nimport numpy as np\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    Args:\n        matrix: A 2D list of integers representing the matrix.\n        \n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Convert the input matrix to a NumPy array for efficient operations\n    np_matrix = np.array(matrix)\n    \n    # Validate that the matrix is square\n    if np_matrix.shape[0] != np_matrix.shape[1]:\n        return False\n    \n    # Calculate the sum of the first row to use as the reference sum\n    reference_sum = np.sum(np_matrix[0, :])\n    \n    # Check sums of all rows\n    for row in np_matrix:\n        if np.sum(row) != reference_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in np_matrix.T:\n        if np.sum(col) != reference_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if np.sum(np.diag(np_matrix)) != reference_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if np.sum(np.diag(np.fliplr(np_matrix))) != reference_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Checks if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, \n    and both main diagonals are the same.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Validate if the matrix is square\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        print(\"Error: The matrix is not square.\")\n        return False\n\n    n = len(matrix)\n    # Calculate the sum of the first row to use as a reference\n    expected_sum = sum(matrix[0])\n\n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != expected_sum:\n            print(\"Error: Row sums do not match the expected sum.\")\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != expected_sum:\n            print(\"Error: Column sums do not match the expected sum.\")\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != expected_sum:\n        print(\"Error: Main diagonal sum does not match the expected sum.\")\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != expected_sum:\n        print(\"Error: Secondary diagonal sum does not match the expected sum.\")\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"Check if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sums of the numbers in each row, \n    each column, and both main diagonals are the same.\n\n    Args:\n        matrix: A list of lists of integers representing the matrix.\n\n    Returns:\n        A boolean indicating whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is empty or contains non-integer elements\n    if not matrix or any(not isinstance(row, list) or any(not isinstance(elem, int) for elem in row) for row in matrix):\n        return False\n\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n\n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sums of the numbers in each row, \n    each column, and both main diagonals are the same.\n    \n    Args:\n        matrix: A square matrix represented as a list of lists of integers.\n        \n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Validate matrix dimensions\n    n = len(matrix)\n    if n == 0 or any(len(row) != n for row in matrix):\n        return False  # Return False for non-square matrices\n\n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n\n    # Compare sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Compare sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Compare sums of both diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Checks if the given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column, \n    and both main diagonals are the same.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is empty or not square\n    if not matrix or any(len(row) != len(matrix) for row in matrix):\n        return False\n\n    n = len(matrix)\n    # Calculate the sum of the first row to use as a reference\n    expected_sum = sum(matrix[0])\n\n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != expected_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != expected_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport numpy as np\n\ndef magic_square_test(matrix: List[List[int]]) -> Tuple[bool, str]:\n    \"\"\"\n    Validates if the given matrix is a magic square.\n\n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix.\n\n    Returns:\n    Tuple[bool, str]: A tuple where the first element is a boolean indicating if the matrix is a magic square,\n                      and the second element is a string with an error message if it is not.\n    \"\"\"\n    # Check if the matrix is square\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        return False, \"The matrix is not square.\"\n\n    n = len(matrix)\n    # Convert the matrix to a numpy array for efficient operations\n    np_matrix = np.array(matrix)\n\n    # Calculate the sum of the first row to use as a reference\n    magic_sum = np.sum(np_matrix[0, :])\n\n    # Check row sums\n    for i in range(n):\n        row_sum = np.sum(np_matrix[i, :])\n        if row_sum != magic_sum:\n            return False, f\"Row {i} does not sum to {magic_sum}.\"\n\n    # Check column sums\n    for j in range(n):\n        col_sum = np.sum(np_matrix[:, j])\n        if col_sum != magic_sum:\n            return False, f\"Column {j} does not sum to {magic_sum}.\"\n\n    # Check diagonal sums\n    main_diagonal_sum = np.sum(np_matrix.diagonal())\n    if main_diagonal_sum != magic_sum:\n        return False, \"Main diagonal does not sum to the magic sum.\"\n\n    anti_diagonal_sum = np.sum(np.fliplr(np_matrix).diagonal())\n    if anti_diagonal_sum != magic_sum:\n        return False, \"Anti-diagonal does not sum to the magic sum.\"\n\n    return True, \"The matrix is a magic square.\"\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of every row, column,\n    and both main diagonals are the same.\n\n    Args:\n        matrix: A list of lists where each sublist represents a row of the matrix.\n\n    Returns:\n        True if the matrix is a magic square, otherwise False.\n    \"\"\"\n    # Check if the matrix is square\n    if not matrix or any(len(row) != len(matrix) for row in matrix):\n        return False\n\n    n = len(matrix)\n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n\n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    Parameters:\n    matrix (List[List[int]]): A 2D list representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Validate matrix dimensions\n    if not matrix or not all(len(row) == len(matrix) for row in matrix):\n        return False\n\n    n = len(matrix)\n    # Calculate the sum of the first row to use as a reference\n    expected_sum = sum(matrix[0])\n\n    # Check row sums\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n\n    # Check column sums\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != expected_sum:\n            return False\n\n    # Check diagonal sums\n    if sum(matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != expected_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    A magic square is a square matrix in which the sums of the numbers in each row, \n    each column, and both main diagonals are the same.\n    \n    Args:\n        matrix: A 2D list of integers representing the matrix.\n        \n    Returns:\n        Boolean indicating whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n    \n    # Check sums of all rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check sums of all columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n    \n    # Check sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check sum of the secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Checks if the given matrix is a magic square.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a valid square matrix or contains non-numeric values.\n    \"\"\"\n    # Validate the input matrix\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a non-empty 2D list.\")\n    \n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n        if not all(isinstance(item, int) for item in row):\n            raise ValueError(\"Matrix must contain only numeric values.\")\n\n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check column sums\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonal sums\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n"], "plans": ["requirement analysis:\nThe function needs to efficiently check if a matrix is a magic square by comparing sums of rows, columns, and diagonals. It should handle matrices of varying sizes and provide a clear boolean output indicating the result.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize the function for performance with large matrices\n- Ensure the output is clear and understandable\n- Include error handling for invalid input\n- Provide documentation for the function usage\nWe will implement a function to check if a given matrix is a magic square by verifying that all rows, columns, and diagonals have the same sum. We will use NumPy for efficient matrix operations, which will help optimize performance for large matrices. The function will handle square matrices and provide a clear boolean output. Error handling will be included for non-square matrices or matrices with invalid elements.\n", "requirement analysis:\nThe function should efficiently check if a matrix is a magic square by comparing sums of rows, columns, and diagonals. It should handle edge cases like non-square matrices and provide informative feedback for invalid inputs.\nrequirement pool:\n- Implement the main function to check magic square validity\n- Optimize the function for performance with large matrices\n- Include error handling for non-square matrices\n- Provide detailed error messages for invalid magic squares\n- Ensure compatibility with various matrix sizes\nWe will implement a function named `magic_square_test` that checks if a given matrix is a magic square. The function will first validate if the input is a square matrix. Then, it will calculate the sum of each row, column, and both diagonals, ensuring they all match. We will use Python's built-in capabilities for matrix manipulation and error handling to provide informative feedback for invalid inputs.\n", "requirement analysis:\nThe function needs to efficiently check if a matrix is a magic square by comparing sums of rows, columns, and diagonals. It should handle matrices of varying sizes and provide clear output indicating whether the matrix is a magic square.\nrequirement pool:\n- Implement the function to check row, column, and diagonal sums\n- Ensure the function handles matrices of different sizes\n- Optimize the function for performance\n- Provide clear output for the user\n- Include error handling for invalid inputs\nWe will implement a function named magic_square_test that checks if a given matrix is a magic square. The function will calculate the sum of each row, each column, and both diagonals, and then compare these sums to determine if they are all equal. We will use Python's built-in capabilities for list and matrix manipulation to ensure efficiency and simplicity. The function will also handle non-square matrices by returning False immediately, as a magic square must be a square matrix.\n", "requirement analysis:\nThe function needs to efficiently check if a matrix is a magic square by comparing sums of rows, columns, and diagonals. It should handle matrices of varying sizes and provide clear output indicating whether the matrix is a magic square.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize the function for performance with large matrices\n- Ensure the function provides clear and understandable output\n- Include error handling for invalid matrix inputs\n- Document the function usage and examples\nWe will implement a function to check if a given matrix is a magic square by verifying that all rows, columns, and diagonals have the same sum. We will use Python's built-in capabilities for matrix manipulation and ensure the function is optimized for performance with large matrices. The function will handle square matrices only and provide clear output indicating whether the matrix is a magic square.\n", "requirement analysis:\nThe function should efficiently determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle different matrix sizes and provide accurate results. The implementation should be straightforward and well-documented to aid understanding and usage.\nrequirement pool:\n- Implement the main function to check for magic square properties\n- Optimize the function for performance with larger matrices\n- Include comprehensive documentation and examples\n- Ensure compatibility with Python 3.x versions\n- Add error handling for non-square matrices\nWe will implement a function named `magic_square_test` that checks if a given matrix is a magic square. The function will verify that all rows, columns, and both diagonals have the same sum. We will handle edge cases such as non-square matrices by returning False. The function will be efficient and compatible with Python 3.x versions. We will use basic Python libraries to ensure simplicity and ease of understanding.\n", "requirement analysis:\nThe function should efficiently check if a matrix is a magic square by comparing sums of rows, columns, and diagonals. It should handle matrices of various sizes and provide feedback on why a matrix fails the magic square test.\nrequirement pool:\n- Implement the main function to validate magic squares\n- Optimize the function for performance with large matrices\n- Include detailed error messages for invalid matrices\n- Support matrices of different sizes\n- Ensure the function is easy to use and understand\nWe will implement a function to validate magic squares using basic Python operations. The function will check if all rows, columns, and diagonals have the same sum. We will use numpy for efficient matrix operations, which is suitable for handling large matrices. The function will also provide detailed error messages if the matrix fails the magic square test.\n", "requirement analysis:\nThe function needs to efficiently check the sums of rows, columns, and diagonals to determine if the matrix is a magic square. It should handle matrices of different sizes and provide a boolean result.\nrequirement pool:\n- Implement the function to check row, column, and diagonal sums\n- Ensure the function returns a boolean value\n- Optimize the function for performance with large matrices\n- Handle edge cases such as non-square matrices\n- Provide detailed error messages for invalid inputs\nWe will implement a function that checks if a given matrix is a magic square by verifying that all rows, columns, and diagonals have the same sum. We will use Python's built-in capabilities for list manipulation to efficiently calculate sums. The function will handle matrices of varying sizes and return a boolean result. We will ensure the function is optimized for performance, especially for larger matrices, by minimizing redundant calculations.\n", "requirement analysis:\nThe function should efficiently determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle matrices of varying sizes and provide a clear boolean output indicating the result.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize the function for performance with large matrices\n- Ensure the function provides clear and understandable output\n- Include error handling for invalid matrix inputs\n- Document the function usage and examples\nWe will implement a function to check if a given matrix is a magic square by verifying the sums of rows, columns, and diagonals. We will use Python's built-in capabilities for matrix manipulation and ensure the function is optimized for performance with large matrices. The function will handle square matrices and provide a clear boolean output. We will include error handling for non-square matrices and invalid inputs.\n", "requirement analysis:\nThe function should efficiently determine if a matrix is a magic square by comparing sums of rows, columns, and diagonals. It should return a boolean value indicating the result. The function must handle matrices of different sizes and ensure performance optimization for larger matrices.\nrequirement pool:\n- Implement the main function to check magic square properties\n- Optimize the function for performance with large matrices\n- Ensure the function provides clear output\n- Handle edge cases for non-square matrices\n- Include detailed error messages for invalid inputs\nWe will implement a function that checks if a given matrix is a magic square by verifying that all rows, columns, and diagonals have the same sum. We will use Python's built-in capabilities for list manipulation to efficiently calculate sums. The function will handle matrices of varying sizes but will return False for non-square matrices as they cannot be magic squares.\n", "requirement analysis:\nThe function should efficiently determine if a matrix is a magic square by checking the sums of rows, columns, and diagonals. It should handle non-square matrices and provide informative feedback for invalid inputs.\nrequirement pool:\n- Implement the magic square validation logic.\n- Handle edge cases such as non-square matrices.\n- Provide clear error messages for invalid inputs.\n- Optimize the function for performance.\n- Ensure the code is well-documented and maintainable.\nWe will implement a function named `magic_square_test` that checks if a given matrix is a magic square. The function will verify that all rows, columns, and both diagonals have the same sum. We will handle edge cases such as non-square matrices and provide informative error messages for invalid inputs. The function will be optimized for readability and maintainability, using Python's built-in capabilities without additional libraries, as they are not necessary for this task.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 0, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef magic_square_test(matrix: list[list[int]]) -> bool:\n    \"\"\"\n    Checks if the given matrix is a magic square.\n\n    Parameters:\n    matrix (list[list[int]]): A 2D list representing the matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n\n    Raises:\n    ValueError: If the input is not a valid square matrix or contains non-numeric values.\n    \"\"\"\n    # Validate the input matrix\n    if not matrix or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input must be a non-empty 2D list.\")\n    \n    n = len(matrix)\n    for row in matrix:\n        if len(row) != n:\n            raise ValueError(\"Input must be a square matrix.\")\n        if not all(isinstance(item, int) for item in row):\n            raise ValueError(\"Matrix must contain only numeric values.\")\n\n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n\n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check column sums\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check diagonal sums\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 9, "round": 755, "mutate_method": "expand_one2two", "parent_index": 53}
