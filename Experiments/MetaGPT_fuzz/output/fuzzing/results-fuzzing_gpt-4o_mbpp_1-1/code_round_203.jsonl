{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 630, "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.", "code": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "test_imports": [], "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "assert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((6, 6)) == [[5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7]]", "assert get_coordinates((7, 3)) == [[6, 2], [6, 3], [6, 4], [7, 2], [7, 3], [7, 4], [8, 2], [8, 3], [8, 4]]", "assert get_coordinates((6, 3)) == [[5, 2], [5, 3], [5, 4], [6, 2], [6, 3], [6, 4], [7, 2], [7, 3], [7, 4]]", "assert get_coordinates((5, 1)) == [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2]]", "assert get_coordinates((4, 7)) == [[3, 6], [3, 7], [3, 8], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [5, 8]]", "assert get_coordinates((6, 8)) == [[5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9], [7, 7], [7, 8], [7, 9]]", "assert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((1, 8)) == [[0, 7], [0, 8], [0, 9], [1, 7], [1, 8], [1, 9], [2, 7], [2, 8], [2, 9]]", "assert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "assert get_coordinates((1, 1)) == [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]", "assert get_coordinates((6, 6)) == [[5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7]]", "assert get_coordinates((1, 6)) == [[0, 5], [0, 6], [0, 7], [1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7]]", "assert get_coordinates((4, 3)) == [[3, 2], [3, 3], [3, 4], [4, 2], [4, 3], [4, 4], [5, 2], [5, 3], [5, 4]]", "assert get_coordinates((3, 9)) == [[2, 8], [2, 9], [2, 10], [3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10]]", "assert get_coordinates((2, 4)) == [[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5]]", "assert get_coordinates((6, 8)) == [[5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9], [7, 7], [7, 8], [7, 9]]", "assert get_coordinates((2, 7)) == [[1, 6], [1, 7], [1, 8], [2, 6], [2, 7], [2, 8], [3, 6], [3, 7], [3, 8]]", "assert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "assert get_coordinates((6, 6)) == [[5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7]]", "assert get_coordinates((8, 6)) == [[7, 5], [7, 6], [7, 7], [8, 5], [8, 6], [8, 7], [9, 5], [9, 6], [9, 7]]", "assert get_coordinates((1, 6)) == [[0, 5], [0, 6], [0, 7], [1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7]]", "assert get_coordinates((8, 1)) == [[7, 0], [7, 1], [7, 2], [8, 0], [8, 1], [8, 2], [9, 0], [9, 1], [9, 2]]", "assert get_coordinates((4, 2)) == [[3, 1], [3, 2], [3, 3], [4, 1], [4, 2], [4, 3], [5, 1], [5, 2], [5, 3]]", "assert get_coordinates((1, 6)) == [[0, 5], [0, 6], [0, 7], [1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7]]", "assert get_coordinates((2, 6)) == [[1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7]]", "assert get_coordinates((5, 8)) == [[4, 7], [4, 8], [4, 9], [5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9]]", "assert get_coordinates((6, 7)) == [[5, 6], [5, 7], [5, 8], [6, 6], [6, 7], [6, 8], [7, 6], [7, 7], [7, 8]]", "assert get_coordinates((6, 7)) == [[5, 6], [5, 7], [5, 8], [6, 6], [6, 7], [6, 8], [7, 6], [7, 7], [7, 8]]", "assert get_coordinates((4, 1)) == [[3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]", "assert get_coordinates((6, 2)) == [[5, 1], [5, 2], [5, 3], [6, 1], [6, 2], [6, 3], [7, 1], [7, 2], [7, 3]]", "assert get_coordinates((3, 3)) == [[2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4], [4, 2], [4, 3], [4, 4]]", "assert get_coordinates((2, 8)) == [[1, 7], [1, 8], [1, 9], [2, 7], [2, 8], [2, 9], [3, 7], [3, 8], [3, 9]]", "assert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((4, 9)) == [[3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10]]", "assert get_coordinates((3, 6)) == [[2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7]]", "assert get_coordinates((1, 2)) == [[0, 1], [0, 2], [0, 3], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3]]", "assert get_coordinates((5, 3)) == [[4, 2], [4, 3], [4, 4], [5, 2], [5, 3], [5, 4], [6, 2], [6, 3], [6, 4]]", "assert get_coordinates((4, 4)) == [[3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5], [5, 3], [5, 4], [5, 5]]", "assert get_coordinates((8, 8)) == [[7, 7], [7, 8], [7, 9], [8, 7], [8, 8], [8, 9], [9, 7], [9, 8], [9, 9]]", "assert get_coordinates((7, 1)) == [[6, 0], [6, 1], [6, 2], [7, 0], [7, 1], [7, 2], [8, 0], [8, 1], [8, 2]]", "assert get_coordinates((8, 2)) == [[7, 1], [7, 2], [7, 3], [8, 1], [8, 2], [8, 3], [9, 1], [9, 2], [9, 3]]", "assert get_coordinates((5, 9)) == [[4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10], [6, 8], [6, 9], [6, 10]]", "assert get_coordinates((5, 9)) == [[4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10], [6, 8], [6, 9], [6, 10]]", "assert get_coordinates((3, 7)) == [[2, 6], [2, 7], [2, 8], [3, 6], [3, 7], [3, 8], [4, 6], [4, 7], [4, 8]]", "assert get_coordinates((5, 10)) == [[4, 9], [4, 10], [4, 11], [5, 9], [5, 10], [5, 11], [6, 9], [6, 10], [6, 11]]", "assert get_coordinates((6, 5)) == [[5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 5], [7, 6]]", "assert get_coordinates((3, 10)) == [[2, 9], [2, 10], [2, 11], [3, 9], [3, 10], [3, 11], [4, 9], [4, 10], [4, 11]]", "assert get_coordinates((8, 5)) == [[7, 4], [7, 5], [7, 6], [8, 4], [8, 5], [8, 6], [9, 4], [9, 5], [9, 6]]", "assert get_coordinates((2, 3)) == [[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]]", "assert get_coordinates((5, 5)) == [[4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6]]", "assert get_coordinates((3, 8)) == [[2, 7], [2, 8], [2, 9], [3, 7], [3, 8], [3, 9], [4, 7], [4, 8], [4, 9]]", "assert get_coordinates((6, 9)) == [[5, 8], [5, 9], [5, 10], [6, 8], [6, 9], [6, 10], [7, 8], [7, 9], [7, 10]]", "assert get_coordinates((9, 7)) == [[8, 6], [8, 7], [8, 8], [9, 6], [9, 7], [9, 8], [10, 6], [10, 7], [10, 8]]", "assert get_coordinates((6, 2)) == [[5, 1], [5, 2], [5, 3], [6, 1], [6, 2], [6, 3], [7, 1], [7, 2], [7, 3]]", "assert get_coordinates((1, 5)) == [[0, 4], [0, 5], [0, 6], [1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6]]", "assert get_coordinates((5, 1)) == [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2]]", "assert get_coordinates((9, 9)) == [[8, 8], [8, 9], [8, 10], [9, 8], [9, 9], [9, 10], [10, 8], [10, 9], [10, 10]]", "assert get_coordinates((2, 3)) == [[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]]", "assert get_coordinates((7, 6)) == [[6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7], [8, 5], [8, 6], [8, 7]]", "assert get_coordinates((5, 4)) == [[4, 3], [4, 4], [4, 5], [5, 3], [5, 4], [5, 5], [6, 3], [6, 4], [6, 5]]", "assert get_coordinates((3, 6)) == [[2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7]]", "assert get_coordinates((4, 6)) == [[3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7]]", "assert get_coordinates((4, 6)) == [[3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7]]", "assert get_coordinates((6, 5)) == [[5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 5], [7, 6]]", "assert get_coordinates((9, 9)) == [[8, 8], [8, 9], [8, 10], [9, 8], [9, 9], [9, 10], [10, 8], [10, 9], [10, 10]]", "assert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "assert get_coordinates((7, 11)) == [[6, 10], [6, 11], [6, 12], [7, 10], [7, 11], [7, 12], [8, 10], [8, 11], [8, 12]]", "assert get_coordinates((10, 2)) == [[9, 1], [9, 2], [9, 3], [10, 1], [10, 2], [10, 3], [11, 1], [11, 2], [11, 3]]", "assert get_coordinates((2, 9)) == [[1, 8], [1, 9], [1, 10], [2, 8], [2, 9], [2, 10], [3, 8], [3, 9], [3, 10]]", "assert get_coordinates((5, 10)) == [[4, 9], [4, 10], [4, 11], [5, 9], [5, 10], [5, 11], [6, 9], [6, 10], [6, 11]]", "assert get_coordinates((4, 9)) == [[3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10]]", "assert get_coordinates((1, 11)) == [[0, 10], [0, 11], [0, 12], [1, 10], [1, 11], [1, 12], [2, 10], [2, 11], [2, 12]]", "assert get_coordinates((10, 1)) == [[9, 0], [9, 1], [9, 2], [10, 0], [10, 1], [10, 2], [11, 0], [11, 1], [11, 2]]", "assert get_coordinates((7, 3)) == [[6, 2], [6, 3], [6, 4], [7, 2], [7, 3], [7, 4], [8, 2], [8, 3], [8, 4]]", "assert get_coordinates((10, 7)) == [[9, 6], [9, 7], [9, 8], [10, 6], [10, 7], [10, 8], [11, 6], [11, 7], [11, 8]]", "assert get_coordinates((1, 5)) == [[0, 4], [0, 5], [0, 6], [1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6]]", "assert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((6, 5)) == [[5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 5], [7, 6]]", "assert get_coordinates((6, 10)) == [[5, 9], [5, 10], [5, 11], [6, 9], [6, 10], [6, 11], [7, 9], [7, 10], [7, 11]]", "assert get_coordinates((3, 8)) == [[2, 7], [2, 8], [2, 9], [3, 7], [3, 8], [3, 9], [4, 7], [4, 8], [4, 9]]", "assert get_coordinates((3, 6)) == [[2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7]]", "assert get_coordinates((5, 8)) == [[4, 7], [4, 8], [4, 9], [5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9]]", "assert get_coordinates((5, 1)) == [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2]]", "assert get_coordinates((8, 1)) == [[7, 0], [7, 1], [7, 2], [8, 0], [8, 1], [8, 2], [9, 0], [9, 1], [9, 2]]", "assert get_coordinates((2, 11)) == [[1, 10], [1, 11], [1, 12], [2, 10], [2, 11], [2, 12], [3, 10], [3, 11], [3, 12]]", "assert get_coordinates((10, 11)) == [[9, 10], [9, 11], [9, 12], [10, 10], [10, 11], [10, 12], [11, 10], [11, 11], [11, 12]]", "assert get_coordinates((3, 9)) == [[2, 8], [2, 9], [2, 10], [3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10]]", "assert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "assert get_coordinates((10, 6)) == [[9, 5], [9, 6], [9, 7], [10, 5], [10, 6], [10, 7], [11, 5], [11, 6], [11, 7]]", "assert get_coordinates((8, 2)) == [[7, 1], [7, 2], [7, 3], [8, 1], [8, 2], [8, 3], [9, 1], [9, 2], [9, 3]]", "assert get_coordinates((9, 9)) == [[8, 8], [8, 9], [8, 10], [9, 8], [9, 9], [9, 10], [10, 8], [10, 9], [10, 10]]", "assert get_coordinates((7, 11)) == [[6, 10], [6, 11], [6, 12], [7, 10], [7, 11], [7, 12], [8, 10], [8, 11], [8, 12]]", "assert get_coordinates((2, 11)) == [[1, 10], [1, 11], [1, 12], [2, 10], [2, 11], [2, 12], [3, 10], [3, 11], [3, 12]]", "assert get_coordinates((6, 1)) == [[5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2], [7, 0], [7, 1], [7, 2]]", "assert get_coordinates((8, 6)) == [[7, 5], [7, 6], [7, 7], [8, 5], [8, 6], [8, 7], [9, 5], [9, 6], [9, 7]]", "assert get_coordinates((2, 7)) == [[1, 6], [1, 7], [1, 8], [2, 6], [2, 7], [2, 8], [3, 6], [3, 7], [3, 8]]", "assert get_coordinates((4, 2)) == [[3, 1], [3, 2], [3, 3], [4, 1], [4, 2], [4, 3], [5, 1], [5, 2], [5, 3]]"], "entry_point": "get_coordinates", "repair_prompt": ["Write a function get_coordinates to extract all the adjacent coordinates of the given coordinate tuple.\nget_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n"], "completions": ["from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple[int, int]) -> list[list[int]]:\n    \"\"\"\n    Calculate all adjacent coordinates for a given coordinate tuple, including diagonals.\n\n    Parameters:\n    coordinate (tuple[int, int]): A tuple representing the x and y coordinates.\n\n    Returns:\n    list[list[int]]: A list of lists, where each inner list contains the x and y coordinates of an adjacent point.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Iterate over the range to get all adjacent coordinates including diagonals\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx != 0 or dy != 0:  # Exclude the original coordinate\n                adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coordinate = (3, 4)\n    result = get_coordinates(example_coordinate)\n    print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coord: tuple) -> list:\n    \"\"\"\n    Calculate all adjacent coordinates including diagonals for a given coordinate tuple.\n\n    Parameters:\n    coord (tuple): A tuple containing the x and y coordinates.\n\n    Returns:\n    list: A list of lists, where each sublist contains the x and y coordinates of an adjacent point.\n    \"\"\"\n    x, y = coord\n    adjacent_coords = []\n\n    # Iterate over the range to get all adjacent coordinates including diagonals\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx != 0 or dy != 0:  # Exclude the original coordinate\n                adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coord = (3, 4)\n    result = get_coordinates(example_coord)\n    print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple[int, int]) -> list[list[int]]:\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n\n    This function calculates all adjacent coordinates for a given coordinate tuple,\n    including the original coordinate itself. It handles edge cases such as negative\n    coordinates or large values gracefully.\n\n    Parameters:\n    coordinate (tuple[int, int]): A tuple representing the original coordinate.\n\n    Returns:\n    list[list[int]]: A list of lists containing adjacent coordinates including the original coordinate.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Iterate over the range to get adjacent coordinates\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample coordinate\n    test_coordinate = (3, 4)\n    result = get_coordinates(test_coordinate)\n    print(result)  # Expected output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coord: tuple) -> list:\n    \"\"\"\n    Extracts all adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    coord (tuple): A tuple containing two integers representing the x and y coordinates.\n\n    Returns:\n    list: A list of lists, where each sublist contains two integers representing an adjacent coordinate.\n    \"\"\"\n    x, y = coord\n    adjacent_coords = []\n\n    # Define the range for adjacent coordinates\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the original coordinate\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coord = (3, 4)\n    result = get_coordinates(example_coord)\n    print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple[int, int]) -> list[list[int]]:\n    \"\"\"Calculate all adjacent coordinates for a given coordinate tuple, including diagonals.\n\n    Args:\n        coordinate (tuple[int, int]): A tuple of two integers representing a coordinate.\n\n    Returns:\n        list[list[int]]: A list of lists, where each inner list contains two integers representing an adjacent coordinate.\n    \n    Example:\n        >>> get_coordinates((3, 4))\n        [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Iterate over the range to get all adjacent coordinates including diagonals\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            # Skip the original coordinate itself\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coordinate = (3, 4)\n    result = get_coordinates(example_coordinate)\n    print(f\"Adjacent coordinates for {example_coordinate}: {result}\")\n", "from typing import List\n## main.py\n\ndef get_coordinates(coord: tuple) -> list:\n    \"\"\"\n    Calculate all adjacent coordinates for a given coordinate tuple, including diagonals.\n\n    Parameters:\n    coord (tuple): A tuple of two integers representing the x and y coordinates.\n\n    Returns:\n    list: A list of lists, where each sublist contains two integers representing an adjacent coordinate.\n    \"\"\"\n    # Validate input: check if coord is a tuple of two integers\n    if not isinstance(coord, tuple) or len(coord) != 2:\n        return []\n    x, y = coord\n    if not isinstance(x, int) or not isinstance(y, int):\n        return []\n\n    # Calculate adjacent coordinates\n    adjacent_coords = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx != 0 or dy != 0:  # Exclude the original coordinate itself\n                adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n# Example usage:\n# result = get_coordinates((3, 4))\n# print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple[int, int]) -> list[list[int]]:\n    \"\"\"\n    Extracts all adjacent coordinates of the given coordinate tuple, including diagonals.\n\n    Parameters:\n    coordinate (tuple[int, int]): A tuple representing the x and y coordinates.\n\n    Returns:\n    list[list[int]]: A list of lists containing all adjacent coordinates.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Iterate over the range to get all adjacent coordinates including diagonals\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            # Skip the original coordinate itself\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage:\n# result = get_coordinates((3, 4))\n# print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple[int, int]) -> list[list[int]]:\n    \"\"\"\n    Given a coordinate tuple, return a list of lists containing all adjacent coordinates.\n\n    Parameters:\n    coordinate (tuple[int, int]): A tuple representing the x and y coordinates.\n\n    Returns:\n    list[list[int]]: A list of lists, each containing two integers representing an adjacent coordinate.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Iterate over the range to get all adjacent coordinates\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the original coordinate itself\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coordinate = (3, 4)\n    result = get_coordinates(example_coordinate)\n    print(f\"Adjacent coordinates for {example_coordinate}: {result}\")\n", "from typing import List\n## main.py\n\ndef get_coordinates(coord: tuple) -> list:\n    \"\"\"\n    Extracts all adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    coord (tuple): A tuple containing two integers representing the x and y coordinates.\n\n    Returns:\n    list: A list of lists, where each sublist contains two integers representing an adjacent coordinate.\n    \"\"\"\n    x, y = coord\n    adjacent_coords = []\n\n    # Define the possible offsets for adjacent coordinates\n    offsets = [(-1, -1), (-1, 0), (-1, 1),\n               (0, -1), (0, 0), (0, 1),\n               (1, -1), (1, 0), (1, 1)]\n\n    for dx, dy in offsets:\n        adjacent_coords.append([x + dx, y + dy])\n\n    return adjacent_coords\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample coordinate\n    test_coord = (3, 4)\n    result = get_coordinates(test_coord)\n    print(result)  # Expected output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple) -> list:\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    coordinate (tuple): A tuple containing two integers representing the x and y coordinates.\n\n    Returns:\n    list: A list of lists, where each inner list contains two integers representing an adjacent coordinate.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Define the relative positions of adjacent coordinates\n    relative_positions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1), (0, 0), (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    for dx, dy in relative_positions:\n        adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coordinate = (3, 4)\n    result = get_coordinates(example_coordinate)\n    print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n"], "plans": ["requirement analysis:\nThe function should efficiently calculate all adjacent coordinates for a given coordinate tuple, including diagonals. It should handle edge cases such as coordinates on the boundary of a grid.\nrequirement pool:\n- Implement the main function to extract adjacent coordinates\n- Ensure the function handles edge cases\n- Provide comprehensive documentation\n- Optimize for performance\n- Maintain compatibility with existing systems\nWe will implement a function that calculates all adjacent coordinates for a given coordinate tuple, including diagonals. The function will assume an infinite grid, as the grid boundaries are not specified. We will use Python's built-in capabilities to efficiently handle the calculations and ensure compatibility with existing systems.\n", "requirement analysis:\nThe function should efficiently calculate all adjacent coordinates for a given coordinate tuple, including diagonals. It should handle edge cases such as negative coordinates or coordinates at the boundary of a grid.\nrequirement pool:\n- The function must return all adjacent coordinates including diagonals.\n- The function should handle edge cases like negative coordinates.\n- The function should be optimized for performance.\n- The function should be easy to integrate into existing systems.\n- The function should include comprehensive documentation.\nWe will implement a function that calculates all adjacent coordinates including diagonals for a given coordinate tuple. The function will handle edge cases such as negative coordinates and assume an infinite grid. We will use Python's built-in capabilities to ensure efficiency and simplicity, avoiding unnecessary complexity.\n", "requirement analysis:\nThe function should efficiently compute all adjacent coordinates for a given coordinate tuple, including the original coordinate itself. It should handle edge cases such as negative coordinates or large values gracefully.\nrequirement pool:\n- Implement the main function to extract adjacent coordinates\n- Ensure the function handles edge cases\n- Provide comprehensive documentation\n- Optimize for performance\n- Maintain compatibility with existing systems\nWe will implement a function that calculates all adjacent coordinates for a given coordinate tuple, including the original coordinate itself. The function will handle edge cases such as negative coordinates or large values gracefully. We will use Python's built-in capabilities to ensure efficiency and simplicity, avoiding over-engineering.\n", "requirement analysis:\nThe function should efficiently compute all adjacent coordinates for a given tuple, ensuring it handles edge cases such as boundaries and negative coordinates. It should be optimized for performance and easy to integrate into various applications.\nrequirement pool:\n- Implement the main function to extract adjacent coordinates\n- Optimize the function for performance\n- Ensure the function handles edge cases\n- Improve code readability\n- Provide comprehensive documentation\nWe will implement a function that calculates all adjacent coordinates for a given coordinate tuple. The function will handle edge cases such as negative coordinates and boundaries by ensuring the coordinates remain within valid ranges. We will use Python's built-in capabilities to optimize performance and enhance readability.\n", "requirement analysis:\nThe function should efficiently calculate all adjacent coordinates for a given coordinate tuple, including diagonals. It should handle edge cases such as coordinates on the boundary of a grid.\nrequirement pool:\n- Implement the main function to calculate adjacent coordinates\n- Ensure the function handles edge cases\n- Provide comprehensive documentation\n- Optimize for performance\n- Maintain compatibility with existing systems\nWe will implement a function that calculates all adjacent coordinates for a given coordinate tuple, including diagonals. The function will assume an infinite grid, as the grid boundaries are not specified. We will use Python's built-in capabilities to handle the calculations efficiently and ensure the function is well-documented with examples.\n", "requirement analysis:\nThe function should efficiently calculate all adjacent coordinates for a given coordinate tuple, including diagonals. It should handle typical edge cases such as negative coordinates or non-integer inputs gracefully.\nrequirement pool:\n- The function must return all adjacent coordinates including diagonals.\n- The function should handle edge cases like negative coordinates.\n- The function should be compatible with Python 3.x versions.\n- Provide documentation and examples for ease of use.\n- Optimize the function for performance with large datasets.\nWe will implement a function named get_coordinates that calculates all adjacent coordinates for a given coordinate tuple, including diagonals. The function will handle edge cases such as negative coordinates and non-integer inputs by validating the input and returning an empty list if the input is invalid. We will use Python's built-in capabilities to ensure compatibility with Python 3.x versions and optimize for performance.\n", "requirement analysis:\nThe function should take a tuple representing a coordinate and return a list of lists containing all adjacent coordinates, including diagonals. The function should be efficient and handle edge cases, such as negative coordinates or large values.\nrequirement pool:\n- Implement the main function to extract adjacent coordinates\n- Ensure the function handles edge cases\n- Write comprehensive documentation for the function\n- Optimize the function for performance\n- Create unit tests to verify function accuracy\nWe will implement a function named get_coordinates that takes a tuple representing a coordinate and returns a list of lists containing all adjacent coordinates, including diagonals. The function will handle edge cases such as negative coordinates or large values. We will use Python's built-in capabilities to ensure efficiency and simplicity, avoiding unnecessary complexity.\n", "requirement analysis:\nThe function should efficiently generate all adjacent coordinates for a given input coordinate. It should handle edge cases such as negative coordinates or coordinates at the boundary of a grid. The output should be a list of lists, each containing two integers representing a coordinate.\nrequirement pool:\n- Implement the main function to generate adjacent coordinates\n- Ensure the function handles edge cases\n- Write comprehensive documentation for the function\n- Optimize the function for performance\n- Create unit tests to validate the function's output\nWe will implement a function that calculates all adjacent coordinates for a given coordinate tuple. The function will handle edge cases such as negative coordinates and coordinates at the boundary of a grid. We will use basic Python functionality without any external libraries, as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should efficiently compute all adjacent coordinates for a given tuple, ensuring accuracy and performance. It should handle edge cases and be easy to integrate into various projects.\nrequirement pool:\n- Implement the main function to extract adjacent coordinates\n- Optimize the function for performance\n- Ensure the function handles edge cases\n- Improve code readability and maintainability\n- Provide comprehensive documentation\nWe will implement a function that calculates all adjacent coordinates for a given coordinate tuple. The function will iterate over possible offsets to generate adjacent coordinates, ensuring it handles edge cases such as negative indices or coordinates at the boundary of a grid. We will use Python's built-in capabilities to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function should efficiently calculate all adjacent coordinates for a given input coordinate. It should handle typical use cases and edge cases, such as coordinates on the boundary of a grid. The function should be optimized for performance and easy to use.\nrequirement pool:\n- Implement the main function to extract adjacent coordinates.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases gracefully.\n- Provide comprehensive documentation for developers.\n- Create a user-friendly interface for non-technical users.\nWe will implement a function that calculates all adjacent coordinates for a given input coordinate. The function will handle typical use cases and edge cases, such as coordinates on the boundary of a grid. We will use Python's built-in capabilities to ensure efficient computation without the need for external libraries, as the task is straightforward and does not require complex operations.\n"], "test": ["def check(get_coordinates):\n\tassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 6)) == [[5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 3)) == [[6, 2], [6, 3], [6, 4], [7, 2], [7, 3], [7, 4], [8, 2], [8, 3], [8, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 3)) == [[5, 2], [5, 3], [5, 4], [6, 2], [6, 3], [6, 4], [7, 2], [7, 3], [7, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 1)) == [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 7)) == [[3, 6], [3, 7], [3, 8], [4, 6], [4, 7], [4, 8], [5, 6], [5, 7], [5, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 8)) == [[5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9], [7, 7], [7, 8], [7, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 8)) == [[0, 7], [0, 8], [0, 9], [1, 7], [1, 8], [1, 9], [2, 7], [2, 8], [2, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 1)) == [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 6)) == [[5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 6)) == [[0, 5], [0, 6], [0, 7], [1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 3)) == [[3, 2], [3, 3], [3, 4], [4, 2], [4, 3], [4, 4], [5, 2], [5, 3], [5, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 9)) == [[2, 8], [2, 9], [2, 10], [3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 4)) == [[1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 8)) == [[5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9], [7, 7], [7, 8], [7, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 7)) == [[1, 6], [1, 7], [1, 8], [2, 6], [2, 7], [2, 8], [3, 6], [3, 7], [3, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 6)) == [[5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 6)) == [[7, 5], [7, 6], [7, 7], [8, 5], [8, 6], [8, 7], [9, 5], [9, 6], [9, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 6)) == [[0, 5], [0, 6], [0, 7], [1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 1)) == [[7, 0], [7, 1], [7, 2], [8, 0], [8, 1], [8, 2], [9, 0], [9, 1], [9, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 2)) == [[3, 1], [3, 2], [3, 3], [4, 1], [4, 2], [4, 3], [5, 1], [5, 2], [5, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 6)) == [[0, 5], [0, 6], [0, 7], [1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 6)) == [[1, 5], [1, 6], [1, 7], [2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 8)) == [[4, 7], [4, 8], [4, 9], [5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 7)) == [[5, 6], [5, 7], [5, 8], [6, 6], [6, 7], [6, 8], [7, 6], [7, 7], [7, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 7)) == [[5, 6], [5, 7], [5, 8], [6, 6], [6, 7], [6, 8], [7, 6], [7, 7], [7, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 1)) == [[3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 2)) == [[5, 1], [5, 2], [5, 3], [6, 1], [6, 2], [6, 3], [7, 1], [7, 2], [7, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 3)) == [[2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4], [4, 2], [4, 3], [4, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 8)) == [[1, 7], [1, 8], [1, 9], [2, 7], [2, 8], [2, 9], [3, 7], [3, 8], [3, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 9)) == [[3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 6)) == [[2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 2)) == [[0, 1], [0, 2], [0, 3], [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 3)) == [[4, 2], [4, 3], [4, 4], [5, 2], [5, 3], [5, 4], [6, 2], [6, 3], [6, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 4)) == [[3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5], [5, 3], [5, 4], [5, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 8)) == [[7, 7], [7, 8], [7, 9], [8, 7], [8, 8], [8, 9], [9, 7], [9, 8], [9, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 1)) == [[6, 0], [6, 1], [6, 2], [7, 0], [7, 1], [7, 2], [8, 0], [8, 1], [8, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 2)) == [[7, 1], [7, 2], [7, 3], [8, 1], [8, 2], [8, 3], [9, 1], [9, 2], [9, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 9)) == [[4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10], [6, 8], [6, 9], [6, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 9)) == [[4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10], [6, 8], [6, 9], [6, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 7)) == [[2, 6], [2, 7], [2, 8], [3, 6], [3, 7], [3, 8], [4, 6], [4, 7], [4, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 10)) == [[4, 9], [4, 10], [4, 11], [5, 9], [5, 10], [5, 11], [6, 9], [6, 10], [6, 11]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 5)) == [[5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 5], [7, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 10)) == [[2, 9], [2, 10], [2, 11], [3, 9], [3, 10], [3, 11], [4, 9], [4, 10], [4, 11]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 5)) == [[7, 4], [7, 5], [7, 6], [8, 4], [8, 5], [8, 6], [9, 4], [9, 5], [9, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 3)) == [[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 5)) == [[4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 8)) == [[2, 7], [2, 8], [2, 9], [3, 7], [3, 8], [3, 9], [4, 7], [4, 8], [4, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 9)) == [[5, 8], [5, 9], [5, 10], [6, 8], [6, 9], [6, 10], [7, 8], [7, 9], [7, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((9, 7)) == [[8, 6], [8, 7], [8, 8], [9, 6], [9, 7], [9, 8], [10, 6], [10, 7], [10, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 2)) == [[5, 1], [5, 2], [5, 3], [6, 1], [6, 2], [6, 3], [7, 1], [7, 2], [7, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 5)) == [[0, 4], [0, 5], [0, 6], [1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 1)) == [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((9, 9)) == [[8, 8], [8, 9], [8, 10], [9, 8], [9, 9], [9, 10], [10, 8], [10, 9], [10, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 3)) == [[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 6)) == [[6, 5], [6, 6], [6, 7], [7, 5], [7, 6], [7, 7], [8, 5], [8, 6], [8, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 4)) == [[4, 3], [4, 4], [4, 5], [5, 3], [5, 4], [5, 5], [6, 3], [6, 4], [6, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 6)) == [[2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 6)) == [[3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 6)) == [[3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 5)) == [[5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 5], [7, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((9, 9)) == [[8, 8], [8, 9], [8, 10], [9, 8], [9, 9], [9, 10], [10, 8], [10, 9], [10, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 11)) == [[6, 10], [6, 11], [6, 12], [7, 10], [7, 11], [7, 12], [8, 10], [8, 11], [8, 12]]", "def check(get_coordinates):\n\tassert get_coordinates((10, 2)) == [[9, 1], [9, 2], [9, 3], [10, 1], [10, 2], [10, 3], [11, 1], [11, 2], [11, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 9)) == [[1, 8], [1, 9], [1, 10], [2, 8], [2, 9], [2, 10], [3, 8], [3, 9], [3, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 10)) == [[4, 9], [4, 10], [4, 11], [5, 9], [5, 10], [5, 11], [6, 9], [6, 10], [6, 11]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 9)) == [[3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10], [5, 8], [5, 9], [5, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 11)) == [[0, 10], [0, 11], [0, 12], [1, 10], [1, 11], [1, 12], [2, 10], [2, 11], [2, 12]]", "def check(get_coordinates):\n\tassert get_coordinates((10, 1)) == [[9, 0], [9, 1], [9, 2], [10, 0], [10, 1], [10, 2], [11, 0], [11, 1], [11, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 3)) == [[6, 2], [6, 3], [6, 4], [7, 2], [7, 3], [7, 4], [8, 2], [8, 3], [8, 4]]", "def check(get_coordinates):\n\tassert get_coordinates((10, 7)) == [[9, 6], [9, 7], [9, 8], [10, 6], [10, 7], [10, 8], [11, 6], [11, 7], [11, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((1, 5)) == [[0, 4], [0, 5], [0, 6], [1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 5)) == [[5, 4], [5, 5], [5, 6], [6, 4], [6, 5], [6, 6], [7, 4], [7, 5], [7, 6]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 10)) == [[5, 9], [5, 10], [5, 11], [6, 9], [6, 10], [6, 11], [7, 9], [7, 10], [7, 11]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 8)) == [[2, 7], [2, 8], [2, 9], [3, 7], [3, 8], [3, 9], [4, 7], [4, 8], [4, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 6)) == [[2, 5], [2, 6], [2, 7], [3, 5], [3, 6], [3, 7], [4, 5], [4, 6], [4, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 8)) == [[4, 7], [4, 8], [4, 9], [5, 7], [5, 8], [5, 9], [6, 7], [6, 8], [6, 9]]", "def check(get_coordinates):\n\tassert get_coordinates((5, 1)) == [[4, 0], [4, 1], [4, 2], [5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 1)) == [[7, 0], [7, 1], [7, 2], [8, 0], [8, 1], [8, 2], [9, 0], [9, 1], [9, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 11)) == [[1, 10], [1, 11], [1, 12], [2, 10], [2, 11], [2, 12], [3, 10], [3, 11], [3, 12]]", "def check(get_coordinates):\n\tassert get_coordinates((10, 11)) == [[9, 10], [9, 11], [9, 12], [10, 10], [10, 11], [10, 12], [11, 10], [11, 11], [11, 12]]", "def check(get_coordinates):\n\tassert get_coordinates((3, 9)) == [[2, 8], [2, 9], [2, 10], [3, 8], [3, 9], [3, 10], [4, 8], [4, 9], [4, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 4)) == [[6, 3], [6, 4], [6, 5], [7, 3], [7, 4], [7, 5], [8, 3], [8, 4], [8, 5]]", "def check(get_coordinates):\n\tassert get_coordinates((10, 6)) == [[9, 5], [9, 6], [9, 7], [10, 5], [10, 6], [10, 7], [11, 5], [11, 6], [11, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 2)) == [[7, 1], [7, 2], [7, 3], [8, 1], [8, 2], [8, 3], [9, 1], [9, 2], [9, 3]]", "def check(get_coordinates):\n\tassert get_coordinates((9, 9)) == [[8, 8], [8, 9], [8, 10], [9, 8], [9, 9], [9, 10], [10, 8], [10, 9], [10, 10]]", "def check(get_coordinates):\n\tassert get_coordinates((7, 11)) == [[6, 10], [6, 11], [6, 12], [7, 10], [7, 11], [7, 12], [8, 10], [8, 11], [8, 12]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 11)) == [[1, 10], [1, 11], [1, 12], [2, 10], [2, 11], [2, 12], [3, 10], [3, 11], [3, 12]]", "def check(get_coordinates):\n\tassert get_coordinates((6, 1)) == [[5, 0], [5, 1], [5, 2], [6, 0], [6, 1], [6, 2], [7, 0], [7, 1], [7, 2]]", "def check(get_coordinates):\n\tassert get_coordinates((8, 6)) == [[7, 5], [7, 6], [7, 7], [8, 5], [8, 6], [8, 7], [9, 5], [9, 6], [9, 7]]", "def check(get_coordinates):\n\tassert get_coordinates((2, 7)) == [[1, 6], [1, 7], [1, 8], [2, 6], [2, 7], [2, 8], [3, 6], [3, 7], [3, 8]]", "def check(get_coordinates):\n\tassert get_coordinates((4, 2)) == [[3, 1], [3, 2], [3, 3], [4, 1], [4, 2], [4, 3], [5, 1], [5, 2], [5, 3]]"], "scores": [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0], "pass_results": [false, false, true, false, false, false, false, false, true, true], "pass_test_cases_num": [0, 0, 102, 0, 0, 0, 0, 0, 102, 102], "completion": "from typing import List\n## main.py\n\ndef get_coordinates(coordinate: tuple) -> list:\n    \"\"\"\n    Extract all adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    coordinate (tuple): A tuple containing two integers representing the x and y coordinates.\n\n    Returns:\n    list: A list of lists, where each inner list contains two integers representing an adjacent coordinate.\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    # Define the relative positions of adjacent coordinates\n    relative_positions = [\n        (-1, -1), (-1, 0), (-1, 1),\n        (0, -1), (0, 0), (0, 1),\n        (1, -1), (1, 0), (1, 1)\n    ]\n\n    for dx, dy in relative_positions:\n        adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates\n\n# Example usage\nif __name__ == \"__main__\":\n    example_coordinate = (3, 4)\n    result = get_coordinates(example_coordinate)\n    print(result)  # Output: [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n", "passed": true, "pass": true, "pass_num": 3, "round": 203, "mutate_method": "condense_two2one", "parent_index": 203}
