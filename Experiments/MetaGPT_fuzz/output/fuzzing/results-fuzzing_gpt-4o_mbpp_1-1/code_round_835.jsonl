{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 745, "prompt": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. Every number should be checked against each digit it contains. Each digit should perfectly divide the number it is part of. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php", "code": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]", "assert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "assert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "assert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "assert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(24, 30) == [24]", "assert divisible_by_digits(17, 24) == [22, 24]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(25, 29) == []", "assert divisible_by_digits(25, 25) == []", "assert divisible_by_digits(25, 27) == []", "assert divisible_by_digits(18, 29) == [22, 24]", "assert divisible_by_digits(25, 21) == []", "assert divisible_by_digits(22, 28) == [22, 24]", "assert divisible_by_digits(22, 25) == [22, 24]", "assert divisible_by_digits(19, 26) == [22, 24]", "assert divisible_by_digits(15, 28) == [15, 22, 24]", "assert divisible_by_digits(20, 25) == [22, 24]", "assert divisible_by_digits(25, 26) == []", "assert divisible_by_digits(16, 20) == []", "assert divisible_by_digits(23, 20) == []", "assert divisible_by_digits(22, 23) == [22]", "assert divisible_by_digits(23, 25) == [24]", "assert divisible_by_digits(21, 23) == [22]", "assert divisible_by_digits(19, 24) == [22, 24]", "assert divisible_by_digits(20, 24) == [22, 24]", "assert divisible_by_digits(17, 22) == [22]", "assert divisible_by_digits(18, 26) == [22, 24]", "assert divisible_by_digits(23, 30) == [24]", "assert divisible_by_digits(25, 28) == []", "assert divisible_by_digits(15, 29) == [15, 22, 24]", "assert divisible_by_digits(20, 26) == [22, 24]", "assert divisible_by_digits(16, 23) == [22]", "assert divisible_by_digits(20, 21) == []", "assert divisible_by_digits(18, 22) == [22]", "assert divisible_by_digits(22, 22) == [22]", "assert divisible_by_digits(21, 21) == []"], "entry_point": "divisible_by_digits", "repair_prompt": ["Write a function divisible_by_digits to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. Every number should be checked against each digit it contains. Each digit should perfectly divide the number it is part of. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndivisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n"], "completions": ["from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers divisible by their digits.\n    \"\"\"\n    divisible_numbers = []\n\n    for number in range(startnum, endnum + 1):\n        if is_divisible_by_digits(number):\n            divisible_numbers.append(number)\n\n    return divisible_numbers\n\n\ndef is_divisible_by_digits(number: int) -> bool:\n    \"\"\"\n    Helper function to check if a number is divisible by each of its digits.\n\n    Parameters:\n    number (int): The number to check.\n\n    Returns:\n    bool: True if the number is divisible by each of its digits, False otherwise.\n    \"\"\"\n    original_number = number\n\n    while number > 0:\n        digit = number % 10\n        number //= 10\n\n        # Skip division by zero\n        if digit == 0:\n            continue\n\n        if original_number % digit != 0:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds numbers within the range from startnum to endnum where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by every non-zero digit they contain.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        digits = [int(digit) for digit in str(number) if digit != '0']\n        return all(number % digit == 0 for digit in digits)\n\n    # Iterate over the range and collect numbers that meet the criteria\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n\n# Example usage:\n# result = divisible_by_digits(10, 20)\n# print(result)  # Output: [12, 15, 18]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds numbers within the range from startnum to endnum where each number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by their digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit == 0 or original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by all of its non-zero digits.\n        \n        Parameters:\n        number (int): The number to check.\n        \n        Returns:\n        bool: True if the number is divisible by all of its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit != 0 and original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is divisible by each of its non-zero digits.\n        \n        Parameters:\n        number (int): The number to check.\n        \n        Returns:\n        bool: True if the number is divisible by all its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit == 0:\n                number //= 10\n                continue\n            if original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n    \n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n    \n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by all of its non-zero digits.\n        \n        Parameters:\n        number (int): The number to check.\n        \n        Returns:\n        bool: True if the number is divisible by all of its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit != 0 and original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function takes a start number and an end number and returns a list of numbers within that range\n    where each number is divisible by each of its non-zero digits.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers divisible by their digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        str_number = str(number)\n        for digit in str_number:\n            if digit == '0':\n                continue\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            divisible_numbers.append(num)\n\n    return divisible_numbers\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds numbers within the range from startnum to endnum where each number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by each of their digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit == 0 or original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    This function takes two integers, startnum and endnum, and returns a list of numbers within this range\n    where each number is divisible by every non-zero digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range (inclusive).\n        endnum (int): The ending number of the range (exclusive).\n\n    Returns:\n        list[int]: A list of numbers that are divisible by each of their non-zero digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is divisible by each of its non-zero digits.\n\n        Args:\n            number (int): The number to check.\n\n        Returns:\n            bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit != 0 and original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    result = []\n    for num in range(startnum, endnum):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n", "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds and returns a list of numbers within the range from startnum to endnum\n    where each number is divisible by every non-zero digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers satisfying the divisibility condition.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by all of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by all non-zero digits, False otherwise.\n        \"\"\"\n        for digit in str(number):\n            if digit == '0':\n                continue\n            if number % int(digit) != 0:\n                return False\n        return True\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n\n    return result\n"], "plans": ["requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Edge cases include numbers with zero digits, which should be handled to avoid division errors.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Optimize the function for performance with large ranges\n- Ensure code readability and maintainability\n- Handle edge cases such as zero digits\n- Include comprehensive test cases\nWe will implement a function that iterates over each number in the specified range and checks if each digit of the number divides the number itself. We will handle edge cases such as numbers containing zero digits by skipping those digits during the divisibility check. The function will be optimized for performance by using efficient iteration and condition checking.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Edge cases such as zero digits need handling to avoid division errors. Performance should be optimized for large ranges, ensuring the function remains efficient.\nrequirement pool:\n- Implement the main logic to check divisibility by digits\n- Handle edge cases such as zero digits\n- Optimize performance for large ranges\n- Ensure code readability and maintainability\n- Provide comprehensive test cases\nWe will implement a standalone Python function named 'divisible_by_digits' that iterates over a range of numbers and checks if each number is divisible by every non-zero digit it contains. We will handle edge cases such as zero digits by skipping them to avoid division errors. The function will be optimized for performance using list comprehensions for concise and efficient iteration. We will ensure the code is readable and maintainable by including comments and clear logic.\n", "requirement analysis:\nThe function needs to iterate over a range and check each number for divisibility by its digits. Edge cases such as zero digits need handling to avoid division errors. Performance optimization is crucial for handling large ranges efficiently.\nrequirement pool:\n- Implement the main function logic for digit divisibility\n- Handle edge cases like zero digits\n- Optimize performance for large ranges\n- Provide clear documentation for user understanding\n- Test the function with various input ranges\nWe will implement a function that iterates over each number in the given range and checks if each digit of the number divides the number perfectly. We will handle edge cases such as zero digits by skipping them during the divisibility check to avoid division errors. The function will be optimized for performance by using efficient iteration and digit extraction techniques.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Edge cases such as zero digits need handling to avoid division errors. Performance optimization is crucial for handling large ranges efficiently.\nrequirement pool:\n- Implement the main divisible_by_digits function\n- Optimize the function for performance\n- Handle edge cases like zero digits\n- Ensure code readability and maintainability\n- Test the function with various ranges\nWe will implement a function named divisible_by_digits that iterates over a range of numbers and checks if each number is divisible by all of its non-zero digits. We will handle edge cases such as zero digits by skipping them to avoid division errors. The function will be optimized for performance by using efficient iteration and condition checking. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function needs to iterate over a range and check each number for divisibility by its digits. Edge cases such as zero digits need handling to avoid division errors. The function should be optimized for performance, especially for large ranges.\nrequirement pool:\n- Implement the main function to check divisibility by digits\n- Handle edge cases like zero digits\n- Optimize performance for large ranges\n- Provide user-friendly error messages\n- Include documentation for ease of use\nWe will implement a function that iterates over each number in the given range and checks if each digit of the number divides the number itself without a remainder. We will handle edge cases such as zero digits by skipping them to avoid division errors. The function will be optimized for performance by using efficient iteration and condition checking.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Edge cases such as zero digits should be handled to avoid division errors.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Optimize the function for performance with large ranges\n- Ensure code readability and maintainability\n- Handle edge cases such as zero digits\n- Include comprehensive test cases\nWe will implement a function named divisible_by_digits that iterates over a range of numbers and checks if each number is divisible by all of its non-zero digits. We will handle edge cases such as zero digits by skipping them to avoid division errors. The function will be optimized for performance by using efficient iteration and list comprehension. We will use Python's built-in capabilities without additional libraries to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function needs to iterate over a range and check each number for divisibility by its digits. Edge cases such as numbers containing zero should be handled to avoid division errors.\nrequirement pool:\n- Implement the main function logic for divisibility checks\n- Handle edge cases like zero in digits\n- Optimize for large ranges\n- Provide examples for user understanding\n- Ensure clear documentation\nWe will implement a function that iterates over each number in the given range and checks if the number is divisible by each of its non-zero digits. We will use Python's built-in functions to convert numbers to strings and iterate over digits. Edge cases such as numbers containing zero will be handled by skipping zero digits during divisibility checks.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check each number against its digits to ensure divisibility. Edge cases such as numbers containing zero should be handled to avoid division errors. The function should be optimized for performance to handle large ranges efficiently.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Optimize the function for performance with large input ranges\n- Handle edge cases such as numbers containing zero\n- Provide comprehensive documentation and examples\n- Ensure code readability and maintainability\nWe will implement a function that iterates over each number in the given range and checks if each digit in the number divides the number perfectly. We will handle edge cases such as numbers containing the digit zero by skipping those digits during the divisibility check. The function will be optimized using list comprehensions for concise and efficient processing.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Edge cases such as zero digits need handling to avoid division errors. Performance optimization is crucial for handling large ranges efficiently.\nrequirement pool:\n- Implement the main function logic for divisibility check\n- Handle edge cases like zero digits\n- Optimize performance for large ranges\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a function that iterates over each number in the given range and checks if each digit of the number divides the number itself. We will handle edge cases such as zero digits by skipping them during the divisibility check to avoid division errors. The function will be optimized for performance by using efficient iteration and conditional checks.\n", "requirement analysis:\nThe function needs to iterate over a range of numbers and check divisibility by each digit. Edge cases such as zero digits should be handled to avoid division errors.\nrequirement pool:\n- Implement the main function logic to check divisibility by digits\n- Optimize the function for performance with large ranges\n- Ensure the function handles edge cases like zero digits\n- Improve code readability and maintainability\n- Add comments and documentation for clarity\nWe will implement a function named divisible_by_digits that iterates over a range of numbers and checks if each number is divisible by all of its non-zero digits. We will handle edge cases such as zero digits by skipping them to avoid division errors. The function will be optimized for performance by using efficient iteration and condition checking. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\n"], "test": ["def check(divisible_by_digits):\n\tassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20,25)==[22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 20) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 22) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 27) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 21) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 25) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 23) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 25) == [4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 25) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 24) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 24) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 19) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 18) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 26) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 25) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 25) == [5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 19) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 26) == [6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 26) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 23) == [6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 21) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 27) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 26) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 22) == [5, 6, 7, 8, 9, 11, 12, 15, 22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 27) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 10) == [4, 5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 11) == [4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 15) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 18) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 17) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 17) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 20) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 15) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 12) == [5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 15) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 20) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 10) == [5, 6, 7, 8, 9]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 19) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 13) == [4, 5, 6, 7, 8, 9, 11, 12]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(5, 17) == [5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 16) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(4, 16) == [4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 19) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 20) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(2, 17) == [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(6, 18) == [6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(1, 17) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(3, 18) == [3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(24, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 29) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 25) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 27) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 29) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 28) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 28) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 25) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 26) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 20) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 25) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(19, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 24) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(17, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(23, 30) == [24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(25, 28) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(15, 29) == [15, 22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 26) == [22, 24]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(16, 23) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(20, 21) == []", "def check(divisible_by_digits):\n\tassert divisible_by_digits(18, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(22, 22) == [22]", "def check(divisible_by_digits):\n\tassert divisible_by_digits(21, 21) == []"], "scores": [0.1471, 0.1471, 1.0, 0.1471, 0.1471, 0.1471, 0.1471, 1.0, 0.1961, 0.1471], "pass_results": [false, false, true, false, false, false, false, true, false, false], "pass_test_cases_num": [15, 15, 102, 15, 15, 15, 15, 102, 20, 15], "completion": "from typing import List\n## main.py\n\ndef divisible_by_digits(startnum: int, endnum: int) -> list[int]:\n    \"\"\"\n    Finds numbers within the range from startnum to endnum where each number is divisible by every digit it contains.\n\n    Parameters:\n    startnum (int): The starting number of the range.\n    endnum (int): The ending number of the range.\n\n    Returns:\n    list[int]: A list of numbers that are divisible by each of their digits.\n    \"\"\"\n    def is_divisible_by_digits(number: int) -> bool:\n        \"\"\"\n        Checks if a number is divisible by each of its non-zero digits.\n\n        Parameters:\n        number (int): The number to check.\n\n        Returns:\n        bool: True if the number is divisible by each of its non-zero digits, False otherwise.\n        \"\"\"\n        original_number = number\n        while number > 0:\n            digit = number % 10\n            if digit == 0 or original_number % digit != 0:\n                return False\n            number //= 10\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n", "passed": true, "pass": true, "pass_num": 2, "round": 835, "mutate_method": "expand_one2two", "parent_index": 233}
