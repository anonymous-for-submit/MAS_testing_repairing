{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 796, "prompt": "Write function to find the sum of all items in the given dictionary. Ensure to handle cases where the dictionary is empty by returning a sum of zero.", "code": "def return_sum(dict):\n  sum = 0\n  for i in dict.values():\n    sum = sum + i\n  return sum", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "assert return_sum({'k': 101, 'f': 199, 'n': 302}) == 602", "assert return_sum({'x': 97, 'i': 295}) == 392", "assert return_sum({'q': 95, 'u': 198, 'k': 298}) == 591", "assert return_sum({'d': 100, 'c': 200, 'y': 305}) == 605", "assert return_sum({'c': 105, 'z': 301}) == 406", "assert return_sum({'w': 99, 'm': 196, 'j': 295}) == 590", "assert return_sum({'t': 104, 'k': 198, 'q': 303}) == 605", "assert return_sum({'n': 98, 's': 203, 'r': 300}) == 601", "assert return_sum({'u': 96, 'i': 201, 'h': 303}) == 600", "assert return_sum({'d': 101, 'f': 197, 'q': 304}) == 602", "assert return_sum({'u': 99, 'g': 200, 'j': 299}) == 598", "assert return_sum({'j': 97, 'x': 197, 'd': 305}) == 599", "assert return_sum({'b': 99, 'h': 204, 'z': 303}) == 606", "assert return_sum({'p': 104, 'u': 198, 'k': 295}) == 597", "assert return_sum({'p': 102, 'l': 201, 'h': 300}) == 603", "assert return_sum({'r': 95, 'l': 204, 'j': 304}) == 603", "assert return_sum({'o': 101, 's': 198, 'h': 297}) == 596", "assert return_sum({'l': 96, 'b': 195, 'g': 303}) == 594", "assert return_sum({'p': 97, 'r': 205, 'j': 303}) == 605", "assert return_sum({'v': 104, 'd': 204, 'm': 295}) == 603", "assert return_sum({'a': 105, 'm': 200, 'n': 297}) == 602", "assert return_sum({'v': 103, 'q': 198, 'r': 298}) == 599", "assert return_sum({'y': 99, 'w': 203, 'v': 295}) == 597", "assert return_sum({'l': 102, 's': 205, 'r': 299}) == 606", "assert return_sum({'d': 196, 'c': 296}) == 492", "assert return_sum({'u': 97, 'g': 197, 'a': 298}) == 592", "assert return_sum({'m': 96, 'u': 196, 'g': 300}) == 592", "assert return_sum({'a': 105, 'n': 200, 's': 296}) == 601", "assert return_sum({'w': 100, 'k': 296}) == 396", "assert return_sum({'v': 97, 'x': 200, 's': 297}) == 594", "assert return_sum({'u': 102, 't': 202, 'l': 296}) == 600", "assert return_sum({'x': 103, 'f': 203, 'd': 299}) == 605", "assert return_sum({'h': 98, 'x': 202, 't': 299}) == 599", "assert return_sum({'j': 22, 'e': 17, 'b': 48}) == 87", "assert return_sum({'x': 22, 'j': 19, 'u': 46}) == 87", "assert return_sum({'k': 29, 'n': 14, 'y': 42}) == 85", "assert return_sum({'y': 30, 'h': 17, 'k': 46}) == 93", "assert return_sum({'t': 29, 'r': 15, 'e': 43}) == 87", "assert return_sum({'l': 21, 'o': 20, 'p': 42}) == 83", "assert return_sum({'j': 21, 'u': 16, 'd': 42}) == 79", "assert return_sum({'g': 29, 'd': 15, 'c': 48}) == 92", "assert return_sum({'n': 16, 's': 47}) == 63", "assert return_sum({'p': 21, 'n': 16, 'd': 42}) == 79", "assert return_sum({'u': 27, 'x': 15, 'z': 44}) == 86", "assert return_sum({'x': 23, 'j': 18, 'm': 40}) == 81", "assert return_sum({'y': 26, 'v': 14, 'a': 42}) == 82", "assert return_sum({'u': 21, 'w': 23, 'k': 50}) == 94", "assert return_sum({'b': 28, 'h': 23, 'e': 45}) == 96", "assert return_sum({'i': 29, 'w': 49}) == 78", "assert return_sum({'a': 27, 'y': 17, 'f': 50}) == 94", "assert return_sum({'j': 29, 'u': 22, 'h': 50}) == 101", "assert return_sum({'u': 21, 'r': 17, 'p': 40}) == 78", "assert return_sum({'o': 25, 'q': 45}) == 70", "assert return_sum({'j': 21, 'g': 15, 'b': 47}) == 83", "assert return_sum({'j': 18, 'o': 46}) == 64", "assert return_sum({'g': 25, 'p': 14, 'b': 47}) == 86", "assert return_sum({'r': 28, 's': 14, 'l': 41}) == 83", "assert return_sum({'u': 28, 'w': 21, 'z': 49}) == 98", "assert return_sum({'a': 25, 'h': 21, 'v': 50}) == 96", "assert return_sum({'o': 25, 'b': 18, 'h': 50}) == 93", "assert return_sum({'u': 30, 'g': 21, 'm': 50}) == 101", "assert return_sum({'g': 25, 'v': 14, 'n': 47}) == 86", "assert return_sum({'n': 25, 'z': 18, 'e': 43}) == 86", "assert return_sum({'g': 23, 'l': 22, 'y': 40}) == 85", "assert return_sum({'i': 21, 'e': 19, 'c': 45}) == 85", "assert return_sum({'o': 28, 'j': 22, 'y': 43}) == 93", "assert return_sum({'g': 32, 'm': 34, 'b': 53}) == 119", "assert return_sum({'q': 38, 's': 40, 'v': 45}) == 123", "assert return_sum({'n': 35, 'e': 43, 'p': 51}) == 129", "assert return_sum({'w': 31, 'n': 35, 'h': 44}) == 110", "assert return_sum({'d': 35, 'a': 41, 'k': 54}) == 130", "assert return_sum({'u': 38, 'o': 42, 'y': 46}) == 126", "assert return_sum({'q': 37, 'a': 39, 'm': 48}) == 124", "assert return_sum({'i': 38, 'g': 36, 'q': 51}) == 125", "assert return_sum({'l': 37, 'g': 38, 'e': 54}) == 129", "assert return_sum({'g': 34, 'b': 39, 'z': 53}) == 126", "assert return_sum({'w': 31, 'z': 35, 'd': 44}) == 110", "assert return_sum({'r': 32, 'o': 38, 'j': 46}) == 116", "assert return_sum({'y': 31, 'v': 34, 'a': 45}) == 110", "assert return_sum({'x': 35, 'd': 37, 's': 50}) == 122", "assert return_sum({'b': 35, 'k': 41, 'f': 51}) == 127", "assert return_sum({'x': 34, 'y': 39, 'z': 44}) == 117", "assert return_sum({'p': 46, 'd': 44}) == 90", "assert return_sum({'s': 34, 'o': 34, 'r': 47}) == 115", "assert return_sum({'b': 37, 'd': 40, 'z': 47}) == 124", "assert return_sum({'v': 34, 'q': 42, 'i': 49}) == 125", "assert return_sum({'y': 35, 'j': 39, 'u': 47}) == 121", "assert return_sum({'v': 41, 'j': 40, 'x': 49}) == 130", "assert return_sum({'u': 35, 'h': 43, 'a': 50}) == 128", "assert return_sum({'e': 39, 'c': 36, 'x': 54}) == 129", "assert return_sum({'v': 31, 'u': 44, 'h': 50}) == 125", "assert return_sum({'t': 39, 'c': 39, 'w': 50}) == 128", "assert return_sum({'h': 43, 'd': 44}) == 87", "assert return_sum({'l': 39, 'e': 39, 'w': 53}) == 131", "assert return_sum({'o': 37, 'q': 35, 'k': 48}) == 120", "assert return_sum({'i': 35, 'f': 37, 'y': 45}) == 117", "assert return_sum({'c': 32, 'h': 38, 'i': 47}) == 117", "assert return_sum({'u': 34, 'l': 44, 'z': 51}) == 129", "assert return_sum({'p': 36, 't': 44, 'q': 52}) == 132"], "entry_point": "return_sum", "repair_prompt": ["Write function return_sum to find the sum of all items in the given dictionary. Ensure to handle cases where the dictionary is empty by returning a sum of zero.\nreturn_sum({'a': 100, 'b':200, 'c':300}) == 600\n"], "completions": ["from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all values in the dictionary. Returns 0 if the dictionary is empty.\n    \"\"\"\n    # Check if the dictionary is empty and return 0 if true\n    if not data:\n        return 0\n    \n    # Calculate the sum of all values in the dictionary using the built-in sum() function\n    total_sum = sum(data.values())\n    \n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test with a dictionary containing numeric values\n    example_data = {'a': 100, 'b': 200, 'c': 300}\n    print(f\"Sum of values: {return_sum(example_data)}\")  # Expected output: 600\n\n    # Test with an empty dictionary\n    empty_data = {}\n    print(f\"Sum of values: {return_sum(empty_data)}\")  # Expected output: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values to sum.\n\n    Returns:\n    int: The sum of all values in the dictionary. Returns 0 if the dictionary is empty.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b': 200, 'c': 300})\n        600\n        >>> return_sum({})\n        0\n    \"\"\"\n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Iterate over the dictionary values and accumulate the sum\n    for value in data.values():\n        total_sum += value\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all values in the dictionary. Returns 0 if the dictionary is empty.\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum: int = 0\n\n    # Iterate over the values in the dictionary and add them to the total sum\n    for value in data.values():\n        total_sum += value\n\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a dictionary with values\n    result = return_sum({'a': 100, 'b': 200, 'c': 300})\n    print(f\"The sum of the dictionary values is: {result}\")  # Output: 600\n\n    # Test with an empty dictionary\n    result = return_sum({})\n    print(f\"The sum of the dictionary values is: {result}\")  # Output: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all values in the dictionary. Returns 0 if the dictionary is empty.\n    \"\"\"\n    # Check if the dictionary is empty and return 0 if true\n    if not data:\n        return 0\n    \n    # Calculate the sum of all values in the dictionary using the built-in sum function\n    total_sum = sum(data.values())\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a dictionary containing values\n    example_data = {'a': 100, 'b': 200, 'c': 300}\n    print(f\"Sum of values: {return_sum(example_data)}\")  # Expected output: 600\n\n    # Test with an empty dictionary\n    empty_data = {}\n    print(f\"Sum of values: {return_sum(empty_data)}\")  # Expected output: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Computes the sum of all values in the given dictionary.\n\n    Parameters:\n    data (dict): A dictionary with values that are integers.\n\n    Returns:\n    int: The sum of all values in the dictionary. Returns 0 if the dictionary is empty.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not data:\n        return 0\n    \n    # Sum the values in the dictionary\n    total_sum = sum(data.values())\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a dictionary containing values\n    result = return_sum({'a': 100, 'b': 200, 'c': 300})\n    print(f\"Sum of values: {result}\")  # Expected output: Sum of values: 600\n\n    # Test with an empty dictionary\n    result = return_sum({})\n    print(f\"Sum of values: {result}\")  # Expected output: Sum of values: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Computes the sum of all numeric values in the dictionary.\n\n    Args:\n        data (dict): A dictionary with numeric values.\n\n    Returns:\n        int: The sum of all numeric values in the dictionary, or zero if the dictionary is empty.\n    \"\"\"\n    # Initialize sum to zero\n    total_sum = 0\n\n    # Iterate over the dictionary values\n    for value in data.values():\n        # Check if the value is numeric\n        if isinstance(value, (int, float)):\n            total_sum += value\n        else:\n            # If a non-numeric value is encountered, raise a ValueError\n            raise ValueError(f\"Non-numeric value encountered: {value}\")\n\n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': 300})\n# print(result)  # Output: 600\n\n# result = return_sum({})\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all values in the dictionary. Returns 0 if the dictionary is empty.\n    \"\"\"\n    total_sum = 0\n    for value in data.values():\n        if isinstance(value, (int, float)):\n            total_sum += value\n    return total_sum\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    '''\n    Calculate the sum of all numeric values in the dictionary.\n\n    Parameters:\n    data (dict): A dictionary with numeric values.\n\n    Returns:\n    int: The sum of all numeric values in the dictionary. Returns 0 if the dictionary is empty.\n    Non-numeric values are ignored.\n    '''\n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            total_sum += value\n    \n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': 300})\n# print(result)  # Output: 600\n\n# result = return_sum({})\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n    If the dictionary is empty, return 0.\n    \n    Parameters:\n    data (dict): A dictionary with numeric values.\n    \n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    total_sum = 0\n    for key, value in data.items():\n        if isinstance(value, (int, float)):\n            total_sum += value\n        else:\n            # If a non-numeric value is encountered, it will be ignored.\n            # This behavior can be changed based on further requirements.\n            continue\n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': 300})\n# print(result)  # Output: 600\n\n# result = return_sum({})\n# print(result)  # Output: 0\n", "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    Args:\n        data (dict): A dictionary with values to sum.\n\n    Returns:\n        int: The sum of all numeric values in the dictionary.\n    \"\"\"\n    # Initialize sum to zero\n    total_sum = 0\n\n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add numeric value to total_sum\n            total_sum += value\n\n    # Return the computed sum\n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': 300})\n# print(result)  # Output: 600\n\n# result = return_sum({})\n# print(result)  # Output: 0\n"], "plans": ["requirement analysis:\nThe function should efficiently calculate the sum of values in a dictionary. It must handle empty dictionaries by returning zero, ensuring robustness. The implementation should be straightforward and compatible with various Python versions.\nrequirement pool:\n- Implement the main function to calculate the sum of dictionary values\n- Ensure the function handles empty dictionaries\n- Provide documentation and examples for usage\n- Optimize for performance with large dictionaries\n- Test compatibility with different Python versions\nWe will implement a simple function using Python's built-in sum() function to efficiently calculate the sum of dictionary values. This approach is straightforward and ensures compatibility with different Python versions. The function will handle empty dictionaries by returning zero, which addresses edge cases effectively.\n", "requirement analysis:\nThe function should efficiently calculate the sum of values in a dictionary, returning zero for empty dictionaries. It should be simple to use and integrate, with clear documentation to aid developers.\nrequirement pool:\n- The function must return the correct sum of dictionary values.\n- The function must handle empty dictionaries by returning zero.\n- The function should be compatible with multiple Python versions.\n- The function should be documented with examples.\n- The function should be optimized for performance.\nWe will implement a simple function using Python's built-in capabilities to iterate over dictionary values and calculate their sum. This approach ensures compatibility with multiple Python versions and avoids the complexity of external libraries. The function will handle empty dictionaries by returning zero, and it will be documented with examples for clarity.\n", "requirement analysis:\nThe function should efficiently calculate the sum of all values in a dictionary, returning zero if the dictionary is empty. It should be easy to use and integrate, with clear documentation to guide users.\nrequirement pool:\n- Accurate sum calculation\n- Handle empty dictionary\n- Efficient performance with large datasets\n- Clear documentation\n- Support for nested dictionaries\nWe will implement a simple function using Python's built-in capabilities to sum the values of a dictionary. The function will handle empty dictionaries by returning zero. We will not support nested dictionaries as the requirement is unclear, and focus on flat dictionaries for simplicity and efficiency.\n", "requirement analysis:\nThe function should iterate over the dictionary values and compute their sum. It must handle empty dictionaries by returning zero. The implementation should be efficient and easy to understand.\nrequirement pool:\n- Implement the main function to sum dictionary values\n- Handle edge cases such as empty dictionaries\n- Optimize for performance with large dictionaries\n- Provide comprehensive documentation\n- Include unit tests for various scenarios\nWe will implement a simple function that iterates over the dictionary values and computes their sum using Python's built-in sum function. This approach is efficient and straightforward, ensuring that the function handles empty dictionaries by returning zero. The function will be documented with examples and edge case handling.\n", "requirement analysis:\nThe function should accurately compute the sum of all values in a dictionary, returning zero for empty dictionaries. It should be optimized for performance, especially with large datasets, and handle edge cases gracefully.\nrequirement pool:\n- Accurate sum computation for dictionary values\n- Return zero for empty dictionaries\n- Optimize performance for large datasets\n- Graceful handling of edge cases\n- User-friendly function interface\nWe will implement a simple function using Python's built-in capabilities to sum the values of a dictionary. The function will handle empty dictionaries by returning zero. This approach ensures both simplicity and performance, leveraging Python's efficient handling of dictionary operations.\n", "requirement analysis:\nThe function should iterate over dictionary values and compute their sum. It must handle empty dictionaries by returning zero, ensuring robustness and reliability.\nrequirement pool:\n- Implement the main function to compute sum of dictionary values\n- Ensure the function returns zero for empty dictionaries\n- Optimize the function for large dictionaries\n- Include error handling for non-numeric values\n- Document the function usage and edge cases\nWe will implement a simple function that iterates over the dictionary values and computes their sum using Python's built-in sum function. This approach is efficient and straightforward for handling large datasets. We will ensure the function returns zero for empty dictionaries and include error handling for non-numeric values.\n", "requirement analysis:\nThe function should efficiently calculate the sum of values in a dictionary. It must handle empty dictionaries by returning zero, ensuring robustness. The implementation should be straightforward, leveraging Python's capabilities.\nrequirement pool:\n- Implement the main function to calculate the sum of dictionary values\n- Handle edge cases such as empty dictionaries\n- Document the function usage and examples\n- Ensure compatibility with different Python versions\n- Optimize for performance with large dictionaries\nWe will implement a simple function using Python's built-in capabilities to iterate over dictionary values and calculate their sum. The function will handle empty dictionaries by returning zero. We will ensure compatibility with different Python versions by using standard library functions.\n", "requirement analysis:\nThe function should efficiently calculate the sum of values in a dictionary, returning zero for empty dictionaries. It should be easy to use and integrate, with clear documentation for developers.\nrequirement pool:\n- Implement the main function to calculate sum\n- Handle empty dictionary cases\n- Ensure compatibility with large numbers\n- Provide documentation and examples\n- Optimize for performance\nWe will implement a simple function that iterates over the dictionary values and calculates their sum. The function will handle empty dictionaries by returning zero. We will use Python's built-in sum function for efficiency and simplicity, as it is well-suited for this task. We will also ensure that the function can handle large numbers by leveraging Python's inherent support for arbitrary-precision integers.\n", "requirement analysis:\nThe function should iterate over dictionary values and compute their sum. It must handle empty dictionaries by returning zero, ensuring robustness and reliability.\nrequirement pool:\n- Implement the sum calculation for dictionary values\n- Handle empty dictionary cases\n- Optimize for performance with large dictionaries\n- Ensure compatibility with different Python versions\n- Provide clear documentation and examples\nWe will implement a simple function that iterates over the values of the dictionary and computes their sum. The function will handle the case of an empty dictionary by returning zero. We will use Python's built-in capabilities to ensure efficiency and simplicity, avoiding the need for additional libraries since the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should iterate over dictionary values and compute their sum. It must handle empty dictionaries by returning zero, ensuring robustness and reliability.\nrequirement pool:\n- Implement sum calculation for dictionary values\n- Handle empty dictionary case\n- Optimize for large dictionaries\n- Ensure compatibility with various Python versions\n- Provide clear error messages for invalid inputs\nWe will implement a simple function that iterates over the dictionary values and computes their sum using Python's built-in sum function. This approach is efficient and handles the case of an empty dictionary by returning zero. We will ensure compatibility with various Python versions and handle non-numeric values gracefully by ignoring them during the sum calculation.\n"], "test": ["def check(return_sum):\n\tassert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "def check(return_sum):\n\tassert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "def check(return_sum):\n\tassert return_sum({'a': 36, 'b':39, 'c':49}) == 124", "def check(return_sum):\n\tassert return_sum({'k': 101, 'f': 199, 'n': 302}) == 602", "def check(return_sum):\n\tassert return_sum({'x': 97, 'i': 295}) == 392", "def check(return_sum):\n\tassert return_sum({'q': 95, 'u': 198, 'k': 298}) == 591", "def check(return_sum):\n\tassert return_sum({'d': 100, 'c': 200, 'y': 305}) == 605", "def check(return_sum):\n\tassert return_sum({'c': 105, 'z': 301}) == 406", "def check(return_sum):\n\tassert return_sum({'w': 99, 'm': 196, 'j': 295}) == 590", "def check(return_sum):\n\tassert return_sum({'t': 104, 'k': 198, 'q': 303}) == 605", "def check(return_sum):\n\tassert return_sum({'n': 98, 's': 203, 'r': 300}) == 601", "def check(return_sum):\n\tassert return_sum({'u': 96, 'i': 201, 'h': 303}) == 600", "def check(return_sum):\n\tassert return_sum({'d': 101, 'f': 197, 'q': 304}) == 602", "def check(return_sum):\n\tassert return_sum({'u': 99, 'g': 200, 'j': 299}) == 598", "def check(return_sum):\n\tassert return_sum({'j': 97, 'x': 197, 'd': 305}) == 599", "def check(return_sum):\n\tassert return_sum({'b': 99, 'h': 204, 'z': 303}) == 606", "def check(return_sum):\n\tassert return_sum({'p': 104, 'u': 198, 'k': 295}) == 597", "def check(return_sum):\n\tassert return_sum({'p': 102, 'l': 201, 'h': 300}) == 603", "def check(return_sum):\n\tassert return_sum({'r': 95, 'l': 204, 'j': 304}) == 603", "def check(return_sum):\n\tassert return_sum({'o': 101, 's': 198, 'h': 297}) == 596", "def check(return_sum):\n\tassert return_sum({'l': 96, 'b': 195, 'g': 303}) == 594", "def check(return_sum):\n\tassert return_sum({'p': 97, 'r': 205, 'j': 303}) == 605", "def check(return_sum):\n\tassert return_sum({'v': 104, 'd': 204, 'm': 295}) == 603", "def check(return_sum):\n\tassert return_sum({'a': 105, 'm': 200, 'n': 297}) == 602", "def check(return_sum):\n\tassert return_sum({'v': 103, 'q': 198, 'r': 298}) == 599", "def check(return_sum):\n\tassert return_sum({'y': 99, 'w': 203, 'v': 295}) == 597", "def check(return_sum):\n\tassert return_sum({'l': 102, 's': 205, 'r': 299}) == 606", "def check(return_sum):\n\tassert return_sum({'d': 196, 'c': 296}) == 492", "def check(return_sum):\n\tassert return_sum({'u': 97, 'g': 197, 'a': 298}) == 592", "def check(return_sum):\n\tassert return_sum({'m': 96, 'u': 196, 'g': 300}) == 592", "def check(return_sum):\n\tassert return_sum({'a': 105, 'n': 200, 's': 296}) == 601", "def check(return_sum):\n\tassert return_sum({'w': 100, 'k': 296}) == 396", "def check(return_sum):\n\tassert return_sum({'v': 97, 'x': 200, 's': 297}) == 594", "def check(return_sum):\n\tassert return_sum({'u': 102, 't': 202, 'l': 296}) == 600", "def check(return_sum):\n\tassert return_sum({'x': 103, 'f': 203, 'd': 299}) == 605", "def check(return_sum):\n\tassert return_sum({'h': 98, 'x': 202, 't': 299}) == 599", "def check(return_sum):\n\tassert return_sum({'j': 22, 'e': 17, 'b': 48}) == 87", "def check(return_sum):\n\tassert return_sum({'x': 22, 'j': 19, 'u': 46}) == 87", "def check(return_sum):\n\tassert return_sum({'k': 29, 'n': 14, 'y': 42}) == 85", "def check(return_sum):\n\tassert return_sum({'y': 30, 'h': 17, 'k': 46}) == 93", "def check(return_sum):\n\tassert return_sum({'t': 29, 'r': 15, 'e': 43}) == 87", "def check(return_sum):\n\tassert return_sum({'l': 21, 'o': 20, 'p': 42}) == 83", "def check(return_sum):\n\tassert return_sum({'j': 21, 'u': 16, 'd': 42}) == 79", "def check(return_sum):\n\tassert return_sum({'g': 29, 'd': 15, 'c': 48}) == 92", "def check(return_sum):\n\tassert return_sum({'n': 16, 's': 47}) == 63", "def check(return_sum):\n\tassert return_sum({'p': 21, 'n': 16, 'd': 42}) == 79", "def check(return_sum):\n\tassert return_sum({'u': 27, 'x': 15, 'z': 44}) == 86", "def check(return_sum):\n\tassert return_sum({'x': 23, 'j': 18, 'm': 40}) == 81", "def check(return_sum):\n\tassert return_sum({'y': 26, 'v': 14, 'a': 42}) == 82", "def check(return_sum):\n\tassert return_sum({'u': 21, 'w': 23, 'k': 50}) == 94", "def check(return_sum):\n\tassert return_sum({'b': 28, 'h': 23, 'e': 45}) == 96", "def check(return_sum):\n\tassert return_sum({'i': 29, 'w': 49}) == 78", "def check(return_sum):\n\tassert return_sum({'a': 27, 'y': 17, 'f': 50}) == 94", "def check(return_sum):\n\tassert return_sum({'j': 29, 'u': 22, 'h': 50}) == 101", "def check(return_sum):\n\tassert return_sum({'u': 21, 'r': 17, 'p': 40}) == 78", "def check(return_sum):\n\tassert return_sum({'o': 25, 'q': 45}) == 70", "def check(return_sum):\n\tassert return_sum({'j': 21, 'g': 15, 'b': 47}) == 83", "def check(return_sum):\n\tassert return_sum({'j': 18, 'o': 46}) == 64", "def check(return_sum):\n\tassert return_sum({'g': 25, 'p': 14, 'b': 47}) == 86", "def check(return_sum):\n\tassert return_sum({'r': 28, 's': 14, 'l': 41}) == 83", "def check(return_sum):\n\tassert return_sum({'u': 28, 'w': 21, 'z': 49}) == 98", "def check(return_sum):\n\tassert return_sum({'a': 25, 'h': 21, 'v': 50}) == 96", "def check(return_sum):\n\tassert return_sum({'o': 25, 'b': 18, 'h': 50}) == 93", "def check(return_sum):\n\tassert return_sum({'u': 30, 'g': 21, 'm': 50}) == 101", "def check(return_sum):\n\tassert return_sum({'g': 25, 'v': 14, 'n': 47}) == 86", "def check(return_sum):\n\tassert return_sum({'n': 25, 'z': 18, 'e': 43}) == 86", "def check(return_sum):\n\tassert return_sum({'g': 23, 'l': 22, 'y': 40}) == 85", "def check(return_sum):\n\tassert return_sum({'i': 21, 'e': 19, 'c': 45}) == 85", "def check(return_sum):\n\tassert return_sum({'o': 28, 'j': 22, 'y': 43}) == 93", "def check(return_sum):\n\tassert return_sum({'g': 32, 'm': 34, 'b': 53}) == 119", "def check(return_sum):\n\tassert return_sum({'q': 38, 's': 40, 'v': 45}) == 123", "def check(return_sum):\n\tassert return_sum({'n': 35, 'e': 43, 'p': 51}) == 129", "def check(return_sum):\n\tassert return_sum({'w': 31, 'n': 35, 'h': 44}) == 110", "def check(return_sum):\n\tassert return_sum({'d': 35, 'a': 41, 'k': 54}) == 130", "def check(return_sum):\n\tassert return_sum({'u': 38, 'o': 42, 'y': 46}) == 126", "def check(return_sum):\n\tassert return_sum({'q': 37, 'a': 39, 'm': 48}) == 124", "def check(return_sum):\n\tassert return_sum({'i': 38, 'g': 36, 'q': 51}) == 125", "def check(return_sum):\n\tassert return_sum({'l': 37, 'g': 38, 'e': 54}) == 129", "def check(return_sum):\n\tassert return_sum({'g': 34, 'b': 39, 'z': 53}) == 126", "def check(return_sum):\n\tassert return_sum({'w': 31, 'z': 35, 'd': 44}) == 110", "def check(return_sum):\n\tassert return_sum({'r': 32, 'o': 38, 'j': 46}) == 116", "def check(return_sum):\n\tassert return_sum({'y': 31, 'v': 34, 'a': 45}) == 110", "def check(return_sum):\n\tassert return_sum({'x': 35, 'd': 37, 's': 50}) == 122", "def check(return_sum):\n\tassert return_sum({'b': 35, 'k': 41, 'f': 51}) == 127", "def check(return_sum):\n\tassert return_sum({'x': 34, 'y': 39, 'z': 44}) == 117", "def check(return_sum):\n\tassert return_sum({'p': 46, 'd': 44}) == 90", "def check(return_sum):\n\tassert return_sum({'s': 34, 'o': 34, 'r': 47}) == 115", "def check(return_sum):\n\tassert return_sum({'b': 37, 'd': 40, 'z': 47}) == 124", "def check(return_sum):\n\tassert return_sum({'v': 34, 'q': 42, 'i': 49}) == 125", "def check(return_sum):\n\tassert return_sum({'y': 35, 'j': 39, 'u': 47}) == 121", "def check(return_sum):\n\tassert return_sum({'v': 41, 'j': 40, 'x': 49}) == 130", "def check(return_sum):\n\tassert return_sum({'u': 35, 'h': 43, 'a': 50}) == 128", "def check(return_sum):\n\tassert return_sum({'e': 39, 'c': 36, 'x': 54}) == 129", "def check(return_sum):\n\tassert return_sum({'v': 31, 'u': 44, 'h': 50}) == 125", "def check(return_sum):\n\tassert return_sum({'t': 39, 'c': 39, 'w': 50}) == 128", "def check(return_sum):\n\tassert return_sum({'h': 43, 'd': 44}) == 87", "def check(return_sum):\n\tassert return_sum({'l': 39, 'e': 39, 'w': 53}) == 131", "def check(return_sum):\n\tassert return_sum({'o': 37, 'q': 35, 'k': 48}) == 120", "def check(return_sum):\n\tassert return_sum({'i': 35, 'f': 37, 'y': 45}) == 117", "def check(return_sum):\n\tassert return_sum({'c': 32, 'h': 38, 'i': 47}) == 117", "def check(return_sum):\n\tassert return_sum({'u': 34, 'l': 44, 'z': 51}) == 129", "def check(return_sum):\n\tassert return_sum({'p': 36, 't': 44, 'q': 52}) == 132"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef return_sum(data: dict) -> int:\n    \"\"\"\n    Calculate the sum of all numeric values in the dictionary.\n\n    Args:\n        data (dict): A dictionary with values to sum.\n\n    Returns:\n        int: The sum of all numeric values in the dictionary.\n    \"\"\"\n    # Initialize sum to zero\n    total_sum = 0\n\n    # Iterate over dictionary values\n    for value in data.values():\n        # Check if the value is numeric (int or float)\n        if isinstance(value, (int, float)):\n            # Add numeric value to total_sum\n            total_sum += value\n\n    # Return the computed sum\n    return total_sum\n\n# Example usage:\n# result = return_sum({'a': 100, 'b': 200, 'c': 300})\n# print(result)  # Output: 600\n\n# result = return_sum({})\n# print(result)  # Output: 0\n", "passed": true, "pass": true, "pass_num": 10, "round": 705, "mutate_method": "add_1_sentence_at_end", "parent_index": 260}
