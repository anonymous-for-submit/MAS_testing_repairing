{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 265, "prompt": "Write a function that takes in a list and an integer n. The function should then split the list for every nth element. This process involves iterating through the list and breaking it at intervals defined by n. It will return a list of the resulting lists.", "code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "test_imports": [], "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ", "assert list_split(['j', 'q', 'l', 'd', 'n', 'j', 'm', 'j', 'b', 'w', 'v', 'u', 'q', 'z'], 6) == [['j', 'm', 'q'], ['q', 'j', 'z'], ['l', 'b'], ['d', 'w'], ['n', 'v'], ['j', 'u']]", "assert list_split(['j', 's', 'n', 'f', 's', 'q', 'f', 'v', 'k', 'd', 'q', 'm', 'c', 'q'], 2) == [['j', 'n', 's', 'f', 'k', 'q', 'c'], ['s', 'f', 'q', 'v', 'd', 'm', 'q']]", "assert list_split(['h', 'k', 't', 'a', 'b', 'p', 'h', 's', 'y', 'm', 'x', 'f', 'u', 'f'], 4) == [['h', 'b', 'y', 'u'], ['k', 'p', 'm', 'f'], ['t', 'h', 'x'], ['a', 's', 'f']]", "assert list_split(['x', 'j', 'w', 'x', 'b', 'x', 'w', 'm', 'b', 'b', 'y', 'p', 'g', 'o'], 6) == [['x', 'w', 'g'], ['j', 'm', 'o'], ['w', 'b'], ['x', 'b'], ['b', 'y'], ['x', 'p']]", "assert list_split(['u', 'j', 'm', 'i', 'h', 't', 'q', 'c', 'w', 'e', 'y', 'o', 'o', 'e'], 2) == [['u', 'm', 'h', 'q', 'w', 'y', 'o'], ['j', 'i', 't', 'c', 'e', 'o', 'e']]", "assert list_split(['s', 'z', 'j', 'y', 'c', 'p', 'i', 'd', 'l', 'v', 'o', 'k', 'y', 'a'], 3) == [['s', 'y', 'i', 'v', 'y'], ['z', 'c', 'd', 'o', 'a'], ['j', 'p', 'l', 'k']]", "assert list_split(['p', 'o', 'u', 'd', 'r', 'w', 'b', 'u', 'j', 't', 'a', 'v', 'c', 'b'], 8) == [['p', 'j'], ['o', 't'], ['u', 'a'], ['d', 'v'], ['r', 'c'], ['w', 'b'], ['b'], ['u']]", "assert list_split(['v', 'e', 'z', 'w', 'u', 'h', 'j', 'o', 'f', 'n', 't', 'p', 'u', 'k'], 6) == [['v', 'j', 'u'], ['e', 'o', 'k'], ['z', 'f'], ['w', 'n'], ['u', 't'], ['h', 'p']]", "assert list_split(['d', 'l', 'p', 'v', 'j', 'k', 'v', 'p', 'b', 'f', 'i', 'w', 'b', 'r'], 5) == [['d', 'k', 'i'], ['l', 'v', 'w'], ['p', 'p', 'b'], ['v', 'b', 'r'], ['j', 'f']]", "assert list_split(['k', 'u', 'c', 't', 'n', 'd', 'y', 'e', 'n', 'b', 'f', 'z', 'k', 'm'], 5) == [['k', 'd', 'f'], ['u', 'y', 'z'], ['c', 'e', 'k'], ['t', 'n', 'm'], ['n', 'b']]", "assert list_split(['b', 'm', 'f', 'p', 'p', 'v', 'p', 'n', 'v', 'h', 'g', 'h', 'h', 'l'], 7) == [['b', 'n'], ['m', 'v'], ['f', 'h'], ['p', 'g'], ['p', 'h'], ['v', 'h'], ['p', 'l']]", "assert list_split(['w', 'j', 'm', 'h', 'y', 'c', 'k', 'e', 'v', 's', 'f', 'q', 'l', 'p'], 8) == [['w', 'v'], ['j', 's'], ['m', 'f'], ['h', 'q'], ['y', 'l'], ['c', 'p'], ['k'], ['e']]", "assert list_split(['v', 'g', 'm', 'i', 'v', 'u', 'b', 'i', 'b', 'c', 'j', 'j', 's', 'z'], 5) == [['v', 'u', 'j'], ['g', 'b', 'j'], ['m', 'i', 's'], ['i', 'b', 'z'], ['v', 'c']]", "assert list_split(['z', 'm', 'x', 'r', 'i', 't', 'p', 'o', 'u', 'n', 'a', 'j', 'e', 'i'], 2) == [['z', 'x', 'i', 'p', 'u', 'a', 'e'], ['m', 'r', 't', 'o', 'n', 'j', 'i']]", "assert list_split(['q', 'p', 'l', 't', 'i', 'd', 'k', 'x', 'n', 'j', 'g', 'i', 'k', 'l'], 8) == [['q', 'n'], ['p', 'j'], ['l', 'g'], ['t', 'i'], ['i', 'k'], ['d', 'l'], ['k'], ['x']]", "assert list_split(['g', 'j', 'q', 'y', 's', 'g', 'l', 'x', 't', 't', 'c', 's', 'm', 'h'], 8) == [['g', 't'], ['j', 't'], ['q', 'c'], ['y', 's'], ['s', 'm'], ['g', 'h'], ['l'], ['x']]", "assert list_split(['d', 'i', 'b', 's', 'b', 'g', 'g', 'i', 'l', 'd', 'm', 'y', 'x', 'z'], 5) == [['d', 'g', 'm'], ['i', 'g', 'y'], ['b', 'i', 'x'], ['s', 'l', 'z'], ['b', 'd']]", "assert list_split(['p', 'l', 's', 'w', 'l', 'p', 'f', 'd', 'w', 'i', 'j', 'l', 'h', 'n'], 3) == [['p', 'w', 'f', 'i', 'h'], ['l', 'l', 'd', 'j', 'n'], ['s', 'p', 'w', 'l']]", "assert list_split(['m', 'n', 'b', 'b', 'k', 'g', 'u', 'n', 'q', 'q', 'd', 't', 'y', 'a'], 3) == [['m', 'b', 'u', 'q', 'y'], ['n', 'k', 'n', 'd', 'a'], ['b', 'g', 'q', 't']]", "assert list_split(['c', 'p', 'e', 't', 'q', 'o', 'o', 'i', 'p', 'x', 'r', 'y', 'y', 'j'], 2) == [['c', 'e', 'q', 'o', 'p', 'r', 'y'], ['p', 't', 'o', 'i', 'x', 'y', 'j']]", "assert list_split(['j', 'r', 'o', 'f', 'f', 'u', 'x', 't', 'p', 'o', 'c', 'f', 'x', 'f'], 8) == [['j', 'p'], ['r', 'o'], ['o', 'c'], ['f', 'f'], ['f', 'x'], ['u', 'f'], ['x'], ['t']]", "assert list_split(['b', 'j', 'a', 'u', 'q', 'c', 't', 'd', 'h', 'a', 'x', 'r', 'x', 'o'], 8) == [['b', 'h'], ['j', 'a'], ['a', 'x'], ['u', 'r'], ['q', 'x'], ['c', 'o'], ['t'], ['d']]", "assert list_split(['n', 'r', 'r', 'j', 'e', 't', 'f', 's', 'x', 'x', 'y', 'b', 'e', 'z'], 6) == [['n', 'f', 'e'], ['r', 's', 'z'], ['r', 'x'], ['j', 'x'], ['e', 'y'], ['t', 'b']]", "assert list_split(['b', 'w', 'u', 'r', 'f', 'h', 't', 'o', 'f', 'm', 'k', 'g', 'l', 'f'], 6) == [['b', 't', 'l'], ['w', 'o', 'f'], ['u', 'f'], ['r', 'm'], ['f', 'k'], ['h', 'g']]", "assert list_split(['y', 'j', 'o', 'd', 'f', 'x', 'n', 'p', 'd', 'a', 'a', 's', 'l', 't'], 2) == [['y', 'o', 'f', 'n', 'd', 'a', 'l'], ['j', 'd', 'x', 'p', 'a', 's', 't']]", "assert list_split(['f', 'v', 'h', 'k', 'c', 'x', 'r', 'l', 'z', 'x', 'j', 'r', 'f', 'l'], 5) == [['f', 'x', 'j'], ['v', 'r', 'r'], ['h', 'l', 'f'], ['k', 'z', 'l'], ['c', 'x']]", "assert list_split(['b', 'j', 'd', 'm', 'v', 't', 'g', 'o', 'q', 'd', 'l', 'p', 'b', 'w'], 5) == [['b', 't', 'l'], ['j', 'g', 'p'], ['d', 'o', 'b'], ['m', 'q', 'w'], ['v', 'd']]", "assert list_split(['y', 'y', 'i', 'q', 'x', 'w', 'r', 'o', 'i', 't', 'd', 't', 'k', 'f'], 6) == [['y', 'r', 'k'], ['y', 'o', 'f'], ['i', 'i'], ['q', 't'], ['x', 'd'], ['w', 't']]", "assert list_split(['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c'], 1) == [['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c']]", "assert list_split(['p', 't', 'c', 'h', 'b', 'y', 'n', 'z', 'k', 'p', 'z', 'f', 'w', 'z'], 6) == [['p', 'n', 'w'], ['t', 'z', 'z'], ['c', 'k'], ['h', 'p'], ['b', 'z'], ['y', 'f']]", "assert list_split(['h', 'n', 'a', 'p', 'n', 't', 'z', 'u', 'j', 'n', 'z', 'w', 'a', 'h'], 5) == [['h', 't', 'z'], ['n', 'z', 'w'], ['a', 'u', 'a'], ['p', 'j', 'h'], ['n', 'n']]", "assert list_split(['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c'], 1) == [['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c']]", "assert list_split(['p', 'b', 'e', 't', 'q', 'y', 'f', 'o', 'r', 'i', 'r', 'b', 's', 'r'], 4) == [['p', 'q', 'r', 's'], ['b', 'y', 'i', 'r'], ['e', 'f', 'r'], ['t', 'o', 'b']]", "assert list_split([1, 7, 6, 6, 6, 7, 2, 13, 14, 8, 7, 15, 11, 13], 8) == [[1, 14], [7, 8], [6, 7], [6, 15], [6, 11], [7, 13], [2], [13]]", "assert list_split([2, 1, 6, 6, 3, 2, 10, 5, 6, 8, 8, 14, 15, 18], 4) == [[2, 3, 6, 15], [1, 2, 8, 18], [6, 10, 8], [6, 5, 14]]", "assert list_split([3, 2, 3, 6, 4, 11, 9, 8, 13, 9, 7, 10, 10, 9], 6) == [[3, 9, 10], [2, 8, 9], [3, 13], [6, 9], [4, 7], [11, 10]]", "assert list_split([6, 3, 7, 9, 3, 5, 8, 4, 10, 12, 12, 15, 14, 13], 4) == [[6, 3, 10, 14], [3, 5, 12, 13], [7, 8, 12], [9, 4, 15]]", "assert list_split([1, 5, 4, 5, 7, 3, 8, 8, 12, 9, 15, 9, 18, 15], 4) == [[1, 7, 12, 18], [5, 3, 9, 15], [4, 8, 15], [5, 8, 9]]", "assert list_split([4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13], 1) == [[4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13]]", "assert list_split([4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16], 1) == [[4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16]]", "assert list_split([5, 2, 2, 4, 7, 11, 3, 3, 12, 5, 13, 14, 16, 16], 3) == [[5, 4, 3, 5, 16], [2, 7, 3, 13, 16], [2, 11, 12, 14]]", "assert list_split([3, 4, 8, 6, 10, 8, 8, 8, 10, 13, 7, 17, 17, 16], 4) == [[3, 10, 10, 17], [4, 8, 13, 16], [8, 8, 7], [6, 8, 17]]", "assert list_split([1, 7, 5, 4, 2, 3, 11, 10, 6, 11, 14, 11, 8, 12], 4) == [[1, 2, 6, 8], [7, 3, 11, 12], [5, 11, 14], [4, 10, 11]]", "assert list_split([2, 1, 4, 8, 6, 1, 3, 6, 11, 15, 8, 7, 8, 10], 4) == [[2, 6, 11, 8], [1, 1, 15, 10], [4, 3, 8], [8, 6, 7]]", "assert list_split([1, 5, 8, 4, 3, 5, 9, 3, 6, 12, 8, 13, 12, 9], 8) == [[1, 6], [5, 12], [8, 8], [4, 13], [3, 12], [5, 9], [9], [3]]", "assert list_split([6, 6, 8, 5, 2, 7, 8, 13, 14, 10, 6, 9, 14, 14], 5) == [[6, 7, 6], [6, 8, 9], [8, 13, 14], [5, 14, 14], [2, 10]]", "assert list_split([3, 4, 8, 9, 6, 11, 6, 9, 6, 12, 6, 17, 18, 17], 3) == [[3, 9, 6, 12, 18], [4, 6, 9, 6, 17], [8, 11, 6, 17]]", "assert list_split([4, 5, 4, 9, 10, 6, 12, 4, 10, 9, 16, 13, 17, 10], 8) == [[4, 10], [5, 9], [4, 16], [9, 13], [10, 17], [6, 10], [12], [4]]", "assert list_split([1, 5, 5, 3, 6, 10, 3, 10, 12, 15, 12, 10, 14, 16], 2) == [[1, 5, 6, 3, 12, 12, 14], [5, 3, 10, 10, 15, 10, 16]]", "assert list_split([5, 5, 8, 7, 3, 5, 9, 9, 5, 5, 9, 12, 11, 16], 3) == [[5, 7, 9, 5, 11], [5, 3, 9, 9, 16], [8, 5, 5, 12]]", "assert list_split([6, 3, 8, 2, 6, 3, 5, 7, 5, 6, 13, 17, 14, 17], 3) == [[6, 2, 5, 6, 14], [3, 6, 7, 13, 17], [8, 3, 5, 17]]", "assert list_split([5, 4, 6, 6, 8, 3, 4, 12, 6, 15, 12, 11, 9, 17], 2) == [[5, 6, 8, 4, 6, 12, 9], [4, 6, 3, 12, 15, 11, 17]]", "assert list_split([3, 1, 3, 9, 5, 6, 6, 4, 11, 11, 10, 14, 10, 17], 7) == [[3, 4], [1, 11], [3, 11], [9, 10], [5, 14], [6, 10], [6, 17]]", "assert list_split([4, 3, 1, 3, 7, 10, 10, 5, 5, 11, 11, 14, 17, 9], 4) == [[4, 7, 5, 17], [3, 10, 11, 9], [1, 10, 11], [3, 5, 14]]", "assert list_split([2, 3, 8, 9, 4, 9, 11, 12, 11, 15, 13, 10, 11, 17], 7) == [[2, 12], [3, 11], [8, 15], [9, 13], [4, 10], [9, 11], [11, 17]]", "assert list_split([2, 5, 3, 1, 5, 8, 3, 7, 10, 5, 14, 15, 14, 11], 4) == [[2, 5, 10, 14], [5, 8, 5, 11], [3, 3, 14], [1, 7, 15]]", "assert list_split([5, 7, 6, 6, 9, 9, 4, 10, 4, 11, 12, 15, 9, 11], 6) == [[5, 4, 9], [7, 10, 11], [6, 4], [6, 11], [9, 12], [9, 15]]", "assert list_split([5, 2, 7, 6, 5, 6, 5, 6, 5, 6, 13, 17, 12, 16], 7) == [[5, 6], [2, 5], [7, 6], [6, 13], [5, 17], [6, 12], [5, 16]]", "assert list_split([5, 2, 4, 4, 1, 10, 3, 13, 11, 8, 12, 14, 9, 13], 3) == [[5, 4, 3, 8, 9], [2, 1, 13, 12, 13], [4, 10, 11, 14]]", "assert list_split([1, 4, 7, 2, 7, 8, 12, 4, 12, 5, 12, 9, 9, 16], 7) == [[1, 4], [4, 12], [7, 5], [2, 12], [7, 9], [8, 9], [12, 16]]", "assert list_split([4, 5, 7, 5, 6, 7, 9, 6, 8, 11, 6, 15, 15, 18], 6) == [[4, 9, 15], [5, 6, 18], [7, 8], [5, 11], [6, 6], [7, 15]]", "assert list_split([6, 1, 1, 9, 8, 11, 10, 5, 10, 7, 7, 9, 13, 9], 3) == [[6, 9, 10, 7, 13], [1, 8, 5, 7, 9], [1, 11, 10, 9]]", "assert list_split([3, 5, 8, 1, 7, 3, 7, 13, 10, 15, 9, 12, 12, 14], 5) == [[3, 3, 9], [5, 7, 12], [8, 13, 12], [1, 10, 14], [7, 15]]", "assert list_split([5, 5, 4, 8, 9, 9, 8, 5, 7, 13, 6, 8, 17, 19], 3) == [[5, 8, 8, 13, 17], [5, 9, 5, 6, 19], [4, 9, 7, 8]]", "assert list_split([2, 4, 6, 5, 4, 5, 5, 13, 7, 7, 9, 16, 16, 10], 7) == [[2, 13], [4, 7], [6, 7], [5, 9], [4, 16], [5, 16], [5, 10]]", "assert list_split([3, 5, 5, 1, 5, 8, 5, 12, 14, 7, 10, 15, 12, 15], 4) == [[3, 5, 14, 12], [5, 8, 7, 15], [5, 5, 10], [1, 12, 15]]", "assert list_split(['mldawzqafgqy', 'hjxingcz', 'F', 'O<@YV>', 'WUOU', 'ASTU'], 2) == [['mldawzqafgqy', 'F', 'WUOU'], ['hjxingcz', 'O<@YV>', 'ASTU']]", "assert list_split(['jxwlgjrckp', 'ygn', 'W', 'TOSJ/JB~', 'TAM', 'ZPYWLK'], 4) == [['jxwlgjrckp', 'TAM'], ['ygn', 'ZPYWLK'], ['W'], ['TOSJ/JB~']]", "assert list_split(['zzczoyjvne', 'uyy', 'B', '*>C>', 'KETDI', 'PFDYPK'], 6) == [['zzczoyjvne'], ['uyy'], ['B'], ['*>C>'], ['KETDI'], ['PFDYPK']]", "assert list_split(['pflcapycprf', 'foz', 'P', '-$%PNP:', 'KKI', 'LJUQIH'], 5) == [['pflcapycprf', 'LJUQIH'], ['foz'], ['P'], ['-$%PNP:'], ['KKI']]", "assert list_split(['aqzshftajzav', 'sqlmrk', 'U', 'OO!KZTC', 'WRBM', 'ZGT'], 4) == [['aqzshftajzav', 'WRBM'], ['sqlmrk', 'ZGT'], ['U'], ['OO!KZTC']]", "assert list_split(['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY'], 1) == [['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY']]", "assert list_split(['rlbvnzwbbwg', 'yvd', 'B', 'HF<HC', 'PMRELUQ', 'UKEAHLH'], 4) == [['rlbvnzwbbwg', 'PMRELUQ'], ['yvd', 'UKEAHLH'], ['B'], ['HF<HC']]", "assert list_split(['wom', 'odh', 'M', '_ZVM', 'ONNGKAO', 'FGOHBQPK'], 7) == [['wom'], ['odh'], ['M'], ['_ZVM'], ['ONNGKAO'], ['FGOHBQPK'], []]", "assert list_split(['hcujy', 'ftu', 'T', '<LL>KJ', 'UGDLK', 'VEC'], 7) == [['hcujy'], ['ftu'], ['T'], ['<LL>KJ'], ['UGDLK'], ['VEC'], []]", "assert list_split(['rrhhrpcssoql', 'rqfjytod', 'I', 'YA&$R', 'NYV', 'LHVZWFPJA'], 3) == [['rrhhrpcssoql', 'YA&$R'], ['rqfjytod', 'NYV'], ['I', 'LHVZWFPJA']]", "assert list_split(['vgeciikehj', 'vsxucvfb', 'H', '>UA', 'AJFSSVKI', 'JZP'], 2) == [['vgeciikehj', 'H', 'AJFSSVKI'], ['vsxucvfb', '>UA', 'JZP']]", "assert list_split(['tpimgzkzrc', 'ytm', 'Y', 'B-+-SHJ', 'PKUN', 'GQBHT'], 5) == [['tpimgzkzrc', 'GQBHT'], ['ytm'], ['Y'], ['B-+-SHJ'], ['PKUN']]", "assert list_split(['zjdsfcnfs', 'pfnuxdal', 'I', '#S>^', 'CFFWC', 'AJGBG'], 2) == [['zjdsfcnfs', 'I', 'CFFWC'], ['pfnuxdal', '#S>^', 'AJGBG']]", "assert list_split(['huyb', 'wgvyu', 'E', 'L&P', 'YEDISE', 'RUJEDJ'], 3) == [['huyb', 'L&P'], ['wgvyu', 'YEDISE'], ['E', 'RUJEDJ']]", "assert list_split(['kuk', 'tactevqo', 'L', '>RU=E', 'DBIU', 'BRZ'], 6) == [['kuk'], ['tactevqo'], ['L'], ['>RU=E'], ['DBIU'], ['BRZ']]", "assert list_split(['qxqkppyenhqc', 'kackpnmg', 'U', '^<LZ/', 'PAH', 'IXWHEGL'], 3) == [['qxqkppyenhqc', '^<LZ/'], ['kackpnmg', 'PAH'], ['U', 'IXWHEGL']]", "assert list_split(['cgk', 'uzmezww', 'P', 'UFUZNT', 'WOEPJ', 'YHEXMO'], 7) == [['cgk'], ['uzmezww'], ['P'], ['UFUZNT'], ['WOEPJ'], ['YHEXMO'], []]", "assert list_split(['sckskgqqom', 'orbqe', 'J', 'J<+&', 'XEVBTEX', 'JTR'], 2) == [['sckskgqqom', 'J', 'XEVBTEX'], ['orbqe', 'J<+&', 'JTR']]", "assert list_split(['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB'], 1) == [['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB']]", "assert list_split(['eiqi', 'bpvkpkm', 'U', 'P*:D|JDEE', 'FLFEQADYF', 'SKI'], 5) == [['eiqi', 'SKI'], ['bpvkpkm'], ['U'], ['P*:D|JDEE'], ['FLFEQADYF']]", "assert list_split(['uqfbqo', 'ygyykebkp', 'G', 'D_JL/', 'BBHWSSTWN', 'KSLTRM'], 3) == [['uqfbqo', 'D_JL/'], ['ygyykebkp', 'BBHWSSTWN'], ['G', 'KSLTRM']]", "assert list_split(['ptkalnuif', 'frhje', 'E', 'JCSF<:B', 'YLHFRIVGN', 'FKM'], 2) == [['ptkalnuif', 'E', 'YLHFRIVGN'], ['frhje', 'JCSF<:B', 'FKM']]", "assert list_split(['fthdke', 'vczvnb', 'Y', 'V-H^N', 'OIQB', 'QOLQYGUY'], 3) == [['fthdke', 'V-H^N'], ['vczvnb', 'OIQB'], ['Y', 'QOLQYGUY']]", "assert list_split(['ccjtgkfqti', 'xqu', 'O', 'O<@D_W', 'TEHKWQPO', 'NVRTJ'], 2) == [['ccjtgkfqti', 'O', 'TEHKWQPO'], ['xqu', 'O<@D_W', 'NVRTJ']]", "assert list_split(['kjqifx', 'gnztfgx', 'C', '<%ZWTVI', 'QHV', 'WVAXRVY'], 3) == [['kjqifx', '<%ZWTVI'], ['gnztfgx', 'QHV'], ['C', 'WVAXRVY']]", "assert list_split(['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT'], 1) == [['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT']]", "assert list_split(['ykqmukk', 'sproluv', 'V', 'V=R@RY$/P', 'GKDNPCP', 'IIIJSOS'], 4) == [['ykqmukk', 'GKDNPCP'], ['sproluv', 'IIIJSOS'], ['V'], ['V=R@RY$/P']]", "assert list_split(['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG'], 1) == [['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG']]", "assert list_split(['glnxgopgguih', 'kzm', 'B', 'M>L', 'JAWI', 'HCRHSEGZK'], 4) == [['glnxgopgguih', 'JAWI'], ['kzm', 'HCRHSEGZK'], ['B'], ['M>L']]", "assert list_split(['lwxugh', 'yhaycqrm', 'U', 'VK:', 'IRU', 'NFTDBDIBN'], 4) == [['lwxugh', 'IRU'], ['yhaycqrm', 'NFTDBDIBN'], ['U'], ['VK:']]", "assert list_split(['mjtqyin', 'xzeiwcy', 'I', '*~$~', 'YJUUHQ', 'BJOQ'], 7) == [['mjtqyin'], ['xzeiwcy'], ['I'], ['*~$~'], ['YJUUHQ'], ['BJOQ'], []]", "assert list_split(['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX'], 1) == [['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX']]", "assert list_split(['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY'], 1) == [['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY']]"], "entry_point": "list_split", "repair_prompt": ["Write a function list_split that takes in a list and an integer n. The function should then split the list for every nth element. This process involves iterating through the list and breaking it at intervals defined by n. It will return a list of the resulting lists.\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n"], "completions": ["from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"Splits the input_list into sublists, each containing every nth element.\n\n    This function takes a list and an integer n, and returns a list of sublists.\n    Each sublist contains elements from the input_list at intervals of n.\n\n    Args:\n        input_list (list): The list to be split.\n        n (int): The interval at which to split the list.\n\n    Returns:\n        list: A list of sublists, each containing elements from the input_list at intervals of n.\n              If n is larger than the list length, returns empty lists for those indices.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the result list with empty sublists\n    result = [[] for _ in range(n)]\n\n    # Iterate over the input list and distribute elements into the sublists\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n\n    return result\n\n# Example usage:\n# input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# n = 3\n# print(list_split(input_list, n))\n# Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists, each containing every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists, each containing elements from the input_list at intervals of n.\n    \"\"\"\n    # Initialize a list to hold the sublists\n    sublists = []\n\n    # Handle edge cases\n    if n <= 0:\n        raise ValueError(\"Interval n must be greater than 0.\")\n    if not input_list:\n        return sublists\n\n    # Iterate over the input list and collect elements into sublists\n    for i in range(n):\n        sublist = []\n        for j in range(i, len(input_list), n):\n            sublist.append(input_list[j])\n        sublists.append(sublist)\n\n    return sublists\n\n# Example usage:\n# input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# n = 3\n# print(list_split(input_list, n))\n# Output: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Example:\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    # Validate input\n    if not input_list or n <= 0:\n        return []\n\n    # Initialize sublists\n    sublists = [[] for _ in range(n)]\n\n    # Iterate over input_list\n    for index, element in enumerate(input_list):\n        # Append elements to sublists\n        sublists[index % n].append(element)\n\n    return sublists\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\n    interval = 3\n    result = list_split(example_list, interval)\n    print(result)  # Output: [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists, each containing elements from the input list at every nth position.\n\n    Example:\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = [[] for _ in range(n)]\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\n    interval = 3\n    print(list_split(example_list, interval))\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n    \"\"\"\n    # Initialize the result list to store sublists\n    result = []\n\n    # Check if the input list is empty or n is less than or equal to zero\n    if not input_list or n <= 0:\n        return result\n\n    # Iterate over the input list in steps of n\n    for i in range(0, len(input_list), n):\n        # Append the sublist from the current index to the next nth index\n        result.append(input_list[i:i + n])\n\n    return result\n\n# Example usage:\n# input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# n = 3\n# print(list_split(input_list, n))\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n    \"\"\"\n    # Initialize the list to hold the sublists\n    sublists = []\n\n    # Check for edge cases\n    if n <= 0:\n        raise ValueError(\"The interval n must be a positive integer.\")\n    if not input_list:\n        return sublists\n\n    # Iterate over the input list and create sublists\n    for i in range(0, len(input_list), n):\n        # Append the sublist to the list of sublists\n        sublists.append(input_list[i:i + n])\n\n    return sublists\n\n# Example usage:\n# result = list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n# print(result)  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n\n    Example:\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    # Validate the input parameters\n    if not isinstance(input_list, list):\n        raise ValueError(\"input_list must be a list\")\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Handle edge cases\n    if not input_list or n > len(input_list):\n        return [[] for _ in range(n)]\n\n    # Initialize the result list with empty sublists\n    result = [[] for _ in range(n)]\n\n    # Iterate over the input list and distribute elements into sublists\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\n    n = 3\n    print(list_split(example_list, n))\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists, each containing every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists, each containing elements from the input list at every nth position.\n    \"\"\"\n    # Validate the input parameters\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be of type list.\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be of type int.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if len(input_list) == 0:\n        return []\n\n    # Initialize the list to hold sublists\n    sublists = []\n\n    # Iterate over the input list and collect elements at every nth position\n    for i in range(n):\n        sublist = input_list[i::n]\n        if sublist:\n            sublists.append(sublist)\n\n    return sublists\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists split at every nth element.\n    \"\"\"\n    # Check for edge cases\n    if not input_list:\n        return []\n    if n <= 0:\n        raise ValueError(\"Interval n must be a positive integer.\")\n    if n > len(input_list):\n        return [input_list]\n\n    # Initialize sublists\n    sublists = [[] for _ in range(n)]\n\n    # Iterate over the input list and distribute elements into sublists\n    for index, element in enumerate(input_list):\n        sublists[index % n].append(element)\n\n    return sublists\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3))\n    print(list_split([], 3))\n    print(list_split(['a', 'b', 'c'], 5))\n", "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input_list into sublists, each containing every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists, each containing elements from the input_list at intervals of n.\n\n    Raises:\n    ValueError: If n is zero or larger than the list length.\n    \"\"\"\n    # Validate the input parameter n\n    if n <= 0 or n > len(input_list):\n        raise ValueError(\"n must be greater than zero and less than or equal to the length of the list.\")\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the input list and collect elements into sublists\n    for i in range(n):\n        sublist = input_list[i::n]\n        result.append(sublist)\n\n    return result\n"], "plans": ["requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval. It must handle edge cases such as empty lists and large datasets. The implementation should be straightforward, leveraging Python's native capabilities without requiring external libraries.\nrequirement pool:\n- Implement the list_split function to handle various list sizes\n- Ensure the function is compatible with Python 3.x\n- Provide examples and documentation for user understanding\n- Optimize for performance with large lists\n- Consider edge cases like empty lists or n larger than list length\nWe will implement the list_split function using Python's native capabilities, specifically leveraging list comprehensions for simplicity and efficiency. This approach avoids the need for external libraries, ensuring compatibility across different Python environments. The function will handle edge cases such as empty lists and cases where n is larger than the list length by returning empty lists for those indices.\n", "requirement analysis:\nThe function needs to efficiently split a list into sublists based on a given interval. It should handle edge cases such as empty lists and cases where n is larger than the list length. The implementation should be straightforward and easy to understand, with performance considerations for large lists.\nrequirement pool:\n- Implement the list_split function to meet the original requirements\n- Ensure the function handles edge cases gracefully\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation and examples\n- Test the function across different Python versions\nWe will implement the list_split function using a simple loop to iterate over the list and collect elements into sublists based on the given interval n. This approach is efficient for handling large lists and is straightforward to understand. We will also handle edge cases such as when the list is empty or when n is greater than the list length by returning empty lists for those indices.\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval, ensuring it handles edge cases such as empty lists or intervals larger than the list length. It should be easy to understand and integrate into existing projects.\nrequirement pool:\n- The function must split lists accurately based on the given interval.\n- The function should handle edge cases gracefully.\n- Documentation should include examples and edge case handling.\n- Ensure compatibility with Python 3.x versions.\n- Optimize for performance with large lists.\nWe will implement a function using Python's built-in list manipulation techniques to efficiently split the list at every nth element. The function will handle edge cases such as empty lists and intervals larger than the list length by returning an empty list or the original list respectively. The function will be compatible with Python 3.x versions and optimized for performance with large lists.\n", "requirement analysis:\nThe function should efficiently split a list into sublists at every nth element. It must handle edge cases such as empty lists and ensure that the function is robust enough to handle lists of varying data types. The function should be easy to understand and maintain.\nrequirement pool:\n- Implement the list_split function to split lists at every nth element.\n- Ensure the function handles edge cases like empty lists or n greater than list length.\n- Document the function with examples and edge case handling.\n- Optimize the function for performance with large lists.\n- Test the function with different data types within the list.\nWe will implement the list_split function using a simple loop to iterate over the list and collect elements at every nth position. This approach ensures compatibility with different data types and handles edge cases like empty lists or when n is greater than the list length. The function will be efficient for large lists by minimizing unnecessary operations.\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval n. It must handle edge cases such as empty lists and cases where n exceeds the list length. The function should be easy to understand and use, with clear documentation provided.\nrequirement pool:\n- Implement the list_split function to split lists at every nth element\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation for the function\n- Test the function with various list sizes and values of n\nWe will implement the list_split function using a simple loop to iterate over the list and collect elements into sublists based on the given interval n. This approach ensures clarity and efficiency, especially for large lists. We will handle edge cases such as empty lists and cases where n is greater than the list length by returning empty lists for those indices.\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval, ensuring it handles various list sizes and edge cases. It should be easy to understand and use, with clear documentation.\nrequirement pool:\n- Implement the list_split function to split lists at every nth element\n- Ensure the function handles empty lists and lists smaller than n\n- Provide examples and documentation for user understanding\n- Optimize the function for large lists\n- Test the function with various data types within the list\nWe will implement the list_split function using a simple loop-based approach to iterate through the list and collect elements into sublists based on the given interval n. This approach is efficient for handling large lists and ensures readability and maintainability. We will also handle edge cases such as empty lists and lists smaller than n by returning empty sublists or shorter sublists as needed.\n", "requirement analysis:\nThe function needs to efficiently split a list into sublists based on a given interval. It should handle edge cases such as empty lists and intervals larger than the list length. The implementation should be straightforward and well-documented to ensure usability.\nrequirement pool:\n- Implement the list_split function to split lists at every nth element\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation for the function\n- Test the function with various list sizes and interval values\nWe will implement the list_split function using Python's built-in list operations to efficiently split the list at every nth element. The function will handle edge cases such as empty lists and cases where n is greater than the list length by returning empty lists for those indices. The implementation will be straightforward and well-documented to ensure usability.\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval, ensuring it handles edge cases such as empty lists or intervals larger than the list length. It should be easy to understand and use, with clear documentation.\nrequirement pool:\n- Implement the list_split function to handle various list sizes\n- Ensure compatibility with Python 3.x versions\n- Provide examples and documentation for user understanding\n- Optimize for performance with large datasets\n- Include error handling for invalid inputs\nWe will implement the list_split function using a simple loop-based approach to iterate over the list and collect elements at every nth position. This approach is efficient for handling large lists and ensures compatibility with different Python versions without requiring additional libraries. We will also include error handling for cases where n is larger than the list length or when the list is empty.\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval. It must handle various list sizes and types, ensuring compatibility across different Python versions. Documentation and examples are crucial for user understanding.\nrequirement pool:\n- Implement the list_split function to split lists at every nth element\n- Ensure the function handles edge cases like empty lists or n larger than list length\n- Provide comprehensive documentation and examples\n- Optimize for performance with large lists\n- Test compatibility with different Python versions\nWe will implement the list_split function using basic Python list operations to ensure simplicity and efficiency. The function will iterate over the list and collect elements into sublists based on the given interval n. We will handle edge cases such as when the list is empty or when n is larger than the list length by returning an empty list or the original list wrapped in another list, respectively. This approach avoids the complexity of external libraries while maintaining high usability and efficiency.\n", "requirement analysis:\nThe function should efficiently split a list into sublists based on a given interval, ensuring it handles various list sizes and types. It should be easy to understand and integrate into existing codebases.\nrequirement pool:\n- Implement the list_split function to handle list splitting based on nth element\n- Ensure the function is optimized for performance\n- Provide comprehensive documentation and examples\n- Include error handling for invalid inputs\n- Test the function with edge cases and large lists\nWe will implement the list_split function using a simple loop-based approach to iterate over the list and collect elements into sublists based on the given interval n. This approach will ensure that the function is efficient and easy to understand. We will also include error handling for cases where n is zero or larger than the list length.\n"], "test": ["def check(list_split):\n\tassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ", "def check(list_split):\n\tassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ", "def check(list_split):\n\tassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ", "def check(list_split):\n\tassert list_split(['j', 'q', 'l', 'd', 'n', 'j', 'm', 'j', 'b', 'w', 'v', 'u', 'q', 'z'], 6) == [['j', 'm', 'q'], ['q', 'j', 'z'], ['l', 'b'], ['d', 'w'], ['n', 'v'], ['j', 'u']]", "def check(list_split):\n\tassert list_split(['j', 's', 'n', 'f', 's', 'q', 'f', 'v', 'k', 'd', 'q', 'm', 'c', 'q'], 2) == [['j', 'n', 's', 'f', 'k', 'q', 'c'], ['s', 'f', 'q', 'v', 'd', 'm', 'q']]", "def check(list_split):\n\tassert list_split(['h', 'k', 't', 'a', 'b', 'p', 'h', 's', 'y', 'm', 'x', 'f', 'u', 'f'], 4) == [['h', 'b', 'y', 'u'], ['k', 'p', 'm', 'f'], ['t', 'h', 'x'], ['a', 's', 'f']]", "def check(list_split):\n\tassert list_split(['x', 'j', 'w', 'x', 'b', 'x', 'w', 'm', 'b', 'b', 'y', 'p', 'g', 'o'], 6) == [['x', 'w', 'g'], ['j', 'm', 'o'], ['w', 'b'], ['x', 'b'], ['b', 'y'], ['x', 'p']]", "def check(list_split):\n\tassert list_split(['u', 'j', 'm', 'i', 'h', 't', 'q', 'c', 'w', 'e', 'y', 'o', 'o', 'e'], 2) == [['u', 'm', 'h', 'q', 'w', 'y', 'o'], ['j', 'i', 't', 'c', 'e', 'o', 'e']]", "def check(list_split):\n\tassert list_split(['s', 'z', 'j', 'y', 'c', 'p', 'i', 'd', 'l', 'v', 'o', 'k', 'y', 'a'], 3) == [['s', 'y', 'i', 'v', 'y'], ['z', 'c', 'd', 'o', 'a'], ['j', 'p', 'l', 'k']]", "def check(list_split):\n\tassert list_split(['p', 'o', 'u', 'd', 'r', 'w', 'b', 'u', 'j', 't', 'a', 'v', 'c', 'b'], 8) == [['p', 'j'], ['o', 't'], ['u', 'a'], ['d', 'v'], ['r', 'c'], ['w', 'b'], ['b'], ['u']]", "def check(list_split):\n\tassert list_split(['v', 'e', 'z', 'w', 'u', 'h', 'j', 'o', 'f', 'n', 't', 'p', 'u', 'k'], 6) == [['v', 'j', 'u'], ['e', 'o', 'k'], ['z', 'f'], ['w', 'n'], ['u', 't'], ['h', 'p']]", "def check(list_split):\n\tassert list_split(['d', 'l', 'p', 'v', 'j', 'k', 'v', 'p', 'b', 'f', 'i', 'w', 'b', 'r'], 5) == [['d', 'k', 'i'], ['l', 'v', 'w'], ['p', 'p', 'b'], ['v', 'b', 'r'], ['j', 'f']]", "def check(list_split):\n\tassert list_split(['k', 'u', 'c', 't', 'n', 'd', 'y', 'e', 'n', 'b', 'f', 'z', 'k', 'm'], 5) == [['k', 'd', 'f'], ['u', 'y', 'z'], ['c', 'e', 'k'], ['t', 'n', 'm'], ['n', 'b']]", "def check(list_split):\n\tassert list_split(['b', 'm', 'f', 'p', 'p', 'v', 'p', 'n', 'v', 'h', 'g', 'h', 'h', 'l'], 7) == [['b', 'n'], ['m', 'v'], ['f', 'h'], ['p', 'g'], ['p', 'h'], ['v', 'h'], ['p', 'l']]", "def check(list_split):\n\tassert list_split(['w', 'j', 'm', 'h', 'y', 'c', 'k', 'e', 'v', 's', 'f', 'q', 'l', 'p'], 8) == [['w', 'v'], ['j', 's'], ['m', 'f'], ['h', 'q'], ['y', 'l'], ['c', 'p'], ['k'], ['e']]", "def check(list_split):\n\tassert list_split(['v', 'g', 'm', 'i', 'v', 'u', 'b', 'i', 'b', 'c', 'j', 'j', 's', 'z'], 5) == [['v', 'u', 'j'], ['g', 'b', 'j'], ['m', 'i', 's'], ['i', 'b', 'z'], ['v', 'c']]", "def check(list_split):\n\tassert list_split(['z', 'm', 'x', 'r', 'i', 't', 'p', 'o', 'u', 'n', 'a', 'j', 'e', 'i'], 2) == [['z', 'x', 'i', 'p', 'u', 'a', 'e'], ['m', 'r', 't', 'o', 'n', 'j', 'i']]", "def check(list_split):\n\tassert list_split(['q', 'p', 'l', 't', 'i', 'd', 'k', 'x', 'n', 'j', 'g', 'i', 'k', 'l'], 8) == [['q', 'n'], ['p', 'j'], ['l', 'g'], ['t', 'i'], ['i', 'k'], ['d', 'l'], ['k'], ['x']]", "def check(list_split):\n\tassert list_split(['g', 'j', 'q', 'y', 's', 'g', 'l', 'x', 't', 't', 'c', 's', 'm', 'h'], 8) == [['g', 't'], ['j', 't'], ['q', 'c'], ['y', 's'], ['s', 'm'], ['g', 'h'], ['l'], ['x']]", "def check(list_split):\n\tassert list_split(['d', 'i', 'b', 's', 'b', 'g', 'g', 'i', 'l', 'd', 'm', 'y', 'x', 'z'], 5) == [['d', 'g', 'm'], ['i', 'g', 'y'], ['b', 'i', 'x'], ['s', 'l', 'z'], ['b', 'd']]", "def check(list_split):\n\tassert list_split(['p', 'l', 's', 'w', 'l', 'p', 'f', 'd', 'w', 'i', 'j', 'l', 'h', 'n'], 3) == [['p', 'w', 'f', 'i', 'h'], ['l', 'l', 'd', 'j', 'n'], ['s', 'p', 'w', 'l']]", "def check(list_split):\n\tassert list_split(['m', 'n', 'b', 'b', 'k', 'g', 'u', 'n', 'q', 'q', 'd', 't', 'y', 'a'], 3) == [['m', 'b', 'u', 'q', 'y'], ['n', 'k', 'n', 'd', 'a'], ['b', 'g', 'q', 't']]", "def check(list_split):\n\tassert list_split(['c', 'p', 'e', 't', 'q', 'o', 'o', 'i', 'p', 'x', 'r', 'y', 'y', 'j'], 2) == [['c', 'e', 'q', 'o', 'p', 'r', 'y'], ['p', 't', 'o', 'i', 'x', 'y', 'j']]", "def check(list_split):\n\tassert list_split(['j', 'r', 'o', 'f', 'f', 'u', 'x', 't', 'p', 'o', 'c', 'f', 'x', 'f'], 8) == [['j', 'p'], ['r', 'o'], ['o', 'c'], ['f', 'f'], ['f', 'x'], ['u', 'f'], ['x'], ['t']]", "def check(list_split):\n\tassert list_split(['b', 'j', 'a', 'u', 'q', 'c', 't', 'd', 'h', 'a', 'x', 'r', 'x', 'o'], 8) == [['b', 'h'], ['j', 'a'], ['a', 'x'], ['u', 'r'], ['q', 'x'], ['c', 'o'], ['t'], ['d']]", "def check(list_split):\n\tassert list_split(['n', 'r', 'r', 'j', 'e', 't', 'f', 's', 'x', 'x', 'y', 'b', 'e', 'z'], 6) == [['n', 'f', 'e'], ['r', 's', 'z'], ['r', 'x'], ['j', 'x'], ['e', 'y'], ['t', 'b']]", "def check(list_split):\n\tassert list_split(['b', 'w', 'u', 'r', 'f', 'h', 't', 'o', 'f', 'm', 'k', 'g', 'l', 'f'], 6) == [['b', 't', 'l'], ['w', 'o', 'f'], ['u', 'f'], ['r', 'm'], ['f', 'k'], ['h', 'g']]", "def check(list_split):\n\tassert list_split(['y', 'j', 'o', 'd', 'f', 'x', 'n', 'p', 'd', 'a', 'a', 's', 'l', 't'], 2) == [['y', 'o', 'f', 'n', 'd', 'a', 'l'], ['j', 'd', 'x', 'p', 'a', 's', 't']]", "def check(list_split):\n\tassert list_split(['f', 'v', 'h', 'k', 'c', 'x', 'r', 'l', 'z', 'x', 'j', 'r', 'f', 'l'], 5) == [['f', 'x', 'j'], ['v', 'r', 'r'], ['h', 'l', 'f'], ['k', 'z', 'l'], ['c', 'x']]", "def check(list_split):\n\tassert list_split(['b', 'j', 'd', 'm', 'v', 't', 'g', 'o', 'q', 'd', 'l', 'p', 'b', 'w'], 5) == [['b', 't', 'l'], ['j', 'g', 'p'], ['d', 'o', 'b'], ['m', 'q', 'w'], ['v', 'd']]", "def check(list_split):\n\tassert list_split(['y', 'y', 'i', 'q', 'x', 'w', 'r', 'o', 'i', 't', 'd', 't', 'k', 'f'], 6) == [['y', 'r', 'k'], ['y', 'o', 'f'], ['i', 'i'], ['q', 't'], ['x', 'd'], ['w', 't']]", "def check(list_split):\n\tassert list_split(['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c'], 1) == [['q', 'j', 'i', 'c', 'u', 'v', 'd', 'l', 'v', 'r', 'k', 'k', 'u', 'c']]", "def check(list_split):\n\tassert list_split(['p', 't', 'c', 'h', 'b', 'y', 'n', 'z', 'k', 'p', 'z', 'f', 'w', 'z'], 6) == [['p', 'n', 'w'], ['t', 'z', 'z'], ['c', 'k'], ['h', 'p'], ['b', 'z'], ['y', 'f']]", "def check(list_split):\n\tassert list_split(['h', 'n', 'a', 'p', 'n', 't', 'z', 'u', 'j', 'n', 'z', 'w', 'a', 'h'], 5) == [['h', 't', 'z'], ['n', 'z', 'w'], ['a', 'u', 'a'], ['p', 'j', 'h'], ['n', 'n']]", "def check(list_split):\n\tassert list_split(['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c'], 1) == [['h', 'g', 'h', 'v', 'j', 'm', 'f', 'y', 'y', 'a', 'r', 'z', 'h', 'c']]", "def check(list_split):\n\tassert list_split(['p', 'b', 'e', 't', 'q', 'y', 'f', 'o', 'r', 'i', 'r', 'b', 's', 'r'], 4) == [['p', 'q', 'r', 's'], ['b', 'y', 'i', 'r'], ['e', 'f', 'r'], ['t', 'o', 'b']]", "def check(list_split):\n\tassert list_split([1, 7, 6, 6, 6, 7, 2, 13, 14, 8, 7, 15, 11, 13], 8) == [[1, 14], [7, 8], [6, 7], [6, 15], [6, 11], [7, 13], [2], [13]]", "def check(list_split):\n\tassert list_split([2, 1, 6, 6, 3, 2, 10, 5, 6, 8, 8, 14, 15, 18], 4) == [[2, 3, 6, 15], [1, 2, 8, 18], [6, 10, 8], [6, 5, 14]]", "def check(list_split):\n\tassert list_split([3, 2, 3, 6, 4, 11, 9, 8, 13, 9, 7, 10, 10, 9], 6) == [[3, 9, 10], [2, 8, 9], [3, 13], [6, 9], [4, 7], [11, 10]]", "def check(list_split):\n\tassert list_split([6, 3, 7, 9, 3, 5, 8, 4, 10, 12, 12, 15, 14, 13], 4) == [[6, 3, 10, 14], [3, 5, 12, 13], [7, 8, 12], [9, 4, 15]]", "def check(list_split):\n\tassert list_split([1, 5, 4, 5, 7, 3, 8, 8, 12, 9, 15, 9, 18, 15], 4) == [[1, 7, 12, 18], [5, 3, 9, 15], [4, 8, 15], [5, 8, 9]]", "def check(list_split):\n\tassert list_split([4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13], 1) == [[4, 6, 4, 5, 9, 2, 4, 4, 12, 15, 10, 15, 16, 13]]", "def check(list_split):\n\tassert list_split([4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16], 1) == [[4, 5, 5, 1, 3, 9, 5, 12, 14, 13, 13, 12, 12, 16]]", "def check(list_split):\n\tassert list_split([5, 2, 2, 4, 7, 11, 3, 3, 12, 5, 13, 14, 16, 16], 3) == [[5, 4, 3, 5, 16], [2, 7, 3, 13, 16], [2, 11, 12, 14]]", "def check(list_split):\n\tassert list_split([3, 4, 8, 6, 10, 8, 8, 8, 10, 13, 7, 17, 17, 16], 4) == [[3, 10, 10, 17], [4, 8, 13, 16], [8, 8, 7], [6, 8, 17]]", "def check(list_split):\n\tassert list_split([1, 7, 5, 4, 2, 3, 11, 10, 6, 11, 14, 11, 8, 12], 4) == [[1, 2, 6, 8], [7, 3, 11, 12], [5, 11, 14], [4, 10, 11]]", "def check(list_split):\n\tassert list_split([2, 1, 4, 8, 6, 1, 3, 6, 11, 15, 8, 7, 8, 10], 4) == [[2, 6, 11, 8], [1, 1, 15, 10], [4, 3, 8], [8, 6, 7]]", "def check(list_split):\n\tassert list_split([1, 5, 8, 4, 3, 5, 9, 3, 6, 12, 8, 13, 12, 9], 8) == [[1, 6], [5, 12], [8, 8], [4, 13], [3, 12], [5, 9], [9], [3]]", "def check(list_split):\n\tassert list_split([6, 6, 8, 5, 2, 7, 8, 13, 14, 10, 6, 9, 14, 14], 5) == [[6, 7, 6], [6, 8, 9], [8, 13, 14], [5, 14, 14], [2, 10]]", "def check(list_split):\n\tassert list_split([3, 4, 8, 9, 6, 11, 6, 9, 6, 12, 6, 17, 18, 17], 3) == [[3, 9, 6, 12, 18], [4, 6, 9, 6, 17], [8, 11, 6, 17]]", "def check(list_split):\n\tassert list_split([4, 5, 4, 9, 10, 6, 12, 4, 10, 9, 16, 13, 17, 10], 8) == [[4, 10], [5, 9], [4, 16], [9, 13], [10, 17], [6, 10], [12], [4]]", "def check(list_split):\n\tassert list_split([1, 5, 5, 3, 6, 10, 3, 10, 12, 15, 12, 10, 14, 16], 2) == [[1, 5, 6, 3, 12, 12, 14], [5, 3, 10, 10, 15, 10, 16]]", "def check(list_split):\n\tassert list_split([5, 5, 8, 7, 3, 5, 9, 9, 5, 5, 9, 12, 11, 16], 3) == [[5, 7, 9, 5, 11], [5, 3, 9, 9, 16], [8, 5, 5, 12]]", "def check(list_split):\n\tassert list_split([6, 3, 8, 2, 6, 3, 5, 7, 5, 6, 13, 17, 14, 17], 3) == [[6, 2, 5, 6, 14], [3, 6, 7, 13, 17], [8, 3, 5, 17]]", "def check(list_split):\n\tassert list_split([5, 4, 6, 6, 8, 3, 4, 12, 6, 15, 12, 11, 9, 17], 2) == [[5, 6, 8, 4, 6, 12, 9], [4, 6, 3, 12, 15, 11, 17]]", "def check(list_split):\n\tassert list_split([3, 1, 3, 9, 5, 6, 6, 4, 11, 11, 10, 14, 10, 17], 7) == [[3, 4], [1, 11], [3, 11], [9, 10], [5, 14], [6, 10], [6, 17]]", "def check(list_split):\n\tassert list_split([4, 3, 1, 3, 7, 10, 10, 5, 5, 11, 11, 14, 17, 9], 4) == [[4, 7, 5, 17], [3, 10, 11, 9], [1, 10, 11], [3, 5, 14]]", "def check(list_split):\n\tassert list_split([2, 3, 8, 9, 4, 9, 11, 12, 11, 15, 13, 10, 11, 17], 7) == [[2, 12], [3, 11], [8, 15], [9, 13], [4, 10], [9, 11], [11, 17]]", "def check(list_split):\n\tassert list_split([2, 5, 3, 1, 5, 8, 3, 7, 10, 5, 14, 15, 14, 11], 4) == [[2, 5, 10, 14], [5, 8, 5, 11], [3, 3, 14], [1, 7, 15]]", "def check(list_split):\n\tassert list_split([5, 7, 6, 6, 9, 9, 4, 10, 4, 11, 12, 15, 9, 11], 6) == [[5, 4, 9], [7, 10, 11], [6, 4], [6, 11], [9, 12], [9, 15]]", "def check(list_split):\n\tassert list_split([5, 2, 7, 6, 5, 6, 5, 6, 5, 6, 13, 17, 12, 16], 7) == [[5, 6], [2, 5], [7, 6], [6, 13], [5, 17], [6, 12], [5, 16]]", "def check(list_split):\n\tassert list_split([5, 2, 4, 4, 1, 10, 3, 13, 11, 8, 12, 14, 9, 13], 3) == [[5, 4, 3, 8, 9], [2, 1, 13, 12, 13], [4, 10, 11, 14]]", "def check(list_split):\n\tassert list_split([1, 4, 7, 2, 7, 8, 12, 4, 12, 5, 12, 9, 9, 16], 7) == [[1, 4], [4, 12], [7, 5], [2, 12], [7, 9], [8, 9], [12, 16]]", "def check(list_split):\n\tassert list_split([4, 5, 7, 5, 6, 7, 9, 6, 8, 11, 6, 15, 15, 18], 6) == [[4, 9, 15], [5, 6, 18], [7, 8], [5, 11], [6, 6], [7, 15]]", "def check(list_split):\n\tassert list_split([6, 1, 1, 9, 8, 11, 10, 5, 10, 7, 7, 9, 13, 9], 3) == [[6, 9, 10, 7, 13], [1, 8, 5, 7, 9], [1, 11, 10, 9]]", "def check(list_split):\n\tassert list_split([3, 5, 8, 1, 7, 3, 7, 13, 10, 15, 9, 12, 12, 14], 5) == [[3, 3, 9], [5, 7, 12], [8, 13, 12], [1, 10, 14], [7, 15]]", "def check(list_split):\n\tassert list_split([5, 5, 4, 8, 9, 9, 8, 5, 7, 13, 6, 8, 17, 19], 3) == [[5, 8, 8, 13, 17], [5, 9, 5, 6, 19], [4, 9, 7, 8]]", "def check(list_split):\n\tassert list_split([2, 4, 6, 5, 4, 5, 5, 13, 7, 7, 9, 16, 16, 10], 7) == [[2, 13], [4, 7], [6, 7], [5, 9], [4, 16], [5, 16], [5, 10]]", "def check(list_split):\n\tassert list_split([3, 5, 5, 1, 5, 8, 5, 12, 14, 7, 10, 15, 12, 15], 4) == [[3, 5, 14, 12], [5, 8, 7, 15], [5, 5, 10], [1, 12, 15]]", "def check(list_split):\n\tassert list_split(['mldawzqafgqy', 'hjxingcz', 'F', 'O<@YV>', 'WUOU', 'ASTU'], 2) == [['mldawzqafgqy', 'F', 'WUOU'], ['hjxingcz', 'O<@YV>', 'ASTU']]", "def check(list_split):\n\tassert list_split(['jxwlgjrckp', 'ygn', 'W', 'TOSJ/JB~', 'TAM', 'ZPYWLK'], 4) == [['jxwlgjrckp', 'TAM'], ['ygn', 'ZPYWLK'], ['W'], ['TOSJ/JB~']]", "def check(list_split):\n\tassert list_split(['zzczoyjvne', 'uyy', 'B', '*>C>', 'KETDI', 'PFDYPK'], 6) == [['zzczoyjvne'], ['uyy'], ['B'], ['*>C>'], ['KETDI'], ['PFDYPK']]", "def check(list_split):\n\tassert list_split(['pflcapycprf', 'foz', 'P', '-$%PNP:', 'KKI', 'LJUQIH'], 5) == [['pflcapycprf', 'LJUQIH'], ['foz'], ['P'], ['-$%PNP:'], ['KKI']]", "def check(list_split):\n\tassert list_split(['aqzshftajzav', 'sqlmrk', 'U', 'OO!KZTC', 'WRBM', 'ZGT'], 4) == [['aqzshftajzav', 'WRBM'], ['sqlmrk', 'ZGT'], ['U'], ['OO!KZTC']]", "def check(list_split):\n\tassert list_split(['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY'], 1) == [['xnepknc', 'yvpjhfky', 'D', 'XCHE', 'VKH', 'VYY']]", "def check(list_split):\n\tassert list_split(['rlbvnzwbbwg', 'yvd', 'B', 'HF<HC', 'PMRELUQ', 'UKEAHLH'], 4) == [['rlbvnzwbbwg', 'PMRELUQ'], ['yvd', 'UKEAHLH'], ['B'], ['HF<HC']]", "def check(list_split):\n\tassert list_split(['wom', 'odh', 'M', '_ZVM', 'ONNGKAO', 'FGOHBQPK'], 7) == [['wom'], ['odh'], ['M'], ['_ZVM'], ['ONNGKAO'], ['FGOHBQPK'], []]", "def check(list_split):\n\tassert list_split(['hcujy', 'ftu', 'T', '<LL>KJ', 'UGDLK', 'VEC'], 7) == [['hcujy'], ['ftu'], ['T'], ['<LL>KJ'], ['UGDLK'], ['VEC'], []]", "def check(list_split):\n\tassert list_split(['rrhhrpcssoql', 'rqfjytod', 'I', 'YA&$R', 'NYV', 'LHVZWFPJA'], 3) == [['rrhhrpcssoql', 'YA&$R'], ['rqfjytod', 'NYV'], ['I', 'LHVZWFPJA']]", "def check(list_split):\n\tassert list_split(['vgeciikehj', 'vsxucvfb', 'H', '>UA', 'AJFSSVKI', 'JZP'], 2) == [['vgeciikehj', 'H', 'AJFSSVKI'], ['vsxucvfb', '>UA', 'JZP']]", "def check(list_split):\n\tassert list_split(['tpimgzkzrc', 'ytm', 'Y', 'B-+-SHJ', 'PKUN', 'GQBHT'], 5) == [['tpimgzkzrc', 'GQBHT'], ['ytm'], ['Y'], ['B-+-SHJ'], ['PKUN']]", "def check(list_split):\n\tassert list_split(['zjdsfcnfs', 'pfnuxdal', 'I', '#S>^', 'CFFWC', 'AJGBG'], 2) == [['zjdsfcnfs', 'I', 'CFFWC'], ['pfnuxdal', '#S>^', 'AJGBG']]", "def check(list_split):\n\tassert list_split(['huyb', 'wgvyu', 'E', 'L&P', 'YEDISE', 'RUJEDJ'], 3) == [['huyb', 'L&P'], ['wgvyu', 'YEDISE'], ['E', 'RUJEDJ']]", "def check(list_split):\n\tassert list_split(['kuk', 'tactevqo', 'L', '>RU=E', 'DBIU', 'BRZ'], 6) == [['kuk'], ['tactevqo'], ['L'], ['>RU=E'], ['DBIU'], ['BRZ']]", "def check(list_split):\n\tassert list_split(['qxqkppyenhqc', 'kackpnmg', 'U', '^<LZ/', 'PAH', 'IXWHEGL'], 3) == [['qxqkppyenhqc', '^<LZ/'], ['kackpnmg', 'PAH'], ['U', 'IXWHEGL']]", "def check(list_split):\n\tassert list_split(['cgk', 'uzmezww', 'P', 'UFUZNT', 'WOEPJ', 'YHEXMO'], 7) == [['cgk'], ['uzmezww'], ['P'], ['UFUZNT'], ['WOEPJ'], ['YHEXMO'], []]", "def check(list_split):\n\tassert list_split(['sckskgqqom', 'orbqe', 'J', 'J<+&', 'XEVBTEX', 'JTR'], 2) == [['sckskgqqom', 'J', 'XEVBTEX'], ['orbqe', 'J<+&', 'JTR']]", "def check(list_split):\n\tassert list_split(['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB'], 1) == [['nkndpuyc', 'ufjv', 'D', '_/QNG>-', 'SZACNRA', 'VCSB']]", "def check(list_split):\n\tassert list_split(['eiqi', 'bpvkpkm', 'U', 'P*:D|JDEE', 'FLFEQADYF', 'SKI'], 5) == [['eiqi', 'SKI'], ['bpvkpkm'], ['U'], ['P*:D|JDEE'], ['FLFEQADYF']]", "def check(list_split):\n\tassert list_split(['uqfbqo', 'ygyykebkp', 'G', 'D_JL/', 'BBHWSSTWN', 'KSLTRM'], 3) == [['uqfbqo', 'D_JL/'], ['ygyykebkp', 'BBHWSSTWN'], ['G', 'KSLTRM']]", "def check(list_split):\n\tassert list_split(['ptkalnuif', 'frhje', 'E', 'JCSF<:B', 'YLHFRIVGN', 'FKM'], 2) == [['ptkalnuif', 'E', 'YLHFRIVGN'], ['frhje', 'JCSF<:B', 'FKM']]", "def check(list_split):\n\tassert list_split(['fthdke', 'vczvnb', 'Y', 'V-H^N', 'OIQB', 'QOLQYGUY'], 3) == [['fthdke', 'V-H^N'], ['vczvnb', 'OIQB'], ['Y', 'QOLQYGUY']]", "def check(list_split):\n\tassert list_split(['ccjtgkfqti', 'xqu', 'O', 'O<@D_W', 'TEHKWQPO', 'NVRTJ'], 2) == [['ccjtgkfqti', 'O', 'TEHKWQPO'], ['xqu', 'O<@D_W', 'NVRTJ']]", "def check(list_split):\n\tassert list_split(['kjqifx', 'gnztfgx', 'C', '<%ZWTVI', 'QHV', 'WVAXRVY'], 3) == [['kjqifx', '<%ZWTVI'], ['gnztfgx', 'QHV'], ['C', 'WVAXRVY']]", "def check(list_split):\n\tassert list_split(['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT'], 1) == [['mkrzv', 'okll', 'S', 'GXU^IH=Z', 'MAERAVIBB', 'CNTHT']]", "def check(list_split):\n\tassert list_split(['ykqmukk', 'sproluv', 'V', 'V=R@RY$/P', 'GKDNPCP', 'IIIJSOS'], 4) == [['ykqmukk', 'GKDNPCP'], ['sproluv', 'IIIJSOS'], ['V'], ['V=R@RY$/P']]", "def check(list_split):\n\tassert list_split(['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG'], 1) == [['wmly', 'pgwkis', 'U', 'D>_JRTN%', 'KDLJL', 'SOAG']]", "def check(list_split):\n\tassert list_split(['glnxgopgguih', 'kzm', 'B', 'M>L', 'JAWI', 'HCRHSEGZK'], 4) == [['glnxgopgguih', 'JAWI'], ['kzm', 'HCRHSEGZK'], ['B'], ['M>L']]", "def check(list_split):\n\tassert list_split(['lwxugh', 'yhaycqrm', 'U', 'VK:', 'IRU', 'NFTDBDIBN'], 4) == [['lwxugh', 'IRU'], ['yhaycqrm', 'NFTDBDIBN'], ['U'], ['VK:']]", "def check(list_split):\n\tassert list_split(['mjtqyin', 'xzeiwcy', 'I', '*~$~', 'YJUUHQ', 'BJOQ'], 7) == [['mjtqyin'], ['xzeiwcy'], ['I'], ['*~$~'], ['YJUUHQ'], ['BJOQ'], []]", "def check(list_split):\n\tassert list_split(['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX'], 1) == [['cjxznkyts', 'tdqih', 'X', '!J+L*', 'OIR', 'THFQX']]", "def check(list_split):\n\tassert list_split(['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY'], 1) == [['vabqxvvhbbk', 'wxd', 'C', '&JVU', 'HIABYZ', 'BBLSXUFRY']]"], "scores": [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.9608, 0.9608, 0.9608, 0.9608], "pass_results": [true, true, true, true, false, false, false, false, false, false], "pass_test_cases_num": [102, 102, 102, 102, 0, 0, 98, 98, 98, 98], "completion": "from typing import List\n## main.py\n\ndef list_split(input_list: list, n: int) -> list:\n    \"\"\"\n    Splits the input list into sublists at every nth element.\n\n    Parameters:\n    input_list (list): The list to be split.\n    n (int): The interval at which to split the list.\n\n    Returns:\n    list: A list of sublists, each containing elements from the input list at every nth position.\n\n    Example:\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = [[] for _ in range(n)]\n    for index, element in enumerate(input_list):\n        result[index % n].append(element)\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']\n    interval = 3\n    print(list_split(example_list, interval))\n", "passed": true, "pass": true, "pass_num": 4, "round": 714, "mutate_method": "expand_one2two", "parent_index": 339}
