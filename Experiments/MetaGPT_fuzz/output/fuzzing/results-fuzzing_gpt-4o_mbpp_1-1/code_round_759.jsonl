{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 133, "prompt": "Write a function to calculate the sum of the negative numbers of a given list. You need to iterate through each number in the given list. During this iteration process, check if the number is negative. If the number is negative, add it to a running total sum. Ensure your function handles lists with positive numbers, as well as lists with only negative numbers or zeroes.", "code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "test_imports": [], "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "assert sum_negativenum([6, 4, -9, -8, 12, -14, 12, -9, 22]) == -40", "assert sum_negativenum([6, 4, -1, -12, 12, -12, 13, -5, 20]) == -30", "assert sum_negativenum([6, 7, -9, -13, 12, -10, 11, -2, 13]) == -34", "assert sum_negativenum([2, 7, -6, -14, 8, -8, 18, 0, 15]) == -28", "assert sum_negativenum([4, 4, -2, -13, 6, -7, 16, -4, 20]) == -26", "assert sum_negativenum([2, 3, -1, -12, 9, -11, 13, -6, 21]) == -30", "assert sum_negativenum([5, 1, -8, -5, 10, -13, 12, -9, 19]) == -35", "assert sum_negativenum([4, 8, -4, -8, 16, -7, 16, -2, 14]) == -21", "assert sum_negativenum([6, 1, -5, -13, 10, -17, 13, -9, 18]) == -44", "assert sum_negativenum([6, 1, -2, -14, 12, -13, 19, -3, 20]) == -32", "assert sum_negativenum([3, 9, -6, -7, 12, -13, 15, -2, 20]) == -28", "assert sum_negativenum([5, 7, -1, -14, 13, -11, 9, -4, 12]) == -30", "assert sum_negativenum([6, 9, -11, -12, 11, -11, 15, 0, 22]) == -34", "assert sum_negativenum([2, 1, -1, -13, 13, -16, 19, -2, 19]) == -32", "assert sum_negativenum([4, 4, -7, -5, 15, -16, 12, -6, 17]) == -34", "assert sum_negativenum([2, 1, -7, -9, 14, -10, 10, -7, 15]) == -33", "assert sum_negativenum([3, 3, -8, -11, 15, -13, 19, -3, 18]) == -35", "assert sum_negativenum([6, 7, -4, -12, 10, -8, 13, -1, 16]) == -25", "assert sum_negativenum([1, 8, -7, -8, 13, -9, 17, -2, 22]) == -26", "assert sum_negativenum([5, 4, -3, -13, 16, -11, 17, -10, 12]) == -37", "assert sum_negativenum([5, 6, -4, -10, 6, -7, 10, -7, 14]) == -28", "assert sum_negativenum([1, 8, -6, -9, 11, -14, 18, -8, 15]) == -37", "assert sum_negativenum([5, 1, -10, -10, 14, -8, 10, -10, 15]) == -38", "assert sum_negativenum([4, 6, -11, -4, 14, -16, 10, -10, 19]) == -41", "assert sum_negativenum([6, 2, -6, -14, 16, -8, 9, -10, 18]) == -38", "assert sum_negativenum([6, 7, -8, -5, 15, -13, 13, -8, 16]) == -34", "assert sum_negativenum([2, 1, -4, -7, 10, -9, 12, -2, 15]) == -22", "assert sum_negativenum([5, 6, -5, -7, 16, -11, 13, -9, 22]) == -32", "assert sum_negativenum([4, 7, -4, -11, 15, -15, 12, -8, 16]) == -38", "assert sum_negativenum([2, 2, -10, -7, 10, -7, 19, -8, 20]) == -32", "assert sum_negativenum([2, 3, -7, -9, 16, -16, 19, -9, 13]) == -41", "assert sum_negativenum([5, 1, -5, -9, 11, -9, 18, -8, 16]) == -31", "assert sum_negativenum([1, 5, -6, -4, 6, -8, 18, 0, 21]) == -18", "assert sum_negativenum([9, 14, -11, 8, -18, 12, -15]) == -44", "assert sum_negativenum([9, 16, -12, 10, -21, 16, -16]) == -49", "assert sum_negativenum([14, 15, -19, 16, -22, 14, -15]) == -56", "assert sum_negativenum([11, 15, -17, 12, -18, 11, -21]) == -56", "assert sum_negativenum([7, 10, -14, 13, -20, 11, -21]) == -55", "assert sum_negativenum([5, 19, -13, 15, -14, 16, -21]) == -48", "assert sum_negativenum([7, 15, -11, 11, -14, 14, -24]) == -49", "assert sum_negativenum([10, 16, -18, 11, -22, 16, -21]) == -61", "assert sum_negativenum([13, 11, -17, 13, -13, 16, -16]) == -46", "assert sum_negativenum([10, 14, -9, 9, -21, 14, -18]) == -48", "assert sum_negativenum([11, 14, -17, 16, -20, 8, -24]) == -61", "assert sum_negativenum([14, 14, -9, 15, -13, 9, -23]) == -45", "assert sum_negativenum([5, 14, -15, 12, -13, 12, -19]) == -47", "assert sum_negativenum([9, 10, -15, 14, -15, 8, -19]) == -49", "assert sum_negativenum([9, 10, -9, 18, -23, 15, -25]) == -57", "assert sum_negativenum([8, 12, -10, 9, -23, 16, -21]) == -54", "assert sum_negativenum([15, 12, -14, 17, -20, 10, -16]) == -50", "assert sum_negativenum([10, 13, -14, 17, -13, 16, -21]) == -48", "assert sum_negativenum([8, 17, -15, 12, -20, 16, -17]) == -52", "assert sum_negativenum([13, 19, -15, 10, -19, 11, -21]) == -55", "assert sum_negativenum([12, 18, -17, 15, -17, 15, -15]) == -49", "assert sum_negativenum([5, 10, -10, 8, -22, 14, -24]) == -56", "assert sum_negativenum([11, 13, -9, 17, -17, 10, -16]) == -42", "assert sum_negativenum([7, 11, -10, 10, -13, 17, -16]) == -39", "assert sum_negativenum([11, 10, -16, 17, -22, 13, -24]) == -62", "assert sum_negativenum([5, 17, -16, 12, -19, 13, -18]) == -53", "assert sum_negativenum([6, 14, -15, 12, -15, 9, -17]) == -47", "assert sum_negativenum([7, 16, -15, 11, -21, 8, -16]) == -52", "assert sum_negativenum([15, 15, -16, 17, -17, 8, -22]) == -55", "assert sum_negativenum([13, 17, -11, 9, -20, 17, -18]) == -49", "assert sum_negativenum([10, 16, -18, 12, -21, 16, -20]) == -59", "assert sum_negativenum([10, 20, -15, 18, -21, 14, -16]) == -52", "assert sum_negativenum([11, 13, -17, 14, -18, 17, -20]) == -55", "assert sum_negativenum([14, -66, 54, 41, 154, -636, 123, 49, 90, -195]) == -897", "assert sum_negativenum([23, -67, 56, 42, 152, -641, 117, 48, 94, -191]) == -899", "assert sum_negativenum([21, -66, 55, 37, 150, -641, 118, 40, 92, -195]) == -902", "assert sum_negativenum([14, -67, 57, 36, 152, -641, 116, 40, 95, -194]) == -902", "assert sum_negativenum([20, -62, 52, 34, 156, -640, 126, 40, 85, -185]) == -887", "assert sum_negativenum([14, -60, 57, 40, 151, -643, 124, 43, 86, -192]) == -895", "assert sum_negativenum([24, -68, 55, 44, 152, -637, 116, 47, 87, -194]) == -899", "assert sum_negativenum([24, -61, 62, 43, 157, -639, 120, 46, 91, -188]) == -888", "assert sum_negativenum([18, -70, 62, 42, 157, -644, 126, 43, 93, -189]) == -903", "assert sum_negativenum([23, -70, 54, 43, 157, -637, 117, 48, 85, -188]) == -895", "assert sum_negativenum([22, -68, 59, 38, 149, -644, 117, 39, 88, -192]) == -904", "assert sum_negativenum([24, -61, 54, 41, 154, -643, 117, 45, 93, -195]) == -899", "assert sum_negativenum([19, -62, 52, 37, 150, -634, 126, 46, 85, -190]) == -886", "assert sum_negativenum([24, -67, 60, 37, 150, -639, 120, 44, 95, -189]) == -895", "assert sum_negativenum([17, -61, 58, 35, 155, -634, 125, 44, 87, -191]) == -886", "assert sum_negativenum([20, -67, 55, 35, 148, -635, 121, 41, 92, -186]) == -888", "assert sum_negativenum([17, -66, 59, 43, 154, -639, 125, 45, 90, -186]) == -891", "assert sum_negativenum([24, -62, 53, 39, 148, -639, 119, 44, 87, -195]) == -896", "assert sum_negativenum([16, -65, 59, 38, 156, -643, 126, 48, 89, -194]) == -902", "assert sum_negativenum([16, -67, 56, 41, 157, -642, 117, 47, 94, -185]) == -894", "assert sum_negativenum([15, -69, 57, 35, 157, -639, 122, 47, 87, -194]) == -902", "assert sum_negativenum([19, -69, 53, 35, 153, -638, 123, 43, 89, -187]) == -894", "assert sum_negativenum([15, -70, 61, 44, 154, -644, 119, 46, 85, -191]) == -905", "assert sum_negativenum([14, -66, 60, 36, 147, -635, 126, 47, 92, -190]) == -891", "assert sum_negativenum([16, -67, 52, 42, 153, -636, 122, 47, 94, -194]) == -897", "assert sum_negativenum([17, -66, 61, 38, 154, -639, 120, 41, 86, -189]) == -894", "assert sum_negativenum([19, -63, 57, 35, 147, -643, 125, 42, 85, -192]) == -898", "assert sum_negativenum([14, -67, 53, 42, 154, -638, 120, 44, 90, -192]) == -897", "assert sum_negativenum([19, -66, 57, 44, 152, -637, 124, 44, 91, -185]) == -888", "assert sum_negativenum([21, -68, 62, 40, 156, -638, 122, 41, 89, -191]) == -897", "assert sum_negativenum([18, -70, 54, 39, 156, -644, 117, 46, 95, -189]) == -903", "assert sum_negativenum([24, -62, 62, 40, 157, -639, 117, 39, 85, -191]) == -892", "assert sum_negativenum([21, -68, 53, 44, 150, -641, 122, 43, 94, -189]) == -898"], "entry_point": "sum_negativenum", "repair_prompt": ["Write a function sum_negativenum to calculate the sum of the negative numbers of a given list. You need to iterate through each number in the given list. During this iteration process, check if the number is negative. If the number is negative, add it to a running total sum. Ensure your function handles lists with positive numbers, as well as lists with only negative numbers or zeroes.\nsum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    total_sum: int = 0  # Initialize the sum of negative numbers\n\n    for number in numbers:\n        if isinstance(number, int) and number < 0:\n            total_sum += number\n\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [-1, 2, -3, 4, -5]\n    print(f\"The sum of negative numbers in {example_list} is {sum_negativenum(example_list)}\")\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list. Returns 0 if no negative numbers are present.\n    \"\"\"\n    # Initialize the total sum of negative numbers to zero\n    total_sum = 0\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the total sum\n            total_sum += number\n    \n    # Return the total sum of negative numbers\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list. Returns 0 if there are no negative numbers.\n    \n    Raises:\n    ValueError: If any element in the list is not an integer.\n    \"\"\"\n    # Initialize the sum of negative numbers\n    negative_sum = 0\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Check if the current element is an integer\n        if not isinstance(num, int):\n            raise ValueError(f\"Non-numeric input detected: {num}\")\n        \n        # If the number is negative, add it to the sum\n        if num < 0:\n            negative_sum += num\n    \n    # Return the sum of negative numbers\n    return negative_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    '''\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    '''\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n    \n    # Return the total sum of negative numbers\n    return negative_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the total sum\n            negative_sum += number\n    \n    # Return the total sum of negative numbers\n    return negative_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, int) and number < 0:\n            total_sum += number\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_numbers = [-1, 2, -3, 4, -5]\n    result = sum_negativenum(example_numbers)\n    print(f\"The sum of negative numbers is: {result}\")\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for number in numbers:\n        if isinstance(number, int) and number < 0:\n            total_sum += number\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers in the list. Returns 0 if no negative numbers are present.\n    \"\"\"\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Check if the number is negative\n        if number < 0:\n            # Add the negative number to the sum\n            negative_sum += number\n    \n    # Return the sum of negative numbers\n    return negative_sum\n\n# Example usage:\n# sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) should return -32\n# sum_negativenum([1, 2, 3, 4]) should return 0\n# sum_negativenum([]) should return 0\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The sum of negative numbers.\n    \"\"\"\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Check if the current number is negative\n        if isinstance(number, int) and number < 0:\n            # Add the negative number to the total sum\n            negative_sum += number\n        elif not isinstance(number, int):\n            # Handle non-numeric inputs by raising a ValueError\n            raise ValueError(\"All elements in the list must be integers.\")\n    \n    # Return the sum of negative numbers\n    return negative_sum\n", "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"Calculate the sum of negative numbers in a given list.\n\n    This function iterates over the provided list of integers and sums up\n    all the negative numbers. It handles edge cases such as empty lists\n    or lists with no negative numbers by returning 0 in such cases.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The sum of negative numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for number in numbers:\n        if number < 0:\n            total_sum += number\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function should iterate over the list, check for negative numbers, and sum them. It should handle lists with various compositions, including all positive numbers, all negative numbers, and zeros. The function should be efficient and easy to integrate into other projects.\nrequirement pool:\n- Implement the function to sum negative numbers.\n- Ensure the function handles edge cases like empty lists.\n- Document the function usage and examples.\n- Optimize the function for large lists.\n- Test the function with various list compositions.\nWe will implement a simple function using Python's built-in capabilities to iterate over the list and sum negative numbers. The function will be efficient and handle edge cases such as empty lists and lists with no negative numbers. We will ensure compatibility with Python 3.x and provide clear documentation with examples.\n", "requirement analysis:\nThe function should iterate over the list, check for negative numbers, and sum them. It should handle lists with various compositions, including all positive, all negative, and mixed numbers. The function should return zero if no negative numbers are present.\nrequirement pool:\n- Implement the main function to sum negative numbers\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for large lists\n- Provide documentation and examples\n- Include unit tests for validation\nWe will implement a simple function that iterates over the list, checks each number to see if it is negative, and adds it to a running total if it is. The function will handle edge cases such as empty lists and lists with no negative numbers by returning zero in such cases. We will use Python's built-in capabilities to keep the implementation efficient and straightforward.\n", "requirement analysis:\nThe function should iterate over the list, check each number, and sum only the negative ones. It should handle edge cases like lists with no negative numbers or all zeros.\nrequirement pool:\n- Implement the sum_negativenum function to calculate the sum of negative numbers.\n- Ensure the function handles empty lists without errors.\n- Optimize the function for performance with large lists.\n- Provide documentation and examples for users.\n- Include error handling for non-numeric inputs.\nWe will implement the function using pure Python to ensure simplicity and high usability. The function will iterate over the list, check each number, and sum only the negative ones. It will handle edge cases like lists with no negative numbers or all zeros. We will also include error handling for non-numeric inputs by raising a ValueError.\n", "requirement analysis:\nThe function should efficiently iterate through a list, identify negative numbers, and sum them. It should handle edge cases such as lists with no negative numbers or all negative numbers. The implementation should be straightforward and compatible with Python 3.x.\nrequirement pool:\n- Implement the main function to sum negative numbers.\n- Ensure the function handles edge cases like empty lists.\n- Provide documentation and examples for usage.\n- Optimize for performance with large lists.\n- Include unit tests to verify functionality.\nWe will implement a simple function using Python's built-in capabilities to iterate through the list and sum negative numbers. The function will handle edge cases such as empty lists and lists with no negative numbers. We will ensure compatibility with Python 3.x and provide documentation for usage.\n", "requirement analysis:\nThe function should iterate over the list, check for negative numbers, and sum them. It should handle lists with various compositions, including all positive numbers, all negative numbers, and zeros. The function should be efficient and easy to integrate.\nrequirement pool:\n- Implement the main function to sum negative numbers\n- Ensure the function handles edge cases like empty lists\n- Provide documentation and examples for usage\n- Optimize for performance with large lists\n- Include unit tests to verify functionality\nWe will implement a simple function using Python's built-in capabilities to iterate over the list and sum negative numbers. The function will handle edge cases such as empty lists and lists with no negative numbers. We will avoid using external libraries to keep the solution lightweight and easy to integrate.\n", "requirement analysis:\nThe function should iterate over the list, check for negative numbers, and sum them. It should handle lists with various compositions, including all positive numbers, all negative numbers, and zeros.\nrequirement pool:\n- Implement the main function to sum negative numbers\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for large lists\n- Provide documentation and examples\n- Include unit tests for various scenarios\nWe will implement a simple function using Python's built-in capabilities to iterate over the list and sum the negative numbers. This approach ensures efficiency and simplicity without the need for additional libraries.\n", "requirement analysis:\nThe function should iterate over a list, check for negative numbers, and sum them. It should handle lists with various compositions, including all positive numbers, all negative numbers, and zeros.\nrequirement pool:\n- Implement the sum_negativenum function\n- Ensure the function handles edge cases like empty lists\n- Document the function with examples\n- Optimize for performance with large lists\n- Include unit tests for validation\nWe will implement a simple function using Python's built-in capabilities to iterate over the list and sum negative numbers. This approach ensures efficiency and compatibility with Python 3.x without the need for external libraries.\n", "requirement analysis:\nThe function should iterate over the list, check for negative numbers, and sum them. It should handle lists with various compositions, including all positive, all negative, and mixed numbers. The function should return zero if no negative numbers are present.\nrequirement pool:\n- Implement the sum_negativenum function to sum negative numbers in a list\n- Ensure the function handles edge cases like empty lists or lists with no negative numbers\n- Optimize the function for performance with large lists\n- Provide documentation and examples for using the function\n- Include unit tests to verify the function's correctness\nWe will implement a simple function named sum_negativenum that iterates over a list of numbers, checks for negative values, and sums them. The function will handle edge cases such as empty lists and lists with no negative numbers by returning zero in such cases. We will use Python's built-in capabilities to ensure compatibility with Python 3.x and maintain simplicity and efficiency.\n", "requirement analysis:\nThe function should iterate over the list, check each number, and sum only the negative ones. It should handle edge cases like lists with no negative numbers or all zeroes.\nrequirement pool:\n- Implement the main function to sum negative numbers.\n- Optimize the function for performance with large datasets.\n- Add error handling for non-numeric inputs.\n- Include documentation and examples for user guidance.\n- Consider extending functionality to handle nested lists.\nWe will implement a simple function using pure Python to iterate over the list and sum the negative numbers. This approach is efficient for small to medium-sized lists and avoids the overhead of additional libraries. We will ensure the function handles edge cases like lists with no negative numbers or all zeroes. We will also include basic error handling for non-numeric inputs.\n", "requirement analysis:\nThe function should iterate over the list, check for negative numbers, and sum them. It should handle edge cases like lists with no negative numbers or all zeroes.\nrequirement pool:\n- Implement the sum_negativenum function to calculate the sum of negative numbers.\n- Optimize the function for performance with large lists.\n- Ensure the function is well-documented and easy to understand.\n- Handle edge cases such as empty lists or lists with no negative numbers.\n- Consider adding logging for debugging purposes.\nWe will implement a simple function using pure Python to iterate over the list and sum the negative numbers. This approach is straightforward and efficient for the task at hand, without the need for additional libraries. We will ensure the function handles edge cases like empty lists or lists with no negative numbers gracefully.\n"], "test": ["def check(sum_negativenum):\n\tassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "def check(sum_negativenum):\n\tassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 4, -9, -8, 12, -14, 12, -9, 22]) == -40", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 4, -1, -12, 12, -12, 13, -5, 20]) == -30", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 7, -9, -13, 12, -10, 11, -2, 13]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 7, -6, -14, 8, -8, 18, 0, 15]) == -28", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 4, -2, -13, 6, -7, 16, -4, 20]) == -26", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 3, -1, -12, 9, -11, 13, -6, 21]) == -30", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 1, -8, -5, 10, -13, 12, -9, 19]) == -35", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 8, -4, -8, 16, -7, 16, -2, 14]) == -21", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 1, -5, -13, 10, -17, 13, -9, 18]) == -44", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 1, -2, -14, 12, -13, 19, -3, 20]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([3, 9, -6, -7, 12, -13, 15, -2, 20]) == -28", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 7, -1, -14, 13, -11, 9, -4, 12]) == -30", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 9, -11, -12, 11, -11, 15, 0, 22]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 1, -1, -13, 13, -16, 19, -2, 19]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 4, -7, -5, 15, -16, 12, -6, 17]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 1, -7, -9, 14, -10, 10, -7, 15]) == -33", "def check(sum_negativenum):\n\tassert sum_negativenum([3, 3, -8, -11, 15, -13, 19, -3, 18]) == -35", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 7, -4, -12, 10, -8, 13, -1, 16]) == -25", "def check(sum_negativenum):\n\tassert sum_negativenum([1, 8, -7, -8, 13, -9, 17, -2, 22]) == -26", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 4, -3, -13, 16, -11, 17, -10, 12]) == -37", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 6, -4, -10, 6, -7, 10, -7, 14]) == -28", "def check(sum_negativenum):\n\tassert sum_negativenum([1, 8, -6, -9, 11, -14, 18, -8, 15]) == -37", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 1, -10, -10, 14, -8, 10, -10, 15]) == -38", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 6, -11, -4, 14, -16, 10, -10, 19]) == -41", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 2, -6, -14, 16, -8, 9, -10, 18]) == -38", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 7, -8, -5, 15, -13, 13, -8, 16]) == -34", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 1, -4, -7, 10, -9, 12, -2, 15]) == -22", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 6, -5, -7, 16, -11, 13, -9, 22]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([4, 7, -4, -11, 15, -15, 12, -8, 16]) == -38", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 2, -10, -7, 10, -7, 19, -8, 20]) == -32", "def check(sum_negativenum):\n\tassert sum_negativenum([2, 3, -7, -9, 16, -16, 19, -9, 13]) == -41", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 1, -5, -9, 11, -9, 18, -8, 16]) == -31", "def check(sum_negativenum):\n\tassert sum_negativenum([1, 5, -6, -4, 6, -8, 18, 0, 21]) == -18", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 14, -11, 8, -18, 12, -15]) == -44", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 16, -12, 10, -21, 16, -16]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([14, 15, -19, 16, -22, 14, -15]) == -56", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 15, -17, 12, -18, 11, -21]) == -56", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 10, -14, 13, -20, 11, -21]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 19, -13, 15, -14, 16, -21]) == -48", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 15, -11, 11, -14, 14, -24]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 16, -18, 11, -22, 16, -21]) == -61", "def check(sum_negativenum):\n\tassert sum_negativenum([13, 11, -17, 13, -13, 16, -16]) == -46", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 14, -9, 9, -21, 14, -18]) == -48", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 14, -17, 16, -20, 8, -24]) == -61", "def check(sum_negativenum):\n\tassert sum_negativenum([14, 14, -9, 15, -13, 9, -23]) == -45", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 14, -15, 12, -13, 12, -19]) == -47", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 10, -15, 14, -15, 8, -19]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([9, 10, -9, 18, -23, 15, -25]) == -57", "def check(sum_negativenum):\n\tassert sum_negativenum([8, 12, -10, 9, -23, 16, -21]) == -54", "def check(sum_negativenum):\n\tassert sum_negativenum([15, 12, -14, 17, -20, 10, -16]) == -50", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 13, -14, 17, -13, 16, -21]) == -48", "def check(sum_negativenum):\n\tassert sum_negativenum([8, 17, -15, 12, -20, 16, -17]) == -52", "def check(sum_negativenum):\n\tassert sum_negativenum([13, 19, -15, 10, -19, 11, -21]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([12, 18, -17, 15, -17, 15, -15]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 10, -10, 8, -22, 14, -24]) == -56", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 13, -9, 17, -17, 10, -16]) == -42", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 11, -10, 10, -13, 17, -16]) == -39", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 10, -16, 17, -22, 13, -24]) == -62", "def check(sum_negativenum):\n\tassert sum_negativenum([5, 17, -16, 12, -19, 13, -18]) == -53", "def check(sum_negativenum):\n\tassert sum_negativenum([6, 14, -15, 12, -15, 9, -17]) == -47", "def check(sum_negativenum):\n\tassert sum_negativenum([7, 16, -15, 11, -21, 8, -16]) == -52", "def check(sum_negativenum):\n\tassert sum_negativenum([15, 15, -16, 17, -17, 8, -22]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([13, 17, -11, 9, -20, 17, -18]) == -49", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 16, -18, 12, -21, 16, -20]) == -59", "def check(sum_negativenum):\n\tassert sum_negativenum([10, 20, -15, 18, -21, 14, -16]) == -52", "def check(sum_negativenum):\n\tassert sum_negativenum([11, 13, -17, 14, -18, 17, -20]) == -55", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -66, 54, 41, 154, -636, 123, 49, 90, -195]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([23, -67, 56, 42, 152, -641, 117, 48, 94, -191]) == -899", "def check(sum_negativenum):\n\tassert sum_negativenum([21, -66, 55, 37, 150, -641, 118, 40, 92, -195]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -67, 57, 36, 152, -641, 116, 40, 95, -194]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([20, -62, 52, 34, 156, -640, 126, 40, 85, -185]) == -887", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -60, 57, 40, 151, -643, 124, 43, 86, -192]) == -895", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -68, 55, 44, 152, -637, 116, 47, 87, -194]) == -899", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -61, 62, 43, 157, -639, 120, 46, 91, -188]) == -888", "def check(sum_negativenum):\n\tassert sum_negativenum([18, -70, 62, 42, 157, -644, 126, 43, 93, -189]) == -903", "def check(sum_negativenum):\n\tassert sum_negativenum([23, -70, 54, 43, 157, -637, 117, 48, 85, -188]) == -895", "def check(sum_negativenum):\n\tassert sum_negativenum([22, -68, 59, 38, 149, -644, 117, 39, 88, -192]) == -904", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -61, 54, 41, 154, -643, 117, 45, 93, -195]) == -899", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -62, 52, 37, 150, -634, 126, 46, 85, -190]) == -886", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -67, 60, 37, 150, -639, 120, 44, 95, -189]) == -895", "def check(sum_negativenum):\n\tassert sum_negativenum([17, -61, 58, 35, 155, -634, 125, 44, 87, -191]) == -886", "def check(sum_negativenum):\n\tassert sum_negativenum([20, -67, 55, 35, 148, -635, 121, 41, 92, -186]) == -888", "def check(sum_negativenum):\n\tassert sum_negativenum([17, -66, 59, 43, 154, -639, 125, 45, 90, -186]) == -891", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -62, 53, 39, 148, -639, 119, 44, 87, -195]) == -896", "def check(sum_negativenum):\n\tassert sum_negativenum([16, -65, 59, 38, 156, -643, 126, 48, 89, -194]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([16, -67, 56, 41, 157, -642, 117, 47, 94, -185]) == -894", "def check(sum_negativenum):\n\tassert sum_negativenum([15, -69, 57, 35, 157, -639, 122, 47, 87, -194]) == -902", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -69, 53, 35, 153, -638, 123, 43, 89, -187]) == -894", "def check(sum_negativenum):\n\tassert sum_negativenum([15, -70, 61, 44, 154, -644, 119, 46, 85, -191]) == -905", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -66, 60, 36, 147, -635, 126, 47, 92, -190]) == -891", "def check(sum_negativenum):\n\tassert sum_negativenum([16, -67, 52, 42, 153, -636, 122, 47, 94, -194]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([17, -66, 61, 38, 154, -639, 120, 41, 86, -189]) == -894", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -63, 57, 35, 147, -643, 125, 42, 85, -192]) == -898", "def check(sum_negativenum):\n\tassert sum_negativenum([14, -67, 53, 42, 154, -638, 120, 44, 90, -192]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([19, -66, 57, 44, 152, -637, 124, 44, 91, -185]) == -888", "def check(sum_negativenum):\n\tassert sum_negativenum([21, -68, 62, 40, 156, -638, 122, 41, 89, -191]) == -897", "def check(sum_negativenum):\n\tassert sum_negativenum([18, -70, 54, 39, 156, -644, 117, 46, 95, -189]) == -903", "def check(sum_negativenum):\n\tassert sum_negativenum([24, -62, 62, 40, 157, -639, 117, 39, 85, -191]) == -892", "def check(sum_negativenum):\n\tassert sum_negativenum([21, -68, 53, 44, 150, -641, 122, 43, 94, -189]) == -898"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_negativenum(numbers: list) -> int:\n    \"\"\"Calculate the sum of negative numbers in a given list.\n\n    This function iterates over the provided list of integers and sums up\n    all the negative numbers. It handles edge cases such as empty lists\n    or lists with no negative numbers by returning 0 in such cases.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The sum of negative numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for number in numbers:\n        if number < 0:\n            total_sum += number\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 759, "mutate_method": "expand_one2two", "parent_index": 57}
