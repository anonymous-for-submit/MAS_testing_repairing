{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 566, "prompt": "Write a function to get the sum of the digits of a non-negative integer. It is important that your solution is efficient and can handle large inputs gracefully. Your approach should minimize computational overhead and manage memory effectively.", "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16", "assert sum_digits(344) == 11", "assert sum_digits(350) == 8", "assert sum_digits(342) == 9", "assert sum_digits(342) == 9", "assert sum_digits(341) == 8", "assert sum_digits(347) == 14", "assert sum_digits(345) == 12", "assert sum_digits(343) == 10", "assert sum_digits(341) == 8", "assert sum_digits(345) == 12", "assert sum_digits(340) == 7", "assert sum_digits(345) == 12", "assert sum_digits(347) == 14", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(344) == 11", "assert sum_digits(340) == 7", "assert sum_digits(341) == 8", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(347) == 14", "assert sum_digits(349) == 16", "assert sum_digits(348) == 15", "assert sum_digits(347) == 14", "assert sum_digits(341) == 8", "assert sum_digits(343) == 10", "assert sum_digits(343) == 10", "assert sum_digits(346) == 13", "assert sum_digits(350) == 8", "assert sum_digits(340) == 7", "assert sum_digits(349) == 16", "assert sum_digits(15) == 6", "assert sum_digits(9) == 9", "assert sum_digits(10) == 1", "assert sum_digits(12) == 3", "assert sum_digits(11) == 2", "assert sum_digits(15) == 6", "assert sum_digits(10) == 1", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(10) == 1", "assert sum_digits(13) == 4", "assert sum_digits(7) == 7", "assert sum_digits(9) == 9", "assert sum_digits(16) == 7", "assert sum_digits(15) == 6", "assert sum_digits(16) == 7", "assert sum_digits(9) == 9", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(16) == 7", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(10) == 1", "assert sum_digits(9) == 9", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(12) == 3", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(8) == 8", "assert sum_digits(13) == 4", "assert sum_digits(100) == 1", "assert sum_digits(98) == 17", "assert sum_digits(94) == 13", "assert sum_digits(92) == 11", "assert sum_digits(101) == 2", "assert sum_digits(102) == 3", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(101) == 2", "assert sum_digits(92) == 11", "assert sum_digits(95) == 14", "assert sum_digits(102) == 3", "assert sum_digits(96) == 15", "assert sum_digits(93) == 12", "assert sum_digits(96) == 15", "assert sum_digits(98) == 17", "assert sum_digits(92) == 11", "assert sum_digits(102) == 3", "assert sum_digits(100) == 1", "assert sum_digits(95) == 14", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(102) == 3", "assert sum_digits(92) == 11", "assert sum_digits(98) == 17", "assert sum_digits(97) == 16", "assert sum_digits(95) == 14", "assert sum_digits(101) == 2", "assert sum_digits(97) == 16", "assert sum_digits(100) == 1", "assert sum_digits(92) == 11", "assert sum_digits(97) == 16", "assert sum_digits(93) == 12"], "entry_point": "sum_digits", "repair_prompt": ["Write a function sum_digits to get the sum of the digits of a non-negative integer. It is important that your solution is efficient and can handle large inputs gracefully. Your approach should minimize computational overhead and manage memory effectively.\nsum_digits(345)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    This function iterates over each digit of the input integer, \n    using basic arithmetic operations to extract and sum the digits.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    total_sum = 0\n    while n > 0:\n        digit = n % 10  # Extract the last digit\n        total_sum += digit  # Add the digit to the total sum\n        n //= 10  # Remove the last digit from the number\n    return total_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output should be 15\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    n_str = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in n_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_str = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage:\n# result = sum_digits(123)\n# print(result)  # Output: 6\n", "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the computed sum of digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 12345\n    print(f\"The sum of digits in {test_number} is {sum_digits(test_number)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_str = str(n)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    sample_input = 12345\n    print(f\"The sum of digits in {sample_input} is {sum_digits(sample_input)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each digit in the number\n    while n > 0:\n        # Add the last digit to the sum\n        digit_sum += n % 10\n        # Remove the last digit from the number\n        n //= 10\n    \n    return digit_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output: 15\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_string = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_string:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_string = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_string:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"Calculate the sum of the digits of a non-negative integer.\n\n    This function takes a non-negative integer, converts it to a string to\n    iterate over each digit, converts each character back to an integer, and\n    sums them up. It handles edge cases like zero gracefully.\n\n    Args:\n        n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_str = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output: 15\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each character\n    str_n = str(n)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in str_n:\n        # Convert character back to integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the computed sum of digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 12345\n    print(f\"The sum of digits in {test_number} is {sum_digits(test_number)}\")\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the sum of digits for large integers, minimizing computational overhead and memory usage. It should handle edge cases like zero and be easy to integrate into various projects.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases like zero\n- Provide clear documentation\n- Easy integration into existing projects\nWe will implement a function that efficiently computes the sum of digits of a non-negative integer by iterating over each digit. This approach avoids converting the number to a string, thus minimizing memory usage and computational overhead. We will use basic arithmetic operations to extract and sum the digits.\n", "requirement analysis:\nThe function needs to efficiently compute the sum of digits for large integers, minimizing both computational overhead and memory usage. It should be easy to integrate and well-documented.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Provide clear documentation\n- Ensure easy integration\n- Optimize for small inputs as well\nWe will implement the sum_digits function using Python's built-in capabilities to handle large integers efficiently. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum these values. This approach minimizes computational overhead and memory usage by avoiding complex data structures and operations.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for large integers, minimizing computational overhead and memory usage. It should handle edge cases like zero and be easy to integrate into existing codebases.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases gracefully\n- Provide clear documentation\n- Easy integration into existing projects\nWe will implement a simple and efficient function to sum the digits of a non-negative integer. The function will convert the integer to a string to iterate over each digit, summing them as integers. This approach minimizes memory usage by avoiding unnecessary data structures and handles large inputs efficiently. We will ensure the function handles edge cases like zero gracefully and provide clear documentation for easy integration.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should minimize computational overhead and manage memory effectively to ensure performance and reliability.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases like zero\n- Ensure accuracy and reliability\n- Provide seamless user experience\nWe will implement a function that efficiently computes the sum of digits of a non-negative integer using Python's built-in capabilities. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach minimizes computational overhead and memory usage by leveraging Python's efficient handling of strings and integers. We will ensure the function handles edge cases like zero gracefully and is optimized for large inputs.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should minimize computational overhead and manage memory effectively, ensuring quick and reliable results.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers.\n- Minimize memory usage during computation.\n- Handle edge cases such as zero and single-digit numbers.\n- Ensure the function is easy to use and integrate.\n- Provide detailed documentation for the function.\nWe will implement a simple and efficient function using Python's built-in capabilities to handle large integers. The function will convert the integer to a string to iterate over each digit, summing them up. This approach minimizes memory usage and computational overhead by avoiding unnecessary data structures or external libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for large integers, minimizing computational overhead and memory usage. It should handle edge cases like zero and be easy to integrate into existing codebases.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases gracefully\n- Provide clear documentation\n- Easy integration into existing projects\nWe will implement a simple and efficient function to sum the digits of a non-negative integer. The function will use a straightforward iterative approach to minimize computational overhead and memory usage. This approach avoids the need for converting the number into a list or using recursion, which can be inefficient for very large numbers. The function will handle edge cases such as zero gracefully and will be easy to integrate into existing projects due to its simplicity.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers, while minimizing memory usage. It should handle edge cases like zero and ensure quick execution.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases like zero\n- Ensure quick execution\n- Provide clear documentation\nWe will implement a function `sum_digits` that efficiently computes the sum of digits of a non-negative integer. To handle large inputs gracefully, we will use Python's built-in capabilities for handling large integers and avoid unnecessary data structures that could increase memory usage. The function will convert the integer to a string to iterate over each digit, summing them up. This approach minimizes memory usage and computational overhead.\n", "requirement analysis:\nThe function must efficiently compute the sum of digits for large integers, ensuring minimal computational overhead and effective memory management. It should handle edge cases like zero and very large numbers gracefully.\nrequirement pool:\n- Efficient computation for large inputs\n- Optimize memory usage\n- Handle edge cases like zero\n- Ensure reliability and accuracy\n- Provide seamless user experience\nWe will implement a function `sum_digits` that efficiently computes the sum of digits of a non-negative integer. To handle large inputs gracefully, we will use Python's inherent ability to manage large integers and avoid unnecessary data structures. The function will convert the integer to a string to iterate over each digit, summing them up. This approach minimizes memory usage and computational overhead. We will ensure the function handles edge cases like zero by including a simple check.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for large integers, minimizing computational overhead and memory usage. It should handle edge cases like zero and be easy to integrate into existing codebases.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases like zero\n- Provide clear documentation\n- Easy integration into existing projects\nWe will implement a simple and efficient function using Python's built-in capabilities to sum the digits of a non-negative integer. The function will convert the integer to a string to iterate over each digit, convert each character back to an integer, and sum them up. This approach minimizes memory usage and computational overhead, making it suitable for large inputs. We will ensure the function handles edge cases like zero gracefully.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for large integers, minimizing computational overhead and memory usage. It should handle edge cases like zero and be easy to integrate into various projects.\nrequirement pool:\n- Efficient computation for large inputs\n- Minimize memory usage\n- Handle edge cases gracefully\n- Provide clear documentation\n- Easy integration into existing projects\nWe will implement a function `sum_digits` that efficiently computes the sum of the digits of a non-negative integer. The function will convert the integer to a string to iterate over each character, convert each character back to an integer, and sum them up. This approach minimizes computational overhead and memory usage by avoiding unnecessary data structures and operations. We will ensure that the function handles edge cases like zero gracefully.\n"], "test": ["def check(sum_digits):\n\tassert sum_digits(345)==12", "def check(sum_digits):\n\tassert sum_digits(12)==3", "def check(sum_digits):\n\tassert sum_digits(97)==16", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(348) == 15", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(346) == 13", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(11) == 2", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(8) == 8", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(94) == 13", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(93) == 12"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each character\n    str_n = str(n)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in str_n:\n        # Convert character back to integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the computed sum of digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 12345\n    print(f\"The sum of digits in {test_number} is {sum_digits(test_number)}\")\n", "passed": true, "pass": true, "pass_num": 10, "round": 971, "mutate_method": "expand_one2two", "parent_index": 407}
