{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list and sum all of its elements. Ensure that the function handles nested lists of arbitrary depth efficiently.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "assert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "assert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "assert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "assert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "assert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "assert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "assert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "assert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "assert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "assert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "assert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "assert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "assert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "assert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "assert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "assert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "assert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "assert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "assert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "assert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "assert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "assert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "assert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "assert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "assert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "assert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "assert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "assert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "assert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "assert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "assert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "assert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "assert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "assert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "assert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "assert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "assert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "assert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "assert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "assert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "assert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "assert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "assert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "assert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "assert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "assert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "assert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "assert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "assert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "assert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "assert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "assert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "assert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "assert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "assert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "assert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "assert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "assert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "assert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "assert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "assert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "assert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "assert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "assert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "assert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "assert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "assert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "assert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "assert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "assert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "assert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "assert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "assert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "assert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "assert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "assert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "assert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "assert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "assert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "assert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "assert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "assert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "assert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "assert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "assert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "assert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "assert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "assert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "assert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "assert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "assert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "assert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "assert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "assert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "assert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "assert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "assert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "assert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "assert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "entry_point": "recursive_list_sum", "repair_prompt": ["Write a function recursive_list_sum to flatten a list and sum all of its elements. Ensure that the function handles nested lists of arbitrary depth efficiently.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"], "completions": ["from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all its elements.\n\n    Parameters:\n    lst (list): A potentially nested list of integers.\n\n    Returns:\n    int: The sum of all integers in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add integer element to the total sum\n            total_sum += element\n        else:\n            # Handle non-integer elements by ignoring them\n            print(f\"Warning: Non-integer element '{element}' ignored.\")\n\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    nested_list = [1, [2, [3, 4], 5], 6, [7, 8, [9, 10]]]\n    print(f\"The sum of all integers in the nested list is: {recursive_list_sum(nested_list)}\")\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all its numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function if the element is a list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add the element to the sum if it is an integer\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            continue\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    '''\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A list that may contain nested lists.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    '''\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively call the function for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n        else:\n            # If non-numeric elements are encountered, they are ignored\n            pass\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Args:\n        lst (list): A potentially nested list of elements.\n\n    Returns:\n        int: The sum of all numeric elements in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively sum elements in the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            pass\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A list that may contain nested lists of arbitrary depth.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n\n    Raises:\n    ValueError: If a non-numeric element is encountered.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively call the function for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n        else:\n            # Raise an error for non-numeric elements\n            raise ValueError(f\"Non-numeric element encountered: {element}\")\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all its integer elements.\n    \n    Args:\n        nested_list: A list that may contain integers and other lists.\n        \n    Returns:\n        The sum of all integer elements in the nested list.\n        \n    Raises:\n        ValueError: If a non-integer element is encountered in the list.\n    \"\"\"\n    total_sum = 0\n    \n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call the function for sublist\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add integer element to the sum\n            total_sum += element\n        else:\n            # Raise an error for non-integer elements\n            raise ValueError(f\"Non-integer element encountered: {element}\")\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n    \n    Args:\n        nested_list (list): A list that may contain nested lists and numeric elements.\n        \n    Returns:\n        int: The sum of all numeric elements in the nested list.\n        \n    Raises:\n        TypeError: If the input is not a list or contains non-numeric elements.\n    \"\"\"\n    if not isinstance(nested_list, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    total_sum = 0\n    \n    for element in nested_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total_sum += element\n        else:\n            raise TypeError(\"All elements must be numeric or lists.\")\n    \n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"Flattens a nested list and returns the sum of all numeric elements.\n\n    This function traverses through each element of the list, checking if it is a list itself.\n    If it is, the function calls itself recursively to handle the nested list.\n    If it is a numeric value, it adds it to the sum.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of arbitrary depth.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            continue\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"Flattens a nested list and returns the sum of all its numeric elements.\n\n    This function traverses through each element of the list. If an element is a list itself,\n    the function will recursively call itself to flatten and sum the elements within that sublist.\n    Non-numeric elements are ignored.\n\n    Args:\n        nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n        int: The sum of all integers in the nested list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the sublist\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add the integer element to the total sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            continue\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add numeric element to sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            continue\n\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function must efficiently traverse and flatten nested lists, ensuring all elements are summed correctly. It should handle lists of arbitrary depth without performance degradation.\nrequirement pool:\n- Implement recursive traversal to flatten nested lists\n- Ensure accurate summation of all list elements\n- Optimize for performance with large datasets\n- Provide clear documentation for integration\n- Include error handling for non-list inputs\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will recursively call itself to handle the nested list. This approach ensures that all elements, regardless of their depth in the nested structure, are summed correctly. We will use Python's built-in capabilities without additional libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe function must efficiently flatten and sum elements of nested lists, ensuring performance does not degrade with increased depth or size. It should handle various data types within the list and return a single numerical sum.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Handle large datasets without performance issues\n- Support various data types within lists\n- Provide clear error messages for invalid inputs\nWe will implement a recursive function that traverses through each element of the list. If an element is a list, the function will recursively call itself to flatten and sum the elements. This approach ensures that the function can handle nested lists of arbitrary depth efficiently. We will use Python's built-in capabilities without additional libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe function must efficiently flatten nested lists and sum all elements, ensuring it handles arbitrary depth without performance degradation. It should be optimized for both small and large datasets.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Optimize for large datasets\n- Handle arbitrary depth\n- Provide quick results\nWe will implement a recursive function that traverses through the list, checking each element. If an element is a list, the function will call itself recursively to handle the nested list. If the element is a number, it will be added to the sum. This approach ensures that the function can handle lists of arbitrary depth efficiently. We will use Python's built-in capabilities without additional libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe function should efficiently handle lists with varying levels of nesting and return the correct sum. It should be robust enough to handle edge cases such as empty lists or lists with non-numeric elements.\nrequirement pool:\n- Implement the recursive_list_sum function to handle nested lists.\n- Optimize the function for performance with large datasets.\n- Include error handling for non-list inputs.\n- Provide documentation and examples for users.\n- Test the function with various edge cases.\nWe will implement a recursive function to traverse and sum elements in a nested list. The function will check if each element is a list and recursively sum its elements. If an element is not a list, it will be added to the sum if it is numeric. Non-numeric elements will be ignored, as the requirement for handling them is unclear. We will use Python's built-in capabilities to handle recursion efficiently.\n", "requirement analysis:\nThe function must efficiently flatten nested lists and sum all elements, ensuring it handles arbitrary depth without performance degradation.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Handle large datasets\n- Optimize for performance\n- Provide clear error messages for invalid inputs\nWe will implement a recursive function that traverses through each element of the list. If an element is a list, the function will recursively call itself to flatten and sum the elements within that nested list. We will use Python's built-in capabilities to handle recursion efficiently. The function will also check for non-numeric elements and raise an error if encountered.\n", "requirement analysis:\nThe function must efficiently flatten and sum elements of nested lists, ensuring performance optimization for large and deeply nested structures. It should handle various data types within the list and return a single integer sum.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Optimize for large datasets\n- Handle various data types\n- Provide clear error messages for invalid inputs\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will recursively call itself to flatten and sum the elements of that sublist. This approach ensures that the function can handle nested lists of arbitrary depth efficiently. We will use Python's built-in capabilities without relying on external libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe function should efficiently handle lists with arbitrary depth, ensuring that all elements are summed correctly. It should be robust against incorrect input types and provide meaningful error messages.\nrequirement pool:\n- Efficiently flatten and sum nested lists\n- Handle incorrect input types gracefully\n- Optimize for performance with large datasets\n- Provide detailed error messages\n- Ensure compatibility with Python 3.x\nWe will use a recursive function to traverse and sum elements of a nested list. The function will check if each element is a list and recursively sum its elements. If an element is not a list, it will be added directly to the sum. We will handle incorrect input types by raising a TypeError with a meaningful error message. Non-numeric elements will also raise an error to ensure data integrity.\n", "requirement analysis:\nThe function must efficiently flatten and sum elements of nested lists, ensuring performance and accuracy. It should handle lists of arbitrary depth without errors and return results quickly.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Optimize for large datasets\n- Ensure compatibility with existing projects\n- Provide clear error messages for invalid inputs\nWe will implement a recursive function that traverses through each element of the list, checking if it is a list itself. If it is, the function will call itself recursively to handle the nested list. If it is a numeric value, it will add it to the sum. We will use Python's built-in capabilities to handle recursion efficiently without requiring any additional libraries.\n", "requirement analysis:\nThe function must efficiently flatten and sum elements of nested lists, ensuring it handles arbitrary depth without performance degradation. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Optimize for large datasets\n- Ensure compatibility with existing Python projects\n- Provide clear documentation and examples\nWe will implement a recursive function that traverses through each element of the list. If an element is a list itself, the function will recursively call itself to flatten and sum the elements within that sublist. This approach ensures that the function can handle nested lists of arbitrary depth efficiently. We will use Python's built-in capabilities without relying on external libraries, as they are sufficient for this task.\n", "requirement analysis:\nThe function must efficiently flatten and sum elements of nested lists, ensuring it handles arbitrary depth without performance degradation. It should be easy to use and integrate into existing projects.\nrequirement pool:\n- Efficiently flatten nested lists\n- Accurately sum all elements\n- Optimize for large datasets\n- Ensure compatibility with existing Python projects\n- Provide clear documentation and examples\nWe will implement a recursive function that traverses through the nested list structure, flattening it and summing the elements. The function will handle arbitrary depth efficiently by using recursion. We will use Python's built-in capabilities without relying on external libraries, ensuring compatibility and ease of integration.\n"], "test": ["def check(recursive_list_sum):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add numeric element to sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            continue\n\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 19, "mutate_method": "add_1_sentence_at_end", "parent_index": 19}
