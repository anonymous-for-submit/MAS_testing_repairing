{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 479, "prompt": "Write a python function to find the first digit of a given number.", "code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ", "test_imports": [], "test_list": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1", "assert first_Digit(125) == 1", "assert first_Digit(128) == 1", "assert first_Digit(122) == 1", "assert first_Digit(121) == 1", "assert first_Digit(120) == 1", "assert first_Digit(123) == 1", "assert first_Digit(119) == 1", "assert first_Digit(120) == 1", "assert first_Digit(124) == 1", "assert first_Digit(126) == 1", "assert first_Digit(124) == 1", "assert first_Digit(123) == 1", "assert first_Digit(120) == 1", "assert first_Digit(119) == 1", "assert first_Digit(118) == 1", "assert first_Digit(123) == 1", "assert first_Digit(123) == 1", "assert first_Digit(128) == 1", "assert first_Digit(124) == 1", "assert first_Digit(124) == 1", "assert first_Digit(126) == 1", "assert first_Digit(118) == 1", "assert first_Digit(122) == 1", "assert first_Digit(118) == 1", "assert first_Digit(119) == 1", "assert first_Digit(128) == 1", "assert first_Digit(124) == 1", "assert first_Digit(128) == 1", "assert first_Digit(120) == 1", "assert first_Digit(127) == 1", "assert first_Digit(128) == 1", "assert first_Digit(128) == 1", "assert first_Digit(125) == 1", "assert first_Digit(453) == 4", "assert first_Digit(461) == 4", "assert first_Digit(457) == 4", "assert first_Digit(456) == 4", "assert first_Digit(453) == 4", "assert first_Digit(453) == 4", "assert first_Digit(460) == 4", "assert first_Digit(454) == 4", "assert first_Digit(455) == 4", "assert first_Digit(460) == 4", "assert first_Digit(451) == 4", "assert first_Digit(453) == 4", "assert first_Digit(457) == 4", "assert first_Digit(460) == 4", "assert first_Digit(451) == 4", "assert first_Digit(461) == 4", "assert first_Digit(455) == 4", "assert first_Digit(453) == 4", "assert first_Digit(461) == 4", "assert first_Digit(459) == 4", "assert first_Digit(454) == 4", "assert first_Digit(453) == 4", "assert first_Digit(460) == 4", "assert first_Digit(454) == 4", "assert first_Digit(454) == 4", "assert first_Digit(461) == 4", "assert first_Digit(456) == 4", "assert first_Digit(459) == 4", "assert first_Digit(459) == 4", "assert first_Digit(461) == 4", "assert first_Digit(458) == 4", "assert first_Digit(455) == 4", "assert first_Digit(459) == 4", "assert first_Digit(7) == 7", "assert first_Digit(17) == 1", "assert first_Digit(16) == 1", "assert first_Digit(13) == 1", "assert first_Digit(9) == 9", "assert first_Digit(10) == 1", "assert first_Digit(15) == 1", "assert first_Digit(8) == 8", "assert first_Digit(7) == 7", "assert first_Digit(12) == 1", "assert first_Digit(13) == 1", "assert first_Digit(9) == 9", "assert first_Digit(12) == 1", "assert first_Digit(9) == 9", "assert first_Digit(12) == 1", "assert first_Digit(15) == 1", "assert first_Digit(8) == 8", "assert first_Digit(8) == 8", "assert first_Digit(15) == 1", "assert first_Digit(16) == 1", "assert first_Digit(10) == 1", "assert first_Digit(17) == 1", "assert first_Digit(12) == 1", "assert first_Digit(16) == 1", "assert first_Digit(15) == 1", "assert first_Digit(16) == 1", "assert first_Digit(17) == 1", "assert first_Digit(14) == 1", "assert first_Digit(14) == 1", "assert first_Digit(17) == 1", "assert first_Digit(8) == 8", "assert first_Digit(17) == 1", "assert first_Digit(12) == 1"], "entry_point": "first_Digit", "repair_prompt": ["Write a python function first_Digit to find the first digit of a given number.\nfirst_Digit(123) == 1\n"], "completions": ["from typing import List\n## main.py\n\ndef first_digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit from a given integer.\n\n    Parameters:\n    number (int): The number from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to handle both positive and negative numbers\n    number_str = str(number)\n    \n    # Check if the number is negative\n    if number_str[0] == '-':\n        # If negative, the first digit is after the negative sign\n        first_digit_char = number_str[1]\n    else:\n        # If positive, the first digit is the first character\n        first_digit_char = number_str[0]\n    \n    # Convert the first character back to an integer\n    first_digit_int = int(first_digit_char)\n    \n    return first_digit_int\n\n# Example usage:\n# print(first_digit(12345))  # Output: 1\n# print(first_digit(-9876))  # Output: 9\n", "from typing import List\n## main.py\n\ndef first_Digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the integer.\n    \"\"\"\n    # Convert the number to a string to facilitate extraction of the first digit\n    number_str = str(number)\n    \n    # Check if the number is negative\n    if number_str[0] == '-':\n        # If negative, the first digit is the second character in the string\n        first_digit = number_str[1]\n    else:\n        # If positive, the first digit is the first character in the string\n        first_digit = number_str[0]\n    \n    # Convert the extracted character back to an integer\n    return int(first_digit)\n", "from typing import List\n## main.py\n\ndef first_Digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    This function converts the number to a string to easily access the first character,\n    then converts it back to an integer. It handles both positive and negative numbers\n    by ignoring the sign.\n\n    Parameters:\n    number (int): The number from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Check if the number is negative and ignore the sign\n    if number_str[0] == '-':\n        first_char = number_str[1]\n    else:\n        first_char = number_str[0]\n    \n    # Convert the first character back to an integer\n    first_digit = int(first_char)\n    \n    return first_digit\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(first_Digit(12345))  # Output: 1\n    print(first_Digit(-9876))  # Output: 9\n    print(first_Digit(0))      # Output: 0\n", "from typing import List\n## main.py\n\ndef first_digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    This function handles both positive and negative integers by converting\n    the number to a string, removing any negative sign, and returning the\n    first character as an integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Remove negative sign if present\n    if number_str[0] == '-':\n        number_str = number_str[1:]\n    \n    # Extract the first character and convert it to an integer\n    first_digit = int(number_str[0])\n    \n    return first_digit\n", "from typing import List\n## main.py\n\ndef first_digit(number: int) -> int:\n    '''\n    Extracts the first non-zero digit from a given integer.\n    \n    Parameters:\n    number (int): The integer from which to extract the first digit.\n    \n    Returns:\n    int: The first non-zero digit of the number.\n    \n    Raises:\n    ValueError: If the input is not an integer.\n    '''\n    if not isinstance(number, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    # Convert the number to a string to handle both positive and negative numbers\n    number_str = str(abs(number))\n    \n    # Iterate over the string to find the first non-zero digit\n    for char in number_str:\n        if char != '0':\n            return int(char)\n    \n    # If all digits are zero, return 0 (though this case is unlikely for non-zero integers)\n    return 0\n", "from typing import List\n## main.py\n\ndef first_Digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to handle the digits\n    number_str = str(number)\n    \n    # Check if the number is negative\n    if number_str[0] == '-':\n        # If negative, the first digit is after the negative sign\n        first_digit = number_str[1]\n    else:\n        # If positive, the first digit is the first character\n        first_digit = number_str[0]\n    \n    # Return the first digit as an integer\n    return int(first_digit)\n", "from typing import List\n## main.py\n\ndef first_digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit from a given integer.\n\n    This function handles both positive and negative numbers by converting\n    the number to a string and extracting the first character that is a digit.\n\n    Parameters:\n    number (int): The number from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string to handle both positive and negative numbers\n    number_str = str(abs(number))\n    \n    # Iterate over the string to find the first digit\n    for char in number_str:\n        if char.isdigit():\n            return int(char)\n    \n    # If no digit is found, which is unlikely, return 0 as a default\n    return 0\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(first_digit(12345))  # Output: 1\n    print(first_digit(-98765)) # Output: 9\n    print(first_digit(0))      # Output: 0\n", "from typing import List\n## main.py\n\ndef first_Digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    This function handles both positive and negative integers by converting\n    the number to a string, removing any negative sign, and returning the\n    first character as an integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first non-zero digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Remove the negative sign if present\n    if number_str[0] == '-':\n        number_str = number_str[1:]\n    \n    # Return the first character as an integer\n    return int(number_str[0])\n\n# Example usage:\n# result = first_Digit(-12345)\n# print(result)  # Output: 1\n", "from typing import List\n## main.py\n\ndef first_digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the absolute value of the input number.\n    \"\"\"\n    # Calculate the absolute value of the number to handle negative inputs\n    abs_number = abs(number)\n    \n    # Convert the absolute number to a string to easily access the first digit\n    abs_number_str = str(abs_number)\n    \n    # Extract the first character from the string and convert it back to an integer\n    first_digit = int(abs_number_str[0])\n    \n    return first_digit\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(first_digit(12345))  # Output: 1\n    print(first_digit(-9876))  # Output: 9\n    print(first_digit(0))      # Output: 0\n", "from typing import List\n## main.py\n\ndef first_Digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the given integer.\n    \"\"\"\n    # Convert the number to its absolute value to handle negative numbers\n    abs_number = abs(number)\n    \n    # Convert the absolute number to a string\n    number_str = str(abs_number)\n    \n    # Extract the first character and convert it back to an integer\n    first_digit = int(number_str[0])\n    \n    return first_digit\n\n# Example usage:\n# print(first_Digit(12345))  # Output: 1\n# print(first_Digit(-9876))  # Output: 9\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that extracts the first digit from a given number. The function should be simple, efficient, and capable of handling various numeric inputs.\nrequirement pool:\n- Implement the function to extract the first digit\n- Ensure the function handles edge cases like negative numbers\n- Optimize the function for large numbers\n- Include error handling for non-numeric inputs\n- Document the function usage and examples\nWe will use Python's built-in functions to create a simple and efficient function that extracts the first digit from a given number. The function will handle edge cases like negative numbers and non-numeric inputs by converting the number to a string and checking its validity.\n", "requirement analysis:\nThe requirement is to create a simple function that extracts the first digit of a given integer. The function should handle both positive and negative numbers and be efficient in its execution.\nrequirement pool:\n- Implement the first_Digit function to extract the first digit of an integer\n- Ensure the function handles negative numbers correctly\n- Provide documentation and examples for the function\n- Optimize the function for large numbers\n- Test the function across different Python versions\nWe will implement a simple function using basic string manipulation to extract the first digit of an integer. This approach ensures compatibility across different Python versions and handles both positive and negative integers efficiently.\n", "requirement analysis:\nThe function should efficiently extract the first digit from a given integer, ensuring it handles edge cases like negative numbers and zero. It should be simple to use and integrate into larger projects.\nrequirement pool:\n- Implement the function to extract the first digit\n- Handle edge cases such as negative numbers\n- Provide examples and documentation\n- Optimize for performance\n- Ensure compatibility with different Python versions\nWe will implement a simple function that converts the number to a string to easily access the first character, then convert it back to an integer. This approach will handle both positive and negative numbers by ignoring the sign. We will also provide examples and documentation to enhance understanding.\n", "requirement analysis:\nThe requirement is to create a simple function that extracts the first digit of a given number. The function should handle both positive and negative integers and return the first digit as an integer.\nrequirement pool:\n- The function must correctly identify the first digit of any integer.\n- The function should handle negative numbers appropriately.\n- The function should be optimized for performance.\n- The function should include error handling for non-integer inputs.\n- The function should be compatible with Python 3.x versions.\nWe will implement a simple function using Python's built-in capabilities to extract the first digit of an integer. The function will handle both positive and negative numbers by converting the number to a string, removing any negative sign, and returning the first character as an integer. This approach ensures compatibility with various Python versions and maintains efficiency without the need for external libraries.\n", "requirement analysis:\nThe requirement is to create a simple function that extracts the first digit of a given number. The function should handle both positive and negative integers and return the first non-zero digit. It should be efficient and easy to integrate into existing Python projects.\nrequirement pool:\n- The function must correctly identify the first digit of any integer\n- The function should handle negative numbers appropriately\n- The function should be optimized for performance\n- The function should include error handling for non-integer inputs\n- The function should be compatible with Python 3.x\nWe will implement a simple function using Python's built-in capabilities to extract the first digit of an integer. The function will handle both positive and negative numbers by converting the number to a string and extracting the first non-zero digit. We will ensure compatibility with Python 3.x and include error handling for non-integer inputs.\n", "requirement analysis:\nThe function should efficiently extract the first digit from any given integer, considering both positive and negative values. It should be simple to use and understand, with minimal computational overhead.\nrequirement pool:\n- Implement the function to extract the first digit\n- Ensure compatibility with negative numbers\n- Provide clear documentation and examples\n- Optimize for performance with large numbers\n- Include error handling for non-integer inputs\nWe will implement a simple function using Python's built-in capabilities to extract the first digit from any integer, including negative numbers. The function will convert the number to a string, handle negative signs, and return the first digit. This approach ensures ease of use and efficiency without the need for complex libraries.\n", "requirement analysis:\nThe requirement is to create a function that extracts the first digit from a given number. The function should handle both positive and negative numbers and return the first digit efficiently.\nrequirement pool:\n- Implement the function to extract the first digit from a number\n- Ensure the function handles negative numbers correctly\n- Optimize the function for large numbers\n- Provide clear documentation for user understanding\n- Include error handling for non-numeric inputs\nWe will implement a simple function using Python's built-in capabilities to extract the first digit from a number. The function will handle both positive and negative numbers by converting the number to a string and extracting the first character that is a digit. This approach ensures efficiency and simplicity without the need for complex libraries.\n", "requirement analysis:\nThe requirement is to create a simple function that extracts the first digit of a given number. The function should handle both positive and negative integers and return the first non-zero digit.\nrequirement pool:\n- Implement the first_Digit function to extract the first digit of a number.\n- Ensure the function handles negative numbers correctly.\n- Provide documentation and examples for the function.\n- Optimize the function for large numbers.\n- Test the function across different Python versions.\nWe will implement a simple function using Python's built-in capabilities to extract the first digit of a number. The function will handle both positive and negative integers by converting the number to a string, removing any negative sign, and returning the first character as an integer. This approach ensures compatibility across different Python versions without the need for external libraries.\n", "requirement analysis:\nThe function should accurately extract the first digit from any given integer, including handling negative numbers by considering the absolute value. It should be optimized for performance, especially when dealing with large numbers, and maintain readability for easy integration.\nrequirement pool:\n- Implement the main function to extract the first digit\n- Ensure compatibility with negative numbers\n- Optimize performance for large integers\n- Enhance code readability and maintainability\n- Provide comprehensive documentation\nWe will implement a simple function using Python's built-in capabilities to extract the first digit of a given integer. The function will handle both positive and negative numbers by considering the absolute value of the input. This approach ensures efficiency and readability without the need for complex libraries.\n", "requirement analysis:\nThe function should efficiently extract the first digit from any given integer, ensuring it handles both small and large numbers accurately. It should be easy to understand and integrate into larger projects.\nrequirement pool:\n- The function must accurately return the first digit of any integer.\n- The function should handle large integers efficiently.\n- Provide clear documentation for ease of understanding.\n- Optimize performance for repeated use in large datasets.\n- Ensure compatibility with other Python libraries.\nWe will use Python's built-in functions to efficiently extract the first digit of any integer. This approach ensures simplicity and compatibility with other Python libraries. The function will convert the number to a string to easily access the first character, which is then converted back to an integer. This method is efficient for both small and large numbers.\n"], "test": ["def check(first_Digit):\n\tassert first_Digit(123) == 1", "def check(first_Digit):\n\tassert first_Digit(456) == 4", "def check(first_Digit):\n\tassert first_Digit(12) == 1", "def check(first_Digit):\n\tassert first_Digit(125) == 1", "def check(first_Digit):\n\tassert first_Digit(128) == 1", "def check(first_Digit):\n\tassert first_Digit(122) == 1", "def check(first_Digit):\n\tassert first_Digit(121) == 1", "def check(first_Digit):\n\tassert first_Digit(120) == 1", "def check(first_Digit):\n\tassert first_Digit(123) == 1", "def check(first_Digit):\n\tassert first_Digit(119) == 1", "def check(first_Digit):\n\tassert first_Digit(120) == 1", "def check(first_Digit):\n\tassert first_Digit(124) == 1", "def check(first_Digit):\n\tassert first_Digit(126) == 1", "def check(first_Digit):\n\tassert first_Digit(124) == 1", "def check(first_Digit):\n\tassert first_Digit(123) == 1", "def check(first_Digit):\n\tassert first_Digit(120) == 1", "def check(first_Digit):\n\tassert first_Digit(119) == 1", "def check(first_Digit):\n\tassert first_Digit(118) == 1", "def check(first_Digit):\n\tassert first_Digit(123) == 1", "def check(first_Digit):\n\tassert first_Digit(123) == 1", "def check(first_Digit):\n\tassert first_Digit(128) == 1", "def check(first_Digit):\n\tassert first_Digit(124) == 1", "def check(first_Digit):\n\tassert first_Digit(124) == 1", "def check(first_Digit):\n\tassert first_Digit(126) == 1", "def check(first_Digit):\n\tassert first_Digit(118) == 1", "def check(first_Digit):\n\tassert first_Digit(122) == 1", "def check(first_Digit):\n\tassert first_Digit(118) == 1", "def check(first_Digit):\n\tassert first_Digit(119) == 1", "def check(first_Digit):\n\tassert first_Digit(128) == 1", "def check(first_Digit):\n\tassert first_Digit(124) == 1", "def check(first_Digit):\n\tassert first_Digit(128) == 1", "def check(first_Digit):\n\tassert first_Digit(120) == 1", "def check(first_Digit):\n\tassert first_Digit(127) == 1", "def check(first_Digit):\n\tassert first_Digit(128) == 1", "def check(first_Digit):\n\tassert first_Digit(128) == 1", "def check(first_Digit):\n\tassert first_Digit(125) == 1", "def check(first_Digit):\n\tassert first_Digit(453) == 4", "def check(first_Digit):\n\tassert first_Digit(461) == 4", "def check(first_Digit):\n\tassert first_Digit(457) == 4", "def check(first_Digit):\n\tassert first_Digit(456) == 4", "def check(first_Digit):\n\tassert first_Digit(453) == 4", "def check(first_Digit):\n\tassert first_Digit(453) == 4", "def check(first_Digit):\n\tassert first_Digit(460) == 4", "def check(first_Digit):\n\tassert first_Digit(454) == 4", "def check(first_Digit):\n\tassert first_Digit(455) == 4", "def check(first_Digit):\n\tassert first_Digit(460) == 4", "def check(first_Digit):\n\tassert first_Digit(451) == 4", "def check(first_Digit):\n\tassert first_Digit(453) == 4", "def check(first_Digit):\n\tassert first_Digit(457) == 4", "def check(first_Digit):\n\tassert first_Digit(460) == 4", "def check(first_Digit):\n\tassert first_Digit(451) == 4", "def check(first_Digit):\n\tassert first_Digit(461) == 4", "def check(first_Digit):\n\tassert first_Digit(455) == 4", "def check(first_Digit):\n\tassert first_Digit(453) == 4", "def check(first_Digit):\n\tassert first_Digit(461) == 4", "def check(first_Digit):\n\tassert first_Digit(459) == 4", "def check(first_Digit):\n\tassert first_Digit(454) == 4", "def check(first_Digit):\n\tassert first_Digit(453) == 4", "def check(first_Digit):\n\tassert first_Digit(460) == 4", "def check(first_Digit):\n\tassert first_Digit(454) == 4", "def check(first_Digit):\n\tassert first_Digit(454) == 4", "def check(first_Digit):\n\tassert first_Digit(461) == 4", "def check(first_Digit):\n\tassert first_Digit(456) == 4", "def check(first_Digit):\n\tassert first_Digit(459) == 4", "def check(first_Digit):\n\tassert first_Digit(459) == 4", "def check(first_Digit):\n\tassert first_Digit(461) == 4", "def check(first_Digit):\n\tassert first_Digit(458) == 4", "def check(first_Digit):\n\tassert first_Digit(455) == 4", "def check(first_Digit):\n\tassert first_Digit(459) == 4", "def check(first_Digit):\n\tassert first_Digit(7) == 7", "def check(first_Digit):\n\tassert first_Digit(17) == 1", "def check(first_Digit):\n\tassert first_Digit(16) == 1", "def check(first_Digit):\n\tassert first_Digit(13) == 1", "def check(first_Digit):\n\tassert first_Digit(9) == 9", "def check(first_Digit):\n\tassert first_Digit(10) == 1", "def check(first_Digit):\n\tassert first_Digit(15) == 1", "def check(first_Digit):\n\tassert first_Digit(8) == 8", "def check(first_Digit):\n\tassert first_Digit(7) == 7", "def check(first_Digit):\n\tassert first_Digit(12) == 1", "def check(first_Digit):\n\tassert first_Digit(13) == 1", "def check(first_Digit):\n\tassert first_Digit(9) == 9", "def check(first_Digit):\n\tassert first_Digit(12) == 1", "def check(first_Digit):\n\tassert first_Digit(9) == 9", "def check(first_Digit):\n\tassert first_Digit(12) == 1", "def check(first_Digit):\n\tassert first_Digit(15) == 1", "def check(first_Digit):\n\tassert first_Digit(8) == 8", "def check(first_Digit):\n\tassert first_Digit(8) == 8", "def check(first_Digit):\n\tassert first_Digit(15) == 1", "def check(first_Digit):\n\tassert first_Digit(16) == 1", "def check(first_Digit):\n\tassert first_Digit(10) == 1", "def check(first_Digit):\n\tassert first_Digit(17) == 1", "def check(first_Digit):\n\tassert first_Digit(12) == 1", "def check(first_Digit):\n\tassert first_Digit(16) == 1", "def check(first_Digit):\n\tassert first_Digit(15) == 1", "def check(first_Digit):\n\tassert first_Digit(16) == 1", "def check(first_Digit):\n\tassert first_Digit(17) == 1", "def check(first_Digit):\n\tassert first_Digit(14) == 1", "def check(first_Digit):\n\tassert first_Digit(14) == 1", "def check(first_Digit):\n\tassert first_Digit(17) == 1", "def check(first_Digit):\n\tassert first_Digit(8) == 8", "def check(first_Digit):\n\tassert first_Digit(17) == 1", "def check(first_Digit):\n\tassert first_Digit(12) == 1"], "scores": [0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0], "pass_results": [false, true, true, false, false, true, false, true, false, true], "pass_test_cases_num": [0, 102, 102, 0, 0, 102, 0, 102, 0, 102], "completion": "from typing import List\n## main.py\n\ndef first_Digit(number: int) -> int:\n    \"\"\"\n    Extracts the first digit of a given integer.\n\n    Parameters:\n    number (int): The integer from which to extract the first digit.\n\n    Returns:\n    int: The first digit of the given integer.\n    \"\"\"\n    # Convert the number to its absolute value to handle negative numbers\n    abs_number = abs(number)\n    \n    # Convert the absolute number to a string\n    number_str = str(abs_number)\n    \n    # Extract the first character and convert it back to an integer\n    first_digit = int(number_str[0])\n    \n    return first_digit\n\n# Example usage:\n# print(first_Digit(12345))  # Output: 1\n# print(first_Digit(-9876))  # Output: 9\n", "passed": true, "pass": true, "pass_num": 5, "round": 863, "mutate_method": "condense_two2one", "parent_index": 369}
