{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to convert degrees to radians. Make sure to handle edge cases such as very large or very small degree values.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Write a function radian_degree to convert degrees to radians. Make sure to handle edge cases such as very large or very small degree values.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes a degree value and converts it to radians using the formula:\n    radians = degrees * (pi/180). The math module is used to access the value of pi.\n\n    Args:\n        degrees (float): The degree value to be converted.\n\n    Returns:\n        float: The converted radian value.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a sample degree value\n    sample_degrees = 180.0\n    print(f\"{sample_degrees} degrees is {radian_degree(sample_degrees)} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the mathematical constant pi from the math library.\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    try:\n        # Validate input type\n        if not isinstance(degrees, (int, float)):\n            raise ValueError(\"Input must be a number representing degrees.\")\n        \n        # Perform conversion using math module\n        radians = degrees * (math.pi / 180)\n        return radians\n    \n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test with a valid input\n    print(radian_degree(180))  # Expected output: 3.141592653589793\n\n    # Test with an invalid input\n    print(radian_degree(\"invalid\"))  # Expected output: Error message and None\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the formula: radians = degrees * (pi/180).\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians.\n    It uses the math.radians function for conversion, which is precise\n    and efficient. The function also includes input validation to ensure\n    the degree value is within a valid range.\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n\n    Raises:\n        ValueError: If the input is not a valid float or is outside the\n                    acceptable range for conversion.\n    \"\"\"\n    # Define acceptable range for degrees\n    MIN_DEGREE = -360.0\n    MAX_DEGREE = 360.0\n\n    # Validate input\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n    \n    if degrees < MIN_DEGREE or degrees > MAX_DEGREE:\n        raise ValueError(f\"Degrees must be between {MIN_DEGREE} and {MAX_DEGREE}.\")\n\n    # Convert degrees to radians\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        degrees = 180.0\n        radians = radian_degree(degrees)\n        print(f\"{degrees} degrees is {radians} radians.\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Convert degrees to radians using the formula radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    sample_degrees = 180.0\n    print(f\"{sample_degrees} degrees is {radian_degree(sample_degrees)} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function converts a given angle in degrees to radians using the formula:\n    radians = degrees * (pi/180). It includes error handling for invalid inputs\n    and checks for very large or very small degree values to prevent overflow or\n    underflow errors.\n\n    Parameters:\n    degrees (float): The degree value to convert.\n\n    Returns:\n    float: The converted radian value.\n\n    Raises:\n    ValueError: If the input is not a valid number.\n    \"\"\"\n    # Validate input\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n\n    # Check for very large or very small values\n    if degrees > 1e10 or degrees < -1e10:\n        raise ValueError(\"Degree value is too large or too small.\")\n\n    # Convert degrees to radians\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    ValueError: If the input is not a valid number.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a valid number.\")\n    \n    # Check for very large or very small degree values\n    if degrees > 1e6 or degrees < -1e6:\n        raise ValueError(\"Degree value is too large or too small for accurate conversion.\")\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Convert degrees to radians using math.radians\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    sample_degrees = 180.0\n    print(f\"{sample_degrees} degrees is {radian_degree(sample_degrees)} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function converts an angle from degrees to radians using the formula:\n    radians = degrees * (pi/180).\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    # Define the conversion factor from degrees to radians\n    conversion_factor = math.pi / 180\n\n    # Calculate radians\n    radians = degrees * conversion_factor\n\n    return radians\n"], "plans": ["requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values to prevent overflow or underflow errors.\nrequirement pool:\n- Implement the degree to radian conversion using the correct mathematical formula.\n- Ensure the function handles edge cases for very large degree values.\n- Ensure the function handles edge cases for very small degree values.\n- Optimize the function for performance with large input values.\n- Provide documentation and examples for using the function.\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians using the formula radians = degrees * (pi/180). The math module is efficient and handles floating-point arithmetic well, which is crucial for handling very large or very small degree values. We will ensure the function is robust by testing it with edge cases and optimizing for performance with large input values.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring precision and avoiding overflow or underflow errors.\nrequirement pool:\n- Implement the conversion formula accurately\n- Handle edge cases for large and small degree values\n- Optimize performance for large inputs\n- Ensure compatibility with existing Python math functions\n- Provide user-friendly documentation\nWe will use Python's built-in math library to perform the conversion from degrees to radians, as it provides the constant pi with high precision. The function will be designed to handle edge cases by using Python's inherent ability to manage large and small floating-point numbers, ensuring precision without overflow or underflow errors.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring no overflow or underflow errors occur. The function should be optimized for performance, especially for large input values.\nrequirement pool:\n- Implement the degree to radian conversion using the correct mathematical formula.\n- Ensure the function handles edge cases like very large or very small degree values.\n- Optimize the function for performance with large inputs.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for using the function.\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module provides a reliable and efficient way to handle mathematical operations, including the conversion formula radians = degrees * (pi/180). The function will be designed to handle very large and very small degree values by leveraging Python's inherent ability to manage large floating-point numbers. We will also include basic error handling to manage invalid inputs.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It should handle edge cases such as very large or very small degree values by ensuring the calculation remains precise and does not result in overflow or underflow errors.\nrequirement pool:\n- Implement the degree to radian conversion using the standard formula.\n- Ensure the function handles very large degree values without performance degradation.\n- Optimize the function for very small degree values to maintain precision.\n- Test the function with a variety of input values to ensure accuracy.\n- Document the function usage and edge case handling.\nWe will implement the degree to radian conversion using the standard formula radians = degrees * (pi/180). To handle very large or very small degree values, we will use Python's built-in math library, which provides a high level of precision and can handle large floating-point numbers effectively. This approach ensures that the function remains simple, accurate, and efficient without the need for additional complex libraries.\n", "requirement analysis:\nThe function needs to accurately convert degrees to radians, considering edge cases such as very large or very small values. It should be optimized for performance to handle large inputs efficiently.\nrequirement pool:\n- Accurate conversion of degrees to radians\n- Handling of edge cases for large and small degree values\n- Optimization for performance with large inputs\n- User-friendly documentation\n- Integration with existing systems\nWe will use the math library in Python, which provides a reliable and efficient method for converting degrees to radians using the math.radians function. This library is well-suited for handling edge cases such as very large or very small degree values due to its precision and performance. Additionally, we will implement checks to ensure the input is within a valid range and handle any potential overflow or underflow issues.\n", "requirement analysis:\nThe function should accurately convert degrees to radians, considering edge cases such as very large or very small degree values. It should be efficient and handle extreme inputs without performance degradation.\nrequirement pool:\n- Implement the core conversion logic from degrees to radians.\n- Ensure the function handles edge cases like very large or very small degree values.\n- Optimize the function for performance with large inputs.\n- Include comprehensive test cases for validation.\n- Document the function usage and edge case handling.\nWe will implement a function named 'radian_degree' that converts degrees to radians using the mathematical formula radians = degrees * (pi / 180). We will use Python's built-in 'math' library to access the value of pi, ensuring high precision. The function will handle edge cases by using Python's inherent ability to manage large floating-point numbers, thus avoiding overflow errors. We will also include checks for very small degree values to ensure they are converted accurately.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring no overflow or underflow errors occur. The function should be optimized for performance, especially for large input values.\nrequirement pool:\n- Implement the degree to radian conversion using the standard formula.\n- Ensure the function handles edge cases for very large and very small degree values.\n- Optimize the function for performance with large inputs.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for using the function.\nWe will implement the degree to radian conversion using the standard formula radians = degrees * (pi/180). To handle edge cases, we will use Python's built-in math module which provides a constant for pi and ensures precision. The function will include checks for very large or very small degree values to prevent overflow or underflow errors. We will also include error handling for invalid inputs to ensure robustness.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring precision and performance.\nrequirement pool:\n- Implement the degree to radian conversion using the correct mathematical formula.\n- Ensure the function handles edge cases like very large or very small degree values.\n- Optimize the function for performance with large input values.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for users.\nWe will implement the degree to radian conversion using the standard mathematical formula radians = degrees * (pi/180). We will use Python's built-in math library to handle the conversion accurately and efficiently. The function will include checks for very large or very small degree values to ensure precision and performance. We will also handle invalid inputs gracefully by raising appropriate exceptions.\n", "requirement analysis:\nThe function needs to accurately convert degrees to radians, considering edge cases such as very large or very small degree values. It should be optimized for performance and handle extreme inputs without errors.\nrequirement pool:\n- Accurate conversion of degrees to radians\n- Handling of edge cases for large and small degree values\n- Optimization for performance with large inputs\n- User-friendly function interface\n- Documentation for usage and edge case handling\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. The math module provides a reliable and efficient way to handle mathematical operations, including conversion functions. To address edge cases, we will ensure the function can handle very large and very small degree values by using Python's inherent ability to manage large numbers and floating-point precision. Additionally, we will optimize the function for performance by minimizing unnecessary computations and ensuring the function is straightforward and efficient.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values to prevent overflow or underflow errors. Performance optimization is crucial for handling large inputs efficiently.\nrequirement pool:\n- Implement degree to radian conversion using the correct mathematical formula\n- Ensure the function handles edge cases for large and small degree values\n- Optimize the function for performance with large inputs\n- Test the function thoroughly for accuracy\n- Document the function usage and edge case handling\nWe will use the math library in Python, which provides a reliable and efficient way to convert degrees to radians using the formula radians = degrees * (pi/180). The math library is well-suited for handling large and small values due to its precision and performance. We will also implement checks to handle edge cases such as very large or very small degree values to prevent overflow or underflow errors.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function converts an angle from degrees to radians using the formula:\n    radians = degrees * (pi/180).\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    # Define the conversion factor from degrees to radians\n    conversion_factor = math.pi / 180\n\n    # Calculate radians\n    radians = degrees * conversion_factor\n\n    return radians\n", "passed": true, "pass": true, "pass_num": 10, "round": 818, "mutate_method": "add_1_sentence_at_end", "parent_index": 191}
