{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to convert degrees to radians, ensuring to handle edge cases such as very large or very small degree values.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Write a function radian_degree to convert degrees to radians, ensuring to handle edge cases such as very large or very small degree values.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degree: float) -> float:\n    \"\"\"Convert degree to radians.\n    \n    This function converts an angle from degrees to radians using the math.radians function.\n    It includes checks for very large and very small degree values to ensure robustness.\n    \n    Args:\n        degree (float): The angle in degrees.\n        \n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    # Define threshold values for very large and very small degree values\n    LARGE_DEGREE_THRESHOLD = 1e6\n    SMALL_DEGREE_THRESHOLD = 1e-6\n    \n    # Check for very large degree values\n    if abs(degree) > LARGE_DEGREE_THRESHOLD:\n        print(f\"Warning: The degree value {degree} is very large and may lead to precision issues.\")\n    \n    # Check for very small degree values\n    if abs(degree) < SMALL_DEGREE_THRESHOLD:\n        print(f\"Warning: The degree value {degree} is very small and may lead to precision issues.\")\n    \n    # Convert degree to radians\n    radians = math.radians(degree)\n    \n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the formula: radians = degrees * (pi / 180).\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample value\n    test_degrees = 180.0\n    print(f\"{test_degrees} degrees is {radian_degree(test_degrees)} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    # Convert degrees to radians using the formula: radians = degrees * (pi / 180)\n    radians = degrees * (math.pi / 180)\n    return radians\n\ndef main():\n    # Example usage of the radian_degree function\n    test_degrees = [0, 90, 180, 360, -45, 720, 1e6, -1e6]\n    for degree in test_degrees:\n        try:\n            radians = radian_degree(degree)\n            print(f\"{degree} degrees is {radians} radians.\")\n        except Exception as e:\n            print(f\"Error converting {degree} degrees: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a number.\")\n    \n    radians = math.radians(degrees)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians.\n    It handles very large or very small degree values using Python's\n    floating-point arithmetic capabilities.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    ValueError: If the input is not a numeric value.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a numeric value.\")\n    \n    # Convert degrees to radians\n    radians = math.radians(degrees)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degree: float) -> float:\n    \"\"\"Convert a degree value to radians.\n\n    This function takes a degree value as input and converts it to the\n    corresponding radian value using the math module.\n\n    Args:\n        degree (float): The degree value to be converted.\n\n    Returns:\n        float: The corresponding radian value.\n    \"\"\"\n    # Conversion factor from degrees to radians\n    conversion_factor = math.pi / 180.0\n    \n    # Convert the degree value to radians\n    radian_value = degree * conversion_factor\n    \n    return radian_value\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample degree value\n    sample_degree = 180.0\n    print(f\"{sample_degree} degrees is {radian_degree(sample_degree)} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the formula: radians = degrees * (pi/180).\n\n    Args:\n        degrees (float): The degree value to be converted.\n\n    Returns:\n        float: The converted value in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degree: float) -> float:\n    \"\"\"\n    Convert degree to radians.\n\n    Parameters:\n    degree (float): The degree value to be converted.\n\n    Returns:\n    float: The converted value in radians.\n    \"\"\"\n    try:\n        # Validate input\n        if not isinstance(degree, (int, float)):\n            raise ValueError(\"Input must be a numeric value.\")\n        \n        # Convert degree to radians using math library\n        radians = math.radians(degree)\n        return radians\n    \n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    degree_value = 180.0\n    radians_value = radian_degree(degree_value)\n    if radians_value is not None:\n        print(f\"{degree_value} degrees is {radians_value} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a numeric value representing degrees.\")\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    import math\n    return degrees * (math.pi / 180)\n"], "plans": ["requirement analysis:\nThe function should accurately convert degrees to radians, considering edge cases such as very large or very small degree values. The implementation should be efficient and handle floating-point precision issues.\nrequirement pool:\n- Implement the degree to radian conversion function.\n- Ensure the function handles very large degree values.\n- Ensure the function handles very small degree values.\n- Optimize the function for performance.\n- Provide documentation and examples for usage.\nWe will use the built-in math module in Python, which provides a reliable and efficient way to convert degrees to radians using the math.radians function. This approach ensures accurate conversion and handles floating-point precision issues effectively. We will also implement checks for very large and very small degree values to ensure robustness.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring precision and performance.\nrequirement pool:\n- Implement the degree to radian conversion formula\n- Ensure handling of edge cases for large and small degree values\n- Optimize performance for large inputs\n- Validate input to prevent errors\n- Provide documentation for usage\nWe will use the math library in Python, which provides a reliable and efficient way to handle mathematical operations, including conversion from degrees to radians. The math library is well-suited for handling edge cases with large and small degree values due to its precision and performance capabilities.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring no overflow or underflow errors occur. Performance optimization is crucial for handling large inputs efficiently.\nrequirement pool:\n- Accurate conversion of degrees to radians\n- Handling of edge cases for large and small degree values\n- Performance optimization for large inputs\n- User-friendly documentation\n- Integration with existing mathematical libraries\nWe will use Python's built-in math library to perform the conversion from degrees to radians. The math library provides a constant for pi, which ensures high precision. We will handle edge cases by ensuring the function can process very large and very small degree values without causing overflow or underflow errors. This will be achieved by leveraging Python's inherent ability to handle large floating-point numbers. The function will be optimized for performance by using simple arithmetic operations.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values to prevent overflow or underflow errors.\nrequirement pool:\n- Implement the conversion formula accurately\n- Handle edge cases for large and small degree values\n- Optimize performance for large input values\n- Ensure compatibility with existing mathematical libraries\n- Provide documentation for usage and edge case handling\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. The math module is reliable and provides the necessary mathematical constants and functions. To handle edge cases, we will ensure that the function can process very large and very small degree values by using Python's inherent ability to handle large floating-point numbers. We will also include checks to ensure that the input is a valid number.\n", "requirement analysis:\nThe function should accurately convert degrees to radians, considering edge cases such as very large or very small degree values. It should be efficient and handle potential floating-point precision issues.\nrequirement pool:\n- Implement the main conversion logic using Python's math module.\n- Ensure the function handles edge cases like very large or very small degree values.\n- Optimize the function for performance with large input values.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for users.\nWe will use Python's built-in math module to perform the conversion from degrees to radians. The math module provides a reliable and efficient way to handle mathematical operations, including conversion functions. To address edge cases, we will ensure the function can handle very large or very small degree values by using Python's floating-point arithmetic capabilities, which are designed to handle a wide range of values. Additionally, we will implement error handling to manage invalid inputs, such as non-numeric values.\n", "requirement analysis:\nThe function should accurately convert degrees to radians, considering edge cases such as very large or very small degree values. It should be optimized for performance and handle potential floating-point precision issues.\nrequirement pool:\n- Implement the main conversion logic from degrees to radians.\n- Ensure the function handles edge cases for very large degree values.\n- Ensure the function handles edge cases for very small degree values.\n- Optimize the function for performance with large inputs.\n- Provide documentation and examples for using the function.\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. The math module provides a reliable and efficient way to handle mathematical operations, including trigonometric functions. We will ensure that the function can handle very large and very small degree values by using Python's inherent support for large integers and floating-point precision. The function will be optimized for performance by avoiding unnecessary computations and using direct mathematical operations.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values, ensuring precision and performance. The function should be optimized for efficiency, especially for large inputs.\nrequirement pool:\n- Implement the degree to radian conversion using the correct mathematical formula.\n- Ensure the function handles edge cases for very large and very small degree values.\n- Optimize the function for performance with large inputs.\n- Test the function thoroughly to ensure accuracy and reliability.\n- Document the function usage and edge case handling.\nWe will implement the degree to radian conversion using the standard mathematical formula radians = degrees * (pi/180). To handle edge cases for very large or very small degree values, we will use Python's built-in math library, which provides high precision and can handle large floating-point numbers efficiently. This approach ensures accuracy and performance without the complexity of external libraries like NumPy or SciPy.\n", "requirement analysis:\nThe function needs to accurately convert degrees to radians while handling edge cases such as very large or very small values. It should be optimized for performance and accuracy.\nrequirement pool:\n- Accurate conversion of degrees to radians\n- Handling of edge cases for large and small degree values\n- Optimization for performance\n- User-friendly error messages for invalid inputs\n- Documentation for usage and edge case handling\nWe will use the math library in Python, which provides a reliable and efficient method for converting degrees to radians. This library is well-suited for handling both large and small degree values due to its precision and performance. We will ensure the function handles edge cases by checking for extreme values and providing accurate conversion. Additionally, we will include error handling for invalid inputs.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula radians = degrees * (pi/180). It must handle edge cases such as very large or very small degree values without causing overflow or precision errors.\nrequirement pool:\n- Implement the degree to radian conversion using the standard formula.\n- Ensure the function handles edge cases like very large or very small degree values.\n- Optimize the function for performance with large input values.\n- Include error handling for invalid inputs.\n- Provide documentation and examples for users.\nWe will implement the degree to radian conversion using the standard formula radians = degrees * (pi/180). To handle edge cases such as very large or very small degree values, we will use the math library in Python, which provides a reliable and efficient way to handle floating-point arithmetic. This will ensure that the function is both accurate and efficient. We will also include basic error handling to manage invalid inputs.\n", "requirement analysis:\nThe function should accurately convert degrees to radians, considering edge cases such as very large or very small degree values. The implementation should be efficient and user-friendly, with clear documentation to guide users.\nrequirement pool:\n- Implement the core conversion logic from degrees to radians.\n- Ensure the function handles edge cases effectively.\n- Provide clear documentation and examples for users.\n- Optimize the function for performance with large inputs.\n- Create a simple user interface for input and output.\nWe will implement a function named `radian_degree` that converts degrees to radians using the formula radians = degrees * (pi / 180). We will use Python's built-in `math` library to access the value of pi, ensuring high precision. The function will handle edge cases by leveraging Python's ability to handle large floating-point numbers, thus ensuring accuracy for very large or very small degree values. The function will be simple and intuitive, with clear documentation provided.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    import math\n    return degrees * (math.pi / 180)\n", "passed": true, "pass": true, "pass_num": 10, "round": 960, "mutate_method": "condense_two2one", "parent_index": 577}
