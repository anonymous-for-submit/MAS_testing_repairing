{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 566, "prompt": "Write a function to calculate the sum of the digits of a non-negative integer. Ensure your solution is efficient and handles large inputs gracefully.", "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16", "assert sum_digits(344) == 11", "assert sum_digits(350) == 8", "assert sum_digits(342) == 9", "assert sum_digits(342) == 9", "assert sum_digits(341) == 8", "assert sum_digits(347) == 14", "assert sum_digits(345) == 12", "assert sum_digits(343) == 10", "assert sum_digits(341) == 8", "assert sum_digits(345) == 12", "assert sum_digits(340) == 7", "assert sum_digits(345) == 12", "assert sum_digits(347) == 14", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(344) == 11", "assert sum_digits(340) == 7", "assert sum_digits(341) == 8", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(347) == 14", "assert sum_digits(349) == 16", "assert sum_digits(348) == 15", "assert sum_digits(347) == 14", "assert sum_digits(341) == 8", "assert sum_digits(343) == 10", "assert sum_digits(343) == 10", "assert sum_digits(346) == 13", "assert sum_digits(350) == 8", "assert sum_digits(340) == 7", "assert sum_digits(349) == 16", "assert sum_digits(15) == 6", "assert sum_digits(9) == 9", "assert sum_digits(10) == 1", "assert sum_digits(12) == 3", "assert sum_digits(11) == 2", "assert sum_digits(15) == 6", "assert sum_digits(10) == 1", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(10) == 1", "assert sum_digits(13) == 4", "assert sum_digits(7) == 7", "assert sum_digits(9) == 9", "assert sum_digits(16) == 7", "assert sum_digits(15) == 6", "assert sum_digits(16) == 7", "assert sum_digits(9) == 9", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(16) == 7", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(10) == 1", "assert sum_digits(9) == 9", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(12) == 3", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(8) == 8", "assert sum_digits(13) == 4", "assert sum_digits(100) == 1", "assert sum_digits(98) == 17", "assert sum_digits(94) == 13", "assert sum_digits(92) == 11", "assert sum_digits(101) == 2", "assert sum_digits(102) == 3", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(101) == 2", "assert sum_digits(92) == 11", "assert sum_digits(95) == 14", "assert sum_digits(102) == 3", "assert sum_digits(96) == 15", "assert sum_digits(93) == 12", "assert sum_digits(96) == 15", "assert sum_digits(98) == 17", "assert sum_digits(92) == 11", "assert sum_digits(102) == 3", "assert sum_digits(100) == 1", "assert sum_digits(95) == 14", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(102) == 3", "assert sum_digits(92) == 11", "assert sum_digits(98) == 17", "assert sum_digits(97) == 16", "assert sum_digits(95) == 14", "assert sum_digits(101) == 2", "assert sum_digits(97) == 16", "assert sum_digits(100) == 1", "assert sum_digits(92) == 11", "assert sum_digits(97) == 16", "assert sum_digits(93) == 12"], "entry_point": "sum_digits", "repair_prompt": ["Write a function sum_digits to calculate the sum of the digits of a non-negative integer. Ensure your solution is efficient and handles large inputs gracefully.\nsum_digits(345)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the calculated sum of digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Convert the integer to a string to iterate over each digit\n    for digit in str(n):\n        # Convert each character back to an integer and add to the sum\n        digit_sum += int(digit)\n    \n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 12345\n    print(f\"The sum of digits in {test_number} is {sum_digits(test_number)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Example:\n    >>> sum_digits(345)\n    12\n    \"\"\"\n    # Convert the integer to a string to iterate over each character\n    digit_str = str(n)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert each character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example\n    example_number = 345\n    print(f\"The sum of digits in {example_number} is {sum_digits(example_number)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in str_n:\n        # Convert the character to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the calculated sum of digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each character\n    digit_str = str(n)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert each character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage:\n# result = sum_digits(345)\n# print(result)  # Output: 12\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the computed sum of digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum variable\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the total sum of the digits\n    return digit_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output should be 15\n", "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the computed sum of digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 345\n    result = sum_digits(test_number)\n    print(f\"The sum of the digits of {test_number} is {result}.\")\n", "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n    \n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n    \n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the total sum of the digits\n    return digit_sum\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and maintain a simple interface for ease of use.\nrequirement pool:\n- Efficiently calculate the sum of digits for large integers.\n- Ensure the function is easy to use and understand.\n- Optimize the function for performance.\n- Maintain code readability and maintainability.\n- Provide documentation and examples for usage.\nWe will implement a simple function that converts the integer to a string, iterates over each character, converts it back to an integer, and sums them up. This approach is efficient and handles large numbers gracefully since Python's int type can manage arbitrarily large integers. We will ensure the function is easy to use and understand by keeping the implementation straightforward.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be easy to use and integrate into existing projects, with a focus on performance and memory optimization.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers\n- Ensure accurate results for all non-negative integers\n- Provide clear documentation for integration\n- Optimize for minimal memory usage\n- Include examples for common use cases\nWe will implement a simple iterative function to compute the sum of digits of a non-negative integer. This approach is efficient and easy to understand, making it suitable for handling large inputs without performance issues. We will use Python's built-in capabilities to iterate over the digits of the number.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and handle edge cases like zero without errors.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers\n- Handle edge cases such as zero gracefully\n- Provide clear documentation for the function\n- Optimize the function for performance\n- Ensure compatibility with different Python versions\nWe will implement a simple and efficient function to calculate the sum of digits of a non-negative integer. The function will convert the integer to a string to iterate over each character, convert each character back to an integer, and sum them up. This approach is efficient and handles large numbers gracefully since Python's integer type can handle arbitrarily large values. We will ensure the function handles edge cases like zero correctly.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should handle edge cases like zero and provide clear documentation for integration.\nrequirement pool:\n- Efficiently compute sum of digits for large integers\n- Handle edge cases like zero\n- Provide clear documentation\n- Optimize for performance\n- Ensure easy integration into existing projects\nWe will implement a simple and efficient function using Python's built-in capabilities to handle large integers gracefully. The function will convert the integer to a string to iterate over each digit and calculate the sum. This approach avoids the overhead of external libraries and ensures performance optimization for large numbers.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and memory usage, ensuring quick and accurate results.\nrequirement pool:\n- Efficient computation for large inputs\n- Accurate results for all non-negative integers\n- Clear and concise documentation\n- Easy integration into existing projects\n- Optimized for performance and memory usage\nWe will implement a simple and efficient function to calculate the sum of the digits of a non-negative integer. The function will convert the integer to a string to iterate over each character, convert each character back to an integer, and sum them up. This approach is efficient for handling large numbers as it avoids unnecessary computations and uses Python's inherent capabilities for handling large integers.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and simplicity.\nrequirement pool:\n- Efficiently calculate the sum of digits for large integers.\n- Ensure the function is easy to use and understand.\n- Maintain code readability and maintainability.\n- Provide documentation and examples for usage.\n- Consider edge cases such as zero and very large numbers.\nWe will implement a simple function using Python's built-in capabilities to efficiently calculate the sum of digits of a non-negative integer. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach is efficient and handles large numbers gracefully without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be easy to use and integrate into existing projects, with a focus on performance and accuracy.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers\n- Ensure the function is easy to integrate\n- Provide clear documentation\n- Optimize for performance\n- Handle edge cases gracefully\nWe will implement a simple function using Python's built-in capabilities to efficiently compute the sum of digits of a non-negative integer. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach is efficient and handles large inputs gracefully without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and easy to integrate into other systems.\nrequirement pool:\n- Implement the sum_digits function to handle large inputs efficiently.\n- Ensure the function is easy to use and integrate.\n- Maintain code readability and simplicity.\n- Consider adding optional logging for debugging purposes.\n- Provide documentation and examples for developers.\nWe will implement the sum_digits function using Python's built-in capabilities to handle large integers efficiently. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum these values. This approach is simple, efficient, and leverages Python's ability to handle arbitrarily large integers without performance degradation.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, ensuring it handles large numbers without performance degradation. The solution should be straightforward to implement and integrate into existing projects.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers\n- Provide clear documentation for integration\n- Optimize for performance and memory usage\n- Ensure compatibility with various Python versions\n- Include error handling for non-integer inputs\nWe will implement a simple function using Python's built-in capabilities to efficiently compute the sum of digits of a non-negative integer. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach is efficient and handles large integers gracefully without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and memory usage, ensuring quick and accurate results.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers\n- Ensure the function is easy to integrate and use\n- Optimize for performance and memory usage\n- Provide clear documentation for the function\n- Handle edge cases gracefully\nWe will implement a simple iterative function to compute the sum of digits of a non-negative integer. This approach is efficient for large inputs as it processes each digit individually without requiring additional data structures or recursion. Python's built-in capabilities will be leveraged to handle large integers gracefully.\n"], "test": ["def check(sum_digits):\n\tassert sum_digits(345)==12", "def check(sum_digits):\n\tassert sum_digits(12)==3", "def check(sum_digits):\n\tassert sum_digits(97)==16", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(348) == 15", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(346) == 13", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(11) == 2", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(8) == 8", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(94) == 13", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(93) == 12"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n    \n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n    \n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the total sum of the digits\n    return digit_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 670, "mutate_method": "rephrase_one", "parent_index": 407}
