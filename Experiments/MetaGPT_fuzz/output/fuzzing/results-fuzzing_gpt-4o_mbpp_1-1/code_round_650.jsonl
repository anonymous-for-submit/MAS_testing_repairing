{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 779, "prompt": "Create a function to tally the quantity of lists contained in another list. The function should return a dictionary, where each list is converted into a tuple, and the value of the tuple represents the count of how often it appears.", "code": "def unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "assert unique_sublists([[3, 5], [2, 2], [4, 3], [14, 20, 21], [3, 8], [12, 13]]) == {(3, 5): 1, (2, 2): 1, (4, 3): 1, (14, 20, 21): 1, (3, 8): 1, (12, 13): 1}", "assert unique_sublists([[2, 2], [6, 10], [6, 5], [18, 12, 22], [10, 8], [6, 12]]) == {(2, 2): 1, (6, 10): 1, (6, 5): 1, (18, 12, 22): 1, (10, 8): 1, (6, 12): 1}", "assert unique_sublists([[1, 8], [1, 8], [3, 3], [11, 11, 21], [1, 11], [10, 13]]) == {(1, 8): 2, (3, 3): 1, (11, 11, 21): 1, (1, 11): 1, (10, 13): 1}", "assert unique_sublists([[2, 8], [9, 2], [2, 7], [12, 10, 15], [8, 11], [7, 9]]) == {(2, 8): 1, (9, 2): 1, (2, 7): 1, (12, 10, 15): 1, (8, 11): 1, (7, 9): 1}", "assert unique_sublists([[5, 3], [8, 7], [6, 8], [15, 19, 17], [3, 7], [4, 9]]) == {(5, 3): 1, (8, 7): 1, (6, 8): 1, (15, 19, 17): 1, (3, 7): 1, (4, 9): 1}", "assert unique_sublists([[4, 1], [8, 11], [5, 5], [16, 10, 20], [3, 5], [4, 8]]) == {(4, 1): 1, (8, 11): 1, (5, 5): 1, (16, 10, 20): 1, (3, 5): 1, (4, 8): 1}", "assert unique_sublists([[4, 8], [8, 6], [3, 1], [16, 20, 21], [9, 11], [12, 16]]) == {(4, 8): 1, (8, 6): 1, (3, 1): 1, (16, 20, 21): 1, (9, 11): 1, (12, 16): 1}", "assert unique_sublists([[6, 7], [2, 3], [1, 5], [9, 20, 18], [5, 6], [8, 13]]) == {(6, 7): 1, (2, 3): 1, (1, 5): 1, (9, 20, 18): 1, (5, 6): 1, (8, 13): 1}", "assert unique_sublists([[1, 4], [5, 2], [3, 3], [9, 19, 16], [3, 2], [13, 6]]) == {(1, 4): 1, (5, 2): 1, (3, 3): 1, (9, 19, 16): 1, (3, 2): 1, (13, 6): 1}", "assert unique_sublists([[5, 2], [1, 2], [3, 5], [9, 20, 16], [5, 9], [6, 15]]) == {(5, 2): 1, (1, 2): 1, (3, 5): 1, (9, 20, 16): 1, (5, 9): 1, (6, 15): 1}", "assert unique_sublists([[5, 3], [2, 8], [5, 5], [14, 16, 20], [6, 9], [7, 6]]) == {(5, 3): 1, (2, 8): 1, (5, 5): 1, (14, 16, 20): 1, (6, 9): 1, (7, 6): 1}", "assert unique_sublists([[3, 3], [2, 12], [4, 7], [18, 19, 18], [4, 12], [13, 14]]) == {(3, 3): 1, (2, 12): 1, (4, 7): 1, (18, 19, 18): 1, (4, 12): 1, (13, 14): 1}", "assert unique_sublists([[4, 1], [4, 6], [5, 2], [17, 20, 17], [8, 12], [5, 6]]) == {(4, 1): 1, (4, 6): 1, (5, 2): 1, (17, 20, 17): 1, (8, 12): 1, (5, 6): 1}", "assert unique_sublists([[2, 4], [7, 7], [4, 8], [14, 14, 14], [2, 2], [4, 15]]) == {(2, 4): 1, (7, 7): 1, (4, 8): 1, (14, 14, 14): 1, (2, 2): 1, (4, 15): 1}", "assert unique_sublists([[2, 7], [9, 7], [1, 7], [14, 12, 19], [9, 9], [9, 12]]) == {(2, 7): 1, (9, 7): 1, (1, 7): 1, (14, 12, 19): 1, (9, 9): 1, (9, 12): 1}", "assert unique_sublists([[2, 4], [5, 12], [4, 6], [16, 20, 19], [9, 8], [11, 15]]) == {(2, 4): 1, (5, 12): 1, (4, 6): 1, (16, 20, 19): 1, (9, 8): 1, (11, 15): 1}", "assert unique_sublists([[6, 5], [5, 7], [2, 4], [18, 14, 16], [2, 7], [12, 10]]) == {(6, 5): 1, (5, 7): 1, (2, 4): 1, (18, 14, 16): 1, (2, 7): 1, (12, 10): 1}", "assert unique_sublists([[6, 5], [1, 6], [3, 5], [14, 12, 16], [10, 11], [6, 6]]) == {(6, 5): 1, (1, 6): 1, (3, 5): 1, (14, 12, 16): 1, (10, 11): 1, (6, 6): 1}", "assert unique_sublists([[3, 1], [9, 9], [1, 6], [8, 10, 17], [6, 2], [14, 11]]) == {(3, 1): 1, (9, 9): 1, (1, 6): 1, (8, 10, 17): 1, (6, 2): 1, (14, 11): 1}", "assert unique_sublists([[2, 2], [7, 6], [2, 5], [10, 14, 22], [5, 10], [14, 12]]) == {(2, 2): 1, (7, 6): 1, (2, 5): 1, (10, 14, 22): 1, (5, 10): 1, (14, 12): 1}", "assert unique_sublists([[3, 4], [10, 6], [5, 2], [12, 19, 22], [6, 7], [6, 8]]) == {(3, 4): 1, (10, 6): 1, (5, 2): 1, (12, 19, 22): 1, (6, 7): 1, (6, 8): 1}", "assert unique_sublists([[5, 8], [8, 4], [3, 4], [13, 17, 21], [5, 10], [8, 6]]) == {(5, 8): 1, (8, 4): 1, (3, 4): 1, (13, 17, 21): 1, (5, 10): 1, (8, 6): 1}", "assert unique_sublists([[5, 8], [9, 12], [2, 7], [17, 16, 14], [3, 7], [4, 7]]) == {(5, 8): 1, (9, 12): 1, (2, 7): 1, (17, 16, 14): 1, (3, 7): 1, (4, 7): 1}", "assert unique_sublists([[3, 1], [1, 8], [6, 8], [12, 16, 20], [1, 12], [8, 9]]) == {(3, 1): 1, (1, 8): 1, (6, 8): 1, (12, 16, 20): 1, (1, 12): 1, (8, 9): 1}", "assert unique_sublists([[5, 2], [1, 6], [5, 3], [18, 19, 21], [7, 4], [12, 8]]) == {(5, 2): 1, (1, 6): 1, (5, 3): 1, (18, 19, 21): 1, (7, 4): 1, (12, 8): 1}", "assert unique_sublists([[2, 8], [6, 2], [4, 4], [14, 17, 17], [6, 7], [5, 14]]) == {(2, 8): 1, (6, 2): 1, (4, 4): 1, (14, 17, 17): 1, (6, 7): 1, (5, 14): 1}", "assert unique_sublists([[3, 8], [2, 7], [4, 4], [10, 15, 12], [8, 7], [8, 13]]) == {(3, 8): 1, (2, 7): 1, (4, 4): 1, (10, 15, 12): 1, (8, 7): 1, (8, 13): 1}", "assert unique_sublists([[5, 7], [6, 7], [1, 4], [15, 16, 22], [10, 11], [4, 12]]) == {(5, 7): 1, (6, 7): 1, (1, 4): 1, (15, 16, 22): 1, (10, 11): 1, (4, 12): 1}", "assert unique_sublists([[6, 8], [4, 6], [1, 2], [18, 13, 20], [6, 4], [6, 15]]) == {(6, 8): 1, (4, 6): 1, (1, 2): 1, (18, 13, 20): 1, (6, 4): 1, (6, 15): 1}", "assert unique_sublists([[3, 1], [6, 11], [5, 5], [10, 11, 19], [6, 2], [14, 13]]) == {(3, 1): 1, (6, 11): 1, (5, 5): 1, (10, 11, 19): 1, (6, 2): 1, (14, 13): 1}", "assert unique_sublists([[3, 4], [1, 11], [4, 1], [15, 13, 19], [3, 3], [6, 9]]) == {(3, 4): 1, (1, 11): 1, (4, 1): 1, (15, 13, 19): 1, (3, 3): 1, (6, 9): 1}", "assert unique_sublists([[1, 4], [3, 12], [1, 6], [11, 15, 12], [8, 7], [9, 6]]) == {(1, 4): 1, (3, 12): 1, (1, 6): 1, (11, 15, 12): 1, (8, 7): 1, (9, 6): 1}", "assert unique_sublists([[6, 2], [4, 12], [6, 8], [10, 10, 15], [6, 2], [10, 14]]) == {(6, 2): 2, (4, 12): 1, (6, 8): 1, (10, 10, 15): 1, (10, 14): 1}", "assert unique_sublists([['whkqetdu', 'lmqlnaxvefj'], ['lyid'], ['uyvdx', 'bzgmgoxz'], ['tugj']]) == {('whkqetdu', 'lmqlnaxvefj'): 1, ('lyid',): 1, ('uyvdx', 'bzgmgoxz'): 1, ('tugj',): 1}", "assert unique_sublists([['yvqf', 'avcduc'], ['vuxu'], ['fism', 'umfjlkg'], ['zvfyq']]) == {('yvqf', 'avcduc'): 1, ('vuxu',): 1, ('fism', 'umfjlkg'): 1, ('zvfyq',): 1}", "assert unique_sublists([['lixrcqawo', 'qtgpmhnsnytb'], ['wmzztqn'], ['qxmbs', 'ijiuynujn'], ['jevd']]) == {('lixrcqawo', 'qtgpmhnsnytb'): 1, ('wmzztqn',): 1, ('qxmbs', 'ijiuynujn'): 1, ('jevd',): 1}", "assert unique_sublists([['pla', 'wzgkdiz'], ['iwhtwkpfa'], ['xop', 'nlvttyn'], ['knfxsbish']]) == {('pla', 'wzgkdiz'): 1, ('iwhtwkpfa',): 1, ('xop', 'nlvttyn'): 1, ('knfxsbish',): 1}", "assert unique_sublists([['nrcixtzkm', 'jzvbcr'], ['stxxk'], ['ijo', 'vnxdexuespy'], ['wybwq']]) == {('nrcixtzkm', 'jzvbcr'): 1, ('stxxk',): 1, ('ijo', 'vnxdexuespy'): 1, ('wybwq',): 1}", "assert unique_sublists([['klg', 'wixnpu'], ['lpm'], ['ebhcqlrde', 'nhjo'], ['npmyi']]) == {('klg', 'wixnpu'): 1, ('lpm',): 1, ('ebhcqlrde', 'nhjo'): 1, ('npmyi',): 1}", "assert unique_sublists([['jbf', 'psemfbv'], ['ppzxh'], ['gimnnuyov', 'rmyijyvmnidb'], ['borlmpwbv']]) == {('jbf', 'psemfbv'): 1, ('ppzxh',): 1, ('gimnnuyov', 'rmyijyvmnidb'): 1, ('borlmpwbv',): 1}", "assert unique_sublists([['hkwp', 'fonatzvdhepa'], ['aewv'], ['csmyghws', 'xvqoenivi'], ['vyoioej']]) == {('hkwp', 'fonatzvdhepa'): 1, ('aewv',): 1, ('csmyghws', 'xvqoenivi'): 1, ('vyoioej',): 1}", "assert unique_sublists([['nic', 'flu'], ['sgm'], ['jjnxkwpe', 'csuqn'], ['nakkrdoo']]) == {('nic', 'flu'): 1, ('sgm',): 1, ('jjnxkwpe', 'csuqn'): 1, ('nakkrdoo',): 1}", "assert unique_sublists([['eve', 'sdbv'], ['jjkz'], ['hby', 'gwhloxgls'], ['eovp']]) == {('eve', 'sdbv'): 1, ('jjkz',): 1, ('hby', 'gwhloxgls'): 1, ('eovp',): 1}", "assert unique_sublists([['phnnzvgbw', 'xix'], ['axqqpd'], ['boix', 'jfpo'], ['dilm']]) == {('phnnzvgbw', 'xix'): 1, ('axqqpd',): 1, ('boix', 'jfpo'): 1, ('dilm',): 1}", "assert unique_sublists([['afbt', 'ciaqijtxinnv'], ['ozwdake'], ['wuctv', 'wfzlvc'], ['wkiqssgk']]) == {('afbt', 'ciaqijtxinnv'): 1, ('ozwdake',): 1, ('wuctv', 'wfzlvc'): 1, ('wkiqssgk',): 1}", "assert unique_sublists([['fvgfnfqm', 'xunpvficzzc'], ['ghhr'], ['yuk', 'ruydpovwjxce'], ['kcyu']]) == {('fvgfnfqm', 'xunpvficzzc'): 1, ('ghhr',): 1, ('yuk', 'ruydpovwjxce'): 1, ('kcyu',): 1}", "assert unique_sublists([['mlujyy', 'bbxhnzodcu'], ['zhhzxezbx'], ['soh', 'swadtocbq'], ['qlf']]) == {('mlujyy', 'bbxhnzodcu'): 1, ('zhhzxezbx',): 1, ('soh', 'swadtocbq'): 1, ('qlf',): 1}", "assert unique_sublists([['chyrmxd', 'qstmd'], ['detm'], ['fgfg', 'pteduzagqj'], ['xnlmtyts']]) == {('chyrmxd', 'qstmd'): 1, ('detm',): 1, ('fgfg', 'pteduzagqj'): 1, ('xnlmtyts',): 1}", "assert unique_sublists([['qcfnaykhq', 'ifumq'], ['trp'], ['iwo', 'moylylks'], ['amlxkbl']]) == {('qcfnaykhq', 'ifumq'): 1, ('trp',): 1, ('iwo', 'moylylks'): 1, ('amlxkbl',): 1}", "assert unique_sublists([['zkahjws', 'iaimoelvw'], ['qkqtkb'], ['vmrpexoxw', 'rnyh'], ['mjgfq']]) == {('zkahjws', 'iaimoelvw'): 1, ('qkqtkb',): 1, ('vmrpexoxw', 'rnyh'): 1, ('mjgfq',): 1}", "assert unique_sublists([['jetzk', 'ykpfpgv'], ['yxqouoavn'], ['jtdm', 'ysqmumacdycn'], ['wzp']]) == {('jetzk', 'ykpfpgv'): 1, ('yxqouoavn',): 1, ('jtdm', 'ysqmumacdycn'): 1, ('wzp',): 1}", "assert unique_sublists([['wdgenplks', 'lqdn'], ['tsmlrfelx'], ['nvsp', 'qkpuueoen'], ['vhslmdqv']]) == {('wdgenplks', 'lqdn'): 1, ('tsmlrfelx',): 1, ('nvsp', 'qkpuueoen'): 1, ('vhslmdqv',): 1}", "assert unique_sublists([['najytso', 'siwtuoglb'], ['lhvpapcpv'], ['xpnuqbso', 'mlgzdci'], ['ufik']]) == {('najytso', 'siwtuoglb'): 1, ('lhvpapcpv',): 1, ('xpnuqbso', 'mlgzdci'): 1, ('ufik',): 1}", "assert unique_sublists([['gwreye', 'amifhlyszwez'], ['cyoqp'], ['rmrljg', 'ilihr'], ['wwfxtuzq']]) == {('gwreye', 'amifhlyszwez'): 1, ('cyoqp',): 1, ('rmrljg', 'ilihr'): 1, ('wwfxtuzq',): 1}", "assert unique_sublists([['scyklu', 'cbishqzxh'], ['wmszg'], ['qnlfgie', 'hjcisf'], ['nikyz']]) == {('scyklu', 'cbishqzxh'): 1, ('wmszg',): 1, ('qnlfgie', 'hjcisf'): 1, ('nikyz',): 1}", "assert unique_sublists([['ryxbjl', 'nduwwedor'], ['jqc'], ['dsozewns', 'vcip'], ['hpckjb']]) == {('ryxbjl', 'nduwwedor'): 1, ('jqc',): 1, ('dsozewns', 'vcip'): 1, ('hpckjb',): 1}", "assert unique_sublists([['uvcl', 'msvjz'], ['vlevihg'], ['zgzkvtl', 'qmi'], ['mix']]) == {('uvcl', 'msvjz'): 1, ('vlevihg',): 1, ('zgzkvtl', 'qmi'): 1, ('mix',): 1}", "assert unique_sublists([['pqetunau', 'vkmfevcaaie'], ['mnqopqbn'], ['oprvjh', 'lkiwrni'], ['zsyad']]) == {('pqetunau', 'vkmfevcaaie'): 1, ('mnqopqbn',): 1, ('oprvjh', 'lkiwrni'): 1, ('zsyad',): 1}", "assert unique_sublists([['khlwvu', 'iwkyz'], ['fhsejcjgt'], ['uzsystip', 'ozgn'], ['zjnhhyn']]) == {('khlwvu', 'iwkyz'): 1, ('fhsejcjgt',): 1, ('uzsystip', 'ozgn'): 1, ('zjnhhyn',): 1}", "assert unique_sublists([['rbeiumbv', 'wzuehkttjg'], ['hhhjvac'], ['xyy', 'hnrramgt'], ['wljwvjkc']]) == {('rbeiumbv', 'wzuehkttjg'): 1, ('hhhjvac',): 1, ('xyy', 'hnrramgt'): 1, ('wljwvjkc',): 1}", "assert unique_sublists([['ibaascy', 'slsplgipehic'], ['ubfuvrcp'], ['lltvvhns', 'iaojo'], ['sfr']]) == {('ibaascy', 'slsplgipehic'): 1, ('ubfuvrcp',): 1, ('lltvvhns', 'iaojo'): 1, ('sfr',): 1}", "assert unique_sublists([['vciagot', 'yileycb'], ['npsouv'], ['cash', 'kwitbhgitknm'], ['ohcd']]) == {('vciagot', 'yileycb'): 1, ('npsouv',): 1, ('cash', 'kwitbhgitknm'): 1, ('ohcd',): 1}", "assert unique_sublists([['aaevqctls', 'rxrnfbiyvob'], ['zqxpj'], ['idvenw', 'vxkyyxuurbr'], ['jcubc']]) == {('aaevqctls', 'rxrnfbiyvob'): 1, ('zqxpj',): 1, ('idvenw', 'vxkyyxuurbr'): 1, ('jcubc',): 1}", "assert unique_sublists([['mcvbzd', 'cfrouazdrg'], ['pblaxnwlw'], ['hqvmp', 'gbxolpgmatg'], ['rwtuns']]) == {('mcvbzd', 'cfrouazdrg'): 1, ('pblaxnwlw',): 1, ('hqvmp', 'gbxolpgmatg'): 1, ('rwtuns',): 1}", "assert unique_sublists([['lzujhyjl', 'mgglqw'], ['yplnzky'], ['cftqdm', 'ttrjjoxglhh'], ['fhyg']]) == {('lzujhyjl', 'mgglqw'): 1, ('yplnzky',): 1, ('cftqdm', 'ttrjjoxglhh'): 1, ('fhyg',): 1}", "assert unique_sublists([['hymbqwozb', 'oimn'], ['xjtwml'], ['qqmrnujhc', 'oizcztnhpgzt'], ['smzlzrwp']]) == {('hymbqwozb', 'oimn'): 1, ('xjtwml',): 1, ('qqmrnujhc', 'oizcztnhpgzt'): 1, ('smzlzrwp',): 1}", "assert unique_sublists([[4, 7], [8, 2], [3, 9], [5, 2]]) == {(4, 7): 1, (8, 2): 1, (3, 9): 1, (5, 2): 1}", "assert unique_sublists([[6, 7], [6, 3], [2, 5], [10, 10]]) == {(6, 7): 1, (6, 3): 1, (2, 5): 1, (10, 10): 1}", "assert unique_sublists([[1, 5], [7, 7], [7, 9], [10, 12]]) == {(1, 5): 1, (7, 7): 1, (7, 9): 1, (10, 12): 1}", "assert unique_sublists([[6, 4], [2, 1], [4, 9], [1, 7]]) == {(6, 4): 1, (2, 1): 1, (4, 9): 1, (1, 7): 1}", "assert unique_sublists([[3, 3], [6, 1], [1, 4], [7, 10]]) == {(3, 3): 1, (6, 1): 1, (1, 4): 1, (7, 10): 1}", "assert unique_sublists([[6, 7], [5, 6], [6, 9], [1, 10]]) == {(6, 7): 1, (5, 6): 1, (6, 9): 1, (1, 10): 1}", "assert unique_sublists([[4, 2], [7, 5], [6, 2], [10, 9]]) == {(4, 2): 1, (7, 5): 1, (6, 2): 1, (10, 9): 1}", "assert unique_sublists([[1, 5], [4, 1], [3, 4], [7, 4]]) == {(1, 5): 1, (4, 1): 1, (3, 4): 1, (7, 4): 1}", "assert unique_sublists([[4, 5], [6, 7], [4, 10], [10, 8]]) == {(4, 5): 1, (6, 7): 1, (4, 10): 1, (10, 8): 1}", "assert unique_sublists([[3, 1], [7, 4], [9, 1], [9, 12]]) == {(3, 1): 1, (7, 4): 1, (9, 1): 1, (9, 12): 1}", "assert unique_sublists([[6, 1], [2, 1], [1, 8], [11, 3]]) == {(6, 1): 1, (2, 1): 1, (1, 8): 1, (11, 3): 1}", "assert unique_sublists([[6, 5], [3, 9], [7, 6], [5, 9]]) == {(6, 5): 1, (3, 9): 1, (7, 6): 1, (5, 9): 1}", "assert unique_sublists([[1, 3], [2, 3], [8, 4], [1, 9]]) == {(1, 3): 1, (2, 3): 1, (8, 4): 1, (1, 9): 1}", "assert unique_sublists([[4, 4], [3, 4], [8, 1], [7, 12]]) == {(4, 4): 1, (3, 4): 1, (8, 1): 1, (7, 12): 1}", "assert unique_sublists([[2, 2], [7, 3], [9, 8], [1, 2]]) == {(2, 2): 1, (7, 3): 1, (9, 8): 1, (1, 2): 1}", "assert unique_sublists([[6, 3], [7, 3], [3, 9], [7, 6]]) == {(6, 3): 1, (7, 3): 1, (3, 9): 1, (7, 6): 1}", "assert unique_sublists([[1, 2], [4, 8], [5, 4], [2, 8]]) == {(1, 2): 1, (4, 8): 1, (5, 4): 1, (2, 8): 1}", "assert unique_sublists([[5, 7], [6, 9], [4, 1], [10, 7]]) == {(5, 7): 1, (6, 9): 1, (4, 1): 1, (10, 7): 1}", "assert unique_sublists([[6, 1], [1, 5], [8, 5], [4, 7]]) == {(6, 1): 1, (1, 5): 1, (8, 5): 1, (4, 7): 1}", "assert unique_sublists([[5, 1], [3, 8], [9, 8], [2, 12]]) == {(5, 1): 1, (3, 8): 1, (9, 8): 1, (2, 12): 1}", "assert unique_sublists([[4, 1], [2, 5], [3, 6], [3, 9]]) == {(4, 1): 1, (2, 5): 1, (3, 6): 1, (3, 9): 1}", "assert unique_sublists([[1, 2], [3, 5], [7, 6], [8, 8]]) == {(1, 2): 1, (3, 5): 1, (7, 6): 1, (8, 8): 1}", "assert unique_sublists([[2, 4], [4, 9], [1, 8], [1, 10]]) == {(2, 4): 1, (4, 9): 1, (1, 8): 1, (1, 10): 1}", "assert unique_sublists([[6, 7], [8, 5], [3, 2], [9, 5]]) == {(6, 7): 1, (8, 5): 1, (3, 2): 1, (9, 5): 1}", "assert unique_sublists([[2, 3], [4, 8], [1, 9], [1, 4]]) == {(2, 3): 1, (4, 8): 1, (1, 9): 1, (1, 4): 1}", "assert unique_sublists([[4, 6], [5, 1], [1, 1], [2, 9]]) == {(4, 6): 1, (5, 1): 1, (1, 1): 1, (2, 9): 1}", "assert unique_sublists([[5, 1], [6, 2], [7, 8], [9, 10]]) == {(5, 1): 1, (6, 2): 1, (7, 8): 1, (9, 10): 1}", "assert unique_sublists([[2, 4], [1, 2], [3, 1], [3, 3]]) == {(2, 4): 1, (1, 2): 1, (3, 1): 1, (3, 3): 1}", "assert unique_sublists([[1, 6], [8, 8], [7, 10], [7, 2]]) == {(1, 6): 1, (8, 8): 1, (7, 10): 1, (7, 2): 1}", "assert unique_sublists([[4, 2], [2, 7], [8, 4], [11, 4]]) == {(4, 2): 1, (2, 7): 1, (8, 4): 1, (11, 4): 1}", "assert unique_sublists([[3, 2], [8, 4], [3, 7], [3, 2]]) == {(3, 2): 2, (8, 4): 1, (3, 7): 1}", "assert unique_sublists([[6, 7], [3, 6], [6, 4], [9, 2]]) == {(6, 7): 1, (3, 6): 1, (6, 4): 1, (9, 2): 1}", "assert unique_sublists([[5, 7], [7, 1], [7, 10], [8, 11]]) == {(5, 7): 1, (7, 1): 1, (7, 10): 1, (8, 11): 1}"], "entry_point": "unique_sublists", "repair_prompt": ["Create a function unique_sublists to tally the quantity of lists contained in another list. The function should return a dictionary, where each list is converted into a tuple, and the value of the tuple represents the count of how often it appears.\nunique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n"], "completions": ["from typing import List\n## main.py\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef unique_sublists(sublists: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    \"\"\"\n    Convert sublists to tuples and count occurrences.\n\n    Parameters:\n    sublists (List[List[int]]): A list containing sublists of integers.\n\n    Returns:\n    Dict[Tuple[int, ...], int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Convert each sublist to a tuple\n    tuple_sublists = [tuple(sublist) for sublist in sublists if isinstance(sublist, list)]\n    \n    # Use Counter to count occurrences of each tuple\n    sublist_counter = Counter(tuple_sublists)\n    \n    return dict(sublist_counter)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_sublists = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8], [4, 5, 6], [1, 2, 3]]\n    result = unique_sublists(example_sublists)\n    print(result)  # Output: {(1, 2, 3): 3, (4, 5, 6): 2, (7, 8): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef unique_sublists(sublists: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    \"\"\"\n    Convert sublists to tuples and count their occurrences.\n\n    Parameters:\n    sublists (List[List[int]]): A list of sublists to be counted.\n\n    Returns:\n    Dict[Tuple[int, ...], int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Convert each sublist to a tuple\n    tuple_sublists = [tuple(sublist) for sublist in sublists]\n    \n    # Count occurrences using collections.Counter\n    sublist_counter = Counter(tuple_sublists)\n    \n    return dict(sublist_counter)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_sublists = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4], [3, 4]]\n    result = unique_sublists(example_sublists)\n    print(result)  # Output: {(1, 2): 2, (3, 4): 3, (5, 6): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n\ndef unique_sublists(lst: List) -> Dict[Tuple, int]:\n    \"\"\"\n    Convert sublists to tuples and count their occurrences.\n\n    Parameters:\n    lst (list): A list containing sublists.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty list to store tuples\n    tuple_list = []\n\n    # Iterate over each element in the input list\n    for element in lst:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the tuple_list\n            tuple_list.append(tuple(element))\n        else:\n            # Ignore non-list elements\n            continue\n\n    # Use collections.Counter to count occurrences of each tuple\n    tuple_count = Counter(tuple_list)\n\n    # Return the dictionary with tuples as keys and their counts as values\n    return dict(tuple_count)\n", "from typing import List\n## main.py\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n\ndef unique_sublists(main_list: List[List]) -> Dict[Tuple, int]:\n    \"\"\"\n    Convert sublists to tuples and count occurrences.\n\n    Parameters:\n    main_list (List[List]): A list containing sublists.\n\n    Returns:\n    Dict[Tuple, int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty list to store tuples\n    tuple_list = []\n\n    # Iterate over each element in the main list\n    for sublist in main_list:\n        # Check if the element is a list\n        if isinstance(sublist, list):\n            # Convert the sublist to a tuple and add to the tuple list\n            tuple_list.append(tuple(sublist))\n        else:\n            # If the element is not a list, raise a TypeError\n            raise TypeError(\"All elements of main_list must be lists.\")\n\n    # Use collections.Counter to count occurrences of each tuple\n    tuple_count = Counter(tuple_list)\n\n    # Return the dictionary with tuples as keys and their counts as values\n    return dict(tuple_count)\n", "from typing import List\n## main.py\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef unique_sublists(sublists: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    \"\"\"\n    Convert each sublist to a tuple and count occurrences.\n\n    Parameters:\n    sublists (List[List[int]]): A list containing sublists of integers.\n\n    Returns:\n    Dict[Tuple[int, ...], int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Convert each sublist to a tuple to ensure hashability\n    tuple_sublists = [tuple(sublist) for sublist in sublists if isinstance(sublist, list)]\n    \n    # Use Counter to count occurrences of each tuple\n    sublist_counter = Counter(tuple_sublists)\n    \n    return dict(sublist_counter)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_sublists = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9]]\n    result = unique_sublists(example_sublists)\n    print(result)  # Output: {(1, 2, 3): 2, (4, 5, 6): 1, (7, 8, 9): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef unique_sublists(sublists: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    \"\"\"\n    Convert sublists to tuples and count their occurrences.\n\n    Parameters:\n    sublists (List[List[int]]): A list of sublists to be processed.\n\n    Returns:\n    Dict[Tuple[int, ...], int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Convert each sublist to a tuple\n    tuple_sublists = [tuple(sublist) for sublist in sublists]\n    \n    # Use Counter to count occurrences of each tuple\n    occurrences = Counter(tuple_sublists)\n    \n    return dict(occurrences)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_sublists = [[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]\n    result = unique_sublists(example_sublists)\n    print(result)  # Output: {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n\ndef unique_sublists(main_list: List[List]) -> Dict[Tuple, int]:\n    \"\"\"Counts the occurrences of each sublist in the main list.\n    \n    Converts each sublist to a tuple and returns a dictionary with tuples as keys and their counts as values.\n    \n    Parameters:\n    main_list (List[List]): A list containing sublists to be counted.\n    \n    Returns:\n    Dict[Tuple, int]: A dictionary with tuples as keys and their occurrence counts as values.\n    \"\"\"\n    # Convert each sublist to a tuple to ensure immutability and hashability\n    tuple_list = [tuple(sublist) for sublist in main_list]\n    \n    # Use Counter to count occurrences of each tuple\n    sublist_counter = Counter(tuple_list)\n    \n    # Return the dictionary with tuples as keys and their counts as values\n    return dict(sublist_counter)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4], [3, 4]]\n    result = unique_sublists(example_list)\n    print(result)  # Output: {(1, 2): 2, (3, 4): 3, (5, 6): 1}\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Tuple, Dict\n\ndef unique_sublists(sublists: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    \"\"\"\n    Count the occurrences of each sublist in the main list.\n\n    Parameters:\n    sublists (list of lists): A list containing sublists of integers.\n\n    Returns:\n    dict: A dictionary with tuples as keys representing unique sublists and integers as values representing their counts.\n    \"\"\"\n    # Convert each sublist to a tuple to use as a dictionary key\n    tuple_sublists = [tuple(sublist) for sublist in sublists if isinstance(sublist, list)]\n    \n    # Use collections.Counter to count occurrences of each tuple\n    sublist_counts = Counter(tuple_sublists)\n    \n    return dict(sublist_counts)\n\n# Example usage\nif __name__ == \"__main__\":\n    example_sublists = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9]]\n    result = unique_sublists(example_sublists)\n    print(result)  # Output: {(1, 2, 3): 2, (4, 5, 6): 1, (7, 8, 9): 1}\n", "from typing import List\n## main.py\nfrom collections import Counter\n\ndef unique_sublists(sublists: list[list[int]]) -> dict[tuple[int, ...], int]:\n    \"\"\"\n    Convert each sublist into a tuple and count occurrences.\n\n    Parameters:\n    sublists (list of list of int): A list containing sublists to be counted.\n\n    Returns:\n    dict: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Convert each sublist to a tuple to make it hashable\n    tuple_sublists = [tuple(sublist) for sublist in sublists]\n    \n    # Use Counter to count occurrences of each tuple\n    sublist_counter = Counter(tuple_sublists)\n    \n    return dict(sublist_counter)\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n\ndef unique_sublists(main_list: List) -> Dict[Tuple, int]:\n    \"\"\"\n    Convert each sublist in the main list to a tuple and count occurrences.\n\n    Parameters:\n    main_list (List): A list containing sublists to be counted.\n\n    Returns:\n    Dict[Tuple, int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty list to store valid sublists converted to tuples\n    tuple_list = []\n\n    # Iterate over each element in the main list\n    for element in main_list:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the tuple_list\n            tuple_list.append(tuple(element))\n        else:\n            # Log or handle non-list elements if necessary\n            # For now, we are ignoring non-list elements\n            pass\n\n    # Use Counter to count occurrences of each tuple\n    count_dict = Counter(tuple_list)\n\n    # Return the dictionary of counts\n    return dict(count_dict)\n"], "plans": ["requirement analysis:\nThe function should efficiently convert lists to tuples and count their occurrences. It must handle large datasets without performance degradation and provide output in a dictionary format for easy interpretation.\nrequirement pool:\n- Implement the unique_sublists function to convert lists to tuples and count occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output is a dictionary with tuples as keys and counts as values.\n- Include error handling for non-list inputs.\n- Provide documentation and examples for users.\nWe will use Python's collections module, specifically the Counter class, to efficiently count occurrences of sublists. This approach is optimal for handling large datasets due to its performance characteristics. The function will convert each sublist into a tuple, which is hashable and can be used as a key in a dictionary.\n", "requirement analysis:\nThe function needs to convert sublists into tuples to use them as dictionary keys, ensuring accurate counting of occurrences. It should handle varying list sizes efficiently and provide a clear dictionary output.\nrequirement pool:\n- Accurate counting of sublists\n- Efficient handling of large datasets\n- Clear and concise output format\n- Support for nested lists\n- User-friendly documentation\nWe will use Python's collections.Counter to efficiently count occurrences of sublists after converting them to tuples. This approach is both simple and efficient, aligning with the competitive analysis quadrant chart. Counter is ideal for this task as it provides a straightforward way to tally hashable elements, which tuples are.\n", "requirement analysis:\nThe function should efficiently convert lists to tuples and count their occurrences. It must handle large datasets without performance degradation and provide output in a dictionary format for easy interpretation.\nrequirement pool:\n- Implement the main function to convert lists to tuples and count occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output format is clear and user-friendly.\n- Include error handling for non-list inputs.\n- Provide documentation and examples for users.\nWe will implement a function that converts sublists into tuples and counts their occurrences using Python's collections.Counter for efficient counting. This approach ensures optimal performance even with large datasets. We will handle non-list elements by ignoring them, as they do not fit the requirement of counting sublists.\n", "requirement analysis:\nThe function needs to convert each sublist into a tuple and count its occurrences in the main list. The output should be a dictionary with tuples as keys and their counts as values. The function should handle various list sizes efficiently.\nrequirement pool:\n- Implement the main function to convert sublists to tuples and count occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output format is user-friendly and easy to interpret.\n- Include error handling for non-list inputs.\n- Provide documentation and examples for users.\nWe will implement a function that converts each sublist into a tuple and uses the collections.Counter from the Python standard library to efficiently count occurrences. This approach ensures optimal performance even with large datasets.\n", "requirement analysis:\nThe function should efficiently convert each sublist into a tuple and count its occurrences. It must handle large lists without performance degradation and provide output in a dictionary format for easy interpretation.\nrequirement pool:\n- Implement the main function to convert sublists to tuples and count occurrences.\n- Optimize the function for handling large datasets efficiently.\n- Ensure the output is clear and easy to interpret.\n- Include error handling for non-list inputs.\n- Provide documentation and examples for users.\nWe will use Python's built-in collections module, specifically the Counter class, to efficiently count occurrences of sublists. Each sublist will be converted to a tuple to ensure hashability, allowing it to be used as a key in a dictionary. This approach is optimized for performance and handles large datasets effectively.\n", "requirement analysis:\nThe function should efficiently convert lists to tuples and count their occurrences. It must handle various input sizes and edge cases, ensuring performance and accuracy.\nrequirement pool:\n- Implement the main function to convert lists to tuples and count occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the function handles edge cases, such as empty lists.\n- Provide comprehensive documentation and examples.\n- Include unit tests to verify functionality.\nWe will implement a function that converts sublists into tuples and counts their occurrences using Python's built-in collections module, specifically the Counter class, which is efficient for tallying occurrences in large datasets. This approach ensures performance optimization and handles edge cases like empty lists gracefully.\n", "requirement analysis:\nThe function should efficiently count the occurrences of each sublist within a larger list, converting each sublist to a tuple for use as a dictionary key. The solution must handle large datasets and provide a clear output format.\nrequirement pool:\n- Implement the unique_sublists function to count sublist occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output is a dictionary with tuples as keys.\n- Include error handling for non-list inputs.\n- Document the function with examples and usage notes.\nWe will implement the unique_sublists function using Python's collections module, specifically the Counter class, to efficiently count occurrences of each sublist. Each sublist will be converted to a tuple to serve as a dictionary key, ensuring immutability and hashability. This approach will optimize performance for large datasets and provide a clear output format.\n", "requirement analysis:\nThe function needs to convert each sublist into a tuple to use as a dictionary key, ensuring that the count of each unique sublist is accurately tallied. The solution should be efficient enough to handle large lists without significant performance degradation.\nrequirement pool:\n- Implement the main function to count sublists.\n- Optimize the function for performance with large datasets.\n- Ensure the output format is user-friendly.\n- Add error handling for non-list inputs.\n- Include documentation and examples for users.\nWe will implement a function that iterates over the main list, converting each sublist into a tuple to use as a dictionary key. We will use the collections.Counter from the Python standard library to efficiently count occurrences of each tuple, ensuring optimal performance even with large datasets.\n", "requirement analysis:\nThe function needs to convert each sublist into a tuple to use as a dictionary key, ensuring that the counting is accurate and efficient. The output should be a dictionary with tuples as keys and their counts as values.\nrequirement pool:\n- Implement the main function to count sublists.\n- Optimize the function for performance with large datasets.\n- Ensure the output format is user-friendly and clear.\n- Add error handling for non-list inputs.\n- Include documentation and examples for user guidance.\nWe will implement the function using Python's built-in collections module, specifically the Counter class, to efficiently count occurrences of sublists. This approach ensures optimal performance even with large datasets by leveraging the hashable nature of tuples for dictionary keys.\n", "requirement analysis:\nThe function needs to convert each sublist into a tuple to ensure it can be used as a dictionary key. It should efficiently count occurrences even in large datasets and return a dictionary with tuples as keys and their counts as values.\nrequirement pool:\n- Implement the main function to convert sublists to tuples and count occurrences.\n- Optimize the function for performance with large datasets.\n- Ensure the output is clear and easy to interpret.\n- Add error handling for non-list inputs.\n- Include documentation and examples for user guidance.\nWe will use Python's built-in collections module, specifically the Counter class, to efficiently count occurrences of each sublist after converting them to tuples. This approach ensures that the function is optimized for performance even with large datasets. The function will handle non-list elements by ignoring them, focusing only on sublists.\n"], "test": ["def check(unique_sublists):\n\tassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 5], [2, 2], [4, 3], [14, 20, 21], [3, 8], [12, 13]]) == {(3, 5): 1, (2, 2): 1, (4, 3): 1, (14, 20, 21): 1, (3, 8): 1, (12, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 2], [6, 10], [6, 5], [18, 12, 22], [10, 8], [6, 12]]) == {(2, 2): 1, (6, 10): 1, (6, 5): 1, (18, 12, 22): 1, (10, 8): 1, (6, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 8], [1, 8], [3, 3], [11, 11, 21], [1, 11], [10, 13]]) == {(1, 8): 2, (3, 3): 1, (11, 11, 21): 1, (1, 11): 1, (10, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 8], [9, 2], [2, 7], [12, 10, 15], [8, 11], [7, 9]]) == {(2, 8): 1, (9, 2): 1, (2, 7): 1, (12, 10, 15): 1, (8, 11): 1, (7, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 3], [8, 7], [6, 8], [15, 19, 17], [3, 7], [4, 9]]) == {(5, 3): 1, (8, 7): 1, (6, 8): 1, (15, 19, 17): 1, (3, 7): 1, (4, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 1], [8, 11], [5, 5], [16, 10, 20], [3, 5], [4, 8]]) == {(4, 1): 1, (8, 11): 1, (5, 5): 1, (16, 10, 20): 1, (3, 5): 1, (4, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 8], [8, 6], [3, 1], [16, 20, 21], [9, 11], [12, 16]]) == {(4, 8): 1, (8, 6): 1, (3, 1): 1, (16, 20, 21): 1, (9, 11): 1, (12, 16): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [2, 3], [1, 5], [9, 20, 18], [5, 6], [8, 13]]) == {(6, 7): 1, (2, 3): 1, (1, 5): 1, (9, 20, 18): 1, (5, 6): 1, (8, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 4], [5, 2], [3, 3], [9, 19, 16], [3, 2], [13, 6]]) == {(1, 4): 1, (5, 2): 1, (3, 3): 1, (9, 19, 16): 1, (3, 2): 1, (13, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 2], [1, 2], [3, 5], [9, 20, 16], [5, 9], [6, 15]]) == {(5, 2): 1, (1, 2): 1, (3, 5): 1, (9, 20, 16): 1, (5, 9): 1, (6, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 3], [2, 8], [5, 5], [14, 16, 20], [6, 9], [7, 6]]) == {(5, 3): 1, (2, 8): 1, (5, 5): 1, (14, 16, 20): 1, (6, 9): 1, (7, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 3], [2, 12], [4, 7], [18, 19, 18], [4, 12], [13, 14]]) == {(3, 3): 1, (2, 12): 1, (4, 7): 1, (18, 19, 18): 1, (4, 12): 1, (13, 14): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 1], [4, 6], [5, 2], [17, 20, 17], [8, 12], [5, 6]]) == {(4, 1): 1, (4, 6): 1, (5, 2): 1, (17, 20, 17): 1, (8, 12): 1, (5, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [7, 7], [4, 8], [14, 14, 14], [2, 2], [4, 15]]) == {(2, 4): 1, (7, 7): 1, (4, 8): 1, (14, 14, 14): 1, (2, 2): 1, (4, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 7], [9, 7], [1, 7], [14, 12, 19], [9, 9], [9, 12]]) == {(2, 7): 1, (9, 7): 1, (1, 7): 1, (14, 12, 19): 1, (9, 9): 1, (9, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [5, 12], [4, 6], [16, 20, 19], [9, 8], [11, 15]]) == {(2, 4): 1, (5, 12): 1, (4, 6): 1, (16, 20, 19): 1, (9, 8): 1, (11, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 5], [5, 7], [2, 4], [18, 14, 16], [2, 7], [12, 10]]) == {(6, 5): 1, (5, 7): 1, (2, 4): 1, (18, 14, 16): 1, (2, 7): 1, (12, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 5], [1, 6], [3, 5], [14, 12, 16], [10, 11], [6, 6]]) == {(6, 5): 1, (1, 6): 1, (3, 5): 1, (14, 12, 16): 1, (10, 11): 1, (6, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [9, 9], [1, 6], [8, 10, 17], [6, 2], [14, 11]]) == {(3, 1): 1, (9, 9): 1, (1, 6): 1, (8, 10, 17): 1, (6, 2): 1, (14, 11): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 2], [7, 6], [2, 5], [10, 14, 22], [5, 10], [14, 12]]) == {(2, 2): 1, (7, 6): 1, (2, 5): 1, (10, 14, 22): 1, (5, 10): 1, (14, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 4], [10, 6], [5, 2], [12, 19, 22], [6, 7], [6, 8]]) == {(3, 4): 1, (10, 6): 1, (5, 2): 1, (12, 19, 22): 1, (6, 7): 1, (6, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 8], [8, 4], [3, 4], [13, 17, 21], [5, 10], [8, 6]]) == {(5, 8): 1, (8, 4): 1, (3, 4): 1, (13, 17, 21): 1, (5, 10): 1, (8, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 8], [9, 12], [2, 7], [17, 16, 14], [3, 7], [4, 7]]) == {(5, 8): 1, (9, 12): 1, (2, 7): 1, (17, 16, 14): 1, (3, 7): 1, (4, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [1, 8], [6, 8], [12, 16, 20], [1, 12], [8, 9]]) == {(3, 1): 1, (1, 8): 1, (6, 8): 1, (12, 16, 20): 1, (1, 12): 1, (8, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 2], [1, 6], [5, 3], [18, 19, 21], [7, 4], [12, 8]]) == {(5, 2): 1, (1, 6): 1, (5, 3): 1, (18, 19, 21): 1, (7, 4): 1, (12, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 8], [6, 2], [4, 4], [14, 17, 17], [6, 7], [5, 14]]) == {(2, 8): 1, (6, 2): 1, (4, 4): 1, (14, 17, 17): 1, (6, 7): 1, (5, 14): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 8], [2, 7], [4, 4], [10, 15, 12], [8, 7], [8, 13]]) == {(3, 8): 1, (2, 7): 1, (4, 4): 1, (10, 15, 12): 1, (8, 7): 1, (8, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 7], [6, 7], [1, 4], [15, 16, 22], [10, 11], [4, 12]]) == {(5, 7): 1, (6, 7): 1, (1, 4): 1, (15, 16, 22): 1, (10, 11): 1, (4, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 8], [4, 6], [1, 2], [18, 13, 20], [6, 4], [6, 15]]) == {(6, 8): 1, (4, 6): 1, (1, 2): 1, (18, 13, 20): 1, (6, 4): 1, (6, 15): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [6, 11], [5, 5], [10, 11, 19], [6, 2], [14, 13]]) == {(3, 1): 1, (6, 11): 1, (5, 5): 1, (10, 11, 19): 1, (6, 2): 1, (14, 13): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 4], [1, 11], [4, 1], [15, 13, 19], [3, 3], [6, 9]]) == {(3, 4): 1, (1, 11): 1, (4, 1): 1, (15, 13, 19): 1, (3, 3): 1, (6, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 4], [3, 12], [1, 6], [11, 15, 12], [8, 7], [9, 6]]) == {(1, 4): 1, (3, 12): 1, (1, 6): 1, (11, 15, 12): 1, (8, 7): 1, (9, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 2], [4, 12], [6, 8], [10, 10, 15], [6, 2], [10, 14]]) == {(6, 2): 2, (4, 12): 1, (6, 8): 1, (10, 10, 15): 1, (10, 14): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['whkqetdu', 'lmqlnaxvefj'], ['lyid'], ['uyvdx', 'bzgmgoxz'], ['tugj']]) == {('whkqetdu', 'lmqlnaxvefj'): 1, ('lyid',): 1, ('uyvdx', 'bzgmgoxz'): 1, ('tugj',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['yvqf', 'avcduc'], ['vuxu'], ['fism', 'umfjlkg'], ['zvfyq']]) == {('yvqf', 'avcduc'): 1, ('vuxu',): 1, ('fism', 'umfjlkg'): 1, ('zvfyq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['lixrcqawo', 'qtgpmhnsnytb'], ['wmzztqn'], ['qxmbs', 'ijiuynujn'], ['jevd']]) == {('lixrcqawo', 'qtgpmhnsnytb'): 1, ('wmzztqn',): 1, ('qxmbs', 'ijiuynujn'): 1, ('jevd',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['pla', 'wzgkdiz'], ['iwhtwkpfa'], ['xop', 'nlvttyn'], ['knfxsbish']]) == {('pla', 'wzgkdiz'): 1, ('iwhtwkpfa',): 1, ('xop', 'nlvttyn'): 1, ('knfxsbish',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['nrcixtzkm', 'jzvbcr'], ['stxxk'], ['ijo', 'vnxdexuespy'], ['wybwq']]) == {('nrcixtzkm', 'jzvbcr'): 1, ('stxxk',): 1, ('ijo', 'vnxdexuespy'): 1, ('wybwq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['klg', 'wixnpu'], ['lpm'], ['ebhcqlrde', 'nhjo'], ['npmyi']]) == {('klg', 'wixnpu'): 1, ('lpm',): 1, ('ebhcqlrde', 'nhjo'): 1, ('npmyi',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['jbf', 'psemfbv'], ['ppzxh'], ['gimnnuyov', 'rmyijyvmnidb'], ['borlmpwbv']]) == {('jbf', 'psemfbv'): 1, ('ppzxh',): 1, ('gimnnuyov', 'rmyijyvmnidb'): 1, ('borlmpwbv',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['hkwp', 'fonatzvdhepa'], ['aewv'], ['csmyghws', 'xvqoenivi'], ['vyoioej']]) == {('hkwp', 'fonatzvdhepa'): 1, ('aewv',): 1, ('csmyghws', 'xvqoenivi'): 1, ('vyoioej',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['nic', 'flu'], ['sgm'], ['jjnxkwpe', 'csuqn'], ['nakkrdoo']]) == {('nic', 'flu'): 1, ('sgm',): 1, ('jjnxkwpe', 'csuqn'): 1, ('nakkrdoo',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['eve', 'sdbv'], ['jjkz'], ['hby', 'gwhloxgls'], ['eovp']]) == {('eve', 'sdbv'): 1, ('jjkz',): 1, ('hby', 'gwhloxgls'): 1, ('eovp',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['phnnzvgbw', 'xix'], ['axqqpd'], ['boix', 'jfpo'], ['dilm']]) == {('phnnzvgbw', 'xix'): 1, ('axqqpd',): 1, ('boix', 'jfpo'): 1, ('dilm',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['afbt', 'ciaqijtxinnv'], ['ozwdake'], ['wuctv', 'wfzlvc'], ['wkiqssgk']]) == {('afbt', 'ciaqijtxinnv'): 1, ('ozwdake',): 1, ('wuctv', 'wfzlvc'): 1, ('wkiqssgk',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['fvgfnfqm', 'xunpvficzzc'], ['ghhr'], ['yuk', 'ruydpovwjxce'], ['kcyu']]) == {('fvgfnfqm', 'xunpvficzzc'): 1, ('ghhr',): 1, ('yuk', 'ruydpovwjxce'): 1, ('kcyu',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['mlujyy', 'bbxhnzodcu'], ['zhhzxezbx'], ['soh', 'swadtocbq'], ['qlf']]) == {('mlujyy', 'bbxhnzodcu'): 1, ('zhhzxezbx',): 1, ('soh', 'swadtocbq'): 1, ('qlf',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['chyrmxd', 'qstmd'], ['detm'], ['fgfg', 'pteduzagqj'], ['xnlmtyts']]) == {('chyrmxd', 'qstmd'): 1, ('detm',): 1, ('fgfg', 'pteduzagqj'): 1, ('xnlmtyts',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['qcfnaykhq', 'ifumq'], ['trp'], ['iwo', 'moylylks'], ['amlxkbl']]) == {('qcfnaykhq', 'ifumq'): 1, ('trp',): 1, ('iwo', 'moylylks'): 1, ('amlxkbl',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['zkahjws', 'iaimoelvw'], ['qkqtkb'], ['vmrpexoxw', 'rnyh'], ['mjgfq']]) == {('zkahjws', 'iaimoelvw'): 1, ('qkqtkb',): 1, ('vmrpexoxw', 'rnyh'): 1, ('mjgfq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['jetzk', 'ykpfpgv'], ['yxqouoavn'], ['jtdm', 'ysqmumacdycn'], ['wzp']]) == {('jetzk', 'ykpfpgv'): 1, ('yxqouoavn',): 1, ('jtdm', 'ysqmumacdycn'): 1, ('wzp',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['wdgenplks', 'lqdn'], ['tsmlrfelx'], ['nvsp', 'qkpuueoen'], ['vhslmdqv']]) == {('wdgenplks', 'lqdn'): 1, ('tsmlrfelx',): 1, ('nvsp', 'qkpuueoen'): 1, ('vhslmdqv',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['najytso', 'siwtuoglb'], ['lhvpapcpv'], ['xpnuqbso', 'mlgzdci'], ['ufik']]) == {('najytso', 'siwtuoglb'): 1, ('lhvpapcpv',): 1, ('xpnuqbso', 'mlgzdci'): 1, ('ufik',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['gwreye', 'amifhlyszwez'], ['cyoqp'], ['rmrljg', 'ilihr'], ['wwfxtuzq']]) == {('gwreye', 'amifhlyszwez'): 1, ('cyoqp',): 1, ('rmrljg', 'ilihr'): 1, ('wwfxtuzq',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['scyklu', 'cbishqzxh'], ['wmszg'], ['qnlfgie', 'hjcisf'], ['nikyz']]) == {('scyklu', 'cbishqzxh'): 1, ('wmszg',): 1, ('qnlfgie', 'hjcisf'): 1, ('nikyz',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['ryxbjl', 'nduwwedor'], ['jqc'], ['dsozewns', 'vcip'], ['hpckjb']]) == {('ryxbjl', 'nduwwedor'): 1, ('jqc',): 1, ('dsozewns', 'vcip'): 1, ('hpckjb',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['uvcl', 'msvjz'], ['vlevihg'], ['zgzkvtl', 'qmi'], ['mix']]) == {('uvcl', 'msvjz'): 1, ('vlevihg',): 1, ('zgzkvtl', 'qmi'): 1, ('mix',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['pqetunau', 'vkmfevcaaie'], ['mnqopqbn'], ['oprvjh', 'lkiwrni'], ['zsyad']]) == {('pqetunau', 'vkmfevcaaie'): 1, ('mnqopqbn',): 1, ('oprvjh', 'lkiwrni'): 1, ('zsyad',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['khlwvu', 'iwkyz'], ['fhsejcjgt'], ['uzsystip', 'ozgn'], ['zjnhhyn']]) == {('khlwvu', 'iwkyz'): 1, ('fhsejcjgt',): 1, ('uzsystip', 'ozgn'): 1, ('zjnhhyn',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['rbeiumbv', 'wzuehkttjg'], ['hhhjvac'], ['xyy', 'hnrramgt'], ['wljwvjkc']]) == {('rbeiumbv', 'wzuehkttjg'): 1, ('hhhjvac',): 1, ('xyy', 'hnrramgt'): 1, ('wljwvjkc',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['ibaascy', 'slsplgipehic'], ['ubfuvrcp'], ['lltvvhns', 'iaojo'], ['sfr']]) == {('ibaascy', 'slsplgipehic'): 1, ('ubfuvrcp',): 1, ('lltvvhns', 'iaojo'): 1, ('sfr',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['vciagot', 'yileycb'], ['npsouv'], ['cash', 'kwitbhgitknm'], ['ohcd']]) == {('vciagot', 'yileycb'): 1, ('npsouv',): 1, ('cash', 'kwitbhgitknm'): 1, ('ohcd',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['aaevqctls', 'rxrnfbiyvob'], ['zqxpj'], ['idvenw', 'vxkyyxuurbr'], ['jcubc']]) == {('aaevqctls', 'rxrnfbiyvob'): 1, ('zqxpj',): 1, ('idvenw', 'vxkyyxuurbr'): 1, ('jcubc',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['mcvbzd', 'cfrouazdrg'], ['pblaxnwlw'], ['hqvmp', 'gbxolpgmatg'], ['rwtuns']]) == {('mcvbzd', 'cfrouazdrg'): 1, ('pblaxnwlw',): 1, ('hqvmp', 'gbxolpgmatg'): 1, ('rwtuns',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['lzujhyjl', 'mgglqw'], ['yplnzky'], ['cftqdm', 'ttrjjoxglhh'], ['fhyg']]) == {('lzujhyjl', 'mgglqw'): 1, ('yplnzky',): 1, ('cftqdm', 'ttrjjoxglhh'): 1, ('fhyg',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([['hymbqwozb', 'oimn'], ['xjtwml'], ['qqmrnujhc', 'oizcztnhpgzt'], ['smzlzrwp']]) == {('hymbqwozb', 'oimn'): 1, ('xjtwml',): 1, ('qqmrnujhc', 'oizcztnhpgzt'): 1, ('smzlzrwp',): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 7], [8, 2], [3, 9], [5, 2]]) == {(4, 7): 1, (8, 2): 1, (3, 9): 1, (5, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [6, 3], [2, 5], [10, 10]]) == {(6, 7): 1, (6, 3): 1, (2, 5): 1, (10, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 5], [7, 7], [7, 9], [10, 12]]) == {(1, 5): 1, (7, 7): 1, (7, 9): 1, (10, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 4], [2, 1], [4, 9], [1, 7]]) == {(6, 4): 1, (2, 1): 1, (4, 9): 1, (1, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 3], [6, 1], [1, 4], [7, 10]]) == {(3, 3): 1, (6, 1): 1, (1, 4): 1, (7, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [5, 6], [6, 9], [1, 10]]) == {(6, 7): 1, (5, 6): 1, (6, 9): 1, (1, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 2], [7, 5], [6, 2], [10, 9]]) == {(4, 2): 1, (7, 5): 1, (6, 2): 1, (10, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 5], [4, 1], [3, 4], [7, 4]]) == {(1, 5): 1, (4, 1): 1, (3, 4): 1, (7, 4): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 5], [6, 7], [4, 10], [10, 8]]) == {(4, 5): 1, (6, 7): 1, (4, 10): 1, (10, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 1], [7, 4], [9, 1], [9, 12]]) == {(3, 1): 1, (7, 4): 1, (9, 1): 1, (9, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 1], [2, 1], [1, 8], [11, 3]]) == {(6, 1): 1, (2, 1): 1, (1, 8): 1, (11, 3): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 5], [3, 9], [7, 6], [5, 9]]) == {(6, 5): 1, (3, 9): 1, (7, 6): 1, (5, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 3], [2, 3], [8, 4], [1, 9]]) == {(1, 3): 1, (2, 3): 1, (8, 4): 1, (1, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 4], [3, 4], [8, 1], [7, 12]]) == {(4, 4): 1, (3, 4): 1, (8, 1): 1, (7, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 2], [7, 3], [9, 8], [1, 2]]) == {(2, 2): 1, (7, 3): 1, (9, 8): 1, (1, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 3], [7, 3], [3, 9], [7, 6]]) == {(6, 3): 1, (7, 3): 1, (3, 9): 1, (7, 6): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 2], [4, 8], [5, 4], [2, 8]]) == {(1, 2): 1, (4, 8): 1, (5, 4): 1, (2, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 7], [6, 9], [4, 1], [10, 7]]) == {(5, 7): 1, (6, 9): 1, (4, 1): 1, (10, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 1], [1, 5], [8, 5], [4, 7]]) == {(6, 1): 1, (1, 5): 1, (8, 5): 1, (4, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 1], [3, 8], [9, 8], [2, 12]]) == {(5, 1): 1, (3, 8): 1, (9, 8): 1, (2, 12): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 1], [2, 5], [3, 6], [3, 9]]) == {(4, 1): 1, (2, 5): 1, (3, 6): 1, (3, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 2], [3, 5], [7, 6], [8, 8]]) == {(1, 2): 1, (3, 5): 1, (7, 6): 1, (8, 8): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [4, 9], [1, 8], [1, 10]]) == {(2, 4): 1, (4, 9): 1, (1, 8): 1, (1, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [8, 5], [3, 2], [9, 5]]) == {(6, 7): 1, (8, 5): 1, (3, 2): 1, (9, 5): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 3], [4, 8], [1, 9], [1, 4]]) == {(2, 3): 1, (4, 8): 1, (1, 9): 1, (1, 4): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 6], [5, 1], [1, 1], [2, 9]]) == {(4, 6): 1, (5, 1): 1, (1, 1): 1, (2, 9): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 1], [6, 2], [7, 8], [9, 10]]) == {(5, 1): 1, (6, 2): 1, (7, 8): 1, (9, 10): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[2, 4], [1, 2], [3, 1], [3, 3]]) == {(2, 4): 1, (1, 2): 1, (3, 1): 1, (3, 3): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[1, 6], [8, 8], [7, 10], [7, 2]]) == {(1, 6): 1, (8, 8): 1, (7, 10): 1, (7, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[4, 2], [2, 7], [8, 4], [11, 4]]) == {(4, 2): 1, (2, 7): 1, (8, 4): 1, (11, 4): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[3, 2], [8, 4], [3, 7], [3, 2]]) == {(3, 2): 2, (8, 4): 1, (3, 7): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[6, 7], [3, 6], [6, 4], [9, 2]]) == {(6, 7): 1, (3, 6): 1, (6, 4): 1, (9, 2): 1}", "def check(unique_sublists):\n\tassert unique_sublists([[5, 7], [7, 1], [7, 10], [8, 11]]) == {(5, 7): 1, (7, 1): 1, (7, 10): 1, (8, 11): 1}"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List, Dict, Tuple\n\ndef unique_sublists(main_list: List) -> Dict[Tuple, int]:\n    \"\"\"\n    Convert each sublist in the main list to a tuple and count occurrences.\n\n    Parameters:\n    main_list (List): A list containing sublists to be counted.\n\n    Returns:\n    Dict[Tuple, int]: A dictionary with tuples as keys and their counts as values.\n    \"\"\"\n    # Initialize an empty list to store valid sublists converted to tuples\n    tuple_list = []\n\n    # Iterate over each element in the main list\n    for element in main_list:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the tuple_list\n            tuple_list.append(tuple(element))\n        else:\n            # Log or handle non-list elements if necessary\n            # For now, we are ignoring non-list elements\n            pass\n\n    # Use Counter to count occurrences of each tuple\n    count_dict = Counter(tuple_list)\n\n    # Return the dictionary of counts\n    return dict(count_dict)\n", "passed": true, "pass": true, "pass_num": 10, "round": 650, "mutate_method": "rephrase_one", "parent_index": 250}
