{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 572, "prompt": "Write a python function to remove duplicate numbers from a given number of lists.", "code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]", "test_imports": [], "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "assert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "assert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "assert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "assert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "assert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "assert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "assert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "assert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "assert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "assert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "assert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "assert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "assert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "assert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "assert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "assert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "assert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "assert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "assert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "assert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "assert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "assert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "assert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "assert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "assert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "assert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "assert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "assert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "assert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "assert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "assert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "assert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "assert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "assert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "assert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "assert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "assert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "assert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "assert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "assert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "assert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "assert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "assert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "assert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "assert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "assert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "assert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "assert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "assert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "assert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "assert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "assert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "assert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "assert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "assert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "assert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "assert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "assert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "assert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "assert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "assert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "assert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "assert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "assert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "assert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "assert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "assert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "assert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "assert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "assert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "assert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "assert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "assert two_unique_nums([1, 6, 1, 6, 6]) == []", "assert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "assert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "assert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "assert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "assert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "assert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "assert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "assert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "assert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "assert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "assert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "assert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "assert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "assert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "assert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "assert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "assert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "assert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "assert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "assert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "assert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "assert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "assert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "assert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "assert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "assert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "entry_point": "two_unique_nums", "repair_prompt": ["Write a python function two_unique_nums to remove duplicate numbers from a given number of lists.\ntwo_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"], "completions": ["from typing import List\n## main.py\n\nfrom collections import OrderedDict\n\ndef two_unique_nums(nums: list) -> list:\n    \"\"\"\n    Removes duplicate numbers from the list while maintaining the order of first occurrences.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    list: A list of integers with duplicates removed.\n    \"\"\"\n    # Use OrderedDict to maintain the order of first occurrences and remove duplicates\n    unique_nums = list(OrderedDict.fromkeys(nums))\n    \n    return unique_nums\n\ndef main():\n    # Example usage of the two_unique_nums function\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    result = two_unique_nums(example_list)\n    print(f\"Original list: {example_list}\")\n    print(f\"List with duplicates removed: {result}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom collections import Counter\n\ndef two_unique_nums(nums: list[int]) -> list[int]:\n    \"\"\"\n    Removes duplicate numbers from a list while maintaining the order of first occurrences.\n\n    Parameters:\n    nums (list[int]): A list of integers.\n\n    Returns:\n    list[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear only once and maintain the order of first occurrences\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    print(two_unique_nums(example_list))  # Output: [1, 4, 5]\n", "from typing import List\n## main.py\nimport typing\nfrom collections import Counter\n\ndef two_unique_nums(nums: typing.List[int]) -> typing.List[int]:\n    \"\"\"\n    Removes duplicate numbers from the list while maintaining the order of first occurrences.\n\n    Parameters:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear only once, maintaining the order of first occurrences\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [4, 5, 6, 7, 4, 5, 8, 9]\n    print(two_unique_nums(example_list))  # Output: [6, 7, 8, 9]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"Removes duplicate numbers from the list, preserving the order of unique elements.\n\n    This function uses collections.Counter to count occurrences of each number in the list.\n    It then filters out numbers that appear exactly once, preserving their order in the original list.\n\n    Args:\n        nums (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers with duplicates removed, preserving order.\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear exactly once, preserving their order\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n# print(result)  # Output: [1, 4, 5]\n", "from typing import List\n## main.py\nfrom collections import Counter\n\ndef two_unique_nums(numbers: list[int]) -> list[int]:\n    '''\n    Removes duplicate numbers from the list, preserving the order of unique elements.\n    \n    Parameters:\n    numbers (list[int]): A list of integers.\n    \n    Returns:\n    list[int]: A list of integers with duplicates removed.\n    '''\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear only once, preserving order\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    example_numbers = [4, 5, 6, 7, 4, 5, 8, 9]\n    print(two_unique_nums(example_numbers))  # Output: [6, 7, 8, 9]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(nums: list[int]) -> list[int]:\n    \"\"\"\n    Removes duplicate numbers from the list, preserving the order of unique elements.\n\n    Args:\n        nums (list[int]): A list of integers.\n\n    Returns:\n        list[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear only once, preserving their order\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    result = two_unique_nums(example_list)\n    print(result)  # Output: [1, 4, 5]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Removes duplicate numbers from the list while maintaining the order of unique elements.\n\n    Parameters:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list containing only the unique numbers from the input list.\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear only once and maintain their order\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [4, 5, 6, 7, 4, 5, 8, 9]\n    print(two_unique_nums(example_list))  # Output should be [6, 7, 8, 9]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(numbers: list) -> list:\n    \"\"\"\n    Removes duplicate numbers from the list, preserving the order of unique elements.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of integers that appear only once in the input list, in the order they first appeared.\n    \"\"\"\n    # Count occurrences of each number using collections.Counter\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear only once and preserve their order\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    example_numbers = [4, 5, 6, 7, 4, 5, 8, 9]\n    print(two_unique_nums(example_numbers))  # Output: [6, 7, 8, 9]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(numbers: list[int]) -> list[int]:\n    \"\"\"\n    Removes numbers that appear more than once in the list, maintaining the order of first occurrences.\n\n    Parameters:\n    numbers (list[int]): A list of integers from which duplicates are to be removed.\n\n    Returns:\n    list[int]: A list of integers that appear exactly once in the input list, in the order of their first occurrence.\n    \"\"\"\n    # Count occurrences of each number in the list\n    number_counts = Counter(numbers)\n    \n    # Filter numbers that appear exactly once\n    unique_numbers = [num for num in numbers if number_counts[num] == 1]\n    \n    return unique_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    example_numbers = [4, 5, 6, 7, 4, 5, 8, 9]\n    print(two_unique_nums(example_numbers))  # Output: [6, 7, 8, 9]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Removes duplicate numbers from a given list while maintaining the order of first occurrences.\n\n    Parameters:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list of integers with duplicates removed.\n\n    Example:\n    >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n    [1, 4, 5]\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear only once and maintain their order\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    print(two_unique_nums(example_list))  # Output: [1, 4, 5]\n"], "plans": ["requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrences. It should be easy to use and integrate into existing projects, with clear documentation to aid understanding.\nrequirement pool:\n- The function must remove duplicates and maintain order.\n- The function should handle large lists efficiently.\n- The function should be compatible with Python 3.x.\n- The function should include comprehensive documentation.\n- The function should have unit tests to ensure reliability.\nWe will implement a function using Python's built-in collections module to efficiently remove duplicates while maintaining the order of first occurrences. The function will be simple to integrate and will include comprehensive documentation and unit tests.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrences. It should be easy to use and integrate into existing projects, with clear documentation provided.\nrequirement pool:\n- The function must remove duplicates and maintain order\n- The function should handle large lists efficiently\n- The function should be compatible with Python 3.x\n- The function should have comprehensive documentation\n- The function should include examples of usage\nWe will implement a simple Python function using collections.Counter to efficiently count occurrences of each number and then filter out numbers that appear more than once. This approach ensures that the function is efficient and maintains the order of first occurrences. The function will be compatible with Python 3.x and will include comprehensive documentation with examples.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrences. It should be easy to use and integrate into existing projects, with clear documentation to aid understanding.\nrequirement pool:\n- The function must remove duplicates while maintaining order.\n- The function should handle large lists efficiently.\n- The function should be compatible with Python 3.x versions.\n- Provide comprehensive documentation and examples.\n- Include test cases to validate functionality.\nWe will use Python's collections module to efficiently count occurrences of each number and filter out those that appear more than once, while maintaining the order of first occurrences. This approach leverages the Counter class for counting and a list comprehension for filtering, ensuring compatibility with Python 3.x versions and efficiency for large lists.\n", "requirement analysis:\nThe function should efficiently remove duplicates while preserving the order of unique elements. It should be easy to use and integrate into existing projects, with clear documentation and examples provided.\nrequirement pool:\n- The function must remove duplicates and preserve order.\n- The function should handle large lists efficiently.\n- Provide documentation and examples for user understanding.\n- Ensure compatibility with different Python versions.\n- Handle edge cases gracefully.\nWe will use the collections.Counter from the Python standard library to efficiently count occurrences of each number in the list. This allows us to identify numbers that appear exactly once, preserving their order in the original list. This approach is efficient for large lists and does not require additional third-party libraries.\n", "requirement analysis:\nThe function should efficiently remove duplicates while preserving the order of unique elements. It should be easy to use and integrate into existing projects, with clear documentation provided.\nrequirement pool:\n- The function should remove duplicates efficiently\n- The function should preserve the order of unique elements\n- The function should handle large lists effectively\n- Provide clear documentation and usage examples\n- Ensure compatibility with different Python versions\nWe will implement a function using Python's collections module to efficiently count occurrences of each number and filter out those that appear more than once, preserving the order of unique elements. This approach avoids the overhead of third-party libraries and maintains compatibility with different Python versions.\n", "requirement analysis:\nThe function should efficiently remove duplicates while preserving the order of unique elements. It should be easy to use and integrate into existing projects, with clear documentation and examples provided.\nrequirement pool:\n- The function must remove duplicates and preserve order\n- The function should handle large lists efficiently\n- Provide clear documentation and examples\n- Optimize for performance\n- Ensure compatibility with Python 3.x\nWe will use the collections.Counter from Python's standard library to efficiently count occurrences of each number in the list. Then, we will filter out numbers that appear more than once, preserving the order of their first appearance.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of unique elements. It should handle various list sizes and provide clear documentation for integration.\nrequirement pool:\n- The function must remove duplicates and maintain order\n- The function should handle large lists efficiently\n- Provide clear documentation and examples\n- Ensure compatibility with Python 3.x\n- Include error handling for invalid inputs\nWe will implement a function using Python's collections module to efficiently count occurrences of each number and filter out those that appear more than once. This approach will maintain the order of unique elements and handle large lists efficiently without requiring additional dependencies.\n", "requirement analysis:\nThe function should efficiently remove duplicates while preserving the order of unique elements. It should be easy to use and integrate into existing projects, with clear documentation provided.\nrequirement pool:\n- The function must remove duplicates and preserve order\n- The function should handle large lists efficiently\n- Provide documentation and usage examples\n- Ensure compatibility with Python 3.x\n- Optimize for performance\nWe will use the collections.Counter from the Python standard library to count the occurrences of each number in the list. This will allow us to efficiently identify numbers that appear only once, preserving their order in the original list.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrences. It should handle various input sizes and types, providing a robust solution for unique number extraction.\nrequirement pool:\n- Implement the main function to remove duplicates\n- Ensure the function maintains the order of first occurrences\n- Optimize the function for performance with large lists\n- Provide comprehensive documentation and examples\n- Test the function with edge cases and different data types\nWe will implement a function that iterates through the list while maintaining a count of occurrences using the collections.Counter class. This will allow us to efficiently identify numbers that appear exactly once, ensuring the order of first occurrences is preserved. The function will be optimized for performance with large lists by using a single pass to filter the unique numbers.\n", "requirement analysis:\nThe function should efficiently remove duplicates while maintaining the order of first occurrences. It should handle various input sizes and types, ensuring compatibility with standard Python data structures.\nrequirement pool:\n- The function must remove duplicates and maintain order.\n- The function should handle large lists efficiently.\n- The function should be compatible with Python 3.x.\n- The function should include error handling for non-list inputs.\n- The function should be documented with examples.\nWe will use Python's collections module to efficiently count occurrences of each number and filter out duplicates while maintaining order. This approach leverages the Counter class to handle large lists efficiently and ensures compatibility with Python 3.x.\n"], "test": ["def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 1, 6, 6]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "scores": [0.1176, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [12, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n    Removes duplicate numbers from a given list while maintaining the order of first occurrences.\n\n    Parameters:\n    nums (List[int]): A list of integers.\n\n    Returns:\n    List[int]: A list of integers with duplicates removed.\n\n    Example:\n    >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n    [1, 4, 5]\n    \"\"\"\n    # Count occurrences of each number in the list\n    num_counts = Counter(nums)\n    \n    # Filter numbers that appear only once and maintain their order\n    unique_nums = [num for num in nums if num_counts[num] == 1]\n    \n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = [1, 2, 3, 2, 3, 4, 5]\n    print(two_unique_nums(example_list))  # Output: [1, 4, 5]\n", "passed": true, "pass": true, "pass_num": 9, "round": 282, "mutate_method": "condense_two2one", "parent_index": 282}
