{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2. For instance, an example of such a sequence is n + (n-2) + (n-4)... The sequence continues progressing until the condition n-x <= 0 is met.", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25", "assert sum_series(5) == 9", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(1) == 1", "assert sum_series(4) == 6", "assert sum_series(4) == 6", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(10) == 30", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(6) == 12", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(8) == 20", "assert sum_series(9) == 25", "assert sum_series(10) == 30", "assert sum_series(5) == 9", "assert sum_series(3) == 4", "assert sum_series(1) == 1", "assert sum_series(11) == 36", "assert sum_series(3) == 4", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(9) == 25", "assert sum_series(3) == 4", "assert sum_series(6) == 12", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(13) == 49", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(15) == 64", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(15) == 64", "assert sum_series(15) == 64", "assert sum_series(12) == 42", "assert sum_series(11) == 36", "assert sum_series(11) == 36", "assert sum_series(15) == 64", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(5) == 9", "assert sum_series(10) == 30", "assert sum_series(12) == 42", "assert sum_series(7) == 16", "assert sum_series(15) == 64", "assert sum_series(9) == 25", "assert sum_series(14) == 56", "assert sum_series(7) == 16", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(12) == 42", "assert sum_series(4) == 6", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(12) == 42", "assert sum_series(10) == 30", "assert sum_series(4) == 6", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(9) == 25", "assert sum_series(12) == 42", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(13) == 49", "assert sum_series(8) == 20", "assert sum_series(9) == 25"], "entry_point": "sum_series", "repair_prompt": ["Write a function sum_series to calculate the sum (n - 2*i) from i=0 to n // 2. For instance, an example of such a sequence is n + (n-2) + (n-4)... The sequence continues progressing until the condition n-x <= 0 is met.\nsum_series(6)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge case where n is less than or equal to 0\n    if n <= 0:\n        return 0\n\n    # Initialize sum\n    total_sum = 0\n\n    # Iterate over the series and calculate the sum\n    for i in range(0, n // 2 + 1):\n        current_term = n - 2 * i\n        if current_term > 0:\n            total_sum += current_term\n        else:\n            break\n\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_series(10))  # Expected output: 30 (10 + 8 + 6 + 4 + 2)\n    print(sum_series(5))   # Expected output: 9 (5 + 3 + 1)\n    print(sum_series(0))   # Expected output: 0\n    print(sum_series(-5))  # Expected output: 0\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    '''\n    Calculate the sum of the sequence n + (n-2) + (n-4) + ... until the terms are non-positive.\n    \n    Parameters:\n    n (int): The starting integer of the sequence.\n    \n    Returns:\n    int: The sum of the sequence.\n    '''\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate through the sequence, decrementing by 2 each time\n    while n > 0:\n        total_sum += n\n        n -= 2\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_series(10))  # Expected output: 30 (10 + 8 + 6 + 4 + 2)\n    print(sum_series(9))   # Expected output: 25 (9 + 7 + 5 + 3 + 1)\n    print(sum_series(0))   # Expected output: 0\n    print(sum_series(-1))  # Expected output: 0\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the sequence n + (n-2) + (n-4) + ... until the terms are non-positive.\n\n    Parameters:\n    n (int): The starting integer of the sequence.\n\n    Returns:\n    int: The sum of the sequence.\n\n    Example:\n    >>> sum_series(6)\n    12\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Loop to calculate the sum of the sequence\n    while n > 0:\n        total_sum += n\n        n -= 2  # Decrease n by 2 for the next term in the sequence\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example\n    example_input = 6\n    print(f\"The sum of the series starting from {example_input} is: {sum_series(example_input)}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the sequence n + (n-2) + (n-4) + ... until the terms are non-positive.\n\n    Parameters:\n    n (int): The starting integer of the sequence.\n\n    Returns:\n    int: The sum of the sequence.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(0)\n    0\n    >>> sum_series(-5)\n    0\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the sequence, decreasing by 2 each time\n    while n > 0:\n        total_sum += n\n        n -= 2\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sum_series(6))  # Output: 12\n    print(sum_series(0))  # Output: 0\n    print(sum_series(-5)) # Output: 0\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    This function handles edge cases such as negative or zero input by returning 0.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Handle edge cases where n is negative or zero\n    if n <= 0:\n        return 0\n\n    # Initialize the sum\n    total_sum = 0\n\n    # Iterate from i=0 to n//2\n    for i in range((n // 2) + 1):\n        total_sum += (n - 2 * i)\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the sequence n + (n-2) + (n-4) + ... until the terms are non-positive.\n\n    Parameters:\n    n (int): The starting integer of the sequence.\n\n    Returns:\n    int: The sum of the sequence.\n\n    Example:\n    >>> sum_series(6)\n    12\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate over the sequence, decrementing by 2 each time\n    while n > 0:\n        total_sum += n\n        n -= 2\n    \n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example\n    example_value = 6\n    result = sum_series(example_value)\n    print(f\"The sum of the series starting from {example_value} is {result}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum variable\n    series_sum = 0\n    \n    # Iterate through the series from i=0 to n//2\n    for i in range(n // 2 + 1):\n        series_sum += (n - 2 * i)\n    \n    return series_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example input\n    example_input = 10\n    result = sum_series(example_input)\n    print(f\"The sum of the series for n={example_input} is: {result}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 for negative or zero input.\n    \"\"\"\n    # Handle edge case for negative or zero input\n    if n <= 0:\n        return 0\n\n    # Calculate the sum of the series using a direct mathematical approach\n    # The series is: n + (n-2) + (n-4) + ... + (n-2*(n//2))\n    # This is an arithmetic series with first term 'n' and last term 'n - 2*(n//2)'\n    # Number of terms in the series is (n//2) + 1\n\n    # Calculate the last term\n    last_term = n - 2 * (n // 2)\n\n    # Calculate the number of terms\n    num_terms = (n // 2) + 1\n\n    # Use the formula for the sum of an arithmetic series: S = num_terms * (first_term + last_term) / 2\n    series_sum = num_terms * (n + last_term) // 2\n\n    return series_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the sequence n + (n-2) + (n-4) + ... until the terms are non-positive.\n\n    Parameters:\n    n (int): The starting integer of the sequence.\n\n    Returns:\n    int: The sum of the sequence.\n\n    Example:\n    >>> sum_series(6)\n    12\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Loop through the sequence, decrementing by 2 each time\n    for i in range(0, n // 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total_sum += term\n        else:\n            break\n\n    return total_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example\n    example_input = 6\n    print(f\"The sum of the series starting from {example_input} is: {sum_series(example_input)}\")\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    '''\n    Calculate the sum of the series n + (n-2) + (n-4) + ... until the term becomes non-positive.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 if n is non-positive.\n    '''\n    if n <= 0:\n        return 0\n\n    total_sum = 0\n    for i in range(0, n // 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total_sum += term\n        else:\n            break\n\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function should efficiently calculate the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. It should handle edge cases where n is less than or equal to 0 and provide clear output.\nrequirement pool:\n- Implement the main function to calculate the series sum\n- Optimize the function for performance\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Design a simple UI for user interaction\nWe will implement a function named sum_series that calculates the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. The function will handle edge cases where n is less than or equal to 0 by returning 0, as the series would not have any valid terms. We will use Python's built-in capabilities to ensure performance and simplicity. Additionally, we will provide clear documentation and examples to guide the user.\n", "requirement analysis:\nThe function should efficiently compute the sum of a decreasing arithmetic sequence starting from n and decreasing by 2 until the terms are non-positive. It should handle both small and large values of n, and return the correct sum.\nrequirement pool:\n- Implement the sum_series function to calculate the sum of the sequence.\n- Optimize the function for large values of n.\n- Include comprehensive test cases to validate the function.\n- Document the function with examples and edge cases.\n- Ensure compatibility with Python 3.x.\nWe will implement a simple function using basic Python constructs to calculate the sum of the sequence. Given the nature of the sequence, a loop will be used to iterate through the terms, and the sum will be accumulated. The function will be optimized for large values of n by using a mathematical approach to avoid unnecessary iterations. We will ensure compatibility with Python 3.x and provide comprehensive documentation and test cases.\n", "requirement analysis:\nThe function should efficiently compute the sum of a decreasing arithmetic sequence starting from n and decreasing by 2 until the terms are non-positive. It should handle both small and large values of n, and return the correct sum.\nrequirement pool:\n- Implement the sum_series function to calculate the sum of the sequence.\n- Optimize the function for large values of n.\n- Include detailed documentation and examples.\n- Ensure compatibility with Python 3.x.\n- Test the function with edge cases.\nWe will implement the sum_series function using pure Python to ensure simplicity and compatibility with Python 3.x. The function will calculate the sum of a decreasing arithmetic sequence starting from n and decreasing by 2 until the terms are non-positive. This approach will handle both small and large values of n efficiently. We will include detailed documentation and examples to aid understanding.\n", "requirement analysis:\nThe function should efficiently compute the sum of a decreasing arithmetic sequence starting from n and decreasing by 2 until the terms are non-positive. It should handle both small and large values of n, and return the correct sum.\nrequirement pool:\n- Implement the sum_series function to calculate the sum of the sequence.\n- Ensure the function handles edge cases such as n=0 or negative n.\n- Provide documentation and examples for the function usage.\n- Optimize the function for performance with large inputs.\n- Include unit tests to verify the function's correctness.\nWe will implement a simple function to calculate the sum of a decreasing arithmetic sequence starting from n and decreasing by 2 until the terms are non-positive. The function will handle edge cases such as n=0 or negative n by returning 0, as a negative starting point or zero does not form a valid sequence. The function will be efficient and compatible with Python 3.x, using basic arithmetic operations without the need for external libraries.\n", "requirement analysis:\nThe function should iterate from 0 to n//2, calculating the sum of the sequence (n - 2*i). It should handle cases where n is negative or zero, and return 0 in such scenarios.\nrequirement pool:\n- Implement the sum_series function to calculate the sequence sum\n- Ensure the function handles edge cases like negative or zero input\n- Optimize the function for large input values\n- Provide documentation and examples for the function\n- Write unit tests to verify the function's correctness\nWe will implement the sum_series function using pure Python to ensure simplicity and efficiency. The function will iterate from 0 to n//2, calculating the sum of the sequence (n - 2*i). It will handle edge cases such as negative or zero input by returning 0. The function will be optimized for readability and maintainability, and will include a docstring for documentation.\n", "requirement analysis:\nThe function should efficiently compute the sum of a decreasing arithmetic sequence starting from n and decrementing by 2 until the terms are non-positive. It should handle both small and large values of n and provide accurate results.\nrequirement pool:\n- Implement the sum_series function to calculate the sum of the sequence.\n- Optimize the function for performance with large inputs.\n- Include comprehensive documentation and usage examples.\n- Ensure compatibility with Python 3.x versions.\n- Test the function with edge cases and validate results.\nWe will implement the sum_series function using basic arithmetic operations to efficiently compute the sum of the sequence. Given the simplicity of the task, we will not use any external libraries, ensuring compatibility across all Python 3.x versions. The function will handle non-negative values of n, as negative values would not make sense in the context of the sequence described.\n", "requirement analysis:\nThe function should calculate the sum of a series where each term is defined as (n - 2*i) starting from i=0 up to n//2. The function should handle cases where n is small or large and ensure that the sequence stops when n-x <= 0.\nrequirement pool:\n- Implement the sum_series function to calculate the specified series\n- Optimize the function for performance with large inputs\n- Include comprehensive test cases to cover edge scenarios\n- Document the function with examples and usage notes\n- Ensure compatibility with Python 3.x\nWe will implement a simple function named sum_series that calculates the sum of the series (n - 2*i) from i=0 to n//2. The function will be efficient and handle edge cases by using a loop to iterate through the series. We will ensure compatibility with Python 3.x and provide comprehensive documentation and examples. Since the task is straightforward, we will not use any external libraries, as they would be unnecessary for this simple calculation.\n", "requirement analysis:\nThe function should iterate from 0 to n//2, calculating the sum of the series (n - 2*i). It should handle cases where n is negative or zero, returning 0 in such cases.\nrequirement pool:\n- Implement the sum_series function to calculate the sum of the sequence.\n- Ensure the function handles edge cases like negative or zero input.\n- Optimize the function for large values of n.\n- Provide documentation and examples for the function.\n- Test the function with a variety of inputs to ensure accuracy.\nWe will implement a simple function named sum_series that calculates the sum of the series (n - 2*i) for i ranging from 0 to n//2. The function will handle edge cases such as negative or zero input by returning 0. The implementation will be efficient for large values of n by using a direct mathematical approach to calculate the sum of the arithmetic series. We will use Python's built-in capabilities without any additional libraries, as they are sufficient for this task.\n", "requirement analysis:\nThe function should efficiently compute the sum of a decreasing arithmetic sequence starting from n and decreasing by 2 until the terms are non-positive. It should handle both small and large values of n, and return the correct sum.\nrequirement pool:\n- Implement the sum_series function to calculate the sum of the sequence.\n- Ensure the function handles edge cases such as n=0 or n=1.\n- Optimize the function for performance with large inputs.\n- Provide documentation and examples for the function.\n- Test the function with a variety of inputs to ensure accuracy.\nWe will implement a simple function using basic arithmetic operations to calculate the sum of the sequence. Given the nature of the sequence, we can use a loop to iterate through the terms and accumulate the sum. The function will handle edge cases such as n=0 or n=1 by returning 0 or n respectively, as these cases do not form a valid sequence. We will ensure the function is efficient for large inputs by using a straightforward loop without any unnecessary computations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a specific series. The function should handle various values of n efficiently and provide accurate results. The series stops when the term becomes non-positive.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large n values.\n- Provide clear documentation and examples for user understanding.\n- Ensure the function handles edge cases gracefully.\n- Design a user-friendly interface for input and output.\nWe will implement a simple function using Python to calculate the sum of the series as described. The function will iterate over the range from 0 to n // 2, calculating the sum of terms (n - 2*i). We will use basic Python constructs to ensure performance and simplicity. The function will handle edge cases such as negative or zero values for n by returning zero, as the series would not have any positive terms.\n"], "test": ["def check(sum_series):\n\tassert sum_series(6)==12", "def check(sum_series):\n\tassert sum_series(10)==30", "def check(sum_series):\n\tassert sum_series(9)==25", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(14) == 56", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    '''\n    Calculate the sum of the series n + (n-2) + (n-4) + ... until the term becomes non-positive.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 if n is non-positive.\n    '''\n    if n <= 0:\n        return 0\n\n    total_sum = 0\n    for i in range(0, n // 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total_sum += term\n        else:\n            break\n\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 761, "mutate_method": "expand_one2two", "parent_index": 63}
