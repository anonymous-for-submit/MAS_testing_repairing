{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Write a function to convert degrees to radians.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Write a function radian_degree to convert degrees to radians.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians using\n    the formula: radians = degrees * (pi / 180).\n\n    Parameters:\n    degrees (float): The angle in degrees to be converted.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    ValueError: If the input is not a numeric value.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a numeric value.\")\n    \n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\nif __name__ == \"__main__\":\n    # Example usage\n    angle_in_degrees = 90.0\n    angle_in_radians = radian_degree(angle_in_degrees)\n    print(f\"{angle_in_degrees} degrees is {angle_in_radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    angle_in_degrees = 90.0\n    angle_in_radians = radian_degree(angle_in_degrees)\n    print(f\"{angle_in_degrees} degrees is {angle_in_radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the math.radians function, which ensures high accuracy and\n    performance.\n\n    Args:\n        degrees (float): The angle in degrees to be converted.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    degrees = 180.0\n    radians = radian_degree(degrees)\n    print(f\"{degrees} degrees is {radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians using\n    the formula: radians = degrees * (pi/180).\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n\n    Example:\n    >>> radian_degree(180)\n    3.141592653589793\n\n    >>> radian_degree(90)\n    1.5707963267948966\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with some example values\n    print(f\"180 degrees in radians: {radian_degree(180)}\")\n    print(f\"90 degrees in radians: {radian_degree(90)}\")\n    print(f\"45 degrees in radians: {radian_degree(45)}\")\n", "from typing import List\n## main.py\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees to be converted.\n\n    Returns:\n    float: Angle in radians.\n\n    Raises:\n    ValueError: If the input is not a numeric value.\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise ValueError(\"Input must be a numeric value.\")\n    \n    radians = math.radians(degrees)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"Convert degrees to radians.\n\n    This function takes an angle in degrees and converts it to radians\n    using the math module for accurate and efficient computation.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n\n    Example:\n        >>> radian_degree(90)\n        1.5707963267948966\n    \"\"\"\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_angle_degrees = 90\n    test_angle_radians = radian_degree(test_angle_degrees)\n    print(f\"{test_angle_degrees} degrees is {test_angle_radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\nif __name__ == \"__main__\":\n    # Example usage\n    example_degrees = 180.0\n    radians = radian_degree(example_degrees)\n    print(f\"{example_degrees} degrees is {radians} radians.\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    angle_in_degrees = 90\n    angle_in_radians = radian_degree(angle_in_degrees)\n    print(f\"{angle_in_degrees} degrees is {angle_in_radians} radians.\")\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to understand, with clear documentation to aid users in understanding the conversion process.\nrequirement pool:\n- Implement the conversion formula using Python's math library\n- Optimize the function for performance\n- Provide documentation explaining the conversion process\n- Include error handling for invalid inputs\n- Test the function with various degree inputs\nWe will use Python's built-in math library to implement the conversion formula from degrees to radians. This ensures accuracy and efficiency. The function will be simple and straightforward, with clear documentation explaining the conversion process. We will also include basic error handling to manage invalid inputs.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use and provide precise results, as demonstrated by the example provided.\nrequirement pool:\n- Implement the radian_degree function to convert degrees to radians accurately.\n- Ensure the function handles edge cases, such as negative degrees.\n- Provide documentation and examples for users.\n- Optimize the function for performance.\n- Consider adding additional conversion functions in the future.\nWe will use the math library in Python, which provides a reliable and efficient method for converting degrees to radians using the math.radians function. This ensures accurate mathematical conversions and optimizes performance for quick calculations.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians, which is essential for various mathematical and scientific applications. The function should be efficient and easy to understand.\nrequirement pool:\n- Implement the radian_degree function for accurate conversion\n- Optimize the function for performance\n- Provide documentation for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Include test cases to validate the function\nWe will use the math module from Python's standard library to implement the radian_degree function. This module provides a reliable and efficient way to perform mathematical operations, including the conversion from degrees to radians using the constant math.pi.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple to use and integrate into other projects, handling common edge cases effectively.\nrequirement pool:\n- Implement the degree to radian conversion function\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide documentation and examples for usage\n- Include error handling for invalid inputs\nWe will use the built-in math module in Python, which provides a reliable and efficient way to convert degrees to radians using the radians function. This approach ensures high accuracy and performance while keeping the implementation simple and easy to integrate into other projects.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to use, with clear documentation to aid understanding.\nrequirement pool:\n- Implement the conversion formula: radians = degrees * (pi/180)\n- Ensure the function handles edge cases like 0 and 360 degrees\n- Optimize the function for performance\n- Provide documentation explaining the conversion process\n- Include examples in the documentation for user reference\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module provides a constant for pi, which is essential for the conversion formula. The function will be simple and efficient, ensuring quick execution. Documentation will be provided to explain the conversion process and include examples for clarity.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to use, with clear documentation to assist users in understanding its application.\nrequirement pool:\n- Implement the radian_degree function for accurate conversion\n- Optimize the function for performance\n- Provide comprehensive documentation\n- Ensure compatibility with existing Python libraries\n- Include error handling for invalid inputs\nWe will implement the radian_degree function using Python's built-in math module, which provides a reliable and efficient way to convert degrees to radians. This approach ensures accuracy and leverages existing, well-tested functionality. We will also include error handling to manage invalid inputs, such as non-numeric values.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to understand, with clear documentation provided for users.\nrequirement pool:\n- Implement the conversion function with high accuracy\n- Optimize the function for performance\n- Provide comprehensive documentation\n- Ensure compatibility with existing mathematical libraries\n- Include examples of usage in documentation\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module provides a reliable and efficient way to handle mathematical operations, ensuring high accuracy and performance. Additionally, we will provide comprehensive documentation with examples to help users understand the conversion process.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be easy to use and integrate into other projects, ensuring high performance and accuracy.\nrequirement pool:\n- Implement the radian_degree function to convert degrees to radians accurately.\n- Ensure the function is optimized for performance.\n- Provide clear documentation for the function usage.\n- Include error handling for invalid inputs.\n- Create test cases to validate the function's accuracy.\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. This approach ensures high accuracy and performance without the need for additional libraries, making it easy to integrate into existing projects.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be simple, efficient, and easy to understand, with clear documentation to aid users in understanding the conversion process.\nrequirement pool:\n- Implement the radian_degree function for accurate conversion\n- Optimize the function for performance\n- Provide clear documentation for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Test the function with various inputs to ensure reliability\nWe will use the math module from Python's standard library to perform the conversion from degrees to radians. This module is efficient and provides accurate mathematical functions, making it ideal for our needs. The function will be simple and straightforward, ensuring ease of understanding and quick performance.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts degrees to radians. The function should be efficient and easy to use, with clear documentation to aid understanding.\nrequirement pool:\n- Implement the radian_degree function for accurate conversion\n- Optimize the function for performance\n- Provide comprehensive documentation\n- Ensure compatibility with existing mathematical libraries\n- Include examples for user reference\nWe will implement a simple function using Python's built-in math module to convert degrees to radians. This approach ensures accuracy and efficiency, leveraging the well-optimized math library. The function will be documented clearly to aid understanding and include examples for user reference.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): Angle in degrees.\n\n    Returns:\n    float: Angle in radians.\n    \"\"\"\n    radians = math.radians(degrees)\n    return radians\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    angle_in_degrees = 90\n    angle_in_radians = radian_degree(angle_in_degrees)\n    print(f\"{angle_in_degrees} degrees is {angle_in_radians} radians.\")\n", "passed": true, "pass": true, "pass_num": 10, "round": 191, "mutate_method": "condense_two2one", "parent_index": 191}
