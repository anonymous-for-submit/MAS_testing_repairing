{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 624, "prompt": "Write a python function to convert a given string to uppercase.", "code": "def is_upper(string):\n  return (string.upper())", "test_imports": [], "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\"", "assert is_upper(\"uuzfbweeukl\") == \"UUZFBWEEUKL\"", "assert is_upper(\"ywmgedilupbs\") == \"YWMGEDILUPBS\"", "assert is_upper(\"ewhkqxebci\") == \"EWHKQXEBCI\"", "assert is_upper(\"eqdhuv\") == \"EQDHUV\"", "assert is_upper(\"wscfohka\") == \"WSCFOHKA\"", "assert is_upper(\"srzw\") == \"SRZW\"", "assert is_upper(\"ciamt\") == \"CIAMT\"", "assert is_upper(\"sjpuysyvk\") == \"SJPUYSYVK\"", "assert is_upper(\"sefv\") == \"SEFV\"", "assert is_upper(\"fjrx\") == \"FJRX\"", "assert is_upper(\"rbteuroemgno\") == \"RBTEUROEMGNO\"", "assert is_upper(\"smach\") == \"SMACH\"", "assert is_upper(\"utys\") == \"UTYS\"", "assert is_upper(\"xqupm\") == \"XQUPM\"", "assert is_upper(\"dumsxuk\") == \"DUMSXUK\"", "assert is_upper(\"ocajjdws\") == \"OCAJJDWS\"", "assert is_upper(\"amgcxce\") == \"AMGCXCE\"", "assert is_upper(\"ymxizas\") == \"YMXIZAS\"", "assert is_upper(\"pdmkfocsdul\") == \"PDMKFOCSDUL\"", "assert is_upper(\"lauqljbfpvzh\") == \"LAUQLJBFPVZH\"", "assert is_upper(\"dbhkpqvk\") == \"DBHKPQVK\"", "assert is_upper(\"ldtwqldat\") == \"LDTWQLDAT\"", "assert is_upper(\"apxhdakjgq\") == \"APXHDAKJGQ\"", "assert is_upper(\"udfyuiqvpnyq\") == \"UDFYUIQVPNYQ\"", "assert is_upper(\"wbvwqlby\") == \"WBVWQLBY\"", "assert is_upper(\"rovienawtorg\") == \"ROVIENAWTORG\"", "assert is_upper(\"dahqfebsl\") == \"DAHQFEBSL\"", "assert is_upper(\"xkjmrzvqs\") == \"XKJMRZVQS\"", "assert is_upper(\"akrqlojti\") == \"AKRQLOJTI\"", "assert is_upper(\"qar\") == \"QAR\"", "assert is_upper(\"fstyjqbrjw\") == \"FSTYJQBRJW\"", "assert is_upper(\"hsiziebehdn\") == \"HSIZIEBEHDN\"", "assert is_upper(\"ycj\") == \"YCJ\"", "assert is_upper(\"ntitvfuu\") == \"NTITVFUU\"", "assert is_upper(\"ywp\") == \"YWP\"", "assert is_upper(\"dqdyh\") == \"DQDYH\"", "assert is_upper(\"spldfng\") == \"SPLDFNG\"", "assert is_upper(\"cxicuqhb\") == \"CXICUQHB\"", "assert is_upper(\"ldqzcqdat\") == \"LDQZCQDAT\"", "assert is_upper(\"xciboc\") == \"XCIBOC\"", "assert is_upper(\"lyhe\") == \"LYHE\"", "assert is_upper(\"mxu\") == \"MXU\"", "assert is_upper(\"rwelfax\") == \"RWELFAX\"", "assert is_upper(\"qjqbhq\") == \"QJQBHQ\"", "assert is_upper(\"lovatghvm\") == \"LOVATGHVM\"", "assert is_upper(\"qvj\") == \"QVJ\"", "assert is_upper(\"bogav\") == \"BOGAV\"", "assert is_upper(\"pfpaik\") == \"PFPAIK\"", "assert is_upper(\"mcvzkhy\") == \"MCVZKHY\"", "assert is_upper(\"jwzwtk\") == \"JWZWTK\"", "assert is_upper(\"hbpgoea\") == \"HBPGOEA\"", "assert is_upper(\"jokte\") == \"JOKTE\"", "assert is_upper(\"pvhcyq\") == \"PVHCYQ\"", "assert is_upper(\"yhprf\") == \"YHPRF\"", "assert is_upper(\"eyoufd\") == \"EYOUFD\"", "assert is_upper(\"jte\") == \"JTE\"", "assert is_upper(\"agwwtgmjs\") == \"AGWWTGMJS\"", "assert is_upper(\"wzi\") == \"WZI\"", "assert is_upper(\"lpgixztra\") == \"LPGIXZTRA\"", "assert is_upper(\"tcce\") == \"TCCE\"", "assert is_upper(\"koihqdc\") == \"KOIHQDC\"", "assert is_upper(\"smrecfe\") == \"SMRECFE\"", "assert is_upper(\"ecv\") == \"ECV\"", "assert is_upper(\"kmbkb\") == \"KMBKB\"", "assert is_upper(\"optnaft\") == \"OPTNAFT\"", "assert is_upper(\"djrrxk\") == \"DJRRXK\"", "assert is_upper(\"FTINLiG\") == \"FTINLIG\"", "assert is_upper(\"UkiGwlFT\") == \"UKIGWLFT\"", "assert is_upper(\"AJky\") == \"AJKY\"", "assert is_upper(\"EDPh\") == \"EDPH\"", "assert is_upper(\"JIoUshJ\") == \"JIOUSHJ\"", "assert is_upper(\"POZCX\") == \"POZCX\"", "assert is_upper(\"dwLWMNp\") == \"DWLWMNP\"", "assert is_upper(\"RJznyUgEQ\") == \"RJZNYUGEQ\"", "assert is_upper(\"TAmzJAz\") == \"TAMZJAZ\"", "assert is_upper(\"cuyNJa\") == \"CUYNJA\"", "assert is_upper(\"aVf\") == \"AVF\"", "assert is_upper(\"tpdqBmenL\") == \"TPDQBMENL\"", "assert is_upper(\"KWVsedy\") == \"KWVSEDY\"", "assert is_upper(\"RLcsP\") == \"RLCSP\"", "assert is_upper(\"nXl\") == \"NXL\"", "assert is_upper(\"OJiLNCRkK\") == \"OJILNCRKK\"", "assert is_upper(\"jTsQFoXQ\") == \"JTSQFOXQ\"", "assert is_upper(\"TkdmCUEsj\") == \"TKDMCUESJ\"", "assert is_upper(\"bvTSi\") == \"BVTSI\"", "assert is_upper(\"hWGBIaiVe\") == \"HWGBIAIVE\"", "assert is_upper(\"NYwLKy\") == \"NYWLKY\"", "assert is_upper(\"GUfTkFo\") == \"GUFTKFO\"", "assert is_upper(\"kRILGLeh\") == \"KRILGLEH\"", "assert is_upper(\"NNEYvC\") == \"NNEYVC\"", "assert is_upper(\"MyOdEm\") == \"MYODEM\"", "assert is_upper(\"GlOVfi\") == \"GLOVFI\"", "assert is_upper(\"cHQElAr\") == \"CHQELAR\"", "assert is_upper(\"gziX\") == \"GZIX\"", "assert is_upper(\"Hwus\") == \"HWUS\"", "assert is_upper(\"glRz\") == \"GLRZ\"", "assert is_upper(\"SINilj\") == \"SINILJ\"", "assert is_upper(\"Hop\") == \"HOP\"", "assert is_upper(\"nnEhr\") == \"NNEHR\""], "entry_point": "is_upper", "repair_prompt": ["Write a python function is_upper to convert a given string to uppercase.\nis_upper(\"person\") ==\"PERSON\"\n"], "completions": ["from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Converts the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The converted uppercase string.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    return input_string.upper()\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    return input_string.upper()\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The converted uppercase string.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    return input_string.upper()\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(is_upper(\"hello\"))  # Expected output: \"HELLO\"\n        print(is_upper(\"world\"))  # Expected output: \"WORLD\"\n        print(is_upper(123))      # Expected to raise TypeError\n    except TypeError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    # Convert the input string to uppercase using the built-in method\n    return input_string.upper()\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test cases to demonstrate the function usage\n    print(is_upper(\"person\"))  # Expected output: \"PERSON\"\n    print(is_upper(\"\"))        # Expected output: \"\"\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The input string converted to uppercase.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    return input_string.upper()\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Convert the input string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The converted uppercase string.\n    \"\"\"\n    return input_string.upper()\n\ndef main():\n    # Example usage of the is_upper function\n    test_string = \"Hello, World!\"\n    print(is_upper(test_string))  # Expected output: \"HELLO, WORLD!\"\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n\n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(input_string, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    return input_string.upper()\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"Convert the input string to uppercase.\n\n    This function takes a string as input and returns a new string\n    where all the alphabetic characters have been converted to uppercase.\n    Non-alphabetic characters remain unchanged.\n\n    Args:\n        input_string (str): The string to be converted.\n\n    Returns:\n        str: The converted uppercase string.\n    \"\"\"\n    return input_string.upper()\n\n# Example usage:\n# result = is_upper('person')\n# print(result)  # Output: 'PERSON'\n#\n# result = is_upper('')\n# print(result)  # Output: ''\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Convert the given string to uppercase.\n\n    This function uses Python's built-in str.upper() method to convert\n    all alphabetic characters in the input string to uppercase. Non-alphabetic\n    characters are retained in their original form.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The converted uppercase string.\n    \"\"\"\n    return input_string.upper()\n", "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Converts the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The converted uppercase string.\n\n    Example:\n    >>> is_upper('person')\n    'PERSON'\n\n    Edge Cases:\n    >>> is_upper('')\n    ''\n    \"\"\"\n    return input_string.upper()\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, ensuring it handles various string inputs efficiently and accurately.\nrequirement pool:\n- Implement the main function to convert strings to uppercase\n- Ensure the function handles empty strings gracefully\n- Optimize the function for performance with large strings\n- Include error handling for non-string inputs\n- Document the function usage and edge cases\nWe will implement a simple function using Python's built-in str.upper() method, which is highly efficient and accurate for converting strings to uppercase. This method handles empty strings gracefully and performs well with large strings. We will ensure the function checks for non-string inputs and raises appropriate errors.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, ensuring it handles typical edge cases such as empty strings or non-alphabetic characters.\nrequirement pool:\n- Implement the main function to convert strings to uppercase\n- Ensure the function handles empty strings gracefully\n- Optimize for performance with large strings\n- Include error handling for non-string inputs\n- Provide documentation and examples for usage\nWe will implement a simple function using Python's built-in str.upper() method, which is efficient and handles edge cases like empty strings. This approach ensures high performance and ease of integration into existing projects. We will also include error handling for non-string inputs to make the function robust.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, similar to Python's built-in str.upper() method. The function should be simple, efficient, and compatible with various Python versions.\nrequirement pool:\n- Implement the is_upper function to convert strings to uppercase\n- Ensure compatibility with Python 3.x versions\n- Provide documentation and usage examples\n- Optimize for performance in large-scale applications\n- Include error handling for non-string inputs\nWe will implement a simple function using Python's built-in str.upper() method to convert strings to uppercase. This approach ensures efficiency and compatibility with various Python versions. We will also include error handling for non-string inputs and provide documentation with usage examples.\n", "requirement analysis:\nThe requirement is to create a function that converts a given string to uppercase. The function should be simple, efficient, and handle edge cases such as empty strings. It should be compatible with Python 3.x versions.\nrequirement pool:\n- Implement the main function to convert strings to uppercase\n- Ensure compatibility with Python 3.x\n- Handle edge cases like empty strings\n- Provide documentation for the function\n- Optimize for performance\nWe will implement a simple function using Python's built-in string method to convert a given string to uppercase. This approach ensures compatibility with Python 3.x and handles edge cases like empty strings efficiently. The function will be documented to explain its usage and edge cases.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, similar to the built-in str.upper() method. The function should be straightforward, efficient, and compatible with various Python versions.\nrequirement pool:\n- Implement the is_upper function to convert strings to uppercase\n- Ensure compatibility with Python 3.x versions\n- Provide documentation and examples for usage\n- Optimize for performance with large strings\n- Include error handling for non-string inputs\nWe will implement a simple function named is_upper that utilizes Python's built-in str.upper() method to convert a given string to uppercase. This approach ensures compatibility with all Python 3.x versions and leverages the efficiency of the built-in method. We will also include error handling to manage non-string inputs gracefully.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, ensuring it handles typical edge cases like empty strings and non-alphabetic characters.\nrequirement pool:\n- Implement the main function to convert strings to uppercase\n- Ensure the function handles empty strings gracefully\n- Optimize the function for performance with large strings\n- Provide clear documentation for the function\n- Include unit tests to verify functionality\nWe will implement a simple function using Python's built-in str.upper() method, which is efficient and handles edge cases like empty strings and non-alphabetic characters by leaving them unchanged. This approach ensures optimal performance even for large strings and maintains simplicity for easy integration into existing projects.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, similar to the built-in str.upper() method. The function should be simple, efficient, and handle various string inputs without errors.\nrequirement pool:\n- Implement the is_upper function to convert strings to uppercase.\n- Ensure compatibility with Python 3.x versions.\n- Provide documentation and examples for using the function.\n- Optimize the function for performance.\n- Include error handling for non-string inputs.\nWe will implement a simple function named is_upper that utilizes Python's built-in str.upper() method to convert a string to uppercase. This approach ensures efficiency and compatibility with various Python versions. We will also include error handling to manage non-string inputs by raising a TypeError.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase, ensuring it handles typical edge cases such as empty strings or non-alphabetic characters.\nrequirement pool:\n- Implement the main function to convert strings to uppercase\n- Ensure the function handles empty strings gracefully\n- Optimize the function for performance with large strings\n- Provide documentation for easy integration\n- Include test cases for various string inputs\nWe will implement a simple function using Python's built-in str.upper() method, which is efficient and handles edge cases like empty strings and non-alphabetic characters seamlessly. This approach ensures optimal performance even for large strings and maintains simplicity for easy integration into existing projects.\n", "requirement analysis:\nThe requirement is to create a function that converts a given string to uppercase, ensuring it handles typical edge cases like empty strings and non-alphabetic characters efficiently.\nrequirement pool:\n- Implement the main function to convert strings to uppercase\n- Optimize the function for performance with large strings\n- Ensure the function handles edge cases like empty strings\n- Provide documentation for easy integration\n- Test the function with various input scenarios\nWe will implement a simple function using Python's built-in str.upper() method, which is efficient and handles edge cases like empty strings and non-alphabetic characters by converting only alphabetic characters to uppercase. This approach ensures simplicity and optimal performance for large strings.\n", "requirement analysis:\nThe requirement is to create a function that converts any given string to uppercase. The function should be straightforward, efficient, and handle edge cases such as empty strings or non-string inputs gracefully.\nrequirement pool:\n- Implement the is_upper function to convert strings to uppercase\n- Ensure compatibility with different Python versions\n- Handle edge cases like empty strings\n- Provide documentation for the function\n- Optimize for performance\nWe will implement a simple function using Python's built-in string method `str.upper()`, which is efficient and compatible with different Python versions. This method handles edge cases like empty strings gracefully. We will also provide documentation with examples to ensure usability.\n"], "test": ["def check(is_upper):\n\tassert is_upper(\"person\") ==\"PERSON\"", "def check(is_upper):\n\tassert is_upper(\"final\") == \"FINAL\"", "def check(is_upper):\n\tassert is_upper(\"Valid\") == \"VALID\"", "def check(is_upper):\n\tassert is_upper(\"uuzfbweeukl\") == \"UUZFBWEEUKL\"", "def check(is_upper):\n\tassert is_upper(\"ywmgedilupbs\") == \"YWMGEDILUPBS\"", "def check(is_upper):\n\tassert is_upper(\"ewhkqxebci\") == \"EWHKQXEBCI\"", "def check(is_upper):\n\tassert is_upper(\"eqdhuv\") == \"EQDHUV\"", "def check(is_upper):\n\tassert is_upper(\"wscfohka\") == \"WSCFOHKA\"", "def check(is_upper):\n\tassert is_upper(\"srzw\") == \"SRZW\"", "def check(is_upper):\n\tassert is_upper(\"ciamt\") == \"CIAMT\"", "def check(is_upper):\n\tassert is_upper(\"sjpuysyvk\") == \"SJPUYSYVK\"", "def check(is_upper):\n\tassert is_upper(\"sefv\") == \"SEFV\"", "def check(is_upper):\n\tassert is_upper(\"fjrx\") == \"FJRX\"", "def check(is_upper):\n\tassert is_upper(\"rbteuroemgno\") == \"RBTEUROEMGNO\"", "def check(is_upper):\n\tassert is_upper(\"smach\") == \"SMACH\"", "def check(is_upper):\n\tassert is_upper(\"utys\") == \"UTYS\"", "def check(is_upper):\n\tassert is_upper(\"xqupm\") == \"XQUPM\"", "def check(is_upper):\n\tassert is_upper(\"dumsxuk\") == \"DUMSXUK\"", "def check(is_upper):\n\tassert is_upper(\"ocajjdws\") == \"OCAJJDWS\"", "def check(is_upper):\n\tassert is_upper(\"amgcxce\") == \"AMGCXCE\"", "def check(is_upper):\n\tassert is_upper(\"ymxizas\") == \"YMXIZAS\"", "def check(is_upper):\n\tassert is_upper(\"pdmkfocsdul\") == \"PDMKFOCSDUL\"", "def check(is_upper):\n\tassert is_upper(\"lauqljbfpvzh\") == \"LAUQLJBFPVZH\"", "def check(is_upper):\n\tassert is_upper(\"dbhkpqvk\") == \"DBHKPQVK\"", "def check(is_upper):\n\tassert is_upper(\"ldtwqldat\") == \"LDTWQLDAT\"", "def check(is_upper):\n\tassert is_upper(\"apxhdakjgq\") == \"APXHDAKJGQ\"", "def check(is_upper):\n\tassert is_upper(\"udfyuiqvpnyq\") == \"UDFYUIQVPNYQ\"", "def check(is_upper):\n\tassert is_upper(\"wbvwqlby\") == \"WBVWQLBY\"", "def check(is_upper):\n\tassert is_upper(\"rovienawtorg\") == \"ROVIENAWTORG\"", "def check(is_upper):\n\tassert is_upper(\"dahqfebsl\") == \"DAHQFEBSL\"", "def check(is_upper):\n\tassert is_upper(\"xkjmrzvqs\") == \"XKJMRZVQS\"", "def check(is_upper):\n\tassert is_upper(\"akrqlojti\") == \"AKRQLOJTI\"", "def check(is_upper):\n\tassert is_upper(\"qar\") == \"QAR\"", "def check(is_upper):\n\tassert is_upper(\"fstyjqbrjw\") == \"FSTYJQBRJW\"", "def check(is_upper):\n\tassert is_upper(\"hsiziebehdn\") == \"HSIZIEBEHDN\"", "def check(is_upper):\n\tassert is_upper(\"ycj\") == \"YCJ\"", "def check(is_upper):\n\tassert is_upper(\"ntitvfuu\") == \"NTITVFUU\"", "def check(is_upper):\n\tassert is_upper(\"ywp\") == \"YWP\"", "def check(is_upper):\n\tassert is_upper(\"dqdyh\") == \"DQDYH\"", "def check(is_upper):\n\tassert is_upper(\"spldfng\") == \"SPLDFNG\"", "def check(is_upper):\n\tassert is_upper(\"cxicuqhb\") == \"CXICUQHB\"", "def check(is_upper):\n\tassert is_upper(\"ldqzcqdat\") == \"LDQZCQDAT\"", "def check(is_upper):\n\tassert is_upper(\"xciboc\") == \"XCIBOC\"", "def check(is_upper):\n\tassert is_upper(\"lyhe\") == \"LYHE\"", "def check(is_upper):\n\tassert is_upper(\"mxu\") == \"MXU\"", "def check(is_upper):\n\tassert is_upper(\"rwelfax\") == \"RWELFAX\"", "def check(is_upper):\n\tassert is_upper(\"qjqbhq\") == \"QJQBHQ\"", "def check(is_upper):\n\tassert is_upper(\"lovatghvm\") == \"LOVATGHVM\"", "def check(is_upper):\n\tassert is_upper(\"qvj\") == \"QVJ\"", "def check(is_upper):\n\tassert is_upper(\"bogav\") == \"BOGAV\"", "def check(is_upper):\n\tassert is_upper(\"pfpaik\") == \"PFPAIK\"", "def check(is_upper):\n\tassert is_upper(\"mcvzkhy\") == \"MCVZKHY\"", "def check(is_upper):\n\tassert is_upper(\"jwzwtk\") == \"JWZWTK\"", "def check(is_upper):\n\tassert is_upper(\"hbpgoea\") == \"HBPGOEA\"", "def check(is_upper):\n\tassert is_upper(\"jokte\") == \"JOKTE\"", "def check(is_upper):\n\tassert is_upper(\"pvhcyq\") == \"PVHCYQ\"", "def check(is_upper):\n\tassert is_upper(\"yhprf\") == \"YHPRF\"", "def check(is_upper):\n\tassert is_upper(\"eyoufd\") == \"EYOUFD\"", "def check(is_upper):\n\tassert is_upper(\"jte\") == \"JTE\"", "def check(is_upper):\n\tassert is_upper(\"agwwtgmjs\") == \"AGWWTGMJS\"", "def check(is_upper):\n\tassert is_upper(\"wzi\") == \"WZI\"", "def check(is_upper):\n\tassert is_upper(\"lpgixztra\") == \"LPGIXZTRA\"", "def check(is_upper):\n\tassert is_upper(\"tcce\") == \"TCCE\"", "def check(is_upper):\n\tassert is_upper(\"koihqdc\") == \"KOIHQDC\"", "def check(is_upper):\n\tassert is_upper(\"smrecfe\") == \"SMRECFE\"", "def check(is_upper):\n\tassert is_upper(\"ecv\") == \"ECV\"", "def check(is_upper):\n\tassert is_upper(\"kmbkb\") == \"KMBKB\"", "def check(is_upper):\n\tassert is_upper(\"optnaft\") == \"OPTNAFT\"", "def check(is_upper):\n\tassert is_upper(\"djrrxk\") == \"DJRRXK\"", "def check(is_upper):\n\tassert is_upper(\"FTINLiG\") == \"FTINLIG\"", "def check(is_upper):\n\tassert is_upper(\"UkiGwlFT\") == \"UKIGWLFT\"", "def check(is_upper):\n\tassert is_upper(\"AJky\") == \"AJKY\"", "def check(is_upper):\n\tassert is_upper(\"EDPh\") == \"EDPH\"", "def check(is_upper):\n\tassert is_upper(\"JIoUshJ\") == \"JIOUSHJ\"", "def check(is_upper):\n\tassert is_upper(\"POZCX\") == \"POZCX\"", "def check(is_upper):\n\tassert is_upper(\"dwLWMNp\") == \"DWLWMNP\"", "def check(is_upper):\n\tassert is_upper(\"RJznyUgEQ\") == \"RJZNYUGEQ\"", "def check(is_upper):\n\tassert is_upper(\"TAmzJAz\") == \"TAMZJAZ\"", "def check(is_upper):\n\tassert is_upper(\"cuyNJa\") == \"CUYNJA\"", "def check(is_upper):\n\tassert is_upper(\"aVf\") == \"AVF\"", "def check(is_upper):\n\tassert is_upper(\"tpdqBmenL\") == \"TPDQBMENL\"", "def check(is_upper):\n\tassert is_upper(\"KWVsedy\") == \"KWVSEDY\"", "def check(is_upper):\n\tassert is_upper(\"RLcsP\") == \"RLCSP\"", "def check(is_upper):\n\tassert is_upper(\"nXl\") == \"NXL\"", "def check(is_upper):\n\tassert is_upper(\"OJiLNCRkK\") == \"OJILNCRKK\"", "def check(is_upper):\n\tassert is_upper(\"jTsQFoXQ\") == \"JTSQFOXQ\"", "def check(is_upper):\n\tassert is_upper(\"TkdmCUEsj\") == \"TKDMCUESJ\"", "def check(is_upper):\n\tassert is_upper(\"bvTSi\") == \"BVTSI\"", "def check(is_upper):\n\tassert is_upper(\"hWGBIaiVe\") == \"HWGBIAIVE\"", "def check(is_upper):\n\tassert is_upper(\"NYwLKy\") == \"NYWLKY\"", "def check(is_upper):\n\tassert is_upper(\"GUfTkFo\") == \"GUFTKFO\"", "def check(is_upper):\n\tassert is_upper(\"kRILGLeh\") == \"KRILGLEH\"", "def check(is_upper):\n\tassert is_upper(\"NNEYvC\") == \"NNEYVC\"", "def check(is_upper):\n\tassert is_upper(\"MyOdEm\") == \"MYODEM\"", "def check(is_upper):\n\tassert is_upper(\"GlOVfi\") == \"GLOVFI\"", "def check(is_upper):\n\tassert is_upper(\"cHQElAr\") == \"CHQELAR\"", "def check(is_upper):\n\tassert is_upper(\"gziX\") == \"GZIX\"", "def check(is_upper):\n\tassert is_upper(\"Hwus\") == \"HWUS\"", "def check(is_upper):\n\tassert is_upper(\"glRz\") == \"GLRZ\"", "def check(is_upper):\n\tassert is_upper(\"SINilj\") == \"SINILJ\"", "def check(is_upper):\n\tassert is_upper(\"Hop\") == \"HOP\"", "def check(is_upper):\n\tassert is_upper(\"nnEhr\") == \"NNEHR\""], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_upper(input_string: str) -> str:\n    \"\"\"\n    Converts the given string to uppercase.\n\n    Parameters:\n    input_string (str): The string to be converted.\n\n    Returns:\n    str: The converted uppercase string.\n\n    Example:\n    >>> is_upper('person')\n    'PERSON'\n\n    Edge Cases:\n    >>> is_upper('')\n    ''\n    \"\"\"\n    return input_string.upper()\n", "passed": true, "pass": true, "pass_num": 10, "round": 822, "mutate_method": "condense_two2one", "parent_index": 199}
