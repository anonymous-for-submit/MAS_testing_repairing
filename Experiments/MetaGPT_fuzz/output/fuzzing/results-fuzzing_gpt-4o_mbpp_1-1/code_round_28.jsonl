{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 80, "prompt": "Write a function to find the nth tetrahedral number. Ensure your solution is efficient for large values of n.", "code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(11) == 286.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(1) == 1.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(12) == 364.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(5) == 35.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(11) == 286.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(7) == 84.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(10) == 220.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(8) == 120.0", "assert tetrahedral_number(4) == 20.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(6) == 56.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(9) == 165.0", "assert tetrahedral_number(2) == 4.0", "assert tetrahedral_number(3) == 10.0", "assert tetrahedral_number(7) == 84.0"], "entry_point": "tetrahedral_number", "repair_prompt": ["Write a function tetrahedral_number to find the nth tetrahedral number. Ensure your solution is efficient for large values of n.\ntetrahedral_number(5) == 35.0\n"], "completions": ["from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n    float: The nth tetrahedral number.\n    \"\"\"\n    # Calculate the tetrahedral number using the formula\n    result = n * (n + 1) * (n + 2) / 6\n    \n    # Return the result as a float\n    return float(result)\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6.\n    \n    This function computes the nth tetrahedral number, which is a figurate number representing a pyramid\n    with a triangular base and three sides (a tetrahedron). The formula used is efficient and involves\n    simple arithmetic operations.\n\n    Args:\n        n (int): The term of the tetrahedral number sequence to calculate.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    # Calculate the nth tetrahedral number using the formula\n    tetrahedral_value = n * (n + 1) * (n + 2) / 6\n    return tetrahedral_value\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    n = 5\n    result = tetrahedral_number(n)\n    print(f\"The {n}th tetrahedral number is: {result}\")\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6.\n\n    Parameters:\n    n (int): The term of the tetrahedral number sequence to calculate.\n\n    Returns:\n    float: The nth tetrahedral number.\n    \"\"\"\n    # Calculate the nth tetrahedral number using the formula\n    tetrahedral_num = n * (n + 1) * (n + 2) / 6\n    return tetrahedral_num\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    n = 5\n    result = tetrahedral_number(n)\n    print(f\"The {n}th tetrahedral number is: {result}\")\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number using the formula T(n) = n*(n+1)*(n+2)/6.\n    \n    This function computes the nth tetrahedral number, which is a figurate number\n    representing a pyramid with a triangular base and three sides (a tetrahedron).\n    \n    Args:\n        n (int): The position of the tetrahedral number to calculate.\n        \n    Returns:\n        float: The nth tetrahedral number.\n        \n    Raises:\n        ValueError: If n is negative, as tetrahedral numbers are not defined for negative indices.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The position n must be a non-negative integer.\")\n    \n    # Calculate the nth tetrahedral number using the formula\n    tetrahedral_num = n * (n + 1) * (n + 2) / 6\n    return float(tetrahedral_num)\n\n# Example usage:\n# result = tetrahedral_number(5)\n# print(result)  # Output: 35.0\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number using the formula:\n    T(n) = n * (n + 1) * (n + 2) / 6\n\n    Args:\n        n (int): The term of the tetrahedral number sequence to calculate.\n\n    Returns:\n        float: The nth tetrahedral number.\n    \"\"\"\n    # Calculate the nth tetrahedral number using the given formula\n    tetrahedral_value = n * (n + 1) * (n + 2) / 6\n    return tetrahedral_value\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    n = 5\n    result = tetrahedral_number(n)\n    print(f\"The {n}th tetrahedral number is: {result}\")\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The term of the tetrahedral number sequence to calculate.\n\n    Returns:\n    float: The nth tetrahedral number.\n    \"\"\"\n    # Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6\n    tetrahedral_num = n * (n + 1) * (n + 2) / 6\n    return float(tetrahedral_num)\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    n = 5\n    result = tetrahedral_number(n)\n    print(f\"The {n}th tetrahedral number is: {result}\")\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The term of the tetrahedral number sequence to calculate.\n\n    Returns:\n    float: The nth tetrahedral number.\n    \"\"\"\n    # Validate input\n    if n < 0:\n        raise ValueError(\"The term 'n' must be a non-negative integer.\")\n\n    # Calculate the nth tetrahedral number using the formula\n    tetrahedral_num = n * (n + 1) * (n + 2) / 6\n\n    return tetrahedral_num\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        n = 5  # Example input\n        result = tetrahedral_number(n)\n        print(f\"The {n}th tetrahedral number is: {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number.\n\n    This function uses the formula for tetrahedral numbers:\n    T(n) = n * (n + 1) * (n + 2) / 6. It computes the result\n    in constant time O(1).\n\n    Args:\n        n (int): The term of the tetrahedral number sequence to calculate.\n                 Must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If n is not a non-negative integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Calculate the nth tetrahedral number using the formula\n    tetrahedral = n * (n + 1) * (n + 2) / 6\n\n    return float(tetrahedral)\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6.\n\n    This function computes the nth tetrahedral number, which is a figurate number representing a pyramid\n    with a triangular base and three sides (a tetrahedron). The formula used is efficient and directly\n    calculates the result using arithmetic operations.\n\n    Args:\n        n (int): The position of the tetrahedral number to calculate. Must be a non-negative integer.\n\n    Returns:\n        float: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n\n    # Calculate the nth tetrahedral number using the formula\n    tetrahedral = n * (n + 1) * (n + 2) / 6\n    return float(tetrahedral)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        n = 5  # Example input\n        result = tetrahedral_number(n)\n        print(f\"The {n}th tetrahedral number is: {result}\")\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6.\n\n    This function calculates the nth tetrahedral number, which is a figurate number that represents a pyramid with a triangular base and three sides (a tetrahedron).\n    \n    Parameters:\n    n (int): The position of the tetrahedral number to calculate. Must be a non-negative integer.\n\n    Returns:\n    float: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6.0\n\n# Example usage:\n# print(tetrahedral_number(3))  # Output: 10.0\n"], "plans": ["requirement analysis:\nThe function should efficiently compute the nth tetrahedral number using a formula that scales well with large values of n. It should be accurate and provide results in a format that is easy to understand.\nrequirement pool:\n- Implement efficient algorithm for tetrahedral number calculation\n- Ensure accuracy of results for large n\n- Provide clear documentation and examples\n- Integrate function into larger mathematical software\n- Enhance user interface for better understanding\nWe will use the mathematical formula for tetrahedral numbers, which is T(n) = n * (n + 1) * (n + 2) / 6. This formula is efficient and scales well for large values of n. We will ensure the result is returned as a float to maintain consistency with the example provided.\n", "requirement analysis:\nThe function should efficiently compute the nth tetrahedral number using a formula that scales well with large values of n. It should be easy to integrate into other mathematical software and provide accurate results.\nrequirement pool:\n- Efficient computation for large n\n- Accurate mathematical results\n- Clear documentation for user understanding\n- Easy integration into other software\n- Examples for educational purposes\nWe will use a formula-based approach to compute the nth tetrahedral number. The formula for the nth tetrahedral number is T(n) = n * (n + 1) * (n + 2) / 6. This approach is efficient for large values of n as it involves simple arithmetic operations and avoids iterative or recursive calculations.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the nth tetrahedral number efficiently, especially for large values of n. The function should be optimized for performance and accuracy, ensuring it can handle large inputs without significant delays.\nrequirement pool:\n- Develop an efficient algorithm for calculating tetrahedral numbers\n- Ensure the function handles large values of n accurately\n- Provide clear documentation and examples for user understanding\n- Integrate the function into larger mathematical software\n- Test the function with various inputs to ensure reliability\nWe will use a formula-based approach to calculate the nth tetrahedral number. The formula for the nth tetrahedral number is T(n) = n * (n + 1) * (n + 2) / 6. This approach is efficient and can handle large values of n due to its constant time complexity O(1). We will use Python's built-in arithmetic operations to ensure accuracy and performance.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth tetrahedral number efficiently, especially for large values of n. This involves understanding the mathematical formula for tetrahedral numbers and implementing it in a way that minimizes computational complexity.\nrequirement pool:\n- Implement the tetrahedral number calculation using an efficient algorithm\n- Ensure the function handles large values of n without performance degradation\n- Provide clear documentation and examples for user understanding\n- Integrate the function into a larger mathematical library\n- Test the function with various inputs to ensure accuracy\nWe will implement the tetrahedral number calculation using the mathematical formula T(n) = n*(n+1)*(n+2)/6, which is efficient for large values of n due to its constant time complexity. This approach ensures computational efficiency and accuracy.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the nth tetrahedral number efficiently, especially for large values of n. This involves understanding the mathematical formula for tetrahedral numbers and implementing it in a way that minimizes computational complexity.\nrequirement pool:\n- Implement the tetrahedral number calculation using an efficient algorithm\n- Ensure the function handles large values of n without performance degradation\n- Provide clear documentation and examples for user understanding\n- Integrate the function into a larger mathematical library\n- Test the function with a variety of inputs to ensure accuracy\nWe will implement the tetrahedral number calculation using the mathematical formula T(n) = n * (n + 1) * (n + 2) / 6, which is efficient for large values of n due to its constant time complexity. This approach leverages Python's ability to handle large integers natively, ensuring accuracy and performance.\n", "requirement analysis:\nThe function should efficiently compute the nth tetrahedral number using a formula that scales well with large values of n. It should be easy to integrate into other mathematical applications and provide accurate results.\nrequirement pool:\n- Implement the formula for tetrahedral numbers efficiently\n- Ensure the function handles large values of n without performance issues\n- Provide clear documentation and examples for user understanding\n- Integrate the function into larger mathematical software\n- Test the function with various inputs to ensure accuracy\nWe will implement the formula for the nth tetrahedral number using the mathematical formula T(n) = n * (n + 1) * (n + 2) / 6. This formula is efficient and scales well with large values of n. We will use Python's built-in integer type, which can handle arbitrarily large numbers, ensuring that the function performs well even for large inputs.\n", "requirement analysis:\nThe requirement is to develop a function that calculates the nth tetrahedral number efficiently, especially for large values of n. The function should be optimized for performance and accuracy, ensuring it can handle large inputs without significant delay.\nrequirement pool:\n- Develop the main function to calculate tetrahedral numbers\n- Optimize the function for large input values\n- Ensure the function returns accurate results\n- Provide documentation and examples for user understanding\n- Integrate the function into larger mathematical software\nWe will implement a function to calculate the nth tetrahedral number using a mathematical formula that ensures efficiency even for large values of n. The formula for the nth tetrahedral number is T(n) = n * (n + 1) * (n + 2) / 6. This formula allows for direct computation without iterative loops, making it efficient for large inputs.\n", "requirement analysis:\nThe function should efficiently compute the nth tetrahedral number using a formula that scales well with large values of n. It should be accurate and provide results in a format that is easy to understand.\nrequirement pool:\n- Implement the formula for tetrahedral numbers\n- Optimize the function for large values of n\n- Ensure the function returns results in floating-point format\n- Include error handling for invalid inputs\n- Provide documentation and examples for educational purposes\nWe will implement the formula for tetrahedral numbers, which is T(n) = n * (n + 1) * (n + 2) / 6. This formula is efficient for large values of n as it directly computes the result in constant time O(1). We will ensure the function handles only integer inputs for n, as tetrahedral numbers are defined for non-negative integers. The function will return the result in floating-point format to meet the requirement.\n", "requirement analysis:\nThe function should efficiently compute the nth tetrahedral number using a formula that scales well with large values of n. It should be easy to integrate into other mathematical software and provide accurate results.\nrequirement pool:\n- Efficient computation for large n\n- Accurate mathematical results\n- Clear documentation for user understanding\n- Easy integration into other software\n- Examples to illustrate usage\nWe will use a formula-based approach to compute the nth tetrahedral number efficiently. The formula for the nth tetrahedral number is T(n) = n * (n + 1) * (n + 2) / 6. This approach is computationally efficient as it directly calculates the result using arithmetic operations, which scale well with large values of n.\n", "requirement analysis:\nThe function should efficiently compute the nth tetrahedral number using a formula that scales well with large values of n. It should be accurate and provide results in a format that is easy to understand.\nrequirement pool:\n- Implement efficient algorithm for tetrahedral number calculation\n- Ensure accuracy of results for all valid inputs\n- Provide clear documentation and examples\n- Optimize for integration into larger systems\n- Include error handling for invalid inputs\nWe will use the mathematical formula for tetrahedral numbers, which is T(n) = n * (n + 1) * (n + 2) / 6. This formula is efficient and scales well for large values of n, as it involves simple arithmetic operations. We will ensure the function returns a floating-point number to accommodate large results and provide accurate calculations.\n"], "test": ["def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(11) == 286.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(1) == 1.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(12) == 364.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(5) == 35.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(11) == 286.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(10) == 220.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(8) == 120.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(4) == 20.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(6) == 56.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(9) == 165.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(2) == 4.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(3) == 10.0", "def check(tetrahedral_number):\n\tassert tetrahedral_number(7) == 84.0"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef tetrahedral_number(n: int) -> float:\n    \"\"\"Calculate the nth tetrahedral number using the formula T(n) = n * (n + 1) * (n + 2) / 6.\n\n    This function calculates the nth tetrahedral number, which is a figurate number that represents a pyramid with a triangular base and three sides (a tetrahedron).\n    \n    Parameters:\n    n (int): The position of the tetrahedral number to calculate. Must be a non-negative integer.\n\n    Returns:\n    float: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    return n * (n + 1) * (n + 2) / 6.0\n\n# Example usage:\n# print(tetrahedral_number(3))  # Output: 10.0\n", "passed": true, "pass": true, "pass_num": 10, "round": 28, "mutate_method": "add_1_sentence_at_end", "parent_index": 28}
