{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 264, "prompt": "Create a function to determine a dog's age in dog years.", "code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "test_imports": [], "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109", "assert dog_age(17) == 81", "assert dog_age(14) == 69", "assert dog_age(9) == 49", "assert dog_age(8) == 45", "assert dog_age(11) == 57", "assert dog_age(12) == 61", "assert dog_age(10) == 53", "assert dog_age(12) == 61", "assert dog_age(7) == 41", "assert dog_age(14) == 69", "assert dog_age(7) == 41", "assert dog_age(9) == 49", "assert dog_age(17) == 81", "assert dog_age(8) == 45", "assert dog_age(15) == 73", "assert dog_age(12) == 61", "assert dog_age(16) == 77", "assert dog_age(8) == 45", "assert dog_age(11) == 57", "assert dog_age(16) == 77", "assert dog_age(17) == 81", "assert dog_age(12) == 61", "assert dog_age(7) == 41", "assert dog_age(11) == 57", "assert dog_age(14) == 69", "assert dog_age(17) == 81", "assert dog_age(14) == 69", "assert dog_age(16) == 77", "assert dog_age(15) == 73", "assert dog_age(11) == 57", "assert dog_age(12) == 61", "assert dog_age(10) == 53", "assert dog_age(16) == 77", "assert dog_age(13) == 65", "assert dog_age(14) == 69", "assert dog_age(18) == 85", "assert dog_age(20) == 93", "assert dog_age(19) == 89", "assert dog_age(10) == 53", "assert dog_age(16) == 77", "assert dog_age(16) == 77", "assert dog_age(13) == 65", "assert dog_age(11) == 57", "assert dog_age(19) == 89", "assert dog_age(17) == 81", "assert dog_age(19) == 89", "assert dog_age(20) == 93", "assert dog_age(19) == 89", "assert dog_age(15) == 73", "assert dog_age(13) == 65", "assert dog_age(10) == 53", "assert dog_age(18) == 85", "assert dog_age(15) == 73", "assert dog_age(17) == 81", "assert dog_age(18) == 85", "assert dog_age(12) == 61", "assert dog_age(17) == 81", "assert dog_age(17) == 81", "assert dog_age(18) == 85", "assert dog_age(18) == 85", "assert dog_age(16) == 77", "assert dog_age(11) == 57", "assert dog_age(14) == 69", "assert dog_age(11) == 57", "assert dog_age(16) == 77", "assert dog_age(16) == 77", "assert dog_age(22) == 101", "assert dog_age(25) == 113", "assert dog_age(20) == 93", "assert dog_age(24) == 109", "assert dog_age(23) == 105", "assert dog_age(24) == 109", "assert dog_age(19) == 89", "assert dog_age(28) == 125", "assert dog_age(26) == 117", "assert dog_age(26) == 117", "assert dog_age(20) == 93", "assert dog_age(20) == 93", "assert dog_age(23) == 105", "assert dog_age(25) == 113", "assert dog_age(28) == 125", "assert dog_age(26) == 117", "assert dog_age(20) == 93", "assert dog_age(28) == 125", "assert dog_age(26) == 117", "assert dog_age(23) == 105", "assert dog_age(20) == 93", "assert dog_age(25) == 113", "assert dog_age(29) == 129", "assert dog_age(27) == 121", "assert dog_age(29) == 129", "assert dog_age(22) == 101", "assert dog_age(25) == 113", "assert dog_age(23) == 105", "assert dog_age(29) == 129", "assert dog_age(20) == 93", "assert dog_age(26) == 117", "assert dog_age(29) == 129", "assert dog_age(19) == 89"], "entry_point": "dog_age", "repair_prompt": ["Create a function dog_age to determine a dog's age in dog years.\ndog_age(12)==61\n"], "completions": ["from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n\n    The conversion is based on the following widely accepted formula:\n    - The first two human years are equivalent to 21 dog years (10.5 years each).\n    - Each subsequent human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age in human years.\n\n    Returns:\n        int: Equivalent age in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# dog_age(12) should return 61\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"Convert human years to dog years.\n\n    This function uses a standard conversion formula for dog years:\n    - For the first two years, each human year is equivalent to 10.5 dog years.\n    - For each year after that, each human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 0:\n        return 0\n    elif human_years == 1:\n        return 10\n    elif human_years == 2:\n        return 21\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# dog_years = dog_age(5)\n# print(f\"The dog's age in dog years is: {dog_years}\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n    \n    Args:\n        human_years (int): Age of the dog in human years.\n        \n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Conversion rate based on the example provided: 12 human years equate to 61 dog years.\n    # Therefore, the conversion rate is 61 / 12.\n    conversion_rate = 61 / 12\n    \n    # Calculate dog years using the conversion rate.\n    dog_years = int(human_years * conversion_rate)\n    \n    return dog_years\n\n# Example usage:\n# If you call dog_age(12), it should return 61.\nif __name__ == \"__main__\":\n    example_human_years = 12\n    print(f\"{example_human_years} human years is equivalent to {dog_age(example_human_years)} dog years.\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n    \n    This function uses a piecewise conversion formula to convert human years to dog years.\n    The conversion is based on the example where 12 human years equate to 61 dog years.\n    \n    Args:\n        human_years (int): Age of the dog in human years.\n        \n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n    \n    # Conversion logic based on a piecewise function\n    if human_years <= 2:\n        # The first two human years are equivalent to 10.5 dog years each\n        dog_years = human_years * 10.5\n    else:\n        # After the first two years, each human year is equivalent to 4 dog years\n        dog_years = 21 + (human_years - 2) * 4\n    \n    return int(dog_years)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        human_years = 12\n        print(f\"{human_years} human years is approximately {dog_age(human_years)} dog years.\")\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n    \n    This function uses a linear conversion formula where 12 human years equate to 61 dog years.\n    The conversion factor is calculated based on this relationship.\n    \n    Args:\n        human_years (int): Age of the dog in human years.\n        \n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Conversion factor derived from the given relationship: 12 human years = 61 dog years\n    conversion_factor = 61 / 12\n    \n    # Calculate dog years using the conversion factor\n    dog_years = int(human_years * conversion_factor)\n    \n    return dog_years\n\n# Example usage:\n# dog_years = dog_age(12)\n# print(dog_years)  # Output should be 61\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n\n    This function uses a specific conversion formula where the first two human years\n    correspond to 21 dog years, and each subsequent human year corresponds to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 1:\n        # First human year corresponds to 10 dog years\n        return 10\n    elif human_years == 2:\n        # First two human years correspond to 21 dog years\n        return 21\n    else:\n        # First two human years are 21 dog years, each subsequent year is 4 dog years\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# dog_years = dog_age(5)\n# print(f\"The dog's age in dog years is: {dog_years}\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years.\n    \n    This function uses a linear conversion formula to convert human years to dog years.\n    Based on the example provided, the conversion factor is assumed to be 5.0833.\n    \n    Args:\n        human_years: Age of the dog in human years.\n        \n    Returns:\n        Age of the dog in dog years.\n    \"\"\"\n    # Conversion factor derived from the example: 12 human years = 61 dog years\n    conversion_factor = 5.0833\n    \n    # Calculate dog years using the conversion factor\n    dog_years = int(human_years * conversion_factor)\n    \n    return dog_years\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with an example input\n    example_human_years = 12\n    example_dog_years = dog_age(example_human_years)\n    print(f\"{example_human_years} human years is approximately {example_dog_years} dog years.\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years using a linear conversion formula.\n    \n    Args:\n        human_years (int): Age of the dog in human years.\n        \n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    # Conversion rate based on the example provided: 12 human years equals 61 dog years.\n    conversion_rate = 61 / 12\n    \n    # Calculate dog years using the conversion rate.\n    dog_years = int(human_years * conversion_rate)\n    \n    return dog_years\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test the function with the example provided.\n    example_human_years = 12\n    example_dog_years = dog_age(example_human_years)\n    print(f\"{example_human_years} human years is approximately {example_dog_years} dog years.\")\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"\n    Convert human years to dog years using a specific formula.\n    \n    The conversion is based on the example provided where 12 human years equate to 61 dog years.\n    This implies a conversion rate that we will derive and use in this function.\n    \n    Args:\n        human_years: Age of the dog in human years.\n        \n    Returns:\n        Age of the dog in dog years.\n    \"\"\"\n    # Derive the conversion rate from the example provided\n    # 12 human years = 61 dog years\n    # Conversion rate = 61 / 12\n    conversion_rate = 61 / 12\n    \n    # Calculate dog years using the derived conversion rate\n    dog_years = int(human_years * conversion_rate)\n    \n    return dog_years\n\n# Example usage:\n# dog_years = dog_age(12)\n# print(dog_years)  # Output should be 61\n", "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"Convert human years to dog years.\n\n    This function uses a widely accepted formula for converting human years to dog years.\n    The first two human years are equivalent to 10.5 dog years each, and each subsequent\n    human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 0:\n        return 0\n    elif human_years == 1:\n        return 10.5\n    elif human_years == 2:\n        return 21\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# dog_age_in_dog_years = dog_age(12)\n# print(dog_age_in_dog_years)  # Output: 61\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula or logic that needs to be implemented to achieve the expected result.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years.\n- Ensure the function handles edge cases, such as zero or negative input.\n- Document the function with clear usage instructions.\n- Optimize the function for performance with large inputs.\n- Include unit tests to verify the function's accuracy.\nWe will implement a simple function to convert human years to dog years using a common conversion formula. Typically, the first two human years are equivalent to 21 dog years (10.5 years each), and each subsequent human year is equivalent to 4 dog years. This approach is widely accepted and provides a reasonable approximation for most dog breeds.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula or method that needs to be determined.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Design a user-friendly interface for input and output.\n- Ensure the function performs efficiently for quick results.\n- Include additional information about dog life stages.\n- Provide options for different dog breeds if applicable.\nWe will implement a simple function using a standard conversion formula for dog years. The formula often used is: for the first two years, each human year is equivalent to 10.5 dog years, and for each year after that, each human year is equivalent to 4 dog years. This approach ensures accuracy and simplicity without needing to consider different breeds.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula or method that needs to be determined.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years.\n- Ensure the function is optimized for performance.\n- Design a user-friendly interface for input and output.\n- Include additional information about dog life stages.\n- Provide localization options for different regions.\nWe will implement a simple function called dog_age that converts human years to dog years using a standard conversion formula. The formula will be based on the example provided, where 12 human years equate to 61 dog years. This suggests a specific conversion rate, which we will apply to ensure accurate results. The function will be optimized for performance and designed to be user-friendly, allowing quick calculations without any complex interface.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts a dog's age from human years to dog years. The example provided suggests a specific conversion formula or method that needs to be determined.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years.\n- Ensure the function handles edge cases such as very young or very old ages.\n- Provide documentation or help text explaining the conversion method.\n- Optimize the function for performance to handle multiple calculations quickly.\n- Consider adding a feature to compare dog ages across different breeds.\nWe will implement a simple function called dog_age that converts human years to dog years using a specific conversion formula. The formula will be based on the example provided, where 12 human years equate to 61 dog years. This suggests a non-linear conversion, which we will implement using a piecewise function or a lookup table for accuracy. We will ensure the function is optimized for performance and can handle edge cases.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Design a simple user interface for input and output.\n- Ensure the function performs efficiently for quick results.\n- Include additional information about dog life stages.\n- Provide a mobile-friendly version of the tool.\nWe will implement a simple function named dog_age that converts human years to dog years using a specific conversion formula. Based on the example provided, we will assume a linear conversion where 12 human years equate to 61 dog years. This implies a conversion factor that we will calculate and apply to any input. We will use Python's built-in capabilities to ensure the function is efficient and easy to use.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function with accurate conversion.\n- Ensure the function is optimized for performance.\n- Design a user-friendly interface for input and output.\n- Include additional information about dog aging.\n- Provide breed-specific age conversion options.\nWe will implement a simple function called dog_age that converts human years to dog years using a specific conversion formula. Based on the example provided, we will assume a conversion formula where the first two human years correspond to 21 dog years, and each subsequent human year corresponds to 4 dog years. This approach ensures accuracy and simplicity, aligning with the product goals of providing a quick and reliable tool.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years accurately.\n- Ensure the function is optimized for performance.\n- Design a simple and intuitive interface for the function.\n- Include documentation for ease of integration.\n- Test the function with various inputs to ensure accuracy.\nWe will implement a simple function called dog_age that converts human years to dog years using a specific formula. Based on the example provided, we will assume a linear conversion formula. For simplicity and performance, we will not use any external libraries as the calculation is straightforward.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts a dog's age from human years to dog years. The example provided suggests a specific conversion formula or method that needs to be determined.\nrequirement pool:\n- Implement the dog_age function to convert human years to dog years.\n- Ensure the function is optimized for performance.\n- Design a user-friendly interface for input and output.\n- Include additional information about dog life stages.\n- Provide breed-specific age conversion options.\nWe will implement a simple function to convert human years to dog years using a linear conversion formula. Based on the example provided, we will assume a specific conversion rate that aligns with the given example (12 human years equals 61 dog years). This will ensure the function is both accurate and easy to use. We will not include breed-specific calculations at this stage to keep the interface simple and intuitive.\n", "requirement analysis:\nThe requirement is to create a function that accurately converts human years to dog years. The example provided suggests a specific conversion formula that needs to be implemented.\nrequirement pool:\n- Implement the dog age conversion function with the specified formula.\n- Ensure the function is optimized for performance.\n- Design a simple and intuitive interface for user interaction.\n- Include additional information about dog life stages.\n- Provide support for different dog breeds if applicable.\nWe will implement a simple function to convert human years to dog years using a specific formula. The example provided suggests that 12 human years equate to 61 dog years, which implies a specific conversion rate. We will use this example to derive the formula. The function will be optimized for performance and designed to be easily integrable into larger applications.\n", "requirement analysis:\nThe function should accurately convert human years to dog years using a reliable formula. It should be easy to use and provide results quickly.\nrequirement pool:\n- Accurate age conversion algorithm\n- User-friendly function interface\n- Optimized performance for quick calculations\n- Detailed documentation for user understanding\n- Compatibility with various Python versions\nWe will implement a simple function using a widely accepted formula for converting human years to dog years. A common approach is to consider the first two human years as equivalent to 10.5 dog years each, and each subsequent human year as equivalent to 4 dog years. This formula is both accurate and easy to understand, ensuring a user-friendly interface and quick calculations.\n"], "test": ["def check(dog_age):\n\tassert dog_age(12)==61", "def check(dog_age):\n\tassert dog_age(15)==73", "def check(dog_age):\n\tassert dog_age(24)==109", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(9) == 49", "def check(dog_age):\n\tassert dog_age(8) == 45", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(7) == 41", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(7) == 41", "def check(dog_age):\n\tassert dog_age(9) == 49", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(8) == 45", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(8) == 45", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(7) == 41", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(13) == 65", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(13) == 65", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(13) == 65", "def check(dog_age):\n\tassert dog_age(10) == 53", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(15) == 73", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(12) == 61", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(17) == 81", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(18) == 85", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(14) == 69", "def check(dog_age):\n\tassert dog_age(11) == 57", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(16) == 77", "def check(dog_age):\n\tassert dog_age(22) == 101", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(24) == 109", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(24) == 109", "def check(dog_age):\n\tassert dog_age(19) == 89", "def check(dog_age):\n\tassert dog_age(28) == 125", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(28) == 125", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(28) == 125", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(27) == 121", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(22) == 101", "def check(dog_age):\n\tassert dog_age(25) == 113", "def check(dog_age):\n\tassert dog_age(23) == 105", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(20) == 93", "def check(dog_age):\n\tassert dog_age(26) == 117", "def check(dog_age):\n\tassert dog_age(29) == 129", "def check(dog_age):\n\tassert dog_age(19) == 89"], "scores": [1.0, 1.0, 0.0686, 1.0, 0.0686, 1.0, 0.0, 0.0686, 0.0686, 1.0], "pass_results": [true, true, false, true, false, true, false, false, false, true], "pass_test_cases_num": [102, 102, 7, 102, 7, 102, 0, 7, 7, 102], "completion": "from typing import List\n## main.py\n\ndef dog_age(human_years: int) -> int:\n    \"\"\"Convert human years to dog years.\n\n    This function uses a widely accepted formula for converting human years to dog years.\n    The first two human years are equivalent to 10.5 dog years each, and each subsequent\n    human year is equivalent to 4 dog years.\n\n    Args:\n        human_years (int): Age of the dog in human years.\n\n    Returns:\n        int: Age of the dog in dog years.\n    \"\"\"\n    if human_years < 0:\n        raise ValueError(\"Age in human years cannot be negative.\")\n\n    if human_years == 0:\n        return 0\n    elif human_years == 1:\n        return 10.5\n    elif human_years == 2:\n        return 21\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Example usage:\n# dog_age_in_dog_years = dog_age(12)\n# print(dog_age_in_dog_years)  # Output: 61\n", "passed": true, "pass": true, "pass_num": 5, "round": 945, "mutate_method": "condense_two2one", "parent_index": 338}
