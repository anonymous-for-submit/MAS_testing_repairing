{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 282, "prompt": "Write a function to subtract two lists. Perform this subtraction element-wise.", "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]", "assert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "assert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "assert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "assert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "assert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "assert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "assert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "assert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "assert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "assert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "assert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "assert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "assert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "assert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "assert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "assert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "assert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "assert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "assert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "assert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "assert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "assert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "assert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "assert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "assert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "assert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "assert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "assert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "assert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "assert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "assert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "assert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "assert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "assert sub_list([5, 6], [4, 8]) == [1, -2]", "assert sub_list([2, 6], [3, 9]) == [-1, -3]", "assert sub_list([5, 3], [6, 2]) == [-1, 1]", "assert sub_list([3, 5], [3, 5]) == [0, 0]", "assert sub_list([4, 6], [3, 6]) == [1, 0]", "assert sub_list([6, 3], [7, 6]) == [-1, -3]", "assert sub_list([3, 2], [2, 6]) == [1, -4]", "assert sub_list([4, 6], [1, 1]) == [3, 5]", "assert sub_list([1, 2], [1, 1]) == [0, 1]", "assert sub_list([1, 3], [6, 8]) == [-5, -5]", "assert sub_list([2, 2], [7, 6]) == [-5, -4]", "assert sub_list([1, 6], [3, 6]) == [-2, 0]", "assert sub_list([3, 2], [3, 7]) == [0, -5]", "assert sub_list([2, 2], [4, 1]) == [-2, 1]", "assert sub_list([3, 2], [7, 7]) == [-4, -5]", "assert sub_list([4, 7], [8, 8]) == [-4, -1]", "assert sub_list([3, 6], [1, 6]) == [2, 0]", "assert sub_list([1, 7], [1, 6]) == [0, 1]", "assert sub_list([3, 3], [4, 7]) == [-1, -4]", "assert sub_list([3, 2], [8, 6]) == [-5, -4]", "assert sub_list([4, 1], [6, 2]) == [-2, -1]", "assert sub_list([6, 2], [6, 9]) == [0, -7]", "assert sub_list([2, 4], [2, 2]) == [0, 2]", "assert sub_list([3, 4], [5, 4]) == [-2, 0]", "assert sub_list([3, 7], [3, 8]) == [0, -1]", "assert sub_list([2, 5], [1, 3]) == [1, 2]", "assert sub_list([4, 6], [4, 2]) == [0, 4]", "assert sub_list([5, 6], [3, 4]) == [2, 2]", "assert sub_list([1, 6], [3, 9]) == [-2, -3]", "assert sub_list([6, 3], [3, 2]) == [3, 1]", "assert sub_list([2, 1], [5, 9]) == [-3, -8]", "assert sub_list([5, 1], [5, 5]) == [0, -4]", "assert sub_list([4, 6], [7, 7]) == [-3, -1]", "assert sub_list([88, 120], [55, 65]) == [33, 55]", "assert sub_list([85, 121], [45, 71]) == [40, 50]", "assert sub_list([92, 125], [46, 74]) == [46, 51]", "assert sub_list([93, 115], [50, 68]) == [43, 47]", "assert sub_list([90, 116], [45, 72]) == [45, 44]", "assert sub_list([88, 119], [51, 67]) == [37, 52]", "assert sub_list([91, 121], [47, 74]) == [44, 47]", "assert sub_list([94, 118], [53, 71]) == [41, 47]", "assert sub_list([89, 119], [51, 65]) == [38, 54]", "assert sub_list([85, 124], [48, 72]) == [37, 52]", "assert sub_list([89, 124], [53, 67]) == [36, 57]", "assert sub_list([90, 118], [50, 67]) == [40, 51]", "assert sub_list([85, 123], [54, 70]) == [31, 53]", "assert sub_list([85, 118], [48, 75]) == [37, 43]", "assert sub_list([91, 122], [45, 73]) == [46, 49]", "assert sub_list([90, 115], [47, 71]) == [43, 44]", "assert sub_list([89, 125], [55, 70]) == [34, 55]", "assert sub_list([89, 115], [50, 71]) == [39, 44]", "assert sub_list([94, 119], [45, 75]) == [49, 44]", "assert sub_list([89, 117], [46, 68]) == [43, 49]", "assert sub_list([90, 118], [54, 67]) == [36, 51]", "assert sub_list([90, 118], [53, 70]) == [37, 48]", "assert sub_list([88, 125], [54, 69]) == [34, 56]", "assert sub_list([92, 115], [49, 71]) == [43, 44]", "assert sub_list([86, 119], [50, 71]) == [36, 48]", "assert sub_list([85, 119], [48, 67]) == [37, 52]", "assert sub_list([93, 122], [54, 69]) == [39, 53]", "assert sub_list([93, 119], [49, 74]) == [44, 45]", "assert sub_list([88, 123], [46, 67]) == [42, 56]", "assert sub_list([90, 116], [50, 73]) == [40, 43]", "assert sub_list([93, 120], [46, 68]) == [47, 52]", "assert sub_list([85, 116], [53, 69]) == [32, 47]", "assert sub_list([86, 123], [46, 75]) == [40, 48]"], "entry_point": "sub_list", "repair_prompt": ["Write a function sub_list to subtract two lists. Perform this subtraction element-wise.\nsub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n"], "completions": ["from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    TypeError: If the input lists contain non-numeric data types.\n    \"\"\"\n    # Check if the lengths of the lists are equal\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Check if all elements in both lists are numeric\n    if not all(isinstance(x, (int, float)) for x in list1 + list2):\n        raise TypeError(\"Both lists must contain only numeric data types.\")\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    '''\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If either input is not a list or contains non-numeric elements.\n    '''\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise ValueError(\"List1 contains non-numeric elements.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"List2 contains non-numeric elements.\")\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Truncate longer list if necessary and perform element-wise subtraction\n    result = [list1[i] - list2[i] for i in range(min_length)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If lists are of different lengths or contain non-numeric elements.\n    \"\"\"\n    # Check if lists are of equal length\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length.\")\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over elements and perform subtraction\n    for i in range(len(list1)):\n        # Check if elements are numeric\n        if not isinstance(list1[i], (int, float)) or not isinstance(list2[i], (int, float)):\n            raise ValueError(\"Both lists must contain only numeric elements.\")\n        \n        # Perform element-wise subtraction\n        result.append(list1[i] - list2[i])\n\n    return result\n\n# Example usage:\n# list1 = [10, 20, 30]\n# list2 = [1, 2, 3]\n# print(sub_list(list1, list2))  # Output: [9, 18, 27]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n    If lists are of different lengths, the shorter list is padded with zeros.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    TypeError: If either list1 or list2 is not a list.\n    ValueError: If elements of list1 or list2 are not numbers.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    # Check if all elements in the lists are numbers\n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise ValueError(\"All elements in list1 must be numbers.\")\n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"All elements in list2 must be numbers.\")\n    \n    # Determine the length of the longer list\n    max_length = max(len(list1), len(list2))\n    \n    # Pad the shorter list with zeros\n    padded_list1 = list1 + [0] * (max_length - len(list1))\n    padded_list2 = list2 + [0] * (max_length - len(list2))\n    \n    # Perform element-wise subtraction\n    result = [a - b for a, b in zip(padded_list1, padded_list2)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise. If the lists are of different lengths, the longer list is truncated.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise differences.\n\n    Raises:\n    TypeError: If either input is not a list or contains non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise TypeError(\"List1 must contain only numeric elements.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise TypeError(\"List2 must contain only numeric elements.\")\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Perform element-wise subtraction using list comprehension\n    result = [list1[i] - list2[i] for i in range(min_length)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If any element in the lists is not a number.\n\n    Example:\n    >>> sub_list([1, 2, 3], [4, 5, 6])\n    [-3, -3, -3]\n    \"\"\"\n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Initialize the result list\n    result = []\n    \n    # Perform element-wise subtraction\n    for i in range(min_length):\n        # Check if both elements are numbers\n        if not (isinstance(list1[i], (int, float)) and isinstance(list2[i], (int, float))):\n            raise ValueError(\"Both elements must be numbers.\")\n        \n        # Subtract elements and append to result\n        result.append(list1[i] - list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[float], list2: list[float]) -> list[float]:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list of float): The first list of numbers.\n    list2 (list of float): The second list of numbers.\n\n    Returns:\n    list of float: A new list containing the element-wise differences.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are not of equal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of equal length.\")\n    \n    result = [a - b for a, b in zip(list1, list2)]\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise differences.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length.\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If either input is not a list or contains non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise ValueError(\"List1 must contain only numeric elements.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"List2 must contain only numeric elements.\")\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Perform element-wise subtraction\n    result = [list1[i] - list2[i] for i in range(min_length)]\n    \n    return result\n"], "plans": ["requirement analysis:\nThe function should take two lists of equal length and return a new list where each element is the result of subtracting the corresponding elements of the input lists. It should handle edge cases such as empty lists and provide meaningful error messages for lists of unequal lengths.\nrequirement pool:\n- Implement the element-wise subtraction function.\n- Handle edge cases such as empty lists.\n- Provide error handling for lists of different lengths.\n- Optimize the function for performance with large lists.\n- Include comprehensive test cases to ensure reliability.\nWe will implement a simple Python function using list comprehension to perform element-wise subtraction of two lists. This approach is efficient and leverages native Python capabilities, making it suitable for handling large lists. We will also include error handling to ensure that the input lists are of equal length and contain numeric data types.\n", "requirement analysis:\nThe function should take two lists of numbers as input and return a new list where each element is the result of subtracting the corresponding elements of the input lists. The function should handle cases where the lists are of different lengths by returning an error or handling the mismatch gracefully.\nrequirement pool:\n- Implement the element-wise subtraction functionality\n- Handle lists of different lengths\n- Provide informative error messages for invalid inputs\n- Optimize for performance with large lists\n- Ensure code readability and maintainability\nWe will implement a custom function using native Python to perform element-wise subtraction of two lists. The function will handle lists of different lengths by truncating the longer list to match the length of the shorter one. This approach ensures simplicity and efficiency without requiring additional libraries. We will also include error handling to provide informative messages for invalid inputs.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length, returning a new list with the results. It should handle edge cases such as empty lists and non-numeric elements gracefully.\nrequirement pool:\n- Implement element-wise subtraction of two lists.\n- Ensure the function handles lists of varying lengths appropriately.\n- Provide clear documentation and examples for user understanding.\n- Optimize performance for large lists.\n- Include error handling for non-numeric elements.\nWe will implement a simple function using Python's built-in capabilities to perform element-wise subtraction of two lists. The function will handle lists of equal length efficiently and include error handling for non-numeric elements. For lists of different lengths, we will raise an appropriate error. The function will be documented with clear examples to enhance user understanding.\n", "requirement analysis:\nThe function should efficiently subtract two lists element-wise, handle lists of different lengths, and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the element-wise subtraction function\n- Handle lists of different lengths gracefully\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\n- Include informative error messages\nWe will implement a simple function using native Python capabilities to perform element-wise subtraction of two lists. The function will handle lists of different lengths by padding the shorter list with zeros to match the length of the longer list. This approach ensures compatibility with different Python versions and avoids the need for additional libraries. We will also include informative error messages for invalid inputs and provide clear documentation.\n", "requirement analysis:\nThe function should subtract two lists element-wise, ensuring it handles lists of different lengths by either truncating the longer list or raising an error. It should be efficient and provide clear error messages for invalid inputs.\nrequirement pool:\n- Implement the element-wise subtraction of two lists.\n- Handle lists of different lengths gracefully.\n- Provide informative error messages for invalid inputs.\n- Optimize the function for large lists.\n- Ensure the code is simple and readable.\nWe will implement a simple Python function that performs element-wise subtraction of two lists. The function will handle lists of different lengths by truncating the longer list to match the length of the shorter one. It will include error handling to provide informative messages for invalid inputs, such as non-list inputs or lists containing non-numeric elements. The function will be optimized for large lists by using list comprehensions, which are efficient and maintain readability.\n", "requirement analysis:\nThe function should efficiently subtract two lists element-wise, ensuring it handles lists of varying sizes and types. It should be intuitive for users to understand and apply in their projects.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Ensure the function handles lists of different lengths gracefully.\n- Provide clear documentation and examples for user understanding.\n- Optimize performance for large list operations.\n- Include error handling for non-numeric list elements.\nWe will implement a simple function using Python's built-in capabilities to perform element-wise subtraction of two lists. The function will handle lists of different lengths by subtracting elements up to the length of the shorter list and ignoring the rest. We will use list comprehension for efficient operations and include error handling for non-numeric elements.\n", "requirement analysis:\nThe function should take two lists of equal length and return a new list where each element is the result of subtracting the corresponding elements of the input lists. It should handle errors gracefully, particularly when the lists are of different lengths.\nrequirement pool:\n- Implement the element-wise subtraction function.\n- Handle cases where input lists are of different lengths.\n- Optimize the function for large lists.\n- Provide detailed error messages for invalid inputs.\n- Ensure the function is easy to read and maintain.\nWe will implement a simple Python function that performs element-wise subtraction of two lists. The function will first check if the lists are of equal length and contain numeric data. If the lists are not of equal length, it will raise a ValueError with a descriptive message. The function will use list comprehension for efficient and readable implementation. We will not use any external libraries to keep the solution simple and maintainable.\n", "requirement analysis:\nThe function should perform element-wise subtraction of two lists, ensuring both lists are of equal length. It should handle potential errors gracefully and provide clear feedback to the user.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Ensure the function checks for equal list lengths.\n- Provide error handling for mismatched list lengths.\n- Optimize performance for large lists.\n- Include documentation for user guidance.\nWe will implement a simple function using Python's built-in capabilities to perform element-wise subtraction of two lists. The function will check if the lists are of equal length and raise a ValueError with a clear message if they are not. This approach ensures efficiency and usability without the need for additional libraries.\n", "requirement analysis:\nThe function should perform element-wise subtraction of two lists, ensuring that both lists are of equal length. If the lists differ in length, the function should handle this gracefully, either by truncating the longer list or by raising an informative error. The solution should prioritize efficiency and readability, making it suitable for use in larger applications.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Handle lists of unequal lengths gracefully.\n- Provide clear error messages for invalid operations.\n- Optimize performance for large datasets.\n- Ensure code readability and maintainability.\nWe will implement a function that performs element-wise subtraction of two lists. The function will first check if the lists are of equal length. If they are not, it will raise a ValueError with a clear error message. This approach ensures that the function is simple, efficient, and easy to maintain. We will use Python's built-in capabilities to achieve this without any additional libraries, as this is sufficient for the task and aligns with the goal of optimizing performance for large datasets.\n", "requirement analysis:\nThe function should efficiently subtract two lists element-wise, ensuring it handles lists of different lengths and provides meaningful error messages when necessary.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Handle lists of different lengths gracefully.\n- Provide clear error messages for invalid inputs.\n- Optimize performance for large datasets.\n- Ensure code readability and maintainability.\nWe will implement a function `sub_list` that performs element-wise subtraction of two lists. The function will handle lists of different lengths by subtracting up to the length of the shorter list and ignoring the extra elements in the longer list. We will use Python's built-in capabilities to achieve this, ensuring simplicity and efficiency. Additionally, the function will include error handling to provide clear messages for invalid inputs.\n"], "test": ["def check(sub_list):\n\tassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "def check(sub_list):\n\tassert sub_list([1,2],[3,4])==[-2,-2]", "def check(sub_list):\n\tassert sub_list([90,120],[50,70])==[40,50]", "def check(sub_list):\n\tassert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "def check(sub_list):\n\tassert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "def check(sub_list):\n\tassert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "def check(sub_list):\n\tassert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "def check(sub_list):\n\tassert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "def check(sub_list):\n\tassert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "def check(sub_list):\n\tassert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "def check(sub_list):\n\tassert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "def check(sub_list):\n\tassert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "def check(sub_list):\n\tassert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "def check(sub_list):\n\tassert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "def check(sub_list):\n\tassert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "def check(sub_list):\n\tassert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "def check(sub_list):\n\tassert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "def check(sub_list):\n\tassert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "def check(sub_list):\n\tassert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "def check(sub_list):\n\tassert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "def check(sub_list):\n\tassert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "def check(sub_list):\n\tassert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "def check(sub_list):\n\tassert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "def check(sub_list):\n\tassert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "def check(sub_list):\n\tassert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "def check(sub_list):\n\tassert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "def check(sub_list):\n\tassert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "def check(sub_list):\n\tassert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "def check(sub_list):\n\tassert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "def check(sub_list):\n\tassert sub_list([5, 6], [4, 8]) == [1, -2]", "def check(sub_list):\n\tassert sub_list([2, 6], [3, 9]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([5, 3], [6, 2]) == [-1, 1]", "def check(sub_list):\n\tassert sub_list([3, 5], [3, 5]) == [0, 0]", "def check(sub_list):\n\tassert sub_list([4, 6], [3, 6]) == [1, 0]", "def check(sub_list):\n\tassert sub_list([6, 3], [7, 6]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([3, 2], [2, 6]) == [1, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [1, 1]) == [3, 5]", "def check(sub_list):\n\tassert sub_list([1, 2], [1, 1]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([1, 3], [6, 8]) == [-5, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [7, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 6]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 2], [3, 7]) == [0, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [4, 1]) == [-2, 1]", "def check(sub_list):\n\tassert sub_list([3, 2], [7, 7]) == [-4, -5]", "def check(sub_list):\n\tassert sub_list([4, 7], [8, 8]) == [-4, -1]", "def check(sub_list):\n\tassert sub_list([3, 6], [1, 6]) == [2, 0]", "def check(sub_list):\n\tassert sub_list([1, 7], [1, 6]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([3, 3], [4, 7]) == [-1, -4]", "def check(sub_list):\n\tassert sub_list([3, 2], [8, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([4, 1], [6, 2]) == [-2, -1]", "def check(sub_list):\n\tassert sub_list([6, 2], [6, 9]) == [0, -7]", "def check(sub_list):\n\tassert sub_list([2, 4], [2, 2]) == [0, 2]", "def check(sub_list):\n\tassert sub_list([3, 4], [5, 4]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 7], [3, 8]) == [0, -1]", "def check(sub_list):\n\tassert sub_list([2, 5], [1, 3]) == [1, 2]", "def check(sub_list):\n\tassert sub_list([4, 6], [4, 2]) == [0, 4]", "def check(sub_list):\n\tassert sub_list([5, 6], [3, 4]) == [2, 2]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 9]) == [-2, -3]", "def check(sub_list):\n\tassert sub_list([6, 3], [3, 2]) == [3, 1]", "def check(sub_list):\n\tassert sub_list([2, 1], [5, 9]) == [-3, -8]", "def check(sub_list):\n\tassert sub_list([5, 1], [5, 5]) == [0, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [7, 7]) == [-3, -1]", "def check(sub_list):\n\tassert sub_list([88, 120], [55, 65]) == [33, 55]", "def check(sub_list):\n\tassert sub_list([85, 121], [45, 71]) == [40, 50]", "def check(sub_list):\n\tassert sub_list([92, 125], [46, 74]) == [46, 51]", "def check(sub_list):\n\tassert sub_list([93, 115], [50, 68]) == [43, 47]", "def check(sub_list):\n\tassert sub_list([90, 116], [45, 72]) == [45, 44]", "def check(sub_list):\n\tassert sub_list([88, 119], [51, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([91, 121], [47, 74]) == [44, 47]", "def check(sub_list):\n\tassert sub_list([94, 118], [53, 71]) == [41, 47]", "def check(sub_list):\n\tassert sub_list([89, 119], [51, 65]) == [38, 54]", "def check(sub_list):\n\tassert sub_list([85, 124], [48, 72]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([89, 124], [53, 67]) == [36, 57]", "def check(sub_list):\n\tassert sub_list([90, 118], [50, 67]) == [40, 51]", "def check(sub_list):\n\tassert sub_list([85, 123], [54, 70]) == [31, 53]", "def check(sub_list):\n\tassert sub_list([85, 118], [48, 75]) == [37, 43]", "def check(sub_list):\n\tassert sub_list([91, 122], [45, 73]) == [46, 49]", "def check(sub_list):\n\tassert sub_list([90, 115], [47, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([89, 125], [55, 70]) == [34, 55]", "def check(sub_list):\n\tassert sub_list([89, 115], [50, 71]) == [39, 44]", "def check(sub_list):\n\tassert sub_list([94, 119], [45, 75]) == [49, 44]", "def check(sub_list):\n\tassert sub_list([89, 117], [46, 68]) == [43, 49]", "def check(sub_list):\n\tassert sub_list([90, 118], [54, 67]) == [36, 51]", "def check(sub_list):\n\tassert sub_list([90, 118], [53, 70]) == [37, 48]", "def check(sub_list):\n\tassert sub_list([88, 125], [54, 69]) == [34, 56]", "def check(sub_list):\n\tassert sub_list([92, 115], [49, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([86, 119], [50, 71]) == [36, 48]", "def check(sub_list):\n\tassert sub_list([85, 119], [48, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([93, 122], [54, 69]) == [39, 53]", "def check(sub_list):\n\tassert sub_list([93, 119], [49, 74]) == [44, 45]", "def check(sub_list):\n\tassert sub_list([88, 123], [46, 67]) == [42, 56]", "def check(sub_list):\n\tassert sub_list([90, 116], [50, 73]) == [40, 43]", "def check(sub_list):\n\tassert sub_list([93, 120], [46, 68]) == [47, 52]", "def check(sub_list):\n\tassert sub_list([85, 116], [53, 69]) == [32, 47]", "def check(sub_list):\n\tassert sub_list([86, 123], [46, 75]) == [40, 48]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If either input is not a list or contains non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise ValueError(\"List1 must contain only numeric elements.\")\n    \n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"List2 must contain only numeric elements.\")\n    \n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Perform element-wise subtraction\n    result = [list1[i] - list2[i] for i in range(min_length)]\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 783, "mutate_method": "expand_one2two", "parent_index": 112}
