{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 572, "prompt": "Construct a Python function that accepts several lists as input. The function should be able to handle multiple lists effectively. It removes duplicate numbers from them.", "code": "def two_unique_nums(nums):\n  return [i for i in nums if nums.count(i)==1]", "test_imports": [], "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "assert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "assert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "assert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "assert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "assert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "assert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "assert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "assert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "assert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "assert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "assert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "assert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "assert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "assert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "assert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "assert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "assert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "assert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "assert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "assert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "assert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "assert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "assert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "assert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "assert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "assert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "assert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "assert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "assert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "assert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "assert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "assert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "assert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "assert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "assert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "assert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "assert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "assert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "assert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "assert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "assert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "assert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "assert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "assert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "assert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "assert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "assert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "assert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "assert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "assert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "assert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "assert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "assert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "assert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "assert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "assert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "assert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "assert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "assert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "assert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "assert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "assert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "assert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "assert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "assert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "assert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "assert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "assert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "assert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "assert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "assert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "assert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "assert two_unique_nums([1, 6, 1, 6, 6]) == []", "assert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "assert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "assert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "assert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "assert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "assert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "assert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "assert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "assert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "assert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "assert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "assert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "assert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "assert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "assert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "assert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "assert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "assert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "assert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "assert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "assert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "assert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "assert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "assert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "assert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "assert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "entry_point": "two_unique_nums", "repair_prompt": ["Construct a Python function two_unique_nums that accepts several lists as input. The function should be able to handle multiple lists effectively. It removes duplicate numbers from them.\ntwo_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n"], "completions": ["from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that appear only once across all lists.\n\n    Parameters:\n    lists (list): Variable number of lists containing integers.\n\n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Combine all input lists into a single list\n    combined_list = []\n    for lst in lists:\n        combined_list.extend(lst)\n\n    # Use a dictionary to count occurrences of each number\n    num_count = {}\n    for num in combined_list:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n    # Filter numbers that appear only once\n    unique_nums = [num for num, count in num_count.items() if count == 1]\n\n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [5, 6, 7, 8])\n    print(result)  # Output: [1, 4, 6, 7, 8]\n", "from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    lists (list): Variable number of lists containing integers.\n\n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Convert each list to a set to remove duplicates within each list\n    sets = [set(lst) for lst in lists]\n\n    # Create a dictionary to count occurrences of each number across all sets\n    num_count = {}\n    for s in sets:\n        for num in s:\n            if num in num_count:\n                num_count[num] += 1\n            else:\n                num_count[num] = 1\n\n    # Find numbers that appear only once across all sets\n    unique_nums = [num for num, count in num_count.items() if count == 1]\n\n    return unique_nums\n\n# Example usage\nif __name__ == \"__main__\":\n    result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [4, 5, 6, 7])\n    print(result)  # Output: [1, 6, 7]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n    \n    Parameters:\n    lists (list): Variable number of lists containing integers.\n    \n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Initialize a counter to track occurrences of each number\n    number_counter = Counter()\n\n    # Iterate over each list\n    for lst in lists:\n        # Convert list to set to remove duplicates\n        unique_numbers = set(lst)\n        # Update counter with set elements\n        number_counter.update(unique_numbers)\n\n    # Identify numbers with count of 1 (unique across all lists)\n    unique_across_all = [num for num, count in number_counter.items() if count == 1]\n\n    return unique_across_all\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3], [3, 4, 5], [5, 6, 7])\n# print(result)  # Output should be [1, 2, 4, 6, 7] if these numbers are unique across all lists\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    lists (List[int]): Variable number of lists containing integers.\n\n    Returns:\n    List[int]: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Initialize a counter to track occurrences of each number\n    number_counter = Counter()\n\n    # Iterate over each list provided as input\n    for lst in lists:\n        # Convert the list to a set to remove duplicates within the list\n        unique_numbers = set(lst)\n        # Update the counter with the unique numbers from the current list\n        number_counter.update(unique_numbers)\n\n    # Identify numbers that appear only once across all lists\n    unique_across_all = [num for num, count in number_counter.items() if count == 1]\n\n    return unique_across_all\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3], [3, 4, 5], [5, 6, 7])\n# print(result)  # Output should be [1, 2, 4, 6, 7]\n", "from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    lists (list): Variable number of lists containing numbers.\n\n    Returns:\n    list: A list of numbers that are unique across all input lists.\n    \"\"\"\n    # Initialize a dictionary to count occurrences of each number\n    num_count = {}\n\n    # Iterate over each list provided as input\n    for lst in lists:\n        # Check if the input is a list\n        if not isinstance(lst, list):\n            raise ValueError(\"All inputs must be lists.\")\n        \n        # Iterate over each item in the list\n        for item in lst:\n            # Check if the item is a number\n            if not isinstance(item, (int, float)):\n                raise ValueError(\"All items in the lists must be numbers.\")\n            \n            # Count the occurrences of each number\n            if item in num_count:\n                num_count[item] += 1\n            else:\n                num_count[item] = 1\n\n    # Collect numbers that appear only once across all lists\n    unique_numbers = [num for num, count in num_count.items() if count == 1]\n\n    return unique_numbers\n", "from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list[int]) -> list[int]:\n    \"\"\"\n    Accepts multiple lists of integers and returns a list of numbers that are unique across all lists.\n    \n    Parameters:\n    lists (list[int]): Variable number of lists containing integers.\n    \n    Returns:\n    list[int]: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Dictionary to count occurrences of each number\n    number_count = {}\n\n    # Iterate over each list\n    for lst in lists:\n        # Convert list to set to remove duplicates within the list\n        unique_numbers = set(lst)\n        # Update the count of each number in the dictionary\n        for number in unique_numbers:\n            if number in number_count:\n                number_count[number] += 1\n            else:\n                number_count[number] = 1\n\n    # Filter numbers that appear only once across all lists\n    unique_across_all = [number for number, count in number_count.items() if count == 1]\n\n    return unique_across_all\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [4, 5, 6, 7])\n# print(result)  # Output should be [1, 6, 7]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    *lists (list): Variable number of lists containing integers.\n\n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Flatten all input lists into a single list\n    flattened_list = [num for sublist in lists for num in sublist]\n    \n    # Count occurrences of each number using collections.Counter\n    num_counts = Counter(flattened_list)\n    \n    # Filter numbers with count == 1 to get unique numbers\n    unique_numbers = [num for num, count in num_counts.items() if count == 1]\n    \n    return unique_numbers\n\n# Example usage:\n# unique_numbers = two_unique_nums([1, 2, 3], [3, 4, 5], [5, 6, 7])\n# print(unique_numbers)  # Output: [1, 2, 4, 6, 7]\n", "from typing import List\n## main.py\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists and returns a list of unique numbers from each list.\n\n    Parameters:\n    lists (list): Variable number of lists containing numbers.\n\n    Returns:\n    list: A list of unique numbers from each input list.\n    \"\"\"\n    def is_numeric(value) -> bool:\n        \"\"\"Check if the value is a numeric type (int or float).\"\"\"\n        return isinstance(value, (int, float))\n\n    unique_numbers = []\n    \n    for lst in lists:\n        # Use a set to remove duplicates\n        unique_set = set(lst)\n        # Filter out non-numeric values\n        filtered_unique = [num for num in unique_set if is_numeric(num)]\n        unique_numbers.append(filtered_unique)\n    \n    return unique_numbers\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [5, 6, 7, 8, 6, 7])\n# print(result)  # Output: [[1, 2, 3, 4, 5], [5, 6, 7, 8]]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\nfrom typing import List\n\ndef two_unique_nums(*lists: List[int]) -> List[int]:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n    \n    Parameters:\n    *lists (list): Variable number of lists containing integers.\n    \n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Flatten the input lists into a single list\n    all_numbers = []\n    for lst in lists:\n        all_numbers.extend(lst)\n    \n    # Count occurrences of each number using collections.Counter\n    number_counts = Counter(all_numbers)\n    \n    # Filter numbers that appear exactly once\n    unique_numbers = [num for num, count in number_counts.items() if count == 1]\n    \n    return unique_numbers\n\n# Example usage:\n# result = two_unique_nums([1, 2, 3, 2, 3, 4, 5], [4, 5, 6, 7])\n# print(result)  # Output: [1, 6, 7]\n", "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    *lists (list): Variable number of lists containing integers.\n\n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Flatten all lists into a single list\n    combined_list = [num for sublist in lists for num in sublist]\n    \n    # Use collections.Counter to count occurrences\n    num_counter = Counter(combined_list)\n    \n    # Filter numbers with count == 1\n    unique_numbers = [num for num, count in num_counter.items() if count == 1]\n    \n    return unique_numbers\n"], "plans": ["requirement analysis:\nThe function should efficiently process multiple lists, removing duplicates and returning a list of unique numbers. It should be optimized for performance and include clear documentation for ease of use.\nrequirement pool:\n- The function must handle multiple lists as input\n- The function should remove duplicate numbers\n- Optimize the function for large datasets\n- Provide clear documentation for users\n- Include examples of usage in the documentation\nWe will use Python's built-in set data structure to efficiently handle duplicate removal across multiple lists. The function will combine all input lists into a single list, convert it to a set to remove duplicates, and then filter out numbers that appear more than once. This approach leverages the efficiency of set operations for large datasets.\n", "requirement analysis:\nThe function should efficiently process multiple lists, removing duplicates and returning a list of unique numbers. It should be optimized for performance, especially with large datasets, and provide a clear output format.\nrequirement pool:\n- Efficiently handle multiple lists as input\n- Remove duplicate numbers from the lists\n- Optimize performance for large datasets\n- Provide clear and concise output\n- Ensure compatibility with various Python versions\nWe will use Python's built-in set data structure to efficiently handle duplicate removal. The function will iterate over each list, convert it to a set to remove duplicates, and then find numbers that are unique across all lists. This approach is efficient for large datasets due to the average O(1) time complexity of set operations.\n", "requirement analysis:\nThe function should efficiently process multiple lists and extract unique numbers, ensuring no duplicates are present in the output. It should handle large datasets without compromising performance.\nrequirement pool:\n- The function must handle multiple lists as input\n- The function must remove duplicate numbers\n- The function should maintain performance with large lists\n- The output should be clear and easy to interpret\n- The function should be easy to integrate into existing systems\nWe will use Python's built-in set data structure to efficiently handle duplicate removal. The function will iterate over each list, convert it to a set to remove duplicates, and then use a counter to identify numbers that appear only once across all lists. This approach ensures efficient processing even for large datasets.\n", "requirement analysis:\nThe function needs to efficiently process multiple lists and extract unique numbers, ensuring no duplicates are present in the output. It should handle large datasets without compromising performance.\nrequirement pool:\n- The function must accept multiple lists as input\n- The function must remove duplicate numbers from the lists\n- The function should be optimized for performance with large datasets\n- The output should be easy to understand and use\n- The function should provide clear error messages for invalid inputs\nWe will use Python's set data structure to efficiently handle duplicate removal, as sets inherently do not allow duplicate values. The function will iterate over each list, convert it to a set to remove duplicates, and then use a counter to identify numbers that appear only once across all lists. This approach ensures that the function is optimized for performance, even with large datasets.\n", "requirement analysis:\nThe function needs to efficiently process multiple lists and return unique numbers, ensuring no duplicates are present in the output. It should handle large datasets without compromising performance.\nrequirement pool:\n- The function must accept multiple lists as input\n- The function must remove duplicate numbers from the lists\n- The function should be optimized for performance with large datasets\n- The output should be easy to understand and use\n- The function should provide clear error messages for invalid inputs\nWe will implement a function named `two_unique_nums` that accepts multiple lists as input. The function will use Python's built-in set data structure to efficiently identify and remove duplicate numbers from each list. This approach ensures that the function can handle large datasets efficiently. We will also handle edge cases such as empty lists and non-numeric inputs by providing clear error messages.\n", "requirement analysis:\nThe function should efficiently handle multiple lists and remove duplicates, returning only unique numbers. It should be optimized for performance and easy to understand for users.\nrequirement pool:\n- The function must handle multiple lists as input\n- The function should remove duplicate numbers\n- The function should be optimized for large datasets\n- Provide clear documentation for the function\n- Include examples in the documentation\nWe will use Python's built-in set to efficiently remove duplicates from each list. The function will iterate over each list, convert it to a set to remove duplicates, and then filter out numbers that appear more than once across all lists. This approach leverages the simplicity and efficiency of sets for duplicate removal and ensures the function is optimized for large datasets.\n", "requirement analysis:\nThe function should efficiently process multiple lists to extract unique numbers, ensuring no duplicates remain. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- The function must handle multiple lists and remove duplicates.\n- The function should be optimized for performance with large datasets.\n- Provide clear documentation and examples for users.\n- Ensure compatibility with Python 3.x.\n- Include error handling for invalid inputs.\nWe will implement a function that processes multiple lists to extract unique numbers. The function will utilize Python's built-in collections.Counter to efficiently count occurrences of each number across all lists, then filter out numbers that appear more than once. This approach ensures optimal performance even with large datasets. The function will be documented clearly, and error handling will be included to manage invalid inputs.\n", "requirement analysis:\nThe function should efficiently process multiple lists and return unique numbers from each list. It should handle large datasets without compromising performance and provide clear documentation for users.\nrequirement pool:\n- Efficiently process multiple lists\n- Return unique numbers from each list\n- Optimize performance for large datasets\n- Provide clear documentation\n- Ensure compatibility with various data types\nWe will implement a function named `two_unique_nums` that takes multiple lists as input and returns a list of unique numbers from each list. We will use Python's built-in set data structure to efficiently handle duplicates and ensure that the function can process large datasets without performance issues. The function will be designed to handle edge cases such as empty lists and lists with non-numeric elements by filtering out non-numeric values.\n", "requirement analysis:\nThe function should efficiently handle multiple lists and remove duplicates, returning only unique numbers. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- The function must handle multiple lists and remove duplicates\n- Optimize the function for performance with large datasets\n- Provide clear documentation and examples for users\n- Ensure compatibility with existing Python codebases\n- Include error handling for invalid inputs\nWe will implement a function that processes multiple lists to extract unique numbers. The function will utilize Python's built-in collections.Counter to efficiently count occurrences of each number across all lists, and then filter out numbers that appear more than once. This approach is efficient for large datasets and leverages Python's standard library, ensuring compatibility and ease of integration.\n", "requirement analysis:\nThe function should efficiently handle multiple lists and remove duplicates, returning only unique numbers. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- The function must handle multiple lists as input\n- The function should return a list of unique numbers\n- Optimize the function for performance with large datasets\n- Provide clear documentation and examples\n- Include error handling for invalid inputs\nWe will use Python's built-in collections module to efficiently handle multiple lists and remove duplicates. Specifically, we will use the Counter class to count occurrences of each number across all lists and then filter out numbers that appear more than once. This approach is efficient and leverages Python's optimized data structures.\n"], "test": ["def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 5, 3, 2, 1, 5]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 2, 4, 2, 1, 10]) == [6, 4, 1, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 4, 7, 2, 8, 3]) == [1, 4, 7, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 7, 6, 4, 8]) == [1, 3, 7, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 5, 1, 7, 4, 5]) == [2, 1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 1, 5, 5, 3]) == [2, 7, 4, 1, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 2, 1, 3, 4, 8]) == [5, 1, 3, 4, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 5, 4, 6, 3, 10]) == [1, 5, 4, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 3, 4, 6, 2, 10]) == [7, 3, 6, 2, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 2, 6, 9, 10]) == [3, 7, 6, 9, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 5, 4, 3, 2, 1]) == [4, 3, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 5, 1, 2, 3]) == [1, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 1, 2, 4, 2, 6]) == [5, 1, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 7, 6, 2, 7, 5]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 5, 7, 7, 5]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 2, 7, 1, 5, 8, 5]) == [3, 2, 7, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 8, 2, 1, 7, 1]) == [5, 6, 8, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 1, 5, 8, 10]) == [6, 8, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 8, 3, 6, 4, 6]) == [5, 8, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 7, 7, 8, 5, 10]) == [4, 8, 5, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 5, 7, 3, 7, 10]) == [4, 6, 5, 3, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 3, 7, 6, 6, 7, 8]) == [2, 3, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 2, 1, 4, 4, 8, 4]) == [5, 2, 1, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 4, 6, 3, 4, 2]) == [1, 6, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 2, 3, 5, 7, 5, 2]) == [3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 5, 4, 4, 9, 1]) == [5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 6, 1, 6, 2, 4, 10]) == [5, 1, 2, 4, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 6, 2, 4, 9]) == [5, 3, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 3, 3, 4, 4, 5, 8]) == [1, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 8, 5, 2, 4, 3]) == [6, 8, 5, 2, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 7, 2, 7, 7, 7, 2]) == [3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 4, 4, 6, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 8, 2, 6, 9, 2]) == [1, 4, 8, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 4, 9, 8]) == [2, 7, 9, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 4, 1, 6, 10]) == [5, 1, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 7, 1, 6, 9]) == [4, 3, 7, 1, 6, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 2, 7, 1, 1]) == [2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 1, 5, 2, 1]) == [4, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 3, 3, 5]) == [1, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 8, 4, 1, 9]) == [6, 2, 8, 4, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 5, 7, 5, 9, 7]) == [4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 4, 7, 2, 4, 9]) == [1, 7, 2, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 6, 7, 8, 5]) == [1, 2, 6, 7, 8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 6, 7, 8, 3]) == [6, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 2, 9, 2]) == [6, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 5, 7, 8]) == [2, 4, 5, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 5, 1, 9, 9]) == [6, 7, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 1, 6, 4, 7]) == [6, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 2, 6, 2]) == [5, 4, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 3, 2, 8, 6]) == [5, 1, 3, 2, 8, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 4, 4, 1, 6]) == [3, 1, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 4, 6, 4, 3]) == [2, 6, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 1, 7, 6, 7]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 2, 1, 4, 3, 7]) == [2, 1, 3, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 5, 3, 2, 9, 6]) == [5, 3, 9, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 4, 4, 2, 5, 1]) == [2, 5, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 1, 3, 1]) == [4, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 2, 1, 3, 9, 5]) == [6, 2, 1, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 7, 4, 9]) == [2, 8, 7, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 1, 1, 5]) == [5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 6, 4, 9, 4]) == [1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 6, 5, 5, 3]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 1, 7, 2, 8, 8]) == [3, 1, 7, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 2, 5, 8, 2]) == [1, 6, 5, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 4, 6, 7, 1]) == [2, 4, 6, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 3, 2, 2]) == [5, 4, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 8, 8, 10]) == [2, 6, 10]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 5, 3, 3, 6]) == [5, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 1, 4, 9, 4]) == [2, 1, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 3, 3, 7, 7]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 5, 6, 4, 9]) == [1, 5, 6, 4, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 6, 4, 6]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 1, 6, 6]) == []", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 3, 8, 3, 8]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 5, 3, 1]) == [4, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 7, 3, 9, 5]) == [2, 7, 3, 9, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 3, 1]) == [2, 7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 7, 1, 9, 2]) == [7, 9, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 1, 3, 4, 5]) == [1, 3, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 6, 3, 2, 5]) == [1, 6, 3, 2, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 3, 2, 5, 7]) == [3, 2, 7]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 7, 6, 8, 2]) == [5, 7, 6, 8, 2]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 2, 8, 4]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 5, 9]) == [4, 7, 8, 5, 9]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 4, 7, 8, 4]) == [3, 7, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 4, 7, 7, 5]) == [4]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 6, 8, 6, 5]) == [8, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 7, 8, 3, 6]) == [4, 7, 8, 3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 7, 3, 1]) == [6, 3, 1]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 4, 6, 10]) == [10]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 1, 3, 6, 1]) == [3, 6]", "def check(two_unique_nums):\n\tassert two_unique_nums([6, 7, 6, 3, 6]) == [7, 3]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 1, 7, 5]) == [2, 7, 5]", "def check(two_unique_nums):\n\tassert two_unique_nums([1, 2, 7, 4, 2]) == [1, 7, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([3, 3, 2, 8, 3]) == [2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([4, 6, 3, 4, 3]) == [6]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 6, 1, 6, 4]) == [2, 1, 4]", "def check(two_unique_nums):\n\tassert two_unique_nums([5, 1, 1, 2, 8]) == [5, 2, 8]", "def check(two_unique_nums):\n\tassert two_unique_nums([2, 4, 8, 4, 9]) == [2, 8, 9]"], "scores": [1.0, 0.0098, 0.0098, 0.0098, 1.0, 0.0098, 1.0, 0.0, 1.0, 1.0], "pass_results": [true, false, false, false, true, false, true, false, true, true], "pass_test_cases_num": [102, 1, 1, 1, 102, 1, 102, 0, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom collections import Counter\n\ndef two_unique_nums(*lists: list) -> list:\n    \"\"\"\n    Accepts multiple lists as input and returns a list of numbers that are unique across all lists.\n\n    Parameters:\n    *lists (list): Variable number of lists containing integers.\n\n    Returns:\n    list: A list of integers that are unique across all input lists.\n    \"\"\"\n    # Flatten all lists into a single list\n    combined_list = [num for sublist in lists for num in sublist]\n    \n    # Use collections.Counter to count occurrences\n    num_counter = Counter(combined_list)\n    \n    # Filter numbers with count == 1\n    unique_numbers = [num for num, count in num_counter.items() if count == 1]\n    \n    return unique_numbers\n", "passed": true, "pass": true, "pass_num": 5, "round": 869, "mutate_method": "expand_one2two", "parent_index": 539}
