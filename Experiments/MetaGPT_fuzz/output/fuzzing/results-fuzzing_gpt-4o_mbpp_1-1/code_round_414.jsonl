{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 65, "prompt": "Write a function to flatten a list. Then, sum all of its elements.", "code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "assert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "assert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "assert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "assert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "assert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "assert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "assert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "assert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "assert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "assert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "assert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "assert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "assert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "assert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "assert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "assert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "assert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "assert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "assert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "assert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "assert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "assert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "assert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "assert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "assert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "assert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "assert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "assert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "assert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "assert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "assert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "assert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "assert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "assert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "assert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "assert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "assert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "assert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "assert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "assert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "assert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "assert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "assert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "assert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "assert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "assert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "assert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "assert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "assert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "assert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "assert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "assert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "assert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "assert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "assert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "assert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "assert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "assert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "assert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "assert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "assert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "assert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "assert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "assert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "assert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "assert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "assert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "assert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "assert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "assert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "assert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "assert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "assert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "assert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "assert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "assert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "assert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "assert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "assert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "assert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "assert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "assert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "assert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "assert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "assert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "assert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "assert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "assert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "assert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "assert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "assert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "assert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "assert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "assert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "assert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "assert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "assert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "assert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "assert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "entry_point": "recursive_list_sum", "repair_prompt": ["Write a function recursive_list_sum to flatten a list. Then, sum all of its elements.\nrecursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n"], "completions": ["from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    if not isinstance(nested_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    total_sum = 0\n    for element in nested_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            total_sum += element\n        else:\n            raise TypeError(\"All elements must be integers, floats, or lists\")\n\n    return total_sum\n\n# Example usage:\n# result = recursive_list_sum([1, [2, [3, 4], 5], 6])\n# print(result)  # Output should be 21\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A potentially nested list containing numeric and non-numeric elements.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    def flatten_and_sum(lst: list) -> int:\n        total_sum = 0\n        for element in lst:\n            if isinstance(element, list):\n                total_sum += flatten_and_sum(element)\n            elif isinstance(element, (int, float)):\n                total_sum += element\n            # Non-numeric elements are ignored\n        return total_sum\n\n    return flatten_and_sum(nested_list)\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [1, [2, [3, 4], 'a'], 5, [6, [7, 'b'], 8]]\n    result = recursive_list_sum(example_list)\n    print(f\"The sum of all numeric elements is: {result}\")\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: Sum of all numeric elements in the flattened list.\n    \"\"\"\n    def flatten_and_sum(lst: list) -> int:\n        total_sum = 0\n        for element in lst:\n            if isinstance(element, list):\n                total_sum += flatten_and_sum(element)\n            elif isinstance(element, (int, float)):\n                total_sum += element\n            # Non-numeric elements are ignored\n        return total_sum\n\n    return flatten_and_sum(nested_list)\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum on nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the total sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            pass\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"Flattens a nested list and returns the sum of all its integer elements.\n\n    This function processes each element in the nested list. If an element is a list,\n    it recursively processes that list. If an element is an integer, it adds it to the sum.\n    Non-numeric elements are ignored.\n\n    Args:\n        nested_list (list): A list that may contain other lists or integers.\n\n    Returns:\n        int: The sum of all integers in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively process the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add integer to the total sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\n# nested_list = [1, [2, [3, 4], 5], 6, [7, 8]]\n# print(recursive_list_sum(nested_list))  # Output should be 36\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(lst: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    lst (list): A potentially nested list containing numeric elements.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n\n    Raises:\n    TypeError: If a non-numeric element is encountered.\n    \"\"\"\n    total_sum = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            # Recursively call the function if the element is a list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add the numeric element to the total sum\n            total_sum += element\n        else:\n            # Raise an error if a non-numeric element is encountered\n            raise TypeError(f\"Non-numeric element encountered: {element}\")\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all its elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively call recursive_list_sum for nested lists\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, int):\n            # Add integer elements to the sum\n            total_sum += element\n        else:\n            # Handle non-integer elements\n            raise ValueError(\"All elements must be integers or lists of integers.\")\n\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        example_list = [1, [2, [3, 4], 5], 6, [7, 8]]\n        print(f\"The sum of the nested list is: {recursive_list_sum(example_list)}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Recursively flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists of integers.\n\n    Returns:\n    int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the total sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            pass\n\n    return total_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_list = [1, [2, [3, 4], 5], [6, 7], 'a', [8, [9, 'b']]]\n    print(recursive_list_sum(example_list))  # Output should be 45\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"\n    Flattens a nested list and returns the sum of all numeric elements.\n\n    Parameters:\n    nested_list (list): A list that may contain nested lists.\n\n    Returns:\n    int: Sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the total sum\n            total_sum += element\n        else:\n            # Ignore non-numeric elements\n            continue\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"Flattens a nested list and returns the sum of all numeric elements.\n\n    This function recursively traverses a potentially nested list, flattens it,\n    and sums all numeric elements, ignoring any non-numeric elements.\n\n    Args:\n        nested_list (list): A potentially nested list of elements.\n\n    Returns:\n        int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the total sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\n# result = recursive_list_sum([1, 2, [3, 4], [5, 6]])\n# print(result)  # Output should be 21\n"], "plans": ["requirement analysis:\nThe function should efficiently flatten nested lists and sum their elements, ensuring it handles various levels of nesting without performance degradation.\nrequirement pool:\n- The function must correctly flatten and sum nested lists\n- The function should be optimized for performance\n- Provide documentation and examples for user understanding\n- Ensure compatibility with existing Python projects\n- Include error handling for non-list inputs\nWe will implement a recursive function to flatten and sum nested lists. The function will handle deeply nested lists efficiently using recursion. We will use Python's built-in capabilities without relying on external libraries to keep the solution simple and easy to integrate. The function will include error handling for non-list inputs and provide clear documentation with examples.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flattening them and summing all elements. It must handle various data types within lists and provide accurate results.\nrequirement pool:\n- Implement recursive list flattening\n- Sum all elements after flattening\n- Handle different data types within lists\n- Optimize for performance with large datasets\n- Provide user documentation and examples\nWe will implement a recursive function to traverse and flatten nested lists, then sum all numeric elements. We will use Python's built-in capabilities to handle recursion and summation. The function will check for numeric types to ensure only numbers are summed, and it will skip non-numeric elements. This approach avoids the need for additional libraries, keeping the solution simple and efficient.\n", "requirement analysis:\nThe function should recursively flatten nested lists and sum all elements. It must handle various levels of nesting and provide accurate results.\nrequirement pool:\n- Implement recursive list flattening\n- Sum all elements after flattening\n- Optimize for performance with large lists\n- Provide clear documentation and examples\n- Ensure compatibility with different Python versions\nWe will implement a recursive function to flatten nested lists and sum all elements. The function will handle various levels of nesting efficiently using recursion. We will use Python's built-in capabilities to ensure compatibility across different versions. The function will skip non-numeric elements during summation to avoid errors.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flattening them and summing all elements. It must handle various levels of nesting and different data types within the list, ensuring robustness and efficiency.\nrequirement pool:\n- Implement recursive list flattening\n- Sum all elements after flattening\n- Handle edge cases like empty lists\n- Optimize for performance with large lists\n- Provide usage examples and documentation\nWe will implement a recursive function to flatten nested lists and sum all numeric elements. The function will handle various levels of nesting and ensure robustness by checking for numeric types before summation. We will use Python's built-in capabilities to achieve this without additional libraries, ensuring simplicity and ease of use.\n", "requirement analysis:\nThe function should recursively flatten nested lists and sum all elements, ensuring it handles various levels of nesting efficiently.\nrequirement pool:\n- Implement recursive list flattening\n- Sum all elements of the flattened list\n- Optimize for performance with large lists\n- Provide clear examples and documentation\n- Ensure compatibility with different Python versions\nWe will implement a recursive function to flatten nested lists and sum all elements. The function will handle various levels of nesting efficiently by checking each element's type and recursively processing lists. We will use Python's built-in capabilities without additional libraries to keep the solution simple and efficient.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It must handle various data types within the list and ensure performance efficiency.\nrequirement pool:\n- Implement the recursive list flattening and summing function\n- Ensure the function handles edge cases like empty lists\n- Optimize the function for performance with large and deeply nested lists\n- Provide comprehensive documentation and examples\n- Include error handling for non-numeric elements\nWe will implement a recursive function that traverses through the list, checks if an element is a list itself, and if so, recursively calls itself to flatten and sum the elements. For non-numeric elements, we will raise an error to ensure data integrity.\n", "requirement analysis:\nThe function needs to efficiently flatten nested lists and compute their sum. It should handle various levels of nesting and provide accurate results. Performance optimization is crucial for handling large datasets.\nrequirement pool:\n- Implement recursive list flattening\n- Calculate sum of flattened list\n- Optimize for performance with large lists\n- Provide clear documentation\n- Include error handling for non-list inputs\nWe will implement a recursive function to flatten the list and sum its elements. The function will handle various levels of nesting by checking if an element is a list and recursively processing it. We will use Python's built-in capabilities to ensure simplicity and efficiency. Error handling will be included to manage non-list inputs.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and compute the sum of all elements. It should handle various data types within the list and provide accurate results.\nrequirement pool:\n- Implement recursive list flattening and summing\n- Optimize for performance with large datasets\n- Include comprehensive documentation and examples\n- Ensure compatibility with different Python versions\n- Provide error handling for non-list inputs\nWe will implement a recursive function to traverse and flatten nested lists, summing all numeric elements. The function will handle deeply nested lists efficiently using recursion. We will use native Python capabilities to ensure compatibility across different Python versions and optimize performance for large datasets. Non-numeric elements will be ignored during summation.\n", "requirement analysis:\nThe function should recursively flatten any nested list structure and sum all elements, ensuring it handles various data types and large lists efficiently.\nrequirement pool:\n- Implement recursive list flattening\n- Sum all elements of the flattened list\n- Optimize for performance with large lists\n- Provide clear documentation\n- Include example use cases\nWe will implement a recursive function to flatten nested lists and sum their elements. The function will handle various data types by checking if elements are numeric before summing them. We will use Python's built-in capabilities to achieve this without additional libraries, ensuring simplicity and efficiency.\n", "requirement analysis:\nThe function should recursively traverse nested lists, flatten them, and sum all elements. It must handle various data types within lists and ensure performance efficiency.\nrequirement pool:\n- Implement recursive list flattening\n- Sum all elements of the flattened list\n- Handle edge cases like empty lists\n- Provide examples and documentation\n- Optimize for large nested lists\nWe will implement a recursive function to flatten nested lists and sum their elements. The function will handle edge cases like empty lists and non-numeric elements by ignoring non-numeric elements during summation. We will use Python's built-in capabilities to achieve this without additional libraries, ensuring simplicity and efficiency.\n"], "test": ["def check(recursive_list_sum):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "def check(recursive_list_sum):\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 2], [1, 1]]) == 15", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [5, 7], [7, 2]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [1, 5], [9, 6]]) == 29", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [5, 8], [2, 1]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [3, 8], [2, 4]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [8, 3], [3, 2]]) == 22", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [8, 1], [7, 11]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 6, [2, 8], [7, 5]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 4, [3, 3], [10, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 2], [10, 1]]) == 19", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 1, [7, 9], [2, 1]]) == 23", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [4, 8], [7, 10]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 7, [5, 7], [1, 5]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 3, [1, 9], [1, 11]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 5, [5, 8], [10, 7]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 2, [3, 6], [7, 6]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [1, 5], [4, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [7, 4], [4, 7]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 2, [5, 8], [4, 1]]) == 21", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [4, 8], [8, 8]]) == 30", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 2, [3, 9], [8, 11]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 5, [1, 7], [8, 4]]) == 31", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 7, [2, 7], [8, 4]]) == 33", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 3, [2, 6], [9, 4]]) == 25", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 7, [1, 8], [9, 11]]) == 42", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 1, [1, 9], [10, 6]]) == 28", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 4, [8, 8], [8, 6]]) == 35", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 4, [2, 6], [6, 2]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([1, 5, [4, 8], [5, 4]]) == 27", "def check(recursive_list_sum):\n\tassert recursive_list_sum([3, 6, [1, 1], [4, 5]]) == 20", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 4, [3, 9], [10, 9]]) == 40", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 6, [8, 9], [5, 3]]) == 37", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 2, [7, 1], [5, 9]]) == 26", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 8, [13, 14], [23, 46]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 13, [16, 14], [14, 36]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 14, [19, 15], [16, 40]]) == 106", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 12, [13, 18], [21, 41]]) == 112", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [14, 12], [23, 43]]) == 107", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [18, 12], [20, 36]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 9, [14, 12], [24, 39]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 11, [17, 12], [15, 41]]) == 103", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 12, [19, 15], [19, 46]]) == 121", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 12, [14, 19], [15, 38]]) == 110", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 8, [13, 15], [18, 38]]) == 101", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 11, [15, 13], [17, 40]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 15, [19, 10], [17, 42]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 12, [11, 12], [21, 46]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 10, [13, 15], [24, 45]]) == 115", "def check(recursive_list_sum):\n\tassert recursive_list_sum([2, 13, [12, 19], [15, 43]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 8, [19, 11], [15, 44]]) == 104", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [19, 18], [16, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 6, [17, 16], [16, 39]]) == 105", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 13, [20, 14], [21, 46]]) == 125", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 9, [16, 15], [20, 45]]) == 111", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 8, [11, 16], [23, 45]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 11, [11, 10], [16, 41]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 5, [18, 10], [18, 40]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 6, [12, 13], [21, 46]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [15, 9], [18, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 13, [20, 9], [22, 39]]) == 108", "def check(recursive_list_sum):\n\tassert recursive_list_sum([4, 7, [16, 15], [21, 39]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 9, [15, 19], [19, 45]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 13, [18, 19], [17, 39]]) == 113", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 15, [19, 18], [21, 37]]) == 116", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 5, [13, 19], [15, 38]]) == 102", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 10, [10, 9], [17, 40]]) == 98", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 15, [31, 43], [47, 56]]) == 203", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 19, [32, 41], [54, 64]]) == 225", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [28, 35], [55, 59]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 23, [35, 40], [54, 60]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 20, [32, 42], [45, 57]]) == 202", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 17, [26, 44], [55, 60]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 45], [51, 62]]) == 226", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [35, 37], [49, 60]]) == 208", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [27, 43], [54, 55]]) == 213", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 17, [34, 38], [49, 58]]) == 211", "def check(recursive_list_sum):\n\tassert recursive_list_sum([5, 21, [26, 44], [52, 56]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 20, [29, 43], [46, 61]]) == 206", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 25, [34, 42], [48, 57]]) == 220", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 25, [32, 40], [49, 61]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 16, [34, 36], [49, 55]]) == 196", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 23, [26, 35], [49, 57]]) == 201", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 19, [25, 42], [49, 60]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 19, [29, 41], [55, 57]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 18, [32, 37], [49, 55]]) == 204", "def check(recursive_list_sum):\n\tassert recursive_list_sum([10, 23, [28, 36], [46, 57]]) == 200", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 16, [32, 43], [53, 58]]) == 214", "def check(recursive_list_sum):\n\tassert recursive_list_sum([11, 16, [29, 45], [51, 57]]) == 209", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 15, [27, 44], [54, 57]]) == 210", "def check(recursive_list_sum):\n\tassert recursive_list_sum([15, 23, [28, 38], [52, 62]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([14, 16, [34, 42], [53, 62]]) == 221", "def check(recursive_list_sum):\n\tassert recursive_list_sum([7, 19, [25, 43], [48, 65]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([9, 25, [35, 37], [51, 58]]) == 215", "def check(recursive_list_sum):\n\tassert recursive_list_sum([8, 22, [33, 41], [51, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([6, 21, [30, 36], [45, 61]]) == 199", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 24, [27, 42], [46, 56]]) == 207", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 21, [33, 41], [48, 63]]) == 218", "def check(recursive_list_sum):\n\tassert recursive_list_sum([12, 25, [32, 41], [45, 61]]) == 216", "def check(recursive_list_sum):\n\tassert recursive_list_sum([13, 20, [35, 35], [49, 61]]) == 213"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef recursive_list_sum(nested_list: list) -> int:\n    \"\"\"Flattens a nested list and returns the sum of all numeric elements.\n\n    This function recursively traverses a potentially nested list, flattens it,\n    and sums all numeric elements, ignoring any non-numeric elements.\n\n    Args:\n        nested_list (list): A potentially nested list of elements.\n\n    Returns:\n        int: The sum of all numeric elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for element in nested_list:\n        if isinstance(element, list):\n            # Recursively sum the elements of the nested list\n            total_sum += recursive_list_sum(element)\n        elif isinstance(element, (int, float)):\n            # Add numeric elements to the total sum\n            total_sum += element\n        # Non-numeric elements are ignored\n\n    return total_sum\n\n# Example usage:\n# result = recursive_list_sum([1, 2, [3, 4], [5, 6]])\n# print(result)  # Output should be 21\n", "passed": true, "pass": true, "pass_num": 10, "round": 414, "mutate_method": "expand_one2two", "parent_index": 19}
