{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2. For instance, the sum can be expanded as n + (n-2) + (n-4)... It continues in this pattern until n-x =< 0.", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25", "assert sum_series(5) == 9", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(1) == 1", "assert sum_series(4) == 6", "assert sum_series(4) == 6", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(10) == 30", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(6) == 12", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(8) == 20", "assert sum_series(9) == 25", "assert sum_series(10) == 30", "assert sum_series(5) == 9", "assert sum_series(3) == 4", "assert sum_series(1) == 1", "assert sum_series(11) == 36", "assert sum_series(3) == 4", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(9) == 25", "assert sum_series(3) == 4", "assert sum_series(6) == 12", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(13) == 49", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(15) == 64", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(15) == 64", "assert sum_series(15) == 64", "assert sum_series(12) == 42", "assert sum_series(11) == 36", "assert sum_series(11) == 36", "assert sum_series(15) == 64", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(5) == 9", "assert sum_series(10) == 30", "assert sum_series(12) == 42", "assert sum_series(7) == 16", "assert sum_series(15) == 64", "assert sum_series(9) == 25", "assert sum_series(14) == 56", "assert sum_series(7) == 16", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(12) == 42", "assert sum_series(4) == 6", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(12) == 42", "assert sum_series(10) == 30", "assert sum_series(4) == 6", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(9) == 25", "assert sum_series(12) == 42", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(13) == 49", "assert sum_series(8) == 20", "assert sum_series(9) == 25"], "entry_point": "sum_series", "repair_prompt": ["Write a function sum_series to calculate the sum (n - 2*i) from i=0 to n // 2. For instance, the sum can be expanded as n + (n-2) + (n-4)... It continues in this pattern until n-x =< 0.\nsum_series(6)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i ranging from 0 to n//2.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 for negative values or zero.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n    \n    return total_sum\n\n# Example usage:\n# result = sum_series(5)\n# print(result)  # Output should be 9, as the series is 5 + 3 + 1\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    '''\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series.\n    '''\n    # Handle edge cases where n is less than or equal to zero\n    if n <= 0:\n        return 0\n\n    # Initialize sum variable\n    total_sum = 0\n\n    # Iterate over the series and calculate the sum\n    for i in range(n // 2 + 1):\n        current_term = n - 2 * i\n        if current_term > 0:\n            total_sum += current_term\n        else:\n            break\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i ranging from 0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 if n is negative.\n    \"\"\"\n    if n < 0:\n        return 0\n\n    series_sum = 0\n    for i in range(n // 2 + 1):\n        series_sum += (n - 2 * i)\n\n    return series_sum\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Test cases\n    print(sum_series(5))  # Expected output: 9\n    print(sum_series(10)) # Expected output: 30\n    print(sum_series(-1)) # Expected output: 0\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # If n is negative or zero, return 0 as the series has no valid terms.\n    if n <= 0:\n        return 0\n\n    total_sum = 0\n    current_value = n\n\n    # Iterate over the series, subtracting 2 from the current value each time\n    while current_value > 0:\n        total_sum += current_value\n        current_value -= 2\n\n    return total_sum\n\n# Example usage:\n# print(sum_series(10))  # Output: 30\n# print(sum_series(5))   # Output: 9\n# print(sum_series(0))   # Output: 0\n# print(sum_series(-3))  # Output: 0\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    '''\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 if n is negative.\n    '''\n    # Check if n is negative\n    if n < 0:\n        return 0\n\n    # Initialize sum to 0\n    total_sum = 0\n\n    # Iterate from 0 to n//2\n    for i in range(n // 2 + 1):\n        # Calculate term (n - 2*i)\n        term = n - 2 * i\n        # Add term to sum\n        total_sum += term\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) for i ranging from 0 to n//2.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Validate input\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Initialize sum\n    total_sum = 0\n\n    # Calculate the sum of the series\n    for i in range(n // 2 + 1):\n        total_sum += (n - 2 * i)\n\n    return total_sum\n\n# Example usage:\n# result = sum_series(10)\n# print(result)  # Output should be 30\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): The starting number of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 for negative values of n.\n    \"\"\"\n    if n < 0:\n        return 0\n\n    total_sum = 0\n    i = 0\n\n    while n - 2 * i > 0:\n        total_sum += n - 2 * i\n        i += 1\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4)... until the term is non-positive.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    # Initialize the sum to 0\n    series_sum = 0\n    \n    # Iterate through the series terms\n    while n > 0:\n        series_sum += n\n        n -= 2\n    \n    return series_sum\n\n# Example usage:\n# result = sum_series(10)\n# print(result)  # Output should be 10 + 8 + 6 + 4 + 2 = 30\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): A non-negative integer representing the starting point of the series.\n\n    Returns:\n    int: The sum of the series.\n    \n    Raises:\n    ValueError: If the input is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        current_term = n - 2 * i\n        if current_term > 0:\n            total_sum += current_term\n        else:\n            break\n\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 if n is negative.\n    \"\"\"\n    if n < 0:\n        return 0\n\n    total_sum = 0\n    i = 0\n\n    while n - 2 * i > 0:\n        total_sum += n - 2 * i\n        i += 1\n\n    return total_sum\n"], "plans": ["requirement analysis:\nThe function should efficiently calculate the sum of a series defined by the pattern (n - 2*i) for i ranging from 0 to n//2. It should handle both small and large values of n, ensuring performance and accuracy. Edge cases such as negative values or zero should be considered.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large values of n.\n- Include documentation and examples for user understanding.\n- Handle edge cases such as negative values or zero.\n- Ensure the function is easy to use and integrate.\nWe will implement a simple function sum_series that calculates the sum of the series defined by the pattern (n - 2*i) for i ranging from 0 to n//2. We will use basic Python constructs to ensure performance and accuracy. The function will handle edge cases such as negative values or zero by returning 0, as the series does not make sense for these values.\n", "requirement analysis:\nThe function should efficiently calculate the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. It should handle cases where n is negative or zero and provide accurate results.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large inputs.\n- Include documentation and examples for user understanding.\n- Handle edge cases such as negative or zero values of n.\n- Ensure the function is easy to integrate into larger projects.\nWe will implement the sum_series function using a simple loop to iterate from 0 to n//2, subtracting 2*i from n at each step. The function will handle edge cases such as negative or zero values of n by returning 0, as the series would not have any valid terms in these cases. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should efficiently compute the sum of a series defined by the pattern (n - 2*i) for i ranging from 0 to n//2. It should handle edge cases where n is small or negative and ensure performance is optimized for larger values of n.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately\n- Optimize the function for performance with large inputs\n- Ensure the function handles edge cases gracefully\n- Provide comprehensive documentation for the function\n- Include unit tests to verify function correctness\nWe will implement the sum_series function using basic arithmetic operations in Python. The function will iterate over the range from 0 to n//2, calculating the sum of the series (n - 2*i). We will ensure the function handles edge cases such as negative values of n by returning 0, as the series does not make sense for negative n. The math library will be used for basic operations, as it is efficient and easy to integrate.\n", "requirement analysis:\nThe function should efficiently calculate the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. It should handle cases where n is negative or zero, and provide accurate results for all valid inputs.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large inputs.\n- Include edge case handling for negative or zero values of n.\n- Provide documentation with examples of function usage.\n- Ensure the function is easy to integrate into existing projects.\nWe will implement a simple Python function named sum_series to calculate the sum of the series as described. The function will iterate from 0 to n//2, subtracting 2*i from n at each step. We will use basic arithmetic operations, which are efficient for this task. The function will handle edge cases where n is negative or zero by returning zero, as the series would not have any valid terms in such cases. Documentation will include examples and edge case handling.\n", "requirement analysis:\nThe function should efficiently compute the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. It should handle edge cases where n is small or negative.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large values of n.\n- Provide documentation and examples for user understanding.\n- Ensure compatibility with different Python versions.\n- Include error handling for invalid inputs.\nWe will implement a simple function using native Python to calculate the sum of the series efficiently. The function will iterate from 0 to n//2, subtracting 2*i from n at each step, and summing the results. We will ensure the function handles edge cases such as negative values of n by returning 0, as the series would not be valid in such cases. Documentation and examples will be provided for clarity.\n", "requirement analysis:\nThe function should efficiently calculate the sum of the series defined by the pattern (n - 2*i) for i ranging from 0 to n//2. It should handle edge cases where n is small or negative and provide clear documentation for users.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large values of n.\n- Include error handling for invalid inputs.\n- Provide examples and documentation for user understanding.\n- Ensure compatibility with different Python versions.\nWe will implement the sum_series function using a simple loop to iterate from 0 to n//2, calculating the sum of the series (n - 2*i). The function will include input validation to handle edge cases such as negative values of n. We will use Python's built-in capabilities to ensure compatibility across different versions and optimize performance for large values of n.\n", "requirement analysis:\nThe function should efficiently calculate the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. It should handle cases where n is small or negative gracefully.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large values of n.\n- Provide clear documentation and examples for user understanding.\n- Ensure the function handles edge cases, such as negative n.\n- Include unit tests to verify the function's correctness.\nWe will implement the sum_series function using a simple loop to iterate from 0 to n//2, calculating the sum of the series by subtracting 2*i from n at each step. We will handle edge cases such as negative values of n by returning 0, as the series does not make sense for negative n. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe requirement is to create a function that calculates the sum of a specific series pattern. The function should handle various values of n efficiently and provide accurate results. The series pattern involves decrementing by 2 until the result is non-positive.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large values of n.\n- Provide clear documentation and examples for user understanding.\n- Ensure the function handles edge cases gracefully.\n- Develop a user-friendly interface for input and output display.\nWe will implement a simple function named sum_series that calculates the sum of the series n + (n-2) + (n-4)... until the term becomes non-positive. The function will be optimized for performance by using a loop to iterate through the series terms. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should efficiently compute the sum of the series by iterating from 0 to n//2, subtracting 2*i from n at each step. The calculation should stop when n-x becomes less than or equal to zero.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large inputs.\n- Provide clear documentation and examples for user understanding.\n- Ensure compatibility with different Python versions.\n- Include error handling for invalid inputs.\nWe will implement a simple function named sum_series that iterates from 0 to n//2, calculating the sum of the series by subtracting 2*i from n at each step. The function will handle only non-negative integer inputs, as the series is not defined for negative or non-integer values. We will use Python's built-in capabilities without any additional libraries, as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should efficiently calculate the sum of the series by iterating from i=0 to n//2, subtracting 2*i from n at each step. The calculation should stop when n-x becomes less than or equal to zero.\nrequirement pool:\n- Implement the sum_series function to calculate the series sum accurately.\n- Optimize the function for performance with large values of n.\n- Provide clear documentation and examples for user understanding.\n- Ensure the function handles edge cases gracefully.\n- Develop a user-friendly interface for input and output.\nWe will implement a simple function named sum_series that iterates from i=0 to n//2, calculating the sum of the series by subtracting 2*i from n at each step. The function will handle edge cases such as negative values of n by returning 0, as the series does not make sense for negative starting values. We will use Python's built-in capabilities to ensure performance and simplicity.\n"], "test": ["def check(sum_series):\n\tassert sum_series(6)==12", "def check(sum_series):\n\tassert sum_series(10)==30", "def check(sum_series):\n\tassert sum_series(9)==25", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(14) == 56", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) ... until n-x <= 0.\n\n    Parameters:\n    n (int): The starting integer of the series.\n\n    Returns:\n    int: The sum of the series. Returns 0 if n is negative.\n    \"\"\"\n    if n < 0:\n        return 0\n\n    total_sum = 0\n    i = 0\n\n    while n - 2 * i > 0:\n        total_sum += n - 2 * i\n        i += 1\n\n    return total_sum\n", "passed": true, "pass": true, "pass_num": 10, "round": 63, "mutate_method": "expand_one2two", "parent_index": 63}
