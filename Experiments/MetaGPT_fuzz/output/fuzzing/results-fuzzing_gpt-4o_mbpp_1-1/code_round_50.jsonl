{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 120, "prompt": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "assert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "assert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "assert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "assert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "assert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "assert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "assert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "assert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "assert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "assert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "assert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "assert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "assert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "assert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "assert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "assert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "assert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "assert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "assert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "assert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "assert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "assert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "assert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "assert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "assert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "assert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "assert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "assert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "assert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "assert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "assert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "assert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "assert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "assert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "assert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "assert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "assert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "assert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "assert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "assert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "assert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "assert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "assert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "assert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "assert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "assert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "assert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "assert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "assert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "assert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "assert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "assert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "assert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "assert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "assert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "assert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "assert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "assert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "assert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "assert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "assert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "assert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "assert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "assert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "assert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "assert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "assert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "assert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "assert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "assert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "assert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "assert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "assert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "assert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "assert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "assert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "assert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "assert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "assert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "assert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "assert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "assert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "assert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "assert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "assert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "assert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "assert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "assert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "assert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "assert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "assert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "assert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "assert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "assert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "assert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "assert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "assert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "assert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "assert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "entry_point": "max_product_tuple", "repair_prompt": ["Write a function max_product_tuple to find the maximum absolute product between numbers in pairs of tuples within a given list.\nmax_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n"], "completions": ["from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"Calculate the maximum absolute product of numbers in pairs of tuples.\n\n    This function iterates through each tuple in the list, calculates the product\n    of the two numbers in each tuple, and keeps track of the maximum absolute product found.\n    It handles both positive and negative numbers efficiently.\n\n    Args:\n        tuples (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product found among the tuples.\n    \"\"\"\n    max_abs_product = 0  # Initialize the maximum absolute product to zero\n\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        \n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        \n        # Update the maximum absolute product if the current one is greater\n        if abs_product > max_abs_product:\n            max_abs_product = abs_product\n\n    return max_abs_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of integers in a list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n\n    Returns:\n    int: The maximum absolute product of any tuple in the list.\n\n    Raises:\n    ValueError: If any tuple contains non-integer values or is not a pair.\n    \"\"\"\n    if not isinstance(tuples, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_product = 0\n\n    for pair in tuples:\n        if not isinstance(pair, tuple) or len(pair) != 2:\n            raise ValueError(\"Each item in the list must be a tuple of two integers.\")\n        \n        a, b = pair\n        if not isinstance(a, int) or not isinstance(b, int):\n            raise ValueError(\"Each element in the tuple must be an integer.\")\n        \n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers in a list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing tuples of two integers.\n\n    Returns:\n    int: The maximum absolute product of any pair of numbers in the tuples.\n    \"\"\"\n    # Initialize the maximum product to a very small number\n    max_product = float('-inf')\n\n    # Iterate through each tuple in the list\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        \n        # Update the maximum product if the current product is greater\n        if abs(product) > abs(max_product):\n            max_product = product\n\n    return max_product\n\n# Unit tests to ensure functionality\ndef test_max_product_tuple():\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36, \"Test case 1 failed\"\n    assert max_product_tuple([(0, 0), (0, 1), (1, 0)]) == 0, \"Test case 2 failed\"\n    assert max_product_tuple([(-2, -3), (4, 5), (-1, 6)]) == 20, \"Test case 3 failed\"\n    assert max_product_tuple([]) == float('-inf'), \"Test case 4 failed\"\n    assert max_product_tuple([(3, 0), (0, 3)]) == 0, \"Test case 5 failed\"\n    print(\"All test cases passed!\")\n\n# Run unit tests\nif __name__ == \"__main__\":\n    test_max_product_tuple()\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of numbers in pairs of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples.\n    \"\"\"\n    max_product = 0  # Initialize the maximum product to zero\n\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum product if the current absolute product is greater\n        if abs_product > max_product:\n            max_product = abs_product\n\n    return max_product\n\n# Example usage:\n# tuples = [(1, 2), (-3, 4), (5, -6)]\n# print(max_product_tuple(tuples))  # Output should be 30\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of pairs of numbers in the given list of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list containing pairs of integers.\n\n    Returns:\n    int: The maximum absolute product found among the pairs.\n    \"\"\"\n    max_product = 0  # Initialize the maximum product to zero\n\n    for pair in tuples:\n        # Calculate the product of the current pair\n        product = pair[0] * pair[1]\n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum product if the current absolute product is greater\n        if abs_product > max_product:\n            max_product = abs_product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"Calculate the maximum absolute product of numbers in a list of tuples.\n\n    Args:\n        tuples (list[tuple[int, int]]): A list of tuples, each containing two integers.\n\n    Returns:\n        int: The maximum absolute product of the numbers in the tuples. Returns 0 for empty lists.\n    \"\"\"\n    # Initialize the maximum product to 0\n    max_product = 0\n\n    # Iterate through each tuple in the list\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        # Calculate the absolute value of the product\n        abs_product = abs(product)\n        # Update the maximum product if the current absolute product is greater\n        if abs_product > max_product:\n            max_product = abs_product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum absolute product of numbers in pairs of tuples.\n\n    Parameters:\n    tuples (list of tuple of int): A list of tuples, each containing two integers.\n\n    Returns:\n    int: The maximum absolute product of any pair of numbers in the tuples.\n    \"\"\"\n    # Initialize the maximum absolute product to zero\n    max_abs_product = 0\n\n    # Iterate through each tuple in the list\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        \n        # Update the maximum absolute product if the current product's absolute value is greater\n        max_abs_product = max(max_abs_product, abs(product))\n\n    return max_abs_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    '''\n    Calculate the maximum absolute product of numbers in pairs of tuples.\n    \n    Parameters:\n    tuples (list of tuple of int): A list containing pairs of integers.\n    \n    Returns:\n    int: The maximum absolute product of any pair of integers from the tuples.\n    \n    Raises:\n    ValueError: If the input list is empty or contains non-integer values.\n    '''\n    if not tuples:\n        raise ValueError(\"Input list is empty.\")\n    \n    max_product = 0\n    \n    for pair in tuples:\n        if not all(isinstance(x, int) for x in pair):\n            raise ValueError(\"All elements in tuples must be integers.\")\n        \n        product = pair[0] * pair[1]\n        max_product = max(max_product, abs(product))\n    \n    return max_product\n\n# Example usage:\n# result = max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n# print(result)  # Output should be 36\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"Calculate the maximum absolute product of any tuple in the list.\n\n    Args:\n        tuples: A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        An integer representing the maximum absolute product of any tuple in the list.\n\n    Raises:\n        ValueError: If a tuple contains non-numeric values.\n    \"\"\"\n    if not tuples:\n        return 0  # Return 0 for empty list as there are no products to calculate.\n\n    max_product = 0  # Initialize the maximum product to zero.\n\n    for t in tuples:\n        if len(t) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements.\")\n        \n        try:\n            # Calculate the absolute product of the two numbers in the tuple.\n            product = abs(t[0] * t[1])\n        except TypeError:\n            raise ValueError(\"Tuple elements must be integers.\")\n\n        # Update the maximum product if the current product is greater.\n        if product > max_product:\n            max_product = product\n\n    return max_product\n", "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"Calculate the maximum absolute product of pairs of numbers in a list of tuples.\n\n    This function iterates through each tuple in the list, calculates the product of the two numbers,\n    and keeps track of the maximum absolute product found. It handles both positive and negative numbers efficiently.\n\n    Parameters:\n    tuples (list of tuple of int): A list where each element is a tuple containing two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples. If the list is empty, returns 0.\n    \"\"\"\n    max_abs_product = 0  # Initialize the maximum absolute product to zero\n\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        # Update the maximum absolute product if the current product's absolute value is greater\n        max_abs_product = max(max_abs_product, abs(product))\n\n    return max_abs_product\n"], "plans": ["requirement analysis:\nThe function should iterate through each tuple, calculate the product of the two numbers, and keep track of the maximum absolute product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Ensure the function handles negative numbers correctly\n- Optimize the function for large input lists\n- Provide documentation and examples for user understanding\n- Test the function with edge cases\nWe will implement a function that iterates through each tuple in the list, calculates the product of the two numbers in each tuple, and keeps track of the maximum absolute product found. The function will handle both positive and negative numbers efficiently. We will use built-in Python functions to keep the implementation simple and efficient.\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and track the maximum absolute product. It should handle both positive and negative numbers and return the correct maximum product.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Optimize the function for performance with large datasets\n- Include error handling for invalid inputs\n- Provide detailed documentation and examples\n- Ensure compatibility with Python 3.x versions\nWe will implement a function that iterates through each tuple in the list, calculates the product of the numbers in the tuple, and tracks the maximum absolute product. The function will handle both positive and negative numbers and will include error handling for invalid inputs such as non-integer values or empty tuples. We will use Python's built-in capabilities to ensure compatibility across Python 3.x versions without relying on external libraries.\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and track the maximum absolute product. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Ensure the function handles edge cases like empty lists or tuples with zero\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Include unit tests to verify functionality\nWe will implement a function that iterates through each tuple in the list, calculates the product of the numbers in the tuple, and tracks the maximum absolute product. We will use Python's built-in functions for simplicity and efficiency. The function will handle edge cases such as empty lists and tuples containing zero. We will also provide comprehensive documentation and unit tests to ensure functionality.\n", "requirement analysis:\nThe function should iterate through each tuple in the list, calculate the absolute product of the numbers in each tuple, and return the maximum product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Optimize the function for performance with large datasets\n- Include comprehensive test cases for edge scenarios\n- Document the function usage and examples\n- Ensure compatibility with Python 3.x versions\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the numbers in each tuple, and returns the maximum product found. We will use built-in Python functions to keep the implementation simple and efficient. The function will handle both positive and negative numbers and will be optimized for performance with large datasets. We will ensure compatibility with Python 3.x versions and provide comprehensive test cases for edge scenarios.\n", "requirement analysis:\nThe function should iterate through each tuple in the list, calculate the product of the two numbers, and track the maximum absolute product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Ensure the function handles edge cases such as empty lists or tuples with zero\n- Optimize the function for performance with large datasets\n- Provide comprehensive documentation and examples\n- Include unit tests to verify function correctness\nWe will implement a function that iterates through each tuple in the list, calculates the product of the two numbers, and tracks the maximum absolute product found. We will use Python's built-in capabilities to handle the calculations efficiently without the need for external libraries, ensuring the function is lightweight and easy to integrate.\n", "requirement analysis:\nThe function should iterate through each tuple in the list, calculate the absolute product of the numbers in each tuple, and return the maximum product found. The solution should be efficient and handle edge cases such as empty lists or tuples with zero values.\nrequirement pool:\n- Implement the main function to calculate the maximum absolute product.\n- Ensure the function handles edge cases like empty lists or tuples with zero values.\n- Optimize the function for performance with large datasets.\n- Provide comprehensive documentation and examples.\n- Write unit tests to verify the function's correctness.\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the numbers in each tuple, and returns the maximum product found. We will use built-in Python functions for simplicity and efficiency. The function will handle edge cases such as empty lists and tuples with zero values by returning 0 in such cases. Negative products will be considered by taking the absolute value of the product.\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and keep track of the maximum absolute product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Ensure the function handles negative numbers correctly\n- Optimize the function for large lists\n- Provide documentation and examples\n- Test the function with edge cases\nWe will implement a function that iterates through each tuple in the list, calculates the product of the two numbers in each tuple, and keeps track of the maximum absolute product found. The function will handle both positive and negative numbers efficiently. We will use Python's built-in functions for simplicity and efficiency, as they are well-suited for this task.\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the numbers, and track the maximum absolute product. It should handle both positive and negative numbers and return the correct maximum product.\nrequirement pool:\n- Implement the main function to calculate the maximum absolute product\n- Ensure the function handles edge cases such as empty lists or tuples with zero\n- Provide documentation and examples for usage\n- Optimize the function for performance with large datasets\n- Include unit tests to verify function correctness\nWe will implement a function that iterates through each tuple in the list, calculates the product of the numbers in the tuple, and tracks the maximum absolute product. We will use Python's built-in functions to ensure compatibility across different versions and handle edge cases such as empty lists or tuples with zero. The function will be optimized for performance with large datasets and include error handling for invalid inputs.\n", "requirement analysis:\nThe function should iterate through each tuple, calculate the product of the two numbers, and keep track of the maximum product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum product\n- Optimize for performance with large datasets\n- Ensure correct handling of negative numbers\n- Provide user-friendly output format\n- Include error handling for invalid inputs\nWe will implement a function that iterates through each tuple in the list, calculates the absolute product of the two numbers in each tuple, and keeps track of the maximum product found. We will use Python's built-in functions to ensure efficient handling of both positive and negative numbers. The function will also include error handling for edge cases such as empty lists or tuples with non-numeric values.\n", "requirement analysis:\nThe function should iterate through each tuple in the list, calculate the product of the two numbers, and keep track of the maximum absolute product found. It should handle both positive and negative numbers efficiently.\nrequirement pool:\n- Implement the main function to calculate maximum absolute product\n- Optimize the function for performance with large datasets\n- Include comprehensive test cases to cover edge scenarios\n- Document the function usage and examples\n- Ensure compatibility with Python 3.x versions\nWe will implement a function that iterates through each tuple in the list, calculates the product of the two numbers, and keeps track of the maximum absolute product found. The function will handle both positive and negative numbers efficiently. We will use built-in Python functions to ensure simplicity and high usability, while also optimizing for performance with large datasets.\n"], "test": ["def check(max_product_tuple):\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "def check(max_product_tuple):\n\tassert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "def check(max_product_tuple):\n\tassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 12), (2, 4), (1, 9), (6, 6)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (3, 4), (6, 5), (2, 4)]) == 30", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 2), (3, 11), (2, 12), (4, 14)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 10), (4, 5), (5, 12), (3, 12)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 2), (1, 8), (4, 8), (8, 12)]) == 96", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 6), (2, 9), (2, 3), (2, 10)]) == 20", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 2), (1, 10), (1, 6), (5, 10)]) == 50", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 6), (1, 8), (6, 4), (9, 4)]) == 36", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (5, 3), (6, 10), (7, 7)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 7), (5, 2), (5, 12), (9, 14)]) == 126", "def check(max_product_tuple):\n\tassert max_product_tuple([(1, 3), (2, 9), (3, 9), (2, 8)]) == 27", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (2, 5), (7, 10)]) == 70", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 10), (3, 9), (6, 9), (7, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 7), (4, 8), (5, 13), (2, 7)]) == 65", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 12), (4, 6), (3, 8), (6, 6)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 3), (4, 5), (1, 9), (8, 7)]) == 56", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (6, 1), (3, 9), (3, 14)]) == 42", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 9), (2, 4), (4, 6), (6, 11)]) == 66", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 9), (3, 5), (1, 11), (6, 12)]) == 72", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (3, 1), (4, 12), (7, 9)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 5), (4, 7), (2, 8), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 8), (5, 9), (3, 7), (3, 6)]) == 45", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 3), (2, 7), (5, 4), (5, 11)]) == 55", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 3), (3, 8), (5, 7), (7, 12)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 10), (4, 7), (4, 7), (1, 10)]) == 60", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 12), (4, 3), (4, 8), (9, 7)]) == 63", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 11), (6, 9), (1, 11), (5, 12)]) == 77", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (2, 8), (1, 12), (6, 14)]) == 84", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 6), (6, 9), (2, 9), (9, 4)]) == 54", "def check(max_product_tuple):\n\tassert max_product_tuple([(3, 10), (4, 8), (2, 5), (3, 4)]) == 32", "def check(max_product_tuple):\n\tassert max_product_tuple([(2, 4), (2, 3), (1, 5), (8, 11)]) == 88", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 11), (4, 11), (3, 3), (1, 9)]) == 44", "def check(max_product_tuple):\n\tassert max_product_tuple([(4, 12), (1, 8), (4, 8), (5, 4)]) == 48", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 15), (11, 5), (9, 6)]) == 195", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 15), (17, 7), (1, 10)]) == 135", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 18), (12, 5), (5, 14)]) == 162", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 15), (15, 4), (10, 5)]) == 225", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 17), (15, 1), (8, 6)]) == 204", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 23), (15, 7), (2, 9)]) == 299", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 19), (16, 7), (3, 9)]) == 133", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 17), (20, 7), (5, 13)]) == 238", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (19, 1), (6, 5)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 25), (11, 4), (2, 11)]) == 175", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (12, 4), (6, 14)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 20), (14, 5), (4, 11)]) == 260", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (16, 2), (2, 7)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 20), (18, 4), (2, 9)]) == 140", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (17, 2), (9, 11)]) == 99", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 23), (13, 1), (5, 11)]) == 322", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 23), (16, 6), (7, 7)]) == 276", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 19), (12, 1), (7, 10)]) == 190", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 20), (19, 6), (8, 10)]) == 200", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 18), (12, 3), (10, 10)]) == 270", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 24), (18, 3), (8, 11)]) == 192", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 15), (17, 6), (3, 7)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 25), (18, 5), (6, 10)]) == 150", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 20), (13, 6), (10, 10)]) == 300", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 22), (12, 2), (9, 11)]) == 198", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 18), (13, 2), (7, 15)]) == 105", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (10, 7), (9, 11)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 19), (12, 5), (3, 5)]) == 152", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 18), (10, 1), (6, 7)]) == 216", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 18), (16, 7), (6, 7)]) == 252", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 24), (17, 3), (1, 15)]) == 360", "def check(max_product_tuple):\n\tassert max_product_tuple([(5, 22), (11, 4), (4, 13)]) == 110", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 21), (13, 6), (8, 11)]) == 315", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 42), (13, 15), (25, 8), (8, 5)]) == 420", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 45), (12, 10), (23, 8), (15, 5)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 43), (14, 18), (20, 9), (12, 13)]) == 688", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 46), (13, 16), (23, 2), (13, 9)]) == 414", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 40), (8, 16), (21, 8), (7, 14)]) == 240", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 46), (11, 15), (17, 4), (8, 11)]) == 644", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 42), (9, 20), (17, 10), (10, 4)]) == 630", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 43), (5, 15), (20, 3), (7, 6)]) == 387", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (15, 18), (20, 2), (11, 9)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 43), (13, 11), (25, 3), (10, 6)]) == 430", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 42), (11, 18), (19, 4), (10, 8)]) == 588", "def check(max_product_tuple):\n\tassert max_product_tuple([(11, 46), (13, 11), (19, 1), (11, 10)]) == 506", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 47), (14, 15), (17, 10), (10, 5)]) == 658", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 40), (15, 17), (17, 10), (11, 7)]) == 560", "def check(max_product_tuple):\n\tassert max_product_tuple([(8, 40), (8, 15), (25, 6), (8, 11)]) == 320", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 40), (11, 11), (22, 8), (16, 7)]) == 520", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 42), (13, 14), (25, 1), (13, 10)]) == 546", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 45), (12, 15), (25, 6), (15, 5)]) == 585", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 48), (12, 16), (16, 9), (14, 4)]) == 336", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 44), (11, 16), (25, 1), (11, 14)]) == 660", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 44), (8, 13), (18, 9), (13, 4)]) == 572", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (5, 18), (17, 6), (11, 14)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 41), (14, 10), (21, 10), (11, 11)]) == 410", "def check(max_product_tuple):\n\tassert max_product_tuple([(15, 45), (9, 18), (17, 7), (13, 6)]) == 675", "def check(max_product_tuple):\n\tassert max_product_tuple([(10, 49), (10, 17), (15, 5), (16, 12)]) == 490", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 48), (9, 16), (20, 6), (11, 14)]) == 576", "def check(max_product_tuple):\n\tassert max_product_tuple([(9, 47), (9, 12), (23, 7), (16, 8)]) == 423", "def check(max_product_tuple):\n\tassert max_product_tuple([(14, 44), (12, 19), (21, 1), (15, 12)]) == 616", "def check(max_product_tuple):\n\tassert max_product_tuple([(12, 40), (5, 18), (23, 10), (10, 7)]) == 480", "def check(max_product_tuple):\n\tassert max_product_tuple([(16, 40), (6, 20), (18, 3), (12, 5)]) == 640", "def check(max_product_tuple):\n\tassert max_product_tuple([(6, 48), (13, 15), (16, 5), (10, 10)]) == 288", "def check(max_product_tuple):\n\tassert max_product_tuple([(7, 44), (9, 20), (19, 8), (17, 5)]) == 308", "def check(max_product_tuple):\n\tassert max_product_tuple([(13, 46), (14, 16), (25, 10), (9, 10)]) == 598"], "scores": [1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 0, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef max_product_tuple(tuples: list[tuple[int, int]]) -> int:\n    \"\"\"Calculate the maximum absolute product of pairs of numbers in a list of tuples.\n\n    This function iterates through each tuple in the list, calculates the product of the two numbers,\n    and keeps track of the maximum absolute product found. It handles both positive and negative numbers efficiently.\n\n    Parameters:\n    tuples (list of tuple of int): A list where each element is a tuple containing two integers.\n\n    Returns:\n    int: The maximum absolute product found among the tuples. If the list is empty, returns 0.\n    \"\"\"\n    max_abs_product = 0  # Initialize the maximum absolute product to zero\n\n    for pair in tuples:\n        # Calculate the product of the two numbers in the tuple\n        product = pair[0] * pair[1]\n        # Update the maximum absolute product if the current product's absolute value is greater\n        max_abs_product = max(max_abs_product, abs(product))\n\n    return max_abs_product\n", "passed": true, "pass": true, "pass_num": 9, "round": 50, "mutate_method": "condense_two2one", "parent_index": 50}
