{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 566, "prompt": "Write a function to get the total of the digits of a non-negative integer. Ensure your solution is efficient and handles large inputs gracefully.", "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16", "assert sum_digits(344) == 11", "assert sum_digits(350) == 8", "assert sum_digits(342) == 9", "assert sum_digits(342) == 9", "assert sum_digits(341) == 8", "assert sum_digits(347) == 14", "assert sum_digits(345) == 12", "assert sum_digits(343) == 10", "assert sum_digits(341) == 8", "assert sum_digits(345) == 12", "assert sum_digits(340) == 7", "assert sum_digits(345) == 12", "assert sum_digits(347) == 14", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(344) == 11", "assert sum_digits(340) == 7", "assert sum_digits(341) == 8", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(347) == 14", "assert sum_digits(349) == 16", "assert sum_digits(348) == 15", "assert sum_digits(347) == 14", "assert sum_digits(341) == 8", "assert sum_digits(343) == 10", "assert sum_digits(343) == 10", "assert sum_digits(346) == 13", "assert sum_digits(350) == 8", "assert sum_digits(340) == 7", "assert sum_digits(349) == 16", "assert sum_digits(15) == 6", "assert sum_digits(9) == 9", "assert sum_digits(10) == 1", "assert sum_digits(12) == 3", "assert sum_digits(11) == 2", "assert sum_digits(15) == 6", "assert sum_digits(10) == 1", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(10) == 1", "assert sum_digits(13) == 4", "assert sum_digits(7) == 7", "assert sum_digits(9) == 9", "assert sum_digits(16) == 7", "assert sum_digits(15) == 6", "assert sum_digits(16) == 7", "assert sum_digits(9) == 9", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(16) == 7", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(10) == 1", "assert sum_digits(9) == 9", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(12) == 3", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(8) == 8", "assert sum_digits(13) == 4", "assert sum_digits(100) == 1", "assert sum_digits(98) == 17", "assert sum_digits(94) == 13", "assert sum_digits(92) == 11", "assert sum_digits(101) == 2", "assert sum_digits(102) == 3", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(101) == 2", "assert sum_digits(92) == 11", "assert sum_digits(95) == 14", "assert sum_digits(102) == 3", "assert sum_digits(96) == 15", "assert sum_digits(93) == 12", "assert sum_digits(96) == 15", "assert sum_digits(98) == 17", "assert sum_digits(92) == 11", "assert sum_digits(102) == 3", "assert sum_digits(100) == 1", "assert sum_digits(95) == 14", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(102) == 3", "assert sum_digits(92) == 11", "assert sum_digits(98) == 17", "assert sum_digits(97) == 16", "assert sum_digits(95) == 14", "assert sum_digits(101) == 2", "assert sum_digits(97) == 16", "assert sum_digits(100) == 1", "assert sum_digits(92) == 11", "assert sum_digits(97) == 16", "assert sum_digits(93) == 12"], "entry_point": "sum_digits", "repair_prompt": ["Write a function sum_digits to get the total of the digits of a non-negative integer. Ensure your solution is efficient and handles large inputs gracefully.\nsum_digits(345)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Example:\n    >>> sum_digits(345)\n    12\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_str = str(n)\n    \n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    example_number = 345\n    print(f\"The sum of the digits of {example_number} is {sum_digits(example_number)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    digit_str = str(n)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in digit_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    return digit_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output should be 15\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the calculated sum of digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 12345\n    print(f\"The sum of the digits of {test_number} is {sum_digits(test_number)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the total sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    n_str = str(n)\n    \n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the integer\n    for char in n_str:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the calculated sum of digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the total sum of the digits\n    return digit_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    str_n = str(n)\n    \n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in str_n:\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(char)\n    \n    # Return the calculated sum of digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_number = 12345\n    print(f\"The sum of digits in {test_number} is {sum_digits(test_number)}\")\n", "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert the character back to an integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the total sum of digits\n    return digit_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output: 15\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"Calculate the sum of the digits of a non-negative integer.\n\n    This function takes a non-negative integer and returns the sum of its digits.\n    It uses a simple iterative approach to achieve this.\n\n    Args:\n        n (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n        int: The sum of the digits of the integer.\n    \"\"\"\n    # Initialize the sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for digit in str(n):\n        # Convert the character back to an integer and add it to the sum\n        digit_sum += int(digit)\n    \n    return digit_sum\n\n# Example usage:\n# result = sum_digits(12345)\n# print(result)  # Output: 15\n", "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n\n    Example:\n    >>> sum_digits(345)\n    12\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert character to integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    example_number = 345\n    print(f\"The sum of digits in {example_number} is {sum_digits(example_number)}\")\n"], "plans": ["requirement analysis:\nThe function should efficiently calculate the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and easy to integrate into other projects.\nrequirement pool:\n- The function must handle large integers efficiently.\n- The function should be easy to understand and integrate.\n- The function should include documentation and examples.\n- The function should be tested with edge cases.\n- The function should be compatible with different Python versions.\nWe will implement a simple Python function that iterates over each digit of the input number, summing them up. This approach is efficient for large numbers as it processes each digit exactly once. We will use Python's built-in capabilities to handle large integers, ensuring compatibility across different Python versions. The function will include a docstring with usage examples and inline comments for clarity.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and maintain readability.\nrequirement pool:\n- Efficiently handle large inputs\n- Return correct sum of digits\n- Maintain code readability\n- Provide a simple interface\n- Include error handling for invalid inputs\nWe will implement a simple function that converts the integer to a string, iterates over each character, converts it back to an integer, and sums them up. This approach is efficient and handles large numbers gracefully since Python's integer type can manage arbitrarily large values. We will ensure the function is easy to read and maintain by using clear variable names and concise logic.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and maintain simplicity in its implementation.\nrequirement pool:\n- Efficiently handle large integer inputs\n- Ensure the function is easy to read and maintain\n- Optimize for performance without sacrificing simplicity\n- Provide clear documentation for the function\n- Include test cases for various input sizes\nWe will implement a simple function using Python's built-in capabilities to handle large integers efficiently. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach leverages Python's ability to handle arbitrarily large integers and ensures simplicity and readability.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and handle edge cases like zero gracefully.\nrequirement pool:\n- Implement the sum_digits function to handle large inputs efficiently.\n- Ensure the function is easy to read and maintain.\n- Optimize the function for performance with large numbers.\n- Include test cases for edge cases like zero.\n- Document the function usage and edge cases.\nWe will implement the sum_digits function using Python's built-in capabilities to handle large integers efficiently. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum these values. This approach is simple, efficient, and leverages Python's ability to handle large numbers without overflow issues.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and simplicity.\nrequirement pool:\n- The function must handle large integers efficiently.\n- The function should be easy to use and understand.\n- The function should maintain readability and maintainability.\n- The function should be tested with a variety of inputs.\n- Consider edge cases such as zero and very large numbers.\nWe will implement a simple function using Python's built-in capabilities to handle large integers efficiently. Python's integer type can manage arbitrarily large numbers, so we don't need a special library for handling large inputs. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach is straightforward and leverages Python's efficient handling of strings and integers.\n", "requirement analysis:\nThe function should efficiently sum the digits of a non-negative integer, ensuring it handles large inputs without performance degradation. The implementation should be straightforward and easy to understand, with clear documentation.\nrequirement pool:\n- Implement the sum_digits function to sum digits of a non-negative integer\n- Ensure the function handles large inputs efficiently\n- Provide comprehensive documentation for the function\n- Write unit tests to verify the function's correctness\n- Optimize the function for edge cases\nWe will implement the sum_digits function using Python's built-in capabilities to convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach is efficient and handles large inputs gracefully without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and simplicity.\nrequirement pool:\n- Implement the sum_digits function to handle large inputs efficiently.\n- Ensure the function is easy to use and understand.\n- Maintain code readability and maintainability.\n- Consider edge cases such as zero and very large numbers.\n- Optimize for performance without sacrificing simplicity.\nWe will implement the sum_digits function using Python's built-in capabilities to handle large integers efficiently. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum the digits. This approach is simple, efficient, and leverages Python's ability to handle arbitrarily large integers without overflow.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be optimized for performance and handle edge cases gracefully.\nrequirement pool:\n- Efficiently compute the sum of digits for large integers.\n- Ensure the function handles edge cases like zero.\n- Maintain code readability and simplicity.\n- Optimize for performance to handle large inputs.\n- Provide clear documentation and examples.\nWe will implement a simple function using Python's built-in capabilities to efficiently compute the sum of digits for large integers. The function will convert the integer to a string, iterate over each character, convert it back to an integer, and sum them up. This approach is efficient and handles large numbers gracefully without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. It should be easy to use and integrate into other projects, with a focus on performance and accuracy.\nrequirement pool:\n- The function must handle large integers efficiently\n- The function should return the correct sum of digits\n- The function should be easy to read and maintain\n- The function should include documentation for usage\n- The function should have test cases for validation\nWe will implement a simple iterative solution using Python's built-in capabilities to efficiently compute the sum of digits of a non-negative integer. This approach is chosen for its high efficiency and ease of understanding, making it suitable for handling large inputs gracefully without the need for additional libraries.\n", "requirement analysis:\nThe function should efficiently compute the sum of digits for any non-negative integer, including very large numbers. The solution should be optimized for performance and maintain a simple interface for ease of use.\nrequirement pool:\n- Efficiently handle large integer inputs.\n- Provide a simple and intuitive function interface.\n- Ensure the function is easy to integrate into other projects.\n- Maintain high code readability and documentation.\n- Consider edge cases such as zero and very large numbers.\nWe will implement a simple Python function that calculates the sum of digits of a non-negative integer. The function will convert the integer to a string to iterate over each digit, summing them up. This approach is efficient and handles large numbers gracefully, as Python's integer type can manage arbitrarily large values. We will ensure the function is easy to use and integrate by providing clear documentation and examples.\n"], "test": ["def check(sum_digits):\n\tassert sum_digits(345)==12", "def check(sum_digits):\n\tassert sum_digits(12)==3", "def check(sum_digits):\n\tassert sum_digits(97)==16", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(348) == 15", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(346) == 13", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(11) == 2", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(8) == 8", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(94) == 13", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(93) == 12"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_digits(number: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Parameters:\n    number (int): A non-negative integer whose digits will be summed.\n\n    Returns:\n    int: The sum of the digits of the input number.\n\n    Example:\n    >>> sum_digits(345)\n    12\n    \"\"\"\n    # Convert the number to a string to iterate over each digit\n    number_str = str(number)\n    \n    # Initialize sum to zero\n    digit_sum = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in number_str:\n        # Convert character to integer and add to the sum\n        digit_sum += int(char)\n    \n    # Return the sum of the digits\n    return digit_sum\n\n# Example usage\nif __name__ == \"__main__\":\n    example_number = 345\n    print(f\"The sum of digits in {example_number} is {sum_digits(example_number)}\")\n", "passed": true, "pass": true, "pass_num": 10, "round": 353, "mutate_method": "rephrase_one", "parent_index": 407}
