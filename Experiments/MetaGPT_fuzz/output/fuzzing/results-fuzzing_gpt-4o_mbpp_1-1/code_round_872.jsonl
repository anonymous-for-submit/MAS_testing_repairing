{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 450, "prompt": "Write a function to extract specified size of strings from a given list of string values. Ensure the function handles edge cases where strings may be shorter than the specified size and consider implementing additional checks to handle scenarios where the input list is empty or contains non-string elements.", "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "assert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "assert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "assert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "assert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "assert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "assert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "assert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "assert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "assert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "assert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "assert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "assert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "assert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "assert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "assert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "assert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "assert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "assert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "assert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "assert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "assert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "assert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "assert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "assert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "assert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "assert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "assert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "assert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "assert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "assert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "assert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "assert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "assert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "assert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "assert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "assert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "assert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "assert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "assert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "assert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "assert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "assert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "assert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "assert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "assert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "assert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "assert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "assert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "assert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "assert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "assert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "assert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "assert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "assert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "assert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "assert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "assert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "assert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "assert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "assert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "assert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "assert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "assert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "assert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "assert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "assert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "assert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "assert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "assert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "assert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "assert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "assert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "assert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "assert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "assert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "assert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "assert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "assert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "assert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "assert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "assert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "assert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "assert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "assert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "assert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "assert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "assert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "assert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "assert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "assert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "assert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "assert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "assert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "assert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "assert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "assert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "assert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "assert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "assert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "entry_point": "extract_string", "repair_prompt": ["Write a function extract_string to extract specified size of strings from a given list of string values. Ensure the function handles edge cases where strings may be shorter than the specified size and consider implementing additional checks to handle scenarios where the input list is empty or contains non-string elements.\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n"], "completions": ["from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified size from a list.\n\n    This function iterates over the input list, checks if each element is a string,\n    and then checks if its length matches the specified size. Non-string elements\n    are ignored.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings that match the specified size.\n    \"\"\"\n    # Initialize an empty list to store strings that match the specified size\n    matching_strings = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the string to the list of matching strings\n            matching_strings.append(element)\n\n    # Return the list of matching strings\n    return matching_strings\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(input_list: list, size: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    input_list (list): The list containing elements to filter.\n    size (int): The length of strings to extract.\n\n    Returns:\n    list: A list of strings that match the specified length.\n    \"\"\"\n    # Initialize an empty list to store strings of the specified length\n    result = []\n\n    # Iterate over each element in the input list\n    for element in input_list:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the string to the result list\n            result.append(element)\n\n    # Return the list of strings that match the specified length\n    return result\n\n# Example usage:\n# print(extract_string(['Python', 'list', 'exercises'], 8))  # Output: ['exercises']\n# print(extract_string([], 8))  # Output: []\n# print(extract_string(['Python', 123, 'practice'], 8))  # Output: ['practice']\n", "from typing import List\n## main.py\n\ndef extract_string(input_list: list, size: int) -> list:\n    \"\"\"\n    Extract strings from the input list that are equal to or longer than the specified size.\n\n    Parameters:\n    input_list (list): The list containing elements to be filtered.\n    size (int): The minimum length of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are equal to or longer than the specified size.\n    \"\"\"\n    if not isinstance(input_list, list):\n        raise ValueError(\"Input must be a list.\")\n    if not isinstance(size, int) or size < 0:\n        raise ValueError(\"Size must be a non-negative integer.\")\n\n    # Filter out non-string elements and strings shorter than the specified size\n    result = [element for element in input_list if isinstance(element, str) and len(element) >= size]\n\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(input_list: list, size: int) -> list:\n    \"\"\"Extracts strings of a specified length from a given list.\n\n    This function filters out non-string elements from the input list and\n    returns a list of strings that are exactly the specified length.\n\n    Args:\n        input_list (list): The list containing elements to filter.\n        size (int): The desired length of strings to extract.\n\n    Returns:\n        list: A list of strings that are exactly the specified length.\n    \"\"\"\n    # Initialize an empty list to store strings of the specified length\n    result = []\n\n    # Iterate over each element in the input list\n    for element in input_list:\n        # Check if the element is a string and its length matches the specified size\n        if isinstance(element, str) and len(element) == size:\n            # Add the string to the result list\n            result.append(element)\n\n    # Return the list of strings that match the specified length\n    return result\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified size from a list.\n\n    This function iterates over the provided list, checking each element to\n    ensure it is a string and has a length equal to or greater than the\n    specified size. Non-string elements are ignored.\n\n    Args:\n        strings (list): The list of elements to filter.\n        size (int): The minimum length of strings to extract.\n\n    Returns:\n        list: A list of strings that are at least the specified size.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string and its length is at least 'size'\n        if isinstance(element, str) and len(element) >= size:\n            # Append the valid string to the result list\n            result.append(element)\n\n    # Return the list of strings that meet the criteria\n    return result\n\n# Example usage:\n# result = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n# print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings from the list that are equal to or longer than the specified size.\n\n    This function iterates over the input list, checks each element to ensure it is a string,\n    and then checks its length against the specified size. It returns a list of strings that\n    are equal to or longer than the specified size, while ignoring non-string elements and\n    handling empty lists gracefully.\n\n    Parameters:\n    strings (list): A list containing string elements.\n    size (int): The minimum length of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are equal to or longer than the specified size.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string\n        if isinstance(element, str):\n            # Check if the string's length is equal to or longer than the specified size\n            if len(element) >= size:\n                # Add the string to the result list\n                result.append(element)\n\n    # Return the list of strings that meet the criteria\n    return result\n", "from typing import List\n## main.py\n\ndef extract_string(input_list: list, size: int) -> list:\n    \"\"\"\n    Extracts strings from the input list that are equal to or longer than the specified size.\n\n    Parameters:\n    input_list (list): The list of elements to filter.\n    size (int): The minimum length of strings to extract.\n\n    Returns:\n    list: A list of strings that are equal to or longer than the specified size.\n    \"\"\"\n    # Validate input types\n    if not isinstance(input_list, list):\n        raise TypeError(\"input_list must be a list\")\n    if not isinstance(size, int):\n        raise TypeError(\"size must be an integer\")\n\n    # Use list comprehension to filter strings and check their length\n    result = [element for element in input_list if isinstance(element, str) and len(element) >= size]\n\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    example_list = ['Python', 'list', 'exercises', 'practice', 'solution']\n    min_length = 8\n    filtered_strings = extract_string(example_list, min_length)\n    print(filtered_strings)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings from the input list that have a length equal to or greater than the specified size.\n\n    Parameters:\n    strings (list): A list containing string elements.\n    size (int): The minimum length of strings to be extracted.\n\n    Returns:\n    list: A list of strings that are of the specified length or longer.\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list):\n        raise TypeError(\"The 'strings' parameter must be a list.\")\n    if not isinstance(size, int):\n        raise TypeError(\"The 'size' parameter must be an integer.\")\n\n    # Use list comprehension to filter strings based on the specified length\n    filtered_strings = [s for s in strings if isinstance(s, str) and len(s) >= size]\n\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    min_length = 8\n    result = extract_string(example_strings, min_length)\n    print(result)  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"\n    Extract strings of a specified length from a list.\n\n    Parameters:\n    strings (list): The list of elements to process.\n    size (int): The length of strings to extract.\n\n    Returns:\n    list: A list of strings that are of the specified length.\n    \"\"\"\n    # Initialize an empty list to store strings of the specified length\n    result = []\n\n    # Iterate over each element in the input list\n    for element in strings:\n        # Check if the element is a string\n        if isinstance(element, str):\n            # Check if the string's length matches the specified size\n            if len(element) == size:\n                # Add the string to the result list\n                result.append(element)\n\n    # Return the list of strings that match the specified length\n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    test_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    test_size = 8\n    print(extract_string(test_strings, test_size))  # Output: ['practice', 'solution']\n", "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified length from a list.\n\n    This function filters and returns strings from the input list that match\n    the specified length. It handles edge cases such as empty lists and\n    non-string elements by using Python's built-in capabilities.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The length of strings to be extracted.\n\n    Returns:\n        list: A list of strings that are of the specified length.\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list):\n        raise TypeError(\"The 'strings' parameter must be a list.\")\n    if not isinstance(size, int):\n        raise TypeError(\"The 'size' parameter must be an integer.\")\n\n    # Filter strings based on the specified length\n    filtered_strings = [s for s in strings if isinstance(s, str) and len(s) == size]\n\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    length = 8\n    result = extract_string(example_strings, length)\n    print(result)  # Output: ['practice', 'solution']\n"], "plans": ["requirement analysis:\nThe function should efficiently filter strings based on length, handle empty lists, and ignore non-string elements. It should be optimized for performance while maintaining simplicity and readability.\nrequirement pool:\n- Handle empty list inputs gracefully\n- Ignore non-string elements in the list\n- Optimize performance for large lists\n- Ensure code readability and simplicity\n- Provide clear error messages for invalid inputs\nWe will implement a function named `extract_string` that iterates over the input list, checks if each element is a string, and then checks if its length matches the specified size. The function will handle edge cases such as empty lists and non-string elements by ignoring non-string elements and returning an empty list if no strings match the specified size. We will use Python's built-in capabilities to ensure simplicity and performance.\n", "requirement analysis:\nThe function should efficiently filter strings based on a specified length, handle empty lists, and ignore non-string elements. It should be optimized for performance and include comprehensive error handling.\nrequirement pool:\n- Implement the main function to extract strings of a specified length.\n- Ensure the function handles empty lists without errors.\n- Include checks to ignore non-string elements in the input list.\n- Optimize the function for performance with large datasets.\n- Provide detailed documentation and examples for users.\nWe will implement a function named `extract_string` that takes a list of elements and an integer specifying the desired string length. The function will filter out strings that match the specified length, handle empty lists gracefully, and ignore non-string elements. We will use Python's built-in capabilities to achieve this, ensuring the function is efficient and easy to understand. The function will return an empty list if no strings match the criteria or if the input list is empty.\n", "requirement analysis:\nThe function should efficiently filter strings based on length, handle empty lists, and ignore non-string elements. It should provide clear error messages for invalid inputs and be easy to integrate into existing codebases.\nrequirement pool:\n- Implement the main function to extract strings of specified length\n- Ensure the function handles empty lists and non-string elements\n- Optimize performance for large input lists\n- Provide clear error messages for invalid inputs\n- Maintain simplicity and readability of code\nWe will implement a function named `extract_string` that takes a list of elements and an integer specifying the desired string length. The function will filter out non-string elements and return a list of strings that are equal to or longer than the specified length. We will handle edge cases such as empty lists and provide clear error messages for invalid inputs. The function will be simple and efficient, leveraging Python's built-in capabilities.\n", "requirement analysis:\nThe function should efficiently filter strings based on length, handle empty lists, and ignore non-string elements. It should be optimized for performance and include comprehensive error handling.\nrequirement pool:\n- Implement the main function to extract strings of a specified length.\n- Ensure the function handles empty lists without errors.\n- Include checks to ignore non-string elements in the input list.\n- Optimize the function for performance with large datasets.\n- Provide detailed documentation and examples for users.\nWe will implement a function named `extract_string` that takes a list of elements and an integer specifying the desired string length. The function will filter out non-string elements and return a list of strings that match the specified length. It will handle edge cases such as empty input lists and strings shorter than the specified length. We will use Python's built-in capabilities to ensure performance and simplicity, avoiding additional dependencies.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, handling edge cases such as empty lists and non-string elements. It should be optimized for performance and maintain simplicity in its implementation.\nrequirement pool:\n- Handle empty list inputs gracefully\n- Ignore non-string elements in the list\n- Optimize for performance with large lists\n- Ensure code readability and simplicity\n- Provide clear error messages for invalid inputs\nWe will implement a function named `extract_string` that takes a list of elements and an integer specifying the desired string length. The function will iterate over the list, checking each element to ensure it is a string and has a length equal to or greater than the specified size. Non-string elements will be ignored, and the function will handle empty lists gracefully by returning an empty list. We will use Python's built-in capabilities to achieve this, ensuring simplicity and performance.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, handling edge cases such as empty lists and non-string elements. It should also ensure that strings shorter than the specified length are not included in the output.\nrequirement pool:\n- Implement the main extraction logic\n- Handle empty list scenarios\n- Ignore non-string elements\n- Optimize for performance\n- Ensure code readability\nWe will implement a function named extract_string that iterates over the input list, checks each element to ensure it is a string, and then checks its length against the specified size. We will use Python's built-in capabilities to handle these operations efficiently. The function will return a list of strings that are equal to or longer than the specified size, while ignoring non-string elements and handling empty lists gracefully.\n", "requirement analysis:\nThe function should efficiently filter strings based on a specified length, handle empty lists, and ignore non-string elements. It should be optimized for performance and include comprehensive error handling.\nrequirement pool:\n- Implement the main function to extract strings of a specified length.\n- Ensure the function handles empty lists without errors.\n- Ignore non-string elements in the input list.\n- Optimize the function for performance with large datasets.\n- Provide detailed documentation and examples.\nWe will implement a function named `extract_string` that takes a list of elements and an integer specifying the desired string length. The function will filter out non-string elements and return a list of strings that are equal to or longer than the specified length. We will handle edge cases such as empty input lists and lists with no valid strings by returning an empty list. The function will be optimized for performance by using list comprehensions, which are efficient for filtering operations in Python.\n", "requirement analysis:\nThe function should efficiently filter strings based on length, handle empty lists, and ignore non-string elements. It should be optimized for performance and include comprehensive error handling.\nrequirement pool:\n- Implement the main function to extract strings of a specified length.\n- Handle edge cases such as empty lists and non-string elements.\n- Optimize the function for performance with large datasets.\n- Provide detailed documentation and examples.\n- Include unit tests to ensure reliability.\nWe will implement a function named `extract_string` that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by ignoring them. We will use Python's built-in capabilities to ensure performance and simplicity. The function will be optimized for performance with large datasets by using list comprehensions.\n", "requirement analysis:\nThe function should efficiently extract strings of a specified length from a list, handling edge cases such as empty lists and non-string elements. It should also ensure that strings shorter than the specified length are not included in the output.\nrequirement pool:\n- Implement the main extraction logic\n- Handle empty list inputs\n- Ignore non-string elements in the list\n- Optimize for performance with large lists\n- Ensure code readability and simplicity\nWe will implement a function named extract_string that iterates over the input list, checks each element to ensure it is a string, and then checks its length against the specified size. We will use Python's built-in capabilities to handle these operations efficiently. The function will return an empty list if the input list is empty or if no strings meet the specified length criteria. We will ensure the function is simple and readable, with comments explaining key parts of the code.\n", "requirement analysis:\nThe function should efficiently filter strings based on a specified length, handle empty lists, and ignore non-string elements. It should be optimized for performance and include comprehensive error handling.\nrequirement pool:\n- Implement the main function to extract strings of a specified length.\n- Ensure the function handles empty lists without errors.\n- Ignore non-string elements in the input list.\n- Optimize the function for performance with large datasets.\n- Provide detailed documentation and examples.\nWe will implement a function named extract_string that filters strings from a list based on a specified length. The function will handle edge cases such as empty lists and non-string elements by using Python's built-in capabilities. We will use list comprehensions for efficient filtering and ensure the function is optimized for performance with large datasets.\n"], "test": ["def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "def check(extract_string):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "def check(extract_string):\n\tassert extract_string(['jKZxOlbTaCu', 'zidnr', 'xltfgdxamss', 'smtiqxdjc', 'mgtwbidx'], 10) == []", "def check(extract_string):\n\tassert extract_string(['Zhe', 'izedzf', 'ovwmfog', 'qsoizovqmp', 'ldrggernh'], 12) == []", "def check(extract_string):\n\tassert extract_string(['BApRsE', 'gqofblu', 'obikzivdtqfgyua', 'ekuizhhfbzgj', 'ehgisf'], 9) == []", "def check(extract_string):\n\tassert extract_string(['jNGUkWdPB', 'avmpxwx', 'yshaiwxgetv', 'xpuoyfeyiss', 'ezghlnx'], 3) == []", "def check(extract_string):\n\tassert extract_string(['dlpzCg', 'nnkxwjvcj', 'uckxhf', 'org', 'ngeiwjld'], 9) == ['nnkxwjvcj']", "def check(extract_string):\n\tassert extract_string(['qiLnBlBVj', 'aqfmgu', 'ogfajlf', 'nkpjspnrglch', 'onrbz'], 13) == []", "def check(extract_string):\n\tassert extract_string(['EXe', 'rvorn', 'tdmsbycpjsqf', 'tpycx', 'ekxvplpan'], 5) == ['rvorn', 'tpycx']", "def check(extract_string):\n\tassert extract_string(['wlRv', 'jlakv', 'rcaholmfvpcr', 'yqyk', 'hnizdsxozl'], 3) == []", "def check(extract_string):\n\tassert extract_string(['IxdWseMF', 'hxcmql', 'umjmrklebwoo', 'lzxlgcf', 'fnivue'], 11) == []", "def check(extract_string):\n\tassert extract_string(['iHGsQqvLWN', 'yjp', 'jgwnkuveyqxvwtk', 'vamwzd', 'srubdizrzf'], 4) == []", "def check(extract_string):\n\tassert extract_string(['NqOFuIkkLvfy', 'ppqws', 'xiphudcfbbjepny', 'aarbeuq', 'gstx'], 12) == ['NqOFuIkkLvfy']", "def check(extract_string):\n\tassert extract_string(['njVBD', 'zkglez', 'etwmrmolooxmx', 'yoismcx', 'uejkcgiizjdm'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TuKjvortMDW', 'mykzhqsi', 'kedodjdilijtczg', 'fhmhkqihbgq', 'dkv'], 3) == ['dkv']", "def check(extract_string):\n\tassert extract_string(['cfAjjBcyAZ', 'npqki', 'qcaxrrzmkpynti', 'ickyesvysq', 'hfwbnabmrhnu'], 11) == []", "def check(extract_string):\n\tassert extract_string(['uilztUqcfYT', 'dcykggdb', 'zyxuhhkfpxu', 'ohonoifypmim', 'jkuhtm'], 6) == ['jkuhtm']", "def check(extract_string):\n\tassert extract_string(['xRyIDvJIkLAL', 'dgtfbavd', 'qjzxkfp', 'itudjtqnwa', 'koop'], 7) == ['qjzxkfp']", "def check(extract_string):\n\tassert extract_string(['UTIaeel', 'fwidoza', 'kqodrsniaucvrw', 'bzwvhqzdxmu', 'pcgyemagtz'], 8) == []", "def check(extract_string):\n\tassert extract_string(['hBHPytxSSPZD', 'xpn', 'fraakn', 'wlgcplz', 'kcf'], 8) == []", "def check(extract_string):\n\tassert extract_string(['cTNkh', 'qcyluhgvt', 'adaovka', 'gcqlvlu', 'qbu'], 4) == []", "def check(extract_string):\n\tassert extract_string(['puoQ', 'hpg', 'dwgsvnijfcxsac', 'jgwtzbnbok', 'onhhojymv'], 5) == []", "def check(extract_string):\n\tassert extract_string(['qFRztkZpcXZQ', 'jzu', 'ytptnt', 'dzkegjhb', 'xgka'], 3) == ['jzu']", "def check(extract_string):\n\tassert extract_string(['ZpnDIzn', 'yrv', 'jeuzpwufhmpjdd', 'vtebtv', 'bxj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['uPmaLpDnHDY', 'yccg', 'yfsthyrcjlepqx', 'trm', 'usiiat'], 11) == ['uPmaLpDnHDY']", "def check(extract_string):\n\tassert extract_string(['yJoWsqXW', 'fpjlbg', 'dztsakosic', 'yuvjqanlxhmx', 'nxjnmosfyb'], 12) == ['yuvjqanlxhmx']", "def check(extract_string):\n\tassert extract_string(['uhnhSKLTHv', 'xxcqj', 'lgqmhnyimzmnx', 'uqtheqbvmt', 'vofocpbodgrj'], 10) == ['uhnhSKLTHv', 'uqtheqbvmt']", "def check(extract_string):\n\tassert extract_string(['sbdnssDPvP', 'spx', 'gmbegpimvqfg', 'szaaxcpbi', 'ytiupavt'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WANM', 'rdjbp', 'lecfmv', 'bshpflmlhmu', 'qtl'], 12) == []", "def check(extract_string):\n\tassert extract_string(['IkT', 'aka', 'ccixezbmy', 'jyokaqmodc', 'dzlkcqwskxpd'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRuUWlOFAaa', 'dbl', 'zsisxpmhlzbhns', 'moao', 'rohvglzgfj'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NsU', 'wxrox', 'zniqnpguf', 'tdudqqqynk', 'asqjfqbx'], 5) == ['wxrox']", "def check(extract_string):\n\tassert extract_string(['ZLudB', 'nuky', 'nynnor', 'glt', 'asegimcqbi'], 5) == ['ZLudB']", "def check(extract_string):\n\tassert extract_string(['jGJERDGVKYi', 'bkrstpsh', 'fwhysjwnvwqdnec', 'axhnclpuq', 'usjxvfmb'], 7) == []", "def check(extract_string):\n\tassert extract_string(['NNXY', 'vjwxzvj', 'aczciavhppbwcc', 'fgktlykw', 'jdqva'], 9) == []", "def check(extract_string):\n\tassert extract_string(['oGcmYUri', 'okxyz', 'qmbhowtfpqza', 'atgwvceh', 'tmji'], 2) == []", "def check(extract_string):\n\tassert extract_string(['ORulboIGPk', 'nqpachx', 'ifopccvpslnarb', 'rybhhlyb', 'lmbqgslrbtss'], 8) == ['rybhhlyb']", "def check(extract_string):\n\tassert extract_string(['DMAGPTjNl', 'bawiyko', 'ktasnut', 'jykrjrem', 'ftzdocnr'], 1) == []", "def check(extract_string):\n\tassert extract_string(['RjjNLI', 'kwnmigrvg', 'vktqhugw', 'ptjt', 'vixoimmdtf'], 10) == ['vixoimmdtf']", "def check(extract_string):\n\tassert extract_string(['HOLaaJtY', 'vhowitgg', 'jgpbpjmr', 'gjtszex', 'jvlojhwystev'], 5) == []", "def check(extract_string):\n\tassert extract_string(['lFaS', 'acfencxp', 'yehlorakttvx', 'fdhgagzepi', 'xypgmb'], 6) == ['xypgmb']", "def check(extract_string):\n\tassert extract_string(['eFrN', 'lad', 'ohabvssqo', 'pqucnc', 'kbd'], 1) == []", "def check(extract_string):\n\tassert extract_string(['pdh', 'bzpdbquby', 'obijxkxyggvuplg', 'fqwtrycrlykp', 'bsejeldtfyx'], 4) == []", "def check(extract_string):\n\tassert extract_string(['mXlWvciwAss', 'krq', 'hdnspxvczv', 'gclwusih', 'kxdngh'], 8) == ['gclwusih']", "def check(extract_string):\n\tassert extract_string(['VwTnATgEQ', 'kvaps', 'aappnineaqihdur', 'sbcur', 'kieiypucajbh'], 4) == []", "def check(extract_string):\n\tassert extract_string(['eHG', 'kwplmaur', 'nntcsofm', 'kijhbcmaod', 'tlyig'], 5) == ['tlyig']", "def check(extract_string):\n\tassert extract_string(['uhHIh', 'mwyjvyuid', 'ixrvfhdc', 'oroolrhw', 'dgsvq'], 9) == ['mwyjvyuid']", "def check(extract_string):\n\tassert extract_string(['CnKkr', 'xnfmwjthj', 'abjwmem', 'pczh', 'onmjfs'], 2) == []", "def check(extract_string):\n\tassert extract_string(['eVBNi', 'zyz', 'ogrildsjfpevn', 'lslyorggn', 'unqvawyz'], 4) == []", "def check(extract_string):\n\tassert extract_string(['llwsMBCqN', 'vwdh', 'ccabxbhtfvscg', 'bflsrutzs', 'hszmgzudedn'], 10) == []", "def check(extract_string):\n\tassert extract_string(['FfEx', 'bodzqjn', 'wxwouraulxh', 'roy', 'slsnypjspyw'], 5) == []", "def check(extract_string):\n\tassert extract_string(['WehfmOw', 'tbduqrcmn', 'lzjmrvxzvcpmku', 'xerbwpk', 'aka'], 1) == []", "def check(extract_string):\n\tassert extract_string(['arFJSEi', 'ajuxxh', 'jcbulfhzdljftca', 'jbkqkjzoi', 'pdcpbp'], 6) == ['ajuxxh', 'pdcpbp']", "def check(extract_string):\n\tassert extract_string(['yaXZCHRpL', 'szdsugfte', 'zsxbsjdl', 'efgmhlkpyq', 'cuckfgasiu'], 6) == []", "def check(extract_string):\n\tassert extract_string(['TykKJEXmfsCu', 'bndi', 'vwavjd', 'mbkwy', 'ivtembvxnxx'], 1) == []", "def check(extract_string):\n\tassert extract_string(['Yapm', 'isrlw', 'krujpqxalbfnc', 'aeqr', 'jerboootja'], 4) == ['Yapm', 'aeqr']", "def check(extract_string):\n\tassert extract_string(['kmdQxSk', 'gywfg', 'znhbvbrsnapwfn', 'phhyui', 'trw'], 1) == []", "def check(extract_string):\n\tassert extract_string(['lQz', 'irvtzrg', 'ehwoss', 'zvpqa', 'asvy'], 11) == []", "def check(extract_string):\n\tassert extract_string(['lkUQsj', 'xjhfwgrp', 'hlfcmp', 'qur', 'qhgjx'], 2) == []", "def check(extract_string):\n\tassert extract_string(['jlIvP', 'hdojcyh', 'jeoagmoa', 'lbpvdwentuch', 'dcnqo'], 8) == ['jeoagmoa']", "def check(extract_string):\n\tassert extract_string(['cTwyLkLvRoj', 'ykjtxbr', 'lqvjtx', 'yecbleuj', 'wnqxghdb'], 7) == ['ykjtxbr']", "def check(extract_string):\n\tassert extract_string(['hccEwgC', 'yjd', 'uokzwcczpvsb', 'bmvhgx', 'svrn'], 8) == []", "def check(extract_string):\n\tassert extract_string(['tpOa', 'dvq', 'lrpuecccgluizma', 'iftaa', 'fkjihu'], 1) == []", "def check(extract_string):\n\tassert extract_string(['KwnZ', 'eksebeodh', 'imodlc', 'cjhrj', 'mdyl'], 10) == []", "def check(extract_string):\n\tassert extract_string(['JvhxG', 'sjgsj', 'sxnqqqnili', 'vuy', 'mlwsvyfrphc'], 10) == ['sxnqqqnili']", "def check(extract_string):\n\tassert extract_string(['QdhSmsLAubVU', 'xbzqhulx', 'acbusubjn', 'mkfynjoz', 'atrmdmupltad'], 8) == ['xbzqhulx', 'mkfynjoz']", "def check(extract_string):\n\tassert extract_string(['CFwdBijf', 'kxa', 'fbjigawanb', 'llmefz', 'ecgyjxis'], 5) == []", "def check(extract_string):\n\tassert extract_string(['tQRJyzpFM', 'hwcz', 'geqtutltlxclil', 'kqeq', 'hkzxmnhvl'], 11) == []", "def check(extract_string):\n\tassert extract_string(['fRtPMnFd', 'lzezfaako', 'svxwfxhviowej', 'binvjageuybm', 'wljmkfwxu'], 7) == []", "def check(extract_string):\n\tassert extract_string(['QtklXVEQ', 'sacklcoq', 'smtmlthfiggeez', 'luao', 'ssmg'], 12) == []", "def check(extract_string):\n\tassert extract_string(['deRs', 'ypy', 'khxcxlsyhupvr', 'hrhojwmvzni', 'mkhijhwhrqsh'], 11) == ['hrhojwmvzni']", "def check(extract_string):\n\tassert extract_string(['tjDdGemi', 'zapfi', 'qkugnxqldrvg', 'gmoisdvdipbj', 'kgkrtucybilr'], 6) == []", "def check(extract_string):\n\tassert extract_string(['FPRXokkiErxM', 'zbxvjcuy', 'gylahjlnsfkam', 'vics', 'uqucacmltwy'], 8) == ['zbxvjcuy']", "def check(extract_string):\n\tassert extract_string(['pDBwDagBZz', 'itkxwqwxj', 'jufssdmqu', 'totoaqcocf', 'xae'], 11) == []", "def check(extract_string):\n\tassert extract_string(['TtAKb', 'iscr', 'ookgzgmsdffim', 'ltnpjnzfheb', 'nyysgpfsaw'], 9) == []", "def check(extract_string):\n\tassert extract_string(['zOBfcS', 'edquwnacz', 'mqdrbqk', 'nfta', 'oyj'], 11) == []", "def check(extract_string):\n\tassert extract_string(['gKHJi', 'kbujwgh', 'rpjyedpkg', 'vhxou', 'ugzmlp'], 14) == []", "def check(extract_string):\n\tassert extract_string(['msMrNGiA', 'vigojgqu', 'xtunpubkjxy', 'nafguzepvwk', 'iqpwig'], 10) == []", "def check(extract_string):\n\tassert extract_string(['QOMl', 'buebmomjw', 'puvytkdimonvwqs', 'qjwemc', 'zncgi'], 10) == []", "def check(extract_string):\n\tassert extract_string(['OzZPPlug', 'eufydot', 'jwtnas', 'lwesfhjnl', 'rolj'], 12) == []", "def check(extract_string):\n\tassert extract_string(['HpEgWRuGZ', 'atfcuqi', 'uobifsuhulkv', 'nfbiigw', 'mybnvveeky'], 4) == []", "def check(extract_string):\n\tassert extract_string(['zNpPqeHKTkRB', 'vjexpy', 'wijkiitcrpmnpue', 'xzqlmwaybow', 'jfgrdquowzj'], 4) == []", "def check(extract_string):\n\tassert extract_string(['CNEuyxKYgY', 'tjbgflieo', 'ztvzcg', 'bcn', 'apa'], 7) == []", "def check(extract_string):\n\tassert extract_string(['bkqRrG', 'mrc', 'zqpcdchvwc', 'eobojonbo', 'irglaue'], 6) == ['bkqRrG']", "def check(extract_string):\n\tassert extract_string(['yKZHIbqUcOf', 'vbap', 'temtsdkvmfyg', 'vgholm', 'nxwoi'], 7) == []", "def check(extract_string):\n\tassert extract_string(['OSqDpECc', 'grkaor', 'dcoxnpueknq', 'vsxautphmnva', 'rgbe'], 4) == ['rgbe']", "def check(extract_string):\n\tassert extract_string(['mIL', 'eytiuuru', 'ptzhwvxaydbedh', 'odolwiqs', 'anpdogtsmhme'], 10) == []", "def check(extract_string):\n\tassert extract_string(['uIkcyo', 'wwbgeb', 'xalrsw', 'juroqql', 'oxgohi'], 5) == []", "def check(extract_string):\n\tassert extract_string(['hCAkU', 'zajv', 'umevtcvsbemxgc', 'jeshwtrlp', 'coydeatcexx'], 5) == ['hCAkU']", "def check(extract_string):\n\tassert extract_string(['QiusjluDm', 'ixzuyi', 'afosdjxofjrgw', 'eoesfb', 'cnigxqut'], 8) == ['cnigxqut']", "def check(extract_string):\n\tassert extract_string(['cDaTdqPRiIJO', 'ytyzqtm', 'qbduwkn', 'bpfoeymufcx', 'secwkqsv'], 12) == ['cDaTdqPRiIJO']", "def check(extract_string):\n\tassert extract_string(['OtUxgXLi', 'alcta', 'fpzycv', 'smzlsvido', 'sfndgj'], 9) == ['smzlsvido']", "def check(extract_string):\n\tassert extract_string(['CXyvrbK', 'pkcadm', 'zugxlqlajsktm', 'jffbzxek', 'olyjh'], 7) == ['CXyvrbK']", "def check(extract_string):\n\tassert extract_string(['hAXrI', 'lgpwinx', 'fmbosrqdourfu', 'irnrvikoztpy', 'xxell'], 7) == ['lgpwinx']", "def check(extract_string):\n\tassert extract_string(['XUKRrkUPdle', 'qdqu', 'ggcdbhho', 'pnkegk', 'kbkwatjzkwf'], 11) == ['XUKRrkUPdle', 'kbkwatjzkwf']", "def check(extract_string):\n\tassert extract_string(['wodZDBBP', 'urpypeilp', 'acabxqj', 'qaasiyjgl', 'ligawovb'], 8) == ['wodZDBBP', 'ligawovb']", "def check(extract_string):\n\tassert extract_string(['RGYEVnw', 'necptvhl', 'aorjemubsk', 'unpkc', 'zydxygap'], 10) == ['aorjemubsk']", "def check(extract_string):\n\tassert extract_string(['TMXzNPgP', 'slldo', 'ntuphclibkh', 'osqwqb', 'moi'], 4) == []", "def check(extract_string):\n\tassert extract_string(['EoZ', 'qyfypovk', 'ourfcn', 'jwz', 'llqxtppzt'], 14) == []", "def check(extract_string):\n\tassert extract_string(['RIawmwjQdirR', 'pnhet', 'mywjfndfwl', 'nym', 'idsgtty'], 8) == []", "def check(extract_string):\n\tassert extract_string(['Eip', 'qgccnc', 'ujgeifgzrsxmuvw', 'fism', 'ifnn'], 13) == []"], "scores": [1.0, 1.0, 0.1863, 1.0, 0.1863, 0.1863, 0.1863, 0.1863, 1.0, 1.0], "pass_results": [true, true, false, true, false, false, false, false, true, true], "pass_test_cases_num": [102, 102, 19, 102, 19, 19, 19, 19, 102, 102], "completion": "from typing import List\n## main.py\n\ndef extract_string(strings: list, size: int) -> list:\n    \"\"\"Extract strings of a specified length from a list.\n\n    This function filters and returns strings from the input list that match\n    the specified length. It handles edge cases such as empty lists and\n    non-string elements by using Python's built-in capabilities.\n\n    Args:\n        strings (list): A list containing string elements.\n        size (int): The length of strings to be extracted.\n\n    Returns:\n        list: A list of strings that are of the specified length.\n    \"\"\"\n    # Validate input types\n    if not isinstance(strings, list):\n        raise TypeError(\"The 'strings' parameter must be a list.\")\n    if not isinstance(size, int):\n        raise TypeError(\"The 'size' parameter must be an integer.\")\n\n    # Filter strings based on the specified length\n    filtered_strings = [s for s in strings if isinstance(s, str) and len(s) == size]\n\n    return filtered_strings\n\n# Example usage\nif __name__ == \"__main__\":\n    example_strings = ['Python', 'list', 'exercises', 'practice', 'solution']\n    length = 8\n    result = extract_string(example_strings, length)\n    print(result)  # Output: ['practice', 'solution']\n", "passed": true, "pass": true, "pass_num": 5, "round": 872, "mutate_method": "condense_two2one", "parent_index": 538}
