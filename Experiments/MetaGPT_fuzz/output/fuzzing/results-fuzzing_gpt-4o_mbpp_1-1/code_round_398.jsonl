{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 638, "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius. Ensure that the function handles and returns correct values for a variety of input scenarios, including edge cases.", "code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,70)==86", "assert wind_chill(10,100)==116", "assert wind_chill(116, 30) == 33", "assert wind_chill(122, 32) == 36", "assert wind_chill(125, 32) == 36", "assert wind_chill(123, 32) == 36", "assert wind_chill(124, 38) == 45", "assert wind_chill(118, 40) == 48", "assert wind_chill(122, 33) == 37", "assert wind_chill(115, 34) == 39", "assert wind_chill(116, 33) == 37", "assert wind_chill(117, 39) == 46", "assert wind_chill(125, 31) == 34", "assert wind_chill(125, 39) == 46", "assert wind_chill(124, 39) == 46", "assert wind_chill(118, 33) == 37", "assert wind_chill(117, 32) == 36", "assert wind_chill(118, 35) == 40", "assert wind_chill(121, 32) == 36", "assert wind_chill(119, 31) == 34", "assert wind_chill(124, 37) == 43", "assert wind_chill(118, 32) == 36", "assert wind_chill(115, 40) == 48", "assert wind_chill(125, 38) == 45", "assert wind_chill(125, 36) == 42", "assert wind_chill(122, 32) == 36", "assert wind_chill(122, 34) == 39", "assert wind_chill(121, 40) == 48", "assert wind_chill(117, 38) == 45", "assert wind_chill(123, 36) == 42", "assert wind_chill(117, 36) == 42", "assert wind_chill(120, 33) == 37", "assert wind_chill(116, 39) == 46", "assert wind_chill(122, 40) == 48", "assert wind_chill(124, 31) == 34", "assert wind_chill(38, 69) == 85", "assert wind_chill(39, 69) == 85", "assert wind_chill(38, 73) == 90", "assert wind_chill(45, 69) == 85", "assert wind_chill(38, 73) == 90", "assert wind_chill(39, 69) == 85", "assert wind_chill(42, 71) == 88", "assert wind_chill(38, 72) == 89", "assert wind_chill(42, 66) == 81", "assert wind_chill(45, 73) == 91", "assert wind_chill(41, 73) == 90", "assert wind_chill(39, 73) == 90", "assert wind_chill(43, 70) == 87", "assert wind_chill(45, 65) == 80", "assert wind_chill(39, 66) == 81", "assert wind_chill(45, 67) == 83", "assert wind_chill(45, 70) == 87", "assert wind_chill(44, 72) == 89", "assert wind_chill(43, 68) == 84", "assert wind_chill(39, 70) == 86", "assert wind_chill(39, 70) == 86", "assert wind_chill(40, 72) == 89", "assert wind_chill(38, 71) == 87", "assert wind_chill(44, 69) == 85", "assert wind_chill(41, 67) == 82", "assert wind_chill(37, 73) == 90", "assert wind_chill(43, 69) == 85", "assert wind_chill(43, 75) == 93", "assert wind_chill(40, 73) == 90", "assert wind_chill(40, 66) == 81", "assert wind_chill(41, 71) == 88", "assert wind_chill(40, 71) == 88", "assert wind_chill(38, 70) == 86", "assert wind_chill(11, 100) == 117", "assert wind_chill(15, 102) == 121", "assert wind_chill(14, 102) == 121", "assert wind_chill(14, 102) == 121", "assert wind_chill(7, 104) == 119", "assert wind_chill(8, 100) == 115", "assert wind_chill(11, 98) == 114", "assert wind_chill(5, 102) == 114", "assert wind_chill(9, 105) == 121", "assert wind_chill(6, 102) == 115", "assert wind_chill(6, 96) == 108", "assert wind_chill(7, 102) == 116", "assert wind_chill(9, 102) == 118", "assert wind_chill(14, 97) == 115", "assert wind_chill(8, 103) == 118", "assert wind_chill(14, 96) == 114", "assert wind_chill(14, 95) == 112", "assert wind_chill(6, 100) == 113", "assert wind_chill(15, 105) == 125", "assert wind_chill(5, 96) == 107", "assert wind_chill(14, 103) == 122", "assert wind_chill(12, 96) == 113", "assert wind_chill(10, 95) == 110", "assert wind_chill(14, 101) == 120", "assert wind_chill(13, 95) == 112", "assert wind_chill(14, 103) == 122", "assert wind_chill(13, 100) == 118", "assert wind_chill(14, 101) == 120", "assert wind_chill(8, 105) == 121", "assert wind_chill(11, 102) == 119", "assert wind_chill(10, 105) == 122", "assert wind_chill(6, 96) == 108", "assert wind_chill(13, 101) == 119"], "entry_point": "wind_chill", "repair_prompt": ["Write a function wind_chill to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius. Ensure that the function handles and returns correct values for a variety of input scenarios, including edge cases.\nwind_chill(120,35)==40\n"], "completions": ["from typing import List\n## main.py\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): The wind speed in kilometers per hour.\n    temperature (float): The air temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Calculate the wind chill using the North American formula\n    wind_chill_index = (\n        13.12 + \n        0.6215 * temperature - \n        11.37 * (velocity ** 0.16) + \n        0.3965 * temperature * (velocity ** 0.16)\n    )\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with sample values\n    velocity = 20.0  # km/h\n    temperature = -5.0  # \u00b0C\n    print(f\"Wind Chill Index: {wind_chill(velocity, temperature)}\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(temperature: float, wind_velocity: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given temperature in Celsius and wind velocity in km/h.\n    Returns the wind chill index rounded to the nearest integer.\n\n    Args:\n        temperature (float): The temperature in Celsius.\n        wind_velocity (float): The wind velocity in km/h.\n\n    Returns:\n        int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Check if the formula is applicable\n    if temperature > 10 or wind_velocity <= 4.8:\n        raise ValueError(\"The wind chill formula is not applicable for temperatures above 10\u00b0C or wind speeds below 4.8 km/h.\")\n\n    # Calculate the wind chill index using the given formula\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature -\n        11.37 * math.pow(wind_velocity, 0.16) +\n        0.3965 * temperature * math.pow(wind_velocity, 0.16)\n    )\n\n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): Wind speed in kilometers per hour.\n    temperature (float): Temperature in degrees Celsius.\n\n    Returns:\n    int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Validate inputs\n    if velocity < 0:\n        raise ValueError(\"Wind velocity must be non-negative.\")\n    if temperature > 10:\n        raise ValueError(\"Temperature must be 10 degrees Celsius or lower for wind chill calculation.\")\n\n    # Calculate wind chill using the formula\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature -\n        11.37 * (velocity ** 0.16) +\n        0.3965 * temperature * (velocity ** 0.16)\n    )\n\n    # Round result to nearest integer\n    return round(wind_chill_index)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        velocity = 20.0  # Example wind speed in km/h\n        temperature = -5.0  # Example temperature in Celsius\n        print(f\"Wind Chill Index: {wind_chill(velocity, temperature)}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): The wind speed in kilometers per hour.\n    temperature (float): The air temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Wind Chill formula as per North American standard\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    \n    # Rounding the result to the nearest integer\n    return round(wind_chill_index)\n\n# Example usage:\n# result = wind_chill(10.0, -5.0)\n# print(f\"The wind chill index is: {result}\")\n", "from typing import List\n## main.py\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): The wind speed in kilometers per hour.\n    temperature (float): The air temperature in degrees Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Validate inputs\n    if velocity < 0:\n        raise ValueError(\"Wind velocity must be non-negative.\")\n    if temperature > 10:\n        raise ValueError(\"Wind chill calculation is only valid for temperatures 10\u00b0C or below.\")\n\n    # Calculate wind chill using the standard formula\n    wind_chill_index = (\n        13.12 + \n        0.6215 * temperature - \n        11.37 * (velocity ** 0.16) + \n        0.3965 * temperature * (velocity ** 0.16)\n    )\n\n    # Round result to nearest integer\n    return round(wind_chill_index)\n\n# Example usage:\n# try:\n#     result = wind_chill(velocity=20.0, temperature=-5.0)\n#     print(f\"The wind chill index is: {result}\")\n# except ValueError as e:\n#     print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(temperature_celsius: float, wind_speed_kmh: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n    Returns the wind chill index rounded to the nearest integer.\n\n    Args:\n        temperature_celsius (float): The temperature in degrees Celsius.\n        wind_speed_kmh (float): The wind speed in kilometers per hour.\n\n    Returns:\n        int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Validate inputs\n    if temperature_celsius > 10:\n        raise ValueError(\"Wind chill calculation is only valid for temperatures 10\u00b0C or below.\")\n    if wind_speed_kmh < 0:\n        raise ValueError(\"Wind speed cannot be negative.\")\n\n    # NWS wind chill formula for Celsius and km/h\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature_celsius -\n        11.37 * math.pow(wind_speed_kmh, 0.16) +\n        0.3965 * temperature_celsius * math.pow(wind_speed_kmh, 0.16)\n    )\n\n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        temperature = -5.0  # Example temperature in Celsius\n        wind_speed = 20.0   # Example wind speed in km/h\n        print(f\"Wind Chill Index: {wind_chill(temperature, wind_speed)}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef wind_chill(temperature: float, wind_speed: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given the temperature in Celsius and wind speed in km/h.\n    Returns the wind chill index rounded to the nearest integer.\n\n    Args:\n        temperature (float): The air temperature in degrees Celsius.\n        wind_speed (float): The wind speed in kilometers per hour.\n\n    Returns:\n        int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Check if the conditions for calculating wind chill are met\n    if temperature < 10 and wind_speed > 4.8:\n        # Calculate wind chill using the North American formula\n        wind_chill_index = (\n            13.12 + 0.6215 * temperature - 11.37 * wind_speed**0.16 + 0.3965 * temperature * wind_speed**0.16\n        )\n        # Return the wind chill index rounded to the nearest integer\n        return round(wind_chill_index)\n    else:\n        # If conditions are not met, return the temperature itself\n        return round(temperature)\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(velocity_kmh: float, temperature_celsius: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity in km/h and temperature in Celsius.\n    Returns the wind chill index rounded to the nearest integer.\n\n    Args:\n        velocity_kmh (float): Wind velocity in kilometers per hour.\n        temperature_celsius (float): Temperature in degrees Celsius.\n\n    Returns:\n        int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Check if the conditions for calculating wind chill are met\n    if temperature_celsius <= 10 and velocity_kmh > 4.8:\n        # Calculate wind chill using the standard formula\n        wind_chill_index = (13.12 + 0.6215 * temperature_celsius \n                            - 11.37 * math.pow(velocity_kmh, 0.16) \n                            + 0.3965 * temperature_celsius * math.pow(velocity_kmh, 0.16))\n        # Round the result to the nearest integer\n        return round(wind_chill_index)\n    else:\n        # Return the temperature itself if conditions are not met\n        return round(temperature_celsius)\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): The wind velocity in km/h.\n    temperature (float): The temperature in Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Wind chill formula components\n    wind_chill_index = (\n        13.12 +\n        0.6215 * temperature -\n        11.37 * math.pow(velocity, 0.16) +\n        0.3965 * temperature * math.pow(velocity, 0.16)\n    )\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n\n# Example usage:\n# result = wind_chill(10.0, -5.0)\n# print(f\"The wind chill index is: {result}\")\n", "from typing import List\n## main.py\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): The wind velocity in km/h.\n    temperature (float): The temperature in Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Calculate wind chill using the formula\n    wind_chill_index = (\n        13.12 \n        + 0.6215 * temperature \n        - 11.37 * (velocity ** 0.16) \n        + 0.3965 * temperature * (velocity ** 0.16)\n    )\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n\n# Example usage:\n# result = wind_chill(velocity=20.0, temperature=-5.0)\n# print(result)  # Output will be the wind chill index as an integer\n"], "plans": ["requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round the result to the nearest integer. It must handle various input scenarios, including high wind speeds and temperatures, ensuring reliability and efficiency.\nrequirement pool:\n- Accurate calculation of wind chill index\n- Handling of edge cases and extreme inputs\n- User-friendly input and output interface\n- Efficient processing of calculations\n- Integration with existing weather data systems\nWe will implement a function to calculate the wind chill index using the formula commonly used in North America: Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in degrees Celsius and V is the wind speed in km/h. The result will be rounded to the nearest integer. We will use Python's built-in functions to handle the calculations and ensure the function is efficient and reliable.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round it to the nearest integer. It must handle various input scenarios, including extreme temperatures and wind velocities, ensuring robustness and reliability.\nrequirement pool:\n- Accurate wind chill calculation\n- Handling edge cases\n- Integration with weather applications\n- Real-time data processing\n- User-friendly interface for input\nWe will use the formula for wind chill index commonly used in North America, which is: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the temperature in Celsius and V is the wind velocity in km/h. This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. We will use Python's math library to handle the power calculation and ensure the function rounds the result to the nearest integer.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round it to the nearest integer. It must handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Implement wind chill calculation formula\n- Round the result to the nearest integer\n- Handle edge cases for extreme weather conditions\n- Ensure user-friendly input and output\n- Optimize performance for large input ranges\nWe will use the wind chill formula commonly used in North America, which is: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in Celsius and V is the wind speed in km/h. We will use Python's built-in round function to round the result to the nearest integer. The function will handle edge cases by checking for valid input ranges and ensuring the formula is applied correctly.\n", "requirement analysis:\nThe function must accurately calculate the wind chill index using the given formula and round the result to the nearest integer. It should handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Accurate calculation of wind chill index\n- Handling of diverse input scenarios\n- User-friendly input and output interface\n- Edge case management for extreme weather conditions\n- Integration with existing weather data systems\nWe will implement a function named 'wind_chill' that calculates the wind chill index using the formula commonly used in North America: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in Celsius and V is the wind speed in km/h. The result will be rounded to the nearest integer. We will ensure the function handles a variety of input scenarios, including edge cases such as very high wind speeds and temperatures. The function will be simple and user-friendly, requiring only the wind velocity and temperature as inputs.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round the result to the nearest integer. It should handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Implement wind chill calculation using the standard formula\n- Ensure the function rounds the result to the nearest integer\n- Handle edge cases such as extreme temperatures and wind speeds\n- Provide clear error messages for invalid inputs\n- Optimize performance for large input ranges\nWe will use the standard wind chill formula used in North America, which is: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in Celsius and V is the wind speed in km/h. We will use Python's built-in round function to round the result to the nearest integer. The function will handle edge cases by checking for valid input ranges and providing error messages for invalid inputs.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round it to the nearest integer. It must handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Accurate wind chill calculation\n- Handling of edge cases\n- User-friendly input method\n- Clear output display\n- Responsive design for mobile devices\nWe will implement a function named wind_chill that calculates the wind chill index using the formula provided by the National Weather Service (NWS) for temperatures in Celsius and wind speeds in km/h. The function will handle edge cases such as very high wind speeds and temperatures, and will round the result to the nearest integer. We will use Python's built-in math library for rounding operations.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round it to the nearest integer. It must handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Accurate calculation of wind chill index\n- Handling of edge cases and extreme inputs\n- User-friendly input and output interface\n- Efficient performance for quick calculations\n- Integration with existing weather data systems\nWe will implement a function to calculate the wind chill index using the formula commonly used in North America: Wind Chill (\u00b0C) = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the air temperature in degrees Celsius and V is the wind speed in kilometers per hour. This formula is suitable for temperatures below 10\u00b0C and wind speeds above 4.8 km/h. The function will handle edge cases by checking these conditions and returning the temperature itself if they are not met. The result will be rounded to the nearest integer for simplicity.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round it to the nearest integer. It must handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Accurate wind chill calculation\n- Handling edge cases\n- User-friendly input and output\n- Responsive design for different devices\n- Integration with weather APIs for real-time data\nWe will implement a function to calculate the wind chill index using the standard formula for wind chill, which is applicable for temperatures at or below 10 degrees Celsius and wind speeds above 4.8 km/h. The function will handle edge cases by checking these conditions and returning the temperature itself if the conditions are not met. We will use Python's built-in math library for rounding operations.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round it to the nearest integer. It must handle various input scenarios, including high wind speeds and temperatures, ensuring robustness and reliability.\nrequirement pool:\n- Accurate calculation of wind chill index\n- Handling of edge cases and extreme values\n- User-friendly input and output interface\n- Efficient performance for quick calculations\n- Integration with existing weather data systems\nWe will use the formula for wind chill index commonly used in North America, which is: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the temperature in Celsius and V is the wind velocity in km/h. We will use Python's built-in math functions to perform the calculations and round the result to the nearest integer. The function will handle edge cases such as very high wind speeds and temperatures by ensuring the formula is applied correctly and results are returned accurately.\n", "requirement analysis:\nThe function should accurately calculate the wind chill index using the given formula and round the result to the nearest integer. It should handle various input scenarios, including high wind speeds and temperatures, and return correct values.\nrequirement pool:\n- Accurate wind chill calculation\n- Handling of edge cases\n- User-friendly input and output\n- Responsive design for different devices\n- Integration with existing weather data sources\nWe will use the formula for wind chill index commonly used in meteorology: Wind Chill = 13.12 + 0.6215 * T - 11.37 * V^0.16 + 0.3965 * T * V^0.16, where T is the temperature in Celsius and V is the wind velocity in km/h. We will use Python's built-in round function to round the result to the nearest integer. The function will handle edge cases such as extremely high or low temperatures and wind speeds by ensuring the formula is applied correctly across all valid input ranges.\n"], "test": ["def check(wind_chill):\n\tassert wind_chill(120,35)==40", "def check(wind_chill):\n\tassert wind_chill(40,70)==86", "def check(wind_chill):\n\tassert wind_chill(10,100)==116", "def check(wind_chill):\n\tassert wind_chill(116, 30) == 33", "def check(wind_chill):\n\tassert wind_chill(122, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(125, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(123, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(124, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(118, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(122, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(115, 34) == 39", "def check(wind_chill):\n\tassert wind_chill(116, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(117, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(125, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(125, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(124, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(118, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(117, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(118, 35) == 40", "def check(wind_chill):\n\tassert wind_chill(121, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(119, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(124, 37) == 43", "def check(wind_chill):\n\tassert wind_chill(118, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(115, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(125, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(125, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(122, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(122, 34) == 39", "def check(wind_chill):\n\tassert wind_chill(121, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(117, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(123, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(117, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(120, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(116, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(122, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(124, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(38, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(39, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(38, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(45, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(38, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(39, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(42, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(38, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(42, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(45, 73) == 91", "def check(wind_chill):\n\tassert wind_chill(41, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(39, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(43, 70) == 87", "def check(wind_chill):\n\tassert wind_chill(45, 65) == 80", "def check(wind_chill):\n\tassert wind_chill(39, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(45, 67) == 83", "def check(wind_chill):\n\tassert wind_chill(45, 70) == 87", "def check(wind_chill):\n\tassert wind_chill(44, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(43, 68) == 84", "def check(wind_chill):\n\tassert wind_chill(39, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(39, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(40, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(38, 71) == 87", "def check(wind_chill):\n\tassert wind_chill(44, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(41, 67) == 82", "def check(wind_chill):\n\tassert wind_chill(37, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(43, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(43, 75) == 93", "def check(wind_chill):\n\tassert wind_chill(40, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(40, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(41, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(40, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(38, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(11, 100) == 117", "def check(wind_chill):\n\tassert wind_chill(15, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(14, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(14, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(7, 104) == 119", "def check(wind_chill):\n\tassert wind_chill(8, 100) == 115", "def check(wind_chill):\n\tassert wind_chill(11, 98) == 114", "def check(wind_chill):\n\tassert wind_chill(5, 102) == 114", "def check(wind_chill):\n\tassert wind_chill(9, 105) == 121", "def check(wind_chill):\n\tassert wind_chill(6, 102) == 115", "def check(wind_chill):\n\tassert wind_chill(6, 96) == 108", "def check(wind_chill):\n\tassert wind_chill(7, 102) == 116", "def check(wind_chill):\n\tassert wind_chill(9, 102) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 97) == 115", "def check(wind_chill):\n\tassert wind_chill(8, 103) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 96) == 114", "def check(wind_chill):\n\tassert wind_chill(14, 95) == 112", "def check(wind_chill):\n\tassert wind_chill(6, 100) == 113", "def check(wind_chill):\n\tassert wind_chill(15, 105) == 125", "def check(wind_chill):\n\tassert wind_chill(5, 96) == 107", "def check(wind_chill):\n\tassert wind_chill(14, 103) == 122", "def check(wind_chill):\n\tassert wind_chill(12, 96) == 113", "def check(wind_chill):\n\tassert wind_chill(10, 95) == 110", "def check(wind_chill):\n\tassert wind_chill(14, 101) == 120", "def check(wind_chill):\n\tassert wind_chill(13, 95) == 112", "def check(wind_chill):\n\tassert wind_chill(14, 103) == 122", "def check(wind_chill):\n\tassert wind_chill(13, 100) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 101) == 120", "def check(wind_chill):\n\tassert wind_chill(8, 105) == 121", "def check(wind_chill):\n\tassert wind_chill(11, 102) == 119", "def check(wind_chill):\n\tassert wind_chill(10, 105) == 122", "def check(wind_chill):\n\tassert wind_chill(6, 96) == 108", "def check(wind_chill):\n\tassert wind_chill(13, 101) == 119"], "scores": [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0], "pass_results": [true, false, false, true, false, false, false, false, true, true], "pass_test_cases_num": [102, 0, 0, 102, 0, 0, 0, 0, 102, 102], "completion": "from typing import List\n## main.py\n\ndef wind_chill(velocity: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index given wind velocity in km/h and temperature in Celsius.\n\n    Parameters:\n    velocity (float): The wind velocity in km/h.\n    temperature (float): The temperature in Celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Calculate wind chill using the formula\n    wind_chill_index = (\n        13.12 \n        + 0.6215 * temperature \n        - 11.37 * (velocity ** 0.16) \n        + 0.3965 * temperature * (velocity ** 0.16)\n    )\n    \n    # Round the result to the nearest integer\n    return round(wind_chill_index)\n\n# Example usage:\n# result = wind_chill(velocity=20.0, temperature=-5.0)\n# print(result)  # Output will be the wind chill index as an integer\n", "passed": true, "pass": true, "pass_num": 4, "round": 398, "mutate_method": "add_1_sentence_at_end", "parent_index": 209}
