{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 266, "prompt": "Create a function to calculate the cube's lateral surface area from its side length.", "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(2) == 16", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676"], "entry_point": "lateralsurface_cube", "repair_prompt": ["Create a function lateralsurface_cube to calculate the cube's lateral surface area from its side length.\nlateralsurface_cube(5)==100\n"], "completions": ["from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cube given its side length.\n\n    This function uses the formula: 4 * side_length^2 to calculate the lateral\n    surface area. It handles edge cases by returning zero for zero or negative\n    inputs and raises a ValueError for negative inputs.\n\n    Args:\n        side_length (float): The length of one side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If the side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    if side_length == 0:\n        return 0.0\n    return 4 * side_length ** 2\n\n# Example usage:\n# lateral_area = lateralsurface_cube(3.0)\n# print(lateral_area)  # Output: 36.0\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube, or 0 if the side length is non-positive.\n    \"\"\"\n    if side_length <= 0:\n        return 0.0  # Return 0 for non-positive side lengths as a default value\n\n    lateral_surface_area = 4 * (side_length ** 2)\n    return lateral_surface_area\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cube.\n\n    This function calculates the lateral surface area of a cube given the side length.\n    The lateral surface area is defined as 4 times the square of the side length.\n    If the side length is non-positive, the function returns 0, as a cube with such\n    dimensions does not have a meaningful lateral surface area.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube, or 0 if the side length is non-positive.\n    \"\"\"\n    if side_length <= 0:\n        return 0\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube. Returns 0 for non-positive side lengths.\n    \"\"\"\n    if side_length <= 0:\n        return 0\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube, or a message indicating invalid input.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    \n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n\n# Example usage:\n# try:\n#     area = lateralsurface_cube(3.0)\n#     print(f\"Lateral Surface Area: {area}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube. Returns 0 if the side length is non-positive.\n    \"\"\"\n    if side_length <= 0:\n        return 0\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    This function calculates the lateral surface area using the formula:\n    4 * side_length^2. It includes input validation to handle cases where\n    the side length is zero or negative.\n\n    Args:\n        side_length (float): The length of one side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube if the side length is positive.\n               Returns 0 if the side length is zero or negative.\n    \"\"\"\n    # Validate the input\n    if side_length <= 0:\n        # Return 0 for non-positive side lengths\n        return 0.0\n\n    # Calculate the lateral surface area\n    lateral_surface_area = 4 * side_length ** 2\n\n    return lateral_surface_area\n\n# Example usage:\n# lateral_surface_area = lateralsurface_cube(3.0)\n# print(lateral_surface_area)  # Output: 36.0\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"Calculate the lateral surface area of a cube given its side length.\n\n    This function calculates the lateral surface area using the formula:\n    4 * side_length^2. It includes input validation to handle non-positive\n    side lengths by returning 0.0 to ensure graceful handling of edge cases.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube, or 0.0 if the side length\n        is non-positive.\n    \"\"\"\n    if side_length <= 0:\n        return 0.0\n    return 4 * side_length ** 2\n\n# Example usage:\n# lateral_area = lateralsurface_cube(3.0)\n# print(lateral_area)  # Output: 36.0\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters:\n    side_length (float): The length of a side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube. Returns 0 for non-positive side lengths.\n    \"\"\"\n    if side_length <= 0:\n        return 0\n    return 4 * side_length ** 2\n\n# Example usage:\n# lateral_area = lateralsurface_cube(3.0)\n# print(lateral_area)  # Output: 36.0\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube if the side length is positive.\n               Returns 'Invalid input: side length must be positive.' if the side length is non-positive.\n    \"\"\"\n    if side_length > 0:\n        area = 4 * side_length ** 2\n        return area\n    else:\n        return 'Invalid input: side length must be positive.'\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The lateral surface area of a cube is calculated as 4 times the square of its side length.\nrequirement pool:\n- Implement the function to calculate lateral surface area.\n- Ensure the function handles edge cases like zero or negative input.\n- Optimize the function for performance.\n- Provide documentation for the function.\n- Include examples and test cases.\nWe will implement a simple function to calculate the lateral surface area of a cube using the formula: 4 * side_length^2. The function will handle edge cases such as zero or negative inputs by returning zero or raising a ValueError, respectively. We will use Python's built-in capabilities for this calculation, ensuring quick and accurate results.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area of a cube, which is 4 times the square of the side length. It should handle typical input errors and provide results quickly.\nrequirement pool:\n- Implement the function to calculate lateral surface area accurately.\n- Ensure the function handles invalid inputs gracefully.\n- Optimize the function for performance.\n- Design a simple user interface for input and output.\n- Provide documentation for the function usage.\nWe will implement a simple function using Python to calculate the lateral surface area of a cube. The lateral surface area is calculated as 4 times the square of the side length. We will handle edge cases such as zero or negative side lengths by returning an appropriate message or value. The function will be optimized for performance using basic arithmetic operations, which are inherently fast in Python.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The lateral surface area of a cube is calculated as 4 times the square of its side length. The function should be simple, efficient, and handle edge cases appropriately.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cube.\n- Ensure the function handles invalid inputs gracefully.\n- Optimize the function for performance.\n- Provide documentation and examples for the function usage.\n- Include unit tests to verify the function's correctness.\nWe will implement a simple function using Python that calculates the lateral surface area of a cube. The lateral surface area is calculated as 4 times the square of the side length. We will use basic error handling to manage non-positive side lengths by returning zero, as a cube with non-positive side length does not have a meaningful lateral surface area.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area of a cube given its side length. It should be simple to use and handle various input scenarios, including invalid inputs.\nrequirement pool:\n- Implement the main function to calculate lateral surface area\n- Ensure the function handles edge cases like zero or negative inputs\n- Optimize the function for performance\n- Provide documentation for the function usage\n- Include unit tests for various input scenarios\nWe will implement a simple function using basic arithmetic operations to calculate the lateral surface area of a cube. The function will handle edge cases such as zero or negative side lengths by returning zero for non-positive inputs, as lateral surface area cannot be negative. This approach ensures simplicity and efficiency without the need for complex libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The lateral surface area of a cube is calculated as 4 times the square of its side length. The function should be simple, efficient, and handle edge cases appropriately.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cube.\n- Ensure the function handles invalid inputs gracefully.\n- Optimize the function for performance.\n- Provide documentation and examples for the function usage.\n- Consider extending functionality to other geometric shapes.\nWe will implement a simple function using Python that calculates the lateral surface area of a cube. The lateral surface area is calculated as 4 times the square of the side length. We will ensure the function handles edge cases such as zero or negative side lengths by returning an appropriate message or value. The function will be optimized for quick computations using basic arithmetic operations.\n", "requirement analysis:\nThe function should accurately compute the lateral surface area of a cube given its side length. It should be simple to use, handle edge cases, and perform efficiently.\nrequirement pool:\n- Accurate calculation of lateral surface area\n- Simple and intuitive function interface\n- Efficient performance for large inputs\n- Graceful handling of edge cases\n- Documentation for user guidance\nWe will implement a simple function that calculates the lateral surface area of a cube using the formula: 4 * side_length^2. The function will handle edge cases such as zero or negative side lengths by returning 0 for non-positive values, ensuring graceful handling without exceptions. We will use Python's built-in capabilities without any third-party libraries to keep the implementation straightforward and efficient.\n", "requirement analysis:\nThe function should calculate the lateral surface area of a cube, which is 4 times the square of the side length. It should handle typical input errors and provide quick results.\nrequirement pool:\n- Implement the main function to calculate lateral surface area.\n- Ensure the function handles invalid inputs gracefully.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Include documentation for the function usage.\nWe will implement a simple function to calculate the lateral surface area of a cube using the formula 4 * side_length^2. The function will include input validation to handle edge cases such as zero or negative side lengths by returning an appropriate message or value. We will use Python's built-in capabilities to ensure the function is efficient and fast.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The lateral surface area of a cube is calculated as 4 times the square of its side length. The function should be efficient and handle various input scenarios.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cube.\n- Ensure the function handles invalid inputs gracefully.\n- Optimize the function for performance.\n- Provide documentation and examples for the function.\n- Include unit tests to verify the function's accuracy.\nWe will implement a simple function to calculate the lateral surface area of a cube using the formula 4 * side_length^2. The function will include input validation to handle non-positive side lengths by returning an error message or a specific value, such as zero, to ensure graceful handling of edge cases. We will use Python's built-in capabilities for this task, as no additional libraries are necessary for such a straightforward calculation.\n", "requirement analysis:\nThe function should calculate the lateral surface area of a cube, which is 4 times the square of the side length. It should handle various input scenarios, including non-positive values, and return the correct result efficiently.\nrequirement pool:\n- Implement the function to calculate lateral surface area accurately.\n- Handle edge cases such as zero or negative side lengths.\n- Optimize the function for performance.\n- Provide user-friendly error messages for invalid inputs.\n- Include documentation and examples for user guidance.\nWe will implement a simple function to calculate the lateral surface area of a cube using the formula 4 * side_length^2. The function will handle edge cases by returning 0 for non-positive side lengths, as a cube cannot have a non-positive side length. This approach ensures the function is both user-friendly and efficient.\n", "requirement analysis:\nThe requirement is to create a function that calculates the lateral surface area of a cube given its side length. The lateral surface area of a cube is calculated as 4 times the square of its side length. The function should be efficient and handle various input scenarios.\nrequirement pool:\n- Implement the function to calculate lateral surface area of a cube.\n- Ensure the function handles invalid inputs gracefully.\n- Optimize the function for performance.\n- Provide documentation and examples for the function usage.\n- Include unit tests to verify the function's accuracy.\nWe will implement a simple function using Python that calculates the lateral surface area of a cube. The lateral surface area is calculated as 4 times the square of the side length. We will use basic error handling to manage non-positive side lengths by returning a specific message indicating invalid input.\n"], "test": ["def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5)==100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9)==324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10)==400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(2) == 16", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of a side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube if the side length is positive.\n               Returns 'Invalid input: side length must be positive.' if the side length is non-positive.\n    \"\"\"\n    if side_length > 0:\n        area = 4 * side_length ** 2\n        return area\n    else:\n        return 'Invalid input: side length must be positive.'\n", "passed": true, "pass": true, "pass_num": 10, "round": 461, "mutate_method": "rephrase_one", "parent_index": 100}
