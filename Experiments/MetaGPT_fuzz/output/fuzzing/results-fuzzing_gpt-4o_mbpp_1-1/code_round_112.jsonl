{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 282, "prompt": "Write a function to subtract two lists element-wise.", "code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]", "assert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "assert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "assert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "assert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "assert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "assert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "assert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "assert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "assert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "assert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "assert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "assert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "assert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "assert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "assert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "assert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "assert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "assert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "assert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "assert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "assert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "assert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "assert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "assert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "assert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "assert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "assert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "assert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "assert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "assert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "assert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "assert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "assert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "assert sub_list([5, 6], [4, 8]) == [1, -2]", "assert sub_list([2, 6], [3, 9]) == [-1, -3]", "assert sub_list([5, 3], [6, 2]) == [-1, 1]", "assert sub_list([3, 5], [3, 5]) == [0, 0]", "assert sub_list([4, 6], [3, 6]) == [1, 0]", "assert sub_list([6, 3], [7, 6]) == [-1, -3]", "assert sub_list([3, 2], [2, 6]) == [1, -4]", "assert sub_list([4, 6], [1, 1]) == [3, 5]", "assert sub_list([1, 2], [1, 1]) == [0, 1]", "assert sub_list([1, 3], [6, 8]) == [-5, -5]", "assert sub_list([2, 2], [7, 6]) == [-5, -4]", "assert sub_list([1, 6], [3, 6]) == [-2, 0]", "assert sub_list([3, 2], [3, 7]) == [0, -5]", "assert sub_list([2, 2], [4, 1]) == [-2, 1]", "assert sub_list([3, 2], [7, 7]) == [-4, -5]", "assert sub_list([4, 7], [8, 8]) == [-4, -1]", "assert sub_list([3, 6], [1, 6]) == [2, 0]", "assert sub_list([1, 7], [1, 6]) == [0, 1]", "assert sub_list([3, 3], [4, 7]) == [-1, -4]", "assert sub_list([3, 2], [8, 6]) == [-5, -4]", "assert sub_list([4, 1], [6, 2]) == [-2, -1]", "assert sub_list([6, 2], [6, 9]) == [0, -7]", "assert sub_list([2, 4], [2, 2]) == [0, 2]", "assert sub_list([3, 4], [5, 4]) == [-2, 0]", "assert sub_list([3, 7], [3, 8]) == [0, -1]", "assert sub_list([2, 5], [1, 3]) == [1, 2]", "assert sub_list([4, 6], [4, 2]) == [0, 4]", "assert sub_list([5, 6], [3, 4]) == [2, 2]", "assert sub_list([1, 6], [3, 9]) == [-2, -3]", "assert sub_list([6, 3], [3, 2]) == [3, 1]", "assert sub_list([2, 1], [5, 9]) == [-3, -8]", "assert sub_list([5, 1], [5, 5]) == [0, -4]", "assert sub_list([4, 6], [7, 7]) == [-3, -1]", "assert sub_list([88, 120], [55, 65]) == [33, 55]", "assert sub_list([85, 121], [45, 71]) == [40, 50]", "assert sub_list([92, 125], [46, 74]) == [46, 51]", "assert sub_list([93, 115], [50, 68]) == [43, 47]", "assert sub_list([90, 116], [45, 72]) == [45, 44]", "assert sub_list([88, 119], [51, 67]) == [37, 52]", "assert sub_list([91, 121], [47, 74]) == [44, 47]", "assert sub_list([94, 118], [53, 71]) == [41, 47]", "assert sub_list([89, 119], [51, 65]) == [38, 54]", "assert sub_list([85, 124], [48, 72]) == [37, 52]", "assert sub_list([89, 124], [53, 67]) == [36, 57]", "assert sub_list([90, 118], [50, 67]) == [40, 51]", "assert sub_list([85, 123], [54, 70]) == [31, 53]", "assert sub_list([85, 118], [48, 75]) == [37, 43]", "assert sub_list([91, 122], [45, 73]) == [46, 49]", "assert sub_list([90, 115], [47, 71]) == [43, 44]", "assert sub_list([89, 125], [55, 70]) == [34, 55]", "assert sub_list([89, 115], [50, 71]) == [39, 44]", "assert sub_list([94, 119], [45, 75]) == [49, 44]", "assert sub_list([89, 117], [46, 68]) == [43, 49]", "assert sub_list([90, 118], [54, 67]) == [36, 51]", "assert sub_list([90, 118], [53, 70]) == [37, 48]", "assert sub_list([88, 125], [54, 69]) == [34, 56]", "assert sub_list([92, 115], [49, 71]) == [43, 44]", "assert sub_list([86, 119], [50, 71]) == [36, 48]", "assert sub_list([85, 119], [48, 67]) == [37, 52]", "assert sub_list([93, 122], [54, 69]) == [39, 53]", "assert sub_list([93, 119], [49, 74]) == [44, 45]", "assert sub_list([88, 123], [46, 67]) == [42, 56]", "assert sub_list([90, 116], [50, 73]) == [40, 43]", "assert sub_list([93, 120], [46, 68]) == [47, 52]", "assert sub_list([85, 116], [53, 69]) == [32, 47]", "assert sub_list([86, 123], [46, 75]) == [40, 48]"], "entry_point": "sub_list", "repair_prompt": ["Write a function sub_list to subtract two lists element-wise.\nsub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n"], "completions": ["from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    '''\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the lists are not of equal length.\n    '''\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of equal length.')\n\n    return [a - b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of the same length.')\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        list1 = [10, 20, 30]\n        list2 = [1, 2, 3]\n        print(sub_list(list1, list2))  # Output: [9, 18, 27]\n    except ValueError as e:\n        print(e)\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    '''\n    Subtracts elements of two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If either list contains non-numeric elements.\n    '''\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise ValueError(\"list1 contains non-numeric elements.\")\n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"list2 contains non-numeric elements.\")\n\n    # Determine the length to truncate lists to the shorter one\n    min_length = min(len(list1), len(list2))\n\n    # Perform element-wise subtraction\n    result = [list1[i] - list2[i] for i in range(min_length)]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the result of element-wise subtraction.\n\n    Raises:\n    ValueError: If the lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must be of the same length.\")\n    \n    return [a - b for a, b in zip(list1, list2)]\n\n# Example usage:\n# result = sub_list([1, 2, 3], [4, 5, 6])\n# print(result)  # Output: [-3, -3, -3]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    '''\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    '''\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        if not isinstance(list1[i], (int, float)) or not isinstance(list2[i], (int, float)):\n            raise ValueError(\"Both lists must contain only numeric data types.\")\n        result.append(list1[i] - list2[i])\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts elements of list2 from list1 element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A list containing the element-wise differences.\n\n    Raises:\n    ValueError: If any of the lists contain non-numeric elements.\n    \"\"\"\n    # Validate inputs\n    if not all(isinstance(x, (int, float)) for x in list1):\n        raise ValueError(\"List1 contains non-numeric elements.\")\n    if not all(isinstance(x, (int, float)) for x in list2):\n        raise ValueError(\"List2 contains non-numeric elements.\")\n\n    # Truncate to the shortest list\n    min_length = min(len(list1), len(list2))\n\n    # Perform element-wise subtraction\n    result = [list1[i] - list2[i] for i in range(min_length)]\n\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Example:\n    >>> sub_list([1, 2, 3], [4, 5, 6])\n    [-3, -3, -3]\n    \"\"\"\n    # Determine the length of the shorter list\n    min_length = min(len(list1), len(list2))\n    \n    # Truncate both lists to the length of the shorter list\n    truncated_list1 = list1[:min_length]\n    truncated_list2 = list2[:min_length]\n    \n    # Perform element-wise subtraction\n    result = [a - b for a, b in zip(truncated_list1, truncated_list2)]\n    \n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list[int], list2: list[int]) -> list[int]:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list[int]): The first list of integers.\n    list2 (list[int]): The second list of integers.\n\n    Returns:\n    list[int]: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If the lists are not of equal length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lists must be of equal length.\")\n\n    return [a - b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError('Lists must be of the same length.')\n\n    # Perform element-wise subtraction using list comprehension\n    result = [a - b for a, b in zip(list1, list2)]\n    return result\n", "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise differences.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    TypeError: If the inputs are not lists or contain non-numeric elements.\n    \"\"\"\n    # Check if both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Perform element-wise subtraction\n    result = []\n    for i in range(len(list1)):\n        # Check if elements are numeric\n        if not isinstance(list1[i], (int, float)) or not isinstance(list2[i], (int, float)):\n            raise TypeError(\"All elements in the lists must be numeric.\")\n        result.append(list1[i] - list2[i])\n\n    return result\n"], "plans": ["requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length. It should handle exceptions where lists are of different lengths and provide meaningful error messages.\nrequirement pool:\n- Implement element-wise subtraction for lists of equal length.\n- Handle cases where lists are of different lengths with error messages.\n- Optimize performance for large lists.\n- Ensure code readability and maintainability.\n- Provide documentation for usage and edge cases.\nWe will implement a simple function using native Python list operations to subtract two lists element-wise. The function will check if the lists are of equal length and raise a ValueError with a clear message if they are not. This approach ensures efficient operations for small to medium-sized lists without the overhead of external libraries.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length, returning a new list with the results. It should handle edge cases such as empty lists and provide informative error messages for lists of unequal lengths.\nrequirement pool:\n- Implement element-wise subtraction for lists\n- Handle error cases for lists of different lengths\n- Optimize performance for large lists\n- Provide documentation and examples\n- Ensure compatibility with Python 3.x\nWe will implement a function `sub_list` that performs element-wise subtraction of two lists. The function will first check if the lists are of equal length and raise a ValueError with a clear message if they are not. For performance optimization, especially with large lists, we will use list comprehension, which is efficient and concise. We will ensure compatibility with Python 3.x and provide documentation with examples.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length. It should handle cases where lists are of different lengths by either truncating the longer list or raising an error. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- Implement the element-wise subtraction functionality.\n- Handle lists of different lengths gracefully.\n- Provide clear error messages for invalid inputs.\n- Optimize for performance with large lists.\n- Include comprehensive documentation and examples.\nWe will implement a simple Python function using native list operations to perform element-wise subtraction. The function will handle lists of different lengths by truncating the longer list to match the length of the shorter one. This approach ensures compatibility with Python 3.x and avoids the need for additional libraries, keeping the solution efficient and easy to integrate.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length. It should handle exceptions where lists are of different lengths and provide meaningful error messages.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Handle lists of different lengths gracefully.\n- Provide clear error messages for invalid inputs.\n- Optimize performance for large lists.\n- Ensure code readability and maintainability.\nWe will implement a function using Python's built-in list operations and list comprehension to efficiently subtract elements of two lists. The function will check if the lists are of equal length and raise a ValueError with a clear message if they are not. This approach ensures simplicity and avoids unnecessary dependencies.\n", "requirement analysis:\nThe function should take two lists of equal length and return a new list where each element is the result of subtracting the corresponding elements of the input lists. It should handle edge cases such as empty lists and provide meaningful error messages for lists of different lengths.\nrequirement pool:\n- Implement the element-wise subtraction function\n- Handle edge cases such as empty lists\n- Provide error messages for lists of different lengths\n- Optimize for performance with large lists\n- Ensure code readability and simplicity\nWe will implement a custom function using native Python features to perform element-wise subtraction of two lists. This approach ensures simplicity and readability while efficiently handling large lists. We will include error handling to provide informative messages when the input lists are of different lengths.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length. It should handle exceptions for lists of unequal lengths or non-numeric elements, providing clear error messages. The implementation should prioritize readability and maintainability.\nrequirement pool:\n- Implement the element-wise subtraction function\n- Handle exceptions for invalid inputs\n- Optimize the function for large lists\n- Ensure the function is easy to read and maintain\n- Provide comprehensive documentation and examples\nWe will implement a custom function using native Python to perform element-wise subtraction of two lists. The function will handle exceptions for invalid inputs, such as non-numeric elements or lists of unequal lengths, by providing clear error messages. The function will prioritize readability and maintainability, and will truncate to the shortest list if the lists are of different lengths.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length. It should handle cases where lists are of different lengths by either truncating the longer list or raising an error. The function should be easy to use and integrate into existing Python projects.\nrequirement pool:\n- Implement the element-wise subtraction function.\n- Handle lists of different lengths gracefully.\n- Provide clear documentation and examples.\n- Optimize for performance with large lists.\n- Include error handling for invalid inputs.\nWe will implement a simple Python function using native list operations to perform element-wise subtraction. The function will handle lists of different lengths by truncating the longer list to match the length of the shorter one. This approach ensures efficiency and simplicity without requiring additional libraries.\n", "requirement analysis:\nThe function should efficiently subtract elements of two lists of equal length. It should handle errors gracefully if the lists are not of the same length and provide clear documentation for users.\nrequirement pool:\n- Implement element-wise subtraction for two lists.\n- Handle lists of unequal length with error messages.\n- Optimize performance for large lists.\n- Provide comprehensive documentation.\n- Ensure compatibility with Python 3.x.\nWe will implement a simple function using native Python list operations to subtract two lists element-wise. The function will check if the lists are of equal length and return an error message if they are not. This approach ensures ease of use and efficiency without requiring additional libraries.\n", "requirement analysis:\nThe function should take two lists of equal length and return a new list where each element is the result of subtracting the corresponding elements of the input lists. It should handle errors gracefully if the lists are not of the same length.\nrequirement pool:\n- Implement the element-wise subtraction function.\n- Handle cases where input lists are of different lengths.\n- Optimize the function for large lists.\n- Provide detailed documentation and examples.\n- Include unit tests to ensure functionality.\nWe will implement a function using native Python list comprehension to perform element-wise subtraction. This approach is efficient for large lists and maintains readability. We will also include error handling to ensure the lists are of the same length and provide clear error messages if they are not.\n", "requirement analysis:\nThe function should take two lists of numbers as input and return a new list where each element is the result of subtracting the corresponding elements of the input lists. It should handle cases where the lists are of different lengths by providing a clear error message.\nrequirement pool:\n- Implement the element-wise subtraction function\n- Handle lists of different lengths with an error message\n- Optimize the function for large lists\n- Include type checking for input validation\n- Document the function with examples and edge cases\nWe will implement a custom function to perform element-wise subtraction of two lists. The function will check if the lists are of the same length and raise a ValueError with a clear message if they are not. This approach ensures that the function is efficient, easy to understand, and does not require any additional libraries, making it suitable for large lists.\n"], "test": ["def check(sub_list):\n\tassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "def check(sub_list):\n\tassert sub_list([1,2],[3,4])==[-2,-2]", "def check(sub_list):\n\tassert sub_list([90,120],[50,70])==[40,50]", "def check(sub_list):\n\tassert sub_list([2, 2, 6], [4, 1, 3]) == [-2, 1, 3]", "def check(sub_list):\n\tassert sub_list([1, 5, 3], [5, 6, 7]) == [-4, -1, -4]", "def check(sub_list):\n\tassert sub_list([3, 5, 4], [6, 3, 3]) == [-3, 2, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [7, 9, 6]) == [-6, -7, -4]", "def check(sub_list):\n\tassert sub_list([5, 1, 3], [7, 1, 5]) == [-2, 0, -2]", "def check(sub_list):\n\tassert sub_list([3, 2, 7], [6, 3, 4]) == [-3, -1, 3]", "def check(sub_list):\n\tassert sub_list([5, 7, 1], [3, 3, 2]) == [2, 4, -1]", "def check(sub_list):\n\tassert sub_list([4, 2, 8], [7, 1, 6]) == [-3, 1, 2]", "def check(sub_list):\n\tassert sub_list([1, 7, 7], [1, 7, 3]) == [0, 0, 4]", "def check(sub_list):\n\tassert sub_list([1, 2, 8], [4, 9, 3]) == [-3, -7, 5]", "def check(sub_list):\n\tassert sub_list([3, 6, 1], [8, 3, 9]) == [-5, 3, -8]", "def check(sub_list):\n\tassert sub_list([2, 1, 4], [6, 1, 9]) == [-4, 0, -5]", "def check(sub_list):\n\tassert sub_list([3, 1, 3], [3, 9, 9]) == [0, -8, -6]", "def check(sub_list):\n\tassert sub_list([2, 2, 3], [2, 7, 11]) == [0, -5, -8]", "def check(sub_list):\n\tassert sub_list([5, 1, 1], [2, 10, 4]) == [3, -9, -3]", "def check(sub_list):\n\tassert sub_list([6, 6, 2], [1, 8, 11]) == [5, -2, -9]", "def check(sub_list):\n\tassert sub_list([1, 1, 3], [5, 1, 9]) == [-4, 0, -6]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [1, 7, 8]) == [2, -4, 0]", "def check(sub_list):\n\tassert sub_list([1, 6, 7], [4, 1, 9]) == [-3, 5, -2]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [9, 8, 6]) == [-8, -6, -4]", "def check(sub_list):\n\tassert sub_list([6, 7, 4], [1, 9, 6]) == [5, -2, -2]", "def check(sub_list):\n\tassert sub_list([3, 3, 8], [9, 5, 8]) == [-6, -2, 0]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [2, 2, 9]) == [3, 4, -2]", "def check(sub_list):\n\tassert sub_list([5, 6, 7], [5, 5, 6]) == [0, 1, 1]", "def check(sub_list):\n\tassert sub_list([1, 2, 2], [3, 1, 2]) == [-2, 1, 0]", "def check(sub_list):\n\tassert sub_list([2, 7, 7], [2, 9, 2]) == [0, -2, 5]", "def check(sub_list):\n\tassert sub_list([3, 7, 8], [5, 9, 11]) == [-2, -2, -3]", "def check(sub_list):\n\tassert sub_list([2, 6, 4], [3, 1, 4]) == [-1, 5, 0]", "def check(sub_list):\n\tassert sub_list([6, 2, 6], [4, 7, 7]) == [2, -5, -1]", "def check(sub_list):\n\tassert sub_list([1, 6, 2], [9, 1, 6]) == [-8, 5, -4]", "def check(sub_list):\n\tassert sub_list([1, 5, 7], [1, 5, 2]) == [0, 0, 5]", "def check(sub_list):\n\tassert sub_list([1, 2, 7], [8, 5, 3]) == [-7, -3, 4]", "def check(sub_list):\n\tassert sub_list([2, 7, 1], [5, 5, 8]) == [-3, 2, -7]", "def check(sub_list):\n\tassert sub_list([5, 6], [4, 8]) == [1, -2]", "def check(sub_list):\n\tassert sub_list([2, 6], [3, 9]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([5, 3], [6, 2]) == [-1, 1]", "def check(sub_list):\n\tassert sub_list([3, 5], [3, 5]) == [0, 0]", "def check(sub_list):\n\tassert sub_list([4, 6], [3, 6]) == [1, 0]", "def check(sub_list):\n\tassert sub_list([6, 3], [7, 6]) == [-1, -3]", "def check(sub_list):\n\tassert sub_list([3, 2], [2, 6]) == [1, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [1, 1]) == [3, 5]", "def check(sub_list):\n\tassert sub_list([1, 2], [1, 1]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([1, 3], [6, 8]) == [-5, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [7, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 6]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 2], [3, 7]) == [0, -5]", "def check(sub_list):\n\tassert sub_list([2, 2], [4, 1]) == [-2, 1]", "def check(sub_list):\n\tassert sub_list([3, 2], [7, 7]) == [-4, -5]", "def check(sub_list):\n\tassert sub_list([4, 7], [8, 8]) == [-4, -1]", "def check(sub_list):\n\tassert sub_list([3, 6], [1, 6]) == [2, 0]", "def check(sub_list):\n\tassert sub_list([1, 7], [1, 6]) == [0, 1]", "def check(sub_list):\n\tassert sub_list([3, 3], [4, 7]) == [-1, -4]", "def check(sub_list):\n\tassert sub_list([3, 2], [8, 6]) == [-5, -4]", "def check(sub_list):\n\tassert sub_list([4, 1], [6, 2]) == [-2, -1]", "def check(sub_list):\n\tassert sub_list([6, 2], [6, 9]) == [0, -7]", "def check(sub_list):\n\tassert sub_list([2, 4], [2, 2]) == [0, 2]", "def check(sub_list):\n\tassert sub_list([3, 4], [5, 4]) == [-2, 0]", "def check(sub_list):\n\tassert sub_list([3, 7], [3, 8]) == [0, -1]", "def check(sub_list):\n\tassert sub_list([2, 5], [1, 3]) == [1, 2]", "def check(sub_list):\n\tassert sub_list([4, 6], [4, 2]) == [0, 4]", "def check(sub_list):\n\tassert sub_list([5, 6], [3, 4]) == [2, 2]", "def check(sub_list):\n\tassert sub_list([1, 6], [3, 9]) == [-2, -3]", "def check(sub_list):\n\tassert sub_list([6, 3], [3, 2]) == [3, 1]", "def check(sub_list):\n\tassert sub_list([2, 1], [5, 9]) == [-3, -8]", "def check(sub_list):\n\tassert sub_list([5, 1], [5, 5]) == [0, -4]", "def check(sub_list):\n\tassert sub_list([4, 6], [7, 7]) == [-3, -1]", "def check(sub_list):\n\tassert sub_list([88, 120], [55, 65]) == [33, 55]", "def check(sub_list):\n\tassert sub_list([85, 121], [45, 71]) == [40, 50]", "def check(sub_list):\n\tassert sub_list([92, 125], [46, 74]) == [46, 51]", "def check(sub_list):\n\tassert sub_list([93, 115], [50, 68]) == [43, 47]", "def check(sub_list):\n\tassert sub_list([90, 116], [45, 72]) == [45, 44]", "def check(sub_list):\n\tassert sub_list([88, 119], [51, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([91, 121], [47, 74]) == [44, 47]", "def check(sub_list):\n\tassert sub_list([94, 118], [53, 71]) == [41, 47]", "def check(sub_list):\n\tassert sub_list([89, 119], [51, 65]) == [38, 54]", "def check(sub_list):\n\tassert sub_list([85, 124], [48, 72]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([89, 124], [53, 67]) == [36, 57]", "def check(sub_list):\n\tassert sub_list([90, 118], [50, 67]) == [40, 51]", "def check(sub_list):\n\tassert sub_list([85, 123], [54, 70]) == [31, 53]", "def check(sub_list):\n\tassert sub_list([85, 118], [48, 75]) == [37, 43]", "def check(sub_list):\n\tassert sub_list([91, 122], [45, 73]) == [46, 49]", "def check(sub_list):\n\tassert sub_list([90, 115], [47, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([89, 125], [55, 70]) == [34, 55]", "def check(sub_list):\n\tassert sub_list([89, 115], [50, 71]) == [39, 44]", "def check(sub_list):\n\tassert sub_list([94, 119], [45, 75]) == [49, 44]", "def check(sub_list):\n\tassert sub_list([89, 117], [46, 68]) == [43, 49]", "def check(sub_list):\n\tassert sub_list([90, 118], [54, 67]) == [36, 51]", "def check(sub_list):\n\tassert sub_list([90, 118], [53, 70]) == [37, 48]", "def check(sub_list):\n\tassert sub_list([88, 125], [54, 69]) == [34, 56]", "def check(sub_list):\n\tassert sub_list([92, 115], [49, 71]) == [43, 44]", "def check(sub_list):\n\tassert sub_list([86, 119], [50, 71]) == [36, 48]", "def check(sub_list):\n\tassert sub_list([85, 119], [48, 67]) == [37, 52]", "def check(sub_list):\n\tassert sub_list([93, 122], [54, 69]) == [39, 53]", "def check(sub_list):\n\tassert sub_list([93, 119], [49, 74]) == [44, 45]", "def check(sub_list):\n\tassert sub_list([88, 123], [46, 67]) == [42, 56]", "def check(sub_list):\n\tassert sub_list([90, 116], [50, 73]) == [40, 43]", "def check(sub_list):\n\tassert sub_list([93, 120], [46, 68]) == [47, 52]", "def check(sub_list):\n\tassert sub_list([85, 116], [53, 69]) == [32, 47]", "def check(sub_list):\n\tassert sub_list([86, 123], [46, 75]) == [40, 48]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sub_list(list1: list, list2: list) -> list:\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n\n    Returns:\n    list: A new list containing the element-wise differences.\n\n    Raises:\n    ValueError: If the input lists are of different lengths.\n    TypeError: If the inputs are not lists or contain non-numeric elements.\n    \"\"\"\n    # Check if both inputs are lists\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both inputs must be lists.\")\n\n    # Check if both lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Perform element-wise subtraction\n    result = []\n    for i in range(len(list1)):\n        # Check if elements are numeric\n        if not isinstance(list1[i], (int, float)) or not isinstance(list2[i], (int, float)):\n            raise TypeError(\"All elements in the lists must be numeric.\")\n        result.append(list1[i] - list2[i])\n\n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 112, "mutate_method": "condense_two2one", "parent_index": 112}
