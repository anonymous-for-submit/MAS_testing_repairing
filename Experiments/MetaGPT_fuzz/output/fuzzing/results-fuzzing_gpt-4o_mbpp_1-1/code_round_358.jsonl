{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 397, "prompt": "Create a function that determines the median value among three given numbers.", "code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0", "assert median_numbers(22, 54, 68) == 54", "assert median_numbers(22, 57, 66) == 57", "assert median_numbers(22, 54, 61) == 54", "assert median_numbers(30, 53, 63) == 53", "assert median_numbers(22, 55, 61) == 55", "assert median_numbers(25, 60, 61) == 60", "assert median_numbers(22, 56, 68) == 56", "assert median_numbers(29, 53, 70) == 53", "assert median_numbers(23, 53, 66) == 53", "assert median_numbers(29, 58, 67) == 58", "assert median_numbers(27, 52, 64) == 52", "assert median_numbers(29, 60, 61) == 60", "assert median_numbers(25, 57, 61) == 57", "assert median_numbers(20, 50, 66) == 50", "assert median_numbers(21, 51, 65) == 51", "assert median_numbers(29, 51, 67) == 51", "assert median_numbers(26, 55, 69) == 55", "assert median_numbers(24, 53, 64) == 53", "assert median_numbers(28, 55, 65) == 55", "assert median_numbers(27, 57, 66) == 57", "assert median_numbers(20, 58, 70) == 58", "assert median_numbers(23, 56, 67) == 56", "assert median_numbers(28, 55, 69) == 55", "assert median_numbers(23, 58, 70) == 58", "assert median_numbers(26, 54, 62) == 54", "assert median_numbers(27, 51, 64) == 51", "assert median_numbers(28, 50, 65) == 50", "assert median_numbers(29, 55, 69) == 55", "assert median_numbers(22, 57, 70) == 57", "assert median_numbers(27, 52, 69) == 52", "assert median_numbers(30, 58, 61) == 58", "assert median_numbers(20, 58, 63) == 58", "assert median_numbers(27, 51, 69) == 51", "assert median_numbers(21, 12, 26) == 21", "assert median_numbers(18, 6, 28) == 18", "assert median_numbers(19, 7, 27) == 19", "assert median_numbers(21, 14, 25) == 21", "assert median_numbers(20, 7, 29) == 20", "assert median_numbers(15, 7, 31) == 15", "assert median_numbers(15, 8, 32) == 15", "assert median_numbers(20, 6, 34) == 20", "assert median_numbers(20, 7, 28) == 20", "assert median_numbers(21, 8, 31) == 21", "assert median_numbers(23, 6, 31) == 23", "assert median_numbers(20, 10, 34) == 20", "assert median_numbers(16, 14, 29) == 16", "assert median_numbers(16, 7, 30) == 16", "assert median_numbers(23, 9, 32) == 23", "assert median_numbers(15, 7, 28) == 15", "assert median_numbers(18, 5, 26) == 18", "assert median_numbers(22, 8, 26) == 22", "assert median_numbers(19, 6, 26) == 19", "assert median_numbers(15, 11, 30) == 15", "assert median_numbers(18, 5, 31) == 18", "assert median_numbers(19, 6, 32) == 19", "assert median_numbers(20, 5, 31) == 20", "assert median_numbers(21, 13, 26) == 21", "assert median_numbers(19, 5, 33) == 19", "assert median_numbers(24, 8, 25) == 24", "assert median_numbers(21, 15, 34) == 21", "assert median_numbers(17, 14, 31) == 17", "assert median_numbers(17, 8, 30) == 17", "assert median_numbers(21, 13, 34) == 21", "assert median_numbers(19, 5, 34) == 19", "assert median_numbers(15, 8, 30) == 15", "assert median_numbers(21, 12, 31) == 21", "assert median_numbers(19, 40, 78) == 40", "assert median_numbers(19, 50, 78) == 50", "assert median_numbers(11, 44, 73) == 44", "assert median_numbers(18, 42, 70) == 42", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 48, 79) == 48", "assert median_numbers(17, 48, 79) == 48", "assert median_numbers(17, 46, 74) == 46", "assert median_numbers(20, 49, 78) == 49", "assert median_numbers(12, 40, 71) == 40", "assert median_numbers(16, 40, 79) == 40", "assert median_numbers(17, 40, 80) == 40", "assert median_numbers(15, 50, 78) == 50", "assert median_numbers(11, 41, 76) == 41", "assert median_numbers(20, 47, 73) == 47", "assert median_numbers(19, 50, 71) == 50", "assert median_numbers(10, 42, 77) == 42", "assert median_numbers(20, 44, 70) == 44", "assert median_numbers(16, 41, 78) == 41", "assert median_numbers(20, 49, 70) == 49", "assert median_numbers(11, 50, 75) == 50", "assert median_numbers(20, 42, 72) == 42", "assert median_numbers(15, 48, 74) == 48", "assert median_numbers(15, 49, 72) == 49", "assert median_numbers(10, 42, 80) == 42", "assert median_numbers(17, 43, 78) == 43", "assert median_numbers(18, 44, 73) == 44", "assert median_numbers(13, 50, 80) == 50", "assert median_numbers(14, 40, 75) == 40", "assert median_numbers(11, 48, 72) == 48", "assert median_numbers(10, 42, 75) == 42", "assert median_numbers(10, 42, 74) == 42", "assert median_numbers(15, 41, 74) == 41"], "entry_point": "median_numbers", "repair_prompt": ["Create a function median_numbers that determines the median value among three given numbers.\nmedian_numbers(25,55,65)==55.0\n"], "completions": ["from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    This function takes three float numbers as input and returns the median value.\n    It handles edge cases where numbers are equal by sorting the numbers and selecting\n    the middle value.\n\n    Parameters:\n    a (float): First number\n    b (float): Second number\n    c (float): Third number\n\n    Returns:\n    float: The median value of the three numbers\n    \"\"\"\n    # Create a list of the numbers\n    numbers = [a, b, c]\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output: 2.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"Calculate the median of three numbers.\n\n    This function takes three numbers as input, sorts them, and returns the middle value,\n    which is the median. It handles both integer and floating-point numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median value of the three numbers.\n    \"\"\"\n    # Create a list of the input numbers\n    numbers = [a, b, c]\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output: 2.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    This function takes three numbers as input, sorts them, and returns the middle value.\n    It handles duplicate numbers correctly and is designed to work with float inputs.\n\n    Parameters:\n    a (float): First number\n    b (float): Second number\n    c (float): Third number\n\n    Returns:\n    float: The median value of the three numbers\n    \"\"\"\n    # Create a list of the input numbers\n    numbers = [a, b, c]\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Return the middle value, which is the median\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output should be 2.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Parameters:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n    \"\"\"\n    # Sort the numbers and return the middle value\n    sorted_numbers = sorted([a, b, c])\n    return sorted_numbers[1]\n\ndef main():\n    # Example usage of the median_numbers function\n    try:\n        result = median_numbers(25, 55, 65)\n        print(f\"The median of the numbers is: {result}\")\n    except TypeError as e:\n        print(f\"Error: {e}. Please ensure all inputs are numeric.\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    This function takes three numeric inputs and returns the median value.\n    It assumes that the inputs are valid numeric values.\n\n    Parameters:\n    a (float): First number\n    b (float): Second number\n    c (float): Third number\n\n    Returns:\n    float: The median value of the three numbers\n    \"\"\"\n    # Create a list of the numbers\n    numbers = [a, b, c]\n    \n    # Sort the list\n    numbers.sort()\n    \n    # Return the middle value\n    return numbers[1]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with some example inputs\n    print(median_numbers(3.0, 1.0, 2.0))  # Output: 2.0\n    print(median_numbers(9.0, 5.0, 7.0))  # Output: 7.0\n    print(median_numbers(10.0, 10.0, 5.0))  # Output: 10.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    This function takes three numbers as input, sorts them, and returns the middle value,\n    which is the median. It handles both integer and float inputs.\n\n    Parameters:\n    a (float): First number\n    b (float): Second number\n    c (float): Third number\n\n    Returns:\n    float: The median value of the three numbers\n    \"\"\"\n    # Create a list of the input numbers\n    numbers = [a, b, c]\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Return the middle value, which is the median\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(5.0, 3.0, 8.0)\n# print(median_value)  # Output: 5.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"Calculate the median of three numbers.\n\n    This function takes three numeric inputs and returns the median value.\n    It raises a TypeError if any of the inputs are not numbers.\n\n    Args:\n        a (float): First number\n        b (float): Second number\n        c (float): Third number\n\n    Returns:\n        float: The median value of the three numbers\n\n    Raises:\n        TypeError: If any of the inputs are not of type float or int.\n    \"\"\"\n    # Validate input types\n    if not all(isinstance(i, (int, float)) for i in (a, b, c)):\n        raise TypeError(\"All inputs must be numbers (int or float).\")\n\n    # Sort the numbers and return the middle value\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output: 2.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    Parameters:\n    a (float): First number\n    b (float): Second number\n    c (float): Third number\n\n    Returns:\n    float: The median value of the three numbers\n    \"\"\"\n    # Sort the numbers\n    sorted_numbers = sorted([a, b, c])\n    \n    # Return the middle value\n    return sorted_numbers[1]\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with example values\n    result = median_numbers(25, 55, 65)\n    print(f\"The median of the numbers is: {result}\")\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median of three numbers.\n\n    This function takes three float numbers as input, sorts them, and returns the middle value,\n    which is the median. It handles edge cases like duplicate numbers efficiently.\n\n    Parameters:\n    a (float): First number\n    b (float): Second number\n    c (float): Third number\n\n    Returns:\n    float: The median value of the three numbers\n    \"\"\"\n    # Create a list of the input numbers\n    numbers = [a, b, c]\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Return the middle value, which is the median\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output: 2.0\n", "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"Calculate the median of three numbers.\n\n    This function takes three float inputs, sorts them, and returns the middle value,\n    which is the median. It handles edge cases such as negative numbers and zero.\n\n    Parameters:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n    \"\"\"\n    # Create a list of the input numbers\n    numbers = [a, b, c]\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Return the middle value, which is the median\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output: 2.0\n"], "plans": ["requirement analysis:\nThe function should accurately compute the median of three numbers, handling cases where numbers are equal or very close. It should be efficient and easy to use, with clear documentation for integration.\nrequirement pool:\n- Accurate median calculation for three numbers\n- Handle edge cases like equal numbers\n- Optimize for performance\n- Provide clear documentation\n- Ensure easy integration into larger projects\nWe will implement a simple function using Python's built-in capabilities to determine the median of three numbers. This approach ensures optimal performance and easy integration without the need for external libraries. The function will handle edge cases where numbers are equal by sorting the numbers and selecting the middle value.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, considering edge cases such as negative numbers and non-integer values. It should be optimized for performance and easy to use.\nrequirement pool:\n- Accurate median calculation for three numbers\n- Handle edge cases like negative numbers\n- Optimize for performance\n- Provide clear documentation\n- Ensure ease of use\nWe will implement a simple Python function to calculate the median of three numbers. This function will sort the numbers and return the middle value. We will use Python's built-in capabilities to ensure simplicity and efficiency, avoiding the need for external libraries. The function will handle edge cases such as negative numbers and non-integer values by treating them as valid inputs.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, handling cases where numbers may be equal. It should be simple to use and understand, providing quick results.\nrequirement pool:\n- Accurate median calculation for three numbers\n- Handle edge cases like duplicate numbers\n- Optimize for performance\n- Provide clear documentation\n- Ensure compatibility with Python 3.x\nWe will implement a simple function using Python's built-in capabilities to calculate the median of three numbers. The function will sort the numbers and return the middle value, ensuring it handles duplicate numbers correctly. This approach is efficient and straightforward, avoiding unnecessary complexity.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, considering edge cases such as duplicate values and negative numbers. It should be efficient and easy to use.\nrequirement pool:\n- Accurate median calculation for three numbers\n- Handle edge cases like duplicate and negative numbers\n- Optimize for performance\n- Provide clear documentation\n- Ensure easy integration into larger projects\nWe will implement a simple function to calculate the median of three numbers by sorting them and selecting the middle value. This approach is efficient and handles edge cases like duplicate and negative numbers naturally. We will not use any external libraries as the task is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, considering all possible input scenarios, including duplicates and negative numbers. It should be efficient and easy to use without external dependencies.\nrequirement pool:\n- Implement the median_numbers function to calculate the median of three numbers.\n- Ensure the function handles edge cases like duplicate numbers.\n- Optimize the function for performance.\n- Create a user-friendly interface for input and output.\n- Document the function with examples and edge cases.\nWe will implement a simple function called median_numbers that calculates the median of three numbers without using any external libraries. The function will sort the numbers and return the middle value, ensuring it handles edge cases like duplicate numbers efficiently.\n", "requirement analysis:\nThe function should accurately determine the median of three numbers, handling both integer and float inputs. It should be simple to use and integrate into existing codebases without requiring additional libraries.\nrequirement pool:\n- Accurate median calculation for three numbers\n- Handle both integer and float inputs\n- Provide clear documentation for function usage\n- Optimize for performance\n- Ensure compatibility with Python 3.x\nWe will implement a simple function called median_numbers that calculates the median of three numbers without using any external libraries. This approach ensures high efficiency and usability, aligning with the target product goals. The function will handle both integer and float inputs and will include documentation for ease of integration.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, handling both integer and floating-point inputs. It should be efficient and easy to use, with clear documentation for integration into other projects.\nrequirement pool:\n- Accurate median calculation\n- Performance optimization\n- Clear documentation\n- Handling edge cases\n- Ease of integration\nWe will implement a simple function using Python's built-in capabilities to determine the median of three numbers. This approach avoids unnecessary complexity and dependencies, ensuring quick computation and easy integration. We will handle edge cases such as non-numeric inputs by raising appropriate exceptions.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, considering edge cases such as duplicate values. It should be simple to use and integrate into larger projects without requiring additional libraries.\nrequirement pool:\n- Accurate median calculation\n- Handle edge cases like duplicate numbers\n- Quick computation performance\n- Simple and intuitive interface\n- Integration capability with larger projects\nWe will implement a simple function that calculates the median of three numbers without using any external libraries. The function will sort the numbers and return the middle value, ensuring it handles edge cases like duplicate numbers efficiently.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, considering edge cases such as duplicate values. It should be optimized for performance and easy to use, with clear documentation.\nrequirement pool:\n- Accurate median calculation\n- Handle edge cases like duplicates\n- Optimize for performance\n- Provide clear documentation\n- Ensure ease of use\nWe will implement a standalone function called median_numbers that calculates the median of three numbers. The function will sort the numbers and return the middle value, ensuring it handles edge cases like duplicate numbers efficiently. We will use Python's built-in capabilities to keep the implementation simple and performant, avoiding external libraries for this basic task.\n", "requirement analysis:\nThe function should accurately compute the median of three numbers, ensuring it handles all possible input scenarios including negative numbers and zero. It should be optimized for performance and provide clear documentation for ease of use.\nrequirement pool:\n- Implement the median_numbers function to calculate median accurately\n- Optimize the function for performance\n- Ensure the function handles edge cases\n- Provide documentation for the function\n- Test the function with various inputs\nWe will implement a simple custom function to calculate the median of three numbers. This approach is chosen because it is efficient for a small fixed number of inputs and does not require any external libraries, which aligns with the requirement for quick computation and simplicity. The function will handle edge cases such as negative numbers and zero by sorting the input numbers and selecting the middle value.\n"], "test": ["def check(median_numbers):\n\tassert median_numbers(25,55,65)==55.0", "def check(median_numbers):\n\tassert median_numbers(20,10,30)==20.0", "def check(median_numbers):\n\tassert median_numbers(15,45,75)==45.0", "def check(median_numbers):\n\tassert median_numbers(22, 54, 68) == 54", "def check(median_numbers):\n\tassert median_numbers(22, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(22, 54, 61) == 54", "def check(median_numbers):\n\tassert median_numbers(30, 53, 63) == 53", "def check(median_numbers):\n\tassert median_numbers(22, 55, 61) == 55", "def check(median_numbers):\n\tassert median_numbers(25, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(22, 56, 68) == 56", "def check(median_numbers):\n\tassert median_numbers(29, 53, 70) == 53", "def check(median_numbers):\n\tassert median_numbers(23, 53, 66) == 53", "def check(median_numbers):\n\tassert median_numbers(29, 58, 67) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 52, 64) == 52", "def check(median_numbers):\n\tassert median_numbers(29, 60, 61) == 60", "def check(median_numbers):\n\tassert median_numbers(25, 57, 61) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 50, 66) == 50", "def check(median_numbers):\n\tassert median_numbers(21, 51, 65) == 51", "def check(median_numbers):\n\tassert median_numbers(29, 51, 67) == 51", "def check(median_numbers):\n\tassert median_numbers(26, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(24, 53, 64) == 53", "def check(median_numbers):\n\tassert median_numbers(28, 55, 65) == 55", "def check(median_numbers):\n\tassert median_numbers(27, 57, 66) == 57", "def check(median_numbers):\n\tassert median_numbers(20, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(23, 56, 67) == 56", "def check(median_numbers):\n\tassert median_numbers(28, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(23, 58, 70) == 58", "def check(median_numbers):\n\tassert median_numbers(26, 54, 62) == 54", "def check(median_numbers):\n\tassert median_numbers(27, 51, 64) == 51", "def check(median_numbers):\n\tassert median_numbers(28, 50, 65) == 50", "def check(median_numbers):\n\tassert median_numbers(29, 55, 69) == 55", "def check(median_numbers):\n\tassert median_numbers(22, 57, 70) == 57", "def check(median_numbers):\n\tassert median_numbers(27, 52, 69) == 52", "def check(median_numbers):\n\tassert median_numbers(30, 58, 61) == 58", "def check(median_numbers):\n\tassert median_numbers(20, 58, 63) == 58", "def check(median_numbers):\n\tassert median_numbers(27, 51, 69) == 51", "def check(median_numbers):\n\tassert median_numbers(21, 12, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(18, 6, 28) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 7, 27) == 19", "def check(median_numbers):\n\tassert median_numbers(21, 14, 25) == 21", "def check(median_numbers):\n\tassert median_numbers(20, 7, 29) == 20", "def check(median_numbers):\n\tassert median_numbers(15, 7, 31) == 15", "def check(median_numbers):\n\tassert median_numbers(15, 8, 32) == 15", "def check(median_numbers):\n\tassert median_numbers(20, 6, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(20, 7, 28) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 8, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(23, 6, 31) == 23", "def check(median_numbers):\n\tassert median_numbers(20, 10, 34) == 20", "def check(median_numbers):\n\tassert median_numbers(16, 14, 29) == 16", "def check(median_numbers):\n\tassert median_numbers(16, 7, 30) == 16", "def check(median_numbers):\n\tassert median_numbers(23, 9, 32) == 23", "def check(median_numbers):\n\tassert median_numbers(15, 7, 28) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 26) == 18", "def check(median_numbers):\n\tassert median_numbers(22, 8, 26) == 22", "def check(median_numbers):\n\tassert median_numbers(19, 6, 26) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 11, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(18, 5, 31) == 18", "def check(median_numbers):\n\tassert median_numbers(19, 6, 32) == 19", "def check(median_numbers):\n\tassert median_numbers(20, 5, 31) == 20", "def check(median_numbers):\n\tassert median_numbers(21, 13, 26) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 33) == 19", "def check(median_numbers):\n\tassert median_numbers(24, 8, 25) == 24", "def check(median_numbers):\n\tassert median_numbers(21, 15, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(17, 14, 31) == 17", "def check(median_numbers):\n\tassert median_numbers(17, 8, 30) == 17", "def check(median_numbers):\n\tassert median_numbers(21, 13, 34) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 5, 34) == 19", "def check(median_numbers):\n\tassert median_numbers(15, 8, 30) == 15", "def check(median_numbers):\n\tassert median_numbers(21, 12, 31) == 21", "def check(median_numbers):\n\tassert median_numbers(19, 40, 78) == 40", "def check(median_numbers):\n\tassert median_numbers(19, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(18, 42, 70) == 42", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 48, 79) == 48", "def check(median_numbers):\n\tassert median_numbers(17, 46, 74) == 46", "def check(median_numbers):\n\tassert median_numbers(20, 49, 78) == 49", "def check(median_numbers):\n\tassert median_numbers(12, 40, 71) == 40", "def check(median_numbers):\n\tassert median_numbers(16, 40, 79) == 40", "def check(median_numbers):\n\tassert median_numbers(17, 40, 80) == 40", "def check(median_numbers):\n\tassert median_numbers(15, 50, 78) == 50", "def check(median_numbers):\n\tassert median_numbers(11, 41, 76) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 47, 73) == 47", "def check(median_numbers):\n\tassert median_numbers(19, 50, 71) == 50", "def check(median_numbers):\n\tassert median_numbers(10, 42, 77) == 42", "def check(median_numbers):\n\tassert median_numbers(20, 44, 70) == 44", "def check(median_numbers):\n\tassert median_numbers(16, 41, 78) == 41", "def check(median_numbers):\n\tassert median_numbers(20, 49, 70) == 49", "def check(median_numbers):\n\tassert median_numbers(11, 50, 75) == 50", "def check(median_numbers):\n\tassert median_numbers(20, 42, 72) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 48, 74) == 48", "def check(median_numbers):\n\tassert median_numbers(15, 49, 72) == 49", "def check(median_numbers):\n\tassert median_numbers(10, 42, 80) == 42", "def check(median_numbers):\n\tassert median_numbers(17, 43, 78) == 43", "def check(median_numbers):\n\tassert median_numbers(18, 44, 73) == 44", "def check(median_numbers):\n\tassert median_numbers(13, 50, 80) == 50", "def check(median_numbers):\n\tassert median_numbers(14, 40, 75) == 40", "def check(median_numbers):\n\tassert median_numbers(11, 48, 72) == 48", "def check(median_numbers):\n\tassert median_numbers(10, 42, 75) == 42", "def check(median_numbers):\n\tassert median_numbers(10, 42, 74) == 42", "def check(median_numbers):\n\tassert median_numbers(15, 41, 74) == 41"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\"Calculate the median of three numbers.\n\n    This function takes three float inputs, sorts them, and returns the middle value,\n    which is the median. It handles edge cases such as negative numbers and zero.\n\n    Parameters:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n    \"\"\"\n    # Create a list of the input numbers\n    numbers = [a, b, c]\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Return the middle value, which is the median\n    return numbers[1]\n\n# Example usage:\n# median_value = median_numbers(3.0, 1.0, 2.0)\n# print(median_value)  # Output: 2.0\n", "passed": true, "pass": true, "pass_num": 10, "round": 358, "mutate_method": "condense_two2one", "parent_index": 351}
