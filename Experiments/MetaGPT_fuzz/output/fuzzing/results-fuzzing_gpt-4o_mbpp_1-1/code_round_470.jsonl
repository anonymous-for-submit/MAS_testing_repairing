{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 279, "prompt": "Create a function to compute the nth decagonal number.", "code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(1) == 1", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(2) == 10", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(4) == 52", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(3) == 27", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(9) == 297", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(14) == 742", "assert is_num_decagonal(6) == 126", "assert is_num_decagonal(12) == 540", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(11) == 451", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(10) == 370", "assert is_num_decagonal(8) == 232", "assert is_num_decagonal(15) == 855", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(13) == 637", "assert is_num_decagonal(5) == 85", "assert is_num_decagonal(10) == 370"], "entry_point": "is_num_decagonal", "repair_prompt": ["Create a function is_num_decagonal to compute the nth decagonal number.\nis_num_decagonal(3) == 27\n"], "completions": ["from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage:\n# try:\n#     result = is_num_decagonal(5)\n#     print(f\"The 5th decagonal number is: {result}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage:\n# try:\n#     result = is_num_decagonal(5)\n#     print(f\"The 5th decagonal number is: {result}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"Calculate the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute. Must be a positive integer.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    # Validate input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Compute the decagonal number using the formula D_n = n(4n-3)\n    decagonal_number = n * (4 * n - 3)\n    \n    return decagonal_number\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Compute the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    return n * (4 * n - 3)\n\ndef main():\n    \"\"\"\n    Main function to demonstrate the usage of is_num_decagonal function.\n    \"\"\"\n    try:\n        # Example usage\n        n = 5\n        result = is_num_decagonal(n)\n        print(f\"The {n}th decagonal number is: {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    # Validate input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Compute the nth decagonal number using the formula D_n = n(4n-3)\n    decagonal_number = n * (4 * n - 3)\n\n    return decagonal_number\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        # Example: Calculate the 5th decagonal number\n        result = is_num_decagonal(5)\n        print(f\"The 5th decagonal number is: {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute. Must be a positive integer.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage:\n# print(is_num_decagonal(5))  # Output: 85\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Compute the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute. Must be a positive integer.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage:\n# try:\n#     result = is_num_decagonal(5)\n#     print(f\"The 5th decagonal number is: {result}\")\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"Calculate the nth decagonal number using the formula D_n = n(4n-3).\n\n    Args:\n        n (int): The position of the decagonal number to compute.\n\n    Returns:\n        int: The nth decagonal number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth decagonal number using the formula D_n = n(4n-3)\n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage:\n# To calculate the 5th decagonal number, call the function as follows:\n# result = is_num_decagonal(5)\n# print(result)  # Output will be 65\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number using the formula D(n) = 4n^2 - 3n.\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"The position n must be a positive integer.\")\n    \n    return 4 * n**2 - 3 * n\n\n# Example usage:\n# To calculate the 5th decagonal number, call the function as follows:\n# result = is_num_decagonal(5)\n# print(result)  # Output will be 85\n", "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Compute the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth decagonal number using the formula\n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        # Example: Compute the 5th decagonal number\n        result = is_num_decagonal(5)\n        print(f\"The 5th decagonal number is: {result}\")\n    except ValueError as e:\n        print(e)\n"], "plans": ["requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle both small and large values of n efficiently.\nrequirement pool:\n- Accurate computation of nth decagonal number\n- Optimize for performance with large inputs\n- Provide clear documentation and usage examples\n- Ensure compatibility with existing mathematical software\n- Include error handling for invalid inputs\nWe will implement a simple function to compute the nth decagonal number using the formula D_n = n(4n-3). This approach ensures accurate computation and is efficient for both small and large values of n. We will also include basic error handling to manage invalid inputs such as negative or non-integer values.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number using the formula: D_n = n(4n-3). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the decagonal number formula\n- Optimize for performance with large inputs\n- Provide documentation and usage examples\n- Ensure compatibility with existing mathematical libraries\n- Include error handling for invalid inputs\nWe will implement a simple function to calculate the nth decagonal number using the formula D_n = n(4n-3). The function will include error handling for invalid inputs such as negative or non-integer values. We will use Python's built-in capabilities to ensure the function is efficient and can handle large inputs.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle positive integer inputs and return the correct decagonal number.\nrequirement pool:\n- Implement the decagonal number formula\n- Ensure function handles large inputs efficiently\n- Provide documentation for function usage\n- Optimize code for performance\n- Include error handling for invalid inputs\nWe will implement the decagonal number formula D_n = n(4n-3) directly in a function. The function will handle positive integer inputs efficiently and include error handling for invalid inputs. We will use Python's built-in capabilities to ensure performance and accuracy without needing additional libraries.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle large values of n efficiently and provide clear documentation for users.\nrequirement pool:\n- Implement the decagonal number formula\n- Optimize for performance with large inputs\n- Include examples and documentation\n- Ensure compatibility with other mathematical software\n- Provide error handling for invalid inputs\nWe will implement the decagonal number formula using a simple function. The formula for the nth decagonal number is D_n = n(4n-3). This formula is straightforward and can be computed efficiently for large values of n. We will use Python's built-in capabilities to handle large integers, ensuring performance optimization. Additionally, we will provide clear documentation and examples to help users understand the function's usage.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle large values of n efficiently and provide clear documentation for users.\nrequirement pool:\n- Implement the decagonal number calculation using the formula n(4n-3)\n- Optimize the function for performance with large inputs\n- Include examples and documentation for user understanding\n- Ensure compatibility with existing mathematical software\n- Provide error handling for invalid inputs\nWe will implement the function to compute the nth decagonal number using the formula D_n = n(4n-3). The function will be optimized for performance by using simple arithmetic operations, which are efficient even for large inputs. We will also include input validation to handle invalid inputs gracefully and provide clear documentation with examples for user understanding.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the decagonal number formula\n- Optimize for performance with large n\n- Provide usage examples and documentation\n- Ensure compatibility with existing mathematical libraries\n- Create a user-friendly interface for non-programmers\nWe will implement the function using the formula for the nth decagonal number: D_n = n(4n-3). This formula is straightforward and allows for efficient computation even for large values of n. We will ensure the function handles only positive integer inputs, as negative or non-integer inputs do not make sense in the context of decagonal numbers. We will use Python's built-in capabilities to handle large integers efficiently.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle both small and large values of n efficiently.\nrequirement pool:\n- Implement the decagonal number formula\n- Optimize for performance with large inputs\n- Provide examples and documentation\n- Ensure compatibility with other mathematical software\n- Include error handling for invalid inputs\nWe will implement a simple function to compute the nth decagonal number using the formula D_n = n(4n-3). The function will include error handling for non-integer and negative inputs. We will use Python's built-in capabilities to ensure performance and simplicity.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should be efficient and handle large inputs gracefully.\nrequirement pool:\n- Implement the decagonal number calculation using the formula D_n = n(4n-3)\n- Ensure the function handles large inputs efficiently\n- Provide documentation explaining the concept of decagonal numbers\n- Create a user-friendly interface for input and output\n- Optimize the function for performance\nWe will implement a simple function to calculate the nth decagonal number using the formula D_n = n(4n-3). The function will be optimized for performance to handle large inputs efficiently. We will use Python's built-in capabilities as they are sufficient for this task, without the need for additional libraries.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth decagonal number. Decagonal numbers are figurate numbers that represent a decagon. The formula for the nth decagonal number is given by D(n) = 4n^2 - 3n.\nrequirement pool:\n- Implement the function to calculate the nth decagonal number.\n- Ensure the function is optimized for performance.\n- Provide documentation and examples for the function.\n- Create a user interface for input and output of decagonal numbers.\n- Include error handling for invalid inputs.\nWe will implement a simple function to calculate the nth decagonal number using the formula D(n) = 4n^2 - 3n. The function will be optimized for performance by using direct mathematical computation without any loops or recursion. We will use Python's built-in capabilities to ensure efficient computation. Documentation will be provided to explain the function and its usage.\n", "requirement analysis:\nThe function should accurately compute the nth decagonal number using the formula: D_n = n(4n-3). It should handle large values of n efficiently and provide clear documentation for users.\nrequirement pool:\n- Implement the decagonal number formula\n- Optimize for performance with large inputs\n- Include examples and documentation\n- Integrate with existing mathematical libraries\n- Provide a user-friendly interface for input\nWe will implement a simple function to compute the nth decagonal number using the formula D_n = n(4n-3). The function will be optimized for performance with large inputs by using basic arithmetic operations, which are computationally efficient. We will also include clear documentation and examples to help users understand the formula and usage.\n"], "test": ["def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(1) == 1", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(2) == 10", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(4) == 52", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(3) == 27", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(7) == 175", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(9) == 297", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(14) == 742", "def check(is_num_decagonal):\n\tassert is_num_decagonal(6) == 126", "def check(is_num_decagonal):\n\tassert is_num_decagonal(12) == 540", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(11) == 451", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370", "def check(is_num_decagonal):\n\tassert is_num_decagonal(8) == 232", "def check(is_num_decagonal):\n\tassert is_num_decagonal(15) == 855", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(13) == 637", "def check(is_num_decagonal):\n\tassert is_num_decagonal(5) == 85", "def check(is_num_decagonal):\n\tassert is_num_decagonal(10) == 370"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Compute the nth decagonal number using the formula D_n = n(4n-3).\n\n    Parameters:\n    n (int): The position of the decagonal number to compute.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Calculate the nth decagonal number using the formula\n    decagonal_number = n * (4 * n - 3)\n    return decagonal_number\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        # Example: Compute the 5th decagonal number\n        result = is_num_decagonal(5)\n        print(f\"The 5th decagonal number is: {result}\")\n    except ValueError as e:\n        print(e)\n", "passed": true, "pass": true, "pass_num": 10, "round": 470, "mutate_method": "rephrase_one", "parent_index": 110}
