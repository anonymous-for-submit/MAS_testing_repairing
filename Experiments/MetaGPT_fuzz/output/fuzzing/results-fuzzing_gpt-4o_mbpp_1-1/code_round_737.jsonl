{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 64, "prompt": "Write a function to sort a list of tuples using the second value of each tuple.", "code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "test_imports": [], "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "assert subject_marks([('OEoLiruoZyU', 88), ('mIvDiJu', 90), ('gbLBnXfPg', 95), ('UQwGJqSkunwBAQULBfw', 77)]) == [('UQwGJqSkunwBAQULBfw', 77), ('OEoLiruoZyU', 88), ('mIvDiJu', 90), ('gbLBnXfPg', 95)]", "assert subject_marks([('cPFV', 88), ('CgDf', 88), ('oOzDEneP', 93), ('oDwiNqxTvRUJO', 82)]) == [('oDwiNqxTvRUJO', 82), ('cPFV', 88), ('CgDf', 88), ('oOzDEneP', 93)]", "assert subject_marks([('bYxQ', 87), ('cAMTrHC', 90), ('Qhow', 95), ('OMMPTxXUNPQXSPdCZ', 77)]) == [('OMMPTxXUNPQXSPdCZ', 77), ('bYxQ', 87), ('cAMTrHC', 90), ('Qhow', 95)]", "assert subject_marks([('vSicc', 89), ('KyrnfQnQrwc', 92), ('DHxWT', 94), ('wGtStVHIFzXkwdTX vcq', 81)]) == [('wGtStVHIFzXkwdTX vcq', 81), ('vSicc', 89), ('KyrnfQnQrwc', 92), ('DHxWT', 94)]", "assert subject_marks([('moZPBy', 92), ('iWiL', 92), ('zCaA', 97), ('HLTKhqbEqtCv l', 86)]) == [('HLTKhqbEqtCv l', 86), ('moZPBy', 92), ('iWiL', 92), ('zCaA', 97)]", "assert subject_marks([('EzxjNgSwlI', 88), ('Wrn', 92), ('DmXkG', 102), ('rEiARNRbOKOooS', 86)]) == [('rEiARNRbOKOooS', 86), ('EzxjNgSwlI', 88), ('Wrn', 92), ('DmXkG', 102)]", "assert subject_marks([('jMVtNMLssslK', 91), ('rfqGYyl', 88), ('qhaQoY', 94), ('kNFNwaieJFnMNKnEyK', 81)]) == [('kNFNwaieJFnMNKnEyK', 81), ('rfqGYyl', 88), ('jMVtNMLssslK', 91), ('qhaQoY', 94)]", "assert subject_marks([('FNQAIVe', 85), ('ARlPcNnFbkBL', 92), ('ytPSw', 92), ('fsCNCrgFHQftcH', 84)]) == [('fsCNCrgFHQftcH', 84), ('FNQAIVe', 85), ('ARlPcNnFbkBL', 92), ('ytPSw', 92)]", "assert subject_marks([('moSpNzAg', 88), ('aREeLPKi', 92), ('PlQdIawnW', 98), ('iNbnbXlXrPtFkOmVv', 84)]) == [('iNbnbXlXrPtFkOmVv', 84), ('moSpNzAg', 88), ('aREeLPKi', 92), ('PlQdIawnW', 98)]", "assert subject_marks([('ylkiTygWyXE', 89), ('PZfX', 95), ('DYBCbAAka', 94), ('nnNysBfthiRsTF yRbvtX', 79)]) == [('nnNysBfthiRsTF yRbvtX', 79), ('ylkiTygWyXE', 89), ('DYBCbAAka', 94), ('PZfX', 95)]", "assert subject_marks([('wKeYoleLOZ', 90), ('UZKWtqWCpS', 85), ('PtaXUSICX', 95), ('xcwObYeZRWCjqgkKyBh ', 80)]) == [('xcwObYeZRWCjqgkKyBh ', 80), ('UZKWtqWCpS', 85), ('wKeYoleLOZ', 90), ('PtaXUSICX', 95)]", "assert subject_marks([('PGqbVWWoVY', 88), ('fuDnsj', 89), ('ZGYyuGx', 92), ('MB D vQCgbThaojch', 77)]) == [('MB D vQCgbThaojch', 77), ('PGqbVWWoVY', 88), ('fuDnsj', 89), ('ZGYyuGx', 92)]", "assert subject_marks([('uPLoAM', 91), ('wbmNbIKma', 89), ('MFDgyVYM', 98), ('uGXvKtwQYoCx', 81)]) == [('uGXvKtwQYoCx', 81), ('wbmNbIKma', 89), ('uPLoAM', 91), ('MFDgyVYM', 98)]", "assert subject_marks([('ucBLvKn', 84), ('FoU', 86), ('cvE', 99), ('cDrNAdgrHoWpgeU', 84)]) == [('ucBLvKn', 84), ('cDrNAdgrHoWpgeU', 84), ('FoU', 86), ('cvE', 99)]", "assert subject_marks([('zgPYQeqfC', 86), ('ZaQR', 89), ('rTgoQ', 95), ('qUdRqRdL kpZsmAlefyX', 82)]) == [('qUdRqRdL kpZsmAlefyX', 82), ('zgPYQeqfC', 86), ('ZaQR', 89), ('rTgoQ', 95)]", "assert subject_marks([('lxCs', 90), ('gfPcdSz', 87), ('eNS', 101), ('DIiNtXYd XFJJvxao', 80)]) == [('DIiNtXYd XFJJvxao', 80), ('gfPcdSz', 87), ('lxCs', 90), ('eNS', 101)]", "assert subject_marks([('NaLoACnnqh', 92), ('oHePdMddKN', 86), ('lgRUjr', 98), ('JSZmxYVTfbWzjq', 79)]) == [('JSZmxYVTfbWzjq', 79), ('oHePdMddKN', 86), ('NaLoACnnqh', 92), ('lgRUjr', 98)]", "assert subject_marks([('TuSZgJDuPF', 84), ('HKYFfg', 88), ('henHT', 100), ('przTdXRYIrNS', 77)]) == [('przTdXRYIrNS', 77), ('TuSZgJDuPF', 84), ('HKYFfg', 88), ('henHT', 100)]", "assert subject_marks([('NsKzivsRl', 87), ('rekCCLItTPpv', 85), ('nwgEnrgg', 96), ('OevnERBJoXyzIEmyJJ', 77)]) == [('OevnERBJoXyzIEmyJJ', 77), ('rekCCLItTPpv', 85), ('NsKzivsRl', 87), ('nwgEnrgg', 96)]", "assert subject_marks([('kAGUuwpiH', 93), ('KNQWiuq', 95), ('udrF', 94), ('JmuMCXFAiVYQnIowNx', 80)]) == [('JmuMCXFAiVYQnIowNx', 80), ('kAGUuwpiH', 93), ('udrF', 94), ('KNQWiuq', 95)]", "assert subject_marks([('zAV', 90), ('YQQOKGNG', 92), ('hdsrLFUV', 100), ('yVTEtRwxxxtb', 86)]) == [('yVTEtRwxxxtb', 86), ('zAV', 90), ('YQQOKGNG', 92), ('hdsrLFUV', 100)]", "assert subject_marks([('poWpC', 84), ('WNkaCKDjWWC', 95), ('USWKwMg', 92), ('LTPePxXydsRcsTgOA', 81)]) == [('LTPePxXydsRcsTgOA', 81), ('poWpC', 84), ('USWKwMg', 92), ('WNkaCKDjWWC', 95)]", "assert subject_marks([('yaYDs', 93), ('oWW', 90), ('hllzmI', 95), ('Gwg nxvDuJxlYUbXWZ', 77)]) == [('Gwg nxvDuJxlYUbXWZ', 77), ('oWW', 90), ('yaYDs', 93), ('hllzmI', 95)]", "assert subject_marks([('UWfZF', 89), ('RplarQ', 87), ('UeHz', 92), ('HjATajU IpIFXtVneA', 77)]) == [('HjATajU IpIFXtVneA', 77), ('RplarQ', 87), ('UWfZF', 89), ('UeHz', 92)]", "assert subject_marks([('KxMMw', 91), ('QnMUoOp', 90), ('MTrpRQ', 102), ('PqoJUhBVeDzEOTWYDaD', 83)]) == [('PqoJUhBVeDzEOTWYDaD', 83), ('QnMUoOp', 90), ('KxMMw', 91), ('MTrpRQ', 102)]", "assert subject_marks([('oywUNZcvRO', 87), ('FldXVcvrSEO', 93), ('mED', 94), ('fBO SdVCnkuQtmUy R', 86)]) == [('fBO SdVCnkuQtmUy R', 86), ('oywUNZcvRO', 87), ('FldXVcvrSEO', 93), ('mED', 94)]", "assert subject_marks([('BWqmGXLyxvjt', 93), ('MJMzsQDxHpjR', 90), ('YeHm', 96), ('uBNnOiEqOEyzkedxq', 87)]) == [('uBNnOiEqOEyzkedxq', 87), ('MJMzsQDxHpjR', 90), ('BWqmGXLyxvjt', 93), ('YeHm', 96)]", "assert subject_marks([('mqmyD', 83), ('uESRxUfqIco', 92), ('bHOpv', 102), ('oGQYGwOwbLyYdJYvBVG', 80)]) == [('oGQYGwOwbLyYdJYvBVG', 80), ('mqmyD', 83), ('uESRxUfqIco', 92), ('bHOpv', 102)]", "assert subject_marks([('yUzVsaRsjw', 84), ('DVUuFkb', 95), ('SsHI', 97), ('HybMXjJEYT iHKU', 87)]) == [('yUzVsaRsjw', 84), ('HybMXjJEYT iHKU', 87), ('DVUuFkb', 95), ('SsHI', 97)]", "assert subject_marks([('lbscVXp', 89), ('UUC', 85), ('ZmWaD', 95), ('IvLMQmoLcuNlXFckZ', 87)]) == [('UUC', 85), ('IvLMQmoLcuNlXFckZ', 87), ('lbscVXp', 89), ('ZmWaD', 95)]", "assert subject_marks([('ZhyXbryR', 85), ('rhY', 94), ('cOsv', 100), ('mpoQmrChrwjTr', 86)]) == [('ZhyXbryR', 85), ('mpoQmrChrwjTr', 86), ('rhY', 94), ('cOsv', 100)]", "assert subject_marks([('OnHfebNhx', 86), ('gKoR', 90), ('RqctHtu', 100), ('QgdNILgKjAXwtHx', 82)]) == [('QgdNILgKjAXwtHx', 82), ('OnHfebNhx', 86), ('gKoR', 90), ('RqctHtu', 100)]", "assert subject_marks([('UDOcqK', 88), ('AenkSWIZYeEn', 86), ('BGhUYXzK', 102), ('yhkNITljovWZuxY', 85)]) == [('yhkNITljovWZuxY', 85), ('AenkSWIZYeEn', 86), ('UDOcqK', 88), ('BGhUYXzK', 102)]", "assert subject_marks([('BUveqJdXw', 44), ('YNZysJ', 58), ('duDvJokf', 28)]) == [('duDvJokf', 28), ('BUveqJdXw', 44), ('YNZysJ', 58)]", "assert subject_marks([('GflrCC', 48), ('txR', 55), ('vDjBwolkemV', 30)]) == [('vDjBwolkemV', 30), ('GflrCC', 48), ('txR', 55)]", "assert subject_marks([('VcHJlTrWUr', 44), ('ehO', 56), ('wWIh', 34)]) == [('wWIh', 34), ('VcHJlTrWUr', 44), ('ehO', 56)]", "assert subject_marks([('RSooMIj', 46), ('yxGNla', 55), ('qrUT', 37)]) == [('qrUT', 37), ('RSooMIj', 46), ('yxGNla', 55)]", "assert subject_marks([('gtMRdaf', 49), ('OMDaneQzq', 49), ('iygX', 38)]) == [('iygX', 38), ('gtMRdaf', 49), ('OMDaneQzq', 49)]", "assert subject_marks([('AthScmnXBGK', 47), ('dPygj', 51), ('jgoXOA', 36)]) == [('jgoXOA', 36), ('AthScmnXBGK', 47), ('dPygj', 51)]", "assert subject_marks([('BNioszAD', 52), ('PsB', 57), ('tVYQGM', 37)]) == [('tVYQGM', 37), ('BNioszAD', 52), ('PsB', 57)]", "assert subject_marks([('AhXUeQgJLDa', 50), ('KUQIdub', 50), ('UmHDbaZi', 31)]) == [('UmHDbaZi', 31), ('AhXUeQgJLDa', 50), ('KUQIdub', 50)]", "assert subject_marks([('YPRAh', 50), ('kzwuFGWmjo', 58), ('PgbEev', 31)]) == [('PgbEev', 31), ('YPRAh', 50), ('kzwuFGWmjo', 58)]", "assert subject_marks([('OFTCUwYoXNg', 50), ('PjmuKXHV', 56), ('pWUCopIcHhi', 35)]) == [('pWUCopIcHhi', 35), ('OFTCUwYoXNg', 50), ('PjmuKXHV', 56)]", "assert subject_marks([('mlkjvL', 54), ('NDUYiPH', 55), ('MrDt', 30)]) == [('MrDt', 30), ('mlkjvL', 54), ('NDUYiPH', 55)]", "assert subject_marks([('bzZRGCCFBLBL', 51), ('ygzLSql', 57), ('tRXkabbokz', 34)]) == [('tRXkabbokz', 34), ('bzZRGCCFBLBL', 51), ('ygzLSql', 57)]", "assert subject_marks([('JoVBt', 49), ('fQRssRp', 59), ('nrQWdvtCRnIQ', 37)]) == [('nrQWdvtCRnIQ', 37), ('JoVBt', 49), ('fQRssRp', 59)]", "assert subject_marks([('GxWbDvbp', 50), ('USSVBXtQyeSk', 50), ('aEfpvlH', 37)]) == [('aEfpvlH', 37), ('GxWbDvbp', 50), ('USSVBXtQyeSk', 50)]", "assert subject_marks([('YGlUqRu', 53), ('RxUUx', 49), ('THNXRUMNIN', 28)]) == [('THNXRUMNIN', 28), ('RxUUx', 49), ('YGlUqRu', 53)]", "assert subject_marks([('hawpDDrmwS', 50), ('XaOPMqMC', 57), ('ztYN', 33)]) == [('ztYN', 33), ('hawpDDrmwS', 50), ('XaOPMqMC', 57)]", "assert subject_marks([('PRwnHqrSB', 48), ('LWGyycTr', 58), ('ptDQH', 32)]) == [('ptDQH', 32), ('PRwnHqrSB', 48), ('LWGyycTr', 58)]", "assert subject_marks([('alPWVrTkePny', 49), ('sUjGzMZu', 54), ('BdxCBrUANL', 35)]) == [('BdxCBrUANL', 35), ('alPWVrTkePny', 49), ('sUjGzMZu', 54)]", "assert subject_marks([('eSpz', 45), ('XOUdd', 56), ('uegESoGka', 32)]) == [('uegESoGka', 32), ('eSpz', 45), ('XOUdd', 56)]", "assert subject_marks([('XErMoZfc', 54), ('HEfo', 52), ('ssxfVco', 28)]) == [('ssxfVco', 28), ('HEfo', 52), ('XErMoZfc', 54)]", "assert subject_marks([('uYI', 50), ('HDbEvRPygPfJ', 51), ('MpbfWtl', 31)]) == [('MpbfWtl', 31), ('uYI', 50), ('HDbEvRPygPfJ', 51)]", "assert subject_marks([('zMZVJ', 47), ('dfI', 52), ('QrbaSnxLigSi', 28)]) == [('QrbaSnxLigSi', 28), ('zMZVJ', 47), ('dfI', 52)]", "assert subject_marks([('hmdT', 47), ('QYtlt', 59), ('fXmRtpOgZx', 33)]) == [('fXmRtpOgZx', 33), ('hmdT', 47), ('QYtlt', 59)]", "assert subject_marks([('BZN', 50), ('oPtEayZEks', 52), ('YafUYsbo', 33)]) == [('YafUYsbo', 33), ('BZN', 50), ('oPtEayZEks', 52)]", "assert subject_marks([('QVNqZG', 52), ('pyHM', 52), ('vYlzHcPKhKNE', 30)]) == [('vYlzHcPKhKNE', 30), ('QVNqZG', 52), ('pyHM', 52)]", "assert subject_marks([('yUIFtC', 45), ('iZbILNTi', 55), ('XUI', 31)]) == [('XUI', 31), ('yUIFtC', 45), ('iZbILNTi', 55)]", "assert subject_marks([('SxyJ', 47), ('pKKKssOcfeTm', 57), ('WYxpXbF', 32)]) == [('WYxpXbF', 32), ('SxyJ', 47), ('pKKKssOcfeTm', 57)]", "assert subject_marks([('OrKvGbY', 47), ('ToFEweovwFej', 49), ('qfdLEuJ', 36)]) == [('qfdLEuJ', 36), ('OrKvGbY', 47), ('ToFEweovwFej', 49)]", "assert subject_marks([('PADy', 47), ('ofDiG', 49), ('rHhTxTTd', 37)]) == [('rHhTxTTd', 37), ('PADy', 47), ('ofDiG', 49)]", "assert subject_marks([('nwsOitNCCR', 47), ('JXruZS', 55), ('aEFiQg', 37)]) == [('aEFiQg', 37), ('nwsOitNCCR', 47), ('JXruZS', 55)]", "assert subject_marks([('hkDlcOBm', 54), ('YHxLank', 55), ('mQymocYOrYlz', 38)]) == [('mQymocYOrYlz', 38), ('hkDlcOBm', 54), ('YHxLank', 55)]", "assert subject_marks([('bsFWp', 51), ('PjkcJ', 59), ('CvZjqLSH', 36)]) == [('CvZjqLSH', 36), ('bsFWp', 51), ('PjkcJ', 59)]", "assert subject_marks([('HckT', 48), ('hPhjf', 58), ('kcH', 36)]) == [('kcH', 36), ('HckT', 48), ('hPhjf', 58)]", "assert subject_marks([('pVdxaFkBK', 91), ('CLbBrgIuy', 100), ('SHpweXOC', 43)]) == [('SHpweXOC', 43), ('pVdxaFkBK', 91), ('CLbBrgIuy', 100)]", "assert subject_marks([('GtqtcoYuNS', 96), ('VUXOVpijxrgQy', 99), ('dJwACdcaDnwz', 46)]) == [('dJwACdcaDnwz', 46), ('GtqtcoYuNS', 96), ('VUXOVpijxrgQy', 99)]", "assert subject_marks([('DdkfXJvQ', 92), ('wVeuLkazwWuFc', 100), ('mOqBtVkvA', 44)]) == [('mOqBtVkvA', 44), ('DdkfXJvQ', 92), ('wVeuLkazwWuFc', 100)]", "assert subject_marks([('NmwtPiEq', 97), ('MMYdAV', 94), ('qnnREyPdeOhD', 45)]) == [('qnnREyPdeOhD', 45), ('MMYdAV', 94), ('NmwtPiEq', 97)]", "assert subject_marks([('kQB', 96), ('omSIKuAGKLSqwRp', 93), ('eCFKTKlSH', 42)]) == [('eCFKTKlSH', 42), ('omSIKuAGKLSqwRp', 93), ('kQB', 96)]", "assert subject_marks([('GNrHbB', 98), ('XzRYRjznfnYDr', 98), ('EivyUc', 40)]) == [('EivyUc', 40), ('GNrHbB', 98), ('XzRYRjznfnYDr', 98)]", "assert subject_marks([('BJogx', 96), ('UKSjcfajsqj', 98), ('IJIJWMhWFzD', 49)]) == [('IJIJWMhWFzD', 49), ('BJogx', 96), ('UKSjcfajsqj', 98)]", "assert subject_marks([('kcjmGH', 95), ('jcLyCjJD', 102), ('uEKLvGIy', 44)]) == [('uEKLvGIy', 44), ('kcjmGH', 95), ('jcLyCjJD', 102)]", "assert subject_marks([('vSYsEINd', 95), ('WILuPFVXzJu', 98), ('xpZzxTaHCjxW', 41)]) == [('xpZzxTaHCjxW', 41), ('vSYsEINd', 95), ('WILuPFVXzJu', 98)]", "assert subject_marks([('SPiKhnyOGdo', 95), ('aBXRCDLwVsRtfiJ', 97), ('RlxJuCCYmS', 47)]) == [('RlxJuCCYmS', 47), ('SPiKhnyOGdo', 95), ('aBXRCDLwVsRtfiJ', 97)]", "assert subject_marks([('dLFDpgsSM', 101), ('BAZpJacjMua', 100), ('mrbuUEF', 45)]) == [('mrbuUEF', 45), ('BAZpJacjMua', 100), ('dLFDpgsSM', 101)]", "assert subject_marks([('aaIHJhnJZjD', 98), ('BnikmIlQM', 95), ('pVRTHYcn', 44)]) == [('pVRTHYcn', 44), ('BnikmIlQM', 95), ('aaIHJhnJZjD', 98)]", "assert subject_marks([('FgMdY', 99), ('MvlRtygYqQith', 94), ('ZTQYaC', 48)]) == [('ZTQYaC', 48), ('MvlRtygYqQith', 94), ('FgMdY', 99)]", "assert subject_marks([('JUfvluw', 94), ('YtEwjqgSh', 96), ('rWvHLMJaLAfc', 48)]) == [('rWvHLMJaLAfc', 48), ('JUfvluw', 94), ('YtEwjqgSh', 96)]", "assert subject_marks([('uFHCmQoDK', 94), ('qcFUWOpBNQJVN', 94), ('CRfuBmlFS', 44)]) == [('CRfuBmlFS', 44), ('uFHCmQoDK', 94), ('qcFUWOpBNQJVN', 94)]", "assert subject_marks([('oqfRVgLsOfRy', 95), ('lqPNYlaKVoVvwr', 100), ('OMoexuDNmXyf', 50)]) == [('OMoexuDNmXyf', 50), ('oqfRVgLsOfRy', 95), ('lqPNYlaKVoVvwr', 100)]", "assert subject_marks([('nKAIjaMfIfpM', 101), ('GshcTvsNtt', 95), ('tlvZIkGGe', 44)]) == [('tlvZIkGGe', 44), ('GshcTvsNtt', 95), ('nKAIjaMfIfpM', 101)]", "assert subject_marks([('gdGoDrOd', 99), ('isdlVID', 98), ('IQyKLWvN', 42)]) == [('IQyKLWvN', 42), ('isdlVID', 98), ('gdGoDrOd', 99)]", "assert subject_marks([('DoeesZYMQjN', 101), ('FePBRYGkszOFp', 101), ('RqmoEhNm', 47)]) == [('RqmoEhNm', 47), ('DoeesZYMQjN', 101), ('FePBRYGkszOFp', 101)]", "assert subject_marks([('OllsvohJQa', 96), ('cEYuroelvBaUR', 97), ('jAUsE', 46)]) == [('jAUsE', 46), ('OllsvohJQa', 96), ('cEYuroelvBaUR', 97)]", "assert subject_marks([('iNdw', 93), ('guVoOYFXevzRXC', 100), ('hnTkhnHqaknw', 43)]) == [('hnTkhnHqaknw', 43), ('iNdw', 93), ('guVoOYFXevzRXC', 100)]", "assert subject_marks([('IwDd', 100), ('qHifLObg', 95), ('gzwLnKRrS', 49)]) == [('gzwLnKRrS', 49), ('qHifLObg', 95), ('IwDd', 100)]", "assert subject_marks([('riyoipIVnodh', 96), ('PlTZbszvYCzqhGr', 95), ('ONy', 45)]) == [('ONy', 45), ('PlTZbszvYCzqhGr', 95), ('riyoipIVnodh', 96)]", "assert subject_marks([('yyaoHcQl', 92), ('xZCgwF', 102), ('EvVBKBT', 41)]) == [('EvVBKBT', 41), ('yyaoHcQl', 92), ('xZCgwF', 102)]", "assert subject_marks([('abH', 97), ('OdehDjqJ', 101), ('bdRU', 49)]) == [('bdRU', 49), ('abH', 97), ('OdehDjqJ', 101)]", "assert subject_marks([('uFiB', 96), ('aYmJcaoFr', 98), ('xHDKfbuVB', 48)]) == [('xHDKfbuVB', 48), ('uFiB', 96), ('aYmJcaoFr', 98)]", "assert subject_marks([('zQJjXNgTLe', 98), ('YEmwQaLNXGgMky', 94), ('JDQJgXiUx', 49)]) == [('JDQJgXiUx', 49), ('YEmwQaLNXGgMky', 94), ('zQJjXNgTLe', 98)]", "assert subject_marks([('umdIyVhjPo', 92), ('NYBDPfUewHyBUZ', 102), ('zSCcSmThn', 49)]) == [('zSCcSmThn', 49), ('umdIyVhjPo', 92), ('NYBDPfUewHyBUZ', 102)]", "assert subject_marks([('tHVkb', 94), ('qYcejP', 92), ('wUajcaSDJ', 46)]) == [('wUajcaSDJ', 46), ('qYcejP', 92), ('tHVkb', 94)]", "assert subject_marks([('YSSMRTsEFK', 100), ('WVqLuUY', 98), ('OzML', 42)]) == [('OzML', 42), ('WVqLuUY', 98), ('YSSMRTsEFK', 100)]", "assert subject_marks([('ZPoZuFiw', 97), ('UoDABQSvOdkCuV', 95), ('uFslvKYhFn', 47)]) == [('uFslvKYhFn', 47), ('UoDABQSvOdkCuV', 95), ('ZPoZuFiw', 97)]", "assert subject_marks([('sxlGrTcJ', 96), ('FIqmyf', 94), ('Vhvfhmiu', 42)]) == [('Vhvfhmiu', 42), ('FIqmyf', 94), ('sxlGrTcJ', 96)]", "assert subject_marks([('oolJEgaEj', 94), ('iMfMjBPS', 92), ('WZnD', 44)]) == [('WZnD', 44), ('iMfMjBPS', 92), ('oolJEgaEj', 94)]"], "entry_point": "subject_marks", "repair_prompt": ["Write a function subject_marks to sort a list of tuples using the second value of each tuple.\nsubject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n"], "completions": ["from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"Sorts a list of tuples based on the second element of each tuple.\n\n    Args:\n        marks: List of tuples where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n        List of tuples sorted by the mark in ascending order.\n    \"\"\"\n    # Using Python's built-in sorted function to sort the list of tuples\n    # The key parameter is used to specify that the sorting should be based on the second element of each tuple\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data\n    sample_marks = [(\"Math\", 88), (\"English\", 75), (\"Science\", 92), (\"History\", 85)]\n    \n    # Sorting the sample data\n    sorted_sample_marks = subject_marks(sample_marks)\n    \n    # Output the sorted list\n    print(\"Sorted Marks:\", sorted_sample_marks)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"Sorts a list of tuples based on the second value of each tuple.\n\n    This function takes a list of tuples, where each tuple contains a subject\n    name and its corresponding mark. It returns a new list of tuples sorted\n    in ascending order based on the marks.\n\n    Parameters:\n    marks (list of tuple): A list where each tuple contains a subject name\n    and its corresponding mark.\n\n    Returns:\n    list of tuple: A sorted list of tuples based on the marks in ascending order.\n    \n    Assumptions:\n    - The input list contains valid tuples with a string and an integer.\n    - The function does not handle non-integer values or malformed tuples.\n    - The function assumes the input list can be empty and handles it gracefully.\n    \"\"\"\n    # Sort the list of tuples using the sorted() function with a custom key\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks = [(\"Math\", 88), (\"Science\", 92), (\"English\", 85), (\"History\", 90)]\n    sorted_example = subject_marks(example_marks)\n    print(\"Sorted Marks:\", sorted_example)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second element of each tuple in ascending order.\n\n    Parameters:\n    marks (list of tuples): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuples: Sorted list of tuples based on the marks.\n    \"\"\"\n    # Validate input to ensure all second elements are integers\n    for subject, mark in marks:\n        if not isinstance(mark, int):\n            raise ValueError(f\"Mark for subject '{subject}' must be an integer, got {type(mark).__name__}.\")\n\n    # Sort the list using the built-in sorted function\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    \n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks = [(\"Math\", 90), (\"Science\", 85), (\"English\", 92)]\n    sorted_example = subject_marks(example_marks)\n    print(sorted_example)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks_list: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second element (marks) in ascending order.\n\n    Parameters:\n    marks_list (list of tuples): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuples: A sorted list of tuples based on the marks.\n    \"\"\"\n    # Validate input to ensure all marks are numeric\n    for subject, mark in marks_list:\n        if not isinstance(mark, int):\n            raise ValueError(f\"Mark for subject '{subject}' must be an integer. Found: {type(mark).__name__}\")\n\n    # Sort the list of tuples based on the second element (marks)\n    sorted_marks_list = sorted(marks_list, key=lambda x: x[1])\n\n    return sorted_marks_list\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks_list = [(\"Math\", 90), (\"Science\", 85), (\"English\", 95)]\n    sorted_list = subject_marks(example_marks_list)\n    print(\"Sorted Marks List:\", sorted_list)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Parameters:\n    marks (list of tuples): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuples: A sorted list of tuples based on the second value (marks).\n    \"\"\"\n    # Using Python's built-in sorted function with a custom key to sort tuples by the second element\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data\n    sample_marks = [(\"Math\", 90), (\"Science\", 85), (\"English\", 95), (\"History\", 80)]\n    \n    # Sorting the sample data\n    sorted_sample_marks = subject_marks(sample_marks)\n    \n    # Output the sorted list\n    print(\"Sorted Marks:\", sorted_sample_marks)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second element of each tuple.\n\n    Parameters:\n    marks (list of tuples): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuples: Sorted list of tuples based on the marks in ascending order.\n    \"\"\"\n    # Using Python's built-in sorted function to sort the list of tuples\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    # Sample data\n    sample_marks = [(\"Math\", 90), (\"Science\", 85), (\"English\", 95), (\"History\", 80)]\n    \n    # Call the function and print the sorted result\n    sorted_result = subject_marks(sample_marks)\n    print(\"Sorted Marks:\", sorted_result)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks_list: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second value (marks) of each tuple.\n\n    Parameters:\n    marks_list (list of tuples): A list where each tuple contains a subject (str) and its corresponding mark (int).\n\n    Returns:\n    list of tuples: A sorted list of tuples based on the marks in ascending order.\n    \"\"\"\n    # Initialize an empty list to store valid tuples\n    valid_marks_list = []\n\n    # Iterate over each tuple in the input list\n    for subject, mark in marks_list:\n        # Check if the mark is an integer\n        if isinstance(mark, int):\n            valid_marks_list.append((subject, mark))\n        else:\n            # Log or handle the non-numeric value case if needed\n            print(f\"Skipping non-numeric mark for subject: {subject}\")\n\n    # Sort the valid tuples based on the second element (marks)\n    sorted_marks_list = sorted(valid_marks_list, key=lambda x: x[1])\n\n    return sorted_marks_list\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks = [(\"Math\", 90), (\"Science\", \"A\"), (\"English\", 85), (\"History\", 75)]\n    sorted_example = subject_marks(example_marks)\n    print(sorted_example)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"Sorts a list of tuples based on the second element of each tuple.\n\n    Parameters:\n    marks (list of tuples): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuples: A sorted list of tuples in ascending order based on the second element.\n    \n    Raises:\n    ValueError: If any tuple contains a non-numeric second element.\n    \"\"\"\n    # Validate input to ensure all second elements are numeric\n    for subject, mark in marks:\n        if not isinstance(mark, int):\n            raise ValueError(f\"Non-numeric mark found for subject '{subject}': {mark}\")\n\n    # Sort the list of tuples based on the second element\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    \n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        example_marks = [(\"Math\", 90), (\"English\", 85), (\"Science\", 95)]\n        sorted_example = subject_marks(example_marks)\n        print(\"Sorted Marks:\", sorted_example)\n    except ValueError as e:\n        print(\"Error:\", e)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second element of each tuple.\n\n    Parameters:\n    marks (list of tuples): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuples: A sorted list of tuples based on the marks.\n    \"\"\"\n    # Using Python's built-in sorted method with a custom key to sort the list of tuples\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks = [(\"Math\", 90), (\"Science\", 85), (\"English\", 95)]\n    sorted_example_marks = subject_marks(example_marks)\n    print(sorted_example_marks)\n", "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple in ascending order.\n\n    Parameters:\n    marks (list of tuple): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuple: A sorted list of tuples based on the marks.\n    \"\"\"\n    # Validate input to ensure all second values are integers\n    for subject, mark in marks:\n        if not isinstance(mark, int):\n            raise ValueError(f\"Mark for subject '{subject}' must be an integer, got {type(mark).__name__}.\")\n\n    # Sort the list of tuples based on the second value (marks) using a lambda function as the key\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n    sorted_example = subject_marks(example_marks)\n    print(sorted_example)  # Output: [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n"], "plans": ["requirement analysis:\nThe requirement is to develop a function that sorts a list of tuples based on the second element of each tuple. The function should be efficient and easy to use, ensuring it can handle large datasets without performance degradation.\nrequirement pool:\n- Implement sorting functionality based on the second tuple element\n- Optimize for performance with large datasets\n- Ensure compatibility with existing systems\n- Provide clear documentation for integration\n- Enhance user interface for better accessibility\nWe will implement a simple function using Python's built-in sorting capabilities, specifically the sorted() function, which is efficient and easy to use. This approach will ensure compatibility with existing systems and optimize performance for large datasets by leveraging Python's Timsort algorithm.\n", "requirement analysis:\nThe function should accurately sort a list of tuples based on the second value, ensuring efficiency and clarity in implementation.\nrequirement pool:\n- Implement sorting functionality based on the second value of tuples\n- Optimize for performance with large datasets\n- Provide comprehensive documentation\n- Include examples for user understanding\n- Ensure compatibility with different Python versions\nWe will implement a simple function using Python's built-in sorting capabilities, specifically the sorted() function with a custom key to sort tuples based on their second value. This approach ensures clarity and efficiency, especially for large datasets. We will also provide comprehensive documentation and examples to enhance usability.\n", "requirement analysis:\nThe function should accurately sort a list of tuples based on the second element of each tuple, ensuring that the output is in ascending order. It should be efficient enough to handle large datasets without significant performance degradation.\nrequirement pool:\n- Implement the sorting function using Python's built-in capabilities.\n- Optimize the function for performance with large datasets.\n- Provide clear documentation and usage examples.\n- Ensure compatibility with different Python versions.\n- Include error handling for invalid input types.\nWe will implement the sorting function using Python's built-in sorted function, which is efficient and widely used for sorting operations. This approach will ensure compatibility with different Python versions and handle large datasets effectively. We will also provide clear documentation and examples to demonstrate the usage of the function.\n", "requirement analysis:\nThe function should efficiently sort a list of tuples based on the second element, which represents the marks. It should handle various data sizes and provide accurate results consistently.\nrequirement pool:\n- Implement sorting functionality based on the second element of tuples.\n- Optimize performance for handling large lists of tuples.\n- Ensure the function is easy to integrate into other applications.\n- Provide clear documentation and usage examples.\n- Test the function with different datasets to ensure reliability.\nWe will implement a simple function using Python's built-in sorted function, which is efficient and well-optimized for sorting operations. This function will sort a list of tuples based on the second element of each tuple, which represents the marks. The function will be straightforward to integrate into other applications and will include documentation and examples for ease of use.\n", "requirement analysis:\nThe function should accurately sort a list of tuples based on the second value, ensuring efficiency and scalability for larger datasets. Documentation should be clear to facilitate integration.\nrequirement pool:\n- Implement sorting functionality based on the second value of tuples\n- Optimize performance for large datasets\n- Provide clear documentation and usage examples\n- Ensure compatibility with existing data processing systems\n- Include error handling for invalid input\nWe will implement a simple function using Python's built-in sorting capabilities, specifically the sorted() function with a custom key to sort tuples based on their second value. This approach ensures efficiency and scalability for larger datasets. We will also provide clear documentation and usage examples to facilitate integration.\n", "requirement analysis:\nThe requirement is to create a function that sorts a list of tuples based on the second element of each tuple. The function should handle various data sizes efficiently and provide accurate results.\nrequirement pool:\n- Implement the sorting function using Python's built-in capabilities.\n- Optimize the function for handling large datasets.\n- Include comprehensive documentation and usage examples.\n- Ensure compatibility with other data processing libraries.\n- Test the function with different types of data inputs.\nWe will use Python's built-in sorted function to implement the sorting functionality. This approach is simple and efficient for small to medium-sized datasets. For larger datasets, we can explore using NumPy or Pandas for optimized performance. Comprehensive documentation will be provided to ensure ease of integration and usage.\n", "requirement analysis:\nThe function should accurately sort a list of tuples based on the second value, which represents marks. It should handle various data sizes efficiently and provide clear documentation for ease of use.\nrequirement pool:\n- Implement sorting functionality based on the second value of tuples.\n- Optimize performance for handling large datasets.\n- Ensure the function is easy to integrate with existing systems.\n- Provide comprehensive documentation for users.\n- Include error handling for invalid input data.\nWe will implement a simple function using Python's built-in sorted function, which is efficient and suitable for handling large datasets. The function will sort a list of tuples based on the second element of each tuple, which represents the marks. We will ensure the function is easy to integrate by providing clear documentation and examples. Additionally, we will handle edge cases such as empty lists and non-numeric values in tuples by including basic error handling.\n", "requirement analysis:\nThe function should sort a list of tuples based on the second element of each tuple, ensuring it works efficiently even with large datasets. The output should be a sorted list in ascending order of the second element.\nrequirement pool:\n- Implement the sorting function using Python's built-in sorting capabilities.\n- Optimize the function for performance with large datasets.\n- Provide comprehensive documentation and usage examples.\n- Ensure compatibility with different Python versions.\n- Include error handling for invalid inputs.\nWe will use Python's built-in sorted function, which is highly optimized for performance and can handle large datasets efficiently. This function allows sorting based on a key, which will be the second element of each tuple in this case. We will also include error handling to manage cases where the second element is not numeric.\n", "requirement analysis:\nThe requirement is to create a function that sorts a list of tuples based on the second element of each tuple. The function should be efficient and easy to use, with clear documentation for users.\nrequirement pool:\n- Implement the sorting function using Python's sorted method with a custom key.\n- Optimize the function for handling large datasets efficiently.\n- Provide comprehensive documentation and usage examples.\n- Ensure compatibility with different Python versions.\n- Include error handling for invalid input types.\nWe will implement the sorting function using Python's built-in sorted method with a custom key to sort the list of tuples based on the second element of each tuple. This approach is efficient and leverages Python's native capabilities for sorting. We will also ensure the function handles large datasets efficiently and provide comprehensive documentation with examples.\n", "requirement analysis:\nThe function should accurately sort a list of tuples based on the second value of each tuple, ensuring that the output is in ascending order. It should handle various data sizes efficiently and provide clear documentation for ease of use.\nrequirement pool:\n- Implement sorting functionality based on the second value of tuples\n- Optimize performance for handling large datasets\n- Ensure the function is well-documented\n- Test the function with different data types and sizes\n- Provide examples of usage in documentation\nWe will implement a function named `subject_marks` that sorts a list of tuples based on the second value of each tuple. We will use Python's built-in `sorted` function with a custom key to achieve this. This approach is efficient and leverages Python's Timsort algorithm, which is optimized for real-world data. We will also ensure the function is well-documented and provide examples of usage, including handling edge cases like empty lists.\n"], "test": ["def check(subject_marks):\n\tassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "def check(subject_marks):\n\tassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "def check(subject_marks):\n\tassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "def check(subject_marks):\n\tassert subject_marks([('OEoLiruoZyU', 88), ('mIvDiJu', 90), ('gbLBnXfPg', 95), ('UQwGJqSkunwBAQULBfw', 77)]) == [('UQwGJqSkunwBAQULBfw', 77), ('OEoLiruoZyU', 88), ('mIvDiJu', 90), ('gbLBnXfPg', 95)]", "def check(subject_marks):\n\tassert subject_marks([('cPFV', 88), ('CgDf', 88), ('oOzDEneP', 93), ('oDwiNqxTvRUJO', 82)]) == [('oDwiNqxTvRUJO', 82), ('cPFV', 88), ('CgDf', 88), ('oOzDEneP', 93)]", "def check(subject_marks):\n\tassert subject_marks([('bYxQ', 87), ('cAMTrHC', 90), ('Qhow', 95), ('OMMPTxXUNPQXSPdCZ', 77)]) == [('OMMPTxXUNPQXSPdCZ', 77), ('bYxQ', 87), ('cAMTrHC', 90), ('Qhow', 95)]", "def check(subject_marks):\n\tassert subject_marks([('vSicc', 89), ('KyrnfQnQrwc', 92), ('DHxWT', 94), ('wGtStVHIFzXkwdTX vcq', 81)]) == [('wGtStVHIFzXkwdTX vcq', 81), ('vSicc', 89), ('KyrnfQnQrwc', 92), ('DHxWT', 94)]", "def check(subject_marks):\n\tassert subject_marks([('moZPBy', 92), ('iWiL', 92), ('zCaA', 97), ('HLTKhqbEqtCv l', 86)]) == [('HLTKhqbEqtCv l', 86), ('moZPBy', 92), ('iWiL', 92), ('zCaA', 97)]", "def check(subject_marks):\n\tassert subject_marks([('EzxjNgSwlI', 88), ('Wrn', 92), ('DmXkG', 102), ('rEiARNRbOKOooS', 86)]) == [('rEiARNRbOKOooS', 86), ('EzxjNgSwlI', 88), ('Wrn', 92), ('DmXkG', 102)]", "def check(subject_marks):\n\tassert subject_marks([('jMVtNMLssslK', 91), ('rfqGYyl', 88), ('qhaQoY', 94), ('kNFNwaieJFnMNKnEyK', 81)]) == [('kNFNwaieJFnMNKnEyK', 81), ('rfqGYyl', 88), ('jMVtNMLssslK', 91), ('qhaQoY', 94)]", "def check(subject_marks):\n\tassert subject_marks([('FNQAIVe', 85), ('ARlPcNnFbkBL', 92), ('ytPSw', 92), ('fsCNCrgFHQftcH', 84)]) == [('fsCNCrgFHQftcH', 84), ('FNQAIVe', 85), ('ARlPcNnFbkBL', 92), ('ytPSw', 92)]", "def check(subject_marks):\n\tassert subject_marks([('moSpNzAg', 88), ('aREeLPKi', 92), ('PlQdIawnW', 98), ('iNbnbXlXrPtFkOmVv', 84)]) == [('iNbnbXlXrPtFkOmVv', 84), ('moSpNzAg', 88), ('aREeLPKi', 92), ('PlQdIawnW', 98)]", "def check(subject_marks):\n\tassert subject_marks([('ylkiTygWyXE', 89), ('PZfX', 95), ('DYBCbAAka', 94), ('nnNysBfthiRsTF yRbvtX', 79)]) == [('nnNysBfthiRsTF yRbvtX', 79), ('ylkiTygWyXE', 89), ('DYBCbAAka', 94), ('PZfX', 95)]", "def check(subject_marks):\n\tassert subject_marks([('wKeYoleLOZ', 90), ('UZKWtqWCpS', 85), ('PtaXUSICX', 95), ('xcwObYeZRWCjqgkKyBh ', 80)]) == [('xcwObYeZRWCjqgkKyBh ', 80), ('UZKWtqWCpS', 85), ('wKeYoleLOZ', 90), ('PtaXUSICX', 95)]", "def check(subject_marks):\n\tassert subject_marks([('PGqbVWWoVY', 88), ('fuDnsj', 89), ('ZGYyuGx', 92), ('MB D vQCgbThaojch', 77)]) == [('MB D vQCgbThaojch', 77), ('PGqbVWWoVY', 88), ('fuDnsj', 89), ('ZGYyuGx', 92)]", "def check(subject_marks):\n\tassert subject_marks([('uPLoAM', 91), ('wbmNbIKma', 89), ('MFDgyVYM', 98), ('uGXvKtwQYoCx', 81)]) == [('uGXvKtwQYoCx', 81), ('wbmNbIKma', 89), ('uPLoAM', 91), ('MFDgyVYM', 98)]", "def check(subject_marks):\n\tassert subject_marks([('ucBLvKn', 84), ('FoU', 86), ('cvE', 99), ('cDrNAdgrHoWpgeU', 84)]) == [('ucBLvKn', 84), ('cDrNAdgrHoWpgeU', 84), ('FoU', 86), ('cvE', 99)]", "def check(subject_marks):\n\tassert subject_marks([('zgPYQeqfC', 86), ('ZaQR', 89), ('rTgoQ', 95), ('qUdRqRdL kpZsmAlefyX', 82)]) == [('qUdRqRdL kpZsmAlefyX', 82), ('zgPYQeqfC', 86), ('ZaQR', 89), ('rTgoQ', 95)]", "def check(subject_marks):\n\tassert subject_marks([('lxCs', 90), ('gfPcdSz', 87), ('eNS', 101), ('DIiNtXYd XFJJvxao', 80)]) == [('DIiNtXYd XFJJvxao', 80), ('gfPcdSz', 87), ('lxCs', 90), ('eNS', 101)]", "def check(subject_marks):\n\tassert subject_marks([('NaLoACnnqh', 92), ('oHePdMddKN', 86), ('lgRUjr', 98), ('JSZmxYVTfbWzjq', 79)]) == [('JSZmxYVTfbWzjq', 79), ('oHePdMddKN', 86), ('NaLoACnnqh', 92), ('lgRUjr', 98)]", "def check(subject_marks):\n\tassert subject_marks([('TuSZgJDuPF', 84), ('HKYFfg', 88), ('henHT', 100), ('przTdXRYIrNS', 77)]) == [('przTdXRYIrNS', 77), ('TuSZgJDuPF', 84), ('HKYFfg', 88), ('henHT', 100)]", "def check(subject_marks):\n\tassert subject_marks([('NsKzivsRl', 87), ('rekCCLItTPpv', 85), ('nwgEnrgg', 96), ('OevnERBJoXyzIEmyJJ', 77)]) == [('OevnERBJoXyzIEmyJJ', 77), ('rekCCLItTPpv', 85), ('NsKzivsRl', 87), ('nwgEnrgg', 96)]", "def check(subject_marks):\n\tassert subject_marks([('kAGUuwpiH', 93), ('KNQWiuq', 95), ('udrF', 94), ('JmuMCXFAiVYQnIowNx', 80)]) == [('JmuMCXFAiVYQnIowNx', 80), ('kAGUuwpiH', 93), ('udrF', 94), ('KNQWiuq', 95)]", "def check(subject_marks):\n\tassert subject_marks([('zAV', 90), ('YQQOKGNG', 92), ('hdsrLFUV', 100), ('yVTEtRwxxxtb', 86)]) == [('yVTEtRwxxxtb', 86), ('zAV', 90), ('YQQOKGNG', 92), ('hdsrLFUV', 100)]", "def check(subject_marks):\n\tassert subject_marks([('poWpC', 84), ('WNkaCKDjWWC', 95), ('USWKwMg', 92), ('LTPePxXydsRcsTgOA', 81)]) == [('LTPePxXydsRcsTgOA', 81), ('poWpC', 84), ('USWKwMg', 92), ('WNkaCKDjWWC', 95)]", "def check(subject_marks):\n\tassert subject_marks([('yaYDs', 93), ('oWW', 90), ('hllzmI', 95), ('Gwg nxvDuJxlYUbXWZ', 77)]) == [('Gwg nxvDuJxlYUbXWZ', 77), ('oWW', 90), ('yaYDs', 93), ('hllzmI', 95)]", "def check(subject_marks):\n\tassert subject_marks([('UWfZF', 89), ('RplarQ', 87), ('UeHz', 92), ('HjATajU IpIFXtVneA', 77)]) == [('HjATajU IpIFXtVneA', 77), ('RplarQ', 87), ('UWfZF', 89), ('UeHz', 92)]", "def check(subject_marks):\n\tassert subject_marks([('KxMMw', 91), ('QnMUoOp', 90), ('MTrpRQ', 102), ('PqoJUhBVeDzEOTWYDaD', 83)]) == [('PqoJUhBVeDzEOTWYDaD', 83), ('QnMUoOp', 90), ('KxMMw', 91), ('MTrpRQ', 102)]", "def check(subject_marks):\n\tassert subject_marks([('oywUNZcvRO', 87), ('FldXVcvrSEO', 93), ('mED', 94), ('fBO SdVCnkuQtmUy R', 86)]) == [('fBO SdVCnkuQtmUy R', 86), ('oywUNZcvRO', 87), ('FldXVcvrSEO', 93), ('mED', 94)]", "def check(subject_marks):\n\tassert subject_marks([('BWqmGXLyxvjt', 93), ('MJMzsQDxHpjR', 90), ('YeHm', 96), ('uBNnOiEqOEyzkedxq', 87)]) == [('uBNnOiEqOEyzkedxq', 87), ('MJMzsQDxHpjR', 90), ('BWqmGXLyxvjt', 93), ('YeHm', 96)]", "def check(subject_marks):\n\tassert subject_marks([('mqmyD', 83), ('uESRxUfqIco', 92), ('bHOpv', 102), ('oGQYGwOwbLyYdJYvBVG', 80)]) == [('oGQYGwOwbLyYdJYvBVG', 80), ('mqmyD', 83), ('uESRxUfqIco', 92), ('bHOpv', 102)]", "def check(subject_marks):\n\tassert subject_marks([('yUzVsaRsjw', 84), ('DVUuFkb', 95), ('SsHI', 97), ('HybMXjJEYT iHKU', 87)]) == [('yUzVsaRsjw', 84), ('HybMXjJEYT iHKU', 87), ('DVUuFkb', 95), ('SsHI', 97)]", "def check(subject_marks):\n\tassert subject_marks([('lbscVXp', 89), ('UUC', 85), ('ZmWaD', 95), ('IvLMQmoLcuNlXFckZ', 87)]) == [('UUC', 85), ('IvLMQmoLcuNlXFckZ', 87), ('lbscVXp', 89), ('ZmWaD', 95)]", "def check(subject_marks):\n\tassert subject_marks([('ZhyXbryR', 85), ('rhY', 94), ('cOsv', 100), ('mpoQmrChrwjTr', 86)]) == [('ZhyXbryR', 85), ('mpoQmrChrwjTr', 86), ('rhY', 94), ('cOsv', 100)]", "def check(subject_marks):\n\tassert subject_marks([('OnHfebNhx', 86), ('gKoR', 90), ('RqctHtu', 100), ('QgdNILgKjAXwtHx', 82)]) == [('QgdNILgKjAXwtHx', 82), ('OnHfebNhx', 86), ('gKoR', 90), ('RqctHtu', 100)]", "def check(subject_marks):\n\tassert subject_marks([('UDOcqK', 88), ('AenkSWIZYeEn', 86), ('BGhUYXzK', 102), ('yhkNITljovWZuxY', 85)]) == [('yhkNITljovWZuxY', 85), ('AenkSWIZYeEn', 86), ('UDOcqK', 88), ('BGhUYXzK', 102)]", "def check(subject_marks):\n\tassert subject_marks([('BUveqJdXw', 44), ('YNZysJ', 58), ('duDvJokf', 28)]) == [('duDvJokf', 28), ('BUveqJdXw', 44), ('YNZysJ', 58)]", "def check(subject_marks):\n\tassert subject_marks([('GflrCC', 48), ('txR', 55), ('vDjBwolkemV', 30)]) == [('vDjBwolkemV', 30), ('GflrCC', 48), ('txR', 55)]", "def check(subject_marks):\n\tassert subject_marks([('VcHJlTrWUr', 44), ('ehO', 56), ('wWIh', 34)]) == [('wWIh', 34), ('VcHJlTrWUr', 44), ('ehO', 56)]", "def check(subject_marks):\n\tassert subject_marks([('RSooMIj', 46), ('yxGNla', 55), ('qrUT', 37)]) == [('qrUT', 37), ('RSooMIj', 46), ('yxGNla', 55)]", "def check(subject_marks):\n\tassert subject_marks([('gtMRdaf', 49), ('OMDaneQzq', 49), ('iygX', 38)]) == [('iygX', 38), ('gtMRdaf', 49), ('OMDaneQzq', 49)]", "def check(subject_marks):\n\tassert subject_marks([('AthScmnXBGK', 47), ('dPygj', 51), ('jgoXOA', 36)]) == [('jgoXOA', 36), ('AthScmnXBGK', 47), ('dPygj', 51)]", "def check(subject_marks):\n\tassert subject_marks([('BNioszAD', 52), ('PsB', 57), ('tVYQGM', 37)]) == [('tVYQGM', 37), ('BNioszAD', 52), ('PsB', 57)]", "def check(subject_marks):\n\tassert subject_marks([('AhXUeQgJLDa', 50), ('KUQIdub', 50), ('UmHDbaZi', 31)]) == [('UmHDbaZi', 31), ('AhXUeQgJLDa', 50), ('KUQIdub', 50)]", "def check(subject_marks):\n\tassert subject_marks([('YPRAh', 50), ('kzwuFGWmjo', 58), ('PgbEev', 31)]) == [('PgbEev', 31), ('YPRAh', 50), ('kzwuFGWmjo', 58)]", "def check(subject_marks):\n\tassert subject_marks([('OFTCUwYoXNg', 50), ('PjmuKXHV', 56), ('pWUCopIcHhi', 35)]) == [('pWUCopIcHhi', 35), ('OFTCUwYoXNg', 50), ('PjmuKXHV', 56)]", "def check(subject_marks):\n\tassert subject_marks([('mlkjvL', 54), ('NDUYiPH', 55), ('MrDt', 30)]) == [('MrDt', 30), ('mlkjvL', 54), ('NDUYiPH', 55)]", "def check(subject_marks):\n\tassert subject_marks([('bzZRGCCFBLBL', 51), ('ygzLSql', 57), ('tRXkabbokz', 34)]) == [('tRXkabbokz', 34), ('bzZRGCCFBLBL', 51), ('ygzLSql', 57)]", "def check(subject_marks):\n\tassert subject_marks([('JoVBt', 49), ('fQRssRp', 59), ('nrQWdvtCRnIQ', 37)]) == [('nrQWdvtCRnIQ', 37), ('JoVBt', 49), ('fQRssRp', 59)]", "def check(subject_marks):\n\tassert subject_marks([('GxWbDvbp', 50), ('USSVBXtQyeSk', 50), ('aEfpvlH', 37)]) == [('aEfpvlH', 37), ('GxWbDvbp', 50), ('USSVBXtQyeSk', 50)]", "def check(subject_marks):\n\tassert subject_marks([('YGlUqRu', 53), ('RxUUx', 49), ('THNXRUMNIN', 28)]) == [('THNXRUMNIN', 28), ('RxUUx', 49), ('YGlUqRu', 53)]", "def check(subject_marks):\n\tassert subject_marks([('hawpDDrmwS', 50), ('XaOPMqMC', 57), ('ztYN', 33)]) == [('ztYN', 33), ('hawpDDrmwS', 50), ('XaOPMqMC', 57)]", "def check(subject_marks):\n\tassert subject_marks([('PRwnHqrSB', 48), ('LWGyycTr', 58), ('ptDQH', 32)]) == [('ptDQH', 32), ('PRwnHqrSB', 48), ('LWGyycTr', 58)]", "def check(subject_marks):\n\tassert subject_marks([('alPWVrTkePny', 49), ('sUjGzMZu', 54), ('BdxCBrUANL', 35)]) == [('BdxCBrUANL', 35), ('alPWVrTkePny', 49), ('sUjGzMZu', 54)]", "def check(subject_marks):\n\tassert subject_marks([('eSpz', 45), ('XOUdd', 56), ('uegESoGka', 32)]) == [('uegESoGka', 32), ('eSpz', 45), ('XOUdd', 56)]", "def check(subject_marks):\n\tassert subject_marks([('XErMoZfc', 54), ('HEfo', 52), ('ssxfVco', 28)]) == [('ssxfVco', 28), ('HEfo', 52), ('XErMoZfc', 54)]", "def check(subject_marks):\n\tassert subject_marks([('uYI', 50), ('HDbEvRPygPfJ', 51), ('MpbfWtl', 31)]) == [('MpbfWtl', 31), ('uYI', 50), ('HDbEvRPygPfJ', 51)]", "def check(subject_marks):\n\tassert subject_marks([('zMZVJ', 47), ('dfI', 52), ('QrbaSnxLigSi', 28)]) == [('QrbaSnxLigSi', 28), ('zMZVJ', 47), ('dfI', 52)]", "def check(subject_marks):\n\tassert subject_marks([('hmdT', 47), ('QYtlt', 59), ('fXmRtpOgZx', 33)]) == [('fXmRtpOgZx', 33), ('hmdT', 47), ('QYtlt', 59)]", "def check(subject_marks):\n\tassert subject_marks([('BZN', 50), ('oPtEayZEks', 52), ('YafUYsbo', 33)]) == [('YafUYsbo', 33), ('BZN', 50), ('oPtEayZEks', 52)]", "def check(subject_marks):\n\tassert subject_marks([('QVNqZG', 52), ('pyHM', 52), ('vYlzHcPKhKNE', 30)]) == [('vYlzHcPKhKNE', 30), ('QVNqZG', 52), ('pyHM', 52)]", "def check(subject_marks):\n\tassert subject_marks([('yUIFtC', 45), ('iZbILNTi', 55), ('XUI', 31)]) == [('XUI', 31), ('yUIFtC', 45), ('iZbILNTi', 55)]", "def check(subject_marks):\n\tassert subject_marks([('SxyJ', 47), ('pKKKssOcfeTm', 57), ('WYxpXbF', 32)]) == [('WYxpXbF', 32), ('SxyJ', 47), ('pKKKssOcfeTm', 57)]", "def check(subject_marks):\n\tassert subject_marks([('OrKvGbY', 47), ('ToFEweovwFej', 49), ('qfdLEuJ', 36)]) == [('qfdLEuJ', 36), ('OrKvGbY', 47), ('ToFEweovwFej', 49)]", "def check(subject_marks):\n\tassert subject_marks([('PADy', 47), ('ofDiG', 49), ('rHhTxTTd', 37)]) == [('rHhTxTTd', 37), ('PADy', 47), ('ofDiG', 49)]", "def check(subject_marks):\n\tassert subject_marks([('nwsOitNCCR', 47), ('JXruZS', 55), ('aEFiQg', 37)]) == [('aEFiQg', 37), ('nwsOitNCCR', 47), ('JXruZS', 55)]", "def check(subject_marks):\n\tassert subject_marks([('hkDlcOBm', 54), ('YHxLank', 55), ('mQymocYOrYlz', 38)]) == [('mQymocYOrYlz', 38), ('hkDlcOBm', 54), ('YHxLank', 55)]", "def check(subject_marks):\n\tassert subject_marks([('bsFWp', 51), ('PjkcJ', 59), ('CvZjqLSH', 36)]) == [('CvZjqLSH', 36), ('bsFWp', 51), ('PjkcJ', 59)]", "def check(subject_marks):\n\tassert subject_marks([('HckT', 48), ('hPhjf', 58), ('kcH', 36)]) == [('kcH', 36), ('HckT', 48), ('hPhjf', 58)]", "def check(subject_marks):\n\tassert subject_marks([('pVdxaFkBK', 91), ('CLbBrgIuy', 100), ('SHpweXOC', 43)]) == [('SHpweXOC', 43), ('pVdxaFkBK', 91), ('CLbBrgIuy', 100)]", "def check(subject_marks):\n\tassert subject_marks([('GtqtcoYuNS', 96), ('VUXOVpijxrgQy', 99), ('dJwACdcaDnwz', 46)]) == [('dJwACdcaDnwz', 46), ('GtqtcoYuNS', 96), ('VUXOVpijxrgQy', 99)]", "def check(subject_marks):\n\tassert subject_marks([('DdkfXJvQ', 92), ('wVeuLkazwWuFc', 100), ('mOqBtVkvA', 44)]) == [('mOqBtVkvA', 44), ('DdkfXJvQ', 92), ('wVeuLkazwWuFc', 100)]", "def check(subject_marks):\n\tassert subject_marks([('NmwtPiEq', 97), ('MMYdAV', 94), ('qnnREyPdeOhD', 45)]) == [('qnnREyPdeOhD', 45), ('MMYdAV', 94), ('NmwtPiEq', 97)]", "def check(subject_marks):\n\tassert subject_marks([('kQB', 96), ('omSIKuAGKLSqwRp', 93), ('eCFKTKlSH', 42)]) == [('eCFKTKlSH', 42), ('omSIKuAGKLSqwRp', 93), ('kQB', 96)]", "def check(subject_marks):\n\tassert subject_marks([('GNrHbB', 98), ('XzRYRjznfnYDr', 98), ('EivyUc', 40)]) == [('EivyUc', 40), ('GNrHbB', 98), ('XzRYRjznfnYDr', 98)]", "def check(subject_marks):\n\tassert subject_marks([('BJogx', 96), ('UKSjcfajsqj', 98), ('IJIJWMhWFzD', 49)]) == [('IJIJWMhWFzD', 49), ('BJogx', 96), ('UKSjcfajsqj', 98)]", "def check(subject_marks):\n\tassert subject_marks([('kcjmGH', 95), ('jcLyCjJD', 102), ('uEKLvGIy', 44)]) == [('uEKLvGIy', 44), ('kcjmGH', 95), ('jcLyCjJD', 102)]", "def check(subject_marks):\n\tassert subject_marks([('vSYsEINd', 95), ('WILuPFVXzJu', 98), ('xpZzxTaHCjxW', 41)]) == [('xpZzxTaHCjxW', 41), ('vSYsEINd', 95), ('WILuPFVXzJu', 98)]", "def check(subject_marks):\n\tassert subject_marks([('SPiKhnyOGdo', 95), ('aBXRCDLwVsRtfiJ', 97), ('RlxJuCCYmS', 47)]) == [('RlxJuCCYmS', 47), ('SPiKhnyOGdo', 95), ('aBXRCDLwVsRtfiJ', 97)]", "def check(subject_marks):\n\tassert subject_marks([('dLFDpgsSM', 101), ('BAZpJacjMua', 100), ('mrbuUEF', 45)]) == [('mrbuUEF', 45), ('BAZpJacjMua', 100), ('dLFDpgsSM', 101)]", "def check(subject_marks):\n\tassert subject_marks([('aaIHJhnJZjD', 98), ('BnikmIlQM', 95), ('pVRTHYcn', 44)]) == [('pVRTHYcn', 44), ('BnikmIlQM', 95), ('aaIHJhnJZjD', 98)]", "def check(subject_marks):\n\tassert subject_marks([('FgMdY', 99), ('MvlRtygYqQith', 94), ('ZTQYaC', 48)]) == [('ZTQYaC', 48), ('MvlRtygYqQith', 94), ('FgMdY', 99)]", "def check(subject_marks):\n\tassert subject_marks([('JUfvluw', 94), ('YtEwjqgSh', 96), ('rWvHLMJaLAfc', 48)]) == [('rWvHLMJaLAfc', 48), ('JUfvluw', 94), ('YtEwjqgSh', 96)]", "def check(subject_marks):\n\tassert subject_marks([('uFHCmQoDK', 94), ('qcFUWOpBNQJVN', 94), ('CRfuBmlFS', 44)]) == [('CRfuBmlFS', 44), ('uFHCmQoDK', 94), ('qcFUWOpBNQJVN', 94)]", "def check(subject_marks):\n\tassert subject_marks([('oqfRVgLsOfRy', 95), ('lqPNYlaKVoVvwr', 100), ('OMoexuDNmXyf', 50)]) == [('OMoexuDNmXyf', 50), ('oqfRVgLsOfRy', 95), ('lqPNYlaKVoVvwr', 100)]", "def check(subject_marks):\n\tassert subject_marks([('nKAIjaMfIfpM', 101), ('GshcTvsNtt', 95), ('tlvZIkGGe', 44)]) == [('tlvZIkGGe', 44), ('GshcTvsNtt', 95), ('nKAIjaMfIfpM', 101)]", "def check(subject_marks):\n\tassert subject_marks([('gdGoDrOd', 99), ('isdlVID', 98), ('IQyKLWvN', 42)]) == [('IQyKLWvN', 42), ('isdlVID', 98), ('gdGoDrOd', 99)]", "def check(subject_marks):\n\tassert subject_marks([('DoeesZYMQjN', 101), ('FePBRYGkszOFp', 101), ('RqmoEhNm', 47)]) == [('RqmoEhNm', 47), ('DoeesZYMQjN', 101), ('FePBRYGkszOFp', 101)]", "def check(subject_marks):\n\tassert subject_marks([('OllsvohJQa', 96), ('cEYuroelvBaUR', 97), ('jAUsE', 46)]) == [('jAUsE', 46), ('OllsvohJQa', 96), ('cEYuroelvBaUR', 97)]", "def check(subject_marks):\n\tassert subject_marks([('iNdw', 93), ('guVoOYFXevzRXC', 100), ('hnTkhnHqaknw', 43)]) == [('hnTkhnHqaknw', 43), ('iNdw', 93), ('guVoOYFXevzRXC', 100)]", "def check(subject_marks):\n\tassert subject_marks([('IwDd', 100), ('qHifLObg', 95), ('gzwLnKRrS', 49)]) == [('gzwLnKRrS', 49), ('qHifLObg', 95), ('IwDd', 100)]", "def check(subject_marks):\n\tassert subject_marks([('riyoipIVnodh', 96), ('PlTZbszvYCzqhGr', 95), ('ONy', 45)]) == [('ONy', 45), ('PlTZbszvYCzqhGr', 95), ('riyoipIVnodh', 96)]", "def check(subject_marks):\n\tassert subject_marks([('yyaoHcQl', 92), ('xZCgwF', 102), ('EvVBKBT', 41)]) == [('EvVBKBT', 41), ('yyaoHcQl', 92), ('xZCgwF', 102)]", "def check(subject_marks):\n\tassert subject_marks([('abH', 97), ('OdehDjqJ', 101), ('bdRU', 49)]) == [('bdRU', 49), ('abH', 97), ('OdehDjqJ', 101)]", "def check(subject_marks):\n\tassert subject_marks([('uFiB', 96), ('aYmJcaoFr', 98), ('xHDKfbuVB', 48)]) == [('xHDKfbuVB', 48), ('uFiB', 96), ('aYmJcaoFr', 98)]", "def check(subject_marks):\n\tassert subject_marks([('zQJjXNgTLe', 98), ('YEmwQaLNXGgMky', 94), ('JDQJgXiUx', 49)]) == [('JDQJgXiUx', 49), ('YEmwQaLNXGgMky', 94), ('zQJjXNgTLe', 98)]", "def check(subject_marks):\n\tassert subject_marks([('umdIyVhjPo', 92), ('NYBDPfUewHyBUZ', 102), ('zSCcSmThn', 49)]) == [('zSCcSmThn', 49), ('umdIyVhjPo', 92), ('NYBDPfUewHyBUZ', 102)]", "def check(subject_marks):\n\tassert subject_marks([('tHVkb', 94), ('qYcejP', 92), ('wUajcaSDJ', 46)]) == [('wUajcaSDJ', 46), ('qYcejP', 92), ('tHVkb', 94)]", "def check(subject_marks):\n\tassert subject_marks([('YSSMRTsEFK', 100), ('WVqLuUY', 98), ('OzML', 42)]) == [('OzML', 42), ('WVqLuUY', 98), ('YSSMRTsEFK', 100)]", "def check(subject_marks):\n\tassert subject_marks([('ZPoZuFiw', 97), ('UoDABQSvOdkCuV', 95), ('uFslvKYhFn', 47)]) == [('uFslvKYhFn', 47), ('UoDABQSvOdkCuV', 95), ('ZPoZuFiw', 97)]", "def check(subject_marks):\n\tassert subject_marks([('sxlGrTcJ', 96), ('FIqmyf', 94), ('Vhvfhmiu', 42)]) == [('Vhvfhmiu', 42), ('FIqmyf', 94), ('sxlGrTcJ', 96)]", "def check(subject_marks):\n\tassert subject_marks([('oolJEgaEj', 94), ('iMfMjBPS', 92), ('WZnD', 44)]) == [('WZnD', 44), ('iMfMjBPS', 92), ('oolJEgaEj', 94)]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef subject_marks(marks: list[tuple[str, int]]) -> list[tuple[str, int]]:\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple in ascending order.\n\n    Parameters:\n    marks (list of tuple): A list where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list of tuple: A sorted list of tuples based on the marks.\n    \"\"\"\n    # Validate input to ensure all second values are integers\n    for subject, mark in marks:\n        if not isinstance(mark, int):\n            raise ValueError(f\"Mark for subject '{subject}' must be an integer, got {type(mark).__name__}.\")\n\n    # Sort the list of tuples based on the second value (marks) using a lambda function as the key\n    sorted_marks = sorted(marks, key=lambda x: x[1])\n\n    return sorted_marks\n\n# Example usage\nif __name__ == \"__main__\":\n    example_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]\n    sorted_example = subject_marks(example_marks)\n    print(sorted_example)  # Output: [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n", "passed": true, "pass": true, "pass_num": 10, "round": 737, "mutate_method": "condense_two2one", "parent_index": 18}
