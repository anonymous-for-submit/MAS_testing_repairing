{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 135, "prompt": "Write a function to find the nth hexagonal number.", "code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ", "test_imports": [], "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91", "assert hexagonal_num(14) == 378", "assert hexagonal_num(7) == 91", "assert hexagonal_num(7) == 91", "assert hexagonal_num(5) == 45", "assert hexagonal_num(8) == 120", "assert hexagonal_num(8) == 120", "assert hexagonal_num(13) == 325", "assert hexagonal_num(14) == 378", "assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(8) == 120", "assert hexagonal_num(15) == 435", "assert hexagonal_num(5) == 45", "assert hexagonal_num(15) == 435", "assert hexagonal_num(12) == 276", "assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(12) == 276", "assert hexagonal_num(11) == 231", "assert hexagonal_num(9) == 153", "assert hexagonal_num(5) == 45", "assert hexagonal_num(13) == 325", "assert hexagonal_num(10) == 190", "assert hexagonal_num(15) == 435", "assert hexagonal_num(14) == 378", "assert hexagonal_num(8) == 120", "assert hexagonal_num(14) == 378", "assert hexagonal_num(15) == 435", "assert hexagonal_num(14) == 378", "assert hexagonal_num(14) == 378", "assert hexagonal_num(11) == 231", "assert hexagonal_num(13) == 325", "assert hexagonal_num(13) == 325", "assert hexagonal_num(8) == 120", "assert hexagonal_num(4) == 28", "assert hexagonal_num(3) == 15", "assert hexagonal_num(5) == 45", "assert hexagonal_num(4) == 28", "assert hexagonal_num(6) == 66", "assert hexagonal_num(4) == 28", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91", "assert hexagonal_num(6) == 66", "assert hexagonal_num(7) == 91", "assert hexagonal_num(7) == 91", "assert hexagonal_num(9) == 153", "assert hexagonal_num(2) == 6", "assert hexagonal_num(3) == 15", "assert hexagonal_num(6) == 66", "assert hexagonal_num(9) == 153", "assert hexagonal_num(9) == 153", "assert hexagonal_num(7) == 91", "assert hexagonal_num(2) == 6", "assert hexagonal_num(10) == 190", "assert hexagonal_num(8) == 120", "assert hexagonal_num(5) == 45", "assert hexagonal_num(6) == 66", "assert hexagonal_num(6) == 66", "assert hexagonal_num(7) == 91", "assert hexagonal_num(2) == 6", "assert hexagonal_num(2) == 6", "assert hexagonal_num(3) == 15", "assert hexagonal_num(9) == 153", "assert hexagonal_num(9) == 153", "assert hexagonal_num(5) == 45", "assert hexagonal_num(1) == 1", "assert hexagonal_num(10) == 190", "assert hexagonal_num(2) == 6", "assert hexagonal_num(6) == 66", "assert hexagonal_num(10) == 190", "assert hexagonal_num(2) == 6", "assert hexagonal_num(11) == 231", "assert hexagonal_num(4) == 28", "assert hexagonal_num(2) == 6", "assert hexagonal_num(9) == 153", "assert hexagonal_num(11) == 231", "assert hexagonal_num(12) == 276", "assert hexagonal_num(8) == 120", "assert hexagonal_num(2) == 6", "assert hexagonal_num(6) == 66", "assert hexagonal_num(12) == 276", "assert hexagonal_num(4) == 28", "assert hexagonal_num(11) == 231", "assert hexagonal_num(9) == 153", "assert hexagonal_num(10) == 190", "assert hexagonal_num(3) == 15", "assert hexagonal_num(8) == 120", "assert hexagonal_num(11) == 231", "assert hexagonal_num(9) == 153", "assert hexagonal_num(12) == 276", "assert hexagonal_num(7) == 91", "assert hexagonal_num(9) == 153", "assert hexagonal_num(11) == 231", "assert hexagonal_num(8) == 120", "assert hexagonal_num(2) == 6", "assert hexagonal_num(5) == 45", "assert hexagonal_num(10) == 190", "assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45"], "entry_point": "hexagonal_num", "repair_prompt": ["Write a function hexagonal_num to find the nth hexagonal number.\nhexagonal_num(10) == 190\n"], "completions": ["from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula H_n = n(2n-1).\n\n    Parameters:\n    n (int): The position of the hexagonal number to calculate.\n\n    Returns:\n    int: The nth hexagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (2 * n - 1)\n\n# Example usage:\n# print(hexagonal_num(1))  # Output: 1\n# print(hexagonal_num(2))  # Output: 6\n# print(hexagonal_num(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n(2n-1).\n\n    Parameters:\n    n (int): The position of the hexagonal number to calculate.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (2 * n - 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        # Example: Calculate the 5th hexagonal number\n        result = hexagonal_num(5)\n        print(f\"The 5th hexagonal number is: {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The position in the hexagonal number sequence.\n\n    Returns:\n    int: The nth hexagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (2 * n - 1)\n\n# Example usage:\n# To calculate the 5th hexagonal number, call the function as follows:\n# result = hexagonal_num(5)\n# print(result)  # Output will be 45\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n(2n-1).\n\n    Parameters:\n    n (int): The position in the hexagonal number sequence.\n\n    Returns:\n    int: The nth hexagonal number.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (2 * n - 1)\n\n# Example usage:\n# hexagonal_number = hexagonal_num(3)\n# print(hexagonal_number)  # Output: 15\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"Calculate the nth hexagonal number.\n\n    The formula for the nth hexagonal number is n(2n-1).\n\n    Args:\n        n (int): The position in the hexagonal number sequence.\n\n    Returns:\n        int: The nth hexagonal number.\n    \"\"\"\n    # Calculate the nth hexagonal number using the formula\n    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number\n\n# Example usage\nif __name__ == \"__main__\":\n    # Test the function with a sample input\n    position = 5\n    result = hexagonal_num(position)\n    print(f\"The {position}th hexagonal number is: {result}\")\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n(2n-1).\n\n    Args:\n        n (int): A positive integer representing the position in the hexagonal number sequence.\n\n    Returns:\n        int: The nth hexagonal number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (2 * n - 1)\n\n# Example usage:\n# print(hexagonal_num(1))  # Output: 1\n# print(hexagonal_num(2))  # Output: 6\n# print(hexagonal_num(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n * (2n - 1).\n\n    Parameters:\n    n (int): The position of the hexagonal number to calculate. Must be a positive integer.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (2 * n - 1)\n\n# Example usage:\n# print(hexagonal_num(1))  # Output: 1\n# print(hexagonal_num(2))  # Output: 6\n# print(hexagonal_num(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n * (2n - 1).\n\n    Parameters:\n    n (int): The position in the hexagonal number sequence.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    # Validate the input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Calculate the hexagonal number using the formula\n    hex_number = n * (2 * n - 1)\n    \n    return hex_number\n\n# Example usage:\n# try:\n#     print(hexagonal_num(3))  # Output: 15\n# except ValueError as e:\n#     print(e)\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"Calculate the nth hexagonal number using the formula n(2n-1).\n\n    This function calculates the nth hexagonal number, which is defined by\n    the formula: H(n) = n(2n-1). Hexagonal numbers are figurate numbers\n    representing hexagons.\n\n    Args:\n        n (int): The position of the hexagonal number to calculate. Must be a\n                 non-negative integer.\n\n    Returns:\n        int: The nth hexagonal number.\n\n    Raises:\n        ValueError: If n is negative or not an integer.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    return n * (2 * n - 1)\n\n# Example usage:\n# print(hexagonal_num(1))  # Output: 1\n# print(hexagonal_num(2))  # Output: 6\n# print(hexagonal_num(3))  # Output: 15\n", "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n(2n-1).\n\n    Parameters:\n    n (int): The position of the hexagonal number to calculate. Must be a positive integer.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    return n * (2 * n - 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(hexagonal_num(1))  # Output: 1\n        print(hexagonal_num(2))  # Output: 6\n        print(hexagonal_num(3))  # Output: 15\n        print(hexagonal_num(4))  # Output: 28\n    except ValueError as e:\n        print(f\"Error: {e}\")\n"], "plans": ["requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number using the formula: H_n = n(2n-1). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the hexagonal number calculation using the formula H_n = n(2n-1)\n- Optimize the function for performance with large inputs\n- Provide documentation and examples for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Create a user-friendly interface for input and output\nWe will implement a simple function using the formula H_n = n(2n-1) to calculate the nth hexagonal number. This approach is straightforward and efficient for handling large values of n. We will ensure the function is optimized for performance and provide clear documentation and examples for user understanding.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number using the formula n(2n-1). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the hexagonal number calculation using the formula n(2n-1)\n- Optimize the function for performance with large inputs\n- Provide documentation and examples for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Create a user-friendly interface for input and output\nWe will implement the hexagonal number calculation using the formula n(2n-1). This formula is straightforward and efficient for calculating hexagonal numbers. We will ensure the function handles large values of n by using Python's inherent support for large integers. Additionally, we will provide documentation and examples to aid user understanding.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number. Hexagonal numbers are a sequence of numbers that can be represented in a hexagonal pattern. The nth hexagonal number can be calculated using the formula: n * (2n - 1).\nrequirement pool:\n- Implement the hexagonal number calculation function\n- Ensure the function handles edge cases and large inputs\n- Provide documentation and examples for users\n- Optimize the function for performance\n- Create a simple user interface for input and output\nWe will implement a simple function to calculate the nth hexagonal number using the formula n * (2n - 1). This approach ensures accurate calculation and is efficient for large inputs. We will use Python's built-in capabilities without any additional libraries, as the calculation is straightforward and does not require complex operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number, which is a number in the sequence defined by the formula n(2n-1). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the hexagonal number calculation function\n- Optimize the function for performance\n- Provide examples and documentation\n- Create a user-friendly interface for input and output\n- Integrate with other mathematical tools\nWe will implement a simple function to calculate the nth hexagonal number using the formula n(2n-1). This approach is straightforward and efficient for calculating hexagonal numbers even for large values of n. We will use Python's built-in capabilities without any additional libraries, as the calculation is simple and does not require complex operations.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number, which is a number in the sequence of hexagonal numbers. Hexagonal numbers are figurate numbers that represent hexagons. The nth hexagonal number can be calculated using the formula: n(2n-1).\nrequirement pool:\n- Implement the hexagonal number calculation function\n- Optimize the function for large values of n\n- Provide examples and documentation for user understanding\n- Integrate the function into a larger mathematical toolkit\n- Develop a user interface for easy access to the function\nWe will implement a simple function to calculate the nth hexagonal number using the formula n(2n-1). This approach ensures accurate calculation and is efficient for large inputs due to its direct mathematical computation. We will use Python's built-in capabilities without any additional libraries, as the calculation is straightforward.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number using the formula n(2n-1). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the hexagonal number calculation using the formula n(2n-1)\n- Optimize the function for performance with large inputs\n- Provide documentation and examples for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Create a user-friendly interface for input and output\nWe will implement a simple function to calculate the nth hexagonal number using the formula n(2n-1). This approach is straightforward and efficient for calculating hexagonal numbers. We will ensure the function handles only positive integer inputs, as negative or non-integer inputs do not make sense in the context of hexagonal numbers.\n", "requirement analysis:\nThe function should accurately compute the nth hexagonal number using the formula n * (2n - 1). It should handle large values of n efficiently and provide clear documentation for users.\nrequirement pool:\n- Implement the hexagonal number calculation using the formula n * (2n - 1)\n- Optimize the function for performance with large inputs\n- Include examples and documentation for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Provide error handling for invalid inputs\nWe will implement the hexagonal number calculation using the formula n * (2n - 1). The function will be optimized for performance with large inputs by using simple arithmetic operations. We will include examples and documentation to aid user understanding. The function will handle invalid inputs by raising appropriate exceptions.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number. Hexagonal numbers are a sequence of numbers that can be represented in a hexagonal pattern. The nth hexagonal number can be calculated using the formula: n * (2n - 1). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the hexagonal number calculation using the formula n * (2n - 1)\n- Optimize the function for performance with large inputs\n- Include documentation explaining the formula and usage\n- Add error handling for invalid inputs\n- Create a user interface for input and output\nWe will implement the hexagonal number calculation using the formula n * (2n - 1). This approach is straightforward and efficient for calculating hexagonal numbers. We will ensure the function handles large inputs efficiently by using Python's inherent ability to manage large integers. Additionally, we will include documentation to explain the formula and usage, and add error handling for non-integer and negative inputs.\n", "requirement analysis:\nThe requirement is to create a function that calculates the nth hexagonal number using the formula n(2n-1). The function should be efficient and handle large values of n.\nrequirement pool:\n- Implement the hexagonal number calculation function\n- Optimize the function for performance\n- Provide documentation and usage examples\n- Ensure compatibility with other mathematical libraries\n- Create a user-friendly interface for input and output\nWe will implement a simple function to calculate the nth hexagonal number using the formula n(2n-1). This function will be efficient and handle large values of n. We will use Python's built-in capabilities without any additional libraries, as the calculation is straightforward and does not require complex operations.\n", "requirement analysis:\nThe function should accurately compute the nth hexagonal number using the formula n(2n-1). It should handle large values of n efficiently and provide clear documentation for users.\nrequirement pool:\n- Implement the hexagonal number calculation using the formula n(2n-1)\n- Optimize the function for performance with large inputs\n- Include examples and documentation for user understanding\n- Ensure compatibility with existing mathematical libraries\n- Provide error handling for invalid inputs\nWe will implement a function named hexagonal_num that calculates the nth hexagonal number using the formula n(2n-1). The function will include input validation to handle non-integer and negative values. We will use Python's built-in capabilities to ensure efficient computation even for large values of n. Additionally, we will provide documentation and examples to aid user understanding.\n"], "test": ["def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(14) == 378", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(13) == 325", "def check(hexagonal_num):\n\tassert hexagonal_num(14) == 378", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(15) == 435", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(15) == 435", "def check(hexagonal_num):\n\tassert hexagonal_num(12) == 276", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(12) == 276", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(13) == 325", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(15) == 435", "def check(hexagonal_num):\n\tassert hexagonal_num(14) == 378", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(14) == 378", "def check(hexagonal_num):\n\tassert hexagonal_num(15) == 435", "def check(hexagonal_num):\n\tassert hexagonal_num(14) == 378", "def check(hexagonal_num):\n\tassert hexagonal_num(14) == 378", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(13) == 325", "def check(hexagonal_num):\n\tassert hexagonal_num(13) == 325", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(4) == 28", "def check(hexagonal_num):\n\tassert hexagonal_num(3) == 15", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(4) == 28", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(4) == 28", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(3) == 15", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(3) == 15", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(1) == 1", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(4) == 28", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(12) == 276", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(6) == 66", "def check(hexagonal_num):\n\tassert hexagonal_num(12) == 276", "def check(hexagonal_num):\n\tassert hexagonal_num(4) == 28", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(3) == 15", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(12) == 276", "def check(hexagonal_num):\n\tassert hexagonal_num(7) == 91", "def check(hexagonal_num):\n\tassert hexagonal_num(9) == 153", "def check(hexagonal_num):\n\tassert hexagonal_num(11) == 231", "def check(hexagonal_num):\n\tassert hexagonal_num(8) == 120", "def check(hexagonal_num):\n\tassert hexagonal_num(2) == 6", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(10) == 190", "def check(hexagonal_num):\n\tassert hexagonal_num(5) == 45"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef hexagonal_num(n: int) -> int:\n    \"\"\"\n    Calculate the nth hexagonal number using the formula n(2n-1).\n\n    Parameters:\n    n (int): The position of the hexagonal number to calculate. Must be a positive integer.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    return n * (2 * n - 1)\n\n# Example usage:\nif __name__ == \"__main__\":\n    try:\n        print(hexagonal_num(1))  # Output: 1\n        print(hexagonal_num(2))  # Output: 6\n        print(hexagonal_num(3))  # Output: 15\n        print(hexagonal_num(4))  # Output: 28\n    except ValueError as e:\n        print(f\"Error: {e}\")\n", "passed": true, "pass": true, "pass_num": 10, "round": 760, "mutate_method": "condense_two2one", "parent_index": 58}
