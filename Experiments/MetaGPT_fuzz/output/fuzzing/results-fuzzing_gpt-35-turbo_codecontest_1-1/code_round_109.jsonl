{"name": "1619_H. Permutation and Queries", "description": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once. For example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "tags": ["brute force", "data structures", "divide and conquer", "two pointers"], "difficulty": 14, "id": 1619, "sample_io": [{"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n3\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n", "output": ["4\n1\n2\n"]}], "test_list": [{"input": "1 1\n1\n2 1 1\n", "output": ["1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n4\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 3\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["7\n6\n8\n9\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 83 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["19\n6\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 3\n2 1 2\n", "output": ["4\n1\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n59\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n4\n3\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n1\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n1\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 7 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 1 3\n2 1 2\n", "output": ["4\n4\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["21\n6\n40\n54\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n1\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 2\n2 1 2\n", "output": ["4\n1\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n4\n2\n4\n3\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n1\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n1 1 3\n2 1 2\n", "output": ["4\n2\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 22\n2 1 72\n2 65 13\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["21\n6\n57\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n7\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n7\n5\n10\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 2\n", "output": ["3\n5\n4\n2\n3\n5\n3\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n9\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 9\n1 3 6\n", "output": ["10\n6\n8\n7\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 2 72\n2 65 8\n1 18 37\n1 19 89\n1 86 3\n2 36 69\n1 100 59\n", "output": ["71\n16\n40\n54\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n9\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 1 6\n1 7 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n2\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 2 3\n2 1 2\n", "output": ["4\n4\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 44 44\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["64\n6\n40\n54\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 4\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n3\n1\n2\n3\n3\n5\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n2 1 4\n1 1 2\n2 1 2\n", "output": ["3\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["7\n6\n7\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 4 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n1\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 4 9\n2 8 8\n1 3 6\n", "output": ["7\n6\n7\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["10\n3\n8\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n6\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 83 22\n2 1 72\n2 65 10\n1 18 37\n1 19 89\n1 86 6\n2 36 69\n1 100 59\n", "output": ["19\n6\n47\n54\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n2 1 3\n2 1 2\n", "output": ["4\n1\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 1\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n4\n3\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 2\n1 1 3\n2 2 2\n", "output": ["4\n4\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 2\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n4\n2\n4\n3\n1\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n6\n5\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["2\n6\n7\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n9\n7\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 5 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n2\n2\n3\n1\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n2 1 3\n1 1 2\n2 1 2\n", "output": ["3\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 10\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["10\n3\n7\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n5\n3\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n6\n5\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n3\n2\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 5 6\n2 5 9\n2 8 2\n1 3 6\n", "output": ["10\n6\n9\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 0\n1 4 6\n1 5 9\n2 9 8\n1 3 7\n", "output": ["10\n9\n9\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 2\n", "output": ["3\n5\n1\n2\n2\n3\n1\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n4\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 3\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n4\n5\n2\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n7\n5\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n4\n2\n1\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n1 4 6\n", "output": ["2\n6\n7\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 0\n1 4 6\n2 5 9\n2 9 8\n1 3 7\n", "output": ["10\n9\n9\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n4\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n8\n8\n8\n"]}, {"input": "5 7\n2 3 5 1 4\n2 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["3\n1\n4\n2\n4\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n2 4 6\n", "output": ["2\n6\n7\n6\n10\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n6\n8\n8\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 6\n2 4 6\n", "output": ["2\n6\n7\n6\n8\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 5\n2 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n8\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n2 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n2\n2\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 0\n", "output": ["4\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n2 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n4\n8\n7\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 4 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n4\n4\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 3\n2 1 72\n2 65 8\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["55\n6\n40\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 2\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 1 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n4\n5\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 3\n2 1 2\n", "output": ["4\n2\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n1 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n5\n4\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 8\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["10\n9\n4\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n2 7 6\n1 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 8\n2 9 8\n1 3 6\n", "output": ["10\n10\n6\n9\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 0\n1 1 4\n1 1 2\n2 1 2\n", "output": ["3\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 4\n2 1 3\n2 1 2\n", "output": ["4\n4\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 1 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n2\n3\n4\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n2 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n6\n8\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 7 6\n2 3 3\n1 6 2\n2 5 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n5\n5\n3\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 2 12\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n2\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 10\n2 4 2\n", "output": ["3\n5\n1\n2\n3\n5\n3\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 1 3\n2 5 8\n1 5 4\n2 5 3\n2 2 7\n2 5 1\n", "output": ["3\n5\n1\n5\n2\n3\n1\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 10\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 1 8\n1 3 6\n", "output": ["7\n6\n7\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 9 8\n1 4 6\n", "output": ["2\n6\n7\n5\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 6\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 8 8\n1 4 6\n", "output": ["2\n3\n7\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 3 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n8\n4\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 2 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n8\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 9\n2 8 8\n2 4 6\n", "output": ["2\n6\n8\n6\n10\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 4\n1 7 6\n2 3 3\n1 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n7\n4\n5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 0\n1 3 6\n2 6 9\n2 8 6\n2 4 6\n", "output": ["2\n6\n9\n6\n8\n4\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 5\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n2 3 6\n", "output": ["10\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 4\n1 1 2\n2 9 5\n1 4 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n3\n4\n5\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 3\n2 1 1\n", "output": ["4\n2\n5\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 2\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n1\n2\n3\n3\n5\n2\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 0\n2 5 4\n1 5 1\n2 1 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n5\n3\n4\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n2 3 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n6\n1\n5\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n5\n5\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n2 1 2\n2 1 1\n", "output": ["4\n2\n1\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n2 4 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n8\n1\n5\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 0\n2 1 2\n2 1 1\n", "output": ["4\n3\n1\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 6\n1 9 6\n1 4 3\n1 6 2\n2 9 5\n1 4 6\n2 5 9\n2 10 10\n1 3 6\n", "output": ["10\n6\n5\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 5\n2 8 10\n1 3 8\n", "output": ["10\n6\n5\n2\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 6\n1 6 2\n2 9 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n2\n8\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n1 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n", "output": ["3\n5\n4\n2\n2\n2\n4\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 13\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 1\n2 36 69\n1 100 59\n", "output": ["33\n89\n40\n94\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 1 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n8\n6\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n1 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["95\n40\n32\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 5 2\n2 9 5\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n10\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 4 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n1\n2\n4\n3\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 1\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n4\n4\n2\n3\n3\n1\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 2\n1 2 3\n2 1 2\n", "output": ["4\n2\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 2 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n2\n4\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 6\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["9\n6\n7\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 8 8\n1 3 6\n", "output": ["10\n9\n8\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n2 7 6\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 8\n2 9 8\n1 3 6\n", "output": ["10\n9\n6\n9\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 1 2\n2 9 4\n1 4 6\n1 8 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n9\n2\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 3\n1 1 2\n2 1 2\n", "output": ["4\n5\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 3 4\n1 1 4\n2 1 2\n", "output": ["4\n4\n3\n"]}, {"input": "5 2\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 4 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n2 5 8\n2 9 8\n1 3 6\n", "output": ["10\n6\n8\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 3\n2 4 8\n1 3 6\n", "output": ["10\n6\n8\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 7 6\n1 7 9\n2 3 1\n1 6 2\n2 9 5\n1 4 6\n2 4 9\n2 8 8\n1 5 6\n", "output": ["7\n4\n7\n8\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n3\n8\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 5 6\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n4\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 1 3\n2 1 3\n2 1 2\n", "output": ["4\n5\n5\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 4 5\n2 1 1\n2 5 3\n2 1 4\n1 5 2\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n4\n2\n2\n4\n3\n1\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 10\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["2\n6\n3\n5\n10\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 17\n2 4 2\n", "output": ["3\n5\n4\n2\n3\n5\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n1 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n5\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 7 5\n1 1 6\n1 7 10\n2 3 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n1 3 6\n", "output": ["7\n3\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 4 5\n1 6 2\n2 9 0\n1 4 6\n1 5 9\n2 9 8\n1 3 7\n", "output": ["10\n2\n9\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 4 1\n2 5 3\n2 5 8\n1 5 4\n1 5 3\n2 2 7\n2 5 2\n", "output": ["3\n5\n1\n2\n2\n3\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 1\n2 9 22\n2 3 6\n", "output": ["10\n6\n8\n4\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 7 6\n1 4 6\n2 5 9\n2 8 10\n1 3 6\n", "output": ["10\n6\n3\n8\n8\n"]}, {"input": "5 7\n2 3 5 1 4\n1 3 5\n2 5 7\n2 5 1\n2 5 3\n2 5 6\n1 5 4\n2 5 2\n2 2 7\n2 4 1\n", "output": ["5\n5\n5\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n2 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["10\n6\n9\n4\n2\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n1 5 3\n2 1 4\n1 5 1\n2 5 3\n2 2 7\n2 4 1\n", "output": ["3\n5\n4\n1\n4\n4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 0\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n5\n2\n3\n3\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 1\n1 6 2\n2 9 4\n2 1 6\n1 7 9\n2 9 22\n1 3 6\n", "output": ["10\n4\n8\n6\n8\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 4 3\n2 5 4\n1 5 1\n2 5 3\n2 4 12\n2 4 1\n", "output": ["3\n5\n4\n3\n3\n5\n4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 4\n1 5 1\n2 5 3\n2 2 10\n2 4 3\n", "output": ["3\n5\n1\n2\n3\n5\n3\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 6 9\n2 9 8\n1 4 6\n", "output": ["2\n6\n7\n6\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n2 6 2\n2 3 5\n1 1 6\n1 7 9\n2 9 22\n2 3 4\n", "output": ["10\n6\n8\n8\n4\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 7\n2 8 8\n2 4 6\n", "output": ["2\n6\n8\n4\n10\n4\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 0\n2 5 4\n2 5 4\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 2\n2 5 2\n", "output": ["3\n3\n3\n2\n3\n3\n5\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n2 3 6\n", "output": ["10\n6\n5\n5\n8\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n2 8 5\n1 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n1 3 8\n", "output": ["10\n8\n6\n9\n10\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 6\n1 6 2\n2 3 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n2\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 6\n2 3 2\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 5\n", "output": ["7\n1\n8\n9\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 2\n1 4 6\n1 1 9\n2 9 16\n1 3 6\n", "output": ["10\n6\n2\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 7 6\n2 3 3\n1 5 2\n2 9 5\n1 4 6\n1 5 8\n2 8 8\n1 3 6\n", "output": ["10\n6\n10\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n1 3 1\n2 2 2\n1 1 5\n2 1 2\n", "output": ["5\n1\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 6\n1 7 6\n1 7 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["9\n6\n8\n5\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n2 9 5\n1 3 6\n2 9 9\n2 8 8\n1 3 8\n", "output": ["10\n6\n9\n9\n8\n"]}, {"input": "5 4\n5 3 4 2 1\n2 1 1\n2 1 3\n1 1 2\n2 1 2\n", "output": ["5\n5\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 2\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n10\n8\n7\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 3 3\n1 10 2\n2 9 4\n1 5 3\n1 5 8\n2 4 15\n1 3 6\n", "output": ["10\n3\n8\n1\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 3 3\n1 6 2\n1 9 5\n1 5 6\n2 5 9\n2 8 8\n1 3 6\n", "output": ["10\n6\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 6\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 5 6\n", "output": ["7\n6\n2\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 4 6\n2 3 3\n2 6 2\n2 9 5\n1 1 6\n1 7 1\n2 9 22\n2 3 6\n", "output": ["10\n9\n6\n4\n4\n7\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 1\n1 8 5\n1 7 6\n2 3 3\n2 6 2\n2 9 6\n1 4 6\n2 5 9\n2 8 13\n1 3 6\n", "output": ["9\n6\n9\n4\n2\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 8 5\n2 7 6\n2 3 3\n1 6 2\n2 9 12\n1 4 6\n2 2 9\n2 8 10\n2 3 6\n", "output": ["10\n7\n6\n5\n3\n2\n5\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 6\n1 10 6\n2 3 11\n1 6 2\n2 3 4\n1 4 6\n1 7 9\n2 9 8\n1 3 6\n", "output": ["10\n6\n7\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 6\n", "output": ["10\n10\n6\n3\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 9 22\n1 5 6\n", "output": ["7\n8\n6\n3\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 4 8\n2 3 8\n", "output": ["10\n10\n6\n3\n10\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 1 3\n1 6 2\n1 9 5\n1 5 6\n3 5 9\n2 8 8\n1 3 6\n", "output": ["10\n4\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 5\n1 1 6\n1 7 9\n2 8 22\n1 5 6\n", "output": ["7\n8\n6\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 2 5\n1 7 6\n1 6 9\n2 3 3\n1 6 2\n2 9 6\n1 3 6\n2 6 12\n2 8 8\n1 4 6\n", "output": ["2\n6\n9\n6\n8\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 1 6\n1 7 6\n2 2 3\n1 10 1\n2 9 4\n1 4 6\n1 5 8\n2 3 8\n2 3 8\n", "output": ["10\n10\n6\n10\n10\n"]}, {"input": "10 5\n6 7 4 1 5 3 10 2 8 9\n2 10 5\n1 7 10\n1 7 9\n2 2 3\n1 6 2\n1 9 5\n1 5 6\n3 5 9\n2 8 8\n1 3 6\n", "output": ["10\n2\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 9\n1 7 6\n1 10 4\n2 3 3\n1 6 2\n2 9 8\n1 1 6\n1 7 9\n2 8 22\n1 5 6\n", "output": ["7\n8\n4\n10\n"]}, {"input": "10 10\n6 7 4 1 5 3 10 2 8 9\n2 10 4\n1 7 6\n1 10 3\n2 3 3\n1 6 2\n2 9 4\n1 4 6\n1 5 9\n2 9 8\n1 3 6\n", "output": ["7\n2\n4\n9\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 1 2\n2 5 1\n", "output": ["3\n5\n4\n2\n3\n3\n3\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n2 3 1\n2 2 4\n1 1 3\n2 1 2\n", "output": ["4\n3\n2\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 8\n1 18 37\n1 19 37\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n40\n51\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 2 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n4\n2\n1\n3\n5\n1\n"]}, {"input": "100 10\n71 72 20 93 38 81 19 44 88 57 3 37 86 64 63 97 15 85 53 99 61 66 75 96 48 67 6 31 92 70 27 54 74 43 7 5 84 33 60 65 95 76 11 14 49 24 77 21 50 98 46 25 83 45 94 8 68 91 28 4 80 18 17 1 47 34 40 26 69 35 58 9 36 32 22 16 10 79 13 90 78 29 23 41 100 51 55 59 62 56 12 30 82 2 89 52 73 87 39 42\n1 64 46\n1 97 45\n2 50 22\n2 1 72\n2 65 10\n1 18 68\n1 19 89\n1 86 5\n2 36 69\n1 100 59\n", "output": ["71\n6\n47\n6\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 7\n2 5 0\n", "output": ["3\n5\n4\n2\n3\n3\n1\n5\n"]}, {"input": "5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 2\n2 5 3\n2 5 7\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["3\n5\n1\n2\n1\n3\n5\n1\n"]}, {"input": "5 3\n5 3 4 2 1\n2 3 1\n2 1 4\n1 1 2\n2 1 2\n", "output": ["4\n1\n"]}, {"input": "5 9\n2 3 5 1 4\n1 3 5\n2 4 5\n2 5 1\n2 5 3\n2 1 4\n1 5 4\n2 5 3\n2 2 2\n2 5 1\n", "output": ["1\n5\n5\n1\n3\n4\n1\n"]}, {"input": "5 4\n5 3 4 2 1\n1 3 1\n2 3 2\n1 1 3\n2 1 2\n", "output": ["1\n1\n"]}], "task_id": "codecontest/146", "prompt": "You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once; for example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries and make sure to handle edge cases such as queries with the same indices and very large values for k.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "repair_prompt": ["You are given a permutation p of n elements. A permutation of n elements is an array of length n containing each integer from 1 to n exactly once; for example, [1, 2, 3] and [4, 3, 5, 1, 2] are permutations, but [1, 2, 4] and [4, 3, 2, 1, 2] are not permutations. You should perform q queries and make sure to handle edge cases such as queries with the same indices and very large values for k.\n\nThere are two types of queries:\n\n  * 1 x y \u2014 swap p_x and p_y. \n  * 2 i k \u2014 print the number that i will become if we assign i = p_i k times. \n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\ndef permutation_queries(n, q, p, queries):\n    def swap_elements(p, x, y):\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n\n    def calculate_query_result(p, i, k):\n        result = i\n        for _ in range(k):\n            result = p[result-1]\n        return result\n\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            x, y = query[1], query[2]\n            swap_elements(p, x, y)\n        elif query[0] == 2:\n            i, k = query[1], query[2]\n            result = calculate_query_result(p, i, k)\n            results.append(result)\n\n    return results\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split())))\n\n# Output interface\nresults = permutation_queries(n, q, p, queries)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\ndef permutation_queries(n, q, p, queries):\n    def swap_elements(p, x, y):\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n\n    def calculate_query(p, i, k):\n        result = i\n        for _ in range(k):\n            result = p[result-1]\n        return result\n\n    for query in queries:\n        if query[0] == 1:\n            swap_elements(p, query[1], query[2])\n        elif query[0] == 2:\n            print(calculate_query(p, query[1], query[2]))\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split())))\n\nresult = permutation_queries(n, q, p, queries)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\ndef permutation_queries(n, q, p, queries):\n    def swap_elements(p, x, y):\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n\n    def calculate_element(p, i, k):\n        result = i\n        for _ in range(k):\n            result = p[result-1]\n        return result\n\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            x, y = query[1], query[2]\n            swap_elements(p, x, y)\n        elif query[0] == 2:\n            i, k = query[1], query[2]\n            result = calculate_element(p, i, k)\n            results.append(result)\n\n    return results\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split()))\n\n# Output interface\nresults = permutation_queries(n, q, p, queries)\nfor res in results:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef swap_elements(p: List[int], x: int, y: int) -> List[int]:\n    \"\"\"\n    Swap elements at positions x and y in the permutation p.\n    \n    Args:\n    p: List of integers representing the permutation.\n    x: Index of the first element to swap.\n    y: Index of the second element to swap.\n    \n    Returns:\n    List of integers representing the updated permutation after swapping elements.\n    \"\"\"\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n    return p\n\ndef assign_value(p: List[int], i: int, k: int) -> int:\n    \"\"\"\n    Assign i = p_i k times and return the resulting number.\n    \n    Args:\n    p: List of integers representing the permutation.\n    i: Index of the element to assign.\n    k: Number of times to assign i = p_i.\n    \n    Returns:\n    Integer representing the resulting number after assigning i = p_i k times.\n    \"\"\"\n    for _ in range(k):\n        i = p[i-1]\n    return i\n\n# Input interface using input()\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split()))\n\n# Output interface using print()\n\nfor query in queries:\n    if query[0] == 1:\n        p = swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        result = assign_value(p, query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\nimport sys\n\ndef handle_queries(n, q, p, queries):\n    results = []\n    \n    def swap_elements(p, x, y):\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n    \n    def calculate_final_position(p, i, k):\n        current_position = i - 1\n        for _ in range(k):\n            current_position = p[current_position] - 1\n        return current_position + 1\n    \n    for query in queries:\n        if query[0] == 1:\n            x, y = query[1], query[2]\n            swap_elements(p, x, y)\n        elif query[0] == 2:\n            i, k = query[1], query[2]\n            final_position = calculate_final_position(p, i, k)\n            results.append(final_position)\n    \n    return results\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split()))\n\nresults = handle_queries(n, q, p, queries)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef permutation_queries(n: int, q: int, p: List[int], queries: List[Tuple[int, int, int]]) -> List[int]:\n    def swap_elements(p: List[int], x: int, y: int) -> List[int]:\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n        return p\n\n    def calculate_query(p: List[int], i: int, k: int) -> int:\n        result = i\n        for _ in range(k):\n            result = p[result-1]\n        return result\n\n    result = []\n    for query in queries:\n        if query[0] == 1:\n            p = swap_elements(p, query[1], query[2])\n        elif query[0] == 2:\n            result.append(calculate_query(p, query[1], query[2]))\n\n    return result\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\nresult = permutation_queries(n, q, p, queries)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\ndef swap_elements(p: list, x: int, y: int) -> None:\n    \"\"\"\n    Swaps elements at positions x and y in the permutation array p.\n\n    Args:\n    p: List of integers representing the permutation array.\n    x: Integer representing the position of the first element to swap.\n    y: Integer representing the position of the second element to swap.\n\n    Returns:\n    None\n    \"\"\"\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef assign_value(p: list, i: int, k: int) -> int:\n    \"\"\"\n    Calculates the final value of i after assigning i = p_i k times.\n\n    Args:\n    p: List of integers representing the permutation array.\n    i: Integer representing the initial value.\n    k: Integer representing the number of times to assign i = p_i.\n\n    Returns:\n    Integer representing the final value of i.\n    \"\"\"\n    for _ in range(k):\n        i = p[i-1]\n    return i\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split()))\n\n# Process queries\nfor query in queries:\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        result = assign_value(p, query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\ndef process_queries(n, q, p, queries):\n    def swap_elements(p, x, y):\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n\n    def calculate_query_result(p, i, k):\n        result = i\n        for _ in range(k):\n            result = p[result-1]\n        return result\n\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            x, y = query[1], query[2]\n            swap_elements(p, x, y)\n        elif query[0] == 2:\n            i, k = query[1], query[2]\n            result = calculate_query_result(p, i, k)\n            results.append(result)\n\n    return results\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split())))\n\n# Output interface\nresults = process_queries(n, q, p, queries)\nfor res in results:\n    print(res)\n", "from typing import List\n## main.py\n\ndef swap_elements(p, x, y):\n    p[x-1], p[y-1] = p[y-1], p[x-1]\n\ndef calculate_final_position(p, i, k):\n    for _ in range(k):\n        i = p[i-1]\n    return i\n\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split()))\n\nfor query in queries:\n    if query[0] == 1:\n        swap_elements(p, query[1], query[2])\n    elif query[0] == 2:\n        result = calculate_final_position(p, query[1], query[2])\n        print(result)\n", "from typing import List\n## main.py\n\ndef process_queries(n, q, p, queries):\n    def swap_elements(p, x, y):\n        p[x-1], p[y-1] = p[y-1], p[x-1]\n\n    def assign_element(p, i, k):\n        for _ in range(k):\n            i = p[i-1]\n        return i\n\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            x, y = query[1], query[2]\n            swap_elements(p, x, y)\n        elif query[0] == 2:\n            i, k = query[1], query[2]\n            result = assign_element(p, i, k)\n            results.append(result)\n\n    return results\n\n# Input interface\nn, q = map(int, input().split())\np = list(map(int, input().split()))\nqueries = []\nfor _ in range(q):\n    queries.append(list(map(int, input().split())))\n\n# Output interface\nresults = process_queries(n, q, p, queries)\nfor result in results:\n    print(result)\n"], "plans": ["requirement pool:\n- Efficiently handle permutation queries\n- Ensure accurate swapping of elements\n- Optimize for large values of k\nWe will use Python and the built-in data structures to efficiently handle permutation queries and optimize for large values of k.\n", "requirement pool:\n- Efficiently handle permutation queries\n- Ensure accuracy in swapping elements\n- Optimize performance for large values of k\nWe will use Python and the built-in data structures to efficiently handle permutation queries and optimize performance for large values of k. We will implement the required functions without defining any class to keep the architecture simple.\n", "requirement pool:\n- Handle permutation queries efficiently\n- Ensure accurate swapping of elements\n- Optimize performance for large values of k\nWe will use the built-in list data structure in Python to store the permutation array and handle the queries efficiently. We will implement the swapping and calculation logic for the queries without using any external libraries.\n", "requirement analysis:\nThe requirements involve efficiently processing permutation queries, handling edge cases, and optimizing speed. It's crucial to accurately implement query types and ensure the program can manage large values effectively.\nrequirement pool:\n- Implement query processing for swapping elements\n- Develop logic for assigning values based on queries\n- Optimize algorithm for handling large values\nWe will use Python and the built-in data structures to efficiently handle permutation queries. We will implement the required functions without defining any class and ensure robustness for edge cases.\n", "requirement analysis:\nThe requirements involve efficiently handling permutation queries, ensuring robustness for edge cases, and optimizing query processing speed. The system needs to accurately process user queries and provide fast responses, especially for large values of k. Edge cases such as queries with the same indices or very large k values must be handled without errors.\nrequirement pool:\n- Efficiently process permutation queries\n- Handle edge cases like queries with the same indices\n- Optimize query processing speed\nWe will use Python and the built-in list data structure to efficiently handle permutation queries. We will implement two functions to swap elements and calculate the final position after k iterations. We will ensure robustness by handling edge cases such as queries with the same indices and very large values for k. To optimize query processing speed, we will use efficient algorithms for both query types.\n", "requirement pool:\n- Efficiently handle permutation queries\n- Ensure accuracy in swapping elements\n- Optimize performance for large values of k\nWe will use Python and the built-in data structures to efficiently handle permutation queries. We will implement the required functions without defining any classes to keep the architecture simple. To optimize performance for large values of k, we will leverage Python's list manipulation capabilities.\n", "requirement pool:\n- Efficiently handle permutation queries\n- Ensure accuracy in swapping elements\n- Optimize performance for large values of k\nWe will use the built-in list data structure in Python to store the permutation array and handle the queries efficiently. We will implement the swap and assign operations as separate functions to ensure accuracy in swapping elements. To optimize performance for large values of k, we will use a simple iterative approach to calculate the final value after assigning i = p_i k times.\n", "requirement pool:\n- Efficiently handle permutation queries\n- Ensure robustness for edge cases\n- Optimize query processing speed\nWe will use Python and the built-in data structures to efficiently handle permutation queries and optimize query processing speed.\n", "requirement pool:\n- Efficiently handle permutations and queries\n- Ensure accuracy in swapping elements\n- Optimize for large values of k\nWe will use Python and the built-in data structures to efficiently handle permutations and queries. We will implement a function to swap elements and another function to calculate the final position after assigning i = p_i k times.\n", "requirement analysis:\nThe main focus should be on optimizing the algorithm for query processing speed while ensuring correctness and robustness in handling edge cases.\nrequirement pool:\n- Efficiently handle permutation queries with large values for k\n- Optimize query processing speed for improved user experience\n- Ensure robustness in handling edge cases such as queries with the same indices\nWe will use Python and the built-in data structures to efficiently handle permutation queries. We will focus on optimizing the algorithm for query processing speed while ensuring correctness and robustness in handling edge cases.\n"], "scores": [], "pass_results": [false, true, false, false, true, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 109, "examples": "\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 10^5).\n\nThe second line contains n integers p_1, p_2, ..., p_n.\n\nEach of the next q lines contains three integers. The first integer is t (1 \u2264 t \u2264 2) \u2014 type of query. If t = 1, then the next two integers are x and y (1 \u2264 x, y \u2264 n; x \u2260 y) \u2014 first-type query. If t = 2, then the next two integers are i and k (1 \u2264 i, k \u2264 n) \u2014 second-type query.\n\nIt is guaranteed that there is at least one second-type query.\n\nOutput\n\nFor every second-type query, print one integer in a new line \u2014 answer to this query.\n\nExamples\n\nInput\n\n\n5 4\n5 3 4 2 1\n2 3 1\n2 1 2\n1 1 3\n2 1 2\n\n\nOutput\n\n\n4\n1\n2\n\n\nInput\n\n\n5 9\n2 3 5 1 4\n2 3 5\n2 5 5\n2 5 1\n2 5 3\n2 5 4\n1 5 4\n2 5 3\n2 2 5\n2 5 1\n\n\nOutput\n\n\n3\n5\n4\n2\n3\n3\n3\n1\n\nNote\n\nIn the first example p = \\{5, 3, 4, 2, 1\\}. \n\nThe first query is to print p_3. The answer is 4.\n\nThe second query is to print p_{p_1}. The answer is 1.\n\nThe third query is to swap p_1 and p_3. Now p = \\{4, 3, 5, 2, 1\\}.\n\nThe fourth query is to print p_{p_1}. The answer is 2.", "mutate_method": "condense_two2one", "parent_index": 21}
