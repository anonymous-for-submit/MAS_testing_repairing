{"name": "1575_G. GCD Festival", "description": "Mr. Chanek has an array a of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nwhere \\gcd(x, y) denotes the greatest common divisor (GCD) of integers x and y.\n\nIn other words, the prettiness value of an array a is the total sum of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7!\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "tags": ["math", "number theory"], "difficulty": 13, "id": 1575, "sample_io": [{"input": "5\n3 6 2 1 4\n", "output": ["77\n"]}], "test_list": [{"input": "5\n54883 59286 71521 84428 60278\n", "output": ["1027150\n"]}, {"input": "2\n83160 83160\n", "output": ["415800\n"]}, {"input": "5\n54883 59286 14742 84428 60278\n", "output": ["856827\n"]}, {"input": "5\n3 3 2 1 4\n", "output": ["67\n"]}, {"input": "5\n54883 59286 17269 84428 60278\n", "output": ["864394\n"]}, {"input": "5\n54883 68768 17269 84428 60278\n", "output": ["883378\n"]}, {"input": "5\n3 5 1 1 4\n", "output": ["62\n"]}, {"input": "5\n54883 92651 71521 84428 60278\n", "output": ["1093874\n"]}, {"input": "2\n83160 1006\n", "output": ["85176\n"]}, {"input": "5\n3 11 2 1 4\n", "output": ["79\n"]}, {"input": "5\n54883 11471 14742 84428 60278\n", "output": ["761181\n"]}, {"input": "5\n3 2 2 1 4\n", "output": ["65\n"]}, {"input": "5\n54883 59286 18015 84428 60278\n", "output": ["866636\n"]}, {"input": "5\n6 5 2 1 4\n", "output": ["74\n"]}, {"input": "5\n54883 68768 17269 84428 20399\n", "output": ["683979\n"]}, {"input": "2\n83160 674\n", "output": ["84512\n"]}, {"input": "5\n58138 11471 14742 84428 60278\n", "output": ["764442\n"]}, {"input": "5\n3 2 2 2 4\n", "output": ["77\n"]}, {"input": "5\n54883 68768 17269 52463 20399\n", "output": ["556107\n"]}, {"input": "2\n83160 1153\n", "output": ["85468\n"]}, {"input": "5\n58138 11471 14742 91222 60278\n", "output": ["791618\n"]}, {"input": "5\n54883 133 17269 52463 20399\n", "output": ["418837\n"]}, {"input": "2\n83160 973\n", "output": ["85120\n"]}, {"input": "5\n58138 11471 2840 91222 60278\n", "output": ["755912\n"]}, {"input": "5\n99534 133 17269 52463 20399\n", "output": ["463488\n"]}, {"input": "2\n83160 1163\n", "output": ["85488\n"]}, {"input": "5\n99534 147 17269 52463 20399\n", "output": ["463520\n"]}, {"input": "2\n83160 1049\n", "output": ["85260\n"]}, {"input": "5\n99534 147 17269 52463 20125\n", "output": ["462218\n"]}, {"input": "2\n79842 1049\n", "output": ["81942\n"]}, {"input": "5\n99534 147 17269 58616 20125\n", "output": ["486788\n"]}, {"input": "2\n79842 214\n", "output": ["80274\n"]}, {"input": "5\n99534 147 17269 58616 3805\n", "output": ["405164\n"]}, {"input": "5\n99534 151 17269 58616 3805\n", "output": ["405156\n"]}, {"input": "5\n99534 151 27204 58616 3805\n", "output": ["434977\n"]}, {"input": "5\n99534 151 27204 58616 5917\n", "output": ["445537\n"]}, {"input": "5\n99534 151 27204 58616 10100\n", "output": ["466466\n"]}, {"input": "5\n99534 151 27204 37060 10100\n", "output": ["380274\n"]}, {"input": "5\n99534 151 37520 37060 10100\n", "output": ["411278\n"]}, {"input": "5\n99534 151 37520 37866 10100\n", "output": ["414438\n"]}, {"input": "5\n99534 151 37520 37866 10110\n", "output": ["414484\n"]}, {"input": "5\n99534 151 37520 19505 10110\n", "output": ["341034\n"]}, {"input": "5\n99534 63 37520 19505 10110\n", "output": ["340878\n"]}, {"input": "5\n99534 65 37520 19505 10110\n", "output": ["340894\n"]}, {"input": "5\n99534 57 37520 19505 10110\n", "output": ["340854\n"]}, {"input": "5\n99534 57 37520 19505 10100\n", "output": ["340812\n"]}, {"input": "5\n54245 57 37520 19505 10100\n", "output": ["295575\n"]}, {"input": "5\n54245 57 37520 19505 10101\n", "output": ["295542\n"]}, {"input": "5\n47612 57 37520 19505 10101\n", "output": ["288863\n"]}, {"input": "5\n47612 57 37520 19505 10100\n", "output": ["288894\n"]}, {"input": "5\n47612 57 33910 19505 10100\n", "output": ["278040\n"]}, {"input": "5\n47612 57 4731 19505 10100\n", "output": ["190751\n"]}, {"input": "5\n47612 57 3570 19505 10100\n", "output": ["187024\n"]}, {"input": "5\n49368 57 3570 19505 10100\n", "output": ["188984\n"]}, {"input": "5\n49368 57 3564 19505 10100\n", "output": ["189006\n"]}, {"input": "5\n49368 57 1389 19505 10100\n", "output": ["182217\n"]}, {"input": "5\n49368 57 816 19505 10100\n", "output": ["181314\n"]}, {"input": "5\n49368 57 816 9769 10100\n", "output": ["142362\n"]}, {"input": "5\n40531 59286 71521 84428 60278\n", "output": ["1012798\n"]}, {"input": "2\n83160 30588\n", "output": ["144360\n"]}, {"input": "5\n3 6 2 2 4\n", "output": ["89\n"]}, {"input": "5\n3 3 2 1 2\n", "output": ["57\n"]}, {"input": "5\n54883 59286 17269 18865 60278\n", "output": ["602148\n"]}, {"input": "5\n3 5 2 1 8\n", "output": ["87\n"]}, {"input": "5\n54883 68768 12907 84428 60278\n", "output": ["870280\n"]}, {"input": "5\n54883 92651 71521 41670 60278\n", "output": ["922842\n"]}, {"input": "2\n83160 1472\n", "output": ["86120\n"]}, {"input": "5\n3 4 2 1 4\n", "output": ["73\n"]}, {"input": "5\n54883 19021 14742 84428 60278\n", "output": ["776281\n"]}, {"input": "5\n3 1 2 1 4\n", "output": ["59\n"]}, {"input": "5\n54883 59286 18015 84428 41705\n", "output": ["773775\n"]}, {"input": "5\n54883 1289 17269 84428 20399\n", "output": ["548997\n"]}, {"input": "5\n54883 68768 30171 52463 20399\n", "output": ["594801\n"]}, {"input": "2\n62932 1153\n", "output": ["65240\n"]}, {"input": "5\n58138 11471 14742 91222 43001\n", "output": ["705239\n"]}, {"input": "5\n16135 133 17269 52463 20399\n", "output": ["380113\n"]}, {"input": "2\n83160 1103\n", "output": ["85368\n"]}, {"input": "5\n99534 133 21279 52463 20399\n", "output": ["475510\n"]}, {"input": "2\n83160 2042\n", "output": ["87248\n"]}, {"input": "5\n99534 147 17269 22062 20399\n", "output": ["341934\n"]}, {"input": "2\n79842 1488\n", "output": ["82830\n"]}, {"input": "5\n99534 147 17185 58616 3805\n", "output": ["404920\n"]}, {"input": "5\n99534 151 33935 58616 3805\n", "output": ["455162\n"]}, {"input": "5\n99534 151 27204 58616 3362\n", "output": ["432768\n"]}, {"input": "5\n99534 151 27204 85241 5917\n", "output": ["552029\n"]}, {"input": "5\n99534 151 1014 58616 10100\n", "output": ["387888\n"]}, {"input": "5\n99534 151 27204 12835 10100\n", "output": ["283936\n"]}, {"input": "5\n99534 151 37520 38479 10100\n", "output": ["416888\n"]}, {"input": "5\n99534 151 37520 25362 10100\n", "output": ["364422\n"]}, {"input": "5\n79997 151 37520 19505 10110\n", "output": ["321485\n"]}, {"input": "5\n99534 87 37520 19505 10110\n", "output": ["340914\n"]}, {"input": "5\n99534 57 71829 19505 10110\n", "output": ["443765\n"]}, {"input": "5\n99534 57 37520 5150 10100\n", "output": ["283494\n"]}, {"input": "5\n54245 57 2106 19505 10100\n", "output": ["189285\n"]}, {"input": "5\n54245 57 74457 19505 10101\n", "output": ["406333\n"]}, {"input": "5\n7132 57 37520 19505 10101\n", "output": ["248383\n"]}, {"input": "5\n47612 114 37520 19505 10100\n", "output": ["289014\n"]}, {"input": "5\n88338 57 33910 19505 10100\n", "output": ["318766\n"]}, {"input": "5\n80407 57 4731 19505 10100\n", "output": ["223540\n"]}, {"input": "5\n47612 47 3570 19505 10100\n", "output": ["187184\n"]}, {"input": "5\n49368 57 3570 19505 10101\n", "output": ["189005\n"]}, {"input": "5\n49368 57 3564 19505 10000\n", "output": ["188514\n"]}, {"input": "5\n49368 57 1389 29577 10100\n", "output": ["222513\n"]}, {"input": "5\n49368 23 816 19505 10100\n", "output": ["181238\n"]}, {"input": "5\n49368 8 816 9769 10100\n", "output": ["142290\n"]}, {"input": "5\n40531 59286 87177 84428 60278\n", "output": ["1059770\n"]}, {"input": "2\n83160 15866\n", "output": ["114896\n"]}, {"input": "5\n3 6 2 4 4\n", "output": ["101\n"]}, {"input": "5\n3 3 2 1 3\n", "output": ["68\n"]}, {"input": "5\n54883 59286 17269 18865 22967\n", "output": ["415615\n"]}, {"input": "5\n3 7 2 1 4\n", "output": ["71\n"]}, {"input": "5\n54883 68768 12907 84428 59145\n", "output": ["864611\n"]}, {"input": "5\n33608 92651 71521 41670 60278\n", "output": ["901571\n"]}, {"input": "5\n3 4 1 1 4\n", "output": ["66\n"]}, {"input": "5\n54883 19021 14742 84428 2563\n", "output": ["487702\n"]}, {"input": "5\n54883 59286 18015 84428 79925\n", "output": ["964875\n"]}, {"input": "5\n54883 1289 17269 84428 27581\n", "output": ["584907\n"]}, {"input": "5\n54883 68768 30171 52463 11349\n", "output": ["549555\n"]}, {"input": "2\n62932 1299\n", "output": ["65532\n"]}, {"input": "5\n58138 11471 14742 91222 49893\n", "output": ["739691\n"]}, {"input": "5\n16135 223 17269 52463 20399\n", "output": ["380269\n"]}, {"input": "2\n83160 1741\n", "output": ["86644\n"]}, {"input": "2\n6544 2042\n", "output": ["10632\n"]}, {"input": "5\n37726 147 17269 22062 20399\n", "output": ["280114\n"]}, {"input": "2\n57413 1488\n", "output": ["60391\n"]}, {"input": "5\n82514 147 17185 58616 3805\n", "output": ["387896\n"]}, {"input": "5\n99534 151 33935 58616 1780\n", "output": ["445045\n"]}, {"input": "5\n99534 151 27204 85241 4386\n", "output": ["544394\n"]}, {"input": "5\n99534 287 1014 58616 10100\n", "output": ["388160\n"]}, {"input": "5\n43041 151 27204 12835 10100\n", "output": ["227435\n"]}, {"input": "5\n99534 151 37520 74526 10100\n", "output": ["561078\n"]}, {"input": "5\n99534 151 37520 25362 11100\n", "output": ["369438\n"]}, {"input": "5\n79997 151 42796 19505 10110\n", "output": ["337289\n"]}, {"input": "5\n99534 87 37520 19505 10100\n", "output": ["340872\n"]}, {"input": "5\n99534 57 71829 8304 10110\n", "output": ["398985\n"]}, {"input": "5\n99534 30 37520 5150 10100\n", "output": ["283518\n"]}, {"input": "5\n54245 57 2106 20283 10100\n", "output": ["192393\n"]}, {"input": "5\n30546 57 74457 19505 10101\n", "output": ["382614\n"]}, {"input": "5\n7132 2 37520 19505 10101\n", "output": ["248273\n"]}, {"input": "5\n47612 114 37520 19505 10101\n", "output": ["288981\n"]}, {"input": "5\n88338 57 33910 19505 11100\n", "output": ["323778\n"]}, {"input": "5\n80407 57 4731 37120 10100\n", "output": ["293866\n"]}, {"input": "5\n47612 47 3570 14707 10100\n", "output": ["167804\n"]}, {"input": "5\n49368 57 3570 19505 11101\n", "output": ["194021\n"]}, {"input": "5\n49368 57 3564 19505 10010\n", "output": ["188628\n"]}, {"input": "5\n49368 105 1389 29577 10100\n", "output": ["222617\n"]}, {"input": "5\n49368 23 816 7771 10100\n", "output": ["134294\n"]}, {"input": "5\n49368 8 816 9769 10101\n", "output": ["142285\n"]}, {"input": "2\n83160 4632\n", "output": ["92472\n"]}, {"input": "5\n3 6 2 4 8\n", "output": ["121\n"]}, {"input": "5\n46756 59286 17269 18865 22967\n", "output": ["407490\n"]}, {"input": "5\n54883 11112 12907 84428 59145\n", "output": ["749303\n"]}, {"input": "5\n33608 20002 71521 41670 60278\n", "output": ["756281\n"]}, {"input": "5\n54883 19021 2640 84428 2563\n", "output": ["451420\n"]}, {"input": "5\n54883 59286 26328 84428 79925\n", "output": ["989818\n"]}, {"input": "5\n6 3 1 1 5\n", "output": ["70\n"]}, {"input": "5\n54883 1289 2325 84428 27581\n", "output": ["540075\n"]}, {"input": "5\n54883 68768 26666 52463 11349\n", "output": ["539038\n"]}, {"input": "2\n62932 2102\n", "output": ["67140\n"]}, {"input": "5\n58138 11471 14742 91222 87478\n", "output": ["927618\n"]}, {"input": "5\n10896 223 17269 52463 20399\n", "output": ["375018\n"]}, {"input": "2\n83160 2871\n", "output": ["89100\n"]}, {"input": "2\n3822 2042\n", "output": ["7910\n"]}, {"input": "5\n42322 147 17269 22062 20399\n", "output": ["284734\n"]}, {"input": "2\n57413 2443\n", "output": ["62301\n"]}, {"input": "5\n82514 240 17185 58616 3805\n", "output": ["388116\n"]}, {"input": "5\n99534 278 33935 58616 1780\n", "output": ["445307\n"]}, {"input": "5\n99534 151 27204 85241 4150\n", "output": ["543362\n"]}, {"input": "5\n99534 287 1127 58616 10100\n", "output": ["388497\n"]}, {"input": "5\n43041 151 27204 12835 10000\n", "output": ["226935\n"]}, {"input": "5\n99534 151 37520 13048 10100\n", "output": ["315270\n"]}, {"input": "5\n99534 151 37520 16767 11100\n", "output": ["335044\n"]}, {"input": "5\n87375 87 37520 19505 10100\n", "output": ["328773\n"]}, {"input": "5\n30546 25 74457 19505 10101\n", "output": ["382554\n"]}, {"input": "5\n4905 2 37520 19505 10101\n", "output": ["246058\n"]}, {"input": "5\n6731 114 37520 19505 10101\n", "output": ["248092\n"]}, {"input": "5\n80407 57 4731 2545 10100\n", "output": ["155536\n"]}, {"input": "5\n47612 47 3570 1504 10100\n", "output": ["115178\n"]}, {"input": "5\n49368 57 3570 33856 11101\n", "output": ["251433\n"]}, {"input": "5\n49368 57 3564 34542 10010\n", "output": ["249038\n"]}, {"input": "5\n93014 105 1389 29577 10100\n", "output": ["266247\n"]}, {"input": "5\n49368 23 816 7771 10110\n", "output": ["134352\n"]}, {"input": "5\n49368 8 816 8329 10101\n", "output": ["136525\n"]}, {"input": "5\n3 6 4 4 8\n", "output": ["135\n"]}, {"input": "5\n46756 59286 17269 18865 38821\n", "output": ["486736\n"]}, {"input": "5\n54883 11112 12907 84428 36812\n", "output": ["637646\n"]}, {"input": "5\n33608 20002 71521 41670 52727\n", "output": ["718520\n"]}, {"input": "5\n42107 19021 2640 84428 2563\n", "output": ["438644\n"]}, {"input": "5\n11997 59286 26328 84428 79925\n", "output": ["946940\n"]}, {"input": "5\n6 6 1 1 5\n", "output": ["82\n"]}, {"input": "5\n92694 1289 2325 84428 27581\n", "output": ["577892\n"]}, {"input": "5\n54883 20390 26666 52463 11349\n", "output": ["442282\n"]}, {"input": "2\n62932 1165\n", "output": ["65264\n"]}, {"input": "5\n7110 11471 14742 91222 87478\n", "output": ["876622\n"]}, {"input": "5\n10896 223 17269 52463 6753\n", "output": ["306792\n"]}, {"input": "2\n3822 409\n", "output": ["4642\n"]}, {"input": "5\n42322 147 17269 33420 20399\n", "output": ["330166\n"]}, {"input": "2\n57413 3595\n", "output": ["64605\n"]}, {"input": "5\n99534 278 33935 51005 1780\n", "output": ["414867\n"]}, {"input": "5\n99534 93 27204 85241 4150\n", "output": ["543254\n"]}, {"input": "5\n99534 287 1127 67249 10100\n", "output": ["423057\n"]}, {"input": "5\n43041 151 27204 9606 10000\n", "output": ["213427\n"]}], "task_id": "codecontest/6", "prompt": "Mr. Chanek possesses an array a of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nwhere \\gcd(x, y) means the greatest common divisor (GCD) of integers x and y.\n\nIn other words, the prettiness value of an array a is the complete sum. This sum is of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7! Consider optimizing your solution by reducing the number of GCD calculations needed.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "repair_prompt": ["Mr. Chanek possesses an array a of n integers. The prettiness value of a is denoted as:\n\n$$$\u2211_{i=1}^{n} {\u2211_{j=1}^{n} {\\gcd(a_i, a_j) \u22c5 \\gcd(i, j)}}$$$\n\nwhere \\gcd(x, y) means the greatest common divisor (GCD) of integers x and y.\n\nIn other words, the prettiness value of an array a is the complete sum. This sum is of \\gcd(a_i, a_j) \u22c5 \\gcd(i, j) for all pairs (i, j).\n\nHelp Mr. Chanek find the prettiness value of a, and output the result modulo 10^9 + 7! Consider optimizing your solution by reducing the number of GCD calculations needed.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(n: int, a: List[int]) -> List[List[int]]:\n    gcd_values = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            gcd_values[i][j] = math.gcd(a[i], a[j])\n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    gcd_values = precalculate_gcd_values(n, a)\n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[i][j] * math.gcd(i+1, j+1)\n            prettiness %= MOD\n    return prettiness\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(n: int, a: List[int]) -> List[List[int]]:\n    gcd_values = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            gcd_values[i][j] = math.gcd(a[i], a[j])\n    \n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    gcd_values = precalculate_gcd_values(n, a)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[i][j] * math.gcd(i+1, j+1)\n    \n    return prettiness % MOD\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(max_val: int) -> List[int]:\n    gcd_values = [0] * (max_val + 1)\n    for i in range(1, max_val + 1):\n        for j in range(i, max_val + 1, i):\n            gcd_values[j] = math.gcd(gcd_values[j], i)\n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    max_val = max(a)\n    gcd_values = precalculate_gcd_values(max_val)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[a[i]] * gcd_values[a[j]] * gcd_values[i+1] * gcd_values[j+1]\n            prettiness %= MOD\n    \n    return prettiness\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(max_val: int) -> List[int]:\n    gcd_values = [0] * (max_val + 1)\n    for i in range(1, max_val + 1):\n        for j in range(i, max_val + 1, i):\n            gcd_values[j] = math.gcd(gcd_values[j], i)\n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    max_val = max(a)\n    gcd_values = precalculate_gcd_values(max_val)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[a[i]] * gcd_values[a[j]] * gcd_values[i+1] * gcd_values[j+1]\n            prettiness %= MOD\n    \n    return prettiness\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    total_sum = 0\n    \n    # Calculate GCD values for all elements in the array\n    gcd_values = [0] * (max(a) + 1)\n    for num in a:\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                gcd_values[i] += 1\n                if i != num // i:\n                    gcd_values[num // i] += 1\n    \n    # Calculate prettiness value\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            total_sum += gcd_values[math.gcd(a[i-1], a[j-1])] * math.gcd(i, j)\n    \n    return total_sum % MOD\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(n: int, a: List[int]) -> List[List[int]]:\n    gcd_values = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            gcd_values[i][j] = math.gcd(a[i], a[j])\n    \n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    gcd_values = precalculate_gcd_values(n, a)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[i][j] * math.gcd(i+1, j+1)\n    \n    return prettiness % MOD\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(n: int, a: List[int]) -> List[List[int]]:\n    gcd_values = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            gcd_values[i][j] = math.gcd(a[i], a[j])\n    \n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    gcd_values = precalculate_gcd_values(n, a)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[i][j] * math.gcd(i+1, j+1)\n    \n    return prettiness % MOD\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\nprint(result)\n", "from typing import List\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(n: int, a: List[int]) -> List[List[int]]:\n    gcd_values = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            gcd_values[i][j] = math.gcd(a[i], a[j])\n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    gcd_values = precalculate_gcd_values(n, a)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[i][j] * math.gcd(i+1, j+1)\n    \n    return prettiness % MOD\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(max_val: int) -> List[int]:\n    gcd_values = [0] * (max_val + 1)\n    for i in range(1, max_val + 1):\n        for j in range(i, max_val + 1, i):\n            gcd_values[j] = math.gcd(gcd_values[j], i)\n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    max_val = max(a)\n    gcd_values = precalculate_gcd_values(max_val)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[a[i]] * gcd_values[a[j]] * gcd_values[i+1] * gcd_values[j+1]\n            prettiness %= MOD\n    \n    return prettiness\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef precalculate_gcd_values(n: int, a: List[int]) -> List[List[int]]:\n    gcd_values = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            gcd_values[i][j] = math.gcd(a[i], a[j])\n    \n    return gcd_values\n\ndef prettiness_value(n: int, a: List[int]) -> int:\n    MOD = 10**9 + 7\n    gcd_values = precalculate_gcd_values(n, a)\n    \n    prettiness = 0\n    for i in range(n):\n        for j in range(n):\n            prettiness += gcd_values[i][j] * math.gcd(i+1, j+1)\n    \n    return prettiness % MOD\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = prettiness_value(n, a)\n\n# Output interface\nprint(result)\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by reducing the number of GCD calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the math library in Python to efficiently calculate the greatest common divisor (GCD) and optimize the solution by precalculating GCD values to reduce the number of calculations needed.\n"], "scores": [], "pass_results": [true, false, true, false, true, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 88, "examples": "\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^5).\n\nOutput\n\nOutput an integer denoting the prettiness value of a modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n5\n3 6 2 1 4\n\n\nOutput\n\n\n77", "mutate_method": "expand_one2two", "parent_index": 68}
