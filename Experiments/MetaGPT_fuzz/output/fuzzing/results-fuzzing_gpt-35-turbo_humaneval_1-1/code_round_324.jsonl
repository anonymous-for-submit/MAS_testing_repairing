{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3. Every 3 consecutive letters in the string are distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": ["def check(is_happy):\n\tassert is_happy(\"vjbekznsr\") == True", "def check(is_happy):\n\tassert is_happy(\"adktufdnx\") == True", "def check(is_happy):\n\tassert is_happy(\"ekzerpbq\") == True", "def check(is_happy):\n\tassert is_happy(\"nkoeh\") == True", "def check(is_happy):\n\tassert is_happy(\"kjba\") == True", "def check(is_happy):\n\tassert is_happy(\"swh\") == True", "def check(is_happy):\n\tassert is_happy(\"ykq\") == True", "def check(is_happy):\n\tassert is_happy(\"mwi\") == True", "def check(is_happy):\n\tassert is_happy(\"dmseyemg\") == False", "def check(is_happy):\n\tassert is_happy(\"lmsegi\") == True", "def check(is_happy):\n\tassert is_happy(\"aa\") == False , \"aa\"", "def check(is_happy):\n\tassert is_happy(\"osfqkfsjs\") == False", "def check(is_happy):\n\tassert is_happy(\"pnglo\") == True", "def check(is_happy):\n\tassert is_happy(\"hne\") == True", "def check(is_happy):\n\tassert is_happy(\"ihhyzk\") == False", "def check(is_happy):\n\tassert is_happy(\"sda\") == True", "def check(is_happy):\n\tassert is_happy(\"hoijog\") == True", "def check(is_happy):\n\tassert is_happy(\"vskqbz\") == True", "def check(is_happy):\n\tassert is_happy(\"edbikgtricp\") == True", "def check(is_happy):\n\tassert is_happy(\"jllyluo\") == False", "def check(is_happy):\n\tassert is_happy(\"freva\") == True", "def check(is_happy):\n\tassert is_happy(\"gxts\") == True", "def check(is_happy):\n\tassert is_happy(\"yygnlyoas\") == False", "def check(is_happy):\n\tassert is_happy(\"cdlq\") == True", "def check(is_happy):\n\tassert is_happy(\"qylehtb\") == True", "def check(is_happy):\n\tassert is_happy(\"xpm\") == True", "def check(is_happy):\n\tassert is_happy(\"tcnk\") == True", "def check(is_happy):\n\tassert is_happy(\"p\") == False", "def check(is_happy):\n\tassert is_happy(\"tskgwrb\") == True", "def check(is_happy):\n\tassert is_happy(\"gnntvon\") == False", "def check(is_happy):\n\tassert is_happy(\"qwbjwaiu\") == True", "def check(is_happy):\n\tassert is_happy(\"pgmq\") == True", "def check(is_happy):\n\tassert is_happy(\"b\") == False", "def check(is_happy):\n\tassert is_happy(\"kjcceshvfwai\") == False", "def check(is_happy):\n\tassert is_happy(\"qmxibr\") == True", "def check(is_happy):\n\tassert is_happy(\"pzofkfvtw\") == False", "def check(is_happy):\n\tassert is_happy(\"cpbecycwj\") == False", "def check(is_happy):\n\tassert is_happy(\"ldi\") == True", "def check(is_happy):\n\tassert is_happy(\"ydkfa\") == True", "def check(is_happy):\n\tassert is_happy(\"s\") == False", "def check(is_happy):\n\tassert is_happy(\"xyy\") == False , \"xyy\"", "def check(is_happy):\n\tassert is_happy(\"aabb\") == False , \"aabb\"", "def check(is_happy):\n\tassert is_happy(\"ccnybors\") == False", "def check(is_happy):\n\tassert is_happy(\"cyqfh\") == True", "def check(is_happy):\n\tassert is_happy(\"v\") == False", "def check(is_happy):\n\tassert is_happy(\"pqftbntafqcl\") == True", "def check(is_happy):\n\tassert is_happy(\"abcd\") == True , \"abcd\"", "def check(is_happy):\n\tassert is_happy(\"imc\") == True", "def check(is_happy):\n\tassert is_happy(\"bldcxi\") == True", "def check(is_happy):\n\tassert is_happy(\"syvkwfj\") == True", "def check(is_happy):\n\tassert is_happy(\"mkbrgekb\") == True", "def check(is_happy):\n\tassert is_happy(\"asszruuw\") == False", "def check(is_happy):\n\tassert is_happy(\"xivc\") == True", "def check(is_happy):\n\tassert is_happy(\"eovqv\") == False", "def check(is_happy):\n\tassert is_happy(\"qcrtlo\") == True", "def check(is_happy):\n\tassert is_happy(\"khapsq\") == True", "def check(is_happy):\n\tassert is_happy(\"w\") == False", "def check(is_happy):\n\tassert is_happy(\"ryrr\") == False", "def check(is_happy):\n\tassert is_happy(\"adb\") == True , \"adb\"", "def check(is_happy):\n\tassert is_happy(\"mdg\") == True", "def check(is_happy):\n\tassert is_happy(\"f\") == False", "def check(is_happy):\n\tassert is_happy(\"vmxdsmtbksb\") == True", "def check(is_happy):\n\tassert is_happy(\"ajtrhb\") == True", "def check(is_happy):\n\tassert is_happy(\"hgfqilrj\") == True", "def check(is_happy):\n\tassert is_happy(\"wioqbm\") == True", "def check(is_happy):\n\tassert is_happy(\"lwpm\") == True", "def check(is_happy):\n\tassert is_happy(\"ishkix\") == True", "def check(is_happy):\n\tassert is_happy(\"uxgftzdyg\") == True", "def check(is_happy):\n\tassert is_happy(\"tgglbg\") == False", "def check(is_happy):\n\tassert is_happy(\"fyewnyygb\") == False", "def check(is_happy):\n\tassert is_happy(\"vsgjt\") == True", "def check(is_happy):\n\tassert is_happy(\"jsfnqiht\") == True", "def check(is_happy):\n\tassert is_happy(\"ujeo\") == True", "def check(is_happy):\n\tassert is_happy(\"znngeaumx\") == False", "def check(is_happy):\n\tassert is_happy(\"h\") == False", "def check(is_happy):\n\tassert is_happy(\"rjqhznla\") == True", "def check(is_happy):\n\tassert is_happy(\"mpiumqqx\") == False", "def check(is_happy):\n\tassert is_happy(\"a\") == False , \"a\"", "def check(is_happy):\n\tassert is_happy(\"vdxot\") == True", "def check(is_happy):\n\tassert is_happy(\"dyoywxi\") == False", "def check(is_happy):\n\tassert is_happy(\"gylbrpyqiuw\") == True", "def check(is_happy):\n\tassert is_happy(\"yauwdcsfcwr\") == True", "def check(is_happy):\n\tassert is_happy(\"xzyzwrab\") == False", "def check(is_happy):\n\tassert is_happy(\"bhkokspiry\") == False", "def check(is_happy):\n\tassert is_happy(\"ipjy\") == True", "def check(is_happy):\n\tassert is_happy(\"dpvxqd\") == True", "def check(is_happy):\n\tassert is_happy(\"mckptsntv\") == True", "def check(is_happy):\n\tassert is_happy(\"gitokkmmex\") == False", "def check(is_happy):\n\tassert is_happy(\"uimsvgvy\") == False", "def check(is_happy):\n\tassert is_happy(\"xckdiwjz\") == True", "def check(is_happy):\n\tassert is_happy(\"dktydg\") == True", "def check(is_happy):\n\tassert is_happy(\"jjzdrfcxx\") == False", "def check(is_happy):\n\tassert is_happy(\"rajomlaz\") == True", "def check(is_happy):\n\tassert is_happy(\"zrqkybwt\") == True", "def check(is_happy):\n\tassert is_happy(\"hcp\") == True", "def check(is_happy):\n\tassert is_happy(\"jgrvcizhi\") == True", "def check(is_happy):\n\tassert is_happy(\"d\") == False", "def check(is_happy):\n\tassert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "def check(is_happy):\n\tassert is_happy(\"y\") == False", "def check(is_happy):\n\tassert is_happy(\"lsm\") == True", "def check(is_happy):\n\tassert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "def check(is_happy):\n\tassert is_happy(\"n\") == False", "def check(is_happy):\n\tassert is_happy(\"ioruvha\") == True", "def check(is_happy):\n\tassert is_happy(\"hevkrepn\") == True", "def check(is_happy):\n\tassert is_happy(\"g\") == False", "def check(is_happy):\n\tassert is_happy(\"i\") == False", "def check(is_happy):\n\tassert is_happy(\"kxqis\") == True", "def check(is_happy):\n\tassert is_happy(\"xrc\") == True", "def check(is_happy):\n\tassert is_happy(\"qfychpkht\") == True", "def check(is_happy):\n\tassert is_happy(\"vorlwobo\") == False"], "test_case_list": ["assert is_happy(\"vjbekznsr\") == True", "assert is_happy(\"adktufdnx\") == True", "assert is_happy(\"ekzerpbq\") == True", "assert is_happy(\"nkoeh\") == True", "assert is_happy(\"kjba\") == True", "assert is_happy(\"swh\") == True", "assert is_happy(\"ykq\") == True", "assert is_happy(\"mwi\") == True", "assert is_happy(\"dmseyemg\") == False", "assert is_happy(\"lmsegi\") == True", "assert is_happy(\"aa\") == False , \"aa\"", "assert is_happy(\"osfqkfsjs\") == False", "assert is_happy(\"pnglo\") == True", "assert is_happy(\"hne\") == True", "assert is_happy(\"ihhyzk\") == False", "assert is_happy(\"sda\") == True", "assert is_happy(\"hoijog\") == True", "assert is_happy(\"vskqbz\") == True", "assert is_happy(\"edbikgtricp\") == True", "assert is_happy(\"jllyluo\") == False", "assert is_happy(\"freva\") == True", "assert is_happy(\"gxts\") == True", "assert is_happy(\"yygnlyoas\") == False", "assert is_happy(\"cdlq\") == True", "assert is_happy(\"qylehtb\") == True", "assert is_happy(\"xpm\") == True", "assert is_happy(\"tcnk\") == True", "assert is_happy(\"p\") == False", "assert is_happy(\"tskgwrb\") == True", "assert is_happy(\"gnntvon\") == False", "assert is_happy(\"qwbjwaiu\") == True", "assert is_happy(\"pgmq\") == True", "assert is_happy(\"b\") == False", "assert is_happy(\"kjcceshvfwai\") == False", "assert is_happy(\"qmxibr\") == True", "assert is_happy(\"pzofkfvtw\") == False", "assert is_happy(\"cpbecycwj\") == False", "assert is_happy(\"ldi\") == True", "assert is_happy(\"ydkfa\") == True", "assert is_happy(\"s\") == False", "assert is_happy(\"xyy\") == False , \"xyy\"", "assert is_happy(\"aabb\") == False , \"aabb\"", "assert is_happy(\"ccnybors\") == False", "assert is_happy(\"cyqfh\") == True", "assert is_happy(\"v\") == False", "assert is_happy(\"pqftbntafqcl\") == True", "assert is_happy(\"abcd\") == True , \"abcd\"", "assert is_happy(\"imc\") == True", "assert is_happy(\"bldcxi\") == True", "assert is_happy(\"syvkwfj\") == True", "assert is_happy(\"mkbrgekb\") == True", "assert is_happy(\"asszruuw\") == False", "assert is_happy(\"xivc\") == True", "assert is_happy(\"eovqv\") == False", "assert is_happy(\"qcrtlo\") == True", "assert is_happy(\"khapsq\") == True", "assert is_happy(\"w\") == False", "assert is_happy(\"ryrr\") == False", "assert is_happy(\"adb\") == True , \"adb\"", "assert is_happy(\"mdg\") == True", "assert is_happy(\"f\") == False", "assert is_happy(\"vmxdsmtbksb\") == True", "assert is_happy(\"ajtrhb\") == True", "assert is_happy(\"hgfqilrj\") == True", "assert is_happy(\"wioqbm\") == True", "assert is_happy(\"lwpm\") == True", "assert is_happy(\"ishkix\") == True", "assert is_happy(\"uxgftzdyg\") == True", "assert is_happy(\"tgglbg\") == False", "assert is_happy(\"fyewnyygb\") == False", "assert is_happy(\"vsgjt\") == True", "assert is_happy(\"jsfnqiht\") == True", "assert is_happy(\"ujeo\") == True", "assert is_happy(\"znngeaumx\") == False", "assert is_happy(\"h\") == False", "assert is_happy(\"rjqhznla\") == True", "assert is_happy(\"mpiumqqx\") == False", "assert is_happy(\"a\") == False , \"a\"", "assert is_happy(\"vdxot\") == True", "assert is_happy(\"dyoywxi\") == False", "assert is_happy(\"gylbrpyqiuw\") == True", "assert is_happy(\"yauwdcsfcwr\") == True", "assert is_happy(\"xzyzwrab\") == False", "assert is_happy(\"bhkokspiry\") == False", "assert is_happy(\"ipjy\") == True", "assert is_happy(\"dpvxqd\") == True", "assert is_happy(\"mckptsntv\") == True", "assert is_happy(\"gitokkmmex\") == False", "assert is_happy(\"uimsvgvy\") == False", "assert is_happy(\"xckdiwjz\") == True", "assert is_happy(\"dktydg\") == True", "assert is_happy(\"jjzdrfcxx\") == False", "assert is_happy(\"rajomlaz\") == True", "assert is_happy(\"zrqkybwt\") == True", "assert is_happy(\"hcp\") == True", "assert is_happy(\"jgrvcizhi\") == True", "assert is_happy(\"d\") == False", "assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "assert is_happy(\"y\") == False", "assert is_happy(\"lsm\") == True", "assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "assert is_happy(\"n\") == False", "assert is_happy(\"ioruvha\") == True", "assert is_happy(\"hevkrepn\") == True", "assert is_happy(\"g\") == False", "assert is_happy(\"i\") == False", "assert is_happy(\"kxqis\") == True", "assert is_happy(\"xrc\") == True", "assert is_happy(\"qfychpkht\") == True", "assert is_happy(\"vorlwobo\") == False"], "nl": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    ", "func": "def is_happy(s):", "examples": "For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    ", "completions": ["from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is 'happy' based on the defined criteria.\n\n    Args:\n        s (str): The input string to be checked\n\n    Returns:\n        bool: True if the string is 'happy', False otherwise\n    \"\"\"\n    # Check if the string is empty\n    if not s:\n        return False\n\n    # Initialize a set to store seen numbers\n    seen = set()\n\n    # Loop until the result is 1 or we encounter a cycle\n    while s != '1' and s not in seen:\n        seen.add(s)\n        s = sum(int(digit) ** 2 for digit in str(s))\n\n    return s == '1'\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is 'happy' based on the defined criteria.\n\n    Args:\n        s (str): The input string to be checked\n\n    Returns:\n        bool: True if the string is 'happy', False otherwise\n    \"\"\"\n    # Define the criteria for a 'happy' string\n    happy_criteria = ['h', 'a', 'p', 'p', 'y']\n\n    # Check if the input string matches the 'happy' criteria\n    if len(s) != len(happy_criteria):\n        return False\n\n    for i in range(len(s)):\n        if s[i] != happy_criteria[i]:\n            return False\n\n    return True\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2]:\n            return True\n    \n    return False\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a given string is happy based on the criteria.\n\n    Args:\n    - s: a string to be checked for happiness\n\n    Returns:\n    - bool: True if the string is happy, False otherwise\n    \"\"\"\n    \n    # Calculate the sum of squares of digits in the string\n    def calculate_sum_of_squares(num_str: str) -> int:\n        total = 0\n        for digit in num_str:\n            total += int(digit) ** 2\n        return total\n    \n    seen = set()  # Set to store seen sums\n    while True:\n        sum_squares = calculate_sum_of_squares(s)\n        if sum_squares == 1:\n            return True\n        elif sum_squares in seen:\n            return False\n        else:\n            seen.add(sum_squares)\n            s = str(sum_squares)\n\n# Test the function\nif __name__ == \"__main__\":\n    test_string = \"19\"\n    print(is_happy(test_string))  # Output: True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is happy based on the given criteria.\n\n    Args:\n        s (str): The input string to check for happiness\n\n    Returns:\n        bool: True if the string is happy, False otherwise\n    \"\"\"\n    def calculate_happiness(num: int) -> int:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit ** 2\n            num //= 10\n        return total\n\n    seen = set()\n    while s != '1' and s not in seen:\n        seen.add(s)\n        s = str(calculate_happiness(sum(int(digit) ** 2 for digit in s)))\n\n    return s == '1'\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the input string is happy.\n\n    Args:\n        s (str): The input string to check for happiness\n\n    Returns:\n        bool: True if the string is happy, False otherwise\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2]:\n            return True\n\n    return False\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy or not.\n    A string is happy if its length is at least 3. Every 3 consecutive letters in the string are distinct.\n    Args:\n        s (str): Input string\n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy based on defined criteria.\n    Args:\n        s (str): Input string to check\n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    # Define a set to store seen characters\n    seen = set()\n    \n    # Iterate through the string\n    while s != \"1\" and s not in seen:\n        seen.add(s)\n        total = 0\n        for char in s:\n            total += int(char) ** 2\n        s = str(total)\n    \n    return s == \"1\"\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is happy based on the given criteria.\n\n    Args:\n        s (str): The input string to be checked for happiness\n\n    Returns:\n        bool: True if the string is happy, False otherwise\n    \"\"\"\n    def calculate_happiness(num: int) -> int:\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit ** 2\n            num //= 10\n        return total\n\n    seen = set()\n    while s != '1' and s not in seen:\n        seen.add(s)\n        s = str(calculate_happiness(sum(int(digit) ** 2 for digit in s)))\n\n    return s == '1'\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the input string has all distinct 3-character substrings.\n\n    Args:\n    s: A string to check for distinct 3-character substrings.\n\n    Returns:\n    A boolean value indicating whether all 3-character substrings are distinct.\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    seen = set()\n    for i in range(len(s) - 2):\n        substring = s[i:i+3]\n        if substring in seen:\n            return False\n        seen.add(substring)\n\n    return True\n"], "plans": ["requirement pool:\n- Implement the core logic to check string 'happiness'\n- Handle cases where input string length is less than 3\n- Optimize the algorithm for better performance\nWe will design a simple static Python function to check if a string is 'happy' based on the defined criteria. We will use basic string manipulation techniques to efficiently handle the task.\n", "requirement analysis:\nThe function needs to efficiently determine if a given string meets the 'happy' criteria by checking for distinct 3-letter sequences.\nrequirement pool:\n- Implement the core logic to verify 'happiness' based on distinct 3-letter sequences\n- Handle cases where the input string length is less than 3\n- Optimize the algorithm for better performance\nWe will design a simple static Python function to check if a string is 'happy' based on the defined criteria without using any class. We will utilize basic string manipulation and comparison techniques to efficiently determine the 'happiness' of the input string.\n", "requirement pool:\n- Implement a function that efficiently checks string happiness based on given criteria\n- Ensure the function can handle various input lengths and characters\n- Optimize the function for performance to handle large strings efficiently\nWe will use a simple approach to iterate through the string and check for consecutive groups of 3 characters for distinctness.\n", "requirement pool:\n- Implement a function that checks string happiness based on given criteria\n- Ensure the function handles strings of minimum length 3\n- Optimize the function for performance and accuracy\nWe will design a simple static Python function using basic string manipulation techniques to check the happiness of a given string.\n", "requirement pool:\n- Implement a function that checks string happiness based on given criteria\n- Ensure the function handles strings of length less than 3 gracefully\n- Optimize the function for performance\nWe will design a simple static Python function to check if a string is happy based on the given criteria. We will use basic string manipulation techniques to efficiently determine the happiness of the string.\n", "requirement pool:\n- Implement a function that checks if a string is happy based on given criteria\n- Ensure the function handles strings of length less than 3 appropriately\n- Optimize the function for performance and efficiency\nWe will use a simple approach to iterate through the string and check every 3 consecutive characters for distinctness.\n", "requirement pool:\n- Implement the is_happy function to accurately check for 'happy' strings\n- Handle edge cases such as empty strings or strings with less than 3 characters\n- Optimize the algorithm to efficiently process large strings\nWe will design a simple static Python function to check if a string is 'happy' based on the defined criteria.\n", "requirement pool:\n- Implement the is_happy function to check string happiness\n- Ensure the function considers edge cases like empty strings\n- Optimize the function for performance without compromising accuracy\nWe will use a simple approach to iterate through the string and check for happy conditions without using any external libraries.\n", "requirement pool:\n- Implement a function that checks string happiness based on given criteria\n- Ensure the function handles strings of minimum length 3\n- Optimize the function for performance\nWe will design a simple static Python function to check if a string is happy based on the given criteria. We will use basic string manipulation techniques to efficiently determine the happiness of the input string.\n", "requirement pool:\n- Implement the core logic to check string happiness based on defined rules\n- Handle cases where input string length is less than 3\n- Ensure the function can process special characters and whitespace\nWe will use a simple approach to iterate through the string and check every 3 consecutive characters for distinctness.\n"], "scores": [0.0, 0.3727, 0.7818, 0.0, 0.0, 0.7818, 1.0, 0.0, 0.0, 0.7545], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [0, 41, 86, 0, 0, 86, 110, 0, 0, 83], "completion": "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the input string has all distinct 3-character substrings.\n\n    Args:\n    s: A string to check for distinct 3-character substrings.\n\n    Returns:\n    A boolean value indicating whether all 3-character substrings are distinct.\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    seen = set()\n    for i in range(len(s) - 2):\n        substring = s[i:i+3]\n        if substring in seen:\n            return False\n        seen.add(substring)\n\n    return True\n", "passed": true, "pass": true, "pass_num": 1, "round": 324, "repair_prompt": ["def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3. Every 3 consecutive letters in the string are distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''"], "mutate_method": "expand_one2two", "parent_index": 181}
