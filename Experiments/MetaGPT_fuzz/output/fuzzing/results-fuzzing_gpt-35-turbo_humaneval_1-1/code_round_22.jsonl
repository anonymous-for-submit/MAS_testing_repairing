{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n''' For a given number n, identify the largest divisor of n that is smaller than n.\n>>> largest_divisor(15)\n    5\n    '''", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": ["def check(largest_divisor):\n\tassert largest_divisor(47) == 1", "def check(largest_divisor):\n\tassert largest_divisor(98) == 49", "def check(largest_divisor):\n\tassert largest_divisor(104) == 52", "def check(largest_divisor):\n\tassert largest_divisor(51) == 17", "def check(largest_divisor):\n\tassert largest_divisor(10) == 5", "def check(largest_divisor):\n\tassert largest_divisor(53) == 1", "def check(largest_divisor):\n\tassert largest_divisor(3) == 1", "def check(largest_divisor):\n\tassert largest_divisor(95) == 19", "def check(largest_divisor):\n\tassert largest_divisor(44) == 22", "def check(largest_divisor):\n\tassert largest_divisor(8) == 4", "def check(largest_divisor):\n\tassert largest_divisor(4) == 2", "def check(largest_divisor):\n\tassert largest_divisor(103) == 1", "def check(largest_divisor):\n\tassert largest_divisor(11) == 1", "def check(largest_divisor):\n\tassert largest_divisor(46) == 23", "def check(largest_divisor):\n\tassert largest_divisor(49) == 7", "def check(largest_divisor):\n\tassert largest_divisor(13) == 1", "def check(largest_divisor):\n\tassert largest_divisor(14) == 7", "def check(largest_divisor):\n\tassert largest_divisor(54) == 27", "def check(largest_divisor):\n\tassert largest_divisor(99) == 33", "def check(largest_divisor):\n\tassert largest_divisor(45) == 15", "def check(largest_divisor):\n\tassert largest_divisor(9) == 3", "def check(largest_divisor):\n\tassert largest_divisor(7) == 1", "def check(largest_divisor):\n\tassert largest_divisor(100) == 50", "def check(largest_divisor):\n\tassert largest_divisor(6) == 3", "def check(largest_divisor):\n\tassert largest_divisor(48) == 24", "def check(largest_divisor):\n\tassert largest_divisor(15) == 5", "def check(largest_divisor):\n\tassert largest_divisor(101) == 1", "def check(largest_divisor):\n\tassert largest_divisor(97) == 1", "def check(largest_divisor):\n\tassert largest_divisor(12) == 6", "def check(largest_divisor):\n\tassert largest_divisor(105) == 35", "def check(largest_divisor):\n\tassert largest_divisor(5) == 1", "def check(largest_divisor):\n\tassert largest_divisor(2) == 1", "def check(largest_divisor):\n\tassert largest_divisor(102) == 51"], "test_case_list": ["assert largest_divisor(47) == 1", "assert largest_divisor(98) == 49", "assert largest_divisor(104) == 52", "assert largest_divisor(51) == 17", "assert largest_divisor(10) == 5", "assert largest_divisor(53) == 1", "assert largest_divisor(3) == 1", "assert largest_divisor(95) == 19", "assert largest_divisor(44) == 22", "assert largest_divisor(8) == 4", "assert largest_divisor(4) == 2", "assert largest_divisor(103) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(46) == 23", "assert largest_divisor(49) == 7", "assert largest_divisor(13) == 1", "assert largest_divisor(14) == 7", "assert largest_divisor(54) == 27", "assert largest_divisor(99) == 33", "assert largest_divisor(45) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(7) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(6) == 3", "assert largest_divisor(48) == 24", "assert largest_divisor(15) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(97) == 1", "assert largest_divisor(12) == 6", "assert largest_divisor(105) == 35", "assert largest_divisor(5) == 1", "assert largest_divisor(2) == 1", "assert largest_divisor(102) == 51"], "nl": " For a given number n, find the largest number that divides n evenly, smaller than n\n    ", "func": "def largest_divisor(n: int) -> int:", "examples": ">>> largest_divisor(15)\n    5\n    ", "completions": ["from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    Args:\n        n (int): The input number\n    Returns:\n        int: The largest divisor of n that is smaller than n\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    >>> largest_divisor(15)\n    5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    This function returns the largest divisor smaller than the input number.\n    \n    Args:\n        n: An integer input number\n    \n    Returns:\n        int: The largest divisor of the input number that is smaller than the input number\n    \"\"\"\n    largest_div = 1\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            largest_div = i\n    return largest_div\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        int: The largest divisor of n that is smaller than n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    >>> largest_divisor(15)\n    5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    Args:\n        n (int): The input number\n    Returns:\n        int: The largest divisor of n that is smaller than n\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    >>> largest_divisor(15)\n    5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    Args:\n        n: An integer input number\n    \n    Returns:\n        int: The largest divisor of n that is smaller than n\n    '''\n    \n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    \n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    Args:\n        n: An integer input number\n    \n    Returns:\n        int: The largest divisor of n that is smaller than n\n    '''\n    \n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    \n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of n that is smaller than n\n    '''\n    \n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    \n    return largest\n"], "plans": ["requirement pool:\n- Efficiently identify the largest divisor\n- Ensure the identified divisor is smaller than the input number\n- Optimize the algorithm for performance\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify the largest divisor of a given number that is smaller than the input number.\n", "requirement pool:\n- Efficiently identify the largest divisor smaller than the input number\n- Handle edge cases such as prime numbers or 1\n- Ensure the function is well-documented for easy understanding\nWe will design a simple Python function using basic arithmetic operations to efficiently identify the largest divisor smaller than the input number.\n", "requirement pool:\n- Efficiently identify the largest divisor smaller than the input number\n- Ensure the function handles edge cases like prime numbers\n- Optimize the algorithm for large input numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify the largest divisor smaller than the input number.\n", "requirement analysis:\nThe function should efficiently determine the largest divisor of a given number by iterating from 1 to n-1 and checking divisibility.\nrequirement pool:\n- Implement the core logic to find the largest divisor efficiently\n- Handle edge cases such as prime numbers where the largest divisor is 1\n- Optimize the algorithm for better performance on large numbers\nWe will design a simple Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently identify the largest divisor\n- Ensure the divisor is smaller than the input number\n- Optimize the algorithm for performance\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently identify the largest divisor less than the input number\n- Ensure the algorithm is optimized for performance\n- Handle edge cases and invalid inputs gracefully\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify the largest divisor of a given number that is smaller than the input number.\n", "requirement pool:\n- Efficiently identify the largest divisor smaller than the input number\n- Ensure the function handles edge cases like prime numbers\n- Optimize the algorithm for large input numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify the largest divisor smaller than the input number.\n", "requirement pool:\n- Efficiently identify the largest divisor smaller than the input number\n- Ensure the algorithm is optimized for performance\n- Handle edge cases and invalid inputs gracefully\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify the largest divisor smaller than the input number.\n", "requirement pool:\n- Efficiently identify the largest divisor smaller than the input number\n- Handle edge cases like prime numbers or 1 as input\n- Ensure the algorithm is scalable for large numbers\nWe will design a static Python function using basic arithmetic operations to efficiently identify the largest divisor smaller than the input number.\n", "requirement pool:\n- Efficiently identify the largest divisor\n- Ensure the identified divisor is smaller than the input number\n- Optimize the algorithm for performance\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify the largest divisor of a given number.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33], "completion": "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest divisor of n that is smaller than n.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of n that is smaller than n\n    '''\n    \n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    \n    return largest\n", "passed": true, "pass": true, "pass_num": 10, "round": 22, "repair_prompt": ["def largest_divisor(n: int) -> int:\t\n''' For a given number n, identify the largest divisor of n that is smaller than n.\n>>> largest_divisor(15)\n    5\n    '''"], "mutate_method": "rephrase_one", "parent_index": 22}
