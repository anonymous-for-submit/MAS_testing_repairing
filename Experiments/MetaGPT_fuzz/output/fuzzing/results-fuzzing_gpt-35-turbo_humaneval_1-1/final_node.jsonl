{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/66", "prompt": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/78", "prompt": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/80", "prompt": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/82", "prompt": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/85", "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/89", "prompt": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/99", "prompt": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/106", "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/121", "prompt": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/126", "prompt": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/131", "prompt": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold. Consider edge cases where the list is empty or contains only one element.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing multiple groups of nested parentheses. Your task is to identify the separate groups of nested parentheses. Your goal is to separate those group into separate strings and return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero, returning True if it does; otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is calculated by finding the mean of the absolute differences between each value and the centerpoint (mean in this case): MAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/5", "prompt": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\t\n'''Insert a number 'delimeter' between every two consecutive elements of input list `numbers'. Ensure that the insertion does not modify the original order of the elements beyond adding the delimiters.\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For every group present, you need to determine the deepest level of nesting. This output will display the maximum level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring\n\nDescription:\nWrite a function that takes a list of strings and a substring as input and returns a new list containing only the strings from the original list that contain the given substring. Each string should be checked to ensure that it includes the specified substring anywhere within it. Ensure that the search for the substring is case-sensitive.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. If there are no elements in the list, the sum should be equal to 0. The empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes from shortest to longest of the input string. Ensure that the input string is not empty before processing.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/10", "prompt": "def make_palindrome(string: str) -> str:\t\n''' Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    Consider edge cases where the supplied string is empty or already a palindrome.\n>>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. If there are multiple strings that have the same length, return the first one among them. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/15", "prompt": "def string_sequence(n: int) -> str:\t\n'''Return a string that includes numbers separated by spaces, starting from 0 and going up to n, inclusive.\n>>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters (regardless of case) does it consist of.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n''' Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    Assume the input string is correctly formatted with no syntax errors.\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/18", "prompt": "def how_many_times(string: str, substring: str) -> int:\t\n'''Determine the number of occurrences where a specified substring appears within the original string. Count overlapping occurrences.\n>>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/19", "prompt": "def sort_numbers(numbers: str) -> str:\t\n'''Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    The output string should maintain the space-delimited format of the input.\n>>> sort_numbers('three one five')\n    'one three five'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a supplied list of numbers (of length at least two), select and return two that are the closest to each other. The two selected numbers should be returned in order. Specifically, they should be returned with the smaller number first, followed by the larger number.\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1. Ensure that all numbers in the list are correctly mapped between 0 and 1, maintaining their relative positions.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter the given list of Python values to include only integers.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''\nReturn length of given string. Calculate the number of characters in the given string. This should include spaces and punctuation marks.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n''' For a given number n, identify the largest divisor of n that is smaller than n.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization, and the input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/26", "prompt": "def remove_duplicates(numbers: List[int]) -> List[int]:\t\n'''From a list of integers, remove all elements that occur more than once, keeping the order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Flip the lowercase characters of the string to uppercase. Convert the uppercase characters of the string to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string. You are given a list of strings. Your task is to combine these strings into one single string. Make sure to preserve the order of the strings as given in the list.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that start with a given prefix. Ensure the solution is efficient for large input lists.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return solely the numbers greater than zero from the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/31", "prompt": "def is_prime(n):\t\n'''Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/34", "prompt": "def unique(l: list):\t\n'''Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. An element is a fundamental data unit in the list. The maximum element is the one with the highest value.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/39", "prompt": "def prime_fib(n: int):\t\n'''prime_fib produces the n-th number that is both a Fibonacci number and a prime.\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''triples_sum_to_zero accepts a list of whole numbers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/42", "prompt": "def incr_list(l: list):\t\n'''Return list with elements incremented by 1. Ensure that the input list maintains its original order while performing the increment operation.\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/46", "prompt": "def fib4(n: int):\t\n'''The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece. It is defined as follows: \n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n>>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Ensure that your solution handles both odd and even numbers of elements effectively.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if the given string is a palindrome.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Ensure that your implementation efficiently handles large values of n and p to avoid performance issues.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes string. The function processes the string to return it without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if all numbers in the list l are below threshold t. Make sure to handle edge cases where the list might be empty.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\t\n'''Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number. Ensure that your solution efficiently handles large inputs.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements follow a monotonic increase or decrease pattern.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements that are found in two lists. These elements should be unique. Each one should also be shared between both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/59", "prompt": "def largest_prime_factor(n: int):\t\n'''Return the largest prime factor of n. Assume n is greater than 1. It is not a prime.\n>>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that adds up numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial. Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence. Consider edge cases where n is a small number.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/65", "prompt": "def circular_shift(x, shift):\t\n'''Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    Ensure to handle both positive and negative integer inputs effectively.\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task\n    Create a function that receives a string as input and calculates the total of the ASCII codes for only the uppercase characters.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/67", "prompt": "def fruit_distribution(s,n):\t\n'''In this task, you will receive a string that indicates the quantity of apples and oranges that are spread in a basket of fruit; this basket holds apples, oranges, and mango fruits. Given the string that represents the total number of the oranges and apples and an integer that represent the total number of the fruits in the basket return the number of the mango fruits in the basket. for examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The node to be plucked should be the one with the smallest even number. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1. Ensure to consider edge cases where the list might contain only one unique integer.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    Ensure your solution handles lists of varying lengths efficiently.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side. This means that for any given triangle with sides a, b, and c, the condition a + b > c, b + c > a, and a + c > b must be satisfied. If any of these conditions are not met, the sides do not form a valid triangle.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function to determine if object q will fly, returning True if it does and False if it doesn't. The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards, and in one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. In the function, you will compare the combined length of all the strings in the lists. The list with the smaller total length will be returned.\n\nif the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been given the task to create a function that takes a string representing a hexadecimal number and calculates the count of hexadecimal digits that are prime numbers (a prime number, or a prime, is a natural number greater than 1 that cannot be expressed as the product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/79", "prompt": "def decimal_to_binary(decimal):\t\n'''You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Make sure to handle negative numbers appropriately by using two's complement representation.\nExamples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    Make sure to consider both uppercase and lowercase letters in the string for your check.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/81", "prompt": "def numerical_letter_grade(grades):\t\n'''It is the last week of the semester and the teacher has to give the grades to students. The teacher has been creating her own grading algorithm. The only problem is, she has lost the code she used for grading. She has given you a list of GPAs for some students and you have to write a function that can output a list of letter grades using the following table: \n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. Consider edge cases like lists that only contain odd numbers or very short lists.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2-dimensional data structure in the form of nested lists, akin to a matrix, but each row can have a varying number of columns. Given lst and an integer x, locate the integers x within the list and return a list of tuples, [(x1, y1), (x2, y2) ...] where each tuple represents a coordinate - (row, columns), beginning with 0. Sort the coordinates first by rows in increasing order. Additionally, sort the row's coordinates by columns in decreasing order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/89", "prompt": "def encrypt(s):\t\n'''Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places. Ensure that non-letter characters remain unchanged during the encryption process.\nFor example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''You are given a list of integers.  \nCreate a function\nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. You need to ensure that these numbers are correctly passed as arguments to the function. Proper checking should be done within the function to handle them correctly. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/95", "prompt": "def check_dict_case(dict):\t\n'''Given a dictionary, return True if all keys are strings in lower case or all keys are strings in upper case, else return False. If all of the keys are in lower case, return True. If every key is in upper case, then return True. The function should return False is the given dictionary is empty.\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes a non-negative integer. The function should perform a specific task and return a meaningful result. It returns an array of the first n integers that are prime numbers and less than n.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns the product of their unit digits. Assume that the input is always valid. You can rely on the fact that the input will not contain any erroneous values.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''    Given a string s, count the number of uppercase vowels in even indices. Consider how you can optimize the checking of indices to improve performance.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/99", "prompt": "def closest_integer(value):\t\n'''Create a function that takes a value (string) representing a number and returns the closest integer to it, rounding away from zero if the number is equidistant from two integers.\nExamples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''You will be given a string of words separated by commas or spaces, and your task is to split the string into words and return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/103", "prompt": "def rounded_avg(n, m):\t\n'''You are given two positive integers n and m, and your task is to compute the average of the integers from n to m, including both n and m. Round the answer to the nearest integer and convert that to binary. If n is greater than m, return -1.\nExample:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/105", "prompt": "def by_length(arr):\t\n'''    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    Ensure that the original order of integers outside the range remains unaffected.\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n. The value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. The factorial of i is calculated as the multiplication of the numbers from 1 up to i. The multiplication continues from 1 up to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a pair that contains the number of even and odd integer palindromes that fall within the range(1, n), inclusive.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/109", "prompt": "def move_one_ball(arr):\t\n'''We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    The challenge is to find an algorithm with a time complexity better than O(N^2).\nFor Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Ensure the solution is optimized for large input sizes.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Consider handling edge cases where the array may contain all negative numbers.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/116", "prompt": "def sort_array(arr):\t\n'''\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    Consider edge cases such as an empty array or an array with one element.\n\n    It must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/120", "prompt": "def maximum(arr, k):\t\n'''Given an array arr of integers and a positive integer k, return a sorted list of length k with the maximum k numbers in arr.\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the total of the odd numbers present at even indices.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the total of the values having no more than two digits from the initial k items of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n, and then each term is obtained from the previous term; if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/126", "prompt": "def is_sorted(lst):\t\n'''Given a list of numbers, return whether or not they are sorted in ascending order. If list contains more than 1 duplicate of the same number, return False. Return False if there's any number that appears more than once. Assume no negative numbers and only integers.\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/131", "prompt": "def digits(n):\t\n'''Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even.\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/134", "prompt": "def check_if_last_char_is_a_letter(txt):\t\n'''Create a function that returns True if the last character of a given string is an alphabetical character and is not a part of a word, and False otherwise. Note: \"word\" is a group of characters separated by space.\nExamples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly four positive even numbers. You need to check if there are four positive even numbers whose sum equals n. Your task is to determine and report if such a combination is possible.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/139", "prompt": "def special_factorial(n):\t\n'''The Brazilian factorial is defined as:  \nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!  \nwhere n is greater than 0.\nFor example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains several words separated by spaces, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n and return True if x * n evaluates to a whole number and False otherwise. Both x and n are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/146", "prompt": "def specialFilter(nums):\t\n'''Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9). Ensure the function handles edge cases such as empty arrays or arrays with non-number elements gracefully.\nFor example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun, or an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order, and you may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that sensation when the outcome of a long-awaited event is finally revealed. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You have two arrays of scores and guesses of equal length, where each index indicates a match. Return an array of the same length showing how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer, return a tuple that has the number of even and odd digits respectively. Ensure to handle negative integers by considering only their absolute values.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/156", "prompt": "def int_to_mini_roman(number):\t\n'''Given a positive integer, obtain its roman numeral equivalent as a string, and return it in lowercase. Ensure your solution is efficient and handles edge cases appropriately. Restrictions: 1 <= num <= 1000\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle where one angle measures exactly 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that accepts a list of strings. The list contains different words; return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/159", "prompt": "def eat(number, need, remaining):\t\n'''You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to consume more carrots to complete the day's meals. you should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. Ensure to validate the inputs for compatibility and proper length before performing evaluations.\n\nThe basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. If the sides do not form a valid triangle, the function should return -1. Three sides make a valid triangle when the sum of any two sides is greater than the third side.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs symbolize the coefficients of a polynomial.  \nxs[0] + xs[1] * x + xs[2] * x^2 + ....  \nReturn derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/101", "prompt": "def words_string(s):\t\n'''\nYou will be given a string of words separated by commas or spaces. Your task is to split the string into words so that they can be individually identified. Then, you need to return an array of the words.\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/10", "prompt": "def make_palindrome(string: str) -> str:\t\n'''Find the shortest palindrome that begins with a supplied string.  \nAlgorithm idea is straightforward:  \n- Identify the longest suffix of the provided string that is a palindrome.  \n- Add to the end of the string the reverse of a string prefix that is before the palindromic suffix.  \n>>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/1", "prompt": "def separate_paren_groups(paren_string: str) -> List[str]:\t\n'''Input to this function is a string containing multiple groups of nested parentheses. Your goal is to separate those group into separate strings. Return the list of those. Separate groups are balanced (each open brace is properly closed) and not nested within each other Ignore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/5", "prompt": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\t\n'''Insert a number 'delimeter' between every two consecutive elements of input list `numbers'. Make sure that the 'delimeter' is placed between all elements in the list. This ensures that the list will have an additional element after each original element, in the form of the 'delimeter'.\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one; return the first one in case of multiple strings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the indices that are not divisible by three. Its values at the indices that are divisible by three are equal to the values of the corresponding indices of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/139", "prompt": "def special_factorial(n):\t\n'''The Brazilian factorial is defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!, where n must be greater than 0.\nFor example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. return a tuple that contains the number of even digits, and the number of odd digits respectively. Count how many digits of the integer are even and how many are odd, and ensure the output is a tuple reflecting this count.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers less than n.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ), Subtraction ( - ), Multiplication ( * ), Floor division ( // ), Exponentiation ( ** ).\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will take flight if it's both a palindromic sequence and the total of its elements does not exceed the highest permissible weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes, your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value, and if multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/34", "prompt": "def unique(l: list):\t\n'''Return sorted unique elements in a list\n\nWrite a function `unique_sorted_list(input_list)` that takes a list of integers `input_list` and returns a new list containing the distinct integers from `input_list`, sorted in ascending order. The input list may contain duplicates, but the output list should not. \n\nFor example: \n\n- `unique_sorted_list([3, 1, 2, 3, 1, 5, 5])` should return `[1, 2, 3, 5]`\n- `unique_sorted_list([10, 9, 8, 7, 7, 8])` should return `[7, 8, 9, 10]`\n- `unique_sorted_list([])` should return `[]`\n\nThe function should have a time complexity of O(n log n) due to sorting.\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that accepts a list of strings. The list contains different words and you should return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will leave unchanged the entries in the list that have indexes which are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Calculate the length of the provided string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given a list of numbers (of at least two elements), transform it linearly so that the smallest number will become 0 and the largest will become 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself, where the frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes. List should be from shortest to longest of the input string.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other. Examine whether the difference between any two numbers is less than the given threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Ensure that your solution handles large values of n efficiently.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats each note lasts. Here is a legend: 'o' - whole note, lasts four beats, 'o|' - half note, lasts two beats, '.|' - quater note, lasts one beat.\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. At that point the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We have two strings, s and c, and your task is to remove all characters from s that match any characters in c, \n    then verify if the resulting string is a palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Find the middle value in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the largest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\t\n'''Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n''' For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Make sure to handle special characters gracefully without altering them.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order.  \nStrange sorting means you begin with the smallest number, followed by the largest from the remaining integers, alternating between minimum and maximum subsequently.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0, fibfib(1) == 0, fibfib(2) == 1, and fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''Given a string s, count the number of uppercase vowels in even indices.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/159", "prompt": "def eat(number, need, remaining):\t\n'''You're a hungry rabbit, and you already have eaten a certain number of carrots. You are famished because a certain number of carrots have already been eaten by you. But now you need to eat more carrots to complete the day's meals. You should return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ] if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n. Make sure to handle edge cases such as when n is zero or negative.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n''' Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    Ensure your solution efficiently handles large input strings within optimal time complexity.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, while prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A, B, C, D, E, F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''\n    You are given a list of integers. The list contains several whole numbers. They can be positive, negative, or zero. \n    Write a function\nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/146", "prompt": "def specialFilter(nums):\t\n'''Write a function that takes an array of numbers as input and returns the number of elements in the array. These elements should be greater than 10 and must have both the first and last digits of a number being odd (1, 3, 5, 7, 9).\nFor example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written. Determine if n can be expressed as the sum of exactly 4 positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/18", "prompt": "def how_many_times(string: str, substring: str) -> int:\t\n'''Find how many times a given substring can be found in the original string by counting overlapping cases.\n>>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns the product of their unit digits. Assume that you are given valid input every time. The input is always valid in this scenario.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes string and returns string without vowels. Ensure the function handles both uppercase and lowercase vowels efficiently.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task Write a function that takes a string as input and returns the sum of the ASCII codes of the uppercase characters only.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a sequence consisting of the characters \"(\" and \")\". \n    return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization, and the input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1. the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i). Ensure that the function handles cases where n is zero or negative appropriately, returning an empty list in such scenarios.\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring. Make sure the function is efficient and handles edge cases gracefully.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if the given string is a palindrome.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/99", "prompt": "def closest_integer(value):\t\n'''Create a function that receives a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero.\nExamples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. The function should return a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2. These planets should be sorted by their proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a specified list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should equal 0 and empty product should equal 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    Consider edge cases where the list could be empty or contain strings of zero length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''    \n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Consider edge cases where the numbers are negative or zero.\n    \nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\nEnsure that the solution efficiently handles large input sizes by optimizing both time and space complexity considerations.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. If the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is a right angle. A right angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    Ensure that the function efficiently handles lists of varying lengths without excessive computation time.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list. The list should contain the rolling maximum element found until the given moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n'''Filter an input list of strings to include only those that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\n\nAssume the input is always a valid positive integer.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array. It is read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/131", "prompt": "def digits(n):\t\n'''Given a positive integer n, return the product of the odd digits. Return 0 if all digits are even. Ensure your solution handles edge cases where n is a single-digit number.\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists. This is similar to a matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Make sure to consider both single-digit and multi-digit numbers in your solution.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum achievable sum from any non-empty sub-array of nums. A non-empty sub-array means that it contains at least one element from the original array.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/109", "prompt": "def move_one_ball(arr):\t\n'''We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The numbers in the array will be randomly ordered. Your task is to determine if it is possible to get an array sorted in non-decreasing order. This can be achieved by performing the following operation on the given array: You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one position in the right direction. The last element of the array will be moved to the starting position in the array. This means moving to the 0th index.\n\nIf it is possible to obtain the sorted array by performing the above operation then return True else return False. If the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\nFor Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if the list elements are monotonically increasing or decreasing. Monotonically increasing means each element is greater than or equal to the one before it. Monotonically decreasing implies each element is less than or equal to the one before it.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence includes a few words divided by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/156", "prompt": "def int_to_mini_roman(number):\t\n'''Given a positive integer, acquire its roman numeral equivalent as a string, and return it in lowercase. Restrictions: 1 <= num <= 1000\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known, and the feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. You need to add the even elements that are at odd indices, and calculate their sum. Make sure to only consider elements positioned at odd indices for this operation.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/121", "prompt": "def solution(lst):\t\n'''Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions. Ensure that your solution efficiently handles large input sizes.\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/75", "prompt": "def is_multiply_prime(a):\t\n'''Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is less than 100. Ensure that the function efficiently checks for prime numbers and handles edge cases where the multiplication might not yield a number less than 100.\nExample:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/82", "prompt": "def prime_length(string):\t\n'''Write a function that takes a string and returns True if the string length is a prime number or False otherwise. Ensure your solution efficiently handles strings of varying lengths.\nExamples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/83", "prompt": "def starts_one_ends(n):\t\n'''Given a positive integer n, return the count of the numbers of n-digit positive integers that start or end with 1. Ensure to consider edge cases where n is equal to 1.\n'''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    If no such elements exist, return an empty list.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers. The tuple also contains 'b', which is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A straightforward program should return the value of x if n is a prime number and should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/162", "prompt": "def string_to_md5(text):\t\n'''Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return null.\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/5", "prompt": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\t\n'''Insert a number 'delimiter' between every two consecutive elements of input list `numbers'. The delimiter is intended to act as a separator. It helps in differentiating each element clearly from its neighboring elements.\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1, as a valid triangle is formed when the sum of any two sides is greater than the third side.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs denote the coefficients of a polynomial.  \n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value. After starting with the minimum value, you then proceed to select the maximum of the remaining integers. Then maximum of the remaining integers, then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function takes a list l and returns a list l' such that\n    l' is exactly the same as l in the positions that aren't divisible by three, while its values at the positions that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/72", "prompt": "def will_it_fly(q,w):\t\n'''Write a function that returns True if the object q will fly, and False otherwise. The object q will fly if it's balanced (it is a list that reads the same forwards and backwards) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nConsider edge cases where one or both lists are empty.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of a list of strings, give back the longest string. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters are present in it. They must be counted regardless of case.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/162", "prompt": "def string_to_md5(text):\t\n'''Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, then return None. This means that the function should handle empty strings by not performing the hashing and instead outputting a None value.\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order. Optimize the function for efficiency and clarity.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/139", "prompt": "def special_factorial(n):\t\n'''The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\nWrite a function to compute the Brazilian factorial for a given integer n.\nFor example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''\n    You are given a list of integers.\n    Write a function that computes the sum of all the even numbers in the list.\nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. It returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. Return a tuple. A tuple is a data structure that can hold multiple elements. It should have the number of even and odd digits respectively.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list consists of fundamental algebraic operations, and the second list is a compilation of integers. Use the two given lists to construct the algebraic expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Consider edge cases such as empty strings or characters that are not present.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to select and return one of the nodes. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings. It is never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Remember that the result should be computed efficiently to handle large values of n.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Find the middle value of the items in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that accepts a list of strings.\n    The list includes various words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1. It is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''You are provided with a list consisting of integers. Write a function\nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/131", "prompt": "def digits(n):\t\n'''Given a positive integer n, return the product of the odd digits. Return 0 in the case where every digit is even.\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string that contains multiple groups for nested parentheses divided by spaces. For each group, output the deepest level of nesting of parentheses. For example, (()()) exhibits a maximum of two levels of nesting, whereas ((())) demonstrates three levels.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You are given two separate lists as input, and you need to identify the common elements shared between them. Once you find these common elements, filter out any duplicates to ensure that each element appears only once. After eliminating duplicates, sort the remaining elements in ascending order to produce a final list that is both sorted and unique.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes string and returns string without vowels. Ensure that the function handles both uppercase and lowercase vowels correctly.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given a list of numbers (with a minimum of two elements), apply a linear transformation to that list, such that the smallest number changes to 0 and the largest will change to 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. It maintains the same sequence of elements when read from left to right. Similarly, it retains the same sequence when read from right to left. In one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle, return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle; otherwise return -1. Three sides make a valid triangle when the sum of any two sides is greater than the third side.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter a given list of strings to include only ones that have a particular substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes from shortest to longest of the input string.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0, fibfib(1) == 0, fibfib(2) == 1, and fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. Convert uppercase to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/139", "prompt": "def special_factorial(n):\t\n'''The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\nYour task is to implement a function that calculates the Brazilian factorial for a given positive integer.\nFor example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to identify if the account balance dips below zero at any time, and at such an instance the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last. Here is a legend: 'o' - whole note, lasts four beats; 'o|' - half note, lasts two beats; '.|' - quater note, lasts one beat.\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closerst to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2 and returns a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number. Ensure that your solution has optimal time complexity by using dynamic programming or memoization techniques.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/5", "prompt": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\t\n'''Insert a number 'delimiter' between every two consecutive elements of input list `numbers'. Make sure to handle lists with different data types appropriately.\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 while empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return only positive numbers from the given list. Focus on identifying numbers that are greater than zero. Ensure that no negative numbers are included in the final output.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\t\n'''Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that calculates the total of numbers ranging from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found up until a given moment in the sequence. It is important to monitor each element as it is processed. As each element is considered, determine the maximum value encountered so far.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. i starts from 1, and the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Consider optimizing the function for performance when dealing with very large integers.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/146", "prompt": "def specialFilter(nums):\t\n'''Write a function that accepts an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/99", "prompt": "def closest_integer(value):\t\n'''Create a function that takes a value (string) representing a number and returns the closest integer to it. If the number is equidistant from two integers, round it away from zero. Ensure the function handles both positive and negative numbers correctly.\nExamples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle. In this type of triangle, one angle is a right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies. The values at the even indicies are equal to the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number). Ensure that the numbers returned are part of the original list.\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''Given a string s, count the number of uppercase vowels that occur at even indices. You are required to consider only those vowels which appear in uppercase form. Identify each vowel at an even position and ensure it is in uppercase to include it in the count.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string. You are given a list of strings as input. Your task is to join them together. The goal is to combine them into one continuous string.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple with the count of even and odd integer palindromes that lie in the range(1, n), inclusive.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". Return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/156", "prompt": "def int_to_mini_roman(number):\t\n'''Given a positive integer, obtain its roman numeral equivalent as a string and return it in lowercase. Restrictions: 1 <= num <= 1000\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean | Ensure that the implementation handles edge cases where the input list is empty or contains non-numeric values appropriately.\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix, though each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order, and also sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task\n    Write a function that accepts a string as a parameter and returns the total of only the uppercase characters' ASCII values.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial, xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n'''Filter a list of input strings solely for those that begin with a specified prefix.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are either consistently going up or consistently going down.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. The function should be able to process these numbers effectively. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n and each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term; if the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is [1].\n    2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    Ensure that the arrays are non-empty and contain only integers.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains some words. Each word in the sentence is separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. If there are multiple strings of the same length, return the first one. In case the input list is empty, return None.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, determine the least possible sum of a non-empty sub-array within nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that takes in two lists of strings and returns the list where the sum of characters in all its strings is less than the other list. \n\nif the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. Do not use any built-in functions that directly solve the problem.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You have a non-empty array of positive numbers. Return the largest number greater than zero with a count greater than or equal to its own value. The frequency of an integer is the number of times it appears in the list. If there's no such number, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/75", "prompt": "def is_multiply_prime(a):\t\n'''Write a function that returns true if the given number is the product of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.\nExample:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \n    Ensure that your solution efficiently handles arrays with large sizes.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number smaller than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three. At the indicies that are divisible by three, its values are equal to the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. Return a tuple that has the number of even digits. Also, return the number of odd digits respectively.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/83", "prompt": "def starts_one_ends(n):\t\n'''Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\nConsider edge cases where n is less than 2, as they may need special handling in your solution.\n'''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F, and prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the total number of unique characters present in it. This should be done without considering the case of the characters.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, determine the smallest number of elements that must be modified to transform the array into a palindromic one. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/82", "prompt": "def prime_length(string):\t\n'''Write a function that takes a string and returns True if the length of the string is a prime number or False otherwise.\nExamples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3. Every 3 consecutive letters in the string are distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number. The program should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers. The prime numbers should be less than n.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string. Ensure your solution handles both ASCII and Unicode characters correctly.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that accepts a list of strings. The list holds several different words. Return the word with maximum number of unique characters. If multiple strings have maximum number of unique characters, return the one which comes first in lexicographical order.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    Ensure the function handles empty lists correctly without errors.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/90", "prompt": "def next_smallest(lst):\t\n'''\nYou are given a list of integers. You need to manipulate this list in some way. Write a function \nnext_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique elements that are common between two lists. You should identify the elements that appear in both lists. After identifying these elements, ensure they are sorted in ascending order and free of duplicates.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have identical character counts per string. That character count will be the same for all words in the list.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are provided with two strings, s and c, your task is to remove all characters from s that match any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Ensure the list is sorted before calculating the median for accurate results.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that accepts three numerical values. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The initial list contains fundamental algebraic operations, while the second one consists of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that accepts a string as input and produces a string with the vowels removed.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) equals the sum of fibfib(n-1), fibfib(n-2), and fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. Each group is separated by a space in the input string. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nConsider edge cases where one or both lists might be empty.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\n\nEnsure your solution is optimized for performance on large input arrays.\"\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, in the format of nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Initially arrange coordinates by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which resembles a matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Additionally, sort the row's coordinates by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2 raised to the power of n modulo p (keep numeric limitations in mind).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transform to that list. You need to apply the transform such that the smallest number will become 0. The largest will become 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings. Only include the ones that contain the given substring. The input list of strings may have various lengths and characters. The main goal is to filter out all the elements that do not have the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number. Ensure that your solution handles large values of n efficiently.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been tasked to write a function that receives a hexadecimal number as a string and counts the number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. In mathematics, prime numbers are the natural numbers greater than 1 that cannot be formed by multiplying two smaller natural numbers. Some examples include 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one, and return the first one in case of multiple strings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\t\n'''Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True. Otherwise it should return False. Ensure your solution is optimized for performance on large inputs.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function. The purpose of this function is to sum numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial, xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return a list of all prefixes from the input string. These prefixes should be ordered from shortest to longest.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found. The rolling maximum element is consistently updated until a given moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''There are eight planets in our solar system: the closest to the Sun is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2 and returns a tuple containing all planets whose orbits are located between the orbit of planet1 and the orbit of planet2, sorted by the proximity to the sun. The function should return an empty tuple if planet1 or planet2 are not correct planet names.\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in the given list of numbers, are any two numbers closer to each other than the given threshold. You need to compare the distance between each pair of numbers in the list. If the distance is less than the specified threshold, the numbers are considered closer.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. Consider edge cases where the list might consist of negative integers or a combination of both positive and negative integers.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Provide a list containing solely the positive integers.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters (regardless of case) does it consist of. Consider optimizing the solution for strings with a large length.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate a list of strings into one single string\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. Specifically, change each of the lowercase letters to their corresponding uppercase equivalents. Then, convert uppercase to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, you are tasked to find the minimum sum. The sum should be the value of any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that receives two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/156", "prompt": "def int_to_mini_roman(number):\t\n'''Given a positive integer, obtain its roman numeral equivalent as a string. The result should be computed accurately. Return it in lowercase.  \nRestrictions: 1 <= num <= 1000\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    Ensure that the sorting of even indices is stable and maintains the relative order seen in the input list.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its values at the even indicies are equal to the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/106", "prompt": "def f(n):\t\n'''Implement the function f that takes n as a parameter, and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even or the sum of numbers from 1 to i otherwise. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero, and has a frequency greater than or equal to the value of the integer itself. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1. Make sure your solution handles edge cases efficiently.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The solution should be efficient and work for any valid integers provided as input.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. return a tuple that has the number of even and odd digits respectively. Consider edge cases such as negative numbers and zero when implementing your solution.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''Given a string s, count the number of uppercase vowels that appear at even indices.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n''' For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean | Ensure your implementation handles both positive and negative numbers correctly.\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be expressed as the sum of exactly 4 positive even numbers. Specifically, determine if n can be decomposed into the sum of four distinct even integers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". return True if every opening bracket has a corresponding closing bracket. The function should handle edge cases such as an empty string or strings with no brackets.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/158", "prompt": "def find_max(words):\t\n'''Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \n    Consider edge cases where the list might be empty or contain duplicates.\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function receives a list l and returns a list l' such that l' is the same as l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal to the values of the corresponding indices of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting is when you start with the minimum value, then the maximum of the remaining integers, then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Consider optimizing the solution for larger values of n to ensure efficiency.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' signifies the largest among negative integers, and 'b' is the smallest of positive integers in a list. If there are no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/75", "prompt": "def is_multiply_prime(a):\t\n'''Write a function that returns true if the given number is the multiplication of 3 prime numbers and false otherwise. Knowing that (a) is smaller than 100.\nExample:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string\n\nWrite a function that accepts a string as input and returns the length of that string. The function should calculate the total number of characters in the string and return it as an integer. The characters can include letters, numbers, spaces, and symbols. Make sure your implementation handles empty strings by returning a length of zero in such cases. The solution should not use any built-in length determining functions from the programming language being used. As a test, ensure your function is efficient and performs well with very long strings.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that start with a given prefix. Ensure that your solution efficiently handles large lists without significant performance degradation.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. You can make one change to an element. This means you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task Write a function that takes a string as input and returns the sum of the ASCII codes of the upper characters only.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a hypothesis in mathematics that deals with a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number smaller than n that divides n evenly.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three. Its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You receive a two-dimensional dataset as nested lists, resembling a matrix, but contrary to matrices, each row might possess a varying number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. The anticipation builds up so much that it can be overwhelming when the outcome is revealed. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. You need to add the even elements that are at odd indices. Consider the case where lst is composed of several integers both even and odd. \nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Remember to handle edge cases such as an empty list or a list with a single element appropriately.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits. You should consider only the first k elements of arr to find this sum.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c. You need to perform this deletion carefully. Then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return the middle value of the elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return a collection of all prime divisors of the specified number, ordered from the smallest to the largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. The input number must be equivalent to the multiplication of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    Ensure that your solution is efficient and handles large numerators and denominators accurately.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/96", "prompt": "def count_up_to(n):\t\n'''Implement a function that takes an non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You have a string s.  \nYour task is to check if the string is happy or not.  \nA string is considered happy if its length is at least 3 and every group of 3 successive characters are unique.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. The function should first calculate the total number of characters in each list. Then, it should compare these totals to determine which list has fewer characters.\n\nIf the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''\n    Checks if given string is a palindrome. Ensure the comparison is case-insensitive and ignores spaces.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''\nremove_vowels is a function that takes string and returns string without vowels. Ensure that the function handles both uppercase and lowercase vowels effectively.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''triples_sum_to_zero takes a list of integers as an input. it returns True if there are three unique elements in the list that add up to zero, and False otherwise.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    The function should handle edge cases such as n being equal to or less than zero.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. The function should be able to handle any integer inputs. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function consists of a string that includes several groups of nested parentheses divided by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial. These coefficients are used to expand the polynomial in terms of powers of x. xs[0] + xs[1] * x + xs[2] * x^2 + ....  \nReturn derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. If you encounter multiple strings of the same length, return the first one. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n\nWrite a function called `filter_strings` that takes a list of strings and a substring, and returns a new list containing only those strings from the input list that include the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/78", "prompt": "def hex_key(num):\t\n'''You have been assigned the task of creating a function that takes a hexadecimal number in string format and tallies the count of hexadecimal digits that are prime (a prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: you may assume the input is always correct or an empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings and never an array of numbers, and it may contain duplicates. You should return the list sorted in ascending order by the length of each word, and if two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    Ensure your solution runs with optimal time complexity.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0. Similarly, empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True, otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function. It is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter a provided list containing any Python values to include only the integers.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes, your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value, and if multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ]. If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/54", "prompt": "def same_chars(s0: str, s1: str):\t\n'''Check if two words have the same characters. Verify that the words contain the same letters by comparing them. Ensure each letter's frequency is also identical in both words.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''Given a string s, count the number of uppercase vowels in even indices.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand, the first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ), Subtraction ( - ), Multiplication ( * ), Floor division ( // ), Exponentiation ( ** )\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Calculate the number of characters in the provided string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that\n    l' mirrors l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Keep only the positive numbers from the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will be set to 0. This transformation ensures that the largest number will become 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/148", "prompt": "def bf(planet1, planet2):\t\n'''```\nThere are eight planets in our solar system: the closest to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a tuple containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names. \nEnsure that your function handles cases where planet1 and planet2 are the same planet.\n```\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''To calculate the Fibonacci sequence, each number is the sum of the two preceding ones, starting from 0 and 1. The sequence starts with the digits 0 and 1. You should return the n-th Fibonacci number based on this sequence.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string that signifies musical notes using a unique ASCII style. Your task is to parse this string and return list of integers corresponding to how many beats does each not last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer. Determine if the numbers are closer to each other than given threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Consider edge cases such as arrays containing negative numbers or having a single element.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself, where the frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3, making no changes to entries whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For the provided string, convert uppercase letters to lowercase and lowercase ones to uppercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers. Ensure that the solution efficiently calculates the possibility for a wide range of n values.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns the product of their unit digits, assuming the input is always valid.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. return a pair that contains the count of even and odd digits respectively.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value and then alternate with the maximum of the remaining integers.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the largest number that is more than zero and occurs as many times as its own value or more. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the number of even and odd integer palindromes. These palindromes are those that fall within the range(1, n), inclusive.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Make sure to handle edge cases where the input strings are empty or contain special characters.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to write a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n are string representations of a fraction, formatted as <numerator>/<denominator> where both numerator and denominator are positive integers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n results in an integer and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes a string and returns a string without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/156", "prompt": "def int_to_mini_roman(number):\t\n'''Given a positive integer, obtain its roman numeral equivalent as a lowercase string. Restrictions: 1 <= num <= 1000\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence. Ensure that the function handles large values of n without significant time or space inefficiencies.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Assume that both integers can be either positive or negative. You should find the largest positive integer that divides both a and b without leaving a remainder.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle with one angle measuring exactly 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Ensure that you handle both odd and even lengths of the list appropriately.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean | Ensure to handle edge cases such as empty lists or lists with a single element appropriately.\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Ensure your solution handles edge cases such as very large values of n and p efficiently.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number that divides n evenly. The largest number should be smaller than n.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element. Ensure that your solution is as efficient as possible, considering both time and space complexities.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string containing several clusters of nested parentheses divided by spaces. For each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''```\nWrite a function that accepts two lists of strings and returns the list that has \ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nConsider edge cases where one or both lists might be empty.\n```\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers. It takes an integer n and returns the sum of all integers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string consisting of the characters \"(\" and \")\". Return True if each opening bracket has a matching closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n, then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term, if the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial.  \n    xs[0] + xs[1] * x + xs[2] * x^2 + ....  \n    Return derivative of this polynomial in the same form.  \n    Consider the possibility of having an empty list as input, which should return an empty list as the derivative.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''Given a string s, count the number of uppercase vowels in even indices. Consider the 0th index to be an even index.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that start with a given prefix. Take each string from the list and check if it starts with the prefix. This step ensures that you only select the strings that have the desired prefix.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. Give back the initial string if there are several strings of identical length. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n''' You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of the account falls below zero, and at that point the function should return True. Otherwise, it should return False. Make sure your solution efficiently handles large input sizes without significant performance degradation.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed. They should be listed the number of times corresponding to how many times it appears in factorization. Input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. It should accept three numerical inputs from the user. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix, however, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order, and also by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, provide the sum of the numbers with at most two digits from the first k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains some words separated by a space, and you must return a string that includes the words from the original sentence whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/69", "prompt": "def search(lst):\t\n'''You are given a non-empty list of positive integers. Return the largest number that is above zero and appears at least as many times as its own value. The frequency of an integer is the number of times it appears in the list. If no such a value exist, return -1.\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the number of distinct characters it contains regardless of case.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''triples_sum_to_zero takes a list of integers as an input. it returns True if there are three unique elements in the list that add up to zero, and False otherwise.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element from the list. To perform this task, iterate through each element in the list. Compare each element with a variable maintaining the maximum value found. If a larger value is found, update the variable to this new value. Continue this process until the complete list is traversed. Finally, return the variable holding the maximum value.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns the product of their unit digits, assuming the input is always valid.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers, and you should use these lists to build the algebraic expression and return the evaluation of this expression. The basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst, add the even elements that are at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. It is a feeling that is deeply etched in our memories. It is a feeling that can be both exhilarating and nerve-wracking. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Verify whether the provided string reads the same forward and backward.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. If the list is empty, the empty sum should be equal to 0. The empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program that returns the value of x for a prime number n and returns the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter a list of input strings only for those that have the specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, locate the minimum sum of any non-empty sub-array of nums. Ensure that the sub-array selected is non-empty, and compute its sum.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/98", "prompt": "def count_upper(s):\t\n'''Given a string s, count the number of uppercase vowels present in even indices. You need to examine each character at these positions.\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Provide the length of the specified string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes a string and returns a string without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True is list elements are monotonically increasing or decreasing. The list is considered monotonically increasing if each element is greater than or equal to the previous one. Alternatively, the list is monotonically decreasing if each element is less than or equal to the previous one.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will accept a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on. Ensure that your implementation efficiently handles larger lists in order to maintain good performance.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\"Considering an array representing a tree branch comprised of non-negative integer nodes, your objective is to remove one of the nodes and return it. The plucked node should be the node with the smallest even value. If there are multiple nodes having the same smallest even value, return the node at the smallest index. The plucked node should be returned in a list, [ smallest_value, its index ]. If there are no even numbers or the provided array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. return a tuple that includes the count of even and odd digits correspondingly.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1. A triangle is valid if the sum of any two of its sides is greater than the remaining side.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Ensure to optimize the solution for large input strings.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. If the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n\nif both lists contain an equal number of characters, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence. Ensure that your solution handles large values of n efficiently.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''\nCheck if in given list of numbers, are any two numbers closer to each other than the given threshold. Use appropriate algorithms to optimize the solution for large datasets.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return a list of all prefixes from shortest to longest of the input string.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1. Ensure to handle all intermediate values proportionally between 0 and 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations. These are commonly used operations in mathematics. And the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression.\n\nThe basic algebra operations:  \nAddition ( + )  \nSubtraction ( - )  \nMultiplication ( * )  \nFloor division ( // )  \nExponentiation ( ** )  \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. In the event of multiple strings having the same length, you should return the first one. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise, where both x and n are string representations of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers. Ensure that your solution checks for all potential combinations of even numbers efficiently.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return the n-th Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones. It starts with 0 and 1.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if every number in the list l is less than the threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics). Make sure to handle large values of n efficiently to avoid performance issues.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/156", "prompt": "def int_to_mini_roman(number):\t\n'''Given a positive integer, obtain its roman numeral equivalent as a string. You must convert the integer to its corresponding roman numeral representation. Return it in lowercase. Restrictions: 1 <= num <= 1000\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter given list of any python values only for integers. The task is to filter out and keep only the integer values. You need to create a function that iterates through the list and checks the type of each element. If the element's type is an integer, it should be included in the result. Otherwise, it should be excluded from the final output.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. At that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. If the balance does fall below zero, at that point the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. The median is the value separating the higher half from the lower half of a data sample. It plays a central role in statistics when analyzing data distributions.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. The elements should be sorted in ascending order. They must also be unique.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that contains the odd numbers in the Collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the subsequent term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n''' From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence. Ensure that your solution is efficient, even for large input sizes.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence. This list should contain the maximum element that is found. It's important to include the maximum element up to that particular moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    Ensure your solution takes into consideration edge cases, such as an empty list or no occurrences of x.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form. To clarify, the derivative should be returned as an array of coefficients corresponding to the reduced powers of x.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/62", "prompt": "def derivative(xs: list):\t\n'''\nxs represent coefficients of a polynomial.  \n    xs[0] + xs[1] * x + xs[2] * x^2 + ....  \nReturn derivative of this polynomial in the same form.  \nMake sure to consider edge cases such as when the polynomial has no terms or only a constant term.\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n''' Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    The function should handle multiple groups efficiently and return a list of results corresponding to each group.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, change lowercase characters to uppercase characters. Flip uppercase characters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n. Ensure to handle edge cases where n might be 0 or a negative number gracefully.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed. You need to determine this number in order to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum. It should be of any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, compute the Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure your implementation handles both positive and negative integers efficiently.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True; otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Determine the length of the provided string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. Examine the list to find the largest negative integer. Then, look for the smallest positive integer. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. For example, if a prime factor appears twice in the factorization, it should be listed twice in the output. Input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number that divides n evenly, smaller than n. Ensure your solution handles both positive and negative values of n gracefully.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, and return False otherwise. A right-angled triangle is a triangle in which one angle is a right angle. A right angle is an angle of 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given a list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters (regardless of case) it consists of.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Ensure that all input parameters are numbers before proceeding. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers and, for all entries in the list, shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". Return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows: It has a structure that resembles the well-known Fibonacci sequence. However, there are differences in how it is generated.  \n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/29", "prompt": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that start with a given prefix. Make sure the function can handle both uppercase and lowercase versions of the prefix.\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the total of elements that have no more than two digits from the first k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n\nWrite a function that takes a list of strings and concatenates them into a single string, without using any built-in string joining methods. Ensure that the concatenation handles edge cases like empty strings and lists properly.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your job is to determine if the account balance ever becomes negative, and if so, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return a list containing all prefixes of the input string arranged from the shortest to the longest.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes string and returns string without vowels. Ensure that the function maintains the original case of the characters and handles both uppercase and lowercase vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string representing musical notes in a special ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats each note lasts.\n\nHere is a legend: 'o' - whole note, lasts four beats 'o|' - half note, lasts two beats '.|' - quater note, lasts one beat\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value. Then you choose the maximum of the remaining integers, then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Ensure that the function handles both uppercase and lowercase words uniformly.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to write a function that will reduce the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Ensure your solution is optimized for performance, especially for long strings.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0, fibfib(1) == 0, fibfib(2) == 1, and fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return only positive numbers in the list. Ensure that any modifications to the list maintain the order of original numbers.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of a list of strings, return the longest one. In the event of multiple strings sharing the same length, return the first one. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nYou may assume the inputs are positive numbers.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are there any two numbers that are nearer to each other than the specified threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement a function that returns a list of all words from string s that contain exactly n consonants, in order these words appear in the string s. If the string s is empty, then the function should return an empty list. Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Ensure that the program handles large values of n efficiently.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns \n    the multiplication of the unit digits of the integers.\n    Assume the input is always valid.\n    \nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/48", "prompt": "def is_palindrome(text: str):\t\n'''Checks if the provided string is a palindrome. A palindrome is a word or phrase that reads the same backward as forward.\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. Ensure the function handles edge cases like lists with one element.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be expressed as the sum of exactly 4 positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. You need to return a tuple. The tuple should have the number of even and odd digits, respectively.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/33", "prompt": "def sort_third(l: list):\t\n'''This function accepts a list l and provides a list l' such that\n    l' remains the same as l at the indices that are not multiples of three, while its values at indices that are multiples of three are equal\n    to the values of the corresponding indices of l, but sorted.\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst, add the even elements that are at odd indices. Ensure to handle edge cases where the list might contain only one element or no even numbers at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes, your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value and if multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smallest_value, its index ], and if there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings. It is never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a list that is sorted and contains the odd numbers in the Collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. The returned list should be sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string that shows multiple sets of nested parentheses divided by spaces.  \nFor each of the group, output the deepest level of nesting of parentheses.  \nE.g. (()()) has maximum two levels of nesting while ((())) has three.  \n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\nThis function will take a list of integers. For all entries in the list, the function shall raise to the power of 2 the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes. Consider edge cases, such as strings with no uppercase characters, to ensure robust functionality.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, determine the smallest sum possible from any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Ensure your solution efficiently handles both positive and negative numbers within the array.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number). Ensure that your solution is efficient in terms of time complexity.\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a list of integers provided, create a list of highest elements found up to a specified point in the series.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the count of unique characters (ignoring case sensitivity) it includes.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Remember to handle non-alphabetic characters by leaving them unchanged in the output.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero accepts a list comprised of integers as its input. it returns True if there are two distinct elements in the list that add up to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Provide the n-th number in the Fibonacci sequence.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n. Ensure that the function handles edge cases appropriately, such as when n is zero or negative.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Ensure to handle both even and odd lengths of the list.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards; in one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n''' You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False. Consider both deposits and withdrawals as integers where deposits are positive and withdrawals are negative during calculations.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter given list of any Python values only for integers.\n\nYou must ensure that the filtered output only contains integer values from the original list, discarding any other data types.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes a string and returns a string without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. You are required to return true if one of these numbers is equal to the sum of the other two numbers. All numbers must be integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. Return a tuple that has the number of even digits. Also return a tuple that includes the number of odd digits respectively.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n''' Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    Consider edge cases where the input number is 1 or a prime itself.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the highest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is a right angle. A right angle measures 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. The greatest common divisor (GCD) is the largest positive integer that divides each of the integers without a remainder. The task is to implement a function that takes two integer inputs and returns their GCD.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transform to that list such that the smallest number will become 0 and the largest will become 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. Iterate through the list and compare each element. You should keep track of the highest value encountered.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to create a function that simplifies the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. x and n are string representations of a fraction and follow this format: <numerator>/<denominator>, in which both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes from shortest to longest of the input string. Make sure that the final result includes all possible prefixes.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, compute the Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the mean of the absolute differences between each element and a central value (mean in this case): MAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1. Three sides make a valid triangle when the sum of any two sides is greater than the third side. The triangle inequality theorem must be satisfied for a valid triangle. This condition ensures that you can create a triangle with those three lengths.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, determine the smallest sum of any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate if the number n can be expressed as the sum of exactly 4 positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, produce a tuple containing the count of even and odd integer palindromes that are within the range(1, n), inclusive.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases. Ensure to handle both positive and negative integer inputs appropriately.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence akin to the Fibonacci sequence that's defined as follows:  \n    fibfib(0) == 0  \n    fibfib(1) == 0  \n    fibfib(2) == 1  \n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).  \n    Kindly write a function to compute the n-th element of the fibfib number sequence efficiently.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c. You need to remove each character in s that matches any character in string c. \n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr. Consider negative numbers to also have at most two digits when determining eligibility for inclusion in the sum.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\"; return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the format <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty. Ensure the logic accounts for edge cases such as strings of varying character sets or symbols.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise. Ensure that the prime-checking function is optimized for large values of n.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/17", "prompt": "def parse_music(music_string: str) -> List[int]:\t\n'''Input to this function is a string representing musical notes in a unique ASCII format. Your task is to parse this string and return list of integers corresponding to how many beats does each not last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n\nDescription:\nGiven a list of strings, your task is to filter and return a new list that only contains the strings which include a specified substring. For example, if the input list is ['apple', 'banana', 'cherry', 'date'] and the substring is 'an', the function should return ['banana']. Strings that do not contain the substring should be excluded from the result. Ensure that the filtering operation is case-sensitive, meaning 'An' would not match 'an'. Additionally, the order of the strings in the list should be preserved.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''\nFrom a given list of integers, generate a list of rolling maximum element found until given moment in the sequence. Make sure to handle both positive and negative integers in your implementation.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''\nYou are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Ensure that your implementation efficiently handles sentences with a large number of words.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns \n    the product of their unit digits. \n    Assume the input is valid. The input will always adhere to the expected format.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Filter out just the numbers that are positive from the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/59", "prompt": "def largest_prime_factor(n: int):\t\n'''Return the largest prime factor of n. Assume n is greater than 1. Also assume n is not a prime.\n>>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Consider case sensitivity when determining palindromes.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''\nremove_vowels is a function that takes a string and returns the string without vowels. Ensure that the function efficiently processes both uppercase and lowercase vowel characters.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. It returns True if there are two distinct elements in the list that sum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 Two sides added together must always measure more than the third side. This is when three sides make a valid triangle.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a specified string, convert lowercase letters to uppercase and uppercase letters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. Consider edge cases such as lists with negative numbers or a single element.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that haven't any even digit, sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, determine the number of unique characters it contains (ignoring case).\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. At that point, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function will then compute the sum of all entries. It shall return this sum as the final output.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\n3. You should include each odd number only once in the returned list.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes, your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value, and if multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Unique elements are those that do not repeat within the list. The elements should first be checked to ensure they appear in both lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''triples_sum_to_zero takes a list of integers as an input and returns True if there are three distinct elements in the list that sum to zero, and False otherwise.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression. Ensure that the operations are applied in the order they appear in the lists.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n. Make sure to handle cases where n is a non-positive integer by returning 0.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task  \n    Write a function that takes a string as input and returns the sum of the upper characters only'  \n    ASCII codes.  \n\n    Consider edge cases with no uppercase letters and ensure your function handles them gracefully.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a supplied list of numbers (of length at least two) select and return two that are the closest to each other, and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. Identify which elements in the list are even and located at odd indices. Then, proceed to add the even elements that are at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. List each prime factor according to its frequency in the factorization. Input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that reads the same backwards and forwards, and in one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides create a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number. Ensure your implementation is efficient and handles large values of n gracefully.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Determine if the provided number n can be expressed as the total of precisely four positive even integers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Question:\n\nGiven list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1. Preserve the order of the elements in the transformed list.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers; returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. You should consider edge cases where the array might contain both positive and negative elements.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return the greatest common divisor of two integers a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n\nIn this coding challenge, you are asked to write a function that takes a list of strings as input and returns a single string that is the result of concatenating all strings in the list. The strings should be concatenated in the order they appear in the list, with no additional characters or delimiters between them. Ensure that your function can handle an empty list, returning an empty string in that case. Consider edge cases where the list might contain elements that are not strings, and ensure your function handles such scenarios appropriately.  Test your function with different lists to verify its correctness.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c, then check if the resultant string is a palindrome.\n    A string is called a palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Ensure that all edge cases, including empty strings and special characters, are considered in your solution.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score. Aim to achieve this with a time complexity of O(n).\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes a string and returns the string without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists. This is similar to a matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, and at that point function should return True; otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're provided a series of deposit and withdrawal transactions on a bank account beginning with a balance of zero. Your task is to detect if at any point the balance of account fallls below zero, and at that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the mean of the absolute differences between each value and a central point, which is the mean in this context: MAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows: \n    fibfib(0) == 0 \n    fibfib(1) == 0\n    fibfib(2) == 1 \n    The value of fibfib(n) is computed using previously computed values. We find fibfib(n) as the sum of fibfib(n-1), fibfib(n-2), and fibfib(n-3). \n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Ensure that the function handles edge cases such as empty lists or lists with a single element.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number, and it will return False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nConsider edge cases where one or both lists might be empty, and handle them appropriately.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0. The empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter given list of any python values only for integers. The list may contain different types of values, such as strings or floats. Your task is to create a new list that consists exclusively of integer values.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the smallest of positive integers in a list. Return them as None if there is no negative or positive integers.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Output a list of all prefixes of the input string, arranged from the shortest to the longest.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a specified series of numbers, create a list of the highest rolling element discovered up to the specified time in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number that divides n evenly, smaller than n. Ensure that the solution accounts for all positive integer values of n.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive. Ensure your solution is optimized for performance to handle large values of n efficiently.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Ensure that the solution handles lists of varying sizes efficiently.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting involves beginning with the smallest number, then picking the largest of the remaining numbers, continuing with the smallest, and so forth.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a provided list of numbers (with a length of at least two) choose and return two that are the closest to one another and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. In case of multiple strings of the same length, return the first one. Return None in case the input list is empty.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the sum of the elements with at most two digits from the first k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p. Be aware of numerics in this computation.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence whose lengths are prime numbers, the order of the words in the new string should be the same as the original one.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold. Ensure to consider edge cases, such as when the list is empty or contains only one element.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/104", "prompt": "def unique_digits(x):\t\n'''Given a list of positive integers x, return a sorted list of all elements that hasn't any even digit. Note: Returned list should be sorted in increasing order.\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task\n    Write a function that takes a string as input. The function should return the sum of the upper characters only' ASCII codes.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". These characters are used to denote structure within the string.  \nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Make sure to handle edge cases where n is less than 2, as these are not considered prime numbers.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. At that specific moment, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Provide the median of the items in the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that adds together all the numbers from 1 up to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/59", "prompt": "def largest_prime_factor(n: int):\t\n'''Return the largest prime factor of n. You can assume that n is greater than 1. Additionally, assume that n is not a prime number.\n>>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string that consists of various nested parentheses groups separated by spaces.  \nFor each of the group, output the deepest level of nesting of parentheses.  \nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that accepts a string and returns the string devoid of vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Make sure your solution is efficient and handles edge cases such as empty strings and non-alphabetic characters.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return solely the numbers greater than zero from the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters it consists of, regardless of case.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/12", "prompt": "def longest(strings: List[str]) -> Optional[str]:\t\n'''Out of list of strings, return the longest one. Return the first one in case of multiple strings of the same length. Return None in case the input list is empty. Consider the case sensitivity of strings during comparison.\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are provided with two strings s and c, and you must remove all the characters in s that match any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that accepts three numbers. Returns true if one of the numbers matches the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array or sub-sequence of nums. Consider all sub-arrays of different lengths. Calculate the sum of elements in each sub-array to determine the minimum sum.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n\nDescription:\nWrite a function that takes a list of strings as input and returns a single string that is the result of concatenating all the strings in the list. Ensure that the function handles cases where the list is empty, and include an optional separator that defaults to an empty string between each concatenated string. Consider edge cases where the input might consist of non-string elements or contain special characters.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a hypothesis in mathematics that deals with a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1]. \n2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression. The basic algebra operations include addition (+), subtraction (-), multiplication (*), floor division (//), and exponentiation (**).\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that takes a list of strings as an argument, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will be of equal length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You have been provided with a two-dimensional dataset, represented as nested lists, which resembles a matrix, but with the possibility of each row having a varying count of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Arrange coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a provided list of integers, return a tuple consisting of a sum and a product of all the integers in a list. If the list is empty, the sum should be 0 and the product should be 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appears in factorization.\nInput number should be equal to the product of all factors.\nEnsure that the input integer is greater than 1 to have prime factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\n\nMake sure your solution has optimal time complexity.\"\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. The function should calculate the total number of characters in each list. It then compares these totals to determine which list has fewer characters.\n\nif the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. add the even elements that are at odd indices. You should consider the list to be zero-indexed for determining odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n and returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero. At the point when the balance falls below zero, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero. The function will give this result only when three distinct integers are present in the list whose sum equals zero. Otherwise, it returns False.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array that is read the same backwards and forwards, and in one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring.\n\nDescription:\nWrite a function named `filter_strings` that takes two parameters: a list of strings and a substring. The function should return a new list containing only the strings from the input list that contain the given substring. If the input list is empty or contains no strings with the given substring, the function should return an empty list. Consider case sensitivity when performing the substring search. You may assume that both parameters are provided and the input is valid. Ensure your solution is efficient and handles large input lists gracefully.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Assume the array has at least one element.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Find the largest common factor for the two integers, a and b.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. return a tuple that has the number of even digits and odd digits respectively. Even digits are those divisible by 2 without a remainder, while odd digits leave a remainder of 1 when divided by 2.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1. Three sides make a valid triangle when the sum of any two sides is greater than the third side. This is a fundamental property of triangles that must be satisfied. If this condition is not met, it is not possible to form a triangle with the given sides.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes a string and returns it without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transformation to that list, such that the minimum number will change to 0 and the maximum will change to 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n \n    Ensure that your implementation is efficient and handles a large input list without significant performance issues.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: fibfib(0) == 0, fibfib(1) == 0, fibfib(2) == 1, and fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/122", "prompt": "def add_elements(arr, k):\t\n'''Given a non-empty array of integers arr and an integer k, return the total of the numbers with no more than two digits from the initial k elements of arr.\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p. Be aware of numeric values and potential overflow issues that may arise.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n''' For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    Make sure your implementation handles both integer and floating-point numbers correctly.\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists. This structure is similar to matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Also, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Determine if the provided number n can be expressed as the sum of four positive even numbers exactly.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if within the provided list of numbers, there exist any two numbers that are closer to each other than a specified threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase. Change uppercase characters to lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes from shortest to longest of the input string.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the greatest of negative integers, and 'b' is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. Monotonically increasing means that for every pair of consecutive elements, the latter is greater than or equal to the former. Monotonically decreasing means the opposite; for every pair of consecutive elements, the latter is less than or equal to the former.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    The goal is to provide a clear understanding of the accuracy of predictions compared to actual results.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We have two strings s and c, your task is to remove any character in s that matches any character found in c,\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. The median is the middle value in a list when the list is ordered. If the list has an even number of elements, the median will be the average of the two middle numbers.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task\n    Write a function that receives a string and returns the sum of ASCII codes for uppercase letters in it.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n\nDescription:\nWrite a function that accepts a list of strings and concatenates them into a single string. The function should take care of cases where the list might be empty and return an empty string in such cases. Additionally, consider handling cases with special characters or numbers within the strings to ensure they are all correctly concatenated into the final output. Make sure your implementation efficiently handles lists with a large number of strings.\n\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter given list of any python values only for integers. Ensure your solution performs efficiently even for large lists.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\", return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words from the original sentence, whose lengths are prime numbers, the order of the words in the new string should be the same as the original one. Consider edge cases where the sentence might be empty or contain punctuation.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. If the three sides form a valid triangle, return the triangle's area rounded to two decimal places. Otherwise return -1 Three sides make a valid triangle when the sum of any two sides is greater than the third side.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n. Ensure the function handles edge cases where n is less than or equal to 0 appropriately.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the number of even and odd integer palindromes. The integer palindromes fall within the range(1, n), inclusive.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that have precisely\n    n consonants, maintaining the sequence these words are found in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each of the factors should be listed number of times corresponding to how many times it appears in factorization. Input number should be equal to the product of all factors. Ensure that the input is a positive integer greater than 1.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and they are all integers, otherwise returns false.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. If the list is empty, the sum should be equal to 0. Also, the empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/162", "prompt": "def string_to_md5(text):\t\n'''Given a string 'text', return its md5 hash equivalent string. If 'text' is an empty string, return None. Ensure that the input string is properly encoded before computing the hash.\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence. Consider edge cases like an empty list or a list with all negative numbers.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We have two strings s and c, and you need to remove all characters from s that correspond to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will raise the integer entry to the third power if its index is divisible by 4 and not by 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. Ensure that your solution handles both positive and negative numbers efficiently.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter a provided list of strings solely for those that have a specified substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\"Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smallest_value, its index ], If there are no even values or the given array is empty, return [].\n\nYou may assume that the input array will always contain integer values.\"\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters (regardless of case) does it consist of. Consider including edge cases such as an empty string or strings with only repeating characters in your solution.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in the Collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the previous term in a specific way. If the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Ensure to consider both even and odd number of elements in the list while calculating the median.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program which should return the value of x if n is a prime number. It must be capable of identifying prime numbers accurately. It should return the value of y otherwise.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n are string representations of a fraction in the format <numerator>/<denominator>, where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account fallls below zero. At that point, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. You should ensure all numbers are integers before proceeding with any operations. Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Return only positive numbers in the list. Make sure to consider zero as non-positive.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''You are given a 2 dimensional data, as a nested lists, which is similar to matrix. However, unlike matrices, each row may contain a different number of columns. Given lst, and integer x, find integers x in the list, and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates initially by rows in ascending order. Additionally, sort coordinates of the row by columns in descending order.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The first list has basic algebra operations, and the second list is a list of integers. Use the two given lists to build the algebraic expression and return the evaluation of this expression.\n\nThe basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( // ) Exponentiation ( ** )\n\nEnsure proper handling of operator precedence to achieve correct evaluation of the expression.\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Consider edge cases where the array has a single element or multiple negative numbers.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst, add the even elements that are at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that receives a string and outputs a version of that string with the vowels removed.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, and return False otherwise. A right-angled triangle is a triangle. It is one in which one angle is right angle or 90 degree.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to create a function that will reduce the expression x * n. The function returns True if x * n computes to an integer and False otherwise. Both x and n are string representations of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 1}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise, while both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if every number present in the list l is less than the limit t.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    You should find a solution that works efficiently even for large inputs.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, produce a list of rolling largest element encountered up to the specified time in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest. Each factor should be repeated according to its frequency in the factorization. Input number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number that divides n evenly. The largest number should also be smaller than n.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Ensure that a provided list of assorted Python values is filtered to include solely integers.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows: It has some similarities but also some differences. Here\u2019s how it\u2019s defined: \n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure that the solution handles both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string\n\nDescription:\nWrite a function that takes a string as input and returns the number of characters present in the string. Make sure to account for any special characters or spaces that might be included in the string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return the remainder when 2^n is divided by p (keep numerics in mind).\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a specified string, transform lowercase letters into uppercase and uppercase letters into lowercase.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, determine the minimum number of elements that must be altered to transform the array into a palindromic form. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. Ensure all elements are compared using their natural order to guarantee correctness.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers. Check if this condition holds true for the provided number. Determine the possibility and return a boolean indicating the result.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/20", "prompt": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\t\n'''From a supplied list of numbers (of length at least two) select and return two that are the closest to each other. These two numbers should be returned in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task  \n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c. First, identify all the characters in s that match any character in c, and then remove them from s.  \n    Then check if the result string is palindrome.  \n    A string is called palindrome if it reads the same backward as forward.  \n    You should return a tuple containing the result string and True/False for the check.  \nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Consider the edge cases where the input list might be empty or contain negative numbers.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 2}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that returns a tuple (a, b), where 'a' is the largest of negative integers. It also returns 'b', which is the smallest of positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given a list of numbers (of at least two elements), apply a linear transform to that list such that the smallest number will become 0 and the largest will become 1.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known. The feelings and thoughts you have at that moment are definitely worth noting down. They can also be interesting to compare with others. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order. The list is always a list of strings. It is never an array of numbers. It may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order. You may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to detect if at any point the balance of account falls below zero, returning True if this occurs and False otherwise.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, identify the smallest sum of any sub-array of nums that contains at least one element.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/4", "prompt": "def mean_absolute_deviation(numbers: List[float]) -> float:\t\n'''For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case): MAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return list of all prefixes from shortest to longest of the input string. Ensure that the function maintains optimal performance with respect to time and space complexity.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string by taking each element from the list. Take all the strings and join them together into one long string.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise. Ensure that the solution is efficient and handles edge cases.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/71", "prompt": "def triangle_area(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise return -1 If the sum of any two sides exceeds the third side, the triangle is considered valid.\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out how many distinct characters it has. You have to determine the number of unique characters it consists of in total. Make sure to ignore case while counting the characters.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones. It typically starts with 0 and 1.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/87", "prompt": "def get_row(lst, x):\t\n'''\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    Ensure that the solution handles edge cases gracefully, such as when the list is empty or when x is not found.\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    '''", "pass@10": false, "passes": 0}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". Return True if every opening bracket has a corresponding closing bracket. An opening bracket is the character \"(\" in the string. Each of these \"(\" characters should have a matching closing bracket \")\" for the condition to be satisfied.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from one starting at 1 to a specified number n. It continues this summing process until it has added up all the numbers including n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. Ensure your solution handles both positive and negative integers efficiently.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list.\n\n\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''Given an array representing a branch of a tree that has non-negative integer nodes your task is to pluck one of the nodes and return it. The plucked node should be the node with the smallest even value. You should find the node that has the smallest even value among all the nodes. If multiple nodes with the same smallest even value are found return the node that has smallest index. The plucked node should be returned in a list, [ smalest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/57", "prompt": "def monotonic(l: list):\t\n'''Return True if list elements are monotonically increasing or decreasing. A list is considered monotonically increasing or decreasing if its elements consistently follow a single direction of increase or decrease, respectively.\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/160", "prompt": "def do_algebra(operator, operand):\t\n'''Given two lists operator, and operand. The initial list contains fundamental algebraic operations, and the second list is a list of integers. Use the two given lists to build the algebric expression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers. You need to return true if one of the numbers equals the sum of the other two. Ensure all numbers are integers as a condition for returning true. Returns false in any other cases.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Return median of elements in the list l. Ensure your solution handles both even and odd-length lists effectively.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    Two strings, s and c, are provided, and you must remove every character in s that matches any character in c,\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/143", "prompt": "def words_in_sentence(sentence):\t\n'''You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nEnsure that words are compared case-insensitively when determining their lengths.\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''remove_vowels is a function that takes string. It processes the string by examining each character. The function returns string without vowels.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/9", "prompt": "def rolling_max(numbers: List[int]) -> List[int]:\t\n'''From a given list of integers, create a list of the highest element encountered up to a specific point in the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''**Description:**\n\nWrite a function that takes a string as input and returns the length of that string. This is a basic problem that involves calculating the number of characters present in the string, including letters, numbers, symbols, and spaces. Ensure your function handles edge cases like empty strings and large inputs efficiently. You should not use the built-in length property or function of your programming language of choice; instead, iterate through the string to determine its length. Consider playing around with strings of varying length to test your function\u2019s robustness.\n\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to determine if there is ever a moment when the account balance goes below zero, and at that time the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two unique numbers in the list whose sum equals zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces, and for each of the group, output the deepest level of nesting of parentheses. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string  \n\nYour task is to merge all strings found in a given list into one single string.\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/162", "prompt": "def string_to_md5(text):\t\n'''Given a string 'text', return its md5 hash equivalent string. If 'text' is a blank string, return None.\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/66", "prompt": "def digitSum(s):\t\n'''Task\n    Craft a function that receives a string as its input and yields the total of ASCII codes solely from the uppercase characters.\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/117", "prompt": "def select_words(s, n):\t\n'''Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Make sure your solution has a reasonable time complexity for large strings.\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4 and shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Return length of given string.\n\nDescription:\nWrite a function that accepts a string as its parameter and returns the length of that string. The function should handle edge cases such as empty strings or null inputs gracefully without causing any errors. Additionally, consider optimizing for efficiency by using built-in language functions if applicable. Ensure that the function has proper documentation and test coverage.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/63", "prompt": "def fibfib(n: int):\t\n'''The FibFib number sequence is a sequence akin to the Fibonacci sequence that's defined as follows: \n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/107", "prompt": "def even_odd_palindrome(n):\t\n'''Given a positive integer n, return a tuple that has the count of even integer palindromes. Additionally, for odd integer palindromes, include how many there are. Integer palindromes that fall within the range(1, n), inclusive.\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/123", "prompt": "def get_odd_collatz(n):\t\n'''Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence. The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n, and each term is obtained from the previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/150", "prompt": "def x_or_y(n, x, y):\t\n'''A simple program should determine whether a given number is prime. If n is indeed a prime number, the program should return the value of x. Otherwise, should return the value of y if n is not a prime number.\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/49", "prompt": "def modp(n: int, p: int):\t\n'''Return 2^n modulo p. Be careful when dealing with numerics.\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/60", "prompt": "def sum_to_n(n: int):\t\n'''sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    Consider edge cases where the input list might be empty or all words have odd lengths.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a specified number n, find the largest number less than n that divides n evenly.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/138", "prompt": "def is_equal_to_sum_even(n):\t\n'''Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers. You need to determine if such a combination is possible. Consider all possible combinations of four positive even numbers.\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    Ensure the solution handles edge cases such as when the input number is a prime itself or when it is 1.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/27", "prompt": "def flip_case(string: str) -> str:\t\n'''For a given string, flip lowercase characters to uppercase and uppercase to lowercase. Make sure to handle any non-alphabetic characters appropriately by leaving them unchanged.\n>>> flip_case('Hello')\n    'hELLO'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/74", "prompt": "def total_match(lst1, lst2):\t\n'''Write a function that accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list. You should inspect each element of the lists and count all characters present in them. Compare the total characters of both lists and provide the list with fewer characters.\n\nIf the two lists have the same number of chars, return the first list.\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/30", "prompt": "def get_positive(l: list):\t\n'''Extract solely the numbers that are greater than zero from the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a provided list of numbers, return a tuple that includes the total sum and the product of all numbers in the list. Empty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums. Ensure that your solution is efficient in terms of time complexity.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/157", "prompt": "def right_angle_triangle(a, b, c):\t\n'''Given the lengths of the three sides of a triangle. Return True if the three sides form a right-angled triangle, False otherwise. A right-angled triangle is a triangle in which one angle is a right angle or 90 degrees.\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/22", "prompt": "def filter_integers(values: List[Any]) -> List[int]:\t\n'''Filter given list of any python values only for integers. You are provided with a list that contains various Python values. Your task is to filter this list to retain only the integer values.\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/97", "prompt": "def multiply(a, b):\t\n'''Complete the function that takes two integers and returns the product of their unit digits. Assume the input is always valid. You can expect that the provided integers will be appropriate for the function. You will not need to handle any erroneous input cases.\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/85", "prompt": "def add(lst):\t\n'''Given a non-empty list of integers lst. You need to perform an operation on certain elements of the list. Add the even elements that are at odd indices.\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/13", "prompt": "def greatest_common_divisor(a: int, b: int) -> int:\t\n'''Return a greatest common divisor of two integers a and b. Ensure your solution handles both positive and negative integers correctly.\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. The function shall square the integer entry if its index is a multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3, without changing the entries whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 5}
{"task_id": "HumanEval/43", "prompt": "def pairs_sum_to_zero(l):\t\n'''pairs_sum_to_zero takes a list of integers as an input. it returns True if there are two distinct elements in the list that sum to zero, and False otherwise. Consider edge cases such as lists with only one element or empty lists.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/21", "prompt": "def rescale_to_unit(numbers: List[float]) -> List[float]:\t\n'''Given list of numbers (of at least two elements), apply a linear transform to that list, such that the smallest number will become 0 and the largest will become 1. Ensure that the transformation is applied consistently to all elements in the list.\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/14", "prompt": "def all_prefixes(string: str) -> List[str]:\t\n'''Return a list containing all the prefixes of the input string, arranged from the shortest to the longest.\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/3", "prompt": "def below_zero(operations: List[int]) -> bool:\t\n'''You're given a list of deposit and withdrawal operations on a bank account that starts with zero balance. Your task is to identify whether at any point the balance of the account falls below zero. If the balance becomes negative at any time, the function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/136", "prompt": "def largest_smallest_integers(lst):\t\n'''Create a function that gives back a tuple (a, b), where 'a' is the largest among negative integers, and 'b' is the smallest among positive integers in a list. If there is no negative or positive integers, return them as None.\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/51", "prompt": "def remove_vowels(text):\t\n'''\n    remove_vowels is a function that takes a string and returns the string without vowels. Ensure that the function handles both uppercase and lowercase vowels correctly.\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/47", "prompt": "def median(l: list):\t\n'''Provide the median of the elements contained within the list l.\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/73", "prompt": "def smallest_change(arr):\t\n'''Given an array arr of integers, find the minimum number of elements that need to be changed to make the array palindromic. A palindromic array is an array. It is an array that is read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/70", "prompt": "def strange_sort_list(lst):\t\n'''Given list of integers, return list in strange order. Strange sorting, is when you start with the minimum value. Then choose the maximum of the remaining integers. Then minimum and so on.\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/152", "prompt": "def compare(game,guess):\t\n'''I think we all remember that feeling when the result of some long-awaited event is finally known, and the feelings and thoughts you have at that moment are definitely worth noting down and comparing. Your task is to determine if a person correctly guessed the results of a number of matches. You are given two arrays of scores and guesses of equal length, where each index shows a match. Return an array of the same length denoting how far off each guess was. If they have guessed correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/112", "prompt": "def reverse_delete(s,c):\t\n'''Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Ensure to handle uppercase and lowercase characters as distinct when performing character deletions.\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/52", "prompt": "def below_threshold(l: list, t: int):\t\n'''Return True if all numbers in the list l are below threshold t. Ensure that the function handles edge cases appropriately, such as when the list is empty.\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Find the size of the specified string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/144", "prompt": "def simplify(x, n):\t\n'''Your task is to implement a function that will simplify the expression x * n. The function returns True if x * n evaluates to a whole number and False otherwise. Both x and n, are string representation of a fraction, and have the following format, <numerator>/<denominator> where both numerator and denominator are positive whole numbers. You can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/23", "prompt": "def strlen(string: str) -> int:\t\n'''Determine the number of characters in a specified string.\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/92", "prompt": "def any_int(x, y, z):\t\n'''Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nEnsure the function handles negative integers correctly as well.\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/28", "prompt": "def concatenate(strings: List[str]) -> str:\t\n'''Concatenate list of strings into a single string\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/16", "prompt": "def count_distinct_characters(string: str) -> int:\t\n'''Given a string, find out the number of distinct characters it is composed of. Identify how many unique characters are present in the string, regardless of case.\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    '''", "pass@10": true, "passes": 6}
{"task_id": "HumanEval/35", "prompt": "def max_element(l: list):\t\n'''Return maximum element in the list. The function should iterate through each element in the list and compare it with the current maximum. If a larger element is found, update the current maximum to this element.\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, determine the minimum sum possible for any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/58", "prompt": "def common(l1: list, l2: list):\t\n'''Return sorted unique common elements for two lists. You need to ensure that the elements are sorted in an ascending order. Also, it is important to eliminate any duplicate elements in the final output.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/6", "prompt": "def parse_nested_parens(paren_string: str) -> List[int]:\t\n'''Input to this function is a string represented multiple groups for nested parentheses separated by spaces. For each of the group, identify the deepest level of nesting. The level of nesting should then be outputted. E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    '''", "pass@10": true, "passes": 8}
{"task_id": "HumanEval/59", "prompt": "def largest_prime_factor(n: int):\t\n'''Return the largest prime factor of n. Assume n > 1 and is not a prime. Consider the efficiency of your solution for large values of n.\n>>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/0", "prompt": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\t\n'''Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold. Ensure the solution accounts for edge cases where the list may contain duplicate numbers or be empty.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number that divides n evenly, smaller than n. You should consider edge cases where n is a prime number or a very large integer.\n>>> largest_divisor(15)\n    5\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\"; return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/40", "prompt": "def triples_sum_to_zero(l: list):\t\n'''triples_sum_to_zero takes a list of integers as an input. it returns True if there are three distinct elements in the list that sum to zero, and False otherwise. Consider edge cases such as a list with fewer than three elements.\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/149", "prompt": "def sorted_list_sum(lst):\t\n'''Write a function that accepts a list of strings as a parameter, deletes the strings that have odd lengths from it, and returns the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may contain duplicates. The order of the list should be ascending by length of each word, and you should return the list sorted by that rule. If two words have the same length, sort the list alphabetically. The function should return a list of strings in sorted order and you may assume that all words will have the same length.\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/8", "prompt": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\t\n'''For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list. Empty sum should be equal to 0 and empty product should be equal to 1. Make sure your solution handles both positive and negative integers efficiently.\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    '''", "pass@10": true, "passes": 7}
{"task_id": "HumanEval/37", "prompt": "def sort_even(l: list):\t\n'''This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted. \n    The result should not alter the input list l, ensuring it remains unchanged.\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/25", "prompt": "def factorize(n: int) -> List[int]:\t\n'''Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be included in the list as many times as it occurs in the factorization.\nInput number should be equal to the product of all factors.\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Give back the n-th Fibonacci number.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/7", "prompt": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\t\n'''Filter an input list of strings for those containing the given substring.\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    '''", "pass@10": true, "passes": 10}
{"task_id": "HumanEval/68", "prompt": "def pluck(arr):\t\n'''\"Given an array representing a branch of a tree that contains non-negative integer nodes your task is to remove one of the nodes and return it. The plucked node should be the node with the smallest even value. If multiple nodes with the same smallest even value are found return the node that has smallest index. The removed node should be returned as a list, [ smallest_value, its index ], If there are no even values or the given array is empty, return [].\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    '''", "pass@10": true, "passes": 9}
{"task_id": "HumanEval/142", "prompt": "def sum_squares(lst):\t\n'''This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a multiple of 3. It will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    '''", "pass@10": true, "passes": 3}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array. A sub-array is a contiguous part of the array. It can be as small as one single element or span the entire array. of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 4}
{"task_id": "HumanEval/114", "prompt": "def minSubArraySum(nums):\t\n'''Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    '''", "pass@10": true, "passes": 9}
