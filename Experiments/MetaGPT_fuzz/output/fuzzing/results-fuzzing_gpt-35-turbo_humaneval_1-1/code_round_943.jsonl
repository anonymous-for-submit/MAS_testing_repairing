{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a specified number n, find the largest number less than n that divides n evenly.\n>>> largest_divisor(15)\n    5\n    '''", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": ["def check(largest_divisor):\n\tassert largest_divisor(47) == 1", "def check(largest_divisor):\n\tassert largest_divisor(98) == 49", "def check(largest_divisor):\n\tassert largest_divisor(104) == 52", "def check(largest_divisor):\n\tassert largest_divisor(51) == 17", "def check(largest_divisor):\n\tassert largest_divisor(10) == 5", "def check(largest_divisor):\n\tassert largest_divisor(53) == 1", "def check(largest_divisor):\n\tassert largest_divisor(3) == 1", "def check(largest_divisor):\n\tassert largest_divisor(95) == 19", "def check(largest_divisor):\n\tassert largest_divisor(44) == 22", "def check(largest_divisor):\n\tassert largest_divisor(8) == 4", "def check(largest_divisor):\n\tassert largest_divisor(4) == 2", "def check(largest_divisor):\n\tassert largest_divisor(103) == 1", "def check(largest_divisor):\n\tassert largest_divisor(11) == 1", "def check(largest_divisor):\n\tassert largest_divisor(46) == 23", "def check(largest_divisor):\n\tassert largest_divisor(49) == 7", "def check(largest_divisor):\n\tassert largest_divisor(13) == 1", "def check(largest_divisor):\n\tassert largest_divisor(14) == 7", "def check(largest_divisor):\n\tassert largest_divisor(54) == 27", "def check(largest_divisor):\n\tassert largest_divisor(99) == 33", "def check(largest_divisor):\n\tassert largest_divisor(45) == 15", "def check(largest_divisor):\n\tassert largest_divisor(9) == 3", "def check(largest_divisor):\n\tassert largest_divisor(7) == 1", "def check(largest_divisor):\n\tassert largest_divisor(100) == 50", "def check(largest_divisor):\n\tassert largest_divisor(6) == 3", "def check(largest_divisor):\n\tassert largest_divisor(48) == 24", "def check(largest_divisor):\n\tassert largest_divisor(15) == 5", "def check(largest_divisor):\n\tassert largest_divisor(101) == 1", "def check(largest_divisor):\n\tassert largest_divisor(97) == 1", "def check(largest_divisor):\n\tassert largest_divisor(12) == 6", "def check(largest_divisor):\n\tassert largest_divisor(105) == 35", "def check(largest_divisor):\n\tassert largest_divisor(5) == 1", "def check(largest_divisor):\n\tassert largest_divisor(2) == 1", "def check(largest_divisor):\n\tassert largest_divisor(102) == 51"], "test_case_list": ["assert largest_divisor(47) == 1", "assert largest_divisor(98) == 49", "assert largest_divisor(104) == 52", "assert largest_divisor(51) == 17", "assert largest_divisor(10) == 5", "assert largest_divisor(53) == 1", "assert largest_divisor(3) == 1", "assert largest_divisor(95) == 19", "assert largest_divisor(44) == 22", "assert largest_divisor(8) == 4", "assert largest_divisor(4) == 2", "assert largest_divisor(103) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(46) == 23", "assert largest_divisor(49) == 7", "assert largest_divisor(13) == 1", "assert largest_divisor(14) == 7", "assert largest_divisor(54) == 27", "assert largest_divisor(99) == 33", "assert largest_divisor(45) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(7) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(6) == 3", "assert largest_divisor(48) == 24", "assert largest_divisor(15) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(97) == 1", "assert largest_divisor(12) == 6", "assert largest_divisor(105) == 35", "assert largest_divisor(5) == 1", "assert largest_divisor(2) == 1", "assert largest_divisor(102) == 51"], "nl": " For a given number n, find the largest number that divides n evenly, smaller than n\n    ", "func": "def largest_divisor(n: int) -> int:", "examples": ">>> largest_divisor(15)\n    5\n    ", "completions": ["from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a specified number n, find the largest number less than n that divides n evenly.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        An integer representing the largest divisor of n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a specified number n, find the largest number less than n that divides n evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\nimport math\n\ndef largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            largest = max(largest, i, n // i)\n    return largest\n", "from typing import List\n## main.py\n\nimport math\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number.\n\n    Args:\n        n: An integer number.\n\n    Returns:\n        int: The largest divisor of the input number.\n    \"\"\"\n    largest = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            largest = max(largest, i, n // i)\n    \n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a specified number n, find the largest number less than n that divides n evenly.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        An integer representing the largest divisor of n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\nimport math\n\ndef largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            largest = max(largest, i, n // i)\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a specified number n, find the largest number less than n that divides n evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1\n", "from typing import List\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest divisor of a given number.\n\n    Args:\n    n: An integer to find the largest divisor for.\n\n    Returns:\n    int: The largest divisor of the given number.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n    return 1\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''For a specified number n, find the largest number less than n that divides n evenly.\n    >>> largest_divisor(15)\n    5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a specified number n, find the largest number less than n that divides n evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n"], "plans": ["requirement pool:\n- Efficiently find the largest divisor for any given number\n- Ensure accurate division results for all cases\n- Optimize performance to handle large numbers effectively\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement a function to efficiently find the largest divisor of a given number\n- Ensure the function returns the correct divisor that evenly divides the input number\n- Optimize the algorithm for performance, especially with large input numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "We will implement the largest_divisor function using basic Python syntax and the math library to find the largest divisor less than n.\n", "We will use the math library in Python to find the largest divisor of a given number.\n", "requirement pool:\n- Implement a function that efficiently finds the largest divisor of a given number\n- Ensure the function handles edge cases like prime numbers and negative numbers\n- Optimize the algorithm for performance to handle large input values\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "We will implement the largest_divisor function using basic Python syntax and the math library to find the largest divisor less than n.\n", "requirement analysis:\nThe main goal is to efficiently find the largest divisor of a given number while ensuring accuracy and performance, especially for large numbers. The algorithm should be optimized to handle various input sizes effectively.\nrequirement pool:\n- Implement an efficient algorithm to find the largest divisor of a number\n- Ensure the algorithm provides accurate results for all input numbers\n- Optimize the algorithm's performance for handling large numbers\nWe will design a static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "We will use a simple approach to find the largest divisor of a given number by iterating from n-1 to 1 and checking divisibility.\n", "requirement pool:\n- Efficiently find the largest divisor for any given number\n- Ensure accurate and precise division results\n- Optimize performance to handle large numbers effectively\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement an efficient algorithm to find the largest divisor of a number\n- Ensure the algorithm handles edge cases and special numbers correctly\n- Optimize the algorithm for performance, especially with large input numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33], "completion": "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a specified number n, find the largest number less than n that divides n evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "passed": true, "pass": true, "pass_num": 10, "round": 943, "repair_prompt": ["def largest_divisor(n: int) -> int:\t\n'''For a specified number n, find the largest number less than n that divides n evenly.\n>>> largest_divisor(15)\n    5\n    '''"], "mutate_method": "rephrase_one", "parent_index": 617}
