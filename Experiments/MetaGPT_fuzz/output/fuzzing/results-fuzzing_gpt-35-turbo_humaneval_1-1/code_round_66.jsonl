{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    Make sure to consider both uppercase and lowercase letters in the string for your check.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": ["def check(is_happy):\n\tassert is_happy(\"vjbekznsr\") == True", "def check(is_happy):\n\tassert is_happy(\"adktufdnx\") == True", "def check(is_happy):\n\tassert is_happy(\"ekzerpbq\") == True", "def check(is_happy):\n\tassert is_happy(\"nkoeh\") == True", "def check(is_happy):\n\tassert is_happy(\"kjba\") == True", "def check(is_happy):\n\tassert is_happy(\"swh\") == True", "def check(is_happy):\n\tassert is_happy(\"ykq\") == True", "def check(is_happy):\n\tassert is_happy(\"mwi\") == True", "def check(is_happy):\n\tassert is_happy(\"dmseyemg\") == False", "def check(is_happy):\n\tassert is_happy(\"lmsegi\") == True", "def check(is_happy):\n\tassert is_happy(\"aa\") == False , \"aa\"", "def check(is_happy):\n\tassert is_happy(\"osfqkfsjs\") == False", "def check(is_happy):\n\tassert is_happy(\"pnglo\") == True", "def check(is_happy):\n\tassert is_happy(\"hne\") == True", "def check(is_happy):\n\tassert is_happy(\"ihhyzk\") == False", "def check(is_happy):\n\tassert is_happy(\"sda\") == True", "def check(is_happy):\n\tassert is_happy(\"hoijog\") == True", "def check(is_happy):\n\tassert is_happy(\"vskqbz\") == True", "def check(is_happy):\n\tassert is_happy(\"edbikgtricp\") == True", "def check(is_happy):\n\tassert is_happy(\"jllyluo\") == False", "def check(is_happy):\n\tassert is_happy(\"freva\") == True", "def check(is_happy):\n\tassert is_happy(\"gxts\") == True", "def check(is_happy):\n\tassert is_happy(\"yygnlyoas\") == False", "def check(is_happy):\n\tassert is_happy(\"cdlq\") == True", "def check(is_happy):\n\tassert is_happy(\"qylehtb\") == True", "def check(is_happy):\n\tassert is_happy(\"xpm\") == True", "def check(is_happy):\n\tassert is_happy(\"tcnk\") == True", "def check(is_happy):\n\tassert is_happy(\"p\") == False", "def check(is_happy):\n\tassert is_happy(\"tskgwrb\") == True", "def check(is_happy):\n\tassert is_happy(\"gnntvon\") == False", "def check(is_happy):\n\tassert is_happy(\"qwbjwaiu\") == True", "def check(is_happy):\n\tassert is_happy(\"pgmq\") == True", "def check(is_happy):\n\tassert is_happy(\"b\") == False", "def check(is_happy):\n\tassert is_happy(\"kjcceshvfwai\") == False", "def check(is_happy):\n\tassert is_happy(\"qmxibr\") == True", "def check(is_happy):\n\tassert is_happy(\"pzofkfvtw\") == False", "def check(is_happy):\n\tassert is_happy(\"cpbecycwj\") == False", "def check(is_happy):\n\tassert is_happy(\"ldi\") == True", "def check(is_happy):\n\tassert is_happy(\"ydkfa\") == True", "def check(is_happy):\n\tassert is_happy(\"s\") == False", "def check(is_happy):\n\tassert is_happy(\"xyy\") == False , \"xyy\"", "def check(is_happy):\n\tassert is_happy(\"aabb\") == False , \"aabb\"", "def check(is_happy):\n\tassert is_happy(\"ccnybors\") == False", "def check(is_happy):\n\tassert is_happy(\"cyqfh\") == True", "def check(is_happy):\n\tassert is_happy(\"v\") == False", "def check(is_happy):\n\tassert is_happy(\"pqftbntafqcl\") == True", "def check(is_happy):\n\tassert is_happy(\"abcd\") == True , \"abcd\"", "def check(is_happy):\n\tassert is_happy(\"imc\") == True", "def check(is_happy):\n\tassert is_happy(\"bldcxi\") == True", "def check(is_happy):\n\tassert is_happy(\"syvkwfj\") == True", "def check(is_happy):\n\tassert is_happy(\"mkbrgekb\") == True", "def check(is_happy):\n\tassert is_happy(\"asszruuw\") == False", "def check(is_happy):\n\tassert is_happy(\"xivc\") == True", "def check(is_happy):\n\tassert is_happy(\"eovqv\") == False", "def check(is_happy):\n\tassert is_happy(\"qcrtlo\") == True", "def check(is_happy):\n\tassert is_happy(\"khapsq\") == True", "def check(is_happy):\n\tassert is_happy(\"w\") == False", "def check(is_happy):\n\tassert is_happy(\"ryrr\") == False", "def check(is_happy):\n\tassert is_happy(\"adb\") == True , \"adb\"", "def check(is_happy):\n\tassert is_happy(\"mdg\") == True", "def check(is_happy):\n\tassert is_happy(\"f\") == False", "def check(is_happy):\n\tassert is_happy(\"vmxdsmtbksb\") == True", "def check(is_happy):\n\tassert is_happy(\"ajtrhb\") == True", "def check(is_happy):\n\tassert is_happy(\"hgfqilrj\") == True", "def check(is_happy):\n\tassert is_happy(\"wioqbm\") == True", "def check(is_happy):\n\tassert is_happy(\"lwpm\") == True", "def check(is_happy):\n\tassert is_happy(\"ishkix\") == True", "def check(is_happy):\n\tassert is_happy(\"uxgftzdyg\") == True", "def check(is_happy):\n\tassert is_happy(\"tgglbg\") == False", "def check(is_happy):\n\tassert is_happy(\"fyewnyygb\") == False", "def check(is_happy):\n\tassert is_happy(\"vsgjt\") == True", "def check(is_happy):\n\tassert is_happy(\"jsfnqiht\") == True", "def check(is_happy):\n\tassert is_happy(\"ujeo\") == True", "def check(is_happy):\n\tassert is_happy(\"znngeaumx\") == False", "def check(is_happy):\n\tassert is_happy(\"h\") == False", "def check(is_happy):\n\tassert is_happy(\"rjqhznla\") == True", "def check(is_happy):\n\tassert is_happy(\"mpiumqqx\") == False", "def check(is_happy):\n\tassert is_happy(\"a\") == False , \"a\"", "def check(is_happy):\n\tassert is_happy(\"vdxot\") == True", "def check(is_happy):\n\tassert is_happy(\"dyoywxi\") == False", "def check(is_happy):\n\tassert is_happy(\"gylbrpyqiuw\") == True", "def check(is_happy):\n\tassert is_happy(\"yauwdcsfcwr\") == True", "def check(is_happy):\n\tassert is_happy(\"xzyzwrab\") == False", "def check(is_happy):\n\tassert is_happy(\"bhkokspiry\") == False", "def check(is_happy):\n\tassert is_happy(\"ipjy\") == True", "def check(is_happy):\n\tassert is_happy(\"dpvxqd\") == True", "def check(is_happy):\n\tassert is_happy(\"mckptsntv\") == True", "def check(is_happy):\n\tassert is_happy(\"gitokkmmex\") == False", "def check(is_happy):\n\tassert is_happy(\"uimsvgvy\") == False", "def check(is_happy):\n\tassert is_happy(\"xckdiwjz\") == True", "def check(is_happy):\n\tassert is_happy(\"dktydg\") == True", "def check(is_happy):\n\tassert is_happy(\"jjzdrfcxx\") == False", "def check(is_happy):\n\tassert is_happy(\"rajomlaz\") == True", "def check(is_happy):\n\tassert is_happy(\"zrqkybwt\") == True", "def check(is_happy):\n\tassert is_happy(\"hcp\") == True", "def check(is_happy):\n\tassert is_happy(\"jgrvcizhi\") == True", "def check(is_happy):\n\tassert is_happy(\"d\") == False", "def check(is_happy):\n\tassert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "def check(is_happy):\n\tassert is_happy(\"y\") == False", "def check(is_happy):\n\tassert is_happy(\"lsm\") == True", "def check(is_happy):\n\tassert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "def check(is_happy):\n\tassert is_happy(\"n\") == False", "def check(is_happy):\n\tassert is_happy(\"ioruvha\") == True", "def check(is_happy):\n\tassert is_happy(\"hevkrepn\") == True", "def check(is_happy):\n\tassert is_happy(\"g\") == False", "def check(is_happy):\n\tassert is_happy(\"i\") == False", "def check(is_happy):\n\tassert is_happy(\"kxqis\") == True", "def check(is_happy):\n\tassert is_happy(\"xrc\") == True", "def check(is_happy):\n\tassert is_happy(\"qfychpkht\") == True", "def check(is_happy):\n\tassert is_happy(\"vorlwobo\") == False"], "test_case_list": ["assert is_happy(\"vjbekznsr\") == True", "assert is_happy(\"adktufdnx\") == True", "assert is_happy(\"ekzerpbq\") == True", "assert is_happy(\"nkoeh\") == True", "assert is_happy(\"kjba\") == True", "assert is_happy(\"swh\") == True", "assert is_happy(\"ykq\") == True", "assert is_happy(\"mwi\") == True", "assert is_happy(\"dmseyemg\") == False", "assert is_happy(\"lmsegi\") == True", "assert is_happy(\"aa\") == False , \"aa\"", "assert is_happy(\"osfqkfsjs\") == False", "assert is_happy(\"pnglo\") == True", "assert is_happy(\"hne\") == True", "assert is_happy(\"ihhyzk\") == False", "assert is_happy(\"sda\") == True", "assert is_happy(\"hoijog\") == True", "assert is_happy(\"vskqbz\") == True", "assert is_happy(\"edbikgtricp\") == True", "assert is_happy(\"jllyluo\") == False", "assert is_happy(\"freva\") == True", "assert is_happy(\"gxts\") == True", "assert is_happy(\"yygnlyoas\") == False", "assert is_happy(\"cdlq\") == True", "assert is_happy(\"qylehtb\") == True", "assert is_happy(\"xpm\") == True", "assert is_happy(\"tcnk\") == True", "assert is_happy(\"p\") == False", "assert is_happy(\"tskgwrb\") == True", "assert is_happy(\"gnntvon\") == False", "assert is_happy(\"qwbjwaiu\") == True", "assert is_happy(\"pgmq\") == True", "assert is_happy(\"b\") == False", "assert is_happy(\"kjcceshvfwai\") == False", "assert is_happy(\"qmxibr\") == True", "assert is_happy(\"pzofkfvtw\") == False", "assert is_happy(\"cpbecycwj\") == False", "assert is_happy(\"ldi\") == True", "assert is_happy(\"ydkfa\") == True", "assert is_happy(\"s\") == False", "assert is_happy(\"xyy\") == False , \"xyy\"", "assert is_happy(\"aabb\") == False , \"aabb\"", "assert is_happy(\"ccnybors\") == False", "assert is_happy(\"cyqfh\") == True", "assert is_happy(\"v\") == False", "assert is_happy(\"pqftbntafqcl\") == True", "assert is_happy(\"abcd\") == True , \"abcd\"", "assert is_happy(\"imc\") == True", "assert is_happy(\"bldcxi\") == True", "assert is_happy(\"syvkwfj\") == True", "assert is_happy(\"mkbrgekb\") == True", "assert is_happy(\"asszruuw\") == False", "assert is_happy(\"xivc\") == True", "assert is_happy(\"eovqv\") == False", "assert is_happy(\"qcrtlo\") == True", "assert is_happy(\"khapsq\") == True", "assert is_happy(\"w\") == False", "assert is_happy(\"ryrr\") == False", "assert is_happy(\"adb\") == True , \"adb\"", "assert is_happy(\"mdg\") == True", "assert is_happy(\"f\") == False", "assert is_happy(\"vmxdsmtbksb\") == True", "assert is_happy(\"ajtrhb\") == True", "assert is_happy(\"hgfqilrj\") == True", "assert is_happy(\"wioqbm\") == True", "assert is_happy(\"lwpm\") == True", "assert is_happy(\"ishkix\") == True", "assert is_happy(\"uxgftzdyg\") == True", "assert is_happy(\"tgglbg\") == False", "assert is_happy(\"fyewnyygb\") == False", "assert is_happy(\"vsgjt\") == True", "assert is_happy(\"jsfnqiht\") == True", "assert is_happy(\"ujeo\") == True", "assert is_happy(\"znngeaumx\") == False", "assert is_happy(\"h\") == False", "assert is_happy(\"rjqhznla\") == True", "assert is_happy(\"mpiumqqx\") == False", "assert is_happy(\"a\") == False , \"a\"", "assert is_happy(\"vdxot\") == True", "assert is_happy(\"dyoywxi\") == False", "assert is_happy(\"gylbrpyqiuw\") == True", "assert is_happy(\"yauwdcsfcwr\") == True", "assert is_happy(\"xzyzwrab\") == False", "assert is_happy(\"bhkokspiry\") == False", "assert is_happy(\"ipjy\") == True", "assert is_happy(\"dpvxqd\") == True", "assert is_happy(\"mckptsntv\") == True", "assert is_happy(\"gitokkmmex\") == False", "assert is_happy(\"uimsvgvy\") == False", "assert is_happy(\"xckdiwjz\") == True", "assert is_happy(\"dktydg\") == True", "assert is_happy(\"jjzdrfcxx\") == False", "assert is_happy(\"rajomlaz\") == True", "assert is_happy(\"zrqkybwt\") == True", "assert is_happy(\"hcp\") == True", "assert is_happy(\"jgrvcizhi\") == True", "assert is_happy(\"d\") == False", "assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "assert is_happy(\"y\") == False", "assert is_happy(\"lsm\") == True", "assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "assert is_happy(\"n\") == False", "assert is_happy(\"ioruvha\") == True", "assert is_happy(\"hevkrepn\") == True", "assert is_happy(\"g\") == False", "assert is_happy(\"i\") == False", "assert is_happy(\"kxqis\") == True", "assert is_happy(\"xrc\") == True", "assert is_happy(\"qfychpkht\") == True", "assert is_happy(\"vorlwobo\") == False"], "nl": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    ", "func": "def is_happy(s):", "examples": "For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    ", "completions": ["from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    seen = set()\n    while s != \"1\" and s not in seen:\n        seen.add(s)\n        s = str(sum(int(digit)**2 for digit in s))\n    return s == \"1\"\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is happy based on the given criteria.\n\n    Args:\n    - s: a string to be checked for happiness\n\n    Returns:\n    - bool: True if the string is happy, False otherwise\n    \"\"\"\n\n    if len(s) < 3:\n        return False\n\n    # Convert the string to lowercase for case-insensitive comparison\n    s_lower = s.lower()\n\n    # Check if the string contains 'happy' in any case\n    if 'happy' in s_lower:\n        return True\n    else:\n        return False\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    Consider both uppercase and lowercase letters.\n    Args:\n        s (str): The input string to check.\n    Returns:\n        bool: True if the string is happy, False otherwise.\n    '''\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i].lower() == s[i+1].lower() or s[i].lower() == s[i+2].lower() or s[i+1].lower() == s[i+2].lower():\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy based on defined criteria.\n    Args:\n        s (str): Input string to check\n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    \n    # Define a set to store seen characters\n    seen = set()\n    \n    # Iterate through the characters in the string\n    while s != '1' and s not in seen:\n        seen.add(s)\n        s = str(sum(int(digit)**2 for digit in s))\n    \n    return s == '1'\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    Consider both uppercase and lowercase letters.\n    \n    Args:\n        s (str): Input string to evaluate happiness\n    \n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i].lower() == s[i+1].lower() or s[i].lower() == s[i+2].lower() or s[i+1].lower() == s[i+2].lower():\n            return False\n    \n    return True\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is 'happy' based on the given criteria.\n\n    Args:\n    - s: a string to be evaluated\n\n    Returns:\n    - bool: True if the string is 'happy' based on the criteria, False otherwise\n    \"\"\"\n\n    # Check if the string is empty\n    if not s:\n        return False\n\n    # Initialize a set to store seen numbers\n    seen = set()\n\n    # Loop until we either reach 1 (happy) or enter a cycle (unhappy)\n    while s != '1' and s not in seen:\n        seen.add(s)\n        s = sum(int(digit) ** 2 for digit in s)\n\n    # Return True if the final result is 1, False otherwise\n    return s == '1'\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy based on the defined criteria.\n    Args:\n        s (str): The input string to be checked.\n    Returns:\n        bool: True if the string is happy, False otherwise.\n    '''\n    # Check if the string is empty\n    if not s:\n        return False\n    \n    # Initialize a set to store seen characters\n    seen = set()\n    \n    # Iterate through the string\n    while s != '1':\n        # Calculate the sum of squares of digits\n        total = sum(int(digit)**2 for digit in s)\n        \n        # Check if the total is already seen\n        if total in seen:\n            return False\n        \n        # Add the total to the seen set\n        seen.add(total)\n        \n        # Update the string with the new total\n        s = str(total)\n    \n    return True\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is 'happy' based on the defined criteria.\n\n    Args:\n        s (str): The input string to check\n\n    Returns:\n        bool: True if the string is 'happy', False otherwise\n    \"\"\"\n    # Convert the input string to lowercase for case-insensitive comparison\n    s_lower = s.lower()\n\n    # Define the criteria for a 'happy' string\n    happy_criteria = ['h', 'a', 'p', 'p', 'y']\n\n    # Check if the input string contains all the letters in the 'happy' criteria\n    for letter in happy_criteria:\n        if letter not in s_lower:\n            return False\n\n    return True\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is 'happy' based on the defined criteria.\n\n    Args:\n        s (str): The input string to be evaluated\n\n    Returns:\n        bool: True if the string is 'happy', False otherwise\n    \"\"\"\n    # Define the criteria for a 'happy' string\n    happy_criteria = ['h', 'a', 'p', 'p', 'y']\n\n    # Check if the input string matches the 'happy' criteria\n    if len(s) != len(happy_criteria):\n        return False\n\n    for i in range(len(s)):\n        if s[i] != happy_criteria[i]:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy based on given criteria.\n    Args:\n        s (str): Input string to evaluate\n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    \n    def calculate_happy_number(num: int) -> int:\n        result = 0\n        while num > 0:\n            digit = num % 10\n            result += digit ** 2\n            num //= 10\n        return result\n    \n    seen = set()\n    while True:\n        s = sum(int(digit) ** 2 for digit in str(s))\n        if s == 1:\n            return True\n        if s in seen:\n            return False\n        seen.add(s)\n        s = calculate_happy_number(s)\n"], "plans": ["requirement pool:\n- Implement a function that efficiently checks if a string is 'happy'\n- Ensure the function considers both uppercase and lowercase letters\n- Optimize the function to handle strings of varying lengths\nWe will use basic string manipulation and set data structure in Python to efficiently check if a string is 'happy'.\n", "requirement pool:\n- Implement a function to check if a string is happy based on given criteria\n- Consider both uppercase and lowercase letters in the string\n- Ensure the string length is at least 3 characters\nWe will design a simple static Python function to check if a string is happy based on the given criteria. We will use basic string manipulation and comparison techniques to efficiently handle both uppercase and lowercase letters while ensuring the string length is at least 3 characters.\n", "requirement pool:\n- Implement a function to check if a string is happy based on given criteria\n- Consider both uppercase and lowercase letters in the string check\n- Ensure the string length is at least 3 characters\nWe will use Python and the built-in functions to efficiently check if a string is happy based on the given criteria.\n", "requirement pool:\n- Implement a function that efficiently checks if a string is 'happy'\n- Ensure the function considers both uppercase and lowercase letters\n- Optimize the function to handle strings of varying lengths\nWe will use basic string manipulation and set data structure in Python to efficiently check if a string is 'happy'.\n", "requirement pool:\n- Implement a function to check if a string is 'happy' based on given criteria\n- Ensure the function considers both uppercase and lowercase letters\n- Optimize the algorithm for efficiency and accuracy\nWe will design a simple static Python function to check if a string is 'happy' based on the given criteria. We will utilize basic string manipulation and comparison techniques to efficiently evaluate the happiness of the string.\n", "requirement pool:\n- Implement a function to check if a string is 'happy' based on given criteria\n- Ensure the function considers both uppercase and lowercase letters\n- Optimize the function for efficient processing of large strings\nWe will design a simple static Python function to check if a string is 'happy' based on the given criteria. We will utilize basic string manipulation and comparison techniques to achieve the desired functionality.\n", "requirement pool:\n- Implement the logic to check if a string is 'happy' based on given criteria\n- Ensure the function considers both uppercase and lowercase letters in the string\n- Write test cases to validate the function's correctness for various input scenarios\nWe will use a simple approach to iterate through the string and check for happy conditions without using any external libraries.\n", "requirement pool:\n- Implement the function to check if a string is 'happy' based on given criteria\n- Ensure the function considers both uppercase and lowercase letters\n- Test the function with various input cases to validate correctness\nWe will design a simple static Python function to check if a string is 'happy' based on the defined criteria. We will use basic string manipulation and comparison techniques to efficiently handle both uppercase and lowercase letters.\n", "requirement pool:\n- Implement a function to check if a string is 'happy' based on defined criteria\n- Ensure the function handles both uppercase and lowercase letters in the string\n- Optimize the algorithm for efficient evaluation of string happiness\nWe will design a simple static Python function to check if a string is 'happy' based on the defined criteria. We will use basic string manipulation and comparison techniques to efficiently evaluate the happiness of the string.\n", "requirement pool:\n- Implement a function to check if a string is happy based on given criteria\n- Ensure the function handles both uppercase and lowercase letters\n- Optimize the function for efficiency in evaluating string happiness\nWe will use basic Python functions and libraries to implement the is_happy function.\n"], "scores": [0.0, 0.3727, 1.0, 0.0, 1.0, 0.0, 0.0, 0.3727, 0.3727, 0.0], "pass_results": [false, false, true, false, true, false, false, false, false, false], "pass_test_cases_num": [0, 41, 110, 0, 110, 0, 0, 41, 41, 0], "completion": "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy based on given criteria.\n    Args:\n        s (str): Input string to evaluate\n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    \n    def calculate_happy_number(num: int) -> int:\n        result = 0\n        while num > 0:\n            digit = num % 10\n            result += digit ** 2\n            num //= 10\n        return result\n    \n    seen = set()\n    while True:\n        s = sum(int(digit) ** 2 for digit in str(s))\n        if s == 1:\n            return True\n        if s in seen:\n            return False\n        seen.add(s)\n        s = calculate_happy_number(s)\n", "passed": true, "pass": true, "pass_num": 2, "round": 66, "repair_prompt": ["def is_happy(s):\t\n'''You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    Make sure to consider both uppercase and lowercase letters in the string for your check.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''"], "mutate_method": "add_1_sentence_at_end", "parent_index": 66}
