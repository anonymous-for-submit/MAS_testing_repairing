{"task_id": "HumanEval/155", "prompt": "def even_odd_count(num):\t\n'''Given an integer. produce a tuple containing the count of even digits and the count of odd digits separately.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''", "entry_point": "even_odd_count", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": ["def check(even_odd_count):\n\tassert even_odd_count(7) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-80) == (2, 0)", "def check(even_odd_count):\n\tassert even_odd_count(345577) == (1, 5)", "def check(even_odd_count):\n\tassert even_odd_count(2) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(345308) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-4) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.", "def check(even_odd_count):\n\tassert even_odd_count(345501) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(-76) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345816) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45352) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45351) == (1, 4)", "def check(even_odd_count):\n\tassert even_odd_count(2450) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345822) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3171) == (0, 4)", "def check(even_odd_count):\n\tassert even_odd_count(-75) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-45348) == (3, 2)", "def check(even_odd_count):\n\tassert even_odd_count(1) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(346175) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(4) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(345265) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45345) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-74) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345819) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(345360) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(3452) == (2, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3347) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-345820) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-45343) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-45347) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(346787) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-2) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-345821) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-77) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-73) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-79) == (0, 2)", "def check(even_odd_count):\n\tassert even_odd_count(345858) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(346658) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(10) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(345794) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(346614) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3987) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(9) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-5) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(347145) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(4207) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-45344) == (3, 2)", "def check(even_odd_count):\n\tassert even_odd_count(3949) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(3) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-82) == (2, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-81) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-45349) == (2, 3)", "def check(even_odd_count):\n\tassert even_odd_count(346547) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(5) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-45346) == (3, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-345817) == (2, 4)", "def check(even_odd_count):\n\tassert even_odd_count(12) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(3444) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(3981) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(0) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-3) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(346081) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-345823) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(8) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(3015) == (1, 3)", "def check(even_odd_count):\n\tassert even_odd_count(3724) == (2, 2)", "def check(even_odd_count):\n\tassert even_odd_count(345220) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(346211) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-78) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(2810) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(2650) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-83) == (1, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345824) == (4, 2)", "def check(even_odd_count):\n\tassert even_odd_count(-345818) == (3, 3)", "def check(even_odd_count):\n\tassert even_odd_count(-6) == (1, 0)", "def check(even_odd_count):\n\tassert even_odd_count(-7) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(2708) == (3, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-1) == (0, 1)", "def check(even_odd_count):\n\tassert even_odd_count(-345825) == (3, 3)"], "test_case_list": ["assert even_odd_count(7) == (0, 1)", "assert even_odd_count(-80) == (2, 0)", "assert even_odd_count(345577) == (1, 5)", "assert even_odd_count(2) == (1, 0)", "assert even_odd_count(345308) == (3, 3)", "assert even_odd_count(-4) == (1, 0)", "assert even_odd_count(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.", "assert even_odd_count(345501) == (2, 4)", "assert even_odd_count(-76) == (1, 1)", "assert even_odd_count(-345816) == (3, 3)", "assert even_odd_count(-45352) == (2, 3)", "assert even_odd_count(-45351) == (1, 4)", "assert even_odd_count(2450) == (3, 1)", "assert even_odd_count(-345822) == (4, 2)", "assert even_odd_count(3171) == (0, 4)", "assert even_odd_count(-75) == (0, 2)", "assert even_odd_count(-45348) == (3, 2)", "assert even_odd_count(1) == (0, 1)", "assert even_odd_count(346175) == (2, 4)", "assert even_odd_count(4) == (1, 0)", "assert even_odd_count(345265) == (3, 3)", "assert even_odd_count(-45345) == (2, 3)", "assert even_odd_count(-74) == (1, 1)", "assert even_odd_count(-345819) == (2, 4)", "assert even_odd_count(345360) == (3, 3)", "assert even_odd_count(3452) == (2, 2)", "assert even_odd_count(3347) == (1, 3)", "assert even_odd_count(-345820) == (4, 2)", "assert even_odd_count(-45343) == (2, 3)", "assert even_odd_count(-45347) == (2, 3)", "assert even_odd_count(346787) == (3, 3)", "assert even_odd_count(-2) == (1, 0)", "assert even_odd_count(-345821) == (3, 3)", "assert even_odd_count(-77) == (0, 2)", "assert even_odd_count(-73) == (0, 2)", "assert even_odd_count(-79) == (0, 2)", "assert even_odd_count(345858) == (3, 3)", "assert even_odd_count(346658) == (4, 2)", "assert even_odd_count(10) == (1, 1)", "assert even_odd_count(345794) == (2, 4)", "assert even_odd_count(346614) == (4, 2)", "assert even_odd_count(3987) == (1, 3)", "assert even_odd_count(9) == (0, 1)", "assert even_odd_count(-5) == (0, 1)", "assert even_odd_count(347145) == (2, 4)", "assert even_odd_count(4207) == (3, 1)", "assert even_odd_count(-45344) == (3, 2)", "assert even_odd_count(3949) == (1, 3)", "assert even_odd_count(3) == (0, 1)", "assert even_odd_count(-82) == (2, 0)", "assert even_odd_count(-81) == (1, 1)", "assert even_odd_count(-45349) == (2, 3)", "assert even_odd_count(346547) == (3, 3)", "assert even_odd_count(5) == (0, 1)", "assert even_odd_count(-45346) == (3, 2)", "assert even_odd_count(-345817) == (2, 4)", "assert even_odd_count(12) == (1, 1)", "assert even_odd_count(3444) == (3, 1)", "assert even_odd_count(3981) == (1, 3)", "assert even_odd_count(0) == (1, 0)", "assert even_odd_count(-3) == (0, 1)", "assert even_odd_count(346081) == (4, 2)", "assert even_odd_count(-345823) == (3, 3)", "assert even_odd_count(8) == (1, 0)", "assert even_odd_count(3015) == (1, 3)", "assert even_odd_count(3724) == (2, 2)", "assert even_odd_count(345220) == (4, 2)", "assert even_odd_count(346211) == (3, 3)", "assert even_odd_count(-78) == (1, 1)", "assert even_odd_count(2810) == (3, 1)", "assert even_odd_count(2650) == (3, 1)", "assert even_odd_count(-83) == (1, 1)", "assert even_odd_count(-345824) == (4, 2)", "assert even_odd_count(-345818) == (3, 3)", "assert even_odd_count(-6) == (1, 0)", "assert even_odd_count(-7) == (0, 1)", "assert even_odd_count(2708) == (3, 1)", "assert even_odd_count(-1) == (0, 1)", "assert even_odd_count(-345825) == (3, 3)"], "nl": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     ", "func": "def even_odd_count(num):", "examples": "Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    ", "completions": ["from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))  # Convert the absolute value of num to a string for easier iteration\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))  # Convert the absolute value of num to a string for easier iteration\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))  # Convert the absolute value of num to a string for easier iteration\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if num < 0:\n        even_count -= 1  # Adjust even count if the number was negative\n    \n    return even_count, odd_count\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))  # Convert the absolute value of num to a string\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\n## main.py\n\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))  # Convert the absolute value of num to a string for easier iteration\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    \n    Args:\n        num (int): The input integer\n    \n    Returns:\n        tuple: A tuple containing the count of even digits and the count of odd digits\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, produce a tuple containing the count of even digits and the count of odd digits separately.\n    Example:\n            even_odd_count(-12) ==> (1, 1)\n            even_odd_count(123) ==> (1, 2)\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(abs(num))  # Convert the absolute value of num to a string for easier iteration\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, return a tuple containing the count of even digits and the count of odd digits separately.\n    \n    Parameters:\n        num (int): The input integer\n    \n    Returns:\n        tuple: A tuple containing the count of even digits and the count of odd digits\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "from typing import List\n## even_odd_counter.py\n\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, return a tuple containing the count of even digits and the count of odd digits separately.\n    \n    :param num: int - the input integer\n    :return: tuple - (count of even digits, count of odd digits)\n    '''\n    \n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n"], "plans": ["requirement pool:\n- Handle both positive and negative integers\n- Ensure accurate separation of even and odd counts\n- Optimize the algorithm for efficiency\nWe will use a simple approach to iterate through the digits of the input integer and count the even and odd digits separately.\n", "requirement pool:\n- Handle both positive and negative integers\n- Ensure accurate separation of even and odd counts\n- Optimize the function for efficiency\nWe will design a simple static Python function using basic arithmetic operations to efficiently count even and odd digits in an integer.\n", "requirement pool:\n- Implement a function that correctly counts even and odd digits in an integer\n- Ensure the function handles negative integers appropriately\n- Optimize the algorithm for efficiency\nWe will design a simple static Python function using basic arithmetic operations to count even and odd digits in an integer.\n", "requirement analysis:\nThe requirement is to create a function that takes an integer as input and returns a tuple containing the count of even digits and the count of odd digits separately. The function should handle both positive and negative integers, ensuring accurate separation of even and odd counts.\nrequirement pool:\n- Create a function that correctly counts even and odd digits in an integer\n- Implement error handling for invalid inputs\n- Optimize the function for better performance\nWe will design a simple static Python function using basic arithmetic operations to efficiently count even and odd digits in an integer.\n", "requirement pool:\n- Implement a function that correctly counts even and odd digits in an integer\n- Ensure the function handles negative integers appropriately\n- Optimize the function for efficiency and performance\nWe will design a simple static Python function using basic arithmetic operations to count even and odd digits in an integer.\n", "requirement pool:\n- Implement a function that correctly counts even and odd digits in an integer\n- Ensure the function handles negative integers appropriately\n- Optimize the algorithm for efficiency\nWe will design a simple Python function using basic arithmetic operations to count even and odd digits in an integer.\n", "requirement analysis:\nThe requirement is to create a function that takes an integer as input and returns a tuple containing the count of even digits and the count of odd digits separately. The function should handle both positive and negative integers, ensuring accurate separation of even and odd counts.\nrequirement pool:\n- Implement the function to count even and odd digits in an integer\n- Handle negative integers correctly in the counting process\n- Provide clear examples and documentation for the function\nWe will design a simple static Python function using basic arithmetic operations to count even and odd digits in an integer.\n", "requirement analysis:\nThe requirement is to create a function that takes an integer as input and returns a tuple containing the count of even digits and the count of odd digits separately. The function should handle both positive and negative integers correctly.\nrequirement pool:\n- Implement the function to count even and odd digits separately\n- Handle negative integers appropriately\n- Provide clear examples and documentation for ease of use\nWe will design a simple static Python function using basic arithmetic operations to count even and odd digits in an integer.\n", "requirement pool:\n- Implement a function that correctly counts even and odd digits in an integer\n- Handle negative integers appropriately for accurate digit counting\n- Optimize the algorithm for efficiency in counting digits\nWe will design a simple static Python function using basic arithmetic operations to efficiently count the even and odd digits in an integer.\n", "requirement analysis:\nThe requirement is to create a function that takes an integer as input and returns a tuple containing the count of even digits and the count of odd digits separately. The function should handle both positive and negative integers, ensuring accurate counting and proper separation of even and odd counts.\nrequirement pool:\n- Implement a function that correctly counts even and odd digits in an integer\n- Handle negative integers by considering the negative sign as a digit\n- Ensure the function returns the counts in a tuple format\nWe will design a simple static Python function using basic arithmetic operations to efficiently count even and odd digits in an integer.\n"], "scores": [1.0, 1.0, 1.0, 0.5316, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, true, true, true, true, true, true], "pass_test_cases_num": [79, 79, 79, 42, 79, 79, 79, 79, 79, 79], "completion": "from typing import List\n## even_odd_counter.py\n\ndef even_odd_count(num: int) -> tuple:\n    '''\n    Given an integer, return a tuple containing the count of even digits and the count of odd digits separately.\n    \n    :param num: int - the input integer\n    :return: tuple - (count of even digits, count of odd digits)\n    '''\n    \n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n", "passed": true, "pass": true, "pass_num": 9, "round": 712, "repair_prompt": ["def even_odd_count(num):\t\n'''Given an integer. produce a tuple containing the count of even digits and the count of odd digits separately.\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    '''"], "mutate_method": "rephrase_one", "parent_index": 679}
