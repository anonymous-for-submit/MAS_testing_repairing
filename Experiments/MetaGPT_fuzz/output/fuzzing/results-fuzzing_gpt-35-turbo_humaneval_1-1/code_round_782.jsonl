{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n>>> largest_divisor(15)\n    5\n    '''", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": ["def check(largest_divisor):\n\tassert largest_divisor(47) == 1", "def check(largest_divisor):\n\tassert largest_divisor(98) == 49", "def check(largest_divisor):\n\tassert largest_divisor(104) == 52", "def check(largest_divisor):\n\tassert largest_divisor(51) == 17", "def check(largest_divisor):\n\tassert largest_divisor(10) == 5", "def check(largest_divisor):\n\tassert largest_divisor(53) == 1", "def check(largest_divisor):\n\tassert largest_divisor(3) == 1", "def check(largest_divisor):\n\tassert largest_divisor(95) == 19", "def check(largest_divisor):\n\tassert largest_divisor(44) == 22", "def check(largest_divisor):\n\tassert largest_divisor(8) == 4", "def check(largest_divisor):\n\tassert largest_divisor(4) == 2", "def check(largest_divisor):\n\tassert largest_divisor(103) == 1", "def check(largest_divisor):\n\tassert largest_divisor(11) == 1", "def check(largest_divisor):\n\tassert largest_divisor(46) == 23", "def check(largest_divisor):\n\tassert largest_divisor(49) == 7", "def check(largest_divisor):\n\tassert largest_divisor(13) == 1", "def check(largest_divisor):\n\tassert largest_divisor(14) == 7", "def check(largest_divisor):\n\tassert largest_divisor(54) == 27", "def check(largest_divisor):\n\tassert largest_divisor(99) == 33", "def check(largest_divisor):\n\tassert largest_divisor(45) == 15", "def check(largest_divisor):\n\tassert largest_divisor(9) == 3", "def check(largest_divisor):\n\tassert largest_divisor(7) == 1", "def check(largest_divisor):\n\tassert largest_divisor(100) == 50", "def check(largest_divisor):\n\tassert largest_divisor(6) == 3", "def check(largest_divisor):\n\tassert largest_divisor(48) == 24", "def check(largest_divisor):\n\tassert largest_divisor(15) == 5", "def check(largest_divisor):\n\tassert largest_divisor(101) == 1", "def check(largest_divisor):\n\tassert largest_divisor(97) == 1", "def check(largest_divisor):\n\tassert largest_divisor(12) == 6", "def check(largest_divisor):\n\tassert largest_divisor(105) == 35", "def check(largest_divisor):\n\tassert largest_divisor(5) == 1", "def check(largest_divisor):\n\tassert largest_divisor(2) == 1", "def check(largest_divisor):\n\tassert largest_divisor(102) == 51"], "test_case_list": ["assert largest_divisor(47) == 1", "assert largest_divisor(98) == 49", "assert largest_divisor(104) == 52", "assert largest_divisor(51) == 17", "assert largest_divisor(10) == 5", "assert largest_divisor(53) == 1", "assert largest_divisor(3) == 1", "assert largest_divisor(95) == 19", "assert largest_divisor(44) == 22", "assert largest_divisor(8) == 4", "assert largest_divisor(4) == 2", "assert largest_divisor(103) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(46) == 23", "assert largest_divisor(49) == 7", "assert largest_divisor(13) == 1", "assert largest_divisor(14) == 7", "assert largest_divisor(54) == 27", "assert largest_divisor(99) == 33", "assert largest_divisor(45) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(7) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(6) == 3", "assert largest_divisor(48) == 24", "assert largest_divisor(15) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(97) == 1", "assert largest_divisor(12) == 6", "assert largest_divisor(105) == 35", "assert largest_divisor(5) == 1", "assert largest_divisor(2) == 1", "assert largest_divisor(102) == 51"], "nl": " For a given number n, find the largest number that divides n evenly, smaller than n\n    ", "func": "def largest_divisor(n: int) -> int:", "examples": ">>> largest_divisor(15)\n    5\n    ", "completions": ["from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        An integer representing the largest divisor of n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer to find the largest divisor for.\n        \n    Returns:\n        int: The largest divisor of the given number n.\n        \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\nimport math\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    This function returns the largest divisor of a given number.\n    \n    Args:\n        n: An integer number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \"\"\"\n    largest = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            largest = max(largest, i, n // i)\n    \n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer to find the largest divisor for.\n        \n    Returns:\n        An integer representing the largest divisor of n.\n        \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        An integer representing the largest divisor of n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        An integer representing the largest divisor of the input number n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer to find the largest divisor for.\n        \n    Returns:\n        int: The largest divisor of the given number n.\n        \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer to find the largest divisor for.\n        \n    Returns:\n        An integer representing the largest divisor of n.\n        \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    if n < 2:\n        return 1\n    \n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        An integer representing the largest divisor of n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        int: The largest divisor of the input number n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n"], "plans": ["requirement pool:\n- Implement an efficient algorithm to find the largest divisor\n- Ensure the identified divisor is smaller than the input number\n- Optimize the algorithm for better performance\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement an efficient algorithm to find the largest divisor of a number\n- Ensure the algorithm can handle very large numbers without performance issues\n- Optimize the code for speed and accuracy\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently identify the largest divisor for any given number\n- Ensure the solution can handle numbers up to 10^9\n- Optimize the algorithm for performance\nWe will use the math library in Python to efficiently identify the largest divisor of a given number.\n", "requirement analysis:\nThe main focus is on efficiently determining the largest divisor of a given number while ensuring accuracy and scalability. Performance optimization is crucial to handle large numbers effectively.\nrequirement pool:\n- Implement an algorithm to efficiently find the largest divisor of a number\n- Ensure the algorithm can handle large numbers without performance degradation\n- Optimize the code for improved speed and accuracy\nWe will design a static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement an algorithm to efficiently find the largest divisor of a given number\n- Ensure the algorithm handles edge cases and large numbers effectively\n- Optimize the algorithm for performance to provide quick results\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently identify the largest divisor for any given number\n- Ensure the solution can handle large numbers efficiently\n- Optimize output for easy understanding\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement analysis:\nThe main requirement is to efficiently identify the largest divisor of a given number while ensuring accuracy and scalability. The algorithm should be optimized for performance to handle large numbers effectively.\nrequirement pool:\n- Implement an efficient algorithm to find the largest divisor of a number\n- Ensure the algorithm can handle large numbers without performance degradation\n- Optimize the code for speed and accuracy\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement analysis:\nThe main goal is to efficiently find the largest divisor of a given number while ensuring accuracy and scalability. Performance optimization is crucial for handling large numbers effectively.\nrequirement pool:\n- Implement an algorithm to efficiently find the largest divisor of a number\n- Ensure the algorithm can handle very large numbers without performance degradation\n- Optimize the code for speed and accuracy in divisor identification\nWe will design a simple static Python function using appropriate open-source libraries to efficiently find the largest divisor of a given number.\n", "requirement analysis:\nThe main requirement is to efficiently determine the largest divisor of a given number. The solution should be accurate, scalable, and perform well even for large numbers.\nrequirement pool:\n- Implement an algorithm to find the largest divisor of a given number\n- Optimize the algorithm for performance and scalability\n- Ensure the solution handles edge cases and provides accurate results\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement an efficient algorithm to find the largest divisor\n- Ensure the algorithm handles large numbers without performance issues\n- Optimize the code for speed and accuracy\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n"], "scores": [0.5758, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [19, 33, 33, 33, 33, 33, 33, 33, 33, 33], "completion": "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n    \n    Args:\n        n: An integer representing the input number\n    \n    Returns:\n        int: The largest divisor of the input number n\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "passed": true, "pass": true, "pass_num": 9, "round": 782, "repair_prompt": ["def largest_divisor(n: int) -> int:\t\n'''For a given number n, identify the largest number that divides n evenly. This number should be smaller than n.\n>>> largest_divisor(15)\n    5\n    '''"], "mutate_method": "expand_one2two", "parent_index": 761}
