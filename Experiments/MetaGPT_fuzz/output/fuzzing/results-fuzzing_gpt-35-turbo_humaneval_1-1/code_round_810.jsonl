{"task_id": "HumanEval/55", "prompt": "def fib(n: int):\t\n'''Return n-th Fibonacci number.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''", "entry_point": "fib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": ["def check(fib):\n\tassert fib(29) == 514229", "def check(fib):\n\tassert fib(25) == 75025", "def check(fib):\n\tassert fib(34) == 5702887", "def check(fib):\n\tassert fib(7) == 13", "def check(fib):\n\tassert fib(32) == 2178309", "def check(fib):\n\tassert fib(27) == 196418", "def check(fib):\n\tassert fib(16) == 987", "def check(fib):\n\tassert fib(14) == 377", "def check(fib):\n\tassert fib(33) == 3524578", "def check(fib):\n\tassert fib(20) == 6765", "def check(fib):\n\tassert fib(8) == 21", "def check(fib):\n\tassert fib(31) == 1346269", "def check(fib):\n\tassert fib(6) == 8", "def check(fib):\n\tassert fib(17) == 1597", "def check(fib):\n\tassert fib(2) == 1", "def check(fib):\n\tassert fib(1) == 1", "def check(fib):\n\tassert fib(30) == 832040", "def check(fib):\n\tassert fib(11) == 89", "def check(fib):\n\tassert fib(3) == 2", "def check(fib):\n\tassert fib(19) == 4181", "def check(fib):\n\tassert fib(21) == 10946", "def check(fib):\n\tassert fib(4) == 3", "def check(fib):\n\tassert fib(10) == 55", "def check(fib):\n\tassert fib(12) == 144", "def check(fib):\n\tassert fib(9) == 34", "def check(fib):\n\tassert fib(13) == 233", "def check(fib):\n\tassert fib(0) == 0", "def check(fib):\n\tassert fib(15) == 610", "def check(fib):\n\tassert fib(22) == 17711", "def check(fib):\n\tassert fib(24) == 46368", "def check(fib):\n\tassert fib(18) == 2584", "def check(fib):\n\tassert fib(28) == 317811", "def check(fib):\n\tassert fib(35) == 9227465"], "test_case_list": ["assert fib(29) == 514229", "assert fib(25) == 75025", "assert fib(34) == 5702887", "assert fib(7) == 13", "assert fib(32) == 2178309", "assert fib(27) == 196418", "assert fib(16) == 987", "assert fib(14) == 377", "assert fib(33) == 3524578", "assert fib(20) == 6765", "assert fib(8) == 21", "assert fib(31) == 1346269", "assert fib(6) == 8", "assert fib(17) == 1597", "assert fib(2) == 1", "assert fib(1) == 1", "assert fib(30) == 832040", "assert fib(11) == 89", "assert fib(3) == 2", "assert fib(19) == 4181", "assert fib(21) == 10946", "assert fib(4) == 3", "assert fib(10) == 55", "assert fib(12) == 144", "assert fib(9) == 34", "assert fib(13) == 233", "assert fib(0) == 0", "assert fib(15) == 610", "assert fib(22) == 17711", "assert fib(24) == 46368", "assert fib(18) == 2584", "assert fib(28) == 317811", "assert fib(35) == 9227465"], "nl": "Return n-th Fibonacci number.\n    ", "func": "def fib(n: int):", "examples": ">>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    ", "completions": ["from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.\n    :param n: int - The index of the Fibonacci number to be calculated.\n    :return: int - The n-th Fibonacci number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.'''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.\n    \n    Args:\n        n (int): The index of the Fibonacci number to be calculated.\n    \n    Returns:\n        int: The n-th Fibonacci number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.'''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "from typing import List\n## main.py\n\ndef fib(n: int, memo: dict = {}) -> int:\n    '''Return n-th Fibonacci number using memoization.\n    \n    Args:\n        n (int): The index of the Fibonacci number to be calculated.\n        memo (dict): Dictionary to store already calculated Fibonacci numbers.\n    \n    Returns:\n        int: The n-th Fibonacci number.\n    '''\n    if n in memo:\n        return memo[n]\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = fib(n-1, memo) + fib(n-2, memo)\n        memo[n] = result\n        return result\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.'''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.'''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.\n    :param n: int - The index of the Fibonacci number to be calculated.\n    :return: int - The n-th Fibonacci number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.'''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n", "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"], "plans": ["requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will implement the Fibonacci function using a simple recursive approach without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to implement the Fibonacci function without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will implement the Fibonacci function using a simple recursive approach without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will implement the Fibonacci function using a simple recursive approach without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will implement the Fibonacci function using a simple recursive approach without the need for any external libraries.\n", "requirement pool:\n- Implement efficient Fibonacci number calculation algorithm\n- Ensure correctness of Fibonacci number generation for all inputs\n- Optimize the Fibonacci function for better performance\nWe will design a simple static Python function using appropriate open-source libraries to efficiently calculate Fibonacci numbers with accuracy and optimized performance.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to implement the Fibonacci function without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will implement the Fibonacci function using a simple recursive approach without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will implement the Fibonacci function using a simple recursive approach without the need for any external libraries.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use the built-in Python library to implement the Fibonacci function without the need for any external libraries.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33], "completion": "from typing import List\n## main.py\n\ndef fib(n: int) -> int:\n    '''Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n", "passed": true, "pass": true, "pass_num": 10, "round": 810, "repair_prompt": ["def fib(n: int):\t\n'''Return n-th Fibonacci number.\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    '''"], "mutate_method": "condense_two2one", "parent_index": 736}
