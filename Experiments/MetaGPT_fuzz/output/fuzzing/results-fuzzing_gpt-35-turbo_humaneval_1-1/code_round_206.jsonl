{"task_id": "HumanEval/80", "prompt": "def is_happy(s):\t\n'''You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 with every 3 consecutive letters being distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": ["def check(is_happy):\n\tassert is_happy(\"vjbekznsr\") == True", "def check(is_happy):\n\tassert is_happy(\"adktufdnx\") == True", "def check(is_happy):\n\tassert is_happy(\"ekzerpbq\") == True", "def check(is_happy):\n\tassert is_happy(\"nkoeh\") == True", "def check(is_happy):\n\tassert is_happy(\"kjba\") == True", "def check(is_happy):\n\tassert is_happy(\"swh\") == True", "def check(is_happy):\n\tassert is_happy(\"ykq\") == True", "def check(is_happy):\n\tassert is_happy(\"mwi\") == True", "def check(is_happy):\n\tassert is_happy(\"dmseyemg\") == False", "def check(is_happy):\n\tassert is_happy(\"lmsegi\") == True", "def check(is_happy):\n\tassert is_happy(\"aa\") == False , \"aa\"", "def check(is_happy):\n\tassert is_happy(\"osfqkfsjs\") == False", "def check(is_happy):\n\tassert is_happy(\"pnglo\") == True", "def check(is_happy):\n\tassert is_happy(\"hne\") == True", "def check(is_happy):\n\tassert is_happy(\"ihhyzk\") == False", "def check(is_happy):\n\tassert is_happy(\"sda\") == True", "def check(is_happy):\n\tassert is_happy(\"hoijog\") == True", "def check(is_happy):\n\tassert is_happy(\"vskqbz\") == True", "def check(is_happy):\n\tassert is_happy(\"edbikgtricp\") == True", "def check(is_happy):\n\tassert is_happy(\"jllyluo\") == False", "def check(is_happy):\n\tassert is_happy(\"freva\") == True", "def check(is_happy):\n\tassert is_happy(\"gxts\") == True", "def check(is_happy):\n\tassert is_happy(\"yygnlyoas\") == False", "def check(is_happy):\n\tassert is_happy(\"cdlq\") == True", "def check(is_happy):\n\tassert is_happy(\"qylehtb\") == True", "def check(is_happy):\n\tassert is_happy(\"xpm\") == True", "def check(is_happy):\n\tassert is_happy(\"tcnk\") == True", "def check(is_happy):\n\tassert is_happy(\"p\") == False", "def check(is_happy):\n\tassert is_happy(\"tskgwrb\") == True", "def check(is_happy):\n\tassert is_happy(\"gnntvon\") == False", "def check(is_happy):\n\tassert is_happy(\"qwbjwaiu\") == True", "def check(is_happy):\n\tassert is_happy(\"pgmq\") == True", "def check(is_happy):\n\tassert is_happy(\"b\") == False", "def check(is_happy):\n\tassert is_happy(\"kjcceshvfwai\") == False", "def check(is_happy):\n\tassert is_happy(\"qmxibr\") == True", "def check(is_happy):\n\tassert is_happy(\"pzofkfvtw\") == False", "def check(is_happy):\n\tassert is_happy(\"cpbecycwj\") == False", "def check(is_happy):\n\tassert is_happy(\"ldi\") == True", "def check(is_happy):\n\tassert is_happy(\"ydkfa\") == True", "def check(is_happy):\n\tassert is_happy(\"s\") == False", "def check(is_happy):\n\tassert is_happy(\"xyy\") == False , \"xyy\"", "def check(is_happy):\n\tassert is_happy(\"aabb\") == False , \"aabb\"", "def check(is_happy):\n\tassert is_happy(\"ccnybors\") == False", "def check(is_happy):\n\tassert is_happy(\"cyqfh\") == True", "def check(is_happy):\n\tassert is_happy(\"v\") == False", "def check(is_happy):\n\tassert is_happy(\"pqftbntafqcl\") == True", "def check(is_happy):\n\tassert is_happy(\"abcd\") == True , \"abcd\"", "def check(is_happy):\n\tassert is_happy(\"imc\") == True", "def check(is_happy):\n\tassert is_happy(\"bldcxi\") == True", "def check(is_happy):\n\tassert is_happy(\"syvkwfj\") == True", "def check(is_happy):\n\tassert is_happy(\"mkbrgekb\") == True", "def check(is_happy):\n\tassert is_happy(\"asszruuw\") == False", "def check(is_happy):\n\tassert is_happy(\"xivc\") == True", "def check(is_happy):\n\tassert is_happy(\"eovqv\") == False", "def check(is_happy):\n\tassert is_happy(\"qcrtlo\") == True", "def check(is_happy):\n\tassert is_happy(\"khapsq\") == True", "def check(is_happy):\n\tassert is_happy(\"w\") == False", "def check(is_happy):\n\tassert is_happy(\"ryrr\") == False", "def check(is_happy):\n\tassert is_happy(\"adb\") == True , \"adb\"", "def check(is_happy):\n\tassert is_happy(\"mdg\") == True", "def check(is_happy):\n\tassert is_happy(\"f\") == False", "def check(is_happy):\n\tassert is_happy(\"vmxdsmtbksb\") == True", "def check(is_happy):\n\tassert is_happy(\"ajtrhb\") == True", "def check(is_happy):\n\tassert is_happy(\"hgfqilrj\") == True", "def check(is_happy):\n\tassert is_happy(\"wioqbm\") == True", "def check(is_happy):\n\tassert is_happy(\"lwpm\") == True", "def check(is_happy):\n\tassert is_happy(\"ishkix\") == True", "def check(is_happy):\n\tassert is_happy(\"uxgftzdyg\") == True", "def check(is_happy):\n\tassert is_happy(\"tgglbg\") == False", "def check(is_happy):\n\tassert is_happy(\"fyewnyygb\") == False", "def check(is_happy):\n\tassert is_happy(\"vsgjt\") == True", "def check(is_happy):\n\tassert is_happy(\"jsfnqiht\") == True", "def check(is_happy):\n\tassert is_happy(\"ujeo\") == True", "def check(is_happy):\n\tassert is_happy(\"znngeaumx\") == False", "def check(is_happy):\n\tassert is_happy(\"h\") == False", "def check(is_happy):\n\tassert is_happy(\"rjqhznla\") == True", "def check(is_happy):\n\tassert is_happy(\"mpiumqqx\") == False", "def check(is_happy):\n\tassert is_happy(\"a\") == False , \"a\"", "def check(is_happy):\n\tassert is_happy(\"vdxot\") == True", "def check(is_happy):\n\tassert is_happy(\"dyoywxi\") == False", "def check(is_happy):\n\tassert is_happy(\"gylbrpyqiuw\") == True", "def check(is_happy):\n\tassert is_happy(\"yauwdcsfcwr\") == True", "def check(is_happy):\n\tassert is_happy(\"xzyzwrab\") == False", "def check(is_happy):\n\tassert is_happy(\"bhkokspiry\") == False", "def check(is_happy):\n\tassert is_happy(\"ipjy\") == True", "def check(is_happy):\n\tassert is_happy(\"dpvxqd\") == True", "def check(is_happy):\n\tassert is_happy(\"mckptsntv\") == True", "def check(is_happy):\n\tassert is_happy(\"gitokkmmex\") == False", "def check(is_happy):\n\tassert is_happy(\"uimsvgvy\") == False", "def check(is_happy):\n\tassert is_happy(\"xckdiwjz\") == True", "def check(is_happy):\n\tassert is_happy(\"dktydg\") == True", "def check(is_happy):\n\tassert is_happy(\"jjzdrfcxx\") == False", "def check(is_happy):\n\tassert is_happy(\"rajomlaz\") == True", "def check(is_happy):\n\tassert is_happy(\"zrqkybwt\") == True", "def check(is_happy):\n\tassert is_happy(\"hcp\") == True", "def check(is_happy):\n\tassert is_happy(\"jgrvcizhi\") == True", "def check(is_happy):\n\tassert is_happy(\"d\") == False", "def check(is_happy):\n\tassert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "def check(is_happy):\n\tassert is_happy(\"y\") == False", "def check(is_happy):\n\tassert is_happy(\"lsm\") == True", "def check(is_happy):\n\tassert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "def check(is_happy):\n\tassert is_happy(\"n\") == False", "def check(is_happy):\n\tassert is_happy(\"ioruvha\") == True", "def check(is_happy):\n\tassert is_happy(\"hevkrepn\") == True", "def check(is_happy):\n\tassert is_happy(\"g\") == False", "def check(is_happy):\n\tassert is_happy(\"i\") == False", "def check(is_happy):\n\tassert is_happy(\"kxqis\") == True", "def check(is_happy):\n\tassert is_happy(\"xrc\") == True", "def check(is_happy):\n\tassert is_happy(\"qfychpkht\") == True", "def check(is_happy):\n\tassert is_happy(\"vorlwobo\") == False"], "test_case_list": ["assert is_happy(\"vjbekznsr\") == True", "assert is_happy(\"adktufdnx\") == True", "assert is_happy(\"ekzerpbq\") == True", "assert is_happy(\"nkoeh\") == True", "assert is_happy(\"kjba\") == True", "assert is_happy(\"swh\") == True", "assert is_happy(\"ykq\") == True", "assert is_happy(\"mwi\") == True", "assert is_happy(\"dmseyemg\") == False", "assert is_happy(\"lmsegi\") == True", "assert is_happy(\"aa\") == False , \"aa\"", "assert is_happy(\"osfqkfsjs\") == False", "assert is_happy(\"pnglo\") == True", "assert is_happy(\"hne\") == True", "assert is_happy(\"ihhyzk\") == False", "assert is_happy(\"sda\") == True", "assert is_happy(\"hoijog\") == True", "assert is_happy(\"vskqbz\") == True", "assert is_happy(\"edbikgtricp\") == True", "assert is_happy(\"jllyluo\") == False", "assert is_happy(\"freva\") == True", "assert is_happy(\"gxts\") == True", "assert is_happy(\"yygnlyoas\") == False", "assert is_happy(\"cdlq\") == True", "assert is_happy(\"qylehtb\") == True", "assert is_happy(\"xpm\") == True", "assert is_happy(\"tcnk\") == True", "assert is_happy(\"p\") == False", "assert is_happy(\"tskgwrb\") == True", "assert is_happy(\"gnntvon\") == False", "assert is_happy(\"qwbjwaiu\") == True", "assert is_happy(\"pgmq\") == True", "assert is_happy(\"b\") == False", "assert is_happy(\"kjcceshvfwai\") == False", "assert is_happy(\"qmxibr\") == True", "assert is_happy(\"pzofkfvtw\") == False", "assert is_happy(\"cpbecycwj\") == False", "assert is_happy(\"ldi\") == True", "assert is_happy(\"ydkfa\") == True", "assert is_happy(\"s\") == False", "assert is_happy(\"xyy\") == False , \"xyy\"", "assert is_happy(\"aabb\") == False , \"aabb\"", "assert is_happy(\"ccnybors\") == False", "assert is_happy(\"cyqfh\") == True", "assert is_happy(\"v\") == False", "assert is_happy(\"pqftbntafqcl\") == True", "assert is_happy(\"abcd\") == True , \"abcd\"", "assert is_happy(\"imc\") == True", "assert is_happy(\"bldcxi\") == True", "assert is_happy(\"syvkwfj\") == True", "assert is_happy(\"mkbrgekb\") == True", "assert is_happy(\"asszruuw\") == False", "assert is_happy(\"xivc\") == True", "assert is_happy(\"eovqv\") == False", "assert is_happy(\"qcrtlo\") == True", "assert is_happy(\"khapsq\") == True", "assert is_happy(\"w\") == False", "assert is_happy(\"ryrr\") == False", "assert is_happy(\"adb\") == True , \"adb\"", "assert is_happy(\"mdg\") == True", "assert is_happy(\"f\") == False", "assert is_happy(\"vmxdsmtbksb\") == True", "assert is_happy(\"ajtrhb\") == True", "assert is_happy(\"hgfqilrj\") == True", "assert is_happy(\"wioqbm\") == True", "assert is_happy(\"lwpm\") == True", "assert is_happy(\"ishkix\") == True", "assert is_happy(\"uxgftzdyg\") == True", "assert is_happy(\"tgglbg\") == False", "assert is_happy(\"fyewnyygb\") == False", "assert is_happy(\"vsgjt\") == True", "assert is_happy(\"jsfnqiht\") == True", "assert is_happy(\"ujeo\") == True", "assert is_happy(\"znngeaumx\") == False", "assert is_happy(\"h\") == False", "assert is_happy(\"rjqhznla\") == True", "assert is_happy(\"mpiumqqx\") == False", "assert is_happy(\"a\") == False , \"a\"", "assert is_happy(\"vdxot\") == True", "assert is_happy(\"dyoywxi\") == False", "assert is_happy(\"gylbrpyqiuw\") == True", "assert is_happy(\"yauwdcsfcwr\") == True", "assert is_happy(\"xzyzwrab\") == False", "assert is_happy(\"bhkokspiry\") == False", "assert is_happy(\"ipjy\") == True", "assert is_happy(\"dpvxqd\") == True", "assert is_happy(\"mckptsntv\") == True", "assert is_happy(\"gitokkmmex\") == False", "assert is_happy(\"uimsvgvy\") == False", "assert is_happy(\"xckdiwjz\") == True", "assert is_happy(\"dktydg\") == True", "assert is_happy(\"jjzdrfcxx\") == False", "assert is_happy(\"rajomlaz\") == True", "assert is_happy(\"zrqkybwt\") == True", "assert is_happy(\"hcp\") == True", "assert is_happy(\"jgrvcizhi\") == True", "assert is_happy(\"d\") == False", "assert is_happy(\"iopaxioi\") == False , \"iopaxioi\"", "assert is_happy(\"y\") == False", "assert is_happy(\"lsm\") == True", "assert is_happy(\"iopaxpoi\") == True , \"iopaxpoi\"", "assert is_happy(\"n\") == False", "assert is_happy(\"ioruvha\") == True", "assert is_happy(\"hevkrepn\") == True", "assert is_happy(\"g\") == False", "assert is_happy(\"i\") == False", "assert is_happy(\"kxqis\") == True", "assert is_happy(\"xrc\") == True", "assert is_happy(\"qfychpkht\") == True", "assert is_happy(\"vorlwobo\") == False"], "nl": "You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    ", "func": "def is_happy(s):", "examples": "For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    ", "completions": ["from typing import List\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is 'happy' based on the defined criteria.\n\n    Args:\n    - s: a string to be checked for 'happiness'\n\n    Returns:\n    - bool: True if the string is 'happy' based on the criteria, False otherwise\n    \"\"\"\n    # Define the criteria for a 'happy' string\n    happy_criteria = ['h', 'a', 'p', 'y']\n\n    # Check if all characters in the string are present in the happy criteria\n    for char in s:\n        if char not in happy_criteria:\n            return False\n\n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is happy by ensuring every 3 consecutive letters are distinct.\n\n    Args:\n    - s: a string to check for happiness\n\n    Returns:\n    - bool: True if the string is happy, False otherwise\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if the input string is happy.\n    \n    Args:\n    - s: a string to check for happiness\n    \n    Returns:\n    - bool: True if the string is happy, False otherwise\n    \"\"\"\n    \n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    \"\"\"\n    Check if a string is happy or not.\n\n    Args:\n    - s: a string to be checked for happiness\n\n    Returns:\n    - bool: True if the string is happy, False otherwise\n    \"\"\"\n    \n    happy_words = [\"happy\", \"joy\", \"fun\", \"smile\"]\n    \n    for word in happy_words:\n        if word.lower() not in s.lower():\n            return False\n    \n    return True\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy or not.\n    :param s: input string\n    :return: True if string is happy, False otherwise\n    '''\n    happy_chars = {'h', 'a', 'p', 'y'}\n    \n    for char in s:\n        if char not in happy_chars:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Function to check if a string is happy or not.\n    \n    :param s: input string\n    :return: True if the string is happy, False otherwise\n    '''\n    \n    # Calculate the sum of squares of digits in the string\n    def calculate_sum_of_squares(num_str: str) -> int:\n        return sum(int(digit)**2 for digit in num_str)\n    \n    seen = set()  # Set to store seen sums\n    while True:\n        sum_squares = calculate_sum_of_squares(s)\n        if sum_squares == 1:\n            return True\n        if sum_squares in seen:\n            return False\n        seen.add(sum_squares)\n        s = str(sum_squares)  # Update the string to continue the process\n\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Function to check if the input string is 'happy' based on the defined criteria.\n    \n    :param s: Input string to be evaluated\n    :return: Boolean value indicating if the string is 'happy' or not\n    '''\n    \n    # Check if the length of the input string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Create a set to store distinct 3-letter sequences\n    sequences = set()\n    \n    # Iterate through the input string to find all 3-letter sequences\n    for i in range(len(s) - 2):\n        sequence = s[i:i+3]\n        sequences.add(sequence)\n    \n    # Check if the number of distinct 3-letter sequences is equal to the length of the input string - 2\n    return len(sequences) == len(s) - 2\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Function to check if a string is happy or not.\n    \n    :param s: Input string to be checked\n    :return: True if the string is happy, False otherwise\n    '''\n    \n    def calculate_happy_number(num):\n        seen = set()\n        while num != 1 and num not in seen:\n            seen.add(num)\n            num = sum(int(digit)**2 for digit in str(num))\n        return num == 1\n    \n    return calculate_happy_number(sum(int(digit)**2 for digit in s))\n", "from typing import List\ndef is_happy(s: str) -> bool:\n    '''\n    Check if the string is happy or not.\n    A string is happy if its length is at least 3 with every 3 consecutive letters being distinct.\n    Args:\n        s (str): Input string\n    Returns:\n        bool: True if the string is happy, False otherwise\n    '''\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n", "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Function to check if a string is happy or not.\n    \n    :param s: input string\n    :return: True if the string is happy, False otherwise\n    '''\n    \n    def calculate_happy_number(num: int) -> int:\n        result = 0\n        while num > 0:\n            digit = num % 10\n            result += digit ** 2\n            num //= 10\n        return result\n    \n    seen = set()\n    while True:\n        s = sum(int(digit) ** 2 for digit in str(s))\n        if s == 1:\n            return True\n        if s in seen:\n            return False\n        seen.add(s)\n        s = calculate_happy_number(s)\n"], "plans": ["requirement pool:\n- Implement a function that checks if a string is 'happy' based on defined criteria\n- Ensure the function can handle strings of varying lengths and characters\n- Optimize the algorithm for efficient performance\nWe will design a simple static Python function to check if a string is 'happy' based on the defined criteria. We will use basic string manipulation techniques to efficiently handle the task.\n", "requirement pool:\n- Implement efficient algorithm to check string happiness\n- Handle edge cases like empty strings or strings with less than 3 characters\n- Ensure the function is well-documented for easy understanding\nWe will design a simple static Python function to check if a string is happy by ensuring every 3 consecutive letters are distinct. We will use basic string manipulation and iteration to achieve this.\n", "requirement pool:\n- Implement a function that efficiently checks if a string is happy\n- Ensure the function can handle strings of varying lengths\n- Optimize the algorithm for performance in evaluating string happiness\nWe will use a simple approach to iterate through the string and check every 3 consecutive characters for distinctness.\n", "requirement pool:\n- Implement a function that efficiently checks if a string is happy or not\n- Ensure the function can handle strings of varying lengths\n- Optimize the function for performance to handle large strings\nWe will design a simple static Python function using basic string manipulation techniques to efficiently check if a string is happy or not.\n", "requirement pool:\n- Implement efficient algorithm to check string happiness\n- Ensure correctness in identifying happy strings\n- Optimize performance for large input strings\nWe will use a simple approach to iterate through the string and check for happy conditions without using any external libraries.\n", "requirement pool:\n- Create a function to determine string happiness\n- Handle strings of length at least 3\n- Check for distinct consecutive letters in the string\nWe will design a simple static Python function using basic string manipulation to check for string happiness based on the given requirements.\n", "requirement analysis:\nThe function should efficiently evaluate whether a given string meets the 'happy' criteria by checking for distinct 3-letter sequences. It should handle strings of varying lengths and return a boolean value accordingly.\nrequirement pool:\n- Implement the core logic to check for distinct 3-letter sequences\n- Handle edge cases such as strings with less than 3 characters\n- Optimize the algorithm for better performance\nWe will design a simple static Python function to efficiently check if a given string meets the 'happy' criteria by analyzing distinct 3-letter sequences. We will utilize basic string manipulation techniques to achieve this.\n", "requirement pool:\n- Implement a function that efficiently checks if a string is happy based on given criteria\n- Ensure the function handles edge cases and invalid inputs gracefully\n- Optimize the algorithm for performance to handle large strings efficiently\nWe will design a simple static Python function to efficiently check if a string is happy based on the given criteria. We will use basic string manipulation techniques to achieve this.\n", "requirement pool:\n- Implement a function to check if a string is happy based on given criteria\n- Ensure the function handles edge cases like empty strings or strings with less than 3 characters\nWe will design a simple static Python function to check if a string is happy based on the given criteria.\n", "requirement pool:\n- Implement a function that checks if a string is happy based on given criteria\n- Ensure the function can handle strings of varying lengths\n- Optimize the function for performance to handle large inputs efficiently\nWe will design a simple static Python function to check if a string is happy based on the given criteria.\n"], "scores": [0.3273, 1.0, 1.0, 0.3727, 0.3273, 0.0, 0.7545, 0.0, 1.0, 0.0], "pass_results": [false, true, true, false, false, false, false, false, true, false], "pass_test_cases_num": [36, 110, 110, 41, 36, 0, 83, 0, 110, 0], "completion": "from typing import List\n## main.py\n\ndef is_happy(s: str) -> bool:\n    '''\n    Function to check if a string is happy or not.\n    \n    :param s: input string\n    :return: True if the string is happy, False otherwise\n    '''\n    \n    def calculate_happy_number(num: int) -> int:\n        result = 0\n        while num > 0:\n            digit = num % 10\n            result += digit ** 2\n            num //= 10\n        return result\n    \n    seen = set()\n    while True:\n        s = sum(int(digit) ** 2 for digit in str(s))\n        if s == 1:\n            return True\n        if s in seen:\n            return False\n        seen.add(s)\n        s = calculate_happy_number(s)\n", "passed": true, "pass": true, "pass_num": 3, "round": 206, "repair_prompt": ["def is_happy(s):\t\n'''You are given a string s. Your task is to check if the string is happy or not. A string is happy if its length is at least 3 with every 3 consecutive letters being distinct.\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    '''"], "mutate_method": "condense_two2one", "parent_index": 181}
