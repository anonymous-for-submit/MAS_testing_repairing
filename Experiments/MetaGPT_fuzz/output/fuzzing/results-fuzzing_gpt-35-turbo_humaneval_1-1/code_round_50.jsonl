{"task_id": "HumanEval/61", "prompt": "def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": ["def check(correct_bracketing):\n\tassert correct_bracketing(\"(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()))((())((()()((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((((()())())()(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((())))()(()))())\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\")\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")())()())))(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))((((((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((())()))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()(())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()))))()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")))((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()(()())()\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"((((\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()(())()((()())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()))))(()()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()())())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()()(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((((((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()()((()()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"((()())))\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()\")", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"(\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"())())((()()))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()))(((()((()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()))))\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))())()))(())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")())())()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((()))))((()(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()())())))(()(())()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")((((((\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\")(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"((())()()\") == False", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"()()(()())()))()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()(())((())((())\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")(()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()(()())()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()()((()()())())(()()(()))\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"(((\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"\") == True", "def check(correct_bracketing):\n\tassert not correct_bracketing(\"()()(()())())(()\")", "def check(correct_bracketing):\n\tassert correct_bracketing(\"()(())()()()\") == True", "def check(correct_bracketing):\n\tassert correct_bracketing(\")()()(()(())(\") == False", "def check(correct_bracketing):\n\tassert correct_bracketing(\"))()()())(())\") == False"], "test_case_list": ["assert correct_bracketing(\"(\") == False", "assert correct_bracketing(\"))()))((())((()()((((\") == False", "assert correct_bracketing(\")((((((()())())()(((\") == False", "assert correct_bracketing(\")((())))()(()))())\") == False", "assert not correct_bracketing(\"(()\")", "assert correct_bracketing(\"(()())\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))()\") == True", "assert correct_bracketing(\"()))\") == False", "assert not correct_bracketing(\")\")", "assert correct_bracketing(\"()()\") == True", "assert correct_bracketing(\")())()())))(((\") == False", "assert correct_bracketing(\"))((((((()\") == False", "assert correct_bracketing(\")((((\") == False", "assert correct_bracketing(\"()(()())\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))\") == True", "assert correct_bracketing(\"((())()))\") == False", "assert correct_bracketing(\"()()()(())(\") == False", "assert correct_bracketing(\"))())\") == False", "assert correct_bracketing(\"()()(()())()\")", "assert correct_bracketing(\"()()(()())()\") == True", "assert correct_bracketing(\")\") == False", "assert correct_bracketing(\"()()()\") == True", "assert correct_bracketing(\"()))()(\") == False", "assert correct_bracketing(\"(())\") == True", "assert correct_bracketing(\"()()(()())()()()(()())()\") == True", "assert correct_bracketing(\"()()(()())()()()(()())()()()((()()())())(()()(()))\") == True", "assert correct_bracketing(\"(()())()(()())\") == True", "assert correct_bracketing(\"(()))))()\") == False", "assert correct_bracketing(\")(()())(\") == False", "assert correct_bracketing(\"((((\") == False", "assert correct_bracketing(\"(()())\")", "assert correct_bracketing(\"(((()\") == False", "assert correct_bracketing(\"))()\") == False", "assert correct_bracketing(\")))((\") == False", "assert correct_bracketing(\")()())\") == False", "assert correct_bracketing(\"(()\") == False", "assert correct_bracketing(\"(()())(()())()\") == True", "assert correct_bracketing(\"(()())()()(()())()\") == True", "assert correct_bracketing(\"()()(()())()(()())()\") == True", "assert not correct_bracketing(\"((((\")", "assert correct_bracketing(\"))))\") == False", "assert correct_bracketing(\"()\") == True", "assert correct_bracketing(\"())\") == False", "assert correct_bracketing(\")()(())()((()())\") == False", "assert correct_bracketing(\"))()))))(()()(\") == False", "assert correct_bracketing(\"()())())(\") == False", "assert correct_bracketing(\"()()()()(()())()\") == True", "assert correct_bracketing(\")()(\") == False", "assert correct_bracketing(\"((((((\") == False", "assert correct_bracketing(\"()()()((()()(\") == False", "assert correct_bracketing(\"()()((()()())())(()()(()))()()(()())()()\") == True", "assert not correct_bracketing(\"((()())))\")", "assert correct_bracketing(\"()\")", "assert not correct_bracketing(\"(\")", "assert correct_bracketing(\"())())((()()))\") == False", "assert correct_bracketing(\"(()())()\") == True", "assert correct_bracketing(\")(()))(((()((()\") == False", "assert correct_bracketing(\"()))))\") == False", "assert correct_bracketing(\"))())()))(())\") == False", "assert correct_bracketing(\")())())()\") == False", "assert correct_bracketing(\")((()))))((()(\") == False", "assert correct_bracketing(\"()())())))(()(())()\") == False", "assert correct_bracketing(\")((((((\") == False", "assert not correct_bracketing(\")(()\")", "assert correct_bracketing(\"((())()()\") == False", "assert not correct_bracketing(\"()()(()())()))()\")", "assert correct_bracketing(\")(()(())((())((())\") == False", "assert correct_bracketing(\")(()\") == False", "assert correct_bracketing(\")()\") == False", "assert correct_bracketing(\"()()(()())()()()((()()())())(()()(()))(()())\") == True", "assert correct_bracketing(\"()()(()())()()\") == True", "assert correct_bracketing(\"(()())()()((()()())())(()()(()))(()())\") == True", "assert correct_bracketing(\"()()((()()())())(()()(()))\")", "assert correct_bracketing(\"(((\") == False", "assert correct_bracketing(\"\") == True", "assert not correct_bracketing(\"()()(()())())(()\")", "assert correct_bracketing(\"()(())()()()\") == True", "assert correct_bracketing(\")()()(()(())(\") == False", "assert correct_bracketing(\"))()()())(())\") == False"], "nl": " brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    ", "func": "def correct_bracketing(brackets: str):", "examples": ">>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    ", "completions": ["from typing import List\n## main.py\n\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n    '''\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): A string of '(' and ')' brackets.\n    Returns:\n        bool: True if every opening bracket has a corresponding closing bracket, False otherwise.\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\n## main.py\n\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): Input string of brackets\n    Returns:\n        bool: True if bracketing is correct, False otherwise\n    '''\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): Input string containing only '(' and ')'\n    Returns:\n        bool: True if every opening bracket has a corresponding closing bracket, False otherwise\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): A string of '(' and ')' brackets.\n    Returns:\n        bool: True if bracketing is correct, False otherwise.\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\n## main.py\n\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n    '''\n    \n    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\n## main.py\n\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): A string of '(' and ')' brackets.\n    Returns:\n        bool: True if every opening bracket has a matching closing bracket, False otherwise.\n    '''\n    \n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): Input string containing only '(' and ')'\n    Returns:\n        bool: True if bracketing is correct, False otherwise\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n"], "plans": ["requirement pool:\n- Implement efficient bracket matching algorithm\n- Ensure handling of edge cases like empty strings\n- Optimize for performance and minimal memory usage\nWe will use a simple approach to iterate through the input string of brackets and keep track of the opening brackets using a stack. We will pop from the stack whenever a closing bracket is encountered and check if it matches the corresponding opening bracket. If at the end the stack is empty, then all opening brackets have matching closing brackets.\n", "requirement pool:\n- Implement a function that efficiently checks bracket correctness\n- Ensure the function handles edge cases like empty strings\n- Optimize the algorithm for large input strings\nWe will design a simple static Python function using basic string manipulation to efficiently check the correctness of brackets.\n", "requirement pool:\n- Implement efficient bracket validation algorithm\n- Ensure handling of edge cases like empty strings\n- Optimize for performance and minimal memory usage\nWe will design a simple static Python function using basic string manipulation to efficiently validate bracketing in strings.\n", "requirement pool:\n- Implement efficient bracket validation algorithm\n- Ensure clear and concise output messages\n- Optimize for speed and low memory usage\nWe will use a simple stack data structure to efficiently validate the bracketing in the input string.\n", "requirement pool:\n- Implement efficient bracketing validation algorithm\n- Ensure clear documentation and examples for ease of use\n- Handle edge cases like empty strings or unbalanced brackets\nWe will use a simple stack data structure to efficiently validate the bracketing in the input string.\n", "requirement pool:\n- Implement efficient bracket validation algorithm\n- Ensure handling of edge cases like empty strings\n- Optimize for performance and scalability\nWe will use a simple stack data structure to efficiently validate the bracketing in the input string.\n", "requirement pool:\n- Implement efficient bracket validation algorithm\n- Ensure robust handling of edge cases like empty strings\n- Optimize for performance to handle large bracket strings\nWe will design a simple static Python function using basic string manipulation to efficiently validate bracketing in strings.\n", "requirement pool:\n- Implement efficient bracket validation algorithm\n- Ensure robust handling of edge cases like nested brackets\n- Optimize for performance to handle large bracket strings\nWe will use a simple approach to iterate through the input string of brackets and keep track of the opening brackets using a stack. Whenever we encounter a closing bracket, we will check if it matches the last opening bracket in the stack. If it does, we will pop the opening bracket from the stack. If at the end the stack is empty, then all opening brackets have matching closing brackets.\n", "requirement analysis:\nThe main focus is on efficiently validating bracketing in strings with high accuracy and providing a clear True/False output for bracket correctness.\nrequirement pool:\n- Implement a function that efficiently checks bracketing in strings\n- Ensure accurate matching of opening and closing brackets\n- Return clear True/False output for bracket correctness\nWe will use a simple approach to iterate through the input string of brackets and keep track of the opening brackets using a stack data structure. We will use the built-in Python list as a stack to efficiently validate the bracketing.\n", "requirement pool:\n- Implement efficient algorithm to check bracket matching\n- Handle edge cases like empty strings or invalid characters\n- Ensure the function is well-documented for easy understanding\nWe will use a simple stack data structure to efficiently validate the bracket matching in the input string.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [79, 79, 79, 79, 79, 79, 79, 79, 79, 79], "completion": "from typing import List\ndef correct_bracketing(brackets: str) -> bool:\n    '''\n    Validate if every opening bracket '(' has a matching closing bracket ')'.\n    Returns True if every opening bracket has a corresponding closing bracket.\n    Args:\n        brackets (str): Input string containing only '(' and ')'\n    Returns:\n        bool: True if bracketing is correct, False otherwise\n    '''\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n", "passed": true, "pass": true, "pass_num": 10, "round": 50, "repair_prompt": ["def correct_bracketing(brackets: str):\t\n'''brackets is a string of \"(\" and \")\". You need to determine if every opening bracket \"(\" has a matching closing bracket \")\". Return True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    '''"], "mutate_method": "expand_one2two", "parent_index": 50}
