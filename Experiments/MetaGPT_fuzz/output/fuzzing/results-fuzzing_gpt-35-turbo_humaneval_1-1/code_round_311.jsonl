{"task_id": "HumanEval/24", "prompt": "def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number smaller than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": ["def check(largest_divisor):\n\tassert largest_divisor(47) == 1", "def check(largest_divisor):\n\tassert largest_divisor(98) == 49", "def check(largest_divisor):\n\tassert largest_divisor(104) == 52", "def check(largest_divisor):\n\tassert largest_divisor(51) == 17", "def check(largest_divisor):\n\tassert largest_divisor(10) == 5", "def check(largest_divisor):\n\tassert largest_divisor(53) == 1", "def check(largest_divisor):\n\tassert largest_divisor(3) == 1", "def check(largest_divisor):\n\tassert largest_divisor(95) == 19", "def check(largest_divisor):\n\tassert largest_divisor(44) == 22", "def check(largest_divisor):\n\tassert largest_divisor(8) == 4", "def check(largest_divisor):\n\tassert largest_divisor(4) == 2", "def check(largest_divisor):\n\tassert largest_divisor(103) == 1", "def check(largest_divisor):\n\tassert largest_divisor(11) == 1", "def check(largest_divisor):\n\tassert largest_divisor(46) == 23", "def check(largest_divisor):\n\tassert largest_divisor(49) == 7", "def check(largest_divisor):\n\tassert largest_divisor(13) == 1", "def check(largest_divisor):\n\tassert largest_divisor(14) == 7", "def check(largest_divisor):\n\tassert largest_divisor(54) == 27", "def check(largest_divisor):\n\tassert largest_divisor(99) == 33", "def check(largest_divisor):\n\tassert largest_divisor(45) == 15", "def check(largest_divisor):\n\tassert largest_divisor(9) == 3", "def check(largest_divisor):\n\tassert largest_divisor(7) == 1", "def check(largest_divisor):\n\tassert largest_divisor(100) == 50", "def check(largest_divisor):\n\tassert largest_divisor(6) == 3", "def check(largest_divisor):\n\tassert largest_divisor(48) == 24", "def check(largest_divisor):\n\tassert largest_divisor(15) == 5", "def check(largest_divisor):\n\tassert largest_divisor(101) == 1", "def check(largest_divisor):\n\tassert largest_divisor(97) == 1", "def check(largest_divisor):\n\tassert largest_divisor(12) == 6", "def check(largest_divisor):\n\tassert largest_divisor(105) == 35", "def check(largest_divisor):\n\tassert largest_divisor(5) == 1", "def check(largest_divisor):\n\tassert largest_divisor(2) == 1", "def check(largest_divisor):\n\tassert largest_divisor(102) == 51"], "test_case_list": ["assert largest_divisor(47) == 1", "assert largest_divisor(98) == 49", "assert largest_divisor(104) == 52", "assert largest_divisor(51) == 17", "assert largest_divisor(10) == 5", "assert largest_divisor(53) == 1", "assert largest_divisor(3) == 1", "assert largest_divisor(95) == 19", "assert largest_divisor(44) == 22", "assert largest_divisor(8) == 4", "assert largest_divisor(4) == 2", "assert largest_divisor(103) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(46) == 23", "assert largest_divisor(49) == 7", "assert largest_divisor(13) == 1", "assert largest_divisor(14) == 7", "assert largest_divisor(54) == 27", "assert largest_divisor(99) == 33", "assert largest_divisor(45) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(7) == 1", "assert largest_divisor(100) == 50", "assert largest_divisor(6) == 3", "assert largest_divisor(48) == 24", "assert largest_divisor(15) == 5", "assert largest_divisor(101) == 1", "assert largest_divisor(97) == 1", "assert largest_divisor(12) == 6", "assert largest_divisor(105) == 35", "assert largest_divisor(5) == 1", "assert largest_divisor(2) == 1", "assert largest_divisor(102) == 51"], "nl": " For a given number n, find the largest number that divides n evenly, smaller than n\n    ", "func": "def largest_divisor(n: int) -> int:", "examples": ">>> largest_divisor(15)\n    5\n    ", "completions": ["from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest divisor of n.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest divisor of n.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''For a given number n, find the largest number smaller than n that divides it evenly.'''\n    \n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    \n    return 1\n", "from typing import List\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    >>> largest_divisor(15)\n    5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    >>> largest_divisor(15)\n    5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest number smaller than n that divides it evenly\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    >>> largest_divisor(15)\n    5\n    '''\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n"], "plans": ["requirement pool:\n- Implement efficient algorithm to find largest divisor\n- Ensure correctness of divisor calculation\n- Optimize performance for quick computation\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently find the largest divisor of a given number\n- Ensure accurate division results\n- Optimize algorithm performance\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement analysis:\nThe requirement is to efficiently find the largest divisor of a given number by identifying the largest number smaller than n that divides it evenly. The solution should be accurate, fast, and optimized for performance.\nrequirement pool:\n- Implement a function to efficiently find the largest divisor of a given number\n- Ensure the division results are accurate and precise\n- Optimize the algorithm performance for fast computation\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement analysis:\nThe main goal is to efficiently find the largest divisor of a given number while ensuring accuracy in the division process. Performance optimization is crucial to provide a seamless user experience.\nrequirement pool:\n- Implement an algorithm to efficiently find the largest divisor of a number\n- Ensure the divisor calculation is accurate without any remainder\n- Optimize the algorithm for improved performance\nWe will design a static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement analysis:\nThe function should efficiently find the largest divisor of a given number by iterating from n-1 to 1 and returning the first number that divides n evenly.\nrequirement pool:\n- Implement the algorithm to find the largest divisor efficiently\n- Ensure the function handles edge cases like n=1 or negative numbers\n- Optimize the algorithm for better performance\nWe will design a simple Python function using basic iteration to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement efficient algorithm to find largest divisor\n- Ensure accurate division results without remainder\n- Optimize performance for quick calculations\nWe will design a simple Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently find the largest divisor of any given number\n- Ensure accurate and precise division results\n- Optimize performance for handling very large numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently find the largest divisor of a given number\n- Ensure accurate division results\n- Optimize algorithm performance\nWe will design a static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Efficiently find the largest divisor of a given number\n- Handle edge cases such as prime numbers and zero\n- Ensure the function is well-documented for easy understanding\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n", "requirement pool:\n- Implement an efficient algorithm to find the largest divisor of a number\n- Ensure the divisor calculation is accurate without any remainder\n- Optimize the code for performance to handle large numbers efficiently\nWe will design a simple static Python function using basic arithmetic operations to efficiently find the largest divisor of a given number.\n"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [33, 33, 33, 33, 33, 33, 33, 33, 33, 33], "completion": "from typing import List\n## main.py\n\ndef largest_divisor(n: int) -> int:\n    '''\n    For a given number n, find the largest number smaller than n that divides it evenly.\n    \n    Args:\n        n (int): The input number\n    \n    Returns:\n        int: The largest divisor of the input number\n    \n    Examples:\n        >>> largest_divisor(15)\n        5\n    '''\n    largest = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n", "passed": true, "pass": true, "pass_num": 10, "round": 311, "repair_prompt": ["def largest_divisor(n: int) -> int:\t\n'''For a given number n, find the largest number smaller than n that divides it evenly.\n>>> largest_divisor(15)\n    5\n    '''"], "mutate_method": "condense_two2one", "parent_index": 22}
