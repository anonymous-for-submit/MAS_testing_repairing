{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 463, "prompt": "Write a function to identify the subarray within the provided array that yields the highest product.", "code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far", "test_imports": [], "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "assert max_subarray_product([6, 1, 1, 1, 8, -4, -1]) == 192", "assert max_subarray_product([6, -1, 1, 2, 4, -12, 0]) == 576", "assert max_subarray_product([1, -7, -7, 3, 5, -4, -2]) == 5880", "assert max_subarray_product([1, -5, -4, 2, 4, -3, 3]) == 288", "assert max_subarray_product([3, 1, -2, 2, 11, -10, 1]) == 1320", "assert max_subarray_product([1, -4, -1, 3, 6, -5, -4]) == 1440", "assert max_subarray_product([5, -4, -7, 1, 12, -5, 3]) == 1680", "assert max_subarray_product([5, -7, -7, 3, 8, -5, -7]) == 205800", "assert max_subarray_product([4, -5, -4, 2, 2, -7, -2]) == 4480", "assert max_subarray_product([5, -2, -1, 2, 7, -7, -3]) == 2940", "assert max_subarray_product([1, 2, 1, 3, 3, -4, 1]) == 18", "assert max_subarray_product([2, -3, -1, 5, 4, -6, -7]) == 5040", "assert max_subarray_product([6, 3, -3, 5, 5, -3, -5]) == 4050", "assert max_subarray_product([5, -6, -6, 4, 7, -9, 3]) == 5040", "assert max_subarray_product([1, -1, -1, 4, 3, -7, 1]) == 84", "assert max_subarray_product([2, -3, -2, 4, 11, -4, 1]) == 528", "assert max_subarray_product([2, 2, -1, 5, 2, -12, -2]) == 480", "assert max_subarray_product([5, -3, -3, 3, 3, -4, -6]) == 9720", "assert max_subarray_product([2, -4, -5, 2, 4, -6, -6]) == 11520", "assert max_subarray_product([2, -6, 0, 1, 3, -9, 0]) == 3", "assert max_subarray_product([2, 3, 2, 3, 11, -3, 0]) == 396", "assert max_subarray_product([6, 0, -6, 3, 12, -12, -6]) == 2592", "assert max_subarray_product([5, -7, 0, 2, 11, -8, -1]) == 176", "assert max_subarray_product([1, 3, -6, 1, 9, -8, -2]) == 1296", "assert max_subarray_product([4, 2, -5, 1, 9, -12, -2]) == 4320", "assert max_subarray_product([4, -2, 1, 3, 9, -9, -4]) == 1944", "assert max_subarray_product([1, -5, -1, 5, 4, -6, 3]) == 360", "assert max_subarray_product([4, 0, -2, 1, 12, -11, -3]) == 396", "assert max_subarray_product([5, 2, -6, 3, 6, -6, -5]) == 6480", "assert max_subarray_product([2, -5, -1, 2, 7, -7, -5]) == 4900", "assert max_subarray_product([5, -4, -6, 1, 11, -9, 3]) == 1782", "assert max_subarray_product([2, -1, -5, 5, 3, -9, -6]) == 8100", "assert max_subarray_product([1, 0, -7, 1, 7, -12, -7]) == 588", "assert max_subarray_product([3, -1, -12, 4, 7]) == 1008", "assert max_subarray_product([2, 0, -11, 2, 1]) == 2", "assert max_subarray_product([10, 2, -12, 3, 5]) == 20", "assert max_subarray_product([10, 0, -5, 4, 2]) == 10", "assert max_subarray_product([9, -7, -12, 4, 1]) == 3024", "assert max_subarray_product([2, -5, -10, 2, 1]) == 200", "assert max_subarray_product([4, -5, -13, 2, 1]) == 520", "assert max_subarray_product([5, -8, -7, 3, 1]) == 840", "assert max_subarray_product([1, -4, -7, 3, 7]) == 588", "assert max_subarray_product([10, -8, -7, 3, 1]) == 1680", "assert max_subarray_product([9, -5, -13, 3, 5]) == 8775", "assert max_subarray_product([2, -8, -9, 2, 3]) == 864", "assert max_subarray_product([1, 2, -14, 2, 6]) == 12", "assert max_subarray_product([5, 2, -15, 2, 1]) == 10", "assert max_subarray_product([7, -3, -10, 4, 4]) == 3360", "assert max_subarray_product([6, -4, -13, 1, 4]) == 1248", "assert max_subarray_product([6, -3, -5, 4, 4]) == 1440", "assert max_subarray_product([8, -8, -5, 2, 2]) == 1280", "assert max_subarray_product([7, -8, -11, 1, 1]) == 616", "assert max_subarray_product([3, -3, -12, 3, 6]) == 1944", "assert max_subarray_product([3, -6, -13, 4, 4]) == 3744", "assert max_subarray_product([11, 2, -9, 3, 4]) == 22", "assert max_subarray_product([9, -7, -12, 3, 7]) == 15876", "assert max_subarray_product([8, 0, -7, 3, 5]) == 15", "assert max_subarray_product([4, 1, -14, 5, 6]) == 30", "assert max_subarray_product([10, -7, -5, 5, 5]) == 8750", "assert max_subarray_product([3, -5, -14, 4, 2]) == 1680", "assert max_subarray_product([11, -6, -9, 5, 2]) == 5940", "assert max_subarray_product([4, -2, -9, 3, 6]) == 1296", "assert max_subarray_product([5, -6, -10, 1, 5]) == 1500", "assert max_subarray_product([4, 1, -10, 2, 6]) == 12", "assert max_subarray_product([6, -3, -11, 3, 7]) == 4158", "assert max_subarray_product([3, -1, -15, 3, 6]) == 810", "assert max_subarray_product([2, -39, 1, 0, 2]) == 2", "assert max_subarray_product([0, -35, 5, -1, 0]) == 175", "assert max_subarray_product([-2, -45, 1, -1, -3]) == 270", "assert max_subarray_product([3, -38, 1, 3, -4]) == 1368", "assert max_subarray_product([-1, -40, 3, 3, -1]) == 360", "assert max_subarray_product([2, -45, 4, -6, -3]) == 2160", "assert max_subarray_product([-7, -43, 4, -2, -6]) == 14448", "assert max_subarray_product([-1, -43, 5, -6, -3]) == 3870", "assert max_subarray_product([2, -45, 2, 0, -6]) == 2", "assert max_subarray_product([-2, -36, 5, -1, 0]) == 360", "assert max_subarray_product([0, -37, 3, -6, 1]) == 666", "assert max_subarray_product([3, -38, 4, -4, -1]) == 1824", "assert max_subarray_product([-4, -45, 2, -5, -8]) == 14400", "assert max_subarray_product([0, -44, 1, -4, 2]) == 352", "assert max_subarray_product([-3, -44, 3, -2, -7]) == 5544", "assert max_subarray_product([-4, -35, 2, 1, 0]) == 280", "assert max_subarray_product([-7, -36, 5, -5, -2]) == 12600", "assert max_subarray_product([-3, -45, 4, -3, -8]) == 12960", "assert max_subarray_product([-3, -36, 5, -7, -4]) == 15120", "assert max_subarray_product([-2, -38, 3, 2, -6]) == 1368", "assert max_subarray_product([3, -40, 5, -1, -4]) == 600", "assert max_subarray_product([-3, -41, 5, -7, -8]) == 34440", "assert max_subarray_product([2, -39, 5, -5, -4]) == 1950", "assert max_subarray_product([0, -38, 5, 0, 0]) == 5", "assert max_subarray_product([-7, -40, 2, -2, -5]) == 5600", "assert max_subarray_product([2, -43, 1, -7, -7]) == 602", "assert max_subarray_product([-1, -45, 5, -2, 1]) == 450", "assert max_subarray_product([-5, -45, 1, -3, -8]) == 5400", "assert max_subarray_product([1, -37, 1, -4, 0]) == 148", "assert max_subarray_product([-1, -44, 2, -4, 0]) == 352", "assert max_subarray_product([-5, -35, 3, -4, -1]) == 2100", "assert max_subarray_product([-1, -36, 2, -6, -2]) == 864", "assert max_subarray_product([3, -38, 4, -2, 2]) == 1824"], "entry_point": "max_subarray_product", "repair_prompt": ["Write a function max_subarray_product to identify the subarray within the provided array that yields the highest product.\nmax_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    \n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        \n        result = max(result, max_product)\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    \n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        \n        result = max(result, max_product)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_subarray_product(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    \n    max_product = nums[0]\n    min_product = nums[0]\n    result = max_product\n    \n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        \n        result = max(result, max_product)\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result\n", "from typing import List\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result\n"], "plans": ["requirement analysis:\nThe function should iterate through the array to find subarrays and calculate their products. It needs to keep track of the maximum product found so far and handle cases where the product becomes zero due to negative numbers.\nrequirement pool:\n- Implement the core logic to find the subarray with the highest product\n- Include test cases to validate the function's correctness\n- Optimize the function for better performance\nWe will use a simple approach to iterate through the array and keep track of the maximum product found so far. We will handle cases where the product becomes zero due to negative numbers.\n", "requirement analysis:\nThe function should iterate through the array efficiently, keeping track of both the maximum and minimum product ending at the current index to handle negative numbers.\nrequirement pool:\n- Implement algorithm to find maximum product subarray\n- Handle edge cases like empty array or single element array\n- Optimize the function for large input arrays\nWe will use the Kadane's algorithm to efficiently find the subarray with the highest product, keeping track of both the maximum and minimum product ending at the current index to handle negative numbers.\n", "requirement pool:\n- Efficiently identify the subarray with the highest product\n- Handle negative numbers and zeros in the input array\n- Optimize the algorithm for large input arrays\nWe will use a simple approach to iterate through the array and keep track of the maximum product subarray ending at each index.\n", "requirement analysis:\nThe function should iterate through the array efficiently, keeping track of both the maximum and minimum product ending at the current index to handle negative numbers. It should handle zero values appropriately to ensure accurate results.\nrequirement pool:\n- Efficiently iterate through the array to find the subarray with the highest product\n- Handle negative numbers by keeping track of both maximum and minimum product ending at each index\n- Ensure correct handling of zero values within the array\nWe will use the Kadane's algorithm to efficiently find the subarray with the highest product. We will keep track of both the maximum and minimum product ending at each index to handle negative numbers. Zero values will be appropriately handled to ensure accurate results.\n", "requirement analysis:\nThe function should iterate through the array to find subarrays and calculate their products, keeping track of the maximum product found so far.\nrequirement pool:\n- Implement a function to find the subarray with the highest product\n- Handle cases where the array contains zeros or negative numbers\n- Optimize the algorithm for large input arrays\nWe will use a simple iterative approach to find the subarray with the highest product by keeping track of the maximum product found so far.\n", "requirement analysis:\nThe function should iterate through the array efficiently, keeping track of both the maximum and minimum product ending at the current index to handle negative numbers. It should return the maximum product found.\nrequirement pool:\n- Implement the core logic to find the maximum product subarray\n- Handle edge cases like empty arrays or arrays with only one element\n- Optimize the function for large arrays to ensure performance\nWe will use the Kadane's algorithm to efficiently find the subarray with the highest product. This algorithm keeps track of both the maximum and minimum product ending at the current index to handle negative numbers.\n", "requirement analysis:\nThe function should iterate through the array to find subarrays and calculate their products. It should keep track of the maximum product found and return it.\nrequirement pool:\n- Implement a function to find the subarray with the highest product\n- Handle cases where the array contains zeros or negative numbers\n- Optimize the algorithm for better performance\nWe will design a simple static Python function using appropriate open-source libraries to efficiently find the subarray with the highest product while handling edge cases.\n", "requirement analysis:\nThe function should efficiently iterate through the array to find the subarray with the highest product. It should handle negative numbers and zeros appropriately to ensure accurate results.\nrequirement pool:\n- Efficiently identify the subarray with the highest product\n- Accurately calculate the maximum product\n- Handle edge cases such as negative numbers and zeros\nWe will design a simple static Python function using appropriate open-source libraries to efficiently identify the subarray with the highest product while handling negative numbers and zeros appropriately.\n", "requirement analysis:\nThe function should iterate through the array to find subarrays and calculate their products. It should keep track of the maximum product seen so far and handle cases where the product becomes zero due to negative numbers.\nrequirement pool:\n- Implement the core logic to find the subarray with the highest product\n- Add error handling for edge cases like empty arrays or all negative numbers\n- Optimize the algorithm for better performance on large arrays\nWe will design a simple static Python function using appropriate open-source libraries to efficiently identify the subarray with the highest product while handling edge cases.\n", "requirement analysis:\nThe function should efficiently iterate through the array to find the subarray with the highest product. It should consider both positive and negative numbers in the array. Special cases like zeros should be handled appropriately to ensure accurate results.\nrequirement pool:\n- Efficiently identify the subarray with the highest product\n- Handle edge cases like zeros in the array\n- Ensure accurate calculation of the maximum product\nWe will design a simple static Python function using appropriate open-source libraries like NumPy to efficiently identify the subarray with the highest product.\n"], "test": ["def check(max_subarray_product):\n\tassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "def check(max_subarray_product):\n\tassert max_subarray_product([6, -3, -10, 0, 2]) == 180 ", "def check(max_subarray_product):\n\tassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "def check(max_subarray_product):\n\tassert max_subarray_product([6, 1, 1, 1, 8, -4, -1]) == 192", "def check(max_subarray_product):\n\tassert max_subarray_product([6, -1, 1, 2, 4, -12, 0]) == 576", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -7, -7, 3, 5, -4, -2]) == 5880", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -5, -4, 2, 4, -3, 3]) == 288", "def check(max_subarray_product):\n\tassert max_subarray_product([3, 1, -2, 2, 11, -10, 1]) == 1320", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -4, -1, 3, 6, -5, -4]) == 1440", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -4, -7, 1, 12, -5, 3]) == 1680", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -7, -7, 3, 8, -5, -7]) == 205800", "def check(max_subarray_product):\n\tassert max_subarray_product([4, -5, -4, 2, 2, -7, -2]) == 4480", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -2, -1, 2, 7, -7, -3]) == 2940", "def check(max_subarray_product):\n\tassert max_subarray_product([1, 2, 1, 3, 3, -4, 1]) == 18", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -3, -1, 5, 4, -6, -7]) == 5040", "def check(max_subarray_product):\n\tassert max_subarray_product([6, 3, -3, 5, 5, -3, -5]) == 4050", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -6, -6, 4, 7, -9, 3]) == 5040", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -1, -1, 4, 3, -7, 1]) == 84", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -3, -2, 4, 11, -4, 1]) == 528", "def check(max_subarray_product):\n\tassert max_subarray_product([2, 2, -1, 5, 2, -12, -2]) == 480", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -3, -3, 3, 3, -4, -6]) == 9720", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -4, -5, 2, 4, -6, -6]) == 11520", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -6, 0, 1, 3, -9, 0]) == 3", "def check(max_subarray_product):\n\tassert max_subarray_product([2, 3, 2, 3, 11, -3, 0]) == 396", "def check(max_subarray_product):\n\tassert max_subarray_product([6, 0, -6, 3, 12, -12, -6]) == 2592", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -7, 0, 2, 11, -8, -1]) == 176", "def check(max_subarray_product):\n\tassert max_subarray_product([1, 3, -6, 1, 9, -8, -2]) == 1296", "def check(max_subarray_product):\n\tassert max_subarray_product([4, 2, -5, 1, 9, -12, -2]) == 4320", "def check(max_subarray_product):\n\tassert max_subarray_product([4, -2, 1, 3, 9, -9, -4]) == 1944", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -5, -1, 5, 4, -6, 3]) == 360", "def check(max_subarray_product):\n\tassert max_subarray_product([4, 0, -2, 1, 12, -11, -3]) == 396", "def check(max_subarray_product):\n\tassert max_subarray_product([5, 2, -6, 3, 6, -6, -5]) == 6480", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -5, -1, 2, 7, -7, -5]) == 4900", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -4, -6, 1, 11, -9, 3]) == 1782", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -1, -5, 5, 3, -9, -6]) == 8100", "def check(max_subarray_product):\n\tassert max_subarray_product([1, 0, -7, 1, 7, -12, -7]) == 588", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -1, -12, 4, 7]) == 1008", "def check(max_subarray_product):\n\tassert max_subarray_product([2, 0, -11, 2, 1]) == 2", "def check(max_subarray_product):\n\tassert max_subarray_product([10, 2, -12, 3, 5]) == 20", "def check(max_subarray_product):\n\tassert max_subarray_product([10, 0, -5, 4, 2]) == 10", "def check(max_subarray_product):\n\tassert max_subarray_product([9, -7, -12, 4, 1]) == 3024", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -5, -10, 2, 1]) == 200", "def check(max_subarray_product):\n\tassert max_subarray_product([4, -5, -13, 2, 1]) == 520", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -8, -7, 3, 1]) == 840", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -4, -7, 3, 7]) == 588", "def check(max_subarray_product):\n\tassert max_subarray_product([10, -8, -7, 3, 1]) == 1680", "def check(max_subarray_product):\n\tassert max_subarray_product([9, -5, -13, 3, 5]) == 8775", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -8, -9, 2, 3]) == 864", "def check(max_subarray_product):\n\tassert max_subarray_product([1, 2, -14, 2, 6]) == 12", "def check(max_subarray_product):\n\tassert max_subarray_product([5, 2, -15, 2, 1]) == 10", "def check(max_subarray_product):\n\tassert max_subarray_product([7, -3, -10, 4, 4]) == 3360", "def check(max_subarray_product):\n\tassert max_subarray_product([6, -4, -13, 1, 4]) == 1248", "def check(max_subarray_product):\n\tassert max_subarray_product([6, -3, -5, 4, 4]) == 1440", "def check(max_subarray_product):\n\tassert max_subarray_product([8, -8, -5, 2, 2]) == 1280", "def check(max_subarray_product):\n\tassert max_subarray_product([7, -8, -11, 1, 1]) == 616", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -3, -12, 3, 6]) == 1944", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -6, -13, 4, 4]) == 3744", "def check(max_subarray_product):\n\tassert max_subarray_product([11, 2, -9, 3, 4]) == 22", "def check(max_subarray_product):\n\tassert max_subarray_product([9, -7, -12, 3, 7]) == 15876", "def check(max_subarray_product):\n\tassert max_subarray_product([8, 0, -7, 3, 5]) == 15", "def check(max_subarray_product):\n\tassert max_subarray_product([4, 1, -14, 5, 6]) == 30", "def check(max_subarray_product):\n\tassert max_subarray_product([10, -7, -5, 5, 5]) == 8750", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -5, -14, 4, 2]) == 1680", "def check(max_subarray_product):\n\tassert max_subarray_product([11, -6, -9, 5, 2]) == 5940", "def check(max_subarray_product):\n\tassert max_subarray_product([4, -2, -9, 3, 6]) == 1296", "def check(max_subarray_product):\n\tassert max_subarray_product([5, -6, -10, 1, 5]) == 1500", "def check(max_subarray_product):\n\tassert max_subarray_product([4, 1, -10, 2, 6]) == 12", "def check(max_subarray_product):\n\tassert max_subarray_product([6, -3, -11, 3, 7]) == 4158", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -1, -15, 3, 6]) == 810", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -39, 1, 0, 2]) == 2", "def check(max_subarray_product):\n\tassert max_subarray_product([0, -35, 5, -1, 0]) == 175", "def check(max_subarray_product):\n\tassert max_subarray_product([-2, -45, 1, -1, -3]) == 270", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -38, 1, 3, -4]) == 1368", "def check(max_subarray_product):\n\tassert max_subarray_product([-1, -40, 3, 3, -1]) == 360", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -45, 4, -6, -3]) == 2160", "def check(max_subarray_product):\n\tassert max_subarray_product([-7, -43, 4, -2, -6]) == 14448", "def check(max_subarray_product):\n\tassert max_subarray_product([-1, -43, 5, -6, -3]) == 3870", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -45, 2, 0, -6]) == 2", "def check(max_subarray_product):\n\tassert max_subarray_product([-2, -36, 5, -1, 0]) == 360", "def check(max_subarray_product):\n\tassert max_subarray_product([0, -37, 3, -6, 1]) == 666", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -38, 4, -4, -1]) == 1824", "def check(max_subarray_product):\n\tassert max_subarray_product([-4, -45, 2, -5, -8]) == 14400", "def check(max_subarray_product):\n\tassert max_subarray_product([0, -44, 1, -4, 2]) == 352", "def check(max_subarray_product):\n\tassert max_subarray_product([-3, -44, 3, -2, -7]) == 5544", "def check(max_subarray_product):\n\tassert max_subarray_product([-4, -35, 2, 1, 0]) == 280", "def check(max_subarray_product):\n\tassert max_subarray_product([-7, -36, 5, -5, -2]) == 12600", "def check(max_subarray_product):\n\tassert max_subarray_product([-3, -45, 4, -3, -8]) == 12960", "def check(max_subarray_product):\n\tassert max_subarray_product([-3, -36, 5, -7, -4]) == 15120", "def check(max_subarray_product):\n\tassert max_subarray_product([-2, -38, 3, 2, -6]) == 1368", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -40, 5, -1, -4]) == 600", "def check(max_subarray_product):\n\tassert max_subarray_product([-3, -41, 5, -7, -8]) == 34440", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -39, 5, -5, -4]) == 1950", "def check(max_subarray_product):\n\tassert max_subarray_product([0, -38, 5, 0, 0]) == 5", "def check(max_subarray_product):\n\tassert max_subarray_product([-7, -40, 2, -2, -5]) == 5600", "def check(max_subarray_product):\n\tassert max_subarray_product([2, -43, 1, -7, -7]) == 602", "def check(max_subarray_product):\n\tassert max_subarray_product([-1, -45, 5, -2, 1]) == 450", "def check(max_subarray_product):\n\tassert max_subarray_product([-5, -45, 1, -3, -8]) == 5400", "def check(max_subarray_product):\n\tassert max_subarray_product([1, -37, 1, -4, 0]) == 148", "def check(max_subarray_product):\n\tassert max_subarray_product([-1, -44, 2, -4, 0]) == 352", "def check(max_subarray_product):\n\tassert max_subarray_product([-5, -35, 3, -4, -1]) == 2100", "def check(max_subarray_product):\n\tassert max_subarray_product([-1, -36, 2, -6, -2]) == 864", "def check(max_subarray_product):\n\tassert max_subarray_product([3, -38, 4, -2, 2]) == 1824"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result\n", "passed": true, "pass": true, "pass_num": 10, "round": 726, "mutate_method": "condense_two2one", "parent_index": 632}
