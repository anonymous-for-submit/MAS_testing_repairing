{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 69, "prompt": "Write a function to check whether a list contains the given sublist or not. A sublist is a sequence of elements that appear consecutively in the main list. The elements of the sublist are in the same order as they appear in the main list.", "code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "test_imports": [], "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False", "assert is_sublist([2, 7, 5, 8, 6], [4, 9]) == False", "assert is_sublist([5, 7, 3, 6, 10], [4, 2]) == False", "assert is_sublist([2, 4, 3, 7, 11], [7, 2]) == False", "assert is_sublist([1, 2, 4, 5, 6], [8, 12]) == False", "assert is_sublist([1, 8, 3, 8, 7], [3, 2]) == False", "assert is_sublist([3, 9, 7, 1, 3], [8, 7]) == False", "assert is_sublist([7, 1, 5, 1, 3], [7, 9]) == False", "assert is_sublist([1, 8, 4, 1, 12], [7, 5]) == False", "assert is_sublist([7, 1, 1, 5, 7], [5, 5]) == False", "assert is_sublist([1, 5, 3, 4, 5], [1, 4]) == False", "assert is_sublist([4, 5, 7, 6, 2], [3, 7]) == False", "assert is_sublist([5, 2, 5, 4, 2], [7, 12]) == False", "assert is_sublist([4, 3, 1, 1, 5], [2, 12]) == False", "assert is_sublist([7, 1, 7, 8, 2], [8, 4]) == False", "assert is_sublist([3, 6, 1, 1, 11], [8, 5]) == False", "assert is_sublist([6, 3, 6, 10, 5], [8, 10]) == False", "assert is_sublist([7, 2, 7, 9, 7], [6, 3]) == False", "assert is_sublist([6, 4, 4, 3, 2], [5, 3]) == False", "assert is_sublist([5, 8, 8, 9, 2], [7, 7]) == False", "assert is_sublist([3, 3, 5, 2, 12], [7, 10]) == False", "assert is_sublist([2, 9, 1, 10, 9], [1, 7]) == False", "assert is_sublist([5, 8, 8, 3, 11], [8, 9]) == False", "assert is_sublist([6, 6, 8, 4, 6], [2, 7]) == False", "assert is_sublist([4, 5, 4, 3, 10], [6, 9]) == False", "assert is_sublist([2, 1, 2, 1, 12], [2, 6]) == False", "assert is_sublist([7, 7, 4, 7, 3], [1, 10]) == False", "assert is_sublist([7, 1, 7, 9, 9], [3, 7]) == False", "assert is_sublist([2, 3, 2, 4, 10], [5, 8]) == False", "assert is_sublist([6, 7, 5, 7, 7], [6, 6]) == False", "assert is_sublist([6, 2, 8, 7, 12], [6, 6]) == False", "assert is_sublist([2, 1, 7, 6, 11], [6, 3]) == False", "assert is_sublist([1, 9, 6, 6, 8], [3, 7]) == False", "assert is_sublist([5, 2, 2, 10, 4], [7, 2]) == False", "assert is_sublist([2, 5, 8, 8, 2], [3, 8]) == False", "assert is_sublist([6, 6, 5, 7, 2], [1, 8]) == False", "assert is_sublist([7, 3, 2, 10, 3], [9, 4]) == False", "assert is_sublist([6, 8, 3, 3, 12], [8, 6]) == False", "assert is_sublist([2, 7, 7, 6, 7], [3, 1]) == False", "assert is_sublist([7, 4, 6, 6, 4], [3, 1]) == False", "assert is_sublist([3, 7, 4, 5, 7], [5, 2]) == False", "assert is_sublist([4, 8, 1, 9, 6], [9, 7]) == False", "assert is_sublist([3, 3, 6, 5, 3], [6, 7]) == False", "assert is_sublist([1, 2, 3, 4, 9], [8, 2]) == False", "assert is_sublist([3, 1, 7, 9, 10], [7, 4]) == False", "assert is_sublist([5, 1, 3, 1, 11], [3, 6]) == False", "assert is_sublist([4, 6, 1, 5, 4], [1, 2]) == False", "assert is_sublist([3, 7, 7, 10, 8], [1, 1]) == False", "assert is_sublist([4, 5, 3, 7, 10], [3, 1]) == False", "assert is_sublist([2, 5, 2, 5, 4], [2, 1]) == False", "assert is_sublist([2, 3, 8, 10, 11], [7, 6]) == False", "assert is_sublist([1, 7, 6, 6, 12], [4, 8]) == False", "assert is_sublist([3, 9, 8, 6, 5], [9, 8]) == True", "assert is_sublist([5, 4, 4, 6, 4], [7, 7]) == False", "assert is_sublist([7, 3, 3, 1, 8], [1, 2]) == False", "assert is_sublist([7, 6, 7, 8, 12], [4, 2]) == False", "assert is_sublist([3, 6, 7, 4, 12], [4, 7]) == False", "assert is_sublist([5, 7, 7, 7, 12], [5, 5]) == False", "assert is_sublist([4, 6, 1, 9, 7], [5, 3]) == False", "assert is_sublist([5, 2, 5, 2, 3], [6, 2]) == False", "assert is_sublist([1, 5, 2, 1, 5], [8, 1]) == False", "assert is_sublist([7, 6, 2, 3, 11], [3, 8]) == False", "assert is_sublist([1, 9, 6, 4, 12], [7, 8]) == False", "assert is_sublist([4, 7, 3, 10, 7], [1, 4]) == False", "assert is_sublist([4, 7, 8, 2, 10], [2, 4]) == False", "assert is_sublist([3, 5, 4, 9, 7], [9, 1]) == False", "assert is_sublist([6, 4, 4, 10, 6], [7, 1]) == False", "assert is_sublist([7, 3, 4, 7, 4], [1, 2]) == False", "assert is_sublist([5, 4, 4, 3, 7], [4, 10]) == False", "assert is_sublist([2, 1, 8, 10, 6], [2, 10]) == False", "assert is_sublist([3, 2, 7, 1, 7], [2, 8]) == False", "assert is_sublist([1, 2, 1, 4, 12], [1, 1]) == False", "assert is_sublist([3, 8, 8, 9, 3], [4, 3]) == False", "assert is_sublist([4, 3, 5, 9, 12], [5, 5]) == False", "assert is_sublist([1, 5, 5, 9, 2], [1, 6]) == False", "assert is_sublist([7, 3, 7, 1, 10], [3, 4]) == False", "assert is_sublist([5, 2, 4, 7, 2], [1, 7]) == False", "assert is_sublist([7, 1, 8, 7, 11], [5, 8]) == False", "assert is_sublist([5, 1, 2, 3, 6], [3, 5]) == False", "assert is_sublist([2, 7, 1, 6, 6], [3, 11]) == False", "assert is_sublist([7, 2, 1, 1, 7], [5, 11]) == False", "assert is_sublist([3, 3, 3, 4, 12], [6, 9]) == False", "assert is_sublist([4, 4, 4, 9, 11], [2, 2]) == False", "assert is_sublist([7, 1, 1, 1, 6], [2, 7]) == False", "assert is_sublist([4, 1, 7, 10, 8], [6, 8]) == False", "assert is_sublist([3, 4, 4, 5, 4], [2, 11]) == False", "assert is_sublist([4, 6, 5, 8, 12], [1, 3]) == False", "assert is_sublist([2, 2, 5, 2, 11], [3, 1]) == False", "assert is_sublist([2, 2, 5, 5, 4], [6, 1]) == False", "assert is_sublist([2, 9, 5, 3, 6], [5, 1]) == False", "assert is_sublist([6, 5, 4, 10, 10], [3, 5]) == False", "assert is_sublist([1, 9, 5, 10, 8], [3, 6]) == False", "assert is_sublist([5, 2, 2, 8, 10], [2, 3]) == False", "assert is_sublist([3, 8, 3, 3, 4], [1, 9]) == False", "assert is_sublist([5, 5, 8, 5, 4], [6, 4]) == False", "assert is_sublist([1, 6, 7, 3, 10], [2, 9]) == False", "assert is_sublist([1, 5, 8, 8, 6], [3, 5]) == False", "assert is_sublist([7, 8, 3, 3, 2], [4, 8]) == False", "assert is_sublist([6, 5, 4, 10, 3], [4, 8]) == False", "assert is_sublist([5, 3, 8, 2, 12], [1, 6]) == False"], "entry_point": "is_sublist", "repair_prompt": ["Write a function is_sublist to check whether a list contains the given sublist or not. A sublist is a sequence of elements that appear consecutively in the main list. The elements of the sublist are in the same order as they appear in the main list.\nis_sublist([2,4,3,5,7],[3,7])==False\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    if not sublist:\n        return True\n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"\n    Check if sublist is present in main_list\n    \n    Args:\n    main_list: List - The main list to search in\n    sublist: List - The sublist to search for\n    \n    Returns:\n    bool: True if sublist is found in main_list, False otherwise\n    \"\"\"\n    \n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Function to check if sublist exists in main_list\n    \n    Args:\n    main_list: List[int] - The main list to check for sublist presence\n    sublist: List[int] - The sublist to check\n    \n    Returns:\n    bool - True if sublist exists in main_list in the same order, False otherwise\n    \"\"\"\n    \n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            if main_list[i:i+len(sublist)] == sublist:\n                return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Check if sublist is present in main_list\n    \n    Args:\n    main_list: List[int] - The main list to search in\n    sublist: List[int] - The sublist to search for\n    \n    Returns:\n    bool - True if sublist is found in main_list, False otherwise\n    \"\"\"\n    \n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List, sublist: List) -> bool:\n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            if main_list[i:i+len(sublist)] == sublist:\n                return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i] == sublist[0]:\n            if main_list[i:i+len(sublist)] == sublist:\n                return True\n    \n    return False\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef is_sublist(main_list: List, sublist: List) -> bool:\n    \"\"\"\n    Check if sublist is present in main_list\n    \n    Args:\n    main_list: List - The main list to search in\n    sublist: List - The sublist to search for\n    \n    Returns:\n    bool: True if sublist is found in main_list, False otherwise\n    \"\"\"\n    \n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n    \n    for i in range(len(main_list)):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n    \n    return False\n", "from typing import List\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Check if sublist is present in main_list.\n\n    Args:\n    main_list: A list of integers.\n    sublist: A list of integers to check for presence in main_list.\n\n    Returns:\n    bool: True if sublist is present in main_list, False otherwise.\n    \"\"\"\n    if not sublist:\n        return True\n    \n    if not main_list:\n        return False\n\n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i+len(sublist)] == sublist:\n            return True\n\n    return False\n", "from typing import List\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Check if sublist is found in main_list\n    \n    Args:\n        main_list (List[int]): The main list to search in\n        sublist (List[int]): The sublist to search for\n        \n    Returns:\n        bool: True if sublist is found in main_list, False otherwise\n    \"\"\"\n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i + len(sublist)] == sublist:\n            return True\n    return False\n"], "plans": ["requirement analysis:\nThe function should iterate through the main list and compare each element with the sublist. It should return True if the sublist is found, False otherwise.\nrequirement pool:\n- Implement the is_sublist function to handle basic sublist checking\n- Optimize the function for performance to handle large lists efficiently\n- Include unit tests to ensure the function works correctly in all scenarios\nWe will design a simple static Python function using basic list operations to efficiently check for sublists in a list.\n", "requirement pool:\n- Implement is_sublist function to accurately check for sublists\n- Handle cases where the sublist is empty or longer than the main list\n- Optimize the function for large lists to maintain efficiency\nWe will use a simple approach to iterate through the main list and check for the sublist by comparing elements consecutively.\n", "requirement pool:\n- Implement is_sublist function to accurately check for sublists\n- Handle cases where the sublist is empty or longer than the main list\n- Optimize the function for large lists to maintain efficiency\nWe will use a simple approach to iterate through the main list and check for the sublist by comparing elements consecutively.\n", "requirement pool:\n- Implement is_sublist function efficiently\n- Ensure correct sublist order verification\n- Handle edge cases like empty lists\nWe will design a simple static Python function using basic list operations to efficiently check for sublist presence and ensure accurate sublist order verification.\n", "requirement pool:\n- Implement is_sublist function to accurately check for sublists\n- Handle cases where the sublist is empty or longer than the main list\n- Optimize the function for large lists to maintain efficiency\nWe will use a simple approach to iterate through the main list and check for the sublist by comparing elements consecutively.\n", "requirement pool:\n- Implement is_sublist function to accurately check for sublists\n- Optimize the function for performance on large datasets\n- Ensure the function handles edge cases gracefully\nWe will use a simple approach to iterate through the main list and check if each element matches the first element of the sublist. If a match is found, we will then check the subsequent elements to see if they form the sublist.\n", "requirement pool:\n- Implement is_sublist function to efficiently check sublist presence\n- Ensure sublist order verification for accurate results\n- Return clear True/False output for sublist presence\nWe will use a simple approach to iterate through the main list and check for the sublist by comparing elements consecutively.\n", "requirement pool:\n- Implement is_sublist function to accurately identify sublists\n- Handle edge cases such as empty lists or non-list inputs\n- Optimize the function for performance on large datasets\nWe will use a simple approach to iterate through the main list and check for the sublist by comparing elements consecutively.\n", "requirement analysis:\nThe function should iterate through the main list and compare each element with the sublist. It should return True if the sublist is found, False otherwise. Edge cases like empty lists should be considered.\nrequirement pool:\n- Implement the core function to check for sublists\n- Write test cases to cover different scenarios\n- Optimize the function for better performance\nWe will use a simple approach to iterate through the main list and compare each element with the sublist to check for its presence.\n", "requirement pool:\n- Implement is_sublist function to efficiently check for sublist presence\n- Ensure the function accurately verifies the order of elements in the sublist\n- Handle cases where the sublist is not found gracefully\nWe will design a simple static Python function using basic list operations to efficiently check for sublist presence and accurately verify the order of elements in the sublist.\n"], "test": ["def check(is_sublist):\n\tassert is_sublist([2,4,3,5,7],[3,7])==False", "def check(is_sublist):\n\tassert is_sublist([2,4,3,5,7],[4,3])==True", "def check(is_sublist):\n\tassert is_sublist([2,4,3,5,7],[1,6])==False", "def check(is_sublist):\n\tassert is_sublist([2, 7, 5, 8, 6], [4, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 7, 3, 6, 10], [4, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 4, 3, 7, 11], [7, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 2, 4, 5, 6], [8, 12]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 8, 3, 8, 7], [3, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 9, 7, 1, 3], [8, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 5, 1, 3], [7, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 8, 4, 1, 12], [7, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 1, 5, 7], [5, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 3, 4, 5], [1, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 5, 7, 6, 2], [3, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 5, 4, 2], [7, 12]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 3, 1, 1, 5], [2, 12]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 7, 8, 2], [8, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 6, 1, 1, 11], [8, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 3, 6, 10, 5], [8, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 2, 7, 9, 7], [6, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 4, 4, 3, 2], [5, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 8, 8, 9, 2], [7, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 3, 5, 2, 12], [7, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 9, 1, 10, 9], [1, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 8, 8, 3, 11], [8, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 6, 8, 4, 6], [2, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 5, 4, 3, 10], [6, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 1, 2, 1, 12], [2, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 7, 4, 7, 3], [1, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 7, 9, 9], [3, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 3, 2, 4, 10], [5, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 7, 5, 7, 7], [6, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 2, 8, 7, 12], [6, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 1, 7, 6, 11], [6, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 9, 6, 6, 8], [3, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 2, 10, 4], [7, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 5, 8, 8, 2], [3, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 6, 5, 7, 2], [1, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 2, 10, 3], [9, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 8, 3, 3, 12], [8, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 7, 7, 6, 7], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 4, 6, 6, 4], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 7, 4, 5, 7], [5, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 8, 1, 9, 6], [9, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 3, 6, 5, 3], [6, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 2, 3, 4, 9], [8, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 1, 7, 9, 10], [7, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 1, 3, 1, 11], [3, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 6, 1, 5, 4], [1, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 7, 7, 10, 8], [1, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 5, 3, 7, 10], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 5, 2, 5, 4], [2, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 3, 8, 10, 11], [7, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 7, 6, 6, 12], [4, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 9, 8, 6, 5], [9, 8]) == True", "def check(is_sublist):\n\tassert is_sublist([5, 4, 4, 6, 4], [7, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 3, 1, 8], [1, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 6, 7, 8, 12], [4, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 6, 7, 4, 12], [4, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 7, 7, 7, 12], [5, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 6, 1, 9, 7], [5, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 5, 2, 3], [6, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 2, 1, 5], [8, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 6, 2, 3, 11], [3, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 9, 6, 4, 12], [7, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 7, 3, 10, 7], [1, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 7, 8, 2, 10], [2, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 5, 4, 9, 7], [9, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 4, 4, 10, 6], [7, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 4, 7, 4], [1, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 4, 4, 3, 7], [4, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 1, 8, 10, 6], [2, 10]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 2, 7, 1, 7], [2, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 2, 1, 4, 12], [1, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 8, 8, 9, 3], [4, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 3, 5, 9, 12], [5, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 5, 9, 2], [1, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 3, 7, 1, 10], [3, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 4, 7, 2], [1, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 8, 7, 11], [5, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 1, 2, 3, 6], [3, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 7, 1, 6, 6], [3, 11]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 2, 1, 1, 7], [5, 11]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 3, 3, 4, 12], [6, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 4, 4, 9, 11], [2, 2]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 1, 1, 1, 6], [2, 7]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 1, 7, 10, 8], [6, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 4, 4, 5, 4], [2, 11]) == False", "def check(is_sublist):\n\tassert is_sublist([4, 6, 5, 8, 12], [1, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 2, 5, 2, 11], [3, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 2, 5, 5, 4], [6, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([2, 9, 5, 3, 6], [5, 1]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 5, 4, 10, 10], [3, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 9, 5, 10, 8], [3, 6]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 2, 2, 8, 10], [2, 3]) == False", "def check(is_sublist):\n\tassert is_sublist([3, 8, 3, 3, 4], [1, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 5, 8, 5, 4], [6, 4]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 6, 7, 3, 10], [2, 9]) == False", "def check(is_sublist):\n\tassert is_sublist([1, 5, 8, 8, 6], [3, 5]) == False", "def check(is_sublist):\n\tassert is_sublist([7, 8, 3, 3, 2], [4, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([6, 5, 4, 10, 3], [4, 8]) == False", "def check(is_sublist):\n\tassert is_sublist([5, 3, 8, 2, 12], [1, 6]) == False"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\nfrom typing import List\n\ndef is_sublist(main_list: List[int], sublist: List[int]) -> bool:\n    \"\"\"\n    Check if sublist is found in main_list\n    \n    Args:\n        main_list (List[int]): The main list to search in\n        sublist (List[int]): The sublist to search for\n        \n    Returns:\n        bool: True if sublist is found in main_list, False otherwise\n    \"\"\"\n    for i in range(len(main_list) - len(sublist) + 1):\n        if main_list[i:i + len(sublist)] == sublist:\n            return True\n    return False\n", "passed": true, "pass": true, "pass_num": 10, "round": 22, "mutate_method": "expand_one2two", "parent_index": 22}
