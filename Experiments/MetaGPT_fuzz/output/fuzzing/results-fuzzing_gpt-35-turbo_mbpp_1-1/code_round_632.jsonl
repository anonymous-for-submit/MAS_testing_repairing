{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 129, "prompt": "Write a function to calculate whether the matrix is magic square. A magic square is a grid of numbers where each row, column, and diagonal sum to the same number. This property of equal sums is what defines a magic square.", "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "assert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "assert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "assert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "assert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "assert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "assert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "assert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "assert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "assert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "assert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "assert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "assert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "assert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "assert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "assert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "assert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "assert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "assert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "assert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "assert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "assert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "assert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "assert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "assert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "assert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "assert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "assert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "assert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "assert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "assert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "assert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "assert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "assert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "assert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "assert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "assert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "assert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "assert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "assert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "assert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "assert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "assert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "assert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "assert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "assert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "assert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "assert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "assert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "assert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "assert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "assert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "assert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "assert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "assert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "assert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "assert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "assert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "assert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "assert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "assert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "assert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "assert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "assert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "assert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "assert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "assert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "assert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "assert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "assert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "assert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "assert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "assert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "assert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "assert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "assert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "assert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "assert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "assert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "assert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "assert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "assert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "assert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "assert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "assert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "assert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "assert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "assert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "assert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "assert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "assert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "assert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "assert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "assert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "assert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "assert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "assert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "assert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "assert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "assert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "entry_point": "magic_square_test", "repair_prompt": ["Write a function magic_square_test to calculate whether the matrix is magic square. A magic square is a grid of numbers where each row, column, and diagonal sum to the same number. This property of equal sums is what defines a magic square.\nmagic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n"], "completions": ["from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Args:\n    matrix: A 2D list of integers representing the matrix\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n\n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n\n    # Calculate the sum of the first row (assumed to be the magic constant)\n    magic_constant = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != magic_constant:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Args:\n    matrix: A 2D list of integers representing the matrix\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n\n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n\n    # Calculate the sum of the first row (assumed to be the magic constant)\n    magic_constant = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != magic_constant:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    Args:\n    matrix: A 2D list of integers representing the matrix\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n\n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n\n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != target_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Args:\n    matrix: A 2D list representing the matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n\n    # Calculate the sum of the first row (assumed to be the magic sum)\n    magic_sum = sum(matrix[0])\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check columns\n    for i in range(n):\n        if sum(matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    Args:\n    matrix: A 2D list representing the matrix\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    \n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row to use as a reference\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    \n    # Check diagonal from top-left to bottom-right\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check diagonal from top-right to bottom-left\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    Args:\n    matrix: A square matrix (list of lists) of integers\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    \n    # Check if the matrix is a square matrix\n    n = len(matrix)\n    if n == 0:\n        return False\n    \n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    \n    # Check diagonal from top-left to bottom-right\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check diagonal from top-right to bottom-left\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the input matrix is a magic square.\n\n    Args:\n    - matrix: a square matrix represented as a list of lists of integers\n\n    Returns:\n    - bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n\n    # Check if the matrix is a square matrix\n    n = len(matrix)\n    if not all(len(row) == n for row in matrix):\n        return False\n\n    # Calculate the sum of the first row to use as a reference sum\n    ref_sum = sum(matrix[0])\n\n    # Check rows\n    if any(sum(row) != ref_sum for row in matrix):\n        return False\n\n    # Check columns\n    if any(sum(col) != ref_sum for col in zip(*matrix)):\n        return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != ref_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != ref_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    Args:\n    matrix: a 2D list of integers representing the matrix\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    \n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n    \n    # Check row sums\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check column sums\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    \n    # Check diagonal sums\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n", "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Verify if the given matrix is a magic square.\n\n    Args:\n    matrix: A 2D list representing the matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Check if the matrix is empty\n    if not matrix:\n        return False\n\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "from typing import List\nfrom typing import List\n\ndef is_magic_square(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Check if the given matrix is a magic square.\n    \n    Args:\n    matrix: A 2D list representing the matrix\n    \n    Returns:\n    bool: True if the matrix is a magic square, False otherwise\n    \"\"\"\n    \n    # Check if the matrix is square\n    n = len(matrix)\n    if n != len(matrix[0]):\n        return False\n    \n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n    \n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n    \n    # Check secondary diagonal\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n"], "plans": ["requirement pool:\n- Implement the magic square verification algorithm\n- Test the function with different matrix sizes and edge cases\n- Document the function with clear examples and usage instructions\nWe will design a simple static Python function using basic logic to check if a given matrix is a magic square.\n", "requirement pool:\n- Implement the magic_square_test function to check magic squares\n- Ensure the function works for square matrices of any size\n- Include clear instructions and examples in the function documentation\nWe will design a simple static Python function using basic logic to check if a given matrix is a magic square.\n", "requirement pool:\n- Implement the magic square verification algorithm\n- Test the function with various matrix sizes and edge cases\n- Document the function usage and input/output format\nWe will design a simple static Python function using basic logic to check if a given matrix is a magic square.\n", "requirement pool:\n- Implement the magic square validation logic\n- Ensure the function handles edge cases effectively\n- Optimize the algorithm for efficiency\nWe will design a simple static Python function using basic logic to check if a given matrix is a magic square.\n", "requirement pool:\n- Implement function to check if the matrix is a magic square\n- Support different matrix sizes for versatility\n- Document the function for easy integration\nWe will use a simple approach to check if the given matrix is a magic square by calculating the sum of rows, columns, and diagonals and comparing them.\n", "requirement analysis:\nThe function should iterate through rows, columns, and diagonals to calculate sums and compare them to determine if it's a magic square. It should handle square matrices of any size efficiently.\nrequirement pool:\n- Implement the core logic to check rows, columns, and diagonals for equal sums\n- Test the function with different magic squares and non-magic squares for accuracy\n- Optimize the function for better performance on large matrices\nWe will design a simple static Python function using basic iteration to check rows, columns, and diagonals for equal sums in a matrix.\n", "requirement analysis:\nThe function should iterate through rows, columns, and diagonals to calculate sums and compare them. It should handle square matrices of any size efficiently.\nrequirement pool:\n- Implement function to calculate row sums\n- Implement function to calculate column sums\n- Implement function to calculate diagonal sums\n- Ensure the function returns True only if all sums are equal\n- Test the function with various magic squares and non-magic squares\nWe will use a simple approach to iterate through rows, columns, and diagonals to calculate the sums and compare them to determine if the matrix is a magic square. We will leverage basic Python functionalities to achieve this.\n", "requirement pool:\n- Implement a function to calculate row sums\n- Implement a function to calculate column sums\n- Implement a function to calculate diagonal sums\n- Ensure all sum calculations are equal for a magic square\n- Write unit tests to validate the magic square function\nWe will design a simple static Python function using basic arithmetic operations to calculate row sums, column sums, and diagonal sums to determine if a matrix is a magic square. We will leverage the built-in functions in Python for efficient computation.\n", "requirement pool:\n- Implement the magic square verification algorithm\n- Test the function with various matrix sizes and edge cases\n- Document the function with clear examples and usage instructions\nWe will use a simple approach to implement the magic square verification algorithm without defining any class. We will iterate through rows, columns, and diagonals to calculate the sums and compare them to determine if it's a magic square.\n", "requirement analysis:\nThe function should iterate through rows, columns, and diagonals to calculate sums and compare them to determine if it's a magic square. It should handle square matrices of any size.\nrequirement pool:\n- Implement function to calculate row sums\n- Implement function to calculate column sums\n- Implement function to calculate diagonal sums\n- Ensure the function returns True for magic squares and False otherwise\n- Test the function with various magic and non-magic square matrices\nWe will use a simple approach to iterate through rows, columns, and diagonals to calculate the sums and compare them to determine if the matrix is a magic square. We will leverage basic Python functionalities to achieve this.\n"], "test": ["def check(magic_square_test):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "def check(magic_square_test):\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 9, 3, 14], [7, 10, 9, 11], [16, 6, 13, 6], [9, 11, 17, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 10, 6, 17], [5, 8, 4, 11], [13, 1, 5, 9], [11, 10, 17, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 8, 3, 9], [3, 16, 5, 7], [12, 7, 5, 2], [12, 11, 12, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 12, 6, 10], [7, 10, 4, 9], [20, 8, 9, 8], [14, 8, 16, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 10, 1, 13], [4, 12, 3, 6], [18, 7, 5, 1], [4, 2, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 3, 9], [7, 9, 11, 8], [19, 1, 11, 1], [10, 9, 15, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 7, 2, 16], [7, 18, 4, 12], [16, 7, 13, 6], [10, 1, 18, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 7, 5, 15], [7, 13, 6, 8], [20, 2, 11, 9], [13, 6, 15, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 8, 3, 10], [1, 9, 7, 13], [16, 7, 14, 4], [7, 10, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 17, 1, 10], [4, 15, 5, 11], [15, 6, 5, 7], [5, 1, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 13, 5, 14], [5, 15, 11, 14], [12, 4, 15, 2], [13, 9, 13, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 14, 5, 9], [1, 11, 9, 14], [13, 5, 14, 8], [11, 7, 13, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 9, 2, 16], [7, 15, 4, 11], [21, 2, 13, 4], [10, 9, 20, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 2, 16], [6, 10, 9, 8], [15, 4, 12, 6], [14, 10, 18, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 8, 3, 12], [6, 14, 5, 7], [13, 3, 6, 10], [12, 11, 15, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 4, 17], [1, 14, 3, 12], [17, 6, 13, 1], [4, 8, 12, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 7, 6, 9], [6, 10, 8, 10], [19, 3, 5, 1], [8, 7, 18, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 13, 1, 12], [6, 16, 7, 10], [18, 4, 8, 5], [8, 5, 16, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 12, 3, 13], [4, 13, 13, 8], [17, 7, 15, 9], [14, 5, 14, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 9, 2, 18], [7, 9, 13, 13], [18, 7, 9, 4], [5, 9, 14, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 5, 16], [6, 14, 9, 15], [20, 2, 13, 5], [7, 4, 18, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 14, 6, 9], [7, 14, 13, 8], [11, 6, 9, 5], [10, 3, 10, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 15, 5, 9], [2, 17, 7, 8], [21, 8, 8, 1], [10, 11, 15, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[9, 14, 5, 19], [4, 15, 11, 16], [19, 6, 13, 7], [9, 7, 10, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 11, 6, 15], [6, 16, 5, 13], [19, 8, 11, 1], [13, 10, 11, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[10, 11, 5, 11], [3, 18, 10, 15], [18, 6, 5, 3], [12, 5, 18, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 4, 17], [2, 15, 4, 11], [17, 5, 5, 3], [8, 2, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 16, 4, 15], [2, 15, 11, 8], [20, 6, 14, 3], [14, 3, 20, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[8, 11, 3, 11], [2, 12, 9, 7], [21, 5, 9, 10], [14, 7, 11, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 17, 4, 14], [6, 9, 4, 16], [15, 5, 14, 5], [13, 3, 10, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[11, 14, 2, 17], [5, 17, 4, 10], [14, 1, 8, 6], [4, 7, 14, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 16, 2, 10], [2, 17, 6, 13], [12, 5, 10, 5], [7, 1, 15, 1]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[12, 7, 4, 14], [7, 18, 5, 9], [17, 4, 12, 1], [10, 7, 17, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 2, 4], [5, 9, 5], [8, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 10, 8], [14, 9, 6], [1, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 3], [4, 1, 1], [7, 2, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 11], [7, 5, 3], [5, 1, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 1], [12, 5, 3], [1, 7, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 4], [8, 1, 2], [9, 8, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 3, 8], [4, 5, 6], [4, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [10, 4, 1], [3, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [5, 5, 6], [6, 2, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 7], [5, 1, 5], [6, 3, 8]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 11, 3], [11, 10, 3], [5, 8, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 9, 4], [8, 8, 4], [2, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 3], [9, 8, 3], [9, 5, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 8, 3], [7, 10, 4], [3, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 9, 11], [13, 1, 3], [6, 3, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 4, 2], [13, 2, 2], [6, 1, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 2, 7], [13, 10, 3], [3, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 9], [10, 8, 5], [2, 8, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 4], [14, 10, 3], [2, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 10], [5, 6, 5], [1, 2, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 3, 2], [6, 5, 4], [6, 1, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 3, 2], [11, 2, 6], [2, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 2], [6, 8, 5], [6, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 4], [9, 2, 3], [5, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 8, 7], [4, 3, 4], [3, 1, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 6, 5], [5, 3, 3], [5, 2, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 5, 4], [6, 7, 1], [7, 1, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 2], [10, 4, 6], [6, 4, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 12, 5], [7, 3, 1], [7, 3, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 1], [13, 4, 6], [4, 7, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 9], [7, 2, 2], [7, 5, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 10, 3], [5, 2, 2], [7, 6, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 7], [6, 6, 2], [2, 1, 13]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 9, 3], [8, 8, 2], [7, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 10], [10, 6, 4], [3, 4, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 6, 10], [11, 4, 6], [3, 6, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 11, 5], [5, 6, 2], [8, 4, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 5, 4], [12, 10, 1], [1, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 7, 11], [7, 6, 5], [3, 8, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 10, 11], [10, 5, 4], [2, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 5, 3], [4, 6, 1], [7, 1, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 4], [4, 8, 4], [7, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 2, 11], [12, 7, 4], [7, 2, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 7, 6], [7, 2, 2], [6, 7, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 8, 8], [7, 8, 3], [8, 3, 6]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 6, 2], [13, 9, 4], [6, 4, 4]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 11, 6], [8, 8, 4], [8, 7, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 11, 2], [14, 5, 2], [7, 5, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 12, 11], [13, 9, 2], [2, 8, 12]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 7, 1], [9, 7, 6], [4, 2, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 3, 9], [14, 8, 5], [6, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 6, 7], [14, 5, 6], [8, 8, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 8, 2], [9, 7, 3], [4, 8, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 2, 6], [4, 3, 2], [9, 8, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 10, 9], [11, 9, 3], [1, 3, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 7], [5, 6, 2], [8, 2, 5]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[6, 8, 5], [10, 5, 3], [7, 6, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 7, 11], [13, 8, 6], [8, 6, 3]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 5, 3], [11, 7, 5], [9, 1, 7]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 7, 1], [7, 9, 1], [2, 1, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[3, 7, 9], [13, 4, 3], [1, 3, 11]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[5, 4, 9], [12, 4, 1], [4, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[1, 4, 7], [9, 1, 3], [1, 8, 10]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[2, 11, 2], [11, 4, 4], [3, 5, 2]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[4, 2, 1], [14, 1, 3], [3, 4, 9]]) == False", "def check(magic_square_test):\n\tassert magic_square_test([[7, 4, 8], [8, 2, 3], [1, 7, 11]]) == False"], "scores": [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0], "pass_results": [false, false, false, false, true, false, false, false, true, false], "pass_test_cases_num": [0, 0, 0, 0, 102, 0, 0, 0, 102, 0], "completion": "from typing import List\nfrom typing import List\n\ndef magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Verify if the given matrix is a magic square.\n\n    Args:\n    matrix: A 2D list representing the matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Check if the matrix is empty\n    if not matrix:\n        return False\n\n    n = len(matrix)\n    target_sum = n * (n**2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check columns\n    for j in range(n):\n        if sum(matrix[i][j] for i in range(n)) != target_sum:\n            return False\n\n    # Check main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(matrix[i][n-1-i] for i in range(n)) != target_sum:\n        return False\n\n    return True\n", "passed": true, "pass": true, "pass_num": 2, "round": 632, "mutate_method": "expand_one2two", "parent_index": 53}
