{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 754, "prompt": "We consider an element to be common to lists l1, l2, l3 if it is found at the same position in all three lists. Write a function to find common elements from three lists. The function should return a list. Ensure your solution handles lists of varying lengths gracefully.", "code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if (m == n == o):\n            result.append(m)\n    return result", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "assert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "assert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "assert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "assert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "assert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "assert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "assert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "assert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "assert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "assert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "assert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "assert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "assert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "assert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "assert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "assert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "assert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "assert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "assert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "assert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "assert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "assert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "assert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "assert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "assert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "assert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "assert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "assert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "assert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "assert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "assert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "assert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "assert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "assert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "assert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "assert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "assert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "assert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "assert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "assert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "assert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "assert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "assert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "assert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "assert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "assert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "assert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "assert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "assert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "assert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "assert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "assert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "assert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "assert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "assert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "assert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "assert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "assert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "assert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "assert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "assert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "assert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "assert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "assert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "assert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "assert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "assert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "assert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "assert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "assert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "assert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "assert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "assert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "assert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "assert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "assert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "assert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "assert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "assert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "assert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "assert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "assert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "assert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "assert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "assert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "assert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "assert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "assert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "assert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "assert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "assert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "assert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "assert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "assert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "assert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "assert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "assert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "assert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "entry_point": "extract_index_list", "repair_prompt": ["We consider an element to be common to lists l1, l2, l3 if it is found at the same position in all three lists. Write a function extract_index_list to find common elements from three lists. The function should return a list. Ensure your solution handles lists of varying lengths gracefully.\nextract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import zip_longest\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    result = []\n    for elem1, elem2, elem3 in zip_longest(list1, list2, list3, fillvalue=None):\n        if elem1 == elem2 == elem3:\n            result.append(elem1)\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements at the same index position from three input lists.\n\n    Args:\n        list1 (List[int]): First input list\n        list2 (List[int]): Second input list\n        list3 (List[int]): Third input list\n\n    Returns:\n        List[int]: List of common elements at the same index position in all three input lists\n    \"\"\"\n    common_elements = []\n    for elem1, elem2, elem3 in zip(list1, list2, list3):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts elements that are equal at the same index from three input lists.\n\n    Args:\n        list1 (List[int]): First input list\n        list2 (List[int]): Second input list\n        list3 (List[int]): Third input list\n\n    Returns:\n        List[int]: List of elements that are equal at the same index in all three input lists\n    \"\"\"\n    result = []\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            result.append(a)\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Function to extract common elements from three lists by comparing elements at the same index\n    Args:\n        l1: List of integers\n        l2: List of integers\n        l3: List of integers\n    Returns:\n        List of common elements found in all three input lists\n    \"\"\"\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n    Function to find common elements at the same index in three lists\n    \n    Args:\n    list1: List of integers\n    list2: List of integers\n    list3: List of integers\n    \n    Returns:\n    List of integers containing common elements at the same index in all three lists\n    \"\"\"\n    result = []\n    min_len = min(len(list1), len(list2), len(list3))\n    \n    for i in range(min_len):\n        if list1[i] == list2[i] == list3[i]:\n            result.append(list1[i])\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Function to extract common elements from three lists\n\n    Args:\n    l1: List of integers\n    l2: List of integers\n    l3: List of integers\n\n    Returns:\n    List of common elements found in all three lists\n    \"\"\"\n    common_elements = []\n    for elem1, elem2, elem3 in zip(l1, l2, l3):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    Extracts common elements from three lists based on their index positions.\n\n    Args:\n        l1 (List[int]): First input list\n        l2 (List[int]): Second input list\n        l3 (List[int]): Third input list\n\n    Returns:\n        List[int]: List of common elements found at the same index position in all three input lists\n    \"\"\"\n    common_elements = []\n    for elem1, elem2, elem3 in zip(l1, l2, l3):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import zip_longest\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    common_elements = []\n    \n    for elem1, elem2, elem3 in zip_longest(l1, l2, l3, fillvalue=None):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    \n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import zip_longest\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    common_elements = []\n    for elem1, elem2, elem3 in zip_longest(list1, list2, list3, fillvalue=None):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    return common_elements\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef extract_common_elements(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    # Function to find common elements from three lists\n    common_elements = []\n    for element in list1:\n        if element in list2 and element in list3:\n            common_elements.append(element)\n    return common_elements\n"], "plans": ["requirement pool:\n- Implement extract_index_list function to find common elements in three lists\n- Handle varying list lengths gracefully for robustness\n- Ensure accurate position-based comparison for correct results\nWe will use the zip function in Python to iterate over the lists simultaneously and compare elements at the same index. We will handle varying list lengths by using the zip_longest function from the itertools module to fill missing values with a specified default value. Finally, we will return a list of common elements found at the same position in all lists.\n", "requirement analysis:\nThe main requirement is to develop a function that can extract common elements found at the same position in three input lists. The function should handle varying list lengths and return the common elements as a list.\nrequirement pool:\n- Develop a function to find common elements at the same position in three lists\n- Ensure the function can handle lists of varying lengths gracefully\nWe will use the zip function in Python to iterate over the three input lists simultaneously and compare elements at the same index. By handling varying list lengths using zip, we can efficiently find common elements at the same position in all three lists.\n", "requirement analysis:\nThe function needs to iterate through the lists simultaneously, comparing elements at the same index. It should handle cases where lists have different lengths by stopping at the shortest list's length. The output list should contain elements that are common at the same position in all input lists.\nrequirement pool:\n- Implement a function that compares elements at the same index in three lists\n- Ensure the function gracefully handles lists of varying lengths\n- Optimize the function for efficiency in identifying common elements\nWe will use a simple approach to iterate through the input lists simultaneously, comparing elements at the same index. We will stop at the shortest list's length to handle varying list lengths gracefully. We will use the zip function in Python to achieve this efficiently.\n", "requirement analysis:\nThe main requirement is to develop a function that can extract common elements from three lists by comparing their positions. The function should handle varying list lengths and return the common elements accurately.\nrequirement pool:\n- Develop a function to extract common elements from three lists\n- Ensure the function can handle lists of varying lengths gracefully\n- Verify the accuracy of extracted common elements\nWe will use Python and the zip function to efficiently compare elements at the same index in three lists. We will handle varying list lengths by using the shortest list as the reference for comparison.\n", "requirement pool:\n- Implement extract_index_list function to find common elements in three lists\n- Handle edge cases like empty lists and lists of different lengths\n- Optimize the function for performance on large datasets\nWe will design a static Python function using basic list operations to efficiently find common elements in three lists while handling varying list lengths gracefully.\n", "requirement pool:\n- Implement extract_index_list function to find common elements in three lists\n- Ensure the function can handle lists of varying lengths gracefully\n- Optimize the extraction algorithm for efficiency\nWe will use Python and the zip function to iterate over the lists simultaneously and compare elements at the same index.\n", "We will use the zip function in Python to iterate over the lists simultaneously and compare elements at the same index. By handling varying list lengths gracefully, we will ensure accurate position-based comparison.\n", "requirement analysis:\nThe main requirement is to develop a function that can extract common elements from three lists by comparing their positions. The function should handle varying list lengths and return a list of common elements found at the same index in all three lists.\nrequirement pool:\n- Develop a function to compare elements at the same index in three lists\n- Implement logic to handle lists of varying lengths\n- Ensure the function returns a list of common elements found at the same position in all three lists\nWe will use Python and the zip function to iterate over the lists simultaneously and compare elements at the same index. We will handle varying list lengths by using the zip_longest function from the itertools module. The final common elements will be stored in a list and returned.\n", "requirement pool:\n- Implement extract_index_list function to find common elements in three lists\n- Handle varying list lengths gracefully for accurate results\n- Optimize the function for efficiency and performance\nWe will use the zip function in Python to iterate over the lists simultaneously and compare elements at the same index. We will handle varying list lengths by using the zip_longest function from the itertools module to fill missing values with a specified default value. The function will return a list of common elements found at the same positions in all three lists.\n", "requirement pool:\n- Implement extract_index_list function to find common elements in three lists\n- Handle edge cases where lists have different lengths\n- Optimize the function for efficiency in large datasets\nWe will design a static Python function using basic list operations to efficiently find common elements from three lists and handle varying list lengths gracefully.\n"], "test": ["def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 3, 6, 8, 2], [1, 6, 1, 8, 6, 7, 2], [3, 2, 5, 3, 5, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 5, 9, 1, 2, 3], [3, 1, 1, 7, 8, 1, 5], [5, 1, 5, 1, 7, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 8, 7, 6, 5, 5], [3, 2, 5, 5, 1, 5, 10], [5, 6, 5, 7, 7, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 2, 8, 2, 7, 12], [5, 3, 4, 4, 2, 10, 4], [5, 6, 7, 2, 3, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 8, 9, 2, 6, 9], [4, 1, 4, 1, 1, 8, 11], [3, 6, 7, 6, 1, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 5, 7, 6, 11, 7], [5, 6, 7, 7, 9, 3, 3], [1, 3, 2, 3, 4, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 5, 6, 5, 4, 8], [3, 2, 4, 5, 5, 6, 12], [1, 3, 6, 4, 7, 7, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 3, 4, 9, 10, 6], [5, 4, 3, 7, 6, 8, 10], [4, 3, 4, 3, 1, 4, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 8, 8, 4], [5, 6, 7, 8, 1, 2, 2], [5, 2, 5, 6, 1, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 4, 8, 2, 9, 2], [4, 2, 4, 4, 3, 9, 11], [4, 6, 7, 8, 4, 6, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 1, 1, 8, 6, 9], [1, 4, 5, 1, 9, 3, 7], [4, 5, 4, 7, 3, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 8, 4, 7, 2], [2, 1, 7, 5, 2, 10, 4], [1, 4, 3, 4, 9, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 8, 7, 3, 4, 8], [4, 3, 5, 8, 2, 2, 9], [4, 3, 7, 3, 6, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 5, 9, 2, 5, 11], [4, 6, 7, 6, 2, 4, 12], [2, 4, 6, 6, 5, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 5, 9, 6, 2, 4], [5, 2, 3, 8, 4, 6, 11], [1, 2, 2, 1, 3, 8, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 8, 3, 9, 10, 4], [5, 4, 2, 2, 4, 1, 5], [1, 5, 7, 6, 6, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 6, 9, 8, 11, 11], [5, 4, 2, 1, 8, 4, 7], [3, 4, 2, 6, 6, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 6, 9, 10, 1, 8], [2, 2, 7, 8, 9, 7, 11], [5, 2, 2, 1, 6, 1, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 7, 4, 1, 5, 8], [4, 6, 2, 7, 6, 7, 7], [4, 3, 5, 1, 1, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 7, 7, 5, 11, 9], [2, 4, 6, 1, 5, 1, 3], [1, 2, 2, 2, 3, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 1, 2, 9, 10, 5], [5, 3, 7, 6, 9, 2, 8], [1, 6, 3, 2, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 1, 2, 6, 6, 4], [2, 3, 3, 5, 4, 5, 8], [4, 5, 3, 4, 5, 5, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 5, 8, 9, 3, 5], [5, 5, 5, 2, 9, 1, 4], [3, 5, 4, 8, 3, 6, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 4, 9, 9, 4, 5], [2, 4, 1, 1, 7, 7, 9], [4, 4, 3, 2, 3, 1, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 2, 3, 5, 1, 12], [2, 1, 2, 5, 7, 6, 11], [1, 6, 4, 2, 4, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 4, 4, 6, 4, 9], [4, 2, 5, 2, 5, 1, 2], [2, 5, 7, 4, 5, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 1, 8, 8, 7, 12], [3, 3, 3, 7, 8, 2, 2], [1, 6, 1, 2, 1, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 3, 1, 10, 6], [2, 2, 5, 5, 8, 5, 9], [4, 1, 3, 1, 9, 2, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 2, 7, 10, 6, 3], [4, 3, 6, 3, 4, 10, 9], [5, 6, 2, 3, 9, 3, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 1, 6, 4, 4, 10, 6], [4, 6, 1, 4, 6, 9, 9], [2, 6, 2, 7, 9, 5, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 7, 2, 9, 1, 7], [3, 6, 1, 2, 8, 8, 2], [3, 1, 5, 5, 9, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 5, 4, 10, 6, 5], [4, 6, 2, 2, 2, 7, 6], [5, 1, 1, 3, 2, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 3, 3, 1, 6, 4], [3, 2, 6, 3, 9, 1, 3], [4, 3, 1, 8, 4, 7, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 7, 8, 9, 6], [4, 5, 1, 7, 2, 7, 4], [5, 5, 1, 6, 1, 8, 11]) == [5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 2, 5, 7, 2], [2, 4, 7, 6, 9, 4, 3], [2, 1, 6, 2, 5, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 1, 2, 8, 5, 2, 7], [5, 4, 4, 5, 6, 3, 9], [2, 2, 6, 1, 8, 10, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 6, 2, 2, 11, 12], [1, 6, 4, 4, 6, 5, 2], [4, 1, 6, 6, 7, 5, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 2, 9, 1, 9, 11], [4, 1, 1, 5, 6, 7, 8], [2, 6, 4, 3, 6, 8, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 3, 2, 7, 11, 10], [3, 5, 2, 5, 4, 11, 5], [1, 2, 5, 7, 7, 1, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 1, 5, 7, 4, 9, 4], [2, 3, 3, 8, 4, 11, 5], [3, 4, 4, 8, 8, 8, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 7, 1, 7, 1, 8], [3, 2, 4, 5, 5, 10, 5], [4, 4, 2, 8, 4, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 4, 6, 8, 11, 10], [3, 4, 3, 1, 8, 2, 9], [3, 6, 7, 3, 6, 6, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 8, 8, 2, 3, 3], [2, 2, 2, 5, 1, 9, 2], [4, 1, 4, 4, 6, 1, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 8, 3, 6, 7, 9], [4, 3, 6, 3, 4, 8, 10], [3, 6, 1, 1, 5, 1, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 3, 4, 8, 10, 6, 3], [3, 6, 1, 4, 4, 10, 2], [2, 4, 7, 4, 8, 3, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 3, 7, 7, 1, 3], [2, 1, 6, 3, 4, 2, 8], [1, 2, 6, 1, 5, 3, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 4, 2, 5, 4, 3, 10], [3, 5, 7, 3, 1, 3, 8], [5, 1, 4, 4, 3, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 6, 2, 10, 3, 7], [4, 3, 2, 1, 1, 5, 9], [3, 5, 4, 8, 5, 11, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 2, 6, 8, 4, 8], [4, 1, 1, 1, 7, 5, 4], [5, 3, 6, 3, 4, 7, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 1, 7, 2, 7, 2], [5, 6, 2, 7, 2, 6, 10], [5, 1, 7, 4, 2, 8, 5]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 3, 7, 6, 8, 12], [2, 4, 5, 6, 9, 2, 8], [4, 4, 2, 6, 8, 6, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 5, 3, 8, 3, 3], [4, 2, 2, 4, 7, 1, 1], [3, 4, 5, 6, 5, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 6, 4, 4, 3], [2, 5, 1, 2, 8, 9, 8], [2, 3, 5, 1, 9, 10, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 5, 1, 10, 3, 8], [4, 4, 7, 6, 5, 3, 7], [2, 5, 5, 8, 2, 9, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 7, 4, 4, 8, 10], [2, 5, 6, 5, 6, 7, 9], [5, 6, 3, 2, 8, 10, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 8, 6, 8, 6, 12], [5, 1, 6, 3, 1, 10, 2], [5, 6, 1, 8, 7, 2, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 8, 2, 5, 3, 9], [4, 3, 3, 2, 9, 11, 2], [5, 1, 5, 4, 1, 4, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 8, 2, 9, 2], [5, 4, 7, 1, 8, 11, 7], [2, 5, 7, 1, 1, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 4, 11, 6], [1, 5, 6, 3, 1, 2, 3], [4, 3, 5, 3, 7, 5, 8]) == [3]", "def check(extract_index_list):\n\tassert extract_index_list([5, 5, 1, 7, 8, 3, 3], [4, 5, 3, 4, 8, 9, 8], [3, 2, 6, 5, 4, 9, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 1, 8, 8, 8, 2], [4, 5, 2, 3, 7, 6, 1], [5, 2, 5, 6, 2, 7, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 6, 4, 8, 1, 6, 5], [5, 2, 2, 8, 8, 3, 6], [2, 5, 5, 2, 9, 10, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 3, 4, 8, 3, 9, 4], [2, 4, 3, 4, 3, 1, 1], [3, 2, 6, 1, 2, 4, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 4, 8, 2, 2, 10], [4, 2, 5, 5, 6, 6, 6], [4, 6, 1, 7, 6, 8, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 6, 6, 1, 3, 10], [2, 5, 2, 8, 1, 7, 10], [3, 1, 7, 5, 5, 8, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 1, 2, 6, 2, 1, 4], [5, 3, 2, 4, 2, 3, 5], [4, 5, 2, 3, 6, 2, 9]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 2, 5, 11, 1, 7], [5, 6, 6, 2, 7, 9, 11], [4, 2, 3, 6, 3, 6, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 2, 3, 2, 4, 9, 4], [1, 2, 1, 1, 5, 6, 7], [4, 4, 2, 2, 1, 7, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 7, 9, 7, 7, 3], [4, 4, 3, 8, 8, 9, 11], [3, 5, 6, 4, 4, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 4, 8, 7, 4, 7], [2, 3, 1, 1, 1, 2, 9], [1, 3, 4, 3, 3, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 4, 6, 2, 9, 10], [3, 4, 3, 6, 7, 10, 12], [1, 2, 2, 8, 3, 3, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 4, 2, 9, 7, 1, 5], [2, 5, 1, 1, 5, 10, 6], [2, 4, 1, 6, 2, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 2, 6, 8, 9, 6], [1, 6, 3, 4, 7, 3, 6], [1, 4, 7, 2, 4, 5, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 5, 1, 5, 5, 7, 11], [4, 2, 5, 4, 6, 8, 8], [5, 4, 1, 1, 6, 4, 3]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 6, 3, 4, 8, 8, 10], [2, 2, 4, 1, 8, 8, 11], [1, 5, 1, 6, 4, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 2, 5, 5, 8, 5, 7], [1, 2, 5, 2, 4, 4, 10], [3, 5, 6, 3, 5, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 3, 7, 3, 10, 1, 3], [5, 3, 2, 5, 2, 9, 3], [1, 6, 5, 6, 4, 9, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 1, 6, 3, 5, 10], [1, 1, 6, 7, 7, 6, 11], [5, 3, 7, 4, 2, 9, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([5, 6, 8, 4, 2, 1, 2], [4, 4, 2, 4, 5, 2, 5], [4, 3, 6, 7, 7, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 4, 1, 4, 4, 9, 5], [2, 4, 7, 3, 5, 2, 6], [4, 6, 1, 2, 7, 6, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 1, 6, 8, 3, 10, 2], [4, 2, 2, 8, 9, 8, 10], [2, 6, 3, 2, 7, 1, 5]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 2, 7, 4, 7, 2, 1], [5, 6, 5, 2, 6, 3, 2], [1, 5, 5, 3, 2, 4, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 7, 6, 4, 4, 1], [5, 1, 5, 6, 9, 7, 11], [1, 3, 6, 5, 6, 9, 6]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 6, 1, 1, 3, 5, 4], [3, 6, 5, 2, 7, 5, 7], [1, 6, 1, 7, 4, 5, 8]) == [6, 5]", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 1, 3, 5, 8, 9], [3, 5, 2, 8, 5, 1, 3], [4, 5, 5, 1, 8, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 5, 3, 4, 11, 6, 8], [3, 1, 6, 3, 8, 8, 5], [5, 5, 4, 8, 6, 10, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([1, 3, 6, 1, 5, 2, 10], [5, 3, 2, 4, 2, 2, 4], [2, 5, 4, 7, 2, 2, 2]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([1, 2, 6, 2, 2, 8, 1], [3, 3, 4, 1, 2, 6, 6], [5, 1, 6, 5, 4, 8, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 5, 4, 7, 3, 2, 4], [1, 3, 7, 5, 3, 2, 9], [5, 1, 5, 3, 6, 8, 8]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 3, 5, 7, 3, 2, 8], [3, 5, 3, 8, 8, 5, 5], [5, 3, 3, 5, 8, 3, 11]) == []", "def check(extract_index_list):\n\tassert extract_index_list([3, 6, 8, 3, 5, 10, 3], [1, 3, 6, 8, 6, 6, 11], [3, 1, 6, 7, 6, 5, 4]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 4, 8, 8, 5, 1, 4], [1, 6, 3, 7, 7, 1, 9], [4, 1, 5, 8, 1, 9, 10]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 2, 5, 10, 7, 11], [3, 6, 2, 5, 4, 6, 6], [3, 5, 1, 2, 6, 6, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 2, 5, 2, 6, 5, 6], [5, 2, 2, 2, 3, 9, 8], [2, 2, 7, 1, 5, 1, 4]) == [2]", "def check(extract_index_list):\n\tassert extract_index_list([2, 3, 8, 9, 11, 3, 10], [4, 5, 7, 3, 3, 9, 3], [5, 1, 4, 7, 9, 10, 7]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 2, 8, 1, 7, 2, 10], [5, 5, 4, 7, 2, 9, 10], [5, 2, 3, 4, 2, 8, 2]) == []", "def check(extract_index_list):\n\tassert extract_index_list([4, 1, 2, 7, 3, 9, 7], [2, 6, 4, 2, 4, 8, 2], [4, 1, 1, 5, 6, 2, 9]) == []", "def check(extract_index_list):\n\tassert extract_index_list([6, 5, 3, 8, 9, 10, 11], [4, 1, 2, 4, 3, 7, 9], [3, 6, 4, 1, 5, 4, 12]) == []", "def check(extract_index_list):\n\tassert extract_index_list([2, 6, 6, 4, 11, 1, 8], [3, 4, 7, 5, 8, 8, 9], [5, 4, 6, 7, 5, 4, 11]) == []"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 0], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import zip_longest\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    common_elements = []\n    for elem1, elem2, elem3 in zip_longest(list1, list2, list3, fillvalue=None):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    return common_elements\n", "passed": true, "pass": true, "pass_num": 9, "round": 772, "mutate_method": "add_1_sentence_at_end", "parent_index": 691}
