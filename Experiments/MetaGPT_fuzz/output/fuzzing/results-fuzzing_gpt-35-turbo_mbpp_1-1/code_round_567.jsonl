{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 63, "prompt": "Write a function to find the maximum difference. You must design a function that computes the greatest difference achievable between any pair of elements present in the provided list of tuples.", "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "assert max_difference([(7, 8), (2, 8), (13, 2), (5, 1)]) == 11", "assert max_difference([(3, 7), (6, 12), (15, 1), (6, 2)]) == 14", "assert max_difference([(1, 3), (6, 11), (10, 2), (6, 4)]) == 8", "assert max_difference([(3, 5), (4, 10), (14, 8), (5, 6)]) == 6", "assert max_difference([(5, 6), (4, 9), (8, 3), (3, 6)]) == 5", "assert max_difference([(2, 6), (6, 6), (13, 2), (3, 4)]) == 11", "assert max_difference([(2, 4), (1, 7), (7, 2), (3, 7)]) == 6", "assert max_difference([(1, 8), (2, 12), (7, 4), (2, 3)]) == 10", "assert max_difference([(3, 5), (4, 10), (11, 8), (2, 7)]) == 6", "assert max_difference([(4, 1), (6, 7), (7, 2), (6, 3)]) == 5", "assert max_difference([(1, 10), (6, 12), (7, 3), (4, 2)]) == 9", "assert max_difference([(7, 1), (1, 9), (8, 5), (2, 6)]) == 8", "assert max_difference([(3, 2), (1, 12), (13, 2), (1, 5)]) == 11", "assert max_difference([(2, 7), (4, 2), (10, 8), (6, 3)]) == 5", "assert max_difference([(6, 8), (4, 8), (9, 6), (5, 3)]) == 4", "assert max_difference([(5, 10), (1, 2), (13, 7), (4, 4)]) == 6", "assert max_difference([(1, 8), (5, 2), (13, 4), (2, 7)]) == 9", "assert max_difference([(4, 1), (4, 7), (8, 2), (3, 1)]) == 6", "assert max_difference([(6, 1), (4, 11), (9, 2), (2, 4)]) == 7", "assert max_difference([(5, 2), (4, 9), (11, 1), (6, 6)]) == 10", "assert max_difference([(5, 5), (2, 6), (6, 4), (1, 5)]) == 4", "assert max_difference([(3, 8), (4, 5), (12, 2), (2, 7)]) == 10", "assert max_difference([(4, 5), (6, 6), (12, 8), (2, 3)]) == 4", "assert max_difference([(8, 10), (5, 9), (15, 4), (2, 2)]) == 11", "assert max_difference([(2, 9), (4, 8), (11, 5), (1, 2)]) == 7", "assert max_difference([(2, 9), (1, 12), (13, 1), (1, 7)]) == 12", "assert max_difference([(3, 8), (6, 8), (13, 4), (6, 1)]) == 9", "assert max_difference([(7, 2), (5, 5), (12, 5), (5, 3)]) == 7", "assert max_difference([(6, 8), (4, 3), (10, 6), (3, 2)]) == 4", "assert max_difference([(3, 5), (2, 8), (5, 3), (5, 2)]) == 6", "assert max_difference([(7, 5), (4, 12), (15, 1), (1, 2)]) == 14", "assert max_difference([(3, 5), (3, 12), (13, 3), (2, 3)]) == 10", "assert max_difference([(2, 7), (5, 5), (10, 3), (1, 7)]) == 7", "assert max_difference([(5, 10), (2, 19), (7, 8), (8, 12)]) == 17", "assert max_difference([(7, 1), (7, 17), (10, 13), (11, 13)]) == 10", "assert max_difference([(8, 2), (3, 19), (11, 9), (12, 16)]) == 16", "assert max_difference([(7, 9), (7, 17), (10, 18), (7, 7)]) == 10", "assert max_difference([(4, 4), (5, 22), (9, 8), (6, 8)]) == 17", "assert max_difference([(6, 6), (5, 18), (11, 11), (9, 16)]) == 13", "assert max_difference([(5, 2), (3, 16), (5, 11), (9, 10)]) == 13", "assert max_difference([(6, 3), (1, 12), (10, 8), (16, 12)]) == 11", "assert max_difference([(7, 7), (3, 12), (8, 16), (16, 17)]) == 9", "assert max_difference([(8, 7), (5, 19), (12, 11), (13, 11)]) == 14", "assert max_difference([(8, 4), (3, 17), (6, 10), (10, 11)]) == 14", "assert max_difference([(1, 4), (5, 19), (9, 12), (10, 17)]) == 14", "assert max_difference([(3, 3), (5, 22), (5, 9), (14, 15)]) == 17", "assert max_difference([(4, 4), (7, 18), (4, 11), (9, 16)]) == 11", "assert max_difference([(2, 9), (1, 14), (13, 12), (14, 16)]) == 13", "assert max_difference([(3, 2), (2, 16), (8, 12), (6, 15)]) == 14", "assert max_difference([(4, 8), (3, 22), (5, 8), (13, 16)]) == 19", "assert max_difference([(9, 2), (1, 20), (9, 16), (8, 11)]) == 19", "assert max_difference([(4, 6), (5, 18), (8, 13), (6, 14)]) == 13", "assert max_difference([(9, 5), (4, 17), (11, 15), (16, 8)]) == 13", "assert max_difference([(1, 10), (4, 21), (9, 12), (12, 13)]) == 17", "assert max_difference([(6, 9), (6, 21), (12, 13), (9, 9)]) == 15", "assert max_difference([(1, 7), (2, 12), (11, 9), (13, 14)]) == 10", "assert max_difference([(3, 9), (4, 12), (8, 17), (16, 8)]) == 9", "assert max_difference([(1, 8), (3, 17), (6, 18), (8, 16)]) == 14", "assert max_difference([(5, 10), (3, 12), (7, 8), (15, 9)]) == 9", "assert max_difference([(4, 5), (7, 13), (12, 8), (13, 8)]) == 6", "assert max_difference([(1, 2), (4, 22), (6, 18), (8, 12)]) == 18", "assert max_difference([(2, 10), (3, 21), (12, 8), (14, 15)]) == 18", "assert max_difference([(3, 6), (2, 15), (9, 11), (8, 13)]) == 13", "assert max_difference([(3, 10), (5, 19), (14, 17), (13, 11)]) == 14", "assert max_difference([(7, 11), (6, 15), (11, 16), (12, 7)]) == 9", "assert max_difference([(1, 5), (2, 18), (13, 17), (16, 12)]) == 16", "assert max_difference([(7, 35), (25, 23), (13, 23), (39, 23)]) == 28", "assert max_difference([(12, 32), (19, 25), (11, 21), (46, 23)]) == 23", "assert max_difference([(13, 36), (18, 24), (9, 27), (42, 20)]) == 23", "assert max_difference([(13, 37), (21, 26), (18, 21), (43, 23)]) == 24", "assert max_difference([(16, 39), (17, 32), (16, 18), (43, 24)]) == 23", "assert max_difference([(8, 36), (26, 24), (17, 26), (44, 19)]) == 28", "assert max_difference([(9, 38), (24, 23), (14, 27), (40, 27)]) == 29", "assert max_difference([(16, 38), (25, 28), (16, 18), (42, 18)]) == 24", "assert max_difference([(11, 39), (25, 29), (8, 24), (43, 17)]) == 28", "assert max_difference([(13, 37), (18, 28), (13, 20), (40, 24)]) == 24", "assert max_difference([(13, 30), (20, 22), (9, 20), (45, 18)]) == 27", "assert max_difference([(11, 36), (23, 24), (17, 19), (46, 24)]) == 25", "assert max_difference([(17, 33), (22, 29), (17, 23), (42, 23)]) == 19", "assert max_difference([(11, 34), (16, 27), (16, 26), (42, 22)]) == 23", "assert max_difference([(16, 40), (26, 30), (18, 24), (37, 18)]) == 24", "assert max_difference([(15, 32), (17, 25), (9, 24), (41, 19)]) == 22", "assert max_difference([(12, 37), (21, 29), (13, 25), (36, 24)]) == 25", "assert max_difference([(14, 31), (19, 24), (15, 20), (45, 20)]) == 25", "assert max_difference([(16, 33), (22, 26), (11, 18), (38, 23)]) == 17", "assert max_difference([(14, 31), (24, 23), (16, 21), (44, 21)]) == 23", "assert max_difference([(10, 34), (23, 25), (11, 24), (38, 23)]) == 24", "assert max_difference([(10, 34), (25, 31), (13, 28), (45, 17)]) == 28", "assert max_difference([(8, 30), (16, 22), (10, 22), (38, 17)]) == 22", "assert max_difference([(8, 40), (19, 32), (8, 21), (38, 27)]) == 32", "assert max_difference([(17, 37), (20, 26), (18, 21), (40, 24)]) == 20", "assert max_difference([(16, 32), (18, 25), (18, 25), (38, 22)]) == 16", "assert max_difference([(8, 40), (18, 27), (17, 18), (40, 23)]) == 32", "assert max_difference([(10, 36), (25, 28), (10, 25), (37, 20)]) == 26", "assert max_difference([(10, 30), (26, 28), (11, 20), (45, 19)]) == 26", "assert max_difference([(16, 30), (24, 23), (9, 19), (40, 18)]) == 22", "assert max_difference([(13, 35), (21, 26), (18, 19), (46, 25)]) == 22", "assert max_difference([(13, 38), (26, 26), (10, 26), (44, 26)]) == 25", "assert max_difference([(11, 33), (22, 27), (14, 21), (42, 23)]) == 22"], "entry_point": "max_difference", "repair_prompt": ["Write a function max_difference to find the maximum difference. You must design a function that computes the greatest difference achievable between any pair of elements present in the provided list of tuples.\nmax_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n"], "completions": ["from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to find the maximum difference between elements in a list of tuples\n    \n    Args:\n    lst (List[Tuple[int, int]]): List of tuples containing integer values\n    \n    Returns:\n    int: Maximum difference between elements in the list of tuples\n    \"\"\"\n    if not lst or len(lst) < 2:\n        return 0\n    \n    min_val = lst[0][0]\n    max_diff = 0\n    \n    for tup in lst:\n        min_val = min(min_val, tup[0])\n        max_diff = max(max_diff, tup[1] - min_val)\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum difference between any pair of elements in the list of tuples.\n\n    Args:\n        lst (List[Tuple[int, int]]): List of tuples containing integer elements.\n\n    Returns:\n        int: Maximum difference between any pair of elements in the list.\n    \"\"\"\n    if not lst:\n        return 0\n\n    max_diff = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            diff = abs(lst[i][0] - lst[j][0]) + abs(lst[i][1] - lst[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to find the maximum difference between any pair of elements in the list of tuples\n    \n    Args:\n    lst (List[Tuple[int, int]]): List of tuples containing integer pairs\n    \n    Returns:\n    int: Maximum difference between any pair of elements in the list of tuples\n    \"\"\"\n    if not lst or len(lst) < 2:\n        return 0\n    \n    min_val = lst[0][0]\n    max_diff = 0\n    \n    for tup in lst:\n        min_val = min(min_val, tup[0])\n        max_diff = max(max_diff, tup[1] - min_val)\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    if not tuples:\n        return 0\n    \n    max_diff = 0\n    for tup in tuples:\n        diff = abs(tup[0] - tup[1])\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to compute the maximum difference between any pair of elements in the provided list of tuples.\n    \n    Args:\n    lst (List[Tuple[int, int]]): List of tuples containing integer pairs\n    \n    Returns:\n    int: Maximum difference between any pair of elements\n    \"\"\"\n    \n    differences = [abs(max(pair) - min(pair)) for pair in lst]\n    return max(differences)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to find the maximum difference between any pair of elements in the provided list of tuples\n    \n    Args:\n    lst: List of tuples containing two integers\n    \n    Returns:\n    int: Maximum difference between any pair of elements\n    \"\"\"\n    if not lst or len(lst) < 2:\n        return 0\n    \n    min_val = lst[0][0]\n    max_diff = 0\n    \n    for tup in lst:\n        min_val = min(min_val, tup[0])\n        max_diff = max(max_diff, tup[1] - min_val)\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuple_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Compute the maximum difference between any pair of elements in the list of tuples.\n\n    Args:\n        tuple_list: List of tuples where each tuple contains two integers\n\n    Returns:\n        Maximum difference between any pair of elements in the list\n    \"\"\"\n    if not tuple_list:\n        return 0\n\n    min_val = tuple_list[0][0]\n    max_val = tuple_list[0][1]\n\n    for tup in tuple_list:\n        min_val = min(min_val, tup[0])\n        max_val = max(max_val, tup[1])\n\n    return max_val - min_val\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuple_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Function to compute the maximum difference between tuple elements\n    \n    Args:\n    tuple_list: A list of tuples containing two integers\n    \n    Returns:\n    int: The maximum difference between tuple elements\n    \"\"\"\n    \n    if not tuple_list or len(tuple_list) < 2:\n        return 0\n    \n    max_diff = 0\n    \n    for tup in tuple_list:\n        diff = abs(tup[0] - tup[1])\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Find the maximum difference between any pair of elements in the list of tuples.\n\n    Args:\n    lst: A list of tuples where each tuple contains two integers.\n\n    Returns:\n    The maximum difference between any pair of elements in the list of tuples.\n    \"\"\"\n    if not lst or len(lst) == 1:\n        return 0\n    \n    min_val = lst[0][0]\n    max_diff = 0\n    \n    for tup in lst:\n        min_val = min(min_val, tup[0])\n        max_diff = max(max_diff, tup[1] - min_val)\n    \n    return max_diff\n", "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between any pair of elements in the tuples.\n\n    Args:\n        tuples: List of tuples containing integer elements.\n\n    Returns:\n        Maximum difference between any pair of elements in the tuples.\n    \"\"\"\n    if not tuples:\n        return 0\n\n    max_diff = 0\n    for tup in tuples:\n        min_val = min(tup)\n        max_val = max(tup)\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n"], "plans": ["requirement pool:\n- Implement max_difference function to find the maximum difference\n- Ensure the function works for both positive and negative differences\n- Optimize the function for large lists of tuples\nWe will design a simple static Python function using appropriate open-source libraries to efficiently compute the maximum difference between elements in a list of tuples.\n", "requirement pool:\n- Implement max_difference function to find the maximum difference\n- Ensure the function works correctly for both positive and negative differences\n- Optimize the function for large datasets to maintain performance\nWe will design a simple static Python function using basic arithmetic operations to find the maximum difference between any pair of elements in the list of tuples.\n", "requirement pool:\n- Compute the maximum difference between any pair of elements in a list of tuples\n- Ensure the function works for both positive and negative numbers\n- Optimize the algorithm for large input sizes\nWe will design a simple static Python function using basic arithmetic operations to efficiently compute the maximum difference between any pair of elements in a list of tuples.\n", "requirement pool:\n- Implement max_difference function to accurately find the maximum difference\n- Handle cases where tuples have negative numbers\n- Optimize the function for large tuple sets\nWe will design a simple Python function using built-in functions to efficiently compute the maximum difference between tuple elements.\n", "requirement pool:\n- Compute the maximum difference between any pair of elements\n- Ensure the function works efficiently for large datasets\n- Handle cases where all elements are the same\nWe will design a simple Python function using built-in functions to efficiently compute the maximum difference between any pair of elements in the provided list of tuples.\n", "requirement pool:\n- Compute the maximum difference between any pair of elements\n- Ensure the function works for both positive and negative numbers\n- Optimize the function for large datasets\nWe will design a simple static Python function using basic arithmetic operations to efficiently compute the maximum difference between any pair of elements in the provided list of tuples.\n", "requirement pool:\n- Compute the maximum difference between any pair of elements in a list of tuples\n- Ensure the function handles both positive and negative differences correctly\n- Optimize the function for performance with large input data\nWe will design a simple static Python function using basic arithmetic operations to efficiently compute the maximum difference between any pair of elements in the list of tuples.\n", "requirement pool:\n- Implement max_difference function to handle tuple lists\n- Ensure the function returns the correct maximum difference\n- Optimize the function for performance\nWe will design a simple Python function using basic arithmetic operations to find the maximum difference between tuple elements.\n", "requirement pool:\n- Implement a function that iterates through the list of tuples to find the maximum difference\n- Ensure the function can handle empty input or single tuple scenarios\n- Optimize the algorithm for large datasets to maintain efficiency\nWe will design a simple static Python function using basic arithmetic operations to find the maximum difference between any pair of elements in the list of tuples.\n", "requirement analysis:\nThe function should iterate through the list of tuples, calculate the difference between each pair of elements, and keep track of the maximum difference found.\nrequirement pool:\n- Implement a function that iterates through tuples and calculates the maximum difference\n- Ensure the function handles empty input and single tuple cases\n- Optimize the function for large tuple lists\nWe will design a simple Python function using basic arithmetic operations to calculate the maximum difference between tuple elements.\n"], "test": ["def check(max_difference):\n\tassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "def check(max_difference):\n\tassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "def check(max_difference):\n\tassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "def check(max_difference):\n\tassert max_difference([(7, 8), (2, 8), (13, 2), (5, 1)]) == 11", "def check(max_difference):\n\tassert max_difference([(3, 7), (6, 12), (15, 1), (6, 2)]) == 14", "def check(max_difference):\n\tassert max_difference([(1, 3), (6, 11), (10, 2), (6, 4)]) == 8", "def check(max_difference):\n\tassert max_difference([(3, 5), (4, 10), (14, 8), (5, 6)]) == 6", "def check(max_difference):\n\tassert max_difference([(5, 6), (4, 9), (8, 3), (3, 6)]) == 5", "def check(max_difference):\n\tassert max_difference([(2, 6), (6, 6), (13, 2), (3, 4)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 4), (1, 7), (7, 2), (3, 7)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 8), (2, 12), (7, 4), (2, 3)]) == 10", "def check(max_difference):\n\tassert max_difference([(3, 5), (4, 10), (11, 8), (2, 7)]) == 6", "def check(max_difference):\n\tassert max_difference([(4, 1), (6, 7), (7, 2), (6, 3)]) == 5", "def check(max_difference):\n\tassert max_difference([(1, 10), (6, 12), (7, 3), (4, 2)]) == 9", "def check(max_difference):\n\tassert max_difference([(7, 1), (1, 9), (8, 5), (2, 6)]) == 8", "def check(max_difference):\n\tassert max_difference([(3, 2), (1, 12), (13, 2), (1, 5)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 7), (4, 2), (10, 8), (6, 3)]) == 5", "def check(max_difference):\n\tassert max_difference([(6, 8), (4, 8), (9, 6), (5, 3)]) == 4", "def check(max_difference):\n\tassert max_difference([(5, 10), (1, 2), (13, 7), (4, 4)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 8), (5, 2), (13, 4), (2, 7)]) == 9", "def check(max_difference):\n\tassert max_difference([(4, 1), (4, 7), (8, 2), (3, 1)]) == 6", "def check(max_difference):\n\tassert max_difference([(6, 1), (4, 11), (9, 2), (2, 4)]) == 7", "def check(max_difference):\n\tassert max_difference([(5, 2), (4, 9), (11, 1), (6, 6)]) == 10", "def check(max_difference):\n\tassert max_difference([(5, 5), (2, 6), (6, 4), (1, 5)]) == 4", "def check(max_difference):\n\tassert max_difference([(3, 8), (4, 5), (12, 2), (2, 7)]) == 10", "def check(max_difference):\n\tassert max_difference([(4, 5), (6, 6), (12, 8), (2, 3)]) == 4", "def check(max_difference):\n\tassert max_difference([(8, 10), (5, 9), (15, 4), (2, 2)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 9), (4, 8), (11, 5), (1, 2)]) == 7", "def check(max_difference):\n\tassert max_difference([(2, 9), (1, 12), (13, 1), (1, 7)]) == 12", "def check(max_difference):\n\tassert max_difference([(3, 8), (6, 8), (13, 4), (6, 1)]) == 9", "def check(max_difference):\n\tassert max_difference([(7, 2), (5, 5), (12, 5), (5, 3)]) == 7", "def check(max_difference):\n\tassert max_difference([(6, 8), (4, 3), (10, 6), (3, 2)]) == 4", "def check(max_difference):\n\tassert max_difference([(3, 5), (2, 8), (5, 3), (5, 2)]) == 6", "def check(max_difference):\n\tassert max_difference([(7, 5), (4, 12), (15, 1), (1, 2)]) == 14", "def check(max_difference):\n\tassert max_difference([(3, 5), (3, 12), (13, 3), (2, 3)]) == 10", "def check(max_difference):\n\tassert max_difference([(2, 7), (5, 5), (10, 3), (1, 7)]) == 7", "def check(max_difference):\n\tassert max_difference([(5, 10), (2, 19), (7, 8), (8, 12)]) == 17", "def check(max_difference):\n\tassert max_difference([(7, 1), (7, 17), (10, 13), (11, 13)]) == 10", "def check(max_difference):\n\tassert max_difference([(8, 2), (3, 19), (11, 9), (12, 16)]) == 16", "def check(max_difference):\n\tassert max_difference([(7, 9), (7, 17), (10, 18), (7, 7)]) == 10", "def check(max_difference):\n\tassert max_difference([(4, 4), (5, 22), (9, 8), (6, 8)]) == 17", "def check(max_difference):\n\tassert max_difference([(6, 6), (5, 18), (11, 11), (9, 16)]) == 13", "def check(max_difference):\n\tassert max_difference([(5, 2), (3, 16), (5, 11), (9, 10)]) == 13", "def check(max_difference):\n\tassert max_difference([(6, 3), (1, 12), (10, 8), (16, 12)]) == 11", "def check(max_difference):\n\tassert max_difference([(7, 7), (3, 12), (8, 16), (16, 17)]) == 9", "def check(max_difference):\n\tassert max_difference([(8, 7), (5, 19), (12, 11), (13, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(8, 4), (3, 17), (6, 10), (10, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(1, 4), (5, 19), (9, 12), (10, 17)]) == 14", "def check(max_difference):\n\tassert max_difference([(3, 3), (5, 22), (5, 9), (14, 15)]) == 17", "def check(max_difference):\n\tassert max_difference([(4, 4), (7, 18), (4, 11), (9, 16)]) == 11", "def check(max_difference):\n\tassert max_difference([(2, 9), (1, 14), (13, 12), (14, 16)]) == 13", "def check(max_difference):\n\tassert max_difference([(3, 2), (2, 16), (8, 12), (6, 15)]) == 14", "def check(max_difference):\n\tassert max_difference([(4, 8), (3, 22), (5, 8), (13, 16)]) == 19", "def check(max_difference):\n\tassert max_difference([(9, 2), (1, 20), (9, 16), (8, 11)]) == 19", "def check(max_difference):\n\tassert max_difference([(4, 6), (5, 18), (8, 13), (6, 14)]) == 13", "def check(max_difference):\n\tassert max_difference([(9, 5), (4, 17), (11, 15), (16, 8)]) == 13", "def check(max_difference):\n\tassert max_difference([(1, 10), (4, 21), (9, 12), (12, 13)]) == 17", "def check(max_difference):\n\tassert max_difference([(6, 9), (6, 21), (12, 13), (9, 9)]) == 15", "def check(max_difference):\n\tassert max_difference([(1, 7), (2, 12), (11, 9), (13, 14)]) == 10", "def check(max_difference):\n\tassert max_difference([(3, 9), (4, 12), (8, 17), (16, 8)]) == 9", "def check(max_difference):\n\tassert max_difference([(1, 8), (3, 17), (6, 18), (8, 16)]) == 14", "def check(max_difference):\n\tassert max_difference([(5, 10), (3, 12), (7, 8), (15, 9)]) == 9", "def check(max_difference):\n\tassert max_difference([(4, 5), (7, 13), (12, 8), (13, 8)]) == 6", "def check(max_difference):\n\tassert max_difference([(1, 2), (4, 22), (6, 18), (8, 12)]) == 18", "def check(max_difference):\n\tassert max_difference([(2, 10), (3, 21), (12, 8), (14, 15)]) == 18", "def check(max_difference):\n\tassert max_difference([(3, 6), (2, 15), (9, 11), (8, 13)]) == 13", "def check(max_difference):\n\tassert max_difference([(3, 10), (5, 19), (14, 17), (13, 11)]) == 14", "def check(max_difference):\n\tassert max_difference([(7, 11), (6, 15), (11, 16), (12, 7)]) == 9", "def check(max_difference):\n\tassert max_difference([(1, 5), (2, 18), (13, 17), (16, 12)]) == 16", "def check(max_difference):\n\tassert max_difference([(7, 35), (25, 23), (13, 23), (39, 23)]) == 28", "def check(max_difference):\n\tassert max_difference([(12, 32), (19, 25), (11, 21), (46, 23)]) == 23", "def check(max_difference):\n\tassert max_difference([(13, 36), (18, 24), (9, 27), (42, 20)]) == 23", "def check(max_difference):\n\tassert max_difference([(13, 37), (21, 26), (18, 21), (43, 23)]) == 24", "def check(max_difference):\n\tassert max_difference([(16, 39), (17, 32), (16, 18), (43, 24)]) == 23", "def check(max_difference):\n\tassert max_difference([(8, 36), (26, 24), (17, 26), (44, 19)]) == 28", "def check(max_difference):\n\tassert max_difference([(9, 38), (24, 23), (14, 27), (40, 27)]) == 29", "def check(max_difference):\n\tassert max_difference([(16, 38), (25, 28), (16, 18), (42, 18)]) == 24", "def check(max_difference):\n\tassert max_difference([(11, 39), (25, 29), (8, 24), (43, 17)]) == 28", "def check(max_difference):\n\tassert max_difference([(13, 37), (18, 28), (13, 20), (40, 24)]) == 24", "def check(max_difference):\n\tassert max_difference([(13, 30), (20, 22), (9, 20), (45, 18)]) == 27", "def check(max_difference):\n\tassert max_difference([(11, 36), (23, 24), (17, 19), (46, 24)]) == 25", "def check(max_difference):\n\tassert max_difference([(17, 33), (22, 29), (17, 23), (42, 23)]) == 19", "def check(max_difference):\n\tassert max_difference([(11, 34), (16, 27), (16, 26), (42, 22)]) == 23", "def check(max_difference):\n\tassert max_difference([(16, 40), (26, 30), (18, 24), (37, 18)]) == 24", "def check(max_difference):\n\tassert max_difference([(15, 32), (17, 25), (9, 24), (41, 19)]) == 22", "def check(max_difference):\n\tassert max_difference([(12, 37), (21, 29), (13, 25), (36, 24)]) == 25", "def check(max_difference):\n\tassert max_difference([(14, 31), (19, 24), (15, 20), (45, 20)]) == 25", "def check(max_difference):\n\tassert max_difference([(16, 33), (22, 26), (11, 18), (38, 23)]) == 17", "def check(max_difference):\n\tassert max_difference([(14, 31), (24, 23), (16, 21), (44, 21)]) == 23", "def check(max_difference):\n\tassert max_difference([(10, 34), (23, 25), (11, 24), (38, 23)]) == 24", "def check(max_difference):\n\tassert max_difference([(10, 34), (25, 31), (13, 28), (45, 17)]) == 28", "def check(max_difference):\n\tassert max_difference([(8, 30), (16, 22), (10, 22), (38, 17)]) == 22", "def check(max_difference):\n\tassert max_difference([(8, 40), (19, 32), (8, 21), (38, 27)]) == 32", "def check(max_difference):\n\tassert max_difference([(17, 37), (20, 26), (18, 21), (40, 24)]) == 20", "def check(max_difference):\n\tassert max_difference([(16, 32), (18, 25), (18, 25), (38, 22)]) == 16", "def check(max_difference):\n\tassert max_difference([(8, 40), (18, 27), (17, 18), (40, 23)]) == 32", "def check(max_difference):\n\tassert max_difference([(10, 36), (25, 28), (10, 25), (37, 20)]) == 26", "def check(max_difference):\n\tassert max_difference([(10, 30), (26, 28), (11, 20), (45, 19)]) == 26", "def check(max_difference):\n\tassert max_difference([(16, 30), (24, 23), (9, 19), (40, 18)]) == 22", "def check(max_difference):\n\tassert max_difference([(13, 35), (21, 26), (18, 19), (46, 25)]) == 22", "def check(max_difference):\n\tassert max_difference([(13, 38), (26, 26), (10, 26), (44, 26)]) == 25", "def check(max_difference):\n\tassert max_difference([(11, 33), (22, 27), (14, 21), (42, 23)]) == 22"], "scores": [0.5, 0.0294, 0.5, 1.0, 1.0, 0.5, 0.4118, 1.0, 0.5, 1.0], "pass_results": [false, false, false, true, true, false, false, true, false, true], "pass_test_cases_num": [51, 3, 51, 102, 102, 51, 42, 102, 51, 102], "completion": "from typing import List\nfrom typing import List, Tuple\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Calculate the maximum difference between any pair of elements in the tuples.\n\n    Args:\n        tuples: List of tuples containing integer elements.\n\n    Returns:\n        Maximum difference between any pair of elements in the tuples.\n    \"\"\"\n    if not tuples:\n        return 0\n\n    max_diff = 0\n    for tup in tuples:\n        min_val = min(tup)\n        max_val = max(tup)\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n", "passed": true, "pass": true, "pass_num": 4, "round": 567, "mutate_method": "rephrase_one", "parent_index": 297}
