{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 728, "prompt": "Write a function that receives as input two lists [a_1,...,a_n], [b_1,...,b_n]. Specifically, this new list should be [a_1+b_1,...,a_n+b_n] by summing corresponding elements from the two lists.", "code": "def sum_list(lst1,lst2):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \n  return res_list", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]", "assert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "assert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "assert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "assert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "assert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "assert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "assert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "assert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "assert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "assert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "assert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "assert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "assert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "assert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "assert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "assert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "assert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "assert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "assert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "assert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "assert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "assert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "assert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "assert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "assert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "assert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "assert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "assert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "assert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "assert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "assert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "assert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "assert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "assert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "assert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "assert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "assert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "assert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "assert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "assert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "assert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "assert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "assert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "assert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "assert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "assert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "assert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "assert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "assert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "assert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "assert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "assert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "assert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "assert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "assert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "assert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "assert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "assert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "assert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "assert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "assert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "assert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "assert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "assert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "assert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "assert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "assert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "assert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "assert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "assert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "assert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "assert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "assert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "assert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "assert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "assert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "assert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "assert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "assert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "assert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "assert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "assert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "assert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "assert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "assert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "assert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "assert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "assert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "assert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "assert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "assert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "assert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "assert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "assert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "assert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "assert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "assert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "assert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "assert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "entry_point": "sum_list", "repair_prompt": ["Write a function sum_list that receives as input two lists [a_1,...,a_n], [b_1,...,b_n]. Specifically, this new list should be [a_1+b_1,...,a_n+b_n] by summing corresponding elements from the two lists.\nsum_list([10,20,30],[15,25,35])==[25,45,65]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum corresponding elements of two lists\n    Args:\n        list1: List of integers\n        list2: List of integers\n    Returns:\n        List of integers with corresponding elements summed\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Sums up elements in two lists and returns a new list with the results.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum corresponding elements of two lists\n\n    Args:\n    list1: List[int] - The first list of integers\n    list2: List[int] - The second list of integers\n\n    Returns:\n    List[int] - A new list containing the sum of corresponding elements from list1 and list2\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Sums up corresponding elements of two input lists.\n\n    Args:\n        list1 (List[int]): The first input list.\n        list2 (List[int]): The second input list.\n\n    Returns:\n        List[int]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Sums up corresponding elements of two input lists.\n\n    Args:\n        list1 (List[int]): The first input list.\n        list2 (List[int]): The second input list.\n\n    Returns:\n        List[int]: A new list containing the sum of corresponding elements from list1 and list2.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import zip_longest\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum corresponding elements of two lists\n    Args:\n        list1: List of integers\n        list2: List of integers\n    Returns:\n        List of integers with the sum of corresponding elements from list1 and list2\n    \"\"\"\n    return [a + b for a, b in zip_longest(list1, list2, fillvalue=0)]\n", "from typing import List\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum corresponding elements of two lists\n\n    Args:\n    list1: List[int] - The first list of integers\n    list2: List[int] - The second list of integers\n\n    Returns:\n    List[int] - A new list containing the sum of corresponding elements from list1 and list2\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Sums up two lists element-wise.\n\n    Args:\n        list1 (List[int]): The first list of integers.\n        list2 (List[int]): The second list of integers.\n\n    Returns:\n        List[int]: A new list containing the element-wise sum of list1 and list2.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum two lists element-wise.\n\n    Args:\n    list1: List of integers\n    list2: List of integers\n\n    Returns:\n    List of integers containing the sum of corresponding elements from list1 and list2\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum two lists element-wise.\n\n    Args:\n    list1: A list of integers.\n    list2: A list of integers.\n\n    Returns:\n    A new list containing the element-wise sum of list1 and list2.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n"], "plans": ["requirement pool:\n- Implement summing logic for two lists\n- Ensure input lists are of the same length\n- Optimize function for performance\nWe will use the built-in zip function in Python to efficiently sum corresponding elements of two lists. We will also handle lists of varying lengths by truncating the longer list to match the length of the shorter list.\n", "requirement pool:\n- Implement sum_list function to add corresponding elements of two lists\n- Ensure the function can handle lists of different lengths\n- Optimize the function for performance\nWe will use a simple approach to implement the sum_list function using basic Python functionality.\n", "We will use a simple approach to define a static Python function that efficiently sums corresponding elements of two lists.\n", "We will use the built-in zip function in Python to efficiently iterate over corresponding elements of the two input lists and sum them up.\n", "We will use the built-in zip function in Python to efficiently iterate over corresponding elements of the two input lists and sum them up.\n", "requirement pool:\n- Implement summing logic for two lists\n- Ensure the function can handle lists of different lengths\n- Optimize the function for performance\nWe will use the built-in zip function in Python to efficiently sum corresponding elements of two lists. We will handle lists of varying lengths by using the zip_longest function from the itertools module to gracefully handle cases where the lists have different lengths. To optimize performance, we will focus on leveraging the simplicity and efficiency of built-in Python functions.\n", "We will use a simple approach to define a static Python function that efficiently sums corresponding elements of two lists.\n", "requirement pool:\n- Implement summing logic for two lists\n- Ensure the function can handle lists of different lengths\n- Optimize the function for performance\nWe will use a simple approach to implement the sum_list function using basic Python functionality.\n", "requirement pool:\n- Implement sum_list function to add corresponding elements of two lists\n- Ensure the function can handle lists of different lengths\n- Optimize the function for efficiency in sum calculations\nWe will use a simple approach to implement the sum_list function using basic Python functionality without the need for any external libraries.\n", "requirement pool:\n- Implement sum_list function to add corresponding elements of two lists\n- Ensure the function handles lists of different lengths appropriately\n- Optimize the function for performance efficiency\nWe will use basic Python functions to implement the sum_list function without defining any class. We will leverage the zip function to iterate over corresponding elements of the two input lists and perform element-wise addition.\n"], "test": ["def check(sum_list):\n\tassert sum_list([10,20,30],[15,25,35])==[25,45,65]", "def check(sum_list):\n\tassert sum_list([1,2,3],[5,6,7])==[6,8,10]", "def check(sum_list):\n\tassert sum_list([15,20,30],[15,45,75])==[30,65,105]", "def check(sum_list):\n\tassert sum_list([11, 19, 31], [20, 29, 39]) == [31, 48, 70]", "def check(sum_list):\n\tassert sum_list([15, 19, 31], [18, 26, 30]) == [33, 45, 61]", "def check(sum_list):\n\tassert sum_list([11, 23, 29], [15, 20, 40]) == [26, 43, 69]", "def check(sum_list):\n\tassert sum_list([11, 25, 35], [13, 27, 32]) == [24, 52, 67]", "def check(sum_list):\n\tassert sum_list([6, 20, 25], [11, 29, 36]) == [17, 49, 61]", "def check(sum_list):\n\tassert sum_list([10, 18, 26], [11, 27, 30]) == [21, 45, 56]", "def check(sum_list):\n\tassert sum_list([6, 16, 31], [19, 21, 36]) == [25, 37, 67]", "def check(sum_list):\n\tassert sum_list([8, 17, 30], [17, 30, 40]) == [25, 47, 70]", "def check(sum_list):\n\tassert sum_list([12, 22, 26], [17, 27, 32]) == [29, 49, 58]", "def check(sum_list):\n\tassert sum_list([12, 20, 34], [14, 22, 37]) == [26, 42, 71]", "def check(sum_list):\n\tassert sum_list([8, 21, 26], [15, 23, 36]) == [23, 44, 62]", "def check(sum_list):\n\tassert sum_list([5, 19, 27], [13, 22, 39]) == [18, 41, 66]", "def check(sum_list):\n\tassert sum_list([6, 15, 25], [15, 28, 32]) == [21, 43, 57]", "def check(sum_list):\n\tassert sum_list([8, 22, 27], [11, 28, 35]) == [19, 50, 62]", "def check(sum_list):\n\tassert sum_list([5, 25, 33], [13, 30, 38]) == [18, 55, 71]", "def check(sum_list):\n\tassert sum_list([12, 18, 34], [17, 23, 36]) == [29, 41, 70]", "def check(sum_list):\n\tassert sum_list([5, 20, 30], [20, 28, 39]) == [25, 48, 69]", "def check(sum_list):\n\tassert sum_list([12, 21, 30], [15, 22, 36]) == [27, 43, 66]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [18, 25, 36]) == [32, 40, 63]", "def check(sum_list):\n\tassert sum_list([7, 15, 33], [16, 30, 35]) == [23, 45, 68]", "def check(sum_list):\n\tassert sum_list([7, 22, 33], [12, 27, 30]) == [19, 49, 63]", "def check(sum_list):\n\tassert sum_list([13, 25, 35], [18, 21, 35]) == [31, 46, 70]", "def check(sum_list):\n\tassert sum_list([9, 23, 35], [11, 28, 35]) == [20, 51, 70]", "def check(sum_list):\n\tassert sum_list([14, 24, 27], [11, 26, 37]) == [25, 50, 64]", "def check(sum_list):\n\tassert sum_list([9, 24, 34], [20, 23, 35]) == [29, 47, 69]", "def check(sum_list):\n\tassert sum_list([11, 24, 33], [14, 29, 31]) == [25, 53, 64]", "def check(sum_list):\n\tassert sum_list([13, 24, 28], [10, 25, 34]) == [23, 49, 62]", "def check(sum_list):\n\tassert sum_list([15, 21, 28], [10, 20, 30]) == [25, 41, 58]", "def check(sum_list):\n\tassert sum_list([9, 17, 28], [17, 22, 32]) == [26, 39, 60]", "def check(sum_list):\n\tassert sum_list([7, 25, 28], [13, 29, 31]) == [20, 54, 59]", "def check(sum_list):\n\tassert sum_list([6, 25, 26], [12, 26, 34]) == [18, 51, 60]", "def check(sum_list):\n\tassert sum_list([9, 21, 34], [10, 26, 40]) == [19, 47, 74]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [12, 26, 39]) == [25, 44, 64]", "def check(sum_list):\n\tassert sum_list([2, 1, 2], [10, 8, 6]) == [12, 9, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 5], [1, 9, 2]) == [2, 16, 7]", "def check(sum_list):\n\tassert sum_list([1, 2, 6], [4, 11, 2]) == [5, 13, 8]", "def check(sum_list):\n\tassert sum_list([4, 6, 4], [1, 6, 6]) == [5, 12, 10]", "def check(sum_list):\n\tassert sum_list([6, 3, 2], [3, 8, 7]) == [9, 11, 9]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [10, 4, 7]) == [15, 7, 9]", "def check(sum_list):\n\tassert sum_list([2, 5, 5], [7, 10, 3]) == [9, 15, 8]", "def check(sum_list):\n\tassert sum_list([6, 7, 4], [9, 5, 8]) == [15, 12, 12]", "def check(sum_list):\n\tassert sum_list([4, 3, 1], [8, 11, 7]) == [12, 14, 8]", "def check(sum_list):\n\tassert sum_list([1, 7, 8], [1, 10, 4]) == [2, 17, 12]", "def check(sum_list):\n\tassert sum_list([5, 2, 1], [2, 9, 9]) == [7, 11, 10]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [2, 4, 9]) == [3, 9, 11]", "def check(sum_list):\n\tassert sum_list([1, 4, 2], [8, 5, 7]) == [9, 9, 9]", "def check(sum_list):\n\tassert sum_list([4, 4, 1], [4, 5, 5]) == [8, 9, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 4], [5, 10, 12]) == [11, 12, 16]", "def check(sum_list):\n\tassert sum_list([3, 2, 6], [7, 1, 4]) == [10, 3, 10]", "def check(sum_list):\n\tassert sum_list([2, 7, 3], [9, 5, 2]) == [11, 12, 5]", "def check(sum_list):\n\tassert sum_list([2, 3, 4], [9, 6, 12]) == [11, 9, 16]", "def check(sum_list):\n\tassert sum_list([2, 6, 6], [1, 3, 10]) == [3, 9, 16]", "def check(sum_list):\n\tassert sum_list([4, 7, 7], [6, 7, 8]) == [10, 14, 15]", "def check(sum_list):\n\tassert sum_list([1, 3, 7], [10, 8, 6]) == [11, 11, 13]", "def check(sum_list):\n\tassert sum_list([1, 3, 6], [3, 1, 6]) == [4, 4, 12]", "def check(sum_list):\n\tassert sum_list([2, 7, 1], [9, 4, 4]) == [11, 11, 5]", "def check(sum_list):\n\tassert sum_list([4, 2, 1], [8, 2, 5]) == [12, 4, 6]", "def check(sum_list):\n\tassert sum_list([6, 2, 5], [3, 4, 10]) == [9, 6, 15]", "def check(sum_list):\n\tassert sum_list([5, 3, 2], [5, 1, 4]) == [10, 4, 6]", "def check(sum_list):\n\tassert sum_list([4, 5, 5], [9, 10, 8]) == [13, 15, 13]", "def check(sum_list):\n\tassert sum_list([3, 4, 3], [3, 5, 11]) == [6, 9, 14]", "def check(sum_list):\n\tassert sum_list([1, 5, 2], [5, 1, 11]) == [6, 6, 13]", "def check(sum_list):\n\tassert sum_list([2, 3, 8], [3, 7, 3]) == [5, 10, 11]", "def check(sum_list):\n\tassert sum_list([3, 5, 7], [5, 8, 8]) == [8, 13, 15]", "def check(sum_list):\n\tassert sum_list([4, 3, 6], [8, 11, 11]) == [12, 14, 17]", "def check(sum_list):\n\tassert sum_list([3, 7, 8], [6, 9, 2]) == [9, 16, 10]", "def check(sum_list):\n\tassert sum_list([14, 18, 32], [14, 49, 80]) == [28, 67, 112]", "def check(sum_list):\n\tassert sum_list([15, 21, 33], [13, 47, 78]) == [28, 68, 111]", "def check(sum_list):\n\tassert sum_list([14, 15, 27], [17, 49, 79]) == [31, 64, 106]", "def check(sum_list):\n\tassert sum_list([10, 20, 33], [19, 41, 75]) == [29, 61, 108]", "def check(sum_list):\n\tassert sum_list([19, 21, 32], [11, 48, 80]) == [30, 69, 112]", "def check(sum_list):\n\tassert sum_list([18, 18, 28], [10, 50, 76]) == [28, 68, 104]", "def check(sum_list):\n\tassert sum_list([19, 17, 25], [19, 44, 79]) == [38, 61, 104]", "def check(sum_list):\n\tassert sum_list([16, 21, 26], [15, 44, 72]) == [31, 65, 98]", "def check(sum_list):\n\tassert sum_list([11, 19, 32], [10, 44, 77]) == [21, 63, 109]", "def check(sum_list):\n\tassert sum_list([20, 21, 34], [14, 50, 74]) == [34, 71, 108]", "def check(sum_list):\n\tassert sum_list([18, 23, 34], [10, 41, 72]) == [28, 64, 106]", "def check(sum_list):\n\tassert sum_list([17, 23, 28], [20, 49, 71]) == [37, 72, 99]", "def check(sum_list):\n\tassert sum_list([16, 17, 33], [12, 41, 74]) == [28, 58, 107]", "def check(sum_list):\n\tassert sum_list([13, 16, 29], [19, 40, 70]) == [32, 56, 99]", "def check(sum_list):\n\tassert sum_list([19, 18, 29], [12, 46, 79]) == [31, 64, 108]", "def check(sum_list):\n\tassert sum_list([20, 16, 33], [13, 47, 80]) == [33, 63, 113]", "def check(sum_list):\n\tassert sum_list([16, 24, 34], [17, 41, 76]) == [33, 65, 110]", "def check(sum_list):\n\tassert sum_list([19, 24, 34], [11, 50, 80]) == [30, 74, 114]", "def check(sum_list):\n\tassert sum_list([14, 24, 28], [18, 43, 76]) == [32, 67, 104]", "def check(sum_list):\n\tassert sum_list([11, 15, 29], [19, 46, 80]) == [30, 61, 109]", "def check(sum_list):\n\tassert sum_list([14, 18, 31], [11, 41, 78]) == [25, 59, 109]", "def check(sum_list):\n\tassert sum_list([16, 18, 32], [13, 46, 72]) == [29, 64, 104]", "def check(sum_list):\n\tassert sum_list([13, 23, 30], [19, 41, 78]) == [32, 64, 108]", "def check(sum_list):\n\tassert sum_list([16, 18, 33], [17, 44, 80]) == [33, 62, 113]", "def check(sum_list):\n\tassert sum_list([13, 22, 33], [12, 48, 77]) == [25, 70, 110]", "def check(sum_list):\n\tassert sum_list([13, 18, 29], [14, 50, 76]) == [27, 68, 105]", "def check(sum_list):\n\tassert sum_list([15, 18, 29], [12, 43, 80]) == [27, 61, 109]", "def check(sum_list):\n\tassert sum_list([12, 16, 35], [11, 46, 74]) == [23, 62, 109]", "def check(sum_list):\n\tassert sum_list([14, 16, 32], [18, 40, 75]) == [32, 56, 107]", "def check(sum_list):\n\tassert sum_list([14, 21, 29], [10, 41, 80]) == [24, 62, 109]", "def check(sum_list):\n\tassert sum_list([13, 18, 25], [16, 45, 75]) == [29, 63, 100]", "def check(sum_list):\n\tassert sum_list([18, 25, 35], [19, 47, 79]) == [37, 72, 114]", "def check(sum_list):\n\tassert sum_list([18, 25, 29], [16, 48, 73]) == [34, 73, 102]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Function to sum two lists element-wise.\n\n    Args:\n    list1: A list of integers.\n    list2: A list of integers.\n\n    Returns:\n    A new list containing the element-wise sum of list1 and list2.\n    \"\"\"\n    return [a + b for a, b in zip(list1, list2)]\n", "passed": true, "pass": true, "pass_num": 10, "round": 639, "mutate_method": "condense_two2one", "parent_index": 547}
