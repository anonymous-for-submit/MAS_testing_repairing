{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 589, "prompt": "Write a function to find perfect squares. The function should take two numbers as input and then determine which numbers are perfect squares between those two numbers.", "code": "def perfect_squares(a, b):\n    lists=[]\n    for i in range (a,b+1):\n        j = 1;\n        while j*j <= i:\n            if j*j == i:\n                 lists.append(i)  \n            j = j+1\n        i = i+1\n    return lists", "test_imports": [], "test_list": ["assert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "assert perfect_squares(50,100)==[64, 81, 100]", "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "assert perfect_squares(3, 26) == [4, 9, 16, 25]", "assert perfect_squares(1, 27) == [1, 4, 9, 16, 25]", "assert perfect_squares(3, 30) == [4, 9, 16, 25]", "assert perfect_squares(6, 33) == [9, 16, 25]", "assert perfect_squares(6, 34) == [9, 16, 25]", "assert perfect_squares(1, 35) == [1, 4, 9, 16, 25]", "assert perfect_squares(2, 28) == [4, 9, 16, 25]", "assert perfect_squares(4, 32) == [4, 9, 16, 25]", "assert perfect_squares(2, 34) == [4, 9, 16, 25]", "assert perfect_squares(6, 31) == [9, 16, 25]", "assert perfect_squares(3, 28) == [4, 9, 16, 25]", "assert perfect_squares(2, 30) == [4, 9, 16, 25]", "assert perfect_squares(1, 28) == [1, 4, 9, 16, 25]", "assert perfect_squares(2, 28) == [4, 9, 16, 25]", "assert perfect_squares(2, 31) == [4, 9, 16, 25]", "assert perfect_squares(6, 27) == [9, 16, 25]", "assert perfect_squares(2, 31) == [4, 9, 16, 25]", "assert perfect_squares(4, 31) == [4, 9, 16, 25]", "assert perfect_squares(2, 28) == [4, 9, 16, 25]", "assert perfect_squares(2, 34) == [4, 9, 16, 25]", "assert perfect_squares(4, 31) == [4, 9, 16, 25]", "assert perfect_squares(5, 35) == [9, 16, 25]", "assert perfect_squares(3, 30) == [4, 9, 16, 25]", "assert perfect_squares(4, 28) == [4, 9, 16, 25]", "assert perfect_squares(2, 28) == [4, 9, 16, 25]", "assert perfect_squares(6, 26) == [9, 16, 25]", "assert perfect_squares(3, 26) == [4, 9, 16, 25]", "assert perfect_squares(2, 26) == [4, 9, 16, 25]", "assert perfect_squares(3, 29) == [4, 9, 16, 25]", "assert perfect_squares(2, 32) == [4, 9, 16, 25]", "assert perfect_squares(2, 27) == [4, 9, 16, 25]", "assert perfect_squares(1, 26) == [1, 4, 9, 16, 25]", "assert perfect_squares(2, 34) == [4, 9, 16, 25]", "assert perfect_squares(46, 99) == [49, 64, 81]", "assert perfect_squares(45, 102) == [49, 64, 81, 100]", "assert perfect_squares(49, 97) == [49, 64, 81]", "assert perfect_squares(48, 100) == [49, 64, 81, 100]", "assert perfect_squares(50, 98) == [64, 81]", "assert perfect_squares(55, 104) == [64, 81, 100]", "assert perfect_squares(48, 104) == [49, 64, 81, 100]", "assert perfect_squares(51, 103) == [64, 81, 100]", "assert perfect_squares(45, 105) == [49, 64, 81, 100]", "assert perfect_squares(45, 96) == [49, 64, 81]", "assert perfect_squares(54, 99) == [64, 81]", "assert perfect_squares(53, 100) == [64, 81, 100]", "assert perfect_squares(51, 101) == [64, 81, 100]", "assert perfect_squares(53, 102) == [64, 81, 100]", "assert perfect_squares(45, 99) == [49, 64, 81]", "assert perfect_squares(51, 95) == [64, 81]", "assert perfect_squares(48, 103) == [49, 64, 81, 100]", "assert perfect_squares(53, 97) == [64, 81]", "assert perfect_squares(55, 97) == [64, 81]", "assert perfect_squares(45, 105) == [49, 64, 81, 100]", "assert perfect_squares(49, 98) == [49, 64, 81]", "assert perfect_squares(51, 98) == [64, 81]", "assert perfect_squares(45, 101) == [49, 64, 81, 100]", "assert perfect_squares(45, 100) == [49, 64, 81, 100]", "assert perfect_squares(45, 104) == [49, 64, 81, 100]", "assert perfect_squares(45, 105) == [49, 64, 81, 100]", "assert perfect_squares(47, 98) == [49, 64, 81]", "assert perfect_squares(50, 98) == [64, 81]", "assert perfect_squares(48, 95) == [49, 64, 81]", "assert perfect_squares(51, 98) == [64, 81]", "assert perfect_squares(47, 96) == [49, 64, 81]", "assert perfect_squares(51, 100) == [64, 81, 100]", "assert perfect_squares(55, 104) == [64, 81, 100]", "assert perfect_squares(95, 195) == [100, 121, 144, 169]", "assert perfect_squares(99, 203) == [100, 121, 144, 169, 196]", "assert perfect_squares(103, 199) == [121, 144, 169, 196]", "assert perfect_squares(101, 199) == [121, 144, 169, 196]", "assert perfect_squares(102, 197) == [121, 144, 169, 196]", "assert perfect_squares(103, 204) == [121, 144, 169, 196]", "assert perfect_squares(104, 198) == [121, 144, 169, 196]", "assert perfect_squares(104, 196) == [121, 144, 169, 196]", "assert perfect_squares(105, 202) == [121, 144, 169, 196]", "assert perfect_squares(105, 195) == [121, 144, 169]", "assert perfect_squares(99, 202) == [100, 121, 144, 169, 196]", "assert perfect_squares(104, 202) == [121, 144, 169, 196]", "assert perfect_squares(105, 203) == [121, 144, 169, 196]", "assert perfect_squares(105, 204) == [121, 144, 169, 196]", "assert perfect_squares(99, 201) == [100, 121, 144, 169, 196]", "assert perfect_squares(103, 195) == [121, 144, 169]", "assert perfect_squares(100, 200) == [100, 121, 144, 169, 196]", "assert perfect_squares(102, 203) == [121, 144, 169, 196]", "assert perfect_squares(105, 197) == [121, 144, 169, 196]", "assert perfect_squares(105, 196) == [121, 144, 169, 196]", "assert perfect_squares(96, 204) == [100, 121, 144, 169, 196]", "assert perfect_squares(97, 203) == [100, 121, 144, 169, 196]", "assert perfect_squares(103, 202) == [121, 144, 169, 196]", "assert perfect_squares(105, 203) == [121, 144, 169, 196]", "assert perfect_squares(100, 197) == [100, 121, 144, 169, 196]", "assert perfect_squares(95, 198) == [100, 121, 144, 169, 196]", "assert perfect_squares(100, 203) == [100, 121, 144, 169, 196]", "assert perfect_squares(103, 202) == [121, 144, 169, 196]", "assert perfect_squares(103, 197) == [121, 144, 169, 196]", "assert perfect_squares(103, 197) == [121, 144, 169, 196]", "assert perfect_squares(97, 198) == [100, 121, 144, 169, 196]", "assert perfect_squares(100, 198) == [100, 121, 144, 169, 196]", "assert perfect_squares(97, 196) == [100, 121, 144, 169, 196]"], "entry_point": "perfect_squares", "repair_prompt": ["Write a function perfect_squares to find perfect squares. The function should take two numbers as input and then determine which numbers are perfect squares between those two numbers.\nperfect_squares(1,30)==[1, 4, 9, 16, 25]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the given range\n\n    Args:\n    start: int - the start of the range\n    end: int - the end of the range\n\n    Returns:\n    List[int] - a list of perfect squares within the given range\n    \"\"\"\n    result = []\n    for i in range(start, end+1):\n        if (int(i**0.5))**2 == i:\n            result.append(i)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares between start and end (inclusive)\n    \n    Args:\n    start: int - The starting number of the range\n    end: int - The ending number of the range\n    \n    Returns:\n    List[int] - A list of perfect squares within the given range\n    \"\"\"\n    perfect_squares_list = []\n    \n    for num in range(start, end+1):\n        if int(num**0.5)**2 == num:\n            perfect_squares_list.append(num)\n    \n    return perfect_squares_list\n", "from typing import List\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the given range\n\n    Args:\n    start: int - starting number of the range\n    end: int - ending number of the range\n\n    Returns:\n    List[int]: List of perfect squares within the range\n    \"\"\"\n    perfect_squares_list = []\n    \n    for i in range(start, end+1):\n        if (i**0.5).is_integer():  # Check if the square root is an integer\n            perfect_squares_list.append(i)\n    \n    return perfect_squares_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    # Function to find perfect squares between start and end\n    result = []\n    for i in range(start, end+1):\n        if (int(i**0.5))**2 == i:\n            result.append(i)\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares between start and end\n    Args:\n    start: int - starting range\n    end: int - ending range\n\n    Returns:\n    List[int] - list of perfect squares within the given range\n    \"\"\"\n    perfect_squares_list = []\n    for i in range(start, end+1):\n        if (int(i**0.5))**2 == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the given range\n\n    Args:\n    start: int - The starting value of the range\n    end: int - The ending value of the range\n\n    Returns:\n    List[int] - A list of perfect squares within the given range\n    \"\"\"\n    squares = []\n    for i in range(start, end+1):\n        if (int(i**0.5))**2 == i:\n            squares.append(i)\n    return squares\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the given range\n\n    Args:\n    start: int - The starting value of the range\n    end: int - The ending value of the range\n\n    Returns:\n    List[int] - A list of perfect squares within the given range\n    \"\"\"\n    squares = []\n    for i in range(start, end+1):\n        if (int(i**0.5))**2 == i:\n            squares.append(i)\n    return squares\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    # Function to find perfect squares between start and end\n    result = []\n    for i in range(start, end+1):\n        if (int(i**0.5))**2 == i:\n            result.append(i)\n    return result\n", "from typing import List\nfrom typing import List\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the range [start, end]\n    \n    Args:\n    start: int - The starting number of the range\n    end: int - The ending number of the range\n    \n    Returns:\n    List[int] - A list of perfect squares within the range [start, end]\n    \"\"\"\n    perfect_squares_list = []\n    for num in range(start, end+1):\n        if int(num**0.5)**2 == num:\n            perfect_squares_list.append(num)\n    return perfect_squares_list\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the given range\n    Input: start - int, end - int\n    Output: List of perfect squares\n    \"\"\"\n    perfect_squares_list = []\n    \n    for num in range(start, end+1):\n        if math.isqrt(num) ** 2 == num:\n            perfect_squares_list.append(num)\n    \n    return perfect_squares_list\n"], "plans": ["requirement analysis:\nThe function should efficiently iterate through the given range and identify perfect squares by checking if the square root of a number is an integer.\nrequirement pool:\n- Implement the core perfect_squares function to accurately identify perfect squares\n- Optimize the algorithm for performance, especially for large number ranges\n- Include error handling for invalid inputs such as negative numbers\nWe will design a simple static Python function using basic arithmetic operations to efficiently identify perfect squares within a given range.\n", "requirement analysis:\nThe function 'perfect_squares' needs to efficiently identify perfect squares within a given range by iterating through the numbers and checking if they are perfect squares. It should handle both input numbers inclusively and return a list of perfect squares found.\nrequirement pool:\n- Implement algorithm to check perfect squares\n- Optimize performance for large number ranges\n- Ensure correct identification of perfect squares\nWe will design a simple Python function using basic mathematical operations to efficiently identify perfect squares within a given range.\n", "requirement analysis:\nThe function 'perfect_squares' needs to efficiently identify perfect squares within a given range while ensuring accuracy and performance optimization.\nrequirement pool:\n- Implement algorithm to check perfect squares efficiently\n- Handle input validation for number ranges\n- Optimize function performance for large ranges\nWe will design a simple Python function using basic mathematical operations to efficiently identify perfect squares within a given range.\n", "requirement pool:\n- Implement a function that efficiently identifies perfect squares within a given range\n- Ensure the function handles edge cases and invalid inputs gracefully\n- Optimize the algorithm for performance when dealing with large number ranges\nWe will use the math library in Python to efficiently identify perfect squares within the given range.\n", "requirement analysis:\nThe function should efficiently iterate through the given range and identify perfect squares by checking if the square root of a number is an integer.\nrequirement pool:\n- Efficiently iterate through the number range\n- Accurately determine perfect squares\n- Optimize performance for large ranges\nWe will design a simple Python function using basic mathematical operations to efficiently identify perfect squares within a given range.\n", "requirement analysis:\nThe function should efficiently iterate through the given range, checking for perfect squares using mathematical operations. It should accurately identify and compile a list of perfect squares within the range.\nrequirement pool:\n- Efficiently iterate through the number range\n- Accurately determine perfect squares\n- Optimize performance for large number ranges\nWe will design a simple Python function using basic mathematical operations to efficiently identify perfect squares within a given range.\n", "requirement pool:\n- Implement a function to efficiently determine perfect squares within a given range\n- Ensure the function accurately identifies all perfect squares\n- Optimize the function's performance to handle large number ranges\nWe will design a simple Python function using basic mathematical operations to efficiently determine perfect squares within a given range.\n", "requirement pool:\n- Implement a function that efficiently identifies perfect squares within a given range\n- Ensure the function handles edge cases like negative numbers and large ranges\n- Optimize the algorithm for performance to handle large number ranges\nWe will use the math library in Python to efficiently identify perfect squares within the given range.\n", "requirement analysis:\nThe function should iterate through the range of numbers provided, check if each number is a perfect square, and store the perfect squares in a list for output.\nrequirement pool:\n- Implement a loop to iterate through the number range\n- Check if each number is a perfect square\n- Store the perfect squares in a list for output\n- Handle input validation for incorrect number ranges\n- Optimize the algorithm for performance with large number ranges\nWe will design a simple Python function using basic mathematical operations to efficiently identify perfect squares within a given range.\n", "requirement analysis:\nThe function should efficiently iterate through the given range and identify perfect squares by checking if the square root of a number is an integer.\nrequirement pool:\n- Implement the core perfect square identification logic\n- Handle edge cases such as negative input numbers\n- Optimize the algorithm for performance on large number ranges\nWe will use a simple approach to iterate through the given range and check if the square root of each number is an integer using Python's math library.\n"], "test": ["def check(perfect_squares):\n\tassert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(50,100)==[64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(100,200)==[100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(3, 26) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(1, 27) == [1, 4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(3, 30) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(6, 33) == [9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(6, 34) == [9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(1, 35) == [1, 4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 28) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(4, 32) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 34) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(6, 31) == [9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(3, 28) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 30) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(1, 28) == [1, 4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 28) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 31) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(6, 27) == [9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 31) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(4, 31) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 28) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 34) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(4, 31) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(5, 35) == [9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(3, 30) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(4, 28) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 28) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(6, 26) == [9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(3, 26) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 26) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(3, 29) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 32) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 27) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(1, 26) == [1, 4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(2, 34) == [4, 9, 16, 25]", "def check(perfect_squares):\n\tassert perfect_squares(46, 99) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(45, 102) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(49, 97) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(48, 100) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(50, 98) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(55, 104) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(48, 104) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(51, 103) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(45, 105) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(45, 96) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(54, 99) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(53, 100) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(51, 101) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(53, 102) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(45, 99) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(51, 95) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(48, 103) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(53, 97) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(55, 97) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(45, 105) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(49, 98) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(51, 98) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(45, 101) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(45, 100) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(45, 104) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(45, 105) == [49, 64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(47, 98) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(50, 98) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(48, 95) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(51, 98) == [64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(47, 96) == [49, 64, 81]", "def check(perfect_squares):\n\tassert perfect_squares(51, 100) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(55, 104) == [64, 81, 100]", "def check(perfect_squares):\n\tassert perfect_squares(95, 195) == [100, 121, 144, 169]", "def check(perfect_squares):\n\tassert perfect_squares(99, 203) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 199) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(101, 199) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(102, 197) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 204) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(104, 198) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(104, 196) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 202) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 195) == [121, 144, 169]", "def check(perfect_squares):\n\tassert perfect_squares(99, 202) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(104, 202) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 203) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 204) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(99, 201) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 195) == [121, 144, 169]", "def check(perfect_squares):\n\tassert perfect_squares(100, 200) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(102, 203) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 197) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 196) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(96, 204) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(97, 203) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 202) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(105, 203) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(100, 197) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(95, 198) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(100, 203) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 202) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 197) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(103, 197) == [121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(97, 198) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(100, 198) == [100, 121, 144, 169, 196]", "def check(perfect_squares):\n\tassert perfect_squares(97, 196) == [100, 121, 144, 169, 196]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\nimport math\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\"\n    Function to find perfect squares within the given range\n    Input: start - int, end - int\n    Output: List of perfect squares\n    \"\"\"\n    perfect_squares_list = []\n    \n    for num in range(start, end+1):\n        if math.isqrt(num) ** 2 == num:\n            perfect_squares_list.append(num)\n    \n    return perfect_squares_list\n", "passed": true, "pass": true, "pass_num": 10, "round": 652, "mutate_method": "condense_two2one", "parent_index": 487}
