{"source_file": "Mike's Copy of Benchmark Questions Verification V2.ipynb", "task_id": 123, "prompt": "Write a function to sum all amicable numbers. These numbers should range from 1 to a specified number.", "code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "test_imports": [], "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0", "assert amicable_numbers_sum(997) == 504", "assert amicable_numbers_sum(999) == 504", "assert amicable_numbers_sum(998) == 504", "assert amicable_numbers_sum(995) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(998) == 504", "assert amicable_numbers_sum(1001) == 504", "assert amicable_numbers_sum(1000) == 504", "assert amicable_numbers_sum(1004) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(997) == 504", "assert amicable_numbers_sum(1003) == 504", "assert amicable_numbers_sum(1004) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(997) == 504", "assert amicable_numbers_sum(1003) == 504", "assert amicable_numbers_sum(1001) == 504", "assert amicable_numbers_sum(1001) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(1002) == 504", "assert amicable_numbers_sum(996) == 504", "assert amicable_numbers_sum(997) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(1003) == 504", "assert amicable_numbers_sum(1004) == 504", "assert amicable_numbers_sum(994) == 504", "assert amicable_numbers_sum(1003) == 504", "assert amicable_numbers_sum(998) == 504", "assert amicable_numbers_sum(1001) == 504", "assert amicable_numbers_sum(1000) == 504", "assert amicable_numbers_sum(995) == 504", "assert amicable_numbers_sum(995) == 504", "assert amicable_numbers_sum(10106) == 31626", "assert amicable_numbers_sum(10465) == 31626", "assert amicable_numbers_sum(9063) == 31626", "assert amicable_numbers_sum(10085) == 31626", "assert amicable_numbers_sum(10694) == 31626", "assert amicable_numbers_sum(9085) == 31626", "assert amicable_numbers_sum(10769) == 42370", "assert amicable_numbers_sum(9553) == 31626", "assert amicable_numbers_sum(8951) == 31626", "assert amicable_numbers_sum(9393) == 31626", "assert amicable_numbers_sum(10611) == 31626", "assert amicable_numbers_sum(10259) == 31626", "assert amicable_numbers_sum(10565) == 31626", "assert amicable_numbers_sum(9375) == 31626", "assert amicable_numbers_sum(9011) == 31626", "assert amicable_numbers_sum(9714) == 31626", "assert amicable_numbers_sum(9721) == 31626", "assert amicable_numbers_sum(10431) == 31626", "assert amicable_numbers_sum(9299) == 31626", "assert amicable_numbers_sum(9081) == 31626", "assert amicable_numbers_sum(10028) == 31626", "assert amicable_numbers_sum(10673) == 31626", "assert amicable_numbers_sum(9992) == 31626", "assert amicable_numbers_sum(9137) == 31626", "assert amicable_numbers_sum(9403) == 31626", "assert amicable_numbers_sum(10549) == 31626", "assert amicable_numbers_sum(10296) == 31626", "assert amicable_numbers_sum(9720) == 31626", "assert amicable_numbers_sum(10664) == 31626", "assert amicable_numbers_sum(9618) == 31626", "assert amicable_numbers_sum(9546) == 31626", "assert amicable_numbers_sum(9050) == 31626", "assert amicable_numbers_sum(10267) == 31626", "assert amicable_numbers_sum(94) == 0", "assert amicable_numbers_sum(94) == 0", "assert amicable_numbers_sum(103) == 0", "assert amicable_numbers_sum(94) == 0", "assert amicable_numbers_sum(102) == 0", "assert amicable_numbers_sum(102) == 0", "assert amicable_numbers_sum(98) == 0", "assert amicable_numbers_sum(103) == 0", "assert amicable_numbers_sum(96) == 0", "assert amicable_numbers_sum(102) == 0", "assert amicable_numbers_sum(104) == 0", "assert amicable_numbers_sum(103) == 0", "assert amicable_numbers_sum(102) == 0", "assert amicable_numbers_sum(102) == 0", "assert amicable_numbers_sum(95) == 0", "assert amicable_numbers_sum(95) == 0", "assert amicable_numbers_sum(98) == 0", "assert amicable_numbers_sum(98) == 0", "assert amicable_numbers_sum(101) == 0", "assert amicable_numbers_sum(95) == 0", "assert amicable_numbers_sum(96) == 0", "assert amicable_numbers_sum(97) == 0", "assert amicable_numbers_sum(100) == 0", "assert amicable_numbers_sum(98) == 0", "assert amicable_numbers_sum(95) == 0", "assert amicable_numbers_sum(94) == 0", "assert amicable_numbers_sum(99) == 0", "assert amicable_numbers_sum(96) == 0", "assert amicable_numbers_sum(98) == 0", "assert amicable_numbers_sum(100) == 0", "assert amicable_numbers_sum(95) == 0", "assert amicable_numbers_sum(102) == 0", "assert amicable_numbers_sum(102) == 0"], "entry_point": "amicable_numbers_sum", "repair_prompt": ["Write a function amicable_numbers_sum to sum all amicable numbers. These numbers should range from 1 to a specified number.\namicable_numbers_sum(999)==504\n"], "completions": ["from typing import List\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Function to calculate the sum of amicable numbers up to the given limit\n    Args:\n    limit: int - the upper limit to calculate the sum of amicable numbers\n    \n    Returns:\n    int - the sum of amicable numbers within the specified range\n    \"\"\"\n    def sum_divisors(n):\n        \"\"\"\n        Function to calculate the sum of divisors of a number\n        Args:\n        n: int - the number to calculate the sum of divisors for\n        \n        Returns:\n        int - the sum of divisors of the input number\n        \"\"\"\n        return sum([i for i in range(1, n) if n % i == 0])\n    \n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_a = sum_divisors(num)\n        sum_b = sum_divisors(sum_a)\n        if num == sum_b and num != sum_a:\n            amicable_sum += num\n    \n    return amicable_sum\n", "from typing import List\n## main.py\n\ndef sum_divisors(n: int) -> int:\n    \"\"\"\n    Calculate the sum of proper divisors of a number n.\n    \n    Args:\n    n: int - the number to calculate the sum of proper divisors\n    \n    Returns:\n    int - the sum of proper divisors of the number n\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Calculate the sum of all amicable numbers within the range [1, limit].\n    \n    Args:\n    limit: int - the upper limit of the range\n    \n    Returns:\n    int - the sum of all amicable numbers within the range [1, limit]\n    \"\"\"\n    def is_amicable_pair(a: int, b: int) -> bool:\n        \"\"\"\n        Check if two numbers a and b form an amicable pair.\n        \n        Args:\n        a: int - first number\n        b: int - second number\n        \n        Returns:\n        bool - True if a and b form an amicable pair, False otherwise\n        \"\"\"\n        return sum_divisors(a) == b and sum_divisors(b) == a\n    \n    amicable_sum = 0\n    for i in range(1, limit+1):\n        for j in range(i+1, limit+1):\n            if is_amicable_pair(i, j):\n                amicable_sum += i + j\n    \n    return amicable_sum\n", "from typing import List\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    def is_amicable_pair(a: int, b: int) -> bool:\n        return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\n    amicable_sum = 0\n    for num in range(2, limit):\n        pair = sum_of_divisors(num)\n        if num < pair and is_amicable_pair(num, pair):\n            amicable_sum += num + pair\n\n    return amicable_sum\n", "from typing import List\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Calculate the sum of all amicable numbers within the specified limit.\n\n    Args:\n    limit: An integer representing the upper limit of the range to check for amicable numbers.\n\n    Returns:\n    An integer representing the sum of all amicable numbers within the specified limit.\n    \"\"\"\n    \n    def get_divisors_sum(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(1, limit):\n        sum1 = get_divisors_sum(num)\n        sum2 = get_divisors_sum(sum1)\n        \n        if num == sum2 and num != sum1:\n            amicable_sum += num\n\n    return amicable_sum\n", "from typing import List\n## main.py\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"\n    Function to calculate the sum of divisors of a given number\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Function to calculate the sum of all amicable numbers up to the given limit\n    \"\"\"\n    def is_amicable_pair(a: int, b: int) -> bool:\n        \"\"\"\n        Function to check if two numbers form an amicable pair\n        \"\"\"\n        return sum_of_divisors(a) == b and sum_of_divisors(b) == a and a != b\n\n    amicable_sum = 0\n    for num in range(1, limit):\n        pair = sum_of_divisors(num)\n        if is_amicable_pair(num, pair) and num < pair:\n            amicable_sum += num + pair\n\n    return amicable_sum\n", "from typing import List\ndef sum_divisors(n: int) -> int:\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    def is_amicable_pair(a: int, b: int) -> bool:\n        return sum_divisors(a) == b and sum_divisors(b) == a and a != b\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        pair = sum_divisors(num)\n        if is_amicable_pair(num, pair) and num < pair:\n            amicable_sum += num + pair\n\n    return amicable_sum\n", "from typing import List\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    def is_amicable_pair(a: int, b: int) -> bool:\n        return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\n    amicable_sum = 0\n    for num in range(1, limit):\n        pair = sum_of_divisors(num)\n        if is_amicable_pair(num, pair) and num != pair:\n            amicable_sum += num\n\n    return amicable_sum\n", "from typing import List\n## main.py\n\nimport math\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Calculate the sum of all amicable numbers within the specified limit.\n\n    Args:\n    limit: An integer representing the upper limit within which to find amicable numbers.\n\n    Returns:\n    An integer representing the sum of all amicable numbers within the specified limit.\n    \"\"\"\n    \n    def sum_divisors(n):\n        divisors_sum = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum\n    \n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_divisors(a)\n        if a < b and sum_divisors(b) == a:\n            amicable_sum += a + b\n    \n    return amicable_sum\n", "from typing import List\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    def is_amicable_pair(a: int, b: int) -> bool:\n        return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\n    amicable_sum = 0\n    for num in range(2, limit):\n        pair = sum_of_divisors(num)\n        if num < pair and is_amicable_pair(num, pair):\n            amicable_sum += num + pair\n\n    return amicable_sum\n", "from typing import List\n## main.py\n\nimport math\n\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Calculate the sum of all amicable numbers within the specified range.\n\n    Args:\n    limit: An integer representing the upper limit of the range to check for amicable numbers.\n\n    Returns:\n    An integer representing the sum of all amicable numbers within the specified range.\n    \"\"\"\n\n    def sum_divisors(n):\n        divisors_sum = 1\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        sum_num = sum_divisors(num)\n        if sum_num > num and sum_divisors(sum_num) == num:\n            amicable_sum += num + sum_num\n\n    return amicable_sum\n"], "plans": ["requirement analysis:\nThe function should identify amicable numbers within the specified range and sum them up accurately. It should handle edge cases and large numbers efficiently.\nrequirement pool:\n- Calculate the sum of amicable numbers within the given range\n- Optimize the algorithm for better performance\n- Implement error handling for invalid inputs\nWe will design a simple Python function using appropriate open-source libraries to efficiently calculate the sum of amicable numbers within a specified range.\n", "requirement pool:\n- Implement amicable number detection logic\n- Develop efficient summing algorithm for amicable numbers\n- Handle input validation and error scenarios\nWe will design a simple Python function using basic mathematical operations to detect and sum amicable numbers efficiently.\n", "requirement pool:\n- Implement a function to identify amicable numbers\n- Develop a function to calculate the sum of identified amicable numbers\n- Optimize the algorithm for performance with large number ranges\nWe will design a simple Python function using appropriate open-source libraries to efficiently calculate the sum of amicable numbers within a specified range.\n", "requirement analysis:\nThe function should iterate through numbers in the specified range, identify amicable pairs, and sum them up accurately.\nrequirement pool:\n- Efficiently identify amicable number pairs\n- Handle large number ranges with optimized performance\n- Ensure correctness by validating results against known amicable number sums\nWe will use a simple approach to iterate through numbers in the specified range, identify amicable pairs, and sum them up accurately. We will leverage basic Python functionalities to achieve this.\n", "requirement pool:\n- Calculate the sum of all amicable numbers within a specified range\n- Handle edge cases such as 0 and negative numbers gracefully\n- Optimize the algorithm for better performance with large input values\nWe will design a simple Python function using appropriate open-source libraries to efficiently calculate the sum of all amicable numbers within a specified range.\n", "requirement pool:\n- Implement a function to identify amicable numbers\n- Develop a function to calculate the sum of identified amicable numbers\n- Optimize the algorithm for performance\nWe will design a simple Python function using basic arithmetic operations to identify and sum all amicable numbers within a specified range.\n", "requirement pool:\n- Implement a function to identify amicable numbers\n- Develop a mechanism to sum identified amicable numbers\n- Optimize the algorithm for performance\nWe will use a simple algorithm to identify and sum all amicable numbers within the specified range. We will optimize the performance by efficiently checking for divisors and calculating the sum.\n", "requirement analysis:\nThe function needs to identify amicable numbers within a given range, sum them up accurately, and handle large ranges efficiently.\nrequirement pool:\n- Identify amicable numbers within the specified range\n- Calculate the sum of identified amicable numbers\n- Optimize performance for large number ranges\nWe will use the math library in Python to efficiently calculate the sum of amicable numbers within the specified range.\n", "requirement pool:\n- Calculate the sum of all amicable numbers within a specified range\n- Implement efficient algorithms for identifying amicable numbers\n- Optimize the function for performance and resource usage\nWe will design a simple Python function using appropriate open-source libraries to efficiently calculate the sum of amicable numbers within a specified range.\n", "requirement analysis:\nThe function should iterate through numbers from 1 to the specified number, identify amicable pairs, and sum them up accurately.\nrequirement pool:\n- Calculate the sum of amicable numbers within the given range\n- Handle edge cases like 0 and negative numbers gracefully\n- Optimize the algorithm for better performance with large input values\nWe will use the math library in Python to efficiently calculate the sum of amicable numbers within the specified range.\n"], "test": ["def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(999)==504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9999)==31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(99)==0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(997) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(999) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(998) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(995) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(998) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1001) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1000) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1004) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(997) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1003) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1004) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(997) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1003) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1001) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1001) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1002) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(996) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(997) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1003) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1004) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(994) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1003) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(998) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1001) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(1000) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(995) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(995) == 504", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10106) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10465) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9063) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10085) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10694) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9085) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10769) == 42370", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9553) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(8951) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9393) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10611) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10259) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10565) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9375) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9011) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9714) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9721) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10431) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9299) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9081) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10028) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10673) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9992) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9137) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9403) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10549) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10296) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9720) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10664) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9618) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9546) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(9050) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(10267) == 31626", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(94) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(94) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(103) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(94) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(98) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(103) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(96) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(104) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(103) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(95) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(95) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(98) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(98) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(101) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(95) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(96) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(97) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(100) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(98) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(95) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(94) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(99) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(96) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(98) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(100) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(95) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0", "def check(amicable_numbers_sum):\n\tassert amicable_numbers_sum(102) == 0"], "scores": [1.0, 0.6667, 0.9902, 1.0, 0.9902, 0.9902, 1.0, 0.9902, 0.9902, 0.9902], "pass_results": [true, false, false, true, false, false, true, false, false, false], "pass_test_cases_num": [102, 68, 101, 102, 101, 101, 102, 101, 101, 101], "completion": "from typing import List\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    def is_amicable_pair(a: int, b: int) -> bool:\n        return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\n    amicable_sum = 0\n    for num in range(1, limit):\n        pair = sum_of_divisors(num)\n        if is_amicable_pair(num, pair) and num != pair:\n            amicable_sum += num\n\n    return amicable_sum\n", "passed": true, "pass": true, "pass_num": 3, "round": 320, "mutate_method": "expand_one2two", "parent_index": 319}
