{"name": "1620_E. Replace the Numbers", "description": "You have an array of integers (initially empty).\n\nYou have to perform q queries. Each query is of one of two types: \n\n  * \"1 x\" \u2014 add the element x to the end of the array; \n  * \"2 x y\" \u2014 replace all occurrences of x in the array with y. \n\n\n\nFind the resulting array after performing all the queries.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].", "tags": ["constructive algorithms", "data structures", "dsu", "implementation"], "difficulty": 11, "id": 1620, "sample_io": [{"input": "8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n", "output": ["1 3 3 7 \n"]}, {"input": "4\n1 1\n1 2\n1 1\n2 2 2\n", "output": ["1 2 1 \n"]}, {"input": "7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n", "output": ["3 2 2 3 2 \n"]}], "test_list": [{"input": "1\n1 50\n", "output": ["50 \n"]}, {"input": "1\n1 114514\n", "output": ["114514 \n"]}, {"input": "1\n1 2002\n", "output": ["2002 \n"]}, {"input": "1\n1 500\n", "output": ["500 \n"]}, {"input": "1\n1 28\n", "output": ["28"]}, {"input": "1\n1 2887\n", "output": ["2887"]}, {"input": "1\n1 228\n", "output": ["228"]}, {"input": "1\n1 29\n", "output": ["29"]}, {"input": "1\n1 1270\n", "output": ["1270"]}, {"input": "1\n1 182\n", "output": ["182"]}, {"input": "1\n1 2279\n", "output": ["2279"]}, {"input": "1\n1 979\n", "output": ["979"]}, {"input": "1\n1 1719\n", "output": ["1719"]}, {"input": "1\n1 1163\n", "output": ["1163"]}, {"input": "1\n1 1134\n", "output": ["1134"]}, {"input": "1\n1 2216\n", "output": ["2216"]}, {"input": "1\n1 810\n", "output": ["810"]}, {"input": "1\n1 1162\n", "output": ["1162"]}, {"input": "1\n1 8\n", "output": ["8"]}, {"input": "1\n1 176923\n", "output": ["176923"]}, {"input": "1\n1 346\n", "output": ["346"]}, {"input": "8\n2 2 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n", "output": ["1 3 3 7"]}, {"input": "4\n1 1\n1 2\n1 1\n2 3 2\n", "output": ["1 2 1"]}, {"input": "7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 1\n2 1 3\n", "output": ["3 2 2 3 3"]}, {"input": "1\n1 192\n", "output": ["192"]}, {"input": "1\n1 6\n", "output": ["6"]}, {"input": "1\n1 1566\n", "output": ["1566"]}, {"input": "1\n1 1612\n", "output": ["1612"]}, {"input": "1\n1 391\n", "output": ["391"]}, {"input": "1\n1 1904\n", "output": ["1904"]}, {"input": "1\n1 12\n", "output": ["12"]}, {"input": "1\n1 455\n", "output": ["455"]}, {"input": "8\n2 2 4\n1 1\n1 4\n1 2\n2 2 6\n2 4 3\n1 2\n2 2 7\n", "output": ["1 3 6 7"]}, {"input": "4\n1 2\n1 2\n1 1\n2 3 2\n", "output": ["2 2 1"]}, {"input": "1\n1 61\n", "output": ["61"]}, {"input": "1\n1 3\n", "output": ["3"]}, {"input": "1\n1 107\n", "output": ["107"]}, {"input": "1\n1 537\n", "output": ["537"]}, {"input": "1\n1 520\n", "output": ["520"]}, {"input": "1\n1 72\n", "output": ["72"]}, {"input": "1\n1 415\n", "output": ["415"]}, {"input": "1\n1 639\n", "output": ["639"]}, {"input": "1\n1 705\n", "output": ["705"]}, {"input": "1\n1 34\n", "output": ["34"]}, {"input": "1\n1 42\n", "output": ["42"]}, {"input": "1\n1 91\n", "output": ["91"]}, {"input": "1\n1 123055\n", "output": ["123055"]}, {"input": "1\n1 408\n", "output": ["408"]}, {"input": "8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 1 7\n", "output": ["7 3 3 2"]}, {"input": "1\n1 10\n", "output": ["10"]}, {"input": "1\n1 5175\n", "output": ["5175"]}, {"input": "1\n1 37\n", "output": ["37"]}, {"input": "1\n1 2219\n", "output": ["2219"]}, {"input": "1\n1 205\n", "output": ["205"]}, {"input": "1\n1 1536\n", "output": ["1536"]}, {"input": "1\n1 1539\n", "output": ["1539"]}, {"input": "1\n1 1784\n", "output": ["1784"]}, {"input": "1\n1 147\n", "output": ["147"]}, {"input": "1\n1 825\n", "output": ["825"]}, {"input": "1\n1 3545\n", "output": ["3545"]}, {"input": "1\n1 14\n", "output": ["14"]}, {"input": "7\n1 3\n1 1\n2 1 1\n1 2\n1 1\n1 1\n2 1 3\n", "output": ["3 3 2 3 3"]}, {"input": "1\n1 212\n", "output": ["212"]}, {"input": "1\n1 416\n", "output": ["416"]}, {"input": "1\n1 1055\n", "output": ["1055"]}, {"input": "1\n1 341\n", "output": ["341"]}, {"input": "1\n1 3564\n", "output": ["3564"]}, {"input": "1\n1 5\n", "output": ["5"]}, {"input": "8\n2 2 4\n1 1\n1 4\n1 2\n2 2 6\n2 4 3\n1 2\n2 2 5\n", "output": ["1 3 6 5"]}, {"input": "1\n1 1\n", "output": ["1"]}, {"input": "1\n1 115\n", "output": ["115"]}, {"input": "1\n1 727\n", "output": ["727"]}, {"input": "1\n1 98\n", "output": ["98"]}, {"input": "1\n1 55\n", "output": ["55"]}, {"input": "1\n1 284\n", "output": ["284"]}, {"input": "1\n1 4\n", "output": ["4"]}, {"input": "1\n1 9\n", "output": ["9"]}, {"input": "1\n1 583\n", "output": ["583"]}, {"input": "1\n1 16\n", "output": ["16"]}, {"input": "1\n1 2794\n", "output": ["2794"]}, {"input": "1\n1 59\n", "output": ["59"]}, {"input": "1\n1 300\n", "output": ["300"]}, {"input": "1\n1 388\n", "output": ["388"]}, {"input": "1\n1 1084\n", "output": ["1084"]}, {"input": "1\n1 2314\n", "output": ["2314"]}, {"input": "1\n1 736\n", "output": ["736"]}, {"input": "1\n1 4527\n", "output": ["4527"]}, {"input": "1\n1 2\n", "output": ["2"]}, {"input": "1\n1 439\n", "output": ["439"]}, {"input": "1\n1 86\n", "output": ["86"]}, {"input": "1\n1 5588\n", "output": ["5588"]}, {"input": "1\n1 152\n", "output": ["152"]}, {"input": "1\n1 41\n", "output": ["41"]}, {"input": "1\n1 260\n", "output": ["260"]}, {"input": "1\n1 551\n", "output": ["551"]}, {"input": "1\n1 2765\n", "output": ["2765"]}, {"input": "1\n1 1371\n", "output": ["1371"]}, {"input": "1\n1 127\n", "output": ["127"]}, {"input": "1\n1 8623\n", "output": ["8623"]}, {"input": "1\n1 49\n", "output": ["49"]}, {"input": "1\n1 874\n", "output": ["874"]}, {"input": "1\n1 376\n", "output": ["376"]}, {"input": "1\n1 58\n", "output": ["58"]}, {"input": "1\n1 6215\n", "output": ["6215"]}, {"input": "1\n1 1464\n", "output": ["1464"]}, {"input": "1\n1 33\n", "output": ["33"]}, {"input": "1\n1 4800\n", "output": ["4800"]}, {"input": "1\n1 6121\n", "output": ["6121"]}, {"input": "1\n1 121267\n", "output": ["121267"]}, {"input": "1\n1 3093\n", "output": ["3093"]}, {"input": "1\n1 19\n", "output": ["19"]}, {"input": "1\n1 202\n", "output": ["202"]}, {"input": "1\n1 1050\n", "output": ["1050"]}, {"input": "1\n1 2535\n", "output": ["2535"]}, {"input": "1\n1 1306\n", "output": ["1306"]}, {"input": "1\n1 1571\n", "output": ["1571"]}, {"input": "1\n1 1578\n", "output": ["1578"]}, {"input": "1\n1 142\n", "output": ["142"]}, {"input": "1\n1 2055\n", "output": ["2055"]}, {"input": "1\n1 53\n", "output": ["53"]}, {"input": "1\n1 3184\n", "output": ["3184"]}, {"input": "1\n1 21\n", "output": ["21"]}, {"input": "1\n1 642\n", "output": ["642"]}, {"input": "1\n1 15\n", "output": ["15"]}, {"input": "1\n1 23\n", "output": ["23"]}, {"input": "1\n1 169\n", "output": ["169"]}, {"input": "1\n1 861\n", "output": ["861"]}, {"input": "1\n1 139\n", "output": ["139"]}, {"input": "1\n1 552\n", "output": ["552"]}, {"input": "1\n1 247\n", "output": ["247"]}, {"input": "1\n1 40\n", "output": ["40"]}, {"input": "1\n1 46\n", "output": ["46"]}, {"input": "1\n1 173\n", "output": ["173"]}, {"input": "1\n1 171905\n", "output": ["171905"]}, {"input": "1\n1 509\n", "output": ["509"]}, {"input": "1\n1 7014\n", "output": ["7014"]}, {"input": "1\n1 47\n", "output": ["47"]}, {"input": "1\n1 335\n", "output": ["335"]}, {"input": "1\n1 3035\n", "output": ["3035"]}, {"input": "1\n1 237\n", "output": ["237"]}, {"input": "1\n1 4338\n", "output": ["4338"]}, {"input": "7\n1 6\n1 1\n2 1 1\n1 2\n1 1\n1 1\n2 1 3\n", "output": ["6 3 2 3 3"]}, {"input": "1\n1 528\n", "output": ["528"]}, {"input": "1\n1 1192\n", "output": ["1192"]}, {"input": "1\n1 210\n", "output": ["210"]}, {"input": "1\n1 1402\n", "output": ["1402"]}, {"input": "1\n1 195\n", "output": ["195"]}, {"input": "1\n1 347\n", "output": ["347"]}, {"input": "1\n1 208\n", "output": ["208"]}, {"input": "1\n1 525\n", "output": ["525"]}, {"input": "1\n1 413\n", "output": ["413"]}, {"input": "1\n1 4000\n", "output": ["4000"]}, {"input": "1\n1 587\n", "output": ["587"]}, {"input": "1\n1 6510\n", "output": ["6510"]}, {"input": "1\n1 209\n", "output": ["209"]}, {"input": "1\n1 430\n", "output": ["430"]}, {"input": "1\n1 1080\n", "output": ["1080"]}, {"input": "1\n1 56\n", "output": ["56"]}, {"input": "1\n1 483\n", "output": ["483"]}, {"input": "1\n1 12268\n", "output": ["12268"]}, {"input": "1\n1 1439\n", "output": ["1439"]}, {"input": "1\n1 9124\n", "output": ["9124"]}, {"input": "1\n1 9067\n", "output": ["9067"]}, {"input": "1\n1 34301\n", "output": ["34301"]}, {"input": "1\n1 553\n", "output": ["553"]}, {"input": "1\n1 35\n", "output": ["35"]}, {"input": "1\n1 4704\n", "output": ["4704"]}, {"input": "1\n1 994\n", "output": ["994"]}, {"input": "1\n1 1751\n", "output": ["1751"]}, {"input": "1\n1 702\n", "output": ["702"]}, {"input": "1\n1 224\n", "output": ["224"]}, {"input": "4\n1 1\n1 1\n1 1\n2 6 2\n", "output": ["1 1 1"]}, {"input": "1\n1 278\n", "output": ["278"]}, {"input": "1\n1 70\n", "output": ["70"]}, {"input": "1\n1 26\n", "output": ["26"]}, {"input": "1\n1 99\n", "output": ["99"]}, {"input": "1\n1 487\n", "output": ["487"]}, {"input": "1\n1 502\n", "output": ["502"]}, {"input": "1\n1 145712\n", "output": ["145712"]}, {"input": "1\n1 4942\n", "output": ["4942"]}, {"input": "1\n1 7\n", "output": ["7"]}, {"input": "1\n1 2767\n", "output": ["2767"]}, {"input": "1\n1 340\n", "output": ["340"]}, {"input": "1\n1 8530\n", "output": ["8530"]}, {"input": "1\n1 63\n", "output": ["63"]}, {"input": "1\n1 1575\n", "output": ["1575"]}, {"input": "1\n1 2756\n", "output": ["2756"]}, {"input": "1\n1 821\n", "output": ["821"]}, {"input": "1\n1 2667\n", "output": ["2667"]}, {"input": "1\n1 25\n", "output": ["25"]}, {"input": "1\n1 11\n", "output": ["11"]}, {"input": "1\n1 2714\n", "output": ["2714"]}, {"input": "1\n1 4721\n", "output": ["4721"]}, {"input": "1\n1 369\n", "output": ["369"]}, {"input": "1\n1 4188\n", "output": ["4188"]}, {"input": "1\n1 103\n", "output": ["103"]}, {"input": "1\n1 87\n", "output": ["87"]}, {"input": "1\n1 18\n", "output": ["18"]}, {"input": "1\n1 679\n", "output": ["679"]}, {"input": "1\n1 423\n", "output": ["423"]}, {"input": "1\n1 13\n", "output": ["13"]}, {"input": "1\n1 2163\n", "output": ["2163"]}, {"input": "1\n1 494\n", "output": ["494"]}, {"input": "1\n1 223\n", "output": ["223"]}], "task_id": "codecontest/151", "prompt": "You have an array of integers (initially empty). You have to perform q queries, each of one of two types:  \n\n* \"1 x\" \u2014 add the element x to the end of the array by appending x at the end;  \n* \"2 x y\" \u2014 replace all occurrences of x in the array with y.\n\nFind the resulting array after performing all the queries. Ensure that the operations are executed in the sequence they are received to maintain consistency.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].", "repair_prompt": ["You have an array of integers (initially empty). You have to perform q queries, each of one of two types:  \n\n* \"1 x\" \u2014 add the element x to the end of the array by appending x at the end;  \n* \"2 x y\" \u2014 replace all occurrences of x in the array with y.\n\nFind the resulting array after performing all the queries. Ensure that the operations are executed in the sequence they are received to maintain consistency.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "You have an array of integers (initially empty). Add the element x to the end of the array by appending x at the end, for one of the two types of queries. Replace all occurrences of x in the array with y for the second type of query. Find the resulting array after performing all the queries. Ensure that the operations are executed in the sequence they are received to maintain consistency.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "You have an array of integers (initially empty). You have to perform q queries, each of one of two types: Find the resulting array after performing all the queries. Ensure that the operations are executed in the sequence they are received to maintain consistency.\n\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef perform_queries(q: int, queries: List[str]) -> List[int]:\n    array = []\n    for query in queries:\n        query_type = query.split()[0]\n        if query_type == '1':\n            x = int(query.split()[1])\n            array.append(x)\n        elif query_type == '2':\n            x, y = map(int, query.split()[1:])\n            array = [y if elem == x else elem for elem in array]\n    return array\n\n# Input interface\nq = int(input())\nqueries = [input() for _ in range(q)]\n\n# Output interface\nresult = perform_queries(q, queries)\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef array_manipulation(q: int, queries: List[str]) -> List[int]:\n    arr = []\n    \n    for query in queries:\n        query_type, *values = map(int, query.split())\n        \n        if query_type == 1:\n            x = values[0]\n            arr.append(x)\n        elif query_type == 2:\n            x, y = values\n            arr = [y if num == x else num for num in arr]\n    \n    return arr\n\n# Input interface\nq = int(input())\nqueries = [input() for _ in range(q)]\n\n# Output interface\nresult = array_manipulation(q, queries)\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef process_queries(q: int, queries: List[str]) -> List[int]:\n    arr = []\n    for query in queries:\n        if query.startswith('1'):\n            _, x = query.split()\n            arr.append(int(x))\n        elif query.startswith('2'):\n            _, x, y = query.split()\n            arr = [int(y) if num == int(x) else num for num in arr]\n    return arr\n\n# Input interface\nq = int(input())\nqueries = [input() for _ in range(q)]\n\n# Output interface\nresult = process_queries(q, queries)\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    arr = []\n    \n    for query in queries:\n        if query[0] == 1:\n            arr.append(query[1])\n        elif query[0] == 2:\n            arr = [query[2] if x == query[1] else x for x in arr]\n    \n    return arr\n\n# Input interface\nq = int(input())\nqueries = []\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    queries.append(tuple(query))\n\n# Output interface\nresult = process_queries(q, queries)\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    array = []\n    \n    for query in queries:\n        if query[0] == 1:\n            array.append(query[1])\n        elif query[0] == 2:\n            x, y = query[1], query[2]\n            array = [y if element == x else element for element in array]\n    \n    return array\n\n# Input interface\nq = int(input())\nqueries = []\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    queries.append(tuple(query))\n\n# Output interface\nresult = process_queries(q, queries)\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    array = []\n    \n    for query in queries:\n        if query[0] == 1:\n            array.append(query[1])\n        elif query[0] == 2:\n            array = [query[2] if x == query[1] else x for x in array]\n    \n    return array\n\n# Input interface\nq = int(input())\nqueries = []\nfor _ in range(q):\n    query = list(map(int, input().split()))\n    queries.append(tuple(query))\n\nresult = process_queries(q, queries)\n\n# Output interface\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    resulting_array = []\n    \n    for query_type, x, y in queries:\n        if query_type == 1:\n            resulting_array.append(x)\n        elif query_type == 2:\n            if y <= len(resulting_array):\n                del resulting_array[y-1]\n    \n    return resulting_array\n\nq = int(input())\nqueries = []\nfor _ in range(q):\n    query = input().split()\n    if query[0] == '1':\n        queries.append((1, int(query[1]), 0))\n    else:\n        queries.append((2, int(query[1]), int(query[2])))\n\nresult = process_queries(q, queries)\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for query in queries:\n        if query[0] == 1:\n            result.append(query[1])\n        else:\n            result[query[1] - 1] = query[2]\n    \n    return result\n\n# Input interface\nq = int(input())\nqueries = []\nfor _ in range(q):\n    query = input().split()\n    if query[0] == '1':\n        queries.append((1, int(query[1]), None))\n    else:\n        queries.append((2, int(query[1]), int(query[2]))\n\nresult = process_queries(q, queries)\n\n# Output interface\nprint(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_queries(q: int, queries: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for query in queries:\n        if query[0] == 1:\n            result.append(query[1])\n        else:\n            x, y = query[1], query[2]\n            if x <= len(result):\n                result.insert(x, y)\n    \n    return result\n\n# Input interface\nq = int(input())\nqueries = []\nfor _ in range(q):\n    query = input().split()\n    if query[0] == '1':\n        queries.append((1, int(query[1]), None))\n    else:\n        queries.append((2, int(query[1]), int(query[2])))\n\nresult = process_queries(q, queries)\n\n# Output interface\nprint(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef process_queries(q: int, queries: List[str]) -> List[int]:\n    result = []\n    replace_dict = {}\n    \n    for query in queries:\n        query_type, *args = query.split()\n        \n        if query_type == '1':\n            add_element(result, args[0])\n        elif query_type == '2':\n            replace_element(result, replace_dict, args)\n    \n    return result\n\ndef add_element(result: List[int], x: str) -> None:\n    result.append(int(x))\n\ndef replace_element(result: List[int], replace_dict: dict, args: List[str]) -> None:\n    x, y = map(int, args)\n    replace_dict[x] = y\n    for i in range(len(result)):\n        if result[i] == x:\n            result[i] = y\n\n# Input\nq = int(input())\nqueries = [input() for _ in range(q)]\n\n# Process queries\nresult = process_queries(q, queries)\n\n# Output\nprint(' '.join(map(str, result)))\n"], "plans": ["requirement pool:\n- Handle array operations efficiently\n- Maintain query order consistency\n- Optimize for large number of queries\nWe will use a simple approach by maintaining a list to store the elements and iterate through the queries to perform the required operations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic should include maintaining a list to store elements and iterating through the queries to perform the required operations efficiently. \n    Here is a basic logic outline:\n    - Initialize an empty list to store elements.\n    - Iterate through each query:\n        - If the query is of type 1, append the element x to the end of the list.\n        - If the query is of type 2, replace all occurrences of x in the list with y.\n    - Print the resulting array after performing all queries.\n\n# [edge case] \n    query 1: 1 5\n    query 2: 1 3\n    query 3: 2 5 2\n    query 4: 1 2\n    Expected output: [3, 2]\n    Explanation: \n    - After query 1: [5]\n    - After query 2: [5, 3]\n    - After query 3: [2, 3]\n    - After query 4: [2, 3, 2]\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic should handle the queries effectively.\n", "requirement pool:\n- Handle array manipulation queries efficiently\n- Maintain the order of query execution for consistent results\n- Optimize performance for a large number of queries\nWe will use a simple approach by maintaining a list to store the elements and updating it based on the queries received. We will utilize the built-in list functions in Python for efficient array manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array based on the input provided.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code involves maintaining a list to store the elements and updating it based on the queries received. \n    1. Initialize an empty list to store the elements.\n    2. Iterate through each query:\n        - If the query is of type 1, append the element x to the end of the list.\n        - If the query is of type 2, replace all occurrences of x in the list with y.\n    3. Return the resulting array after performing all the queries.\n\n# [edge case] \n    query 1: \"1 5\"\n    query 2: \"2 5 3\"\n    query 3: \"1 2\"\n    query 4: \"2 2 4\"\n    Expected output: [5, 3]\n    Explanation: \n    - Initially, the array is empty.\n    - After query 1, the array becomes [5].\n    - After query 2, all occurrences of 5 are replaced with 3, resulting in [3].\n    - After query 3, 2 is appended to the array, resulting in [3, 2].\n    - After query 4, all occurrences of 2 are replaced with 4, resulting in [3, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic covers all scenarios effectively.\n", "requirement pool:\n- Handle array operations efficiently\n- Maintain query execution order\n- Optimize for large number of queries\nWe will use the built-in list data structure in Python to efficiently handle array operations. We will maintain a list to store the elements and update it based on the queries received.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code involves iterating through each query and performing the corresponding action on the array. For queries of type 1, we append the element x to the end of the array. For queries of type 2, we replace all occurrences of x in the array with y.\n\n# [edge case] \n    query 1: \"1 5\"\n    Resulting array: [5]\n    Explanation: Adding element 5 to the empty array.\n    \n    query 2: \"2 5 3\"\n    Resulting array: [3]\n    Explanation: Replacing all occurrences of 5 with 3 in the array [5].\n\n    query 3: \"1 2\"\n    Resulting array: [3, 2]\n    Explanation: Adding element 2 to the existing array [3].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - To handle the case where there are no queries of the first type, we can add a check before printing the resulting array.\n        - To handle invalid queries or out-of-range values, we can add input validation checks before processing each query.\n        - To optimize performance for a large number of queries, we can consider using a more efficient data structure or algorithm for array operations.\n", "requirement analysis:\nThe requirements focus on efficiently handling array operations, maintaining query sequence consistency, and optimizing for large query volumes.\nrequirement pool:\n- Handle array append and replace operations efficiently\n- Ensure consistent execution order of queries\n- Optimize performance for a high number of queries\nWe will use Python's built-in list data structure to efficiently handle array operations. To maintain query sequence consistency, we will process each query in the order they are received. For optimizing performance for large query volumes, we will leverage Python's efficient list manipulation capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array of integers': Refers to a list containing integer elements that can be modified based on queries.\n    'queries': Actions to be performed on the array, either appending an element or replacing occurrences of a specific element.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    - Initialize an empty list to store the array of integers.\n    - Iterate through each query in the order they are received.\n    - For each query:\n        - If it is of type 1, append the element x to the end of the array.\n        - If it is of type 2, replace all occurrences of x with y in the array.\n    - Finally, print the resulting array after performing all the queries.\n\n# [edge case] \n    Query 1: \"1 5\"\n    Query 2: \"2 5 3\"\n    Query 3: \"1 3\"\n    Expected output: [5, 3]\n    Explanation: Initially, the array is empty. After Query 1, it becomes [5]. After Query 2, all occurrences of 5 are replaced with 3, resulting in [3]. Finally, Query 3 appends 3 to the end, resulting in the final array [5, 3].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios mentioned in the requirement.\n", "requirement pool:\n- Handle array additions and replacements efficiently\n- Maintain query sequence consistency\n- Optimize for large query volumes\nWe will use a simple approach by maintaining a list to store the elements and updating it based on the queries received.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array of integers': Refers to a list that contains integer elements.\n    'queries': Refers to actions that need to be performed on the array, which can be of two types: adding an element to the end of the array or replacing all occurrences of a specific element in the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The code logic should include:\n    - Initialize an empty list to store the elements of the array.\n    - Iterate through each query:\n        - If the query is of type 1, append the element x to the end of the array.\n        - If the query is of type 2, replace all occurrences of x with y in the array.\n    - Print the resulting array after performing all queries.\n\n# [edge case] \n    Query 1: \"1 5\"\n    Query 2: \"1 3\"\n    Query 3: \"2 5 2\"\n    Query 4: \"1 2\"\n    Expected output: [5, 3, 2]\n    Explanation: \n    - Query 1 adds 5 to the array: [5]\n    - Query 2 adds 3 to the array: [5, 3]\n    - Query 3 replaces all occurrences of 5 with 2: [2, 3]\n    - Query 4 adds 2 to the array: [2, 3]\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios and ensures consistency in executing the queries.\n", "requirement analysis:\nThe requirements involve adding elements to an array and replacing elements based on queries. The key focus is on maintaining the sequence of operations to ensure the resulting array is accurate. Efficiency in handling large volumes of queries is crucial.\nrequirement pool:\n- Handle array operations efficiently\n- Maintain query sequence consistency\n- Optimize for large query volumes\nWe will use Python's built-in list data structure to efficiently handle array operations. We will iterate through the queries and update the array accordingly to maintain consistency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array of integers': Refers to a data structure that stores a collection of integers in a specific order.\n\n    'queries': Refers to the actions that need to be performed on the array, which can be of two types - adding an element to the end of the array or replacing all occurrences of a specific element with another.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic:\n    - Initialize an empty list to store the array of integers.\n    - Iterate through each query:\n        - If the query is of type 1, append the element x to the end of the array.\n        - If the query is of type 2, replace all occurrences of x with y in the array.\n    - Return the resulting array after performing all queries.\n\n# [edge case] \n    Query 1: \"1 5\"\n    Resulting array: [5]\n    Explanation: The query adds the element 5 to the end of the array.\n\n    Query 2: \"2 5 3\"\n    Resulting array: [3]\n    Explanation: The query replaces all occurrences of 5 with 3 in the array.\n\n    Query 3: \"1 2\"\n    Query 4: \"1 3\"\n    Query 5: \"2 2 4\"\n    Resulting array: [3, 4]\n    Explanation: The queries add elements 2 and 3 to the end of the array. Then, all occurrences of 2 are replaced with 4 in the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all types of queries efficiently.\n", "requirement pool:\n- Efficiently process and execute queries\n- Ensure consistency in query execution order\n- Optimize array manipulation operations\nWe will use a simple approach by maintaining a list to store the resulting array and process each query sequentially.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests maintaining a list to store the resulting array and processing each query sequentially. \n    Here is a possible implementation logic:\n    \n    1. Initialize an empty list to store the resulting array.\n    2. Iterate through each query in the order they are received.\n    3. For each query:\n        - If it is of type 1, append x to the resulting array.\n        - If it is of type 2, remove the yth element from the resulting array.\n    4. Print the resulting array after processing all queries of type 1.\n\n# [edge case] \n    query 1: \"1 5\"\n    query 2: \"2 1 1\"\n    query 3: \"1 3\"\n    query 4: \"1 7\"\n    \n    Expected output: [5, 3, 7]\n    Explanation: \n    - Query 1 adds 5 to the array.\n    - Query 2 removes the first element (5) from the array.\n    - Query 3 adds 3 to the array.\n    - Query 4 adds 7 to the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the processing of queries effectively.\n", "requirement pool:\n- Efficiently process and execute queries\n- Ensure consistency in query execution order\n- Optimize array manipulation operations\nWe will use a simple approach by maintaining a list to store the resulting array and process each query sequentially.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests maintaining a list to store the resulting array and processing each query sequentially. \n    Here is a possible implementation logic:\n    \n    1. Initialize an empty list to store the resulting array.\n    2. Iterate through each query in the order they are received.\n    3. For each query:\n        - If it is of type 1, append the value x to the resulting array.\n        - If it is of type 2, remove the element at index x from the resulting array and insert value y at that index.\n    4. Return the resulting array after processing all queries.\n\n# [edge case] \n    query 1: \"1 5\"\n    query 2: \"2 1 10\"\n    query 3: \"1 3\"\n    \n    Expected output: [5, 10, 3]\n    Explanation: \n    - Query 1 appends 5 to the resulting array.\n    - Query 2 removes the element at index 1 (5) and inserts 10 at that index.\n    - Query 3 appends 3 to the resulting array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle the queries effectively.\n", "requirement pool:\n- Efficiently process and execute queries\n- Ensure consistency in query execution order\n- Optimize array manipulation operations\nWe will use a simple approach by maintaining a list to store the resulting array and process each query sequentially.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests maintaining a list to store the resulting array and processing each query sequentially. \n    Here is a possible implementation logic:\n    \n    1. Initialize an empty list to store the resulting array.\n    2. Iterate through each query in the order they are received.\n    3. For queries of type 1, append the value x to the resulting array.\n    4. For queries of type 2, remove the element at index x from the resulting array and insert value y at that index.\n    5. Finally, print the resulting array after processing all queries of type 1.\n\n# [edge case] \n    query 1: \"1 5\"\n    query 2: \"2 1 10\"\n    query 3: \"1 3\"\n    \n    Expected output: [5, 10, 3]\n    Explanation: \n    - Query 1 appends 5 to the array -> [5]\n    - Query 2 replaces the element at index 1 with 10 -> [10]\n    - Query 3 appends 3 to the array -> [10, 3]\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan should cover all scenarios.\n", "requirement analysis:\nThe requirements focus on efficiently handling array operations and maintaining the order of query execution. It's crucial to ensure that both types of queries are processed correctly and the final array reflects the cumulative effect of all queries.\nrequirement pool:\n- Handle array operations efficiently\n- Maintain query execution order\n- Optimize for performance\nWe will use the built-in list data structure in Python to efficiently handle array operations. To maintain the order of query execution, we will process each query sequentially as received. For performance optimization, we will utilize dictionary to keep track of the elements to be replaced in constant time.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'queries': refers to the actions that need to be performed on the array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic, we need to:\n    - Initialize an empty list to store the resulting array.\n    - Initialize an empty dictionary to keep track of elements to be replaced.\n    - Iterate through each query:\n        - If the query is of type 1, append the element x to the end of the array.\n        - If the query is of type 2, replace all occurrences of x with y in the array.\n    - Print the resulting array after processing all queries.\n\n# [edge case] \n    query 1: \"1 5\"\n    Resulting array: [5]\n    Explanation: Adding element 5 to the end of the array.\n    \n    query 2: \"2 5 3\"\n    Resulting array: [3]\n    Explanation: Replacing all occurrences of 5 with 3 in the array.\n\n    query 3: \"1 2\"\n    Resulting array: [3, 2]\n    Explanation: Adding element 2 to the end of the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios effectively.\n"], "scores": [], "pass_results": [true, true, true, false, true, true, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 151, "examples": "\nInput\n\nThe first line contains a single integer q (1 \u2264 q \u2264 5 \u22c5 10^5) \u2014 the number of queries.\n\nNext q lines contain queries (one per line). Each query is of one of two types: \n\n  * \"1 x\" (1 \u2264 x \u2264 5 \u22c5 10^5); \n  * \"2 x y\" (1 \u2264 x, y \u2264 5 \u22c5 10^5). \n\n\n\nIt's guaranteed that there is at least one query of the first type.\n\nOutput\n\nIn a single line, print k integers \u2014 the resulting array after performing all the queries, where k is the number of queries of the first type.\n\nExamples\n\nInput\n\n\n7\n1 3\n1 1\n2 1 2\n1 2\n1 1\n1 2\n2 1 3\n\n\nOutput\n\n\n3 2 2 3 2 \n\nInput\n\n\n4\n1 1\n1 2\n1 1\n2 2 2\n\n\nOutput\n\n\n1 2 1 \n\nInput\n\n\n8\n2 1 4\n1 1\n1 4\n1 2\n2 2 4\n2 4 3\n1 2\n2 2 7\n\n\nOutput\n\n\n1 3 3 7 \n\nNote\n\nIn the first example, the array changes as follows:\n\n[] \u2192 [3] \u2192 [3, 1] \u2192 [3, 2] \u2192 [3, 2, 2] \u2192 [3, 2, 2, 1] \u2192 [3, 2, 2, 1, 2] \u2192 [3, 2, 2, 3, 2].\n\nIn the second example, the array changes as follows:\n\n[] \u2192 [1] \u2192 [1, 2] \u2192 [1, 2, 1] \u2192 [1, 2, 1].\n\nIn the third example, the array changes as follows:\n\n[] \u2192 [] \u2192 [1] \u2192 [1, 4] \u2192 [1, 4, 2] \u2192 [1, 4, 4] \u2192 [1, 3, 3] \u2192 [1, 3, 3, 2] \u2192 [1, 3, 3, 7].", "mutate_method": "condense_two2one", "parent_index": 119}
