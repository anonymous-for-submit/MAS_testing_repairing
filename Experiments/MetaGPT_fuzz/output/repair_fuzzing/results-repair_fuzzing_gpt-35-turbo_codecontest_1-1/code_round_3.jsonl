{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts ensuring each song is assigned to just one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts ensuring each song is assigned to just one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik wants to make the absolute difference of durations of the concerts as small as possible, aiming to allocate all the songs into two concerts ensuring each song is assigned to just one concert. The duration of the concert is the sum of durations of all songs in that concert. \n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing one-minute songs, two-minute songs, and three-minute songs. He wants to allocate all songs into two concerts ensuring each song is assigned to just one concert, aiming to make the absolute difference of durations of the concerts as small as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_minimal_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_minimal_duration_difference(a: int, b: int, c: int) -> int:\n        total_songs = a + b + c\n        min_duration = min(a, b, c)\n        max_duration = max(a, b, c)\n        \n        # Calculate the optimal allocation\n        if min_duration == max_duration:\n            return 0\n        elif min_duration == a:\n            return min(b, c)\n        elif min_duration == b:\n            return min(a, c)\n        else:\n            return min(a, b)\n    \n    results = []\n    for a, b, c in test_cases:\n        minimal_duration_difference = calculate_minimal_duration_difference(a, b, c)\n        results.append(minimal_duration_difference)\n    \n    return results\n\n# Input interface using input() and output interface using print()\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = find_minimal_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): the number of one-minute songs\n        b (int): the number of two-minute songs\n        c (int): the number of three-minute songs\n\n    Returns:\n        int: the minimal possible difference in minutes between the concerts durations\n    \"\"\"\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    if total_duration % 2 == 0:\n        return 0\n    else:\n        return min(total_duration - 2*half_duration, 2*half_duration - total_duration)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(8):\n            concert1_duration = 0\n            concert2_duration = 0\n            for j in range(3):\n                if i & (1 << j):\n                    concert1_duration += (j + 1) * test_cases[0][j]\n                else:\n                    concert2_duration += (j + 1) * test_cases[0][j]\n            \n            min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n        \n        return min_diff\n    \n    return [calculate_duration_difference(a, b, c) for a, b, c in test_cases]\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = calculate_minimal_difference(t, test_cases)\n\n# Output interface\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_min_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    results = []\n    \n    for test_case in test_cases:\n        a, b, c = test_case\n        \n        # Calculate total duration for each concert\n        concert1_duration = a + b + c\n        concert2_duration = a + 2*b + 3*c  # Corrected calculation\n        \n        # Find the minimum possible difference between the two concerts\n        min_difference = abs(concert1_duration - concert2_duration)\n        \n        results.append(min_difference)\n    \n    return results\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(8):\n            concert1_duration = 0\n            concert2_duration = 0\n            for j in range(3):\n                if i & (1 << j):\n                    concert1_duration += (j + 1) * test_cases[0][j]\n                else:\n                    concert2_duration += (j + 1) * test_cases[0][j]\n            \n            min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n        \n        return min_diff\n    \n    result = []\n    for case in test_cases:\n        result.append(calculate_min_difference(case[0], case[1], case[2]))\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import product\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        min_diff = float('inf')\n        \n        for allocation in product([0, 1], repeat=3):\n            concert1_duration = sum(duration * count for duration, count in zip([a, b, c], allocation))\n            concert2_duration = total_duration - concert1_duration\n            diff = abs(concert1_duration - concert2_duration)\n            min_diff = min(min_diff, diff)\n        \n        return min_diff\n    \n    results = []\n    for a, b, c in test_cases:\n        results.append(calculate_duration_difference(a, b, c))\n    \n    return results\n\n# Input interface\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        a, b, c = map(int, input().split())\n        test_cases.append((a, b, c))\n\n    results = min_concert_duration_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_duration_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = abs(total_duration - 2 * max(a, b, c))\n        \n        return min_diff\n    \n    result = []\n    for a, b, c in test_cases:\n        result.append(calculate_duration_difference(a, b, c))\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    result = []\n    \n    for case in test_cases:\n        a, b, c = case\n        total_duration = a + 2*b + 3*c\n        half_duration = total_duration // 2\n        \n        min_diff = float('inf')\n        for i in range(a+1):\n            for j in range(b+1):\n                k = (total_duration - i - 2*j) // 3\n                k = min(k, c)\n                concert1_duration = i + 2*j + 3*k\n                concert2_duration = total_duration - concert1_duration\n                diff = abs(concert1_duration - concert2_duration)\n                min_diff = min(min_diff, diff)\n        \n        result.append(min_diff)\n    \n    return result\n\n# Input interface using input()\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\n# Output interface using print()\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n", "from typing import List\ndef find_minimal_difference(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n\n    Returns:\n        int: Minimal possible difference in minutes between the concerts durations.\n    \"\"\"\n    total_duration = a + 2*b + 3*c\n    half_duration = total_duration // 2\n    if total_duration % 2 == 0:\n        return 0\n    else:\n        return min(abs(half_duration - (a + 2*b)), abs(half_duration - (2*b + 3*c))\n\n# Input interface\nn = int(input())\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n    result = find_minimal_difference(a, b, c)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_concert_duration_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    def calculate_min_difference(a: int, b: int, c: int) -> int:\n        total_duration = a + 2*b + 3*c\n        min_diff = float('inf')\n        \n        for i in range(8):\n            concert1_duration = 0\n            concert2_duration = 0\n            for j in range(3):\n                if i & (1 << j):\n                    concert1_duration += (j + 1) * test_cases[0][j]\n                else:\n                    concert2_duration += (j + 1) * test_cases[0][j]\n            \n            min_diff = min(min_diff, abs(concert1_duration - concert2_duration))\n        \n        return min_diff\n    \n    result = []\n    for case in test_cases:\n        result.append(calculate_min_difference(case[0], case[1], case[2]))\n    \n    return result\n\n# Input interface\n\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n    test_cases.append((a, b, c))\n\nresult = min_concert_duration_difference(t, test_cases)\nfor res in result:\n    print(res)\n"], "plans": ["requirement pool:\n- Help Luntik find the minimal possible difference in minutes between the concerts durations.\n- Ensure each song is assigned to just one concert.\nWe will use Python and focus on finding the optimal allocation of songs into two concerts to minimize the absolute difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocation': refers to the distribution of songs into two concerts to minimize the absolute difference in durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Test Case 1: a=1, b=1, c=1\n    Expected Output: 1\n    Explanation: In this case, Luntik has one song of each duration. The optimal allocation would be to have one concert with all three songs, resulting in a difference of 0 minutes between the concert durations.\n\n    Test Case 2: a=5, b=3, c=2\n    Expected Output: 0\n    Explanation: Luntik has 5 one-minute songs, 3 two-minute songs, and 2 three-minute songs. The optimal allocation would be to have one concert with all one-minute and two-minute songs, and another concert with the three-minute songs. This results in a difference of 0 minutes between the concert durations.\n\n    Test Case 3: a=2, b=4, c=6\n    Expected Output: 0\n    Explanation: Luntik has 2 one-minute songs, 4 two-minute songs, and 6 three-minute songs. The optimal allocation would be to have one concert with all one-minute and three-minute songs, and another concert with the two-minute songs. This results in a difference of 0 minutes between the concert durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- Help Luntik find the minimal possible difference in minutes between the concerts durations.\n- Allocate all songs into two concerts ensuring each song is assigned to just one concert.\nWe will use Python and focus on designing a simple static function to solve the problem efficiently without the need for defining any classes. We will leverage basic arithmetic operations to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs allocation'\n    Explanation: The core concept is to allocate one-minute, two-minute, and three-minute songs into two concerts to minimize the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code would involve calculating the total duration of all songs, then finding the optimal way to allocate the songs into two concerts to minimize the absolute difference in durations.\n\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Initialize a variable to store the minimum difference: min_diff = abs(total_duration - 2*(a+b+c))\n    3. Return min_diff as the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1:\n    Input: a=1, b=1, c=1\n    Expected Output: 1\n    Explanation: In this case, each concert will have one song of each duration, resulting in a minimal difference of 1 minute between the concerts.\n\n    Test Case 2:\n    Input: a=2, b=3, c=4\n    Expected Output: 1\n    Explanation: One optimal allocation could be assigning one one-minute song and two three-minute songs to one concert, and two two-minute songs to the other concert, resulting in a minimal difference of 1 minute between the concerts.\n\n    Test Case 3:\n    Input: a=5, b=5, c=5\n    Expected Output: 0\n    Explanation: In this case, all songs can be evenly distributed between the two concerts, resulting in no difference in durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers the allocation of songs to minimize the difference in concert durations.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and focus on creating a simple function to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'absolute difference', 'durations', 'concerts'\n    Explanation: The core concept involves finding the smallest difference in durations between two concerts by allocating songs to each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': Indicates the need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    To implement the code logic:\n    - Calculate the total duration of all songs.\n    - Iterate through all possible combinations of songs allocated to each concert.\n    - Calculate the difference in durations for each combination.\n    - Keep track of the smallest difference found.\n    - Return the smallest difference as the minimal possible difference in minutes between the concerts durations.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 0\n    Explanation: In this case, all songs have the same duration, so the minimal possible difference is 0.\n    \n    Test Case 2: 2 2 2\n    Expected Output: 0\n    Explanation: Again, all songs have the same duration, resulting in a minimal possible difference of 0.\n    \n    Test Case 3: 1 2 3\n    Expected Output: 0\n    Explanation: The durations are such that they can be evenly distributed between two concerts, resulting in a minimal possible difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in libraries to design a simple static function that calculates the minimal possible difference in minutes between the concerts durations based on the given input.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference', 'concerts durations'\n    Explanation: The core concept is to minimize the difference in duration between two concerts by allocating songs to each concert in a way that each song is assigned to only one concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means finding the minimum difference in durations\n\n# [code logic]\n    To implement the code logic:\n    - Read the number of test cases\n    - For each test case:\n        - Read the number of one-minute, two-minute, and three-minute songs\n        - Calculate the total duration for each concert by multiplying the number of songs with their respective durations\n        - Find the minimum possible difference between the two concerts by considering all possible allocations of songs\n        - Print the minimal possible difference for each test case\n\n# [edge case] \n    1 1 1\n    Expected output: 0\n    Explanation: In this case, all songs have the same duration, so the minimal possible difference is 0.\n    \n    2 1 3\n    Expected output: 1\n    Explanation: One way to allocate songs is to assign two one-minute songs and one three-minute song to one concert, and one two-minute song to the other concert, resulting in a minimal difference of 1 minute.\n    \n    5 5 5\n    Expected output: 0\n    Explanation: Since all songs have the same duration, the minimal possible difference is 0.\n    \n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle all scenarios efficiently.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on designing a simple static function to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference', 'durations', 'concerts'\n    Explanation: The core concept involves finding the smallest difference in durations between two concerts by allocating songs to each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means finding the minimum difference\n    Explanation: We need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The logic to implement the code would involve calculating the total duration of all songs, then trying different combinations of allocating songs to two concerts to find the minimal possible difference.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 1\n    Explanation: In this case, all songs have the same duration, so the minimal possible difference is 1.\n    \n    Test Case 2: 2 2 2\n    Expected Output: 0\n    Explanation: All songs have the same duration, so the total duration for each concert will be the same, resulting in a difference of 0.\n    \n    Test Case 3: 1 2 3\n    Expected Output: 0\n    Explanation: The durations are such that one concert can have all songs (1+2+3) = 6 minutes, and the other concert can have no songs, resulting in a difference of 6.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in itertools library to generate all possible combinations of assigning songs to two concerts. Then, I will calculate the absolute difference in durations for each combination and return the minimum difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs allocation'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations between the concerts\n\n# [code logic]\n    1. Generate all possible combinations of assigning songs to two concerts using itertools.\n    2. Calculate the total duration of each concert for each combination.\n    3. Find the absolute difference in durations between the two concerts.\n    4. Return the minimal possible difference in minutes between the concerts.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           3 3 3\n    Expected Output: 0\n    Explanation: In this case, all songs have the same duration, so they can be evenly distributed between the two concerts resulting in 0 difference in durations.\n\n    Test Case 2:\n    Input: 1\n           1 2 3\n    Expected Output: 0\n    Explanation: In this case, the total duration of songs is 6 minutes. The optimal allocation would be (1, 2) and (3) resulting in 0 difference in durations.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Expected Output: 0\n    Explanation: In this case, all song durations are equal, so they can be evenly distributed between the two concerts resulting in 0 difference in durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nI will use Python and the built-in itertools library to generate all possible combinations of assigning songs to two concerts. Then, I will calculate the absolute difference in durations for each combination and return the minimum difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs allocation'\n    Explanation: The core concept is to allocate songs into two concerts in a way that minimizes the absolute difference in durations between the concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'minimal': means finding the smallest possible difference in durations\n\n# [code logic]\n    1. Generate all possible combinations of assigning songs to two concerts using itertools.\n    2. Calculate the total duration for each combination.\n    3. Find the absolute difference in durations between the two concerts.\n    4. Return the minimal possible difference.\n\n# [edge case] \n    t = 1, a = 1, b = 1, c = 1\n    Expected output: 0\n    Explanation: In this case, there is only one song of each duration, so both concerts will have the same duration, resulting in a minimal difference of 0.\n    \n    t = 2, a = 10^9, b = 10^9, c = 10^9\n    Expected output: 0\n    Explanation: In this case, there are a large number of songs for each duration, but they are balanced between the two concerts, resulting in a minimal difference of 0.\n    \n    t = 3, a = 1, b = 10^9, c = 10^9\n    Expected output: 1\n    Explanation: In this case, there is only one one-minute song and a large number of two-minute and three-minute songs. The optimal allocation would be to assign the one-minute song to one concert and the other songs to the second concert, resulting in a minimal difference of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should handle all scenarios effectively.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on finding the optimal distribution of songs to minimize the absolute difference in concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs distribution'\n    Explanation: The core concept is to distribute one-minute, two-minute, and three-minute songs into two concerts to minimize the absolute difference in concert durations.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to find the optimal distribution of songs to minimize the absolute difference in concert durations, the logic would involve calculating the total duration of songs and then distributing them in a way that minimizes the absolute difference between the two concerts.\n\n# [edge case] \n    Test Case 1:\n    Input: 1\n           1 1 1\n    Output: 0\n    Explanation: In this case, there is an equal number of one-minute, two-minute, and three-minute songs. The optimal distribution would be to have each concert with one song of each duration, resulting in a difference of 0 minutes between the concerts.\n\n    Test Case 2:\n    Input: 1\n           2 3 4\n    Output: 1\n    Explanation: In this case, there are more three-minute songs than one-minute and two-minute songs. The optimal distribution would be to have one concert with all one-minute and two-minute songs (totaling 5 minutes) and the other concert with all three-minute songs (totaling 6 minutes), resulting in a difference of 1 minute between the concerts.\n\n    Test Case 3:\n    Input: 1\n           5 5 5\n    Output: 0\n    Explanation: In this case, there is an equal number of one-minute, two-minute, and three-minute songs. The optimal distribution would be to have each concert with five songs of each duration, resulting in a difference of 0 minutes between the concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of calculating the total duration and distributing the songs accordingly should cover all scenarios.\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on creating a simple function to allocate songs into two concerts with minimal possible difference in durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'allocate songs into two concerts with minimal possible difference in durations'\n    Explanation: The core concept is to distribute the songs into two concerts in a way that minimizes the absolute difference in durations between the two concerts.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Calculate the total duration of all songs: total_duration = a + 2*b + 3*c\n    2. Initialize the minimum difference as infinity: min_diff = float('inf')\n    3. Iterate through all possible combinations of distributing songs into two concerts:\n        - Calculate the duration of concert 1 and concert 2\n        - Update the minimum difference if the new difference is smaller\n    4. Return the minimum difference\n\n# [edge case] \n    Test Case 1:\n    Input: a=1, b=1, c=1\n    Expected Output: 1\n    Explanation: In this case, we have one song of each duration. The minimal possible difference is when we allocate one song to each concert, resulting in a difference of 1 minute.\n    \n    Test Case 2:\n    Input: a=2, b=3, c=4\n    Expected Output: 0\n    Explanation: In this case, we have multiple songs of different durations. By distributing them optimally, we can achieve a minimal possible difference of 0 minutes.\n    \n    Test Case 3:\n    Input: a=5, b=0, c=0\n    Expected Output: 5\n    Explanation: When there are only one-minute songs, the difference will be equal to the total duration of one-minute songs.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n", "requirement pool:\n- The main code ...\n- The game algorithm ...\nWe will use Python and focus on designing a simple static function to calculate the minimal possible difference in minutes between the concerts durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference', 'durations', 'concerts'\n    Explanation: The core concept involves finding the smallest difference in durations between two concerts by allocating songs to each concert.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'small as possible': means finding the minimum difference\n    Explanation: We need to minimize the difference in durations between the concerts.\n\n# [code logic]\n    The logic to implement the code would involve calculating the total duration of all songs, then trying different combinations of allocating songs to two concerts to find the minimal possible difference.\n\n# [edge case] \n    Test Case 1: 1 1 1\n    Expected Output: 1\n    Explanation: In this case, all songs have the same duration, so the minimal possible difference is 1.\n    \n    Test Case 2: 2 2 2\n    Expected Output: 0\n    Explanation: All songs have the same duration, so the total duration for each concert will be the same, resulting in a difference of 0.\n    \n    Test Case 3: 1 2 3\n    Expected Output: 0\n    Explanation: The durations are such that one concert can have all songs (1+2+3) = 6 minutes, and the other concert can have no songs, resulting in a difference of 6.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (code for handling the edge case)\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 3, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 3}
