{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 566, "prompt": "Create a function that calculates the total of the digits of a non-negative integer.", "code": "def sum_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_digits(int(n / 10))", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16", "assert sum_digits(344) == 11", "assert sum_digits(350) == 8", "assert sum_digits(342) == 9", "assert sum_digits(342) == 9", "assert sum_digits(341) == 8", "assert sum_digits(347) == 14", "assert sum_digits(345) == 12", "assert sum_digits(343) == 10", "assert sum_digits(341) == 8", "assert sum_digits(345) == 12", "assert sum_digits(340) == 7", "assert sum_digits(345) == 12", "assert sum_digits(347) == 14", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(344) == 11", "assert sum_digits(340) == 7", "assert sum_digits(341) == 8", "assert sum_digits(350) == 8", "assert sum_digits(344) == 11", "assert sum_digits(343) == 10", "assert sum_digits(347) == 14", "assert sum_digits(349) == 16", "assert sum_digits(348) == 15", "assert sum_digits(347) == 14", "assert sum_digits(341) == 8", "assert sum_digits(343) == 10", "assert sum_digits(343) == 10", "assert sum_digits(346) == 13", "assert sum_digits(350) == 8", "assert sum_digits(340) == 7", "assert sum_digits(349) == 16", "assert sum_digits(15) == 6", "assert sum_digits(9) == 9", "assert sum_digits(10) == 1", "assert sum_digits(12) == 3", "assert sum_digits(11) == 2", "assert sum_digits(15) == 6", "assert sum_digits(10) == 1", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(10) == 1", "assert sum_digits(13) == 4", "assert sum_digits(7) == 7", "assert sum_digits(9) == 9", "assert sum_digits(16) == 7", "assert sum_digits(15) == 6", "assert sum_digits(16) == 7", "assert sum_digits(9) == 9", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(16) == 7", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(13) == 4", "assert sum_digits(10) == 1", "assert sum_digits(10) == 1", "assert sum_digits(9) == 9", "assert sum_digits(14) == 5", "assert sum_digits(17) == 8", "assert sum_digits(12) == 3", "assert sum_digits(16) == 7", "assert sum_digits(7) == 7", "assert sum_digits(8) == 8", "assert sum_digits(13) == 4", "assert sum_digits(100) == 1", "assert sum_digits(98) == 17", "assert sum_digits(94) == 13", "assert sum_digits(92) == 11", "assert sum_digits(101) == 2", "assert sum_digits(102) == 3", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(101) == 2", "assert sum_digits(92) == 11", "assert sum_digits(95) == 14", "assert sum_digits(102) == 3", "assert sum_digits(96) == 15", "assert sum_digits(93) == 12", "assert sum_digits(96) == 15", "assert sum_digits(98) == 17", "assert sum_digits(92) == 11", "assert sum_digits(102) == 3", "assert sum_digits(100) == 1", "assert sum_digits(95) == 14", "assert sum_digits(93) == 12", "assert sum_digits(98) == 17", "assert sum_digits(102) == 3", "assert sum_digits(92) == 11", "assert sum_digits(98) == 17", "assert sum_digits(97) == 16", "assert sum_digits(95) == 14", "assert sum_digits(101) == 2", "assert sum_digits(97) == 16", "assert sum_digits(100) == 1", "assert sum_digits(92) == 11", "assert sum_digits(97) == 16", "assert sum_digits(93) == 12"], "entry_point": "sum_digits", "repair_prompt": ["Create a function sum_digits that calculates the total of the digits of a non-negative integer.\nsum_digits(345)==12\n", "Create a function sum_digits that takes in a non-negative integer as input and calculates the sum of its digits. Return the total sum as the output of the function.\nsum_digits(345)==12\n", "Create a function sum_digits that calculates the total of the digits of a non-negative integer.\nsum_digits(345)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    '''\n    Calculate the sum of digits of a non-negative integer.\n    Args:\n        n (int): The non-negative integer\n    Returns:\n        int: The sum of digits\n    '''\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all the individual digits in a non-negative integer.\n\n    Args:\n        n: An integer to calculate the sum of its digits.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all the individual digits in a non-negative integer.\n\n    Args:\n        n: An integer to sum the digits of.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n", "from typing import List\n## main.py\n\ndef sum_digits(num: int) -> int:\n    \"\"\"\n    Calculate the sum of individual digits in a given non-negative integer.\n\n    Args:\n        num: An integer to calculate the sum of its digits.\n\n    Returns:\n        int: The sum of digits in the input number.\n    \"\"\"\n    total_sum = 0\n    while num > 0:\n        total_sum += num % 10\n        num //= 10\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits in a non-negative integer.\n\n    Args:\n        n: A non-negative integer\n\n    Returns:\n        The sum of digits of the input integer 'n'\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all the individual digits in a non-negative integer.\n\n    Args:\n        n: An integer to calculate the sum of its digits.\n\n    Returns:\n        The sum of digits in the input integer.\n\n    Examples:\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(999)\n        27\n        >>> sum_digits(123456789)\n        45\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of all the individual digits in a non-negative integer.\n\n    Args:\n        n: An integer to sum the digits of.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Args:\n        n: A non-negative integer\n\n    Returns:\n        int: The sum of digits of the input integer\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Example usage:\nresult = sum_digits(345)\nprint(result)  # Output: 12\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Args:\n        n: A non-negative integer.\n\n    Returns:\n        The sum of the digits of the input integer.\n    \"\"\"\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n", "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Args:\n        n: A non-negative integer.\n\n    Returns:\n        The sum of digits of the input integer.\n\n    Examples:\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(999)\n        27\n        >>> sum_digits(123456789)\n        45\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"], "plans": ["requirement analysis:\nThe function should iterate through each digit of the input number, extract it, and sum them up to get the total sum.\nrequirement pool:\n- Implement the core logic to extract and sum digits\n- Handle edge cases like 0 and single-digit numbers\n- Provide clear function documentation and examples\nWe will use a simple approach to iterate through each digit of the input number and sum them up.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through each digit of the input number, extract the digit, and add it to a running total sum.\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: For an input of 0, the sum of digits is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe main goal is to create a function that accurately calculates the sum of digits for a given non-negative integer. It should handle different input scenarios and provide the correct output.\nrequirement pool:\n- Implement the sum_digits function to calculate the sum of digits\n- Ensure the function works for non-negative integers only\n- Handle edge cases like single-digit numbers gracefully\nWe will use a simple approach to iterate through the digits of the input integer and sum them up.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the digits of the input integer, extract each digit, and sum them up to get the total.\n\n```python\ndef sum_digits(num: int) -> int:\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input integer is 0, the sum of its digits is also 0.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits from 1 to 9 is 45.\n    sum_digits(1001) = 2\n    Explanation: The sum of digits in 1001 is 1+0+0+1 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for calculating the sum of digits in a non-negative integer.\n", "requirement analysis:\nThe function should iterate through the digits of the input integer, extract each digit, and sum them up to return the total.\nrequirement pool:\n- Handle non-negative integers only\n- Ensure the function works for large integers as well\n- Provide error handling for invalid inputs\nWe will use a simple approach to iterate through the digits of the input integer and sum them up.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the digits of the input integer, extract each digit, and sum them up to get the total.\n\n```python\ndef sum_digits(num: int) -> int:\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: For the input 0, there are no digits to sum, so the expected output is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9=27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9=45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for summing the digits of a non-negative integer.\n", "requirement pool:\n- Implement the sum_digits function to accurately calculate the sum of digits\n- Handle non-negative integers as input and return the correct sum\n- Optimize the function for better performance\nWe will use a simple approach to iterate through the digits of the input number and sum them up.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of individual digits in a given non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the digits of the input number, extract each digit, and sum them up to get the total sum.\n\n```python\ndef sum_digits(num: int) -> int:\n    total_sum = 0\n    while num > 0:\n        total_sum += num % 10\n        num //= 10\n    return total_sum\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: For the input 0, there are no digits to sum, so the expected output is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9=27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9=45.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Implement the sum_digits function to accurately calculate the sum of digits\n- Handle edge cases such as single-digit numbers or zero input\n- Optimize the function for efficiency and performance\nWe will use a simple approach to create a Python function that efficiently calculates the sum of digits in a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: For the input 0, the sum of its digits is 0.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits from 1 to 9 is 45.\n    sum_digits(999) = 27\n    Explanation: The sum of digits from 9 to 9 is 27.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to calculate the sum of digits covers all scenarios.\n", "requirement pool:\n- Create a function that takes a non-negative integer as input\n- Calculate the sum of digits for the input integer\n- Ensure the function returns the correct sum of digits\nWe will use a simple approach to iterate through the digits of the input integer and sum them up.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the digits of the input integer and sum them up.\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input integer is 0, the sum of its digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement analysis:\nThe function should iterate through the digits of the input integer, extract each digit, and sum them up to return the total.\nrequirement pool:\n- Handle non-negative integers only\n- Ensure the function works for large integers as well\n- Optimize the algorithm for efficiency\nWe will use a simple approach to iterate through the digits of the input integer and sum them up.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the digits of the input integer, extract each digit, and sum them up to get the total.\n\n```python\ndef sum_digits(num: int) -> int:\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: For the input 0, there are no digits to sum, so the expected output is 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9=27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9=45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for summing the digits of a non-negative integer.\n", "requirement analysis:\nThe function should iterate through the digits of the input integer, extract each digit, and sum them up to return the total.\nrequirement pool:\n- Implement a function that correctly extracts and sums the digits of a non-negative integer\n- Ensure the function handles edge cases like single-digit integers\n- Optimize the function for performance to handle large non-negative integers efficiently\nWe will design a simple Python function using basic arithmetic operations to calculate the sum of digits of a non-negative integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic, we can follow these steps:\n    - Convert the integer to a string to easily access individual digits\n    - Iterate through each character in the string\n    - Convert each character back to an integer and sum them up\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: When the input is 0, the sum of digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above covers all scenarios for calculating the sum of digits in a non-negative integer.\n", "requirement analysis:\nThe function should iterate through the digits of the input integer, extract each digit, and sum them up to return the total sum.\nrequirement pool:\n- Implement the core logic to extract digits and calculate the sum\n- Handle edge cases like single-digit numbers or zero\n- Ensure the function can handle large non-negative integers efficiently\nWe will use a simple approach to extract digits from the input integer and sum them up using basic arithmetic operations in Python.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through each digit of the input integer by converting it to a string, then summing up all the digits.\n\n```python\ndef sum_digits(num: int) -> int:\n    total = 0\n    for digit in str(num):\n        total += int(digit)\n    return total\n```\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: Since the input integer is 0, the sum of its digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The sum of digits in 999 is 9+9+9 = 27.\n    sum_digits(123456789) = 45\n    Explanation: The sum of digits in 123456789 is 1+2+3+4+5+6+7+8+9 = 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios for calculating the sum of digits in a non-negative integer.\n", "requirement analysis:\nThe function should iterate through the digits of the input number, extract each digit, and sum them up to return the total.\nrequirement pool:\n- Implement the function to extract digits and calculate the sum\n- Handle edge cases like 0 and single-digit numbers\nWe will use a simple approach to extract digits from the input number and sum them up without using any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'total of the digits'\n    Explanation: The core concept is to calculate the sum of all the individual digits in a non-negative integer.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    sum_digits(0) = 0\n    Explanation: The input number is 0, so the sum of its digits is also 0.\n    sum_digits(999) = 27\n    Explanation: The input number is 999, and the sum of its digits (9+9+9) equals 27.\n    sum_digits(123456789) = 45\n    Explanation: The input number is 123456789, and the sum of its digits (1+2+3+4+5+6+7+8+9) equals 45.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract digits and sum them up should cover all scenarios.\n"], "test": ["def check(sum_digits):\n\tassert sum_digits(345)==12", "def check(sum_digits):\n\tassert sum_digits(12)==3", "def check(sum_digits):\n\tassert sum_digits(97)==16", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(342) == 9", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(345) == 12", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(344) == 11", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(348) == 15", "def check(sum_digits):\n\tassert sum_digits(347) == 14", "def check(sum_digits):\n\tassert sum_digits(341) == 8", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(343) == 10", "def check(sum_digits):\n\tassert sum_digits(346) == 13", "def check(sum_digits):\n\tassert sum_digits(350) == 8", "def check(sum_digits):\n\tassert sum_digits(340) == 7", "def check(sum_digits):\n\tassert sum_digits(349) == 16", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(11) == 2", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(15) == 6", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(10) == 1", "def check(sum_digits):\n\tassert sum_digits(9) == 9", "def check(sum_digits):\n\tassert sum_digits(14) == 5", "def check(sum_digits):\n\tassert sum_digits(17) == 8", "def check(sum_digits):\n\tassert sum_digits(12) == 3", "def check(sum_digits):\n\tassert sum_digits(16) == 7", "def check(sum_digits):\n\tassert sum_digits(7) == 7", "def check(sum_digits):\n\tassert sum_digits(8) == 8", "def check(sum_digits):\n\tassert sum_digits(13) == 4", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(94) == 13", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(96) == 15", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(93) == 12", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(102) == 3", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(98) == 17", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(95) == 14", "def check(sum_digits):\n\tassert sum_digits(101) == 2", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(100) == 1", "def check(sum_digits):\n\tassert sum_digits(92) == 11", "def check(sum_digits):\n\tassert sum_digits(97) == 16", "def check(sum_digits):\n\tassert sum_digits(93) == 12"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a non-negative integer.\n\n    Args:\n        n: A non-negative integer.\n\n    Returns:\n        The sum of digits of the input integer.\n\n    Examples:\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(999)\n        27\n        >>> sum_digits(123456789)\n        45\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n", "passed": true, "pass": true, "pass_num": 10, "round": 262, "mutate_method": "rephrase_one", "parent_index": 262}
