{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 805, "prompt": "Write a function that returns the list in a list of lists whose sum of elements is the highest. Consider edge cases such as lists with the same sum, where you might return the first occurrences.", "code": "def max_sum_list(lists):\n return max(lists, key=sum)", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "assert max_sum_list([[2,3,1]])==[2,3,1] ", "assert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "assert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "assert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "assert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "assert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "assert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "assert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "assert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "assert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "assert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "assert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "assert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "assert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "assert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "assert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "assert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "assert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "assert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "assert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "assert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "assert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "assert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "assert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "assert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "assert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "assert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "assert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "assert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "assert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "assert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "assert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "assert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "assert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "assert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "assert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "assert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "assert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "assert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "assert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "assert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "assert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "assert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "assert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "assert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "assert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "assert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "assert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "assert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "assert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "assert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "assert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "assert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "assert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "assert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "assert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "assert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "assert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "assert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "assert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "assert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "assert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "assert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "assert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "assert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "assert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "assert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "assert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "assert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "assert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "assert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "assert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "assert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "assert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "assert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "assert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "assert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "assert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "assert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "assert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "assert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "assert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "assert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "assert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "assert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "assert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "assert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "assert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "assert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "assert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "assert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "assert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "assert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "assert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "assert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "assert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "assert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "assert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "entry_point": "max_sum_list", "repair_prompt": ["Write a function max_sum_list that returns the list in a list of lists whose sum of elements is the highest. Consider edge cases such as lists with the same sum, where you might return the first occurrences.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", "Write a function max_sum_list that specifically focuses on finding the list within a list of lists that has the highest sum of elements. In situations where multiple lists have the same sum, prioritize returning the first occurrence.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n", "Write a function max_sum_list that returns the list in a list of lists whose sum of elements is the highest, considering edge cases such as lists with the same sum where you might return the first occurrences.\nmax_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find and return the list with the highest sum of elements\n    Args:\n        lists: List of lists containing integers\n    \n    Returns:\n        List with the highest sum of elements\n    \"\"\"\n    max_sum = 0\n    max_sum_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    return max_sum_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find the list with the highest sum\n    Input: a list of lists\n    Output: the list with the highest sum\n    Example: max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) -> [10, 11, 12]\n    \"\"\"\n\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    return max_sum_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    # Function to find the list with the highest sum\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n            \n    return max_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    # Function to find the list within a list of lists that has the highest sum of elements\n    highest_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > highest_sum:\n            highest_sum = current_sum\n            max_sum_list = lst\n            \n    return max_sum_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    # Function to find the list within a list of lists that has the highest sum of elements\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find the list within a list of lists that has the highest sum of elements\n    \n    Args:\n    lists: A list of lists where each inner list contains integers\n    \n    Returns:\n    List[int]: The list with the highest sum of elements\n    \"\"\"\n    highest_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > highest_sum:\n            highest_sum = current_sum\n            max_sum_list = lst\n            \n    return max_sum_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find and return the list with the highest sum of elements\n    \n    Args:\n    lists: A list of lists where each inner list contains integers\n    \n    Returns:\n    A list with the highest sum of elements\n    \"\"\"\n    highest_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > highest_sum:\n            highest_sum = current_sum\n            max_list = lst\n            \n    return max_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find and return the list with the highest sum\n    \n    Args:\n    lists: A list of lists containing integers\n    \n    Returns:\n    A list with the highest sum of elements\n    \"\"\"\n    \n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    return max_sum_list\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    # Function to find and return the list with the highest sum of elements\n    max_sum = float('-inf')\n    max_sum_index = 0\n    \n    for i, lst in enumerate(lists):\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n    \n    return lists[max_sum_index]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find and return the list with the highest sum\n    \n    Args:\n    lists: A list of lists containing integers\n    \n    Returns:\n    A list with the highest sum of elements\n    \"\"\"\n    \n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    return max_sum_list\n"], "plans": ["requirement analysis:\nThe function should iterate through the list of lists, calculate the sum of each list, compare the sums, and return the list with the highest sum. It should handle cases where multiple lists have the same highest sum.\nrequirement pool:\n- Calculate the sum of elements in each list\n- Compare the sums and keep track of the list with the highest sum\n- Handle cases where multiple lists have the same highest sum\nWe will design a simple Python function using basic list operations to iterate through the list of lists, calculate the sum of each list, compare the sums, and return the list with the highest sum.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements': The total sum of all elements in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': Indicates the list with the maximum sum of elements.\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum and set it to 0.\n    2. Initialize a variable to store the list with the maximum sum and set it to an empty list.\n    3. Iterate through each list in the list of lists.\n    4. Calculate the sum of elements in each list.\n    5. Compare the sum with the current maximum sum.\n    6. If the sum is greater than the current maximum sum, update the maximum sum and the corresponding list.\n    7. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sums of the lists are [6, 15, 33, 24] respectively. The list [10, 11, 12] has the highest sum of 33.\n\n    max_sum_list([[1,1,1], [2,2,2], [3,3,3]]) == [1, 1, 1]\n    Explanation: All lists have the same sum of 3. In this case, we return the first occurrence which is [1, 1, 1].\n\n    max_sum_list([]) == []\n    Explanation: When the input list is empty, there are no lists to compare and the function should return an empty list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where multiple lists have the same sum or when the input list is empty.\n", "requirement pool:\n- Implement max_sum_list function to find the list with the highest sum\n- Handle edge cases where multiple lists have the same highest sum\n- Ensure the function is optimized for performance\nWe will use Python and the built-in functions to efficiently find the list with the highest sum. We will handle edge cases by comparing sums and returning the first occurrence in case of equal sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements': Refers to the total sum of all elements in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': Indicates the list with the maximum sum of elements.\n\n# [code logic]\n    To implement the code logic:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Initialize a variable to store the list with the maximum sum.\n    3. Iterate through each list in the list of lists.\n    4. Calculate the sum of elements in each list.\n    5. Compare the sum with the maximum sum found so far.\n    6. If the current sum is greater than the maximum sum, update the maximum sum and the corresponding list.\n    7. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sum of elements in each list is [6, 15, 33, 24]. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided will handle cases where lists have the same sum by returning the first occurrence encountered.\n", "requirement pool:\n- Implement max_sum_list function to find the list with the highest sum\n- Handle edge cases where lists have equal sums\n- Ensure the function is well-documented for easy usage\nWe will use Python and the built-in functions to efficiently find the list with the highest sum. No external libraries will be used to keep the architecture simple.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements': Refers to the total sum of all elements in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': Indicates the list with the maximum sum of elements.\n\n# [code logic]\n    To implement the code logic:\n    1. Initialize a variable to keep track of the maximum sum found so far.\n    2. Iterate through each list in the list of lists.\n    3. Calculate the sum of elements in each list.\n    4. Compare the sum with the maximum sum found so far and update if a higher sum is found.\n    5. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sum of elements in each list is [6, 15, 33, 24]. The list [10, 11, 12] has the highest sum of 33.\n\n    max_sum_list([[1,1,1], [2,2,2], [3,3,3]]) == [1, 1, 1]\n    Explanation: All lists have the same sum of 3. In this case, we return the first occurrence which is [1, 1, 1].\n\n    max_sum_list([[5,5], [3,3], [4,4]]) == [5, 5]\n    Explanation: The sums are [10, 6, 8]. The list [5, 5] has the highest sum of 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where lists have the same sum or where we need to return the first occurrence.\n", "We will use a simple approach to iterate through the list of lists, calculate the sum of each list, and keep track of the list with the highest sum while prioritizing the first occurrence in case of ties. We will use built-in Python functions to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'highest sum of elements'\n    Explanation: The core concept is to find the list within a list of lists that has the highest sum of elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': means that we need to find the list with the maximum sum of elements\n\n# [code logic]\n    To implement the code logic:\n    1. Initialize variables to keep track of the maximum sum and the corresponding list.\n    2. Iterate through the list of lists.\n    3. Calculate the sum of elements in each list.\n    4. Compare the sum with the current maximum sum and update if necessary.\n    5. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sums of the lists are [6, 15, 33, 24] respectively. The list [10, 11, 12] has the highest sum of 33.\n\n    max_sum_list([[1,1,1], [2,2,2], [3,3,3], [4,4,4]]) == [3, 3, 3]\n    Explanation: All lists have the same sum of 3. The function should prioritize returning the first occurrence.\n\n    max_sum_list([[1], [2], [3], [4]]) == [1]\n    Explanation: Each list has only one element. The function should return the first occurrence.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where multiple lists have the same sum and prioritizes returning the first occurrence.\n", "We will use a simple approach to iterate through each list, calculate the sum of elements, and keep track of the list with the highest sum encountered so far. We will prioritize the first occurrence in case of ties.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'highest sum of elements'\n    Explanation: Refers to finding the list within a list of lists that has the highest sum of elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': Indicates the need to find the list with the highest sum of elements.\n\n# [code logic]\n    To implement the code logic:\n    - Initialize variables to keep track of the current maximum sum and the corresponding list.\n    - Iterate through each list in the list of lists.\n    - Calculate the sum of elements in each list.\n    - Compare the sum with the current maximum sum and update if a higher sum is found.\n    - Keep track of the first occurrence in case of ties.\n    - Return the list with the highest sum encountered.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sum of elements in each list is [6, 15, 33, 24] respectively. The list [10, 11, 12] has the highest sum of 33.\n\n    max_sum_list([[1,1,1], [2,2,2], [3,3,3], [4,4,4]]) == [4, 4, 4]\n    Explanation: All lists have the same sum of 3, but the function should prioritize returning the first occurrence.\n\n    max_sum_list([[1], [2], [3], [4]]) == [4]\n    Explanation: Each list has only one element, and the list [4] has the highest sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios where multiple lists have the same sum and prioritizes returning the first occurrence.\n", "We will use a simple approach to iterate through the list of lists, calculate the sum of each list, and keep track of the list with the highest sum while handling ties appropriately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'highest sum of elements'\n    Explanation: The core concept is to find the list within a list of lists that has the highest sum of elements.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': means that we need to find the list with the maximum sum of elements\n\n# [code logic]\n    1. Initialize variables to keep track of the maximum sum and the corresponding list.\n    2. Iterate through the list of lists.\n    3. Calculate the sum of each list.\n    4. Compare the sum with the current maximum sum and update if a higher sum is found.\n    5. Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sums of the lists are [6, 15, 33, 24] respectively. The list [10, 11, 12] has the highest sum of 33.\n\n    max_sum_list([[1,1,1], [2,2,2], [3,3,3], [4,4,4]]) == [4, 4, 4]\n    Explanation: All lists have the same sum of 3, but the function should prioritize returning the first occurrence which is [4, 4, 4].\n\n    max_sum_list([[1], [2], [3], [4]]) == [4]\n    Explanation: Each list has a sum equal to its only element. The function should return the first occurrence in case of ties.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers handling ties and returning the first occurrence correctly.\n", "requirement pool:\n- Implement max_sum_list function to accurately identify the list with the highest sum\n- Handle edge cases where lists have equal sums by returning the first occurrence\n- Ensure the function is well-documented for easy integration\nWe will design a simple Python function using basic list operations to efficiently identify and return the list with the highest sum of elements, while handling edge cases of equal sums by returning the first occurrence. We will not define any class and keep the architecture straightforward.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements'\n    Explanation: The core concept is to calculate the sum of elements in each list and find the list with the highest sum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': means finding the list with the highest sum of elements\n\n# [code logic]\n    To implement the code logic:\n    - Initialize a variable to keep track of the maximum sum found so far and set it to 0.\n    - Initialize a variable to store the index of the list with the highest sum.\n    - Iterate through each list in the input list of lists.\n    - Calculate the sum of elements in each list.\n    - Compare the sum with the maximum sum found so far and update the maximum sum and index accordingly.\n    - Return the list at the index with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sums of elements for each list are [6, 15, 33, 24] respectively. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided already handles cases where multiple lists have the same highest sum by returning the first occurrence.\n", "requirement pool:\n- Implement max_sum_list function to find and return the list with the highest sum\n- Handle edge cases where multiple lists have the same highest sum\n- Ensure the function is well-tested and efficient\nWe will use Python and the built-in functions to efficiently find and return the list with the highest sum.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements': Refers to the total sum of all elements in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': Indicates the list with the maximum sum of elements.\n\n# [code logic]\n    To implement the code logic:\n    - Initialize a variable to keep track of the maximum sum found so far.\n    - Iterate through each list in the list of lists.\n    - Calculate the sum of elements in each list.\n    - Compare the sum with the maximum sum found so far and update if a higher sum is found.\n    - Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sum of elements in each list is [6, 15, 33, 24]. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers scenarios where lists have the same sum, returning the first occurrence.\n", "requirement pool:\n- Implement max_sum_list function to find and return the list with the highest sum of elements\n- Handle edge cases where multiple lists have the same sum by returning the first occurrence\n- Optimize the function for performance and scalability\nWe will use Python and the built-in functions to efficiently find and return the list with the highest sum of elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements'\n    Explanation: The core concept is to calculate the sum of elements in each list and find the list with the highest sum.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': means finding the list with the maximum sum of elements\n\n# [code logic]\n    1. Initialize a variable to keep track of the maximum sum and set it to negative infinity.\n    2. Initialize a variable to store the index of the list with the maximum sum.\n    3. Iterate through each list in the input list of lists.\n    4. Calculate the sum of elements in each list.\n    5. Compare the sum with the current maximum sum, update the maximum sum and index if a higher sum is found.\n    6. Return the list at the index with the maximum sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sums of elements for each list are [6, 15, 33, 24]. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers scenarios where lists have the same sum, returning the first occurrence.\n", "requirement pool:\n- Implement max_sum_list function to find the list with the highest sum\n- Handle edge cases where lists have the same sum by returning the first occurrence\nWe will use the built-in functions in Python to efficiently find and return the list with the highest sum. We will handle edge cases by comparing sums and returning the first occurrence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of elements': The total sum of all elements in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'highest': Indicates the list with the maximum sum of elements.\n\n# [code logic]\n    To implement the code:\n    - Initialize a variable to store the maximum sum found so far.\n    - Iterate through each list in the list of lists.\n    - Calculate the sum of elements in each list.\n    - Compare the sum with the maximum sum found so far and update if a higher sum is found.\n    - Return the list with the highest sum.\n\n# [edge case] \n    max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    Explanation: The sum of elements in each list is [6, 15, 33, 24]. The list [10, 11, 12] has the highest sum of 33.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers scenarios where lists have the same sum, returning the first occurrence.\n"], "test": ["def check(max_sum_list):\n\tassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ", "def check(max_sum_list):\n\tassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ", "def check(max_sum_list):\n\tassert max_sum_list([[2,3,1]])==[2,3,1] ", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 1], [2, 2, 6], [5, 16, 17], [9, 8, 14]]) == [5, 16, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 4], [9, 6, 1], [6, 15, 15], [2, 4, 11]]) == [6, 15, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 8], [9, 7, 8], [7, 9, 9], [3, 4, 10]]) == [7, 9, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 7], [2, 6, 5], [14, 14, 14], [6, 13, 10]]) == [14, 14, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 6], [4, 1, 6], [15, 12, 16], [3, 10, 14]]) == [15, 12, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 7], [7, 1, 10], [13, 15, 14], [2, 12, 8]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5], [5, 3, 11], [13, 13, 17], [4, 9, 13]]) == [13, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 5], [9, 4, 6], [15, 6, 15], [8, 3, 9]]) == [15, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 3], [9, 2, 5], [5, 13, 13], [7, 3, 6]]) == [5, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 3, 6], [8, 3, 4], [7, 16, 15], [9, 11, 10]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 6, 2], [8, 5, 10], [12, 13, 10], [6, 10, 4]]) == [12, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [2, 1, 11], [8, 7, 9], [10, 11, 12]]) == [10, 11, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 4], [3, 6, 9], [6, 7, 11], [7, 7, 4]]) == [6, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 7, 6], [5, 7, 4], [10, 6, 10], [10, 4, 8]]) == [10, 6, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 7], [9, 10, 5], [11, 13, 17], [10, 5, 6]]) == [11, 13, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 8], [8, 7, 8], [13, 11, 11], [2, 3, 10]]) == [13, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 2], [8, 10, 11], [5, 9, 9], [7, 12, 11]]) == [7, 12, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 3], [2, 8, 3], [13, 14, 7], [8, 11, 14]]) == [13, 14, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 3], [8, 5, 6], [14, 10, 14], [8, 8, 5]]) == [14, 10, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 8], [2, 4, 2], [13, 13, 16], [7, 7, 7]]) == [13, 13, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 1, 7], [3, 2, 1], [10, 11, 13], [7, 6, 13]]) == [10, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 8], [2, 9, 8], [13, 7, 11], [10, 11, 10]]) == [13, 7, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 8], [3, 2, 8], [6, 16, 12], [5, 6, 8]]) == [6, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 2, 3], [7, 8, 6], [14, 7, 8], [5, 8, 8]]) == [14, 7, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 6], [6, 6, 3], [8, 11, 16], [4, 8, 5]]) == [8, 11, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 4], [1, 6, 9], [9, 6, 17], [3, 6, 10]]) == [9, 6, 17]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 5, 1], [8, 1, 6], [10, 7, 14], [10, 6, 4]]) == [10, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [6, 1, 6], [7, 9, 16], [10, 4, 14]]) == [7, 9, 16]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 2, 7], [2, 9, 9], [13, 8, 12], [2, 13, 4]]) == [13, 8, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2], [2, 3, 11], [11, 7, 14], [8, 10, 9]]) == [11, 7, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 1], [5, 5, 2], [13, 15, 14], [10, 10, 13]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 2], [4, 9, 1], [8, 12, 9], [7, 6, 4]]) == [8, 12, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 6, 7], [2, 4, 4], [12, 10, 8], [3, 8, 6]]) == [12, 10, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 3, 6], [4, 2, 9], [13, 15, 14]]) == [13, 15, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [8, 9, 1], [7, 9, 11]]) == [7, 9, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 3, 3], [6, 3, 5], [16, 9, 7]]) == [16, 9, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 6], [9, 4, 8], [10, 11, 6]]) == [10, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4], [5, 8, 2], [9, 7, 12]]) == [9, 7, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1], [10, 10, 9], [14, 14, 12]]) == [14, 14, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 2, 1], [8, 10, 7], [16, 11, 11]]) == [16, 11, 11]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 5, 3], [9, 8, 2], [11, 13, 13]]) == [11, 13, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 1], [11, 4, 6], [13, 11, 13]]) == [13, 11, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 4, 3], [10, 2, 4], [9, 8, 10]]) == [9, 8, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [1, 7, 8], [7, 13, 7]]) == [7, 13, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 6], [8, 2, 1], [14, 8, 15]]) == [14, 8, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 5], [11, 5, 3], [13, 13, 10]]) == [13, 13, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2], [7, 10, 1], [12, 11, 6]]) == [12, 11, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 4, 6], [1, 9, 2], [7, 16, 15]]) == [7, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 3, 6], [6, 2, 4], [8, 10, 15]]) == [8, 10, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 4], [1, 2, 2], [17, 8, 9]]) == [17, 8, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 7, 1], [4, 4, 9], [10, 6, 15]]) == [10, 6, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6], [2, 8, 1], [16, 6, 13]]) == [16, 6, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 6], [3, 3, 1], [17, 10, 10]]) == [17, 10, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[8, 6, 3], [2, 1, 1], [9, 8, 13]]) == [9, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 4, 5], [7, 4, 3], [8, 8, 13]]) == [8, 8, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 6, 4], [5, 4, 7], [8, 16, 12]]) == [8, 16, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 3], [5, 1, 4], [15, 11, 8]]) == [15, 11, 8]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 2], [10, 7, 7], [7, 16, 10]]) == [7, 16, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 7, 5], [2, 10, 1], [15, 9, 10]]) == [15, 9, 10]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 6, 1], [10, 1, 7], [11, 15, 5]]) == [11, 15, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 5], [2, 8, 2], [12, 10, 12]]) == [12, 10, 12]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 1, 2], [6, 10, 7], [11, 16, 13]]) == [11, 16, 13]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 3, 1], [9, 10, 4], [11, 13, 14]]) == [11, 13, 14]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3], [7, 6, 4], [16, 8, 7]]) == [16, 8, 7]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 3], [7, 6, 4], [11, 16, 15]]) == [11, 16, 15]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 2, 5], [11, 5, 2], [8, 11, 9]]) == [8, 11, 9]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 8, 6]]) == [2, 8, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 7, 2]]) == [7, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 2]]) == [6, 5, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 1, 4]]) == [3, 1, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 2]]) == [6, 4, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 3, 1]]) == [1, 3, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 7, 2]]) == [2, 7, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[7, 1, 6]]) == [7, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 5]]) == [2, 3, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 2, 1]]) == [1, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 4]]) == [3, 7, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 2]]) == [2, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 5]]) == [5, 5, 5]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 6, 2]]) == [1, 6, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 6]]) == [4, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 4, 1]]) == [3, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 3]]) == [1, 4, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 3, 2]]) == [6, 3, 2]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 2, 1]]) == [4, 2, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 7, 6]]) == [4, 7, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 4, 4]]) == [4, 4, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[3, 7, 1]]) == [3, 7, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 5, 4]]) == [4, 5, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 6, 4]]) == [2, 6, 4]", "def check(max_sum_list):\n\tassert max_sum_list([[2, 3, 6]]) == [2, 3, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 4, 6]]) == [1, 4, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 5, 6]]) == [6, 5, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[4, 8, 3]]) == [4, 8, 3]", "def check(max_sum_list):\n\tassert max_sum_list([[6, 4, 1]]) == [6, 4, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 1, 6]]) == [5, 1, 6]", "def check(max_sum_list):\n\tassert max_sum_list([[5, 5, 1]]) == [5, 5, 1]", "def check(max_sum_list):\n\tassert max_sum_list([[1, 1, 1]]) == [1, 1, 1]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to find and return the list with the highest sum\n    \n    Args:\n    lists: A list of lists containing integers\n    \n    Returns:\n    A list with the highest sum of elements\n    \"\"\"\n    \n    max_sum = float('-inf')\n    max_sum_list = []\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    \n    return max_sum_list\n", "passed": true, "pass": true, "pass_num": 10, "round": 252, "mutate_method": "add_1_sentence_at_end", "parent_index": 252}
