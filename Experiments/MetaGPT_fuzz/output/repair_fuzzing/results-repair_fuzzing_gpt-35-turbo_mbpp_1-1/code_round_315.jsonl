{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 606, "prompt": "Description: Create a function that transforms degrees into radians. Ensure the function accurately converts angles for a wide range of degree values.", "code": "import math\ndef radian_degree(degree):\n radian = degree*(math.pi/180)\n return radian", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(88) == 1.53588974175501", "assert radian_degree(92) == 1.6057029118347832", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(94) == 1.6406094968746698", "assert radian_degree(89) == 1.5533430342749532", "assert radian_degree(86) == 1.5009831567151235", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(90) == 1.5707963267948966", "assert radian_degree(95) == 1.6580627893946132", "assert radian_degree(87) == 1.5184364492350666", "assert radian_degree(91) == 1.5882496193148399", "assert radian_degree(85) == 1.4835298641951802", "assert radian_degree(93) == 1.6231562043547265", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(62) == 1.0821041362364843", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(56) == 0.9773843811168246", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(63) == 1.0995574287564276", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(59) == 1.0297442586766545", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(64) == 1.117010721276371", "assert radian_degree(65) == 1.1344640137963142", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(61) == 1.064650843716541", "assert radian_degree(57) == 0.9948376736367679", "assert radian_degree(55) == 0.9599310885968813", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(60) == 1.0471975511965976", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(58) == 1.0122909661567112", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(125) == 2.181661564992912", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(120) == 2.0943951023931953", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(124) == 2.1642082724729685", "assert radian_degree(118) == 2.059488517353309", "assert radian_degree(122) == 2.129301687433082", "assert radian_degree(121) == 2.111848394913139", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(116) == 2.0245819323134224", "assert radian_degree(123) == 2.1467549799530254", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(117) == 2.0420352248333655", "assert radian_degree(119) == 2.076941809873252", "assert radian_degree(115) == 2.007128639793479", "assert radian_degree(123) == 2.1467549799530254"], "entry_point": "radian_degree", "repair_prompt": ["Description: Create a function radian_degree that transforms degrees into radians. Ensure the function accurately converts angles for a wide range of degree values.\nradian_degree(90)==1.5707963267948966\n", "Create a function radian_degree that accurately converts a wide range of degree values into radians, ensuring precision in the transformation process. Ensure the function is able to handle various angles with accuracy. \nDescription: Create a function that transforms degrees into radians. Ensure the function accurately converts angles for a wide range of degree values.\nradian_degree(90)==1.5707963267948966\n", "Description: Create a function radian_degree that accurately converts degrees into radians for a wide range of values.\nradian_degree(90)==1.5707963267948966\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using math library in Python.\n\n    Args:\n        degrees: A float representing the angle in degrees.\n\n    Returns:\n        A float representing the angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert angle from degrees to radians.\n\n    Args:\n        degrees (float): The angle in degrees.\n\n    Returns:\n        float: The angle in radians.\n    \"\"\"\n    radians = math.radians(degrees)\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians accurately using the math library in Python.\n\n    Args:\n        degrees (float): The degree value to be converted\n\n    Returns:\n        float: The corresponding radian value\n    \"\"\"\n    radians = degrees * (math.pi / 180)\n    return radians\n", "from typing import List\ndef radian_degree(degree: float) -> float:\n    \"\"\"\n    Function to convert degree to radians\n\n    Args:\n    degree: float - The degree value to be converted to radians\n\n    Returns:\n    float: The equivalent value in radians\n    \"\"\"\n    import math\n    return math.radians(degree)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degree: float) -> float:\n    # Function to convert degree to radians\n    return degree * (math.pi / 180)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degree: float) -> float:\n    # Function to convert degree to radians\n    return math.radians(degree)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians\n    \n    Args:\n        degrees: A float representing the degree value to be converted\n    \n    Returns:\n        A float representing the equivalent value in radians\n    \"\"\"\n    radians = degrees * math.pi / 180\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using the math library in Python.\n\n    Args:\n        degrees (float): The degree value to be converted to radians.\n\n    Returns:\n        float: The corresponding radian value.\n    \"\"\"\n    return math.radians(degrees)\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert the given degree value to radians.\n\n    Args:\n        degrees (float): The degree value to be converted to radians\n\n    Returns:\n        float: The corresponding radian value\n    \"\"\"\n    radians = degrees * math.pi / 180\n    return radians\n", "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using math library.\n\n    Args:\n        degrees (float): the angle in degrees\n\n    Returns:\n        float: the angle in radians\n    \"\"\"\n    return math.radians(degrees)\n"], "plans": ["We will use the math library in Python to perform the conversion from degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles from degrees to radians accurately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library in Python for the conversion, the code logic would involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equal to 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is equal to 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: 180 degrees is equal to \u03c0 radians.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The math.radians() function handles the conversion accurately for a wide range of degree values.\n", "requirement analysis:\nThe main goal is to provide a reliable and efficient function for converting degrees to radians across a wide spectrum of angles.\nrequirement pool:\n- Implement radian_degree function to accurately convert degrees to radians\n- Ensure the function handles edge cases and extreme angles effectively\n- Optimize the function for performance and accuracy\nWe will use the math library in Python to implement the radian_degree function for accurate angle conversion.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles from degrees to radians accurately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library in Python for accurate angle conversion, the code logic would involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians should result in 0.0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians should result in approximately 6.283185307179586 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians should result in approximately 3.141592653589793 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library handles angle conversion accurately.\n", "requirement pool:\n- Accurately convert a wide range of degree values to radians\n- Handle edge cases such as 0 degrees and 360 degrees effectively\n- Optimize the performance of the conversion function for efficiency\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles from degrees to radians accurately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to convert degrees to radians accurately. The formula to convert degrees to radians is: radians = degrees * (pi/180).\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians should result in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians should result in 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians should result in \u03c0 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The conversion formula covers a wide range of degree values accurately.\n", "requirement pool:\n- Accurately convert degree values to radians\n- Handle a wide range of angle inputs\nWe will use the math library in Python to accurately convert degree values to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'convert degree values to radians'\n    Explanation: The core concept is to accurately convert degree values into radians using the math library in Python.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'accurately': means that the conversion should be precise and handle various angles with accuracy\n\n# [code logic]\n    Since the plan already mentions using the math library for conversion, the code logic would involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians should result in 0.0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians should result in approximately 6.283185307179586 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians should result in approximately 3.141592653589793 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library handles the conversion accurately.\n", "We will use the math library in Python to accurately convert degree values to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degree values': Refers to the angle measurement in degrees.\n    'radians': Refers to the angle measurement in radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'accurately': Indicates the precision required in the conversion process.\n\n# [code logic]\n    Since the plan suggests using the math library in Python for accurate conversion, the code logic would involve importing the math library and using the math.radians() function to convert degree values to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians should result in 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians should result in approximately 6.283185307179586 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians should result in approximately 3.141592653589793 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library handles the conversion accurately.\n", "We will use the math library in Python to accurately convert degree values to radians with precision.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degree values': Refers to the angle measurement in degrees that needs to be converted to radians accurately.\n    'radians': Refers to the unit of angle measurement in the context of this requirement.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'accurately': Indicates the precision required in the conversion process to ensure accurate results.\n\n# [code logic]\n    Since the plan suggests using the math library in Python for precision conversion, the code logic would involve importing the math library and using the math.radians() function to convert degree values to radians accurately.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians should result in 0.0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians should result in approximately 6.283185307179586 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians should result in approximately 3.141592653589793 radians.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library handles the conversion accurately for various angles.\n", "requirement analysis:\nThe function should accurately convert degrees to radians using the formula: radians = degrees * (pi / 180). It should handle a wide range of input values and ensure precision in the conversion.\nrequirement pool:\n- Implement the radian_degree function to convert degrees to radians accurately\n- Test the function with various input values to ensure correctness\n- Optimize the function for performance and precision\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n## Prompt 3:\n\n[requirement]\nDescription: Create a function radian_degree that accurately converts degrees into radians for a wide range of values.\nradian_degree(90)==1.5707963267948966\n[plan]\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\n\n## Answer 3:\n\n# [core concept]\n    'convert degrees into radians'\n    Explanation: The core concept is to convert the given degree value into its equivalent in radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code, you can use the math library in Python which provides the necessary functions for trigonometric calculations. The conversion formula from degrees to radians is: radians = degrees * pi / 180.\n\n```python\nimport math\n\ndef radian_degree(degrees):\n    radians = degrees * math.pi / 180\n    return radians\n```\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: Converting 0 degrees to radians results in 0.\n    radian_degree(360) = 6.283185307179586\n    Explanation: Converting 360 degrees to radians results in approximately 6.283185307179586.\n    radian_degree(180) = 3.141592653589793\n    Explanation: Converting 180 degrees to radians results in approximately 3.141592653589793.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the conversion formula covers a wide range of values.\n", "requirement analysis:\nThe function should utilize the mathematical formula for converting degrees to radians accurately. It should handle edge cases and extreme values effectively.\nrequirement pool:\n- Implement the core conversion logic using the standard formula\n- Handle edge cases such as 0 degrees and 360 degrees\n- Optimize the function for performance\nWe will implement the radian_degree function using the math library in Python to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'convert degrees into radians'\n    Explanation: The core concept is to convert angles measured in degrees to radians.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'accurately': means that the conversion should be precise and correct\n\n# [code logic]\n    Since the plan suggests using the math library in Python, the code logic would involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: When converting 0 degrees to radians, the result should be 0.\n    radian_degree(360) = 6.283185307179586\n    Explanation: When converting 360 degrees to radians, the result should be 2*pi.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The math.radians() function handles the conversion accurately for a wide range of values.\n", "requirement pool:\n- Implement radian_degree function with accurate conversion formula\n- Handle edge cases such as negative angles and large values\n- Optimize the conversion algorithm for efficiency\nWe will use the math library in Python to implement the radian_degree function with the accurate conversion formula.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees into radians'\n    Explanation: The core concept is to convert angles in degrees to radians accurately.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library and accurate conversion formula, the code logic is straightforward:\n    - Import the math library\n    - Use the formula radians = degrees * pi / 180 to convert degrees to radians\n    - Return the converted value\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: 0 degrees is equal to 0 radians.\n    radian_degree(360) = 6.283185307179586\n    Explanation: 360 degrees is equal to 2\u03c0 radians.\n    radian_degree(180) = 3.141592653589793\n    Explanation: 180 degrees is equal to \u03c0 radians.\n\n# [extra code for edge case]\n    No extra code needed as the conversion formula handles all cases correctly.\n", "requirement pool:\n- Implement radian_degree function with accurate conversion\n- Handle edge cases such as 0 degrees and 360 degrees\n- Optimize the conversion algorithm for performance\nWe will design a simple Python function using the math library to accurately convert degrees to radians.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'degrees': refers to the unit of measurement for angles in the requirement.\n    'radians': refers to another unit of measurement for angles, which is used for conversion.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to use the math library for conversion, the code logic will involve importing the math library and using the math.radians() function to convert degrees to radians.\n\n# [edge case] \n    radian_degree(0) = 0.0\n    Explanation: When converting 0 degrees to radians, the result should be 0.\n    radian_degree(360) = 6.283185307179586\n    Explanation: When converting 360 degrees to radians, the result should be 2\u03c0 which is approximately 6.283185307179586.\n    radian_degree(180) = 3.141592653589793\n    Explanation: When converting 180 degrees to radians, the result should be \u03c0 which is approximately 3.141592653589793.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases as the math library function handles the conversion accurately for a wide range of degree values.\n"], "test": ["def check(radian_degree):\n\tassert radian_degree(90)==1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(60)==1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(120)==2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(88) == 1.53588974175501", "def check(radian_degree):\n\tassert radian_degree(92) == 1.6057029118347832", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(94) == 1.6406094968746698", "def check(radian_degree):\n\tassert radian_degree(89) == 1.5533430342749532", "def check(radian_degree):\n\tassert radian_degree(86) == 1.5009831567151235", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(90) == 1.5707963267948966", "def check(radian_degree):\n\tassert radian_degree(95) == 1.6580627893946132", "def check(radian_degree):\n\tassert radian_degree(87) == 1.5184364492350666", "def check(radian_degree):\n\tassert radian_degree(91) == 1.5882496193148399", "def check(radian_degree):\n\tassert radian_degree(85) == 1.4835298641951802", "def check(radian_degree):\n\tassert radian_degree(93) == 1.6231562043547265", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(62) == 1.0821041362364843", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(56) == 0.9773843811168246", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(63) == 1.0995574287564276", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(59) == 1.0297442586766545", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(64) == 1.117010721276371", "def check(radian_degree):\n\tassert radian_degree(65) == 1.1344640137963142", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(61) == 1.064650843716541", "def check(radian_degree):\n\tassert radian_degree(57) == 0.9948376736367679", "def check(radian_degree):\n\tassert radian_degree(55) == 0.9599310885968813", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(60) == 1.0471975511965976", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(58) == 1.0122909661567112", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(125) == 2.181661564992912", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(120) == 2.0943951023931953", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(124) == 2.1642082724729685", "def check(radian_degree):\n\tassert radian_degree(118) == 2.059488517353309", "def check(radian_degree):\n\tassert radian_degree(122) == 2.129301687433082", "def check(radian_degree):\n\tassert radian_degree(121) == 2.111848394913139", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(116) == 2.0245819323134224", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(117) == 2.0420352248333655", "def check(radian_degree):\n\tassert radian_degree(119) == 2.076941809873252", "def check(radian_degree):\n\tassert radian_degree(115) == 2.007128639793479", "def check(radian_degree):\n\tassert radian_degree(123) == 2.1467549799530254"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8039, 1.0, 0.8039, 1.0], "pass_results": [true, true, true, true, true, true, false, true, false, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 82, 102, 82, 102], "completion": "from typing import List\n## main.py\n\nimport math\n\ndef radian_degree(degrees: float) -> float:\n    \"\"\"\n    Convert degrees to radians using math library.\n\n    Args:\n        degrees (float): the angle in degrees\n\n    Returns:\n        float: the angle in radians\n    \"\"\"\n    return math.radians(degrees)\n", "passed": true, "pass": true, "pass_num": 8, "round": 315, "mutate_method": "add_1_sentence_at_end", "parent_index": 460}
