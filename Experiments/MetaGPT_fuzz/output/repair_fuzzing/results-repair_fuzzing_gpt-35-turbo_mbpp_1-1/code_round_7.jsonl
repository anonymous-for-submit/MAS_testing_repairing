{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 12, "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. Consider edge cases where the matrix might be empty or contain only one row.", "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "assert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "assert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "assert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "assert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "assert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "assert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "assert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "assert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "assert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "assert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "assert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "assert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "assert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "assert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "assert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "assert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "assert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "assert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "assert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "assert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "assert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "assert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "assert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "assert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "assert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "assert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "assert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "assert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "assert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "assert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "assert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "assert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "assert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "assert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "assert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "assert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "assert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "assert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "assert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "assert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "assert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "assert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "assert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "assert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "assert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "assert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "assert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "assert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "assert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "assert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "assert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "assert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "assert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "assert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "assert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "assert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "assert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "assert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "assert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "assert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "assert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "assert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "assert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "assert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "assert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "assert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "assert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "assert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "assert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "assert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "assert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "assert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "assert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "assert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "assert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "assert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "assert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "assert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "assert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "assert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "assert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "assert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "assert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "assert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "assert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "assert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "assert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "assert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "assert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "assert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "assert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "assert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "assert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "assert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "assert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "assert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "assert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "assert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "assert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "entry_point": "sort_matrix", "repair_prompt": ["Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows. Consider edge cases where the matrix might be empty or contain only one row.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to handle edge cases such as an empty matrix or a matrix containing only one row, while sorting the given matrix in ascending order based on the sum of its rows.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n", "Write a function sort_matrix to sort a given matrix in ascending order according to the sum of its rows, considering edge cases where the matrix might be empty or contain only one row.\nsort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Args:\n    matrix: A list of lists of integers representing the matrix.\n\n    Returns:\n    A list of lists of integers representing the sorted matrix.\n\n    Examples:\n    >>> sort_matrix([])\n    []\n    >>> sort_matrix([[1]])\n    [[1]]\n    >>> sort_matrix([[1, 2, 3]])\n    [[1, 2, 3]]\n    \"\"\"\n    return sorted(matrix, key=lambda x: sum(x))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the matrix in ascending order based on the sum of its rows.\n\n    Args:\n    - matrix: a list of lists representing the matrix\n\n    Returns:\n    - A sorted matrix in ascending order based on the sum of its rows\n    \"\"\"\n\n    # Define a function to calculate the sum of a row in the matrix\n    def row_sum(row):\n        return sum(row)\n\n    # Sort the matrix rows based on their sums in ascending order\n    sorted_matrix = sorted(matrix, key=row_sum)\n\n    return sorted_matrix\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the input matrix based on the sum of its rows.\n\n    Args:\n    matrix: A list of lists where each inner list represents a row in the matrix.\n\n    Returns:\n    A new matrix with rows sorted based on the sum of each row.\n\n    Examples:\n    >>> sort_matrix([])\n    []\n    >>> sort_matrix([[1]])\n    [[1]]\n    >>> sort_matrix([[1, 2, 3]])\n    [[1, 2, 3]]\n    >>> sort_matrix([[3, 2, 1], [1, 2, 3]])\n    [[1, 2, 3], [3, 2, 1]]\n    \"\"\"\n\n    return sorted(matrix, key=lambda x: sum(x))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    if not matrix:\n        return []\n    \n    return sorted(matrix, key=lambda x: sum(x))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the given matrix based on the sum of each row.\n    \n    Args:\n    matrix: A list of lists where each inner list represents a row in the matrix\n    \n    Returns:\n    A new matrix with rows sorted based on their sums\n    \"\"\"\n    if not matrix:  # Check for empty matrix\n        return []\n    elif len(matrix) == 1:  # Check for matrix with only one row\n        return matrix\n    else:\n        return sorted(matrix, key=lambda x: sum(x))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    # Function to sort the matrix based on the sum of its rows\n    \n    # Check if the matrix is empty or has only one row\n    if not matrix or len(matrix) == 1:\n        return matrix\n    \n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums in ascending order\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    if not matrix:\n        return []\n    if len(matrix) == 1:\n        return matrix\n    \n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    \n    return sorted_matrix\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Args:\n    matrix: A list of lists where each inner list represents a row in the matrix.\n\n    Returns:\n    A new matrix with rows sorted in ascending order based on the sum of each row.\n\n    Examples:\n    >>> sort_matrix([])\n    []\n    \n    >>> sort_matrix([[1, 2, 3]])\n    [[1, 2, 3]]\n    \n    >>> sort_matrix([[1], [2], [3]])\n    [[1], [2], [3]]\n    \"\"\"\n    return sorted(matrix, key=lambda x: sum(x))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts a given matrix in ascending order based on the sum of its rows.\n\n    Args:\n    matrix: A list of lists of integers representing the matrix to be sorted.\n\n    Returns:\n    A new matrix sorted in ascending order based on the sum of its rows.\n    \"\"\"\n\n    if not matrix or len(matrix) == 1:\n        return matrix\n\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n    \n    return sorted_matrix\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the matrix based on the sum of its rows.\n\n    Args:\n    matrix: A list of lists where each inner list represents a row in the matrix.\n\n    Returns:\n    A new matrix with rows sorted based on the sum of their elements.\n    \"\"\"\n\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n\n    return sorted_matrix\n"], "plans": ["requirement pool:\n- Sort the matrix based on row sums\n- Handle empty matrices and single-row matrices\n- Ensure the function is well-documented for easy integration\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort_matrix'\n    Explanation: The core concept is to sort a given matrix in ascending order based on the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows. Here is the detailed logic to implement the code:\n    \n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n```\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: When the matrix is empty, there are no rows to sum, so the expected output is an empty matrix.\n    \n    sort_matrix([[1]]) = [[1]]\n    Explanation: When the matrix contains only one row, there is only one row to sum, so the matrix remains unchanged.\n    \n    sort_matrix([[1, 2, 3]]) = [[1, 2, 3]]\n    Explanation: When the matrix contains only one row, there is only one row to sum, so the matrix remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers scenarios where the matrix might be empty or contain only one row.\n", "requirement analysis:\nThe function needs to iterate over each row, calculate the sum, and then sort the matrix based on these sums. Special attention should be given to handling empty matrices or matrices with a single row.\nrequirement pool:\n- Sort the matrix based on row sums\n- Handle empty matrices and single-row matrices\n- Ensure the function is well-documented for easy integration\nWe will use the built-in functions in Python to efficiently sort the matrix based on row sums. Specifically, we will utilize the sorted() function with a custom key parameter to sort the matrix rows based on their sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort matrix'\n    Explanation: Sorting a matrix means arranging its rows or columns in a specific order based on certain criteria, such as row sums in this case.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'ascending': Indicates that the sorting order should be from smallest to largest based on the sum of rows.\n\n# [code logic]\n    1. Define a function sort_matrix that takes a matrix as input.\n    2. Use the sorted() function with a custom key parameter to sort the matrix rows based on their sums in ascending order.\n    3. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sum, so the sorted result should also be an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row will have the same row sum, so it remains unchanged after sorting.\n    sort_matrix([[1, 2, 3]]) = [[1, 2, 3]]\n    Explanation: A matrix with one row will have its row sum as the only criteria for sorting, so it remains unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to sort the matrix based on row sums already covers scenarios with empty matrices or matrices with only one row.\n", "requirement pool:\n- Sort the matrix based on the sum of its rows\n- Handle edge cases like empty matrices or single-row matrices\n- Ensure the sorting is done in ascending order\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort matrix'\n    Explanation: Sorting a matrix means arranging its rows in a specific order based on a certain criteria, in this case, the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the built-in sorted function with lambda functions to sort the matrix based on the sum of its rows, the code logic is straightforward. Here is a sample implementation:\n```python\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n```\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row should return the same matrix.\n    sort_matrix([[1, 2, 3]]) = [[1, 2, 3]]\n    Explanation: A matrix with only one row should return the same matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the code implementation covers these scenarios as well.\n", "requirement analysis:\nThe function should handle empty matrices by returning an empty matrix. It should correctly sort non-empty matrices based on row sums in ascending order. Performance optimizations should be considered for large matrices.\nrequirement pool:\n- Handle empty matrices by returning an empty matrix\n- Sort non-empty matrices based on row sums in ascending order\n- Optimize performance for large matrices\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on row sums. We will handle edge cases such as empty matrices by checking the length of the input matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort_matrix'\n    Explanation: The core concept is to sort a matrix in ascending order based on the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the built-in sorted function in Python along with lambda functions to sort the matrix based on row sums. We will handle edge cases such as empty matrices by checking the length of the input matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix containing only one row should return the same matrix.\n    sort_matrix([[1, 2], [3, 4]]) = [[1, 2], [3, 4]]\n    Explanation: A matrix with rows already sorted should return the same matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided already covers the edge cases by checking the length of the input matrix.\n", "requirement analysis:\nThe function sort_matrix needs to handle edge cases like empty matrices and single-row matrices. It should sort the input matrix in ascending order based on the sum of its rows.\nrequirement pool:\n- Handle empty matrices and single-row matrices\n- Implement sorting based on row sums\n- Optimize algorithm for performance\nWe will use the built-in functions in Python to efficiently handle edge cases and sort the matrix based on row sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'empty matrix': A matrix that contains no elements.\n    'one row matrix': A matrix that contains only one row.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, we can implement the code as follows:\n```python\ndef sort_matrix(matrix):\n    if not matrix:  # Check for empty matrix\n        return []\n    elif len(matrix) == 1:  # Check for matrix with only one row\n        return matrix\n    else:\n        return sorted(matrix, key=lambda x: sum(x))\n```\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row should return the same matrix.\n    sort_matrix([[1, 2], [3, 4]]) = [[1, 2], [3, 4]]\n    Explanation: The sum of the rows are [3, 7], so the sorted matrix remains the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the code already covers scenarios for empty matrices and matrices with only one row.\n", "requirement analysis:\nThe function needs to check for empty matrices and single-row matrices as edge cases. It should then sort the matrix based on the sum of its rows in ascending order.\nrequirement pool:\n- Handle empty matrices and single-row matrices as edge cases\n- Sort the matrix based on the sum of its rows in ascending order\nWe will use the built-in functions in Python to handle edge cases and sort the matrix based on row sums in ascending order.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'empty matrix': Refers to a matrix that has no elements.\n    'one row matrix': Refers to a matrix that contains only one row.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using built-in functions in Python, we can directly implement the sorting based on row sums using the following logic:\n    1. Check if the matrix is empty or has only one row. If so, return the matrix as it is.\n    2. Calculate the sum of each row in the matrix.\n    3. Sort the matrix based on the row sums in ascending order.\n    4. Return the sorted matrix.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sort, so the expected output is an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row does not need sorting, so the expected output is the same matrix.\n    sort_matrix([[1, 2, 3]]) = [[1, 2, 3]]\n    Explanation: A matrix with only one row does not need sorting, so the expected output is the same matrix.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers scenarios of an empty matrix or a matrix with only one row.\n", "requirement pool:\n- Sort the matrix based on the sum of its rows\n- Handle empty matrices by returning an empty matrix\n- Handle single-row matrices by returning the same matrix\n- Ensure the function sorts in ascending order\n- Optimize the sorting algorithm for efficiency\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows. We will handle edge cases separately by checking for empty matrices or single-row matrices.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort_matrix'\n    Explanation: The core concept is to sort a given matrix in ascending order based on the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows. We will handle edge cases separately by checking for empty matrices or single-row matrices.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row should return the same matrix.\n    sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The given matrix is sorted in ascending order based on the sum of its rows.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios of empty matrices or single-row matrices.\n", "requirement pool:\n- Sort matrices efficiently based on row sums\n- Handle edge cases like empty matrices or single-row matrices\n- Optimize the sorting algorithm for scalability\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'sort_matrix'\n    Explanation: The core concept is to sort a given matrix in ascending order based on the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The plan suggests using the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows. Here is the detailed logic to implement the code:\n    \n    ```python\n    def sort_matrix(matrix):\n        return sorted(matrix, key=lambda x: sum(x))\n    ```\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: When the matrix is empty, the sorted matrix should also be empty.\n    \n    sort_matrix([[1, 2, 3]]) = [[1, 2, 3]]\n    Explanation: When the matrix contains only one row, the sorted matrix should remain the same as the original.\n\n    sort_matrix([[1], [2], [3]]) = [[1], [2], [3]]\n    Explanation: When the matrix contains multiple rows with only one element in each row, the sorted matrix should remain the same as the original.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The provided logic covers sorting for both empty matrices and matrices with only one row.\n", "requirement pool:\n- Implement sort_matrix function to handle sorting based on row sums\n- Include edge case handling for empty matrices and single-row matrices\n- Optimize the sorting algorithm for efficiency\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows. We will handle edge cases by checking if the matrix is empty or contains only one row.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort_matrix'\n    Explanation: The core concept is to sort a given matrix in ascending order based on the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows. We will handle edge cases by checking if the matrix is empty or contains only one row.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix should return an empty matrix.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row should return the same matrix.\n    sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) = [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    Explanation: The given matrix sorted in ascending order based on the sum of its rows.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios where the matrix is empty or contains only one row.\n", "requirement pool:\n- Implement sort_matrix function to sort matrices based on row sums\n- Handle edge cases such as empty matrices or single-row matrices\n- Optimize the sorting algorithm for scalability and efficiency\nWe will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sort matrix'\n    Explanation: Sorting a matrix means arranging its rows in a specific order based on a certain criteria, in this case, the sum of its rows.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the built-in sorted function in Python along with lambda functions to sort the matrix based on the sum of its rows.\n\n# [edge case] \n    sort_matrix([]) = []\n    Explanation: An empty matrix has no rows to sum, so the sorted result should also be empty.\n    sort_matrix([[1]]) = [[1]]\n    Explanation: A matrix with only one row is already sorted based on the sum of its rows.\n    sort_matrix([[1, 2, 3]]) = [[1, 2, 3]]\n    Explanation: A matrix with only one row is already sorted based on the sum of its rows.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided can handle empty matrices or matrices with only one row appropriately.\n"], "test": ["def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 3], [3, 4, 10], [2, 1, 4]]) == [[2, 1, 4], [1, 5, 3], [3, 4, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 5, 4], [3, 9, 3], [4, 2, 2]]) == [[4, 2, 2], [2, 5, 4], [3, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 6], [7, 8, 3], [1, 1, 6]]) == [[1, 1, 6], [1, 1, 6], [7, 8, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [2, 6, 10], [1, 3, 1]]) == [[1, 3, 1], [3, 3, 7], [2, 6, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 3], [4, 3, 8], [6, 2, 3]]) == [[3, 2, 3], [6, 2, 3], [4, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 5], [6, 8, 6], [2, 5, 4]]) == [[2, 5, 4], [4, 5, 5], [6, 8, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 1, 4], [1, 2, 4]]) == [[1, 2, 3], [1, 2, 4], [3, 1, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 5], [4, 6, 9], [5, 2, 5]]) == [[2, 2, 5], [5, 2, 5], [4, 6, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [7, 6, 5], [6, 3, 1]]) == [[6, 3, 1], [3, 4, 7], [7, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 5], [4, 5, 1], [4, 5, 1]]) == [[4, 5, 1], [4, 5, 1], [5, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 1, 8], [7, 2, 10], [1, 3, 5]]) == [[1, 3, 5], [4, 1, 8], [7, 2, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [6, 3, 7], [1, 4, 3]]) == [[1, 4, 3], [1, 3, 8], [6, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [6, 9, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 5, 6], [6, 9, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 2], [5, 5, 3], [5, 1, 1]]) == [[5, 1, 1], [5, 2, 2], [5, 5, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 3], [3, 5, 5], [6, 2, 3]]) == [[1, 2, 3], [6, 2, 3], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 7, 7], [6, 7, 5], [1, 1, 2]]) == [[1, 1, 2], [3, 7, 7], [6, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 5], [2, 5, 1], [5, 6, 5]]) == [[1, 1, 5], [2, 5, 1], [5, 6, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 8], [7, 9, 5], [4, 2, 6]]) == [[4, 2, 6], [6, 3, 8], [7, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 6, 4], [7, 5, 10], [6, 4, 5]]) == [[3, 6, 4], [6, 4, 5], [7, 5, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 7], [3, 5, 3], [3, 3, 3]]) == [[3, 3, 3], [3, 5, 3], [3, 3, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 6], [5, 1, 2], [6, 5, 3]]) == [[5, 1, 2], [6, 5, 3], [6, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 2, 8], [5, 9, 10], [5, 1, 5]]) == [[5, 1, 5], [2, 2, 8], [5, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 5], [3, 8, 2], [1, 5, 2]]) == [[1, 5, 2], [5, 3, 5], [3, 8, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 8], [1, 9, 2], [5, 2, 4]]) == [[5, 2, 4], [1, 9, 2], [2, 6, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 1, 3], [6, 4, 7], [1, 1, 2]]) == [[1, 1, 2], [1, 1, 3], [6, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 8], [1, 4, 5], [2, 4, 2]]) == [[2, 4, 2], [1, 4, 5], [5, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 4], [6, 4, 4], [2, 6, 6]]) == [[3, 2, 4], [6, 4, 4], [2, 6, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 4], [5, 1, 2], [1, 5, 3]]) == [[5, 1, 2], [1, 5, 3], [5, 2, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 3, 1], [5, 9, 5], [5, 4, 1]]) == [[5, 3, 1], [5, 4, 1], [5, 9, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 6], [1, 6, 5], [5, 1, 3]]) == [[5, 1, 3], [1, 6, 5], [6, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 7, 8], [2, 2, 9], [6, 4, 1]]) == [[6, 4, 1], [2, 2, 9], [6, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 1, 1], [4, 4, 2], [3, 5, 4]]) == [[2, 1, 1], [4, 4, 2], [3, 5, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 4], [3, 4, 7], [4, 5, 3]]) == [[4, 5, 3], [6, 4, 4], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 7, 7], [-6, 7, -6], [5, -2, 3]]) == [[-6, 7, -6], [5, -2, 3], [1, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 4, 5], [2, 4, 0], [5, -4, 3]]) == [[5, -4, 3], [2, 4, 0], [1, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 2, 3], [-6, 6, -7], [6, 1, 5]]) == [[-6, 6, -7], [5, 2, 3], [6, 1, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 4], [0, 6, -2], [5, -3, 6]]) == [[0, 6, -2], [1, 3, 4], [5, -3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [3, 3, -2], [3, 2, 6]]) == [[3, 3, -2], [3, 4, 4], [3, 2, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 2, 7], [-5, 2, -1], [2, -6, 2]]) == [[-5, 2, -1], [2, -6, 2], [6, 2, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 2, 1], [3, 7, -8], [3, -4, 1]]) == [[3, -4, 1], [3, 7, -8], [1, 2, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 7], [-6, 8, 0], [4, -5, 2]]) == [[4, -5, 2], [-6, 8, 0], [3, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 3, 5], [0, 6, 0], [1, -6, 2]]) == [[1, -6, 2], [0, 6, 0], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 1], [-7, 5, -6], [5, -1, 2]]) == [[-7, 5, -6], [5, -1, 2], [5, 6, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 2, 8], [1, 2, -3], [6, 1, 2]]) == [[1, 2, -3], [6, 1, 2], [3, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 1], [0, 9, -2], [1, -5, 5]]) == [[1, -5, 5], [3, 3, 1], [0, 9, -2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 1], [-6, 4, -1], [2, -2, 2]]) == [[-6, 4, -1], [2, -2, 2], [5, 7, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 5, 2], [-6, 7, -1], [2, -5, 4]]) == [[-6, 7, -1], [2, -5, 4], [6, 5, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 7], [-1, 2, -2], [1, -2, 1]]) == [[-1, 2, -2], [1, -2, 1], [2, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 3, 8], [-1, 4, -2], [5, 2, 1]]) == [[-1, 4, -2], [5, 2, 1], [1, 3, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 3], [3, 3, 0], [3, 1, 3]]) == [[3, 3, 0], [3, 1, 3], [6, 3, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 8], [-7, 7, -1], [2, 1, 5]]) == [[-7, 7, -1], [2, 1, 5], [4, 7, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 1, 2], [-3, 8, -9], [5, 3, 6]]) == [[-3, 8, -9], [6, 1, 2], [5, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 3], [-2, 8, -10], [3, 0, 6]]) == [[-2, 8, -10], [3, 0, 6], [3, 4, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 5, 5], [-4, 3, -9], [3, -1, 1]]) == [[-4, 3, -9], [3, -1, 1], [3, 5, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 2, 2], [-2, 1, -8], [5, -5, 1]]) == [[-2, 1, -8], [5, -5, 1], [4, 2, 2]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 4, 7], [-5, 4, -8], [1, 1, 4]]) == [[-5, 4, -8], [1, 1, 4], [5, 4, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 5], [2, 7, -10], [1, 2, 2]]) == [[2, 7, -10], [1, 2, 2], [6, 4, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 7, 6], [2, 1, -4], [5, -6, 4]]) == [[2, 1, -4], [5, -6, 4], [5, 7, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 8], [3, 3, -2], [3, -1, 3]]) == [[3, 3, -2], [3, -1, 3], [5, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 1, 8], [-2, 3, -6], [1, 0, 2]]) == [[-2, 3, -6], [1, 0, 2], [5, 1, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 5], [-4, 9, 0], [2, -4, 2]]) == [[2, -4, 2], [-4, 9, 0], [4, 7, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 5, 6], [2, 1, -2], [1, 1, 3]]) == [[2, 1, -2], [1, 1, 3], [1, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 8], [-3, 9, 0], [4, 3, 3]]) == [[-3, 9, 0], [4, 3, 3], [4, 5, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 4, 4], [1, 6, -5], [5, 0, 2]]) == [[1, 6, -5], [5, 0, 2], [3, 4, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 4, 2], [-6, 7, -3], [4, 3, 5]]) == [[-6, 7, -3], [4, 4, 2], [4, 3, 5]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 7], [0, 5, -1], [1, -1, 4]]) == [[0, 5, -1], [1, -1, 4], [4, 7, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 12, 8], [5, 1, 5], [2, 5, 8]]) == [[5, 1, 5], [2, 5, 8], [10, 12, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 13], [11, 9, 6], [3, 6, 4]]) == [[3, 6, 4], [3, 8, 13], [11, 9, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 8], [2, 5, 6], [6, 3, 5]]) == [[2, 5, 6], [6, 3, 5], [1, 11, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 6, 11], [1, 8, 8], [2, 2, 6]]) == [[2, 2, 6], [1, 8, 8], [1, 6, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 8], [10, 7, 2], [1, 3, 2]]) == [[1, 3, 2], [10, 7, 2], [9, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 4, 4], [9, 2, 8], [1, 4, 2]]) == [[1, 4, 2], [7, 4, 4], [9, 2, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 5, 12], [2, 9, 7], [5, 4, 5]]) == [[5, 4, 5], [2, 9, 7], [4, 5, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 9, 4], [7, 3, 6], [3, 1, 9]]) == [[3, 1, 9], [3, 9, 4], [7, 3, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 11], [4, 9, 5], [4, 3, 7]]) == [[4, 3, 7], [4, 9, 5], [1, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 4, 6], [2, 6, 1], [6, 1, 4]]) == [[2, 6, 1], [6, 1, 4], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 11, 11], [1, 4, 1], [4, 1, 8]]) == [[1, 4, 1], [4, 1, 8], [9, 11, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 11, 4], [5, 7, 2], [5, 5, 6]]) == [[5, 7, 2], [1, 11, 4], [5, 5, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 11], [2, 8, 5], [3, 6, 6]]) == [[2, 8, 5], [3, 6, 6], [9, 9, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 3, 4], [5, 1, 6], [2, 6, 4]]) == [[3, 3, 4], [5, 1, 6], [2, 6, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 9, 13], [9, 9, 3], [6, 4, 4]]) == [[6, 4, 4], [9, 9, 3], [1, 9, 13]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 4, 11], [5, 7, 4], [3, 5, 4]]) == [[3, 5, 4], [5, 7, 4], [9, 4, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 8, 12], [1, 3, 2], [6, 4, 8]]) == [[1, 3, 2], [6, 4, 8], [5, 8, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[10, 13, 6], [3, 6, 7], [6, 4, 4]]) == [[6, 4, 4], [3, 6, 7], [10, 13, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[7, 11, 7], [4, 1, 3], [5, 5, 7]]) == [[4, 1, 3], [5, 5, 7], [7, 11, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[9, 9, 10], [10, 2, 7], [5, 6, 9]]) == [[10, 2, 7], [5, 6, 9], [9, 9, 10]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 12, 11], [1, 5, 7], [4, 3, 5]]) == [[4, 3, 5], [1, 5, 7], [8, 12, 11]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 6, 14], [5, 2, 3], [3, 1, 5]]) == [[3, 1, 5], [5, 2, 3], [2, 6, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[6, 3, 5], [7, 5, 3], [6, 6, 7]]) == [[6, 3, 5], [7, 5, 3], [6, 6, 7]]", "def check(sort_matrix):\n\tassert sort_matrix([[1, 13, 4], [4, 4, 2], [4, 1, 9]]) == [[4, 4, 2], [4, 1, 9], [1, 13, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[8, 7, 4], [5, 8, 4], [2, 4, 1]]) == [[2, 4, 1], [5, 8, 4], [8, 7, 4]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 8, 9], [5, 4, 4], [2, 5, 6]]) == [[5, 4, 4], [2, 5, 6], [4, 8, 9]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 10, 14], [9, 7, 7], [5, 6, 7]]) == [[5, 6, 7], [9, 7, 7], [5, 10, 14]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 6, 4], [8, 8, 1], [2, 5, 1]]) == [[2, 5, 1], [5, 6, 4], [8, 8, 1]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 12, 12], [3, 5, 3], [5, 3, 1]]) == [[5, 3, 1], [3, 5, 3], [5, 12, 12]]", "def check(sort_matrix):\n\tassert sort_matrix([[4, 7, 10], [10, 4, 8], [5, 6, 8]]) == [[5, 6, 8], [4, 7, 10], [10, 4, 8]]", "def check(sort_matrix):\n\tassert sort_matrix([[2, 4, 7], [10, 3, 3], [6, 4, 6]]) == [[2, 4, 7], [10, 3, 3], [6, 4, 6]]", "def check(sort_matrix):\n\tassert sort_matrix([[5, 5, 6], [11, 9, 3], [1, 3, 9]]) == [[1, 3, 9], [5, 5, 6], [11, 9, 3]]", "def check(sort_matrix):\n\tassert sort_matrix([[3, 8, 10], [7, 7, 7], [4, 3, 3]]) == [[4, 3, 3], [3, 8, 10], [7, 7, 7]]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 0.9216, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 94, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Sorts the matrix based on the sum of its rows.\n\n    Args:\n    matrix: A list of lists where each inner list represents a row in the matrix.\n\n    Returns:\n    A new matrix with rows sorted based on the sum of their elements.\n    \"\"\"\n\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=lambda x: sum(x))\n\n    return sorted_matrix\n", "passed": true, "pass": true, "pass_num": 9, "round": 7, "mutate_method": "add_1_sentence_at_end", "parent_index": 7}
