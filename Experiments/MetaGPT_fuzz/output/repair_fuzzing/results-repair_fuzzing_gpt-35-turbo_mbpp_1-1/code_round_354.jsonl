{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 766, "prompt": "Write a function to return a list of all pairs of consecutive items in a given list. Ensure that your function handles edge cases. For example, consider lists with fewer than two items. Handle these cases appropriately.", "code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp", "test_imports": [], "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "assert pair_wise([1, 2, 5, 6, 5, 9, 9, 3]) == [(1, 2), (2, 5), (5, 6), (6, 5), (5, 9), (9, 9), (9, 3)]", "assert pair_wise([1, 3, 4, 3, 1, 7, 9, 7]) == [(1, 3), (3, 4), (4, 3), (3, 1), (1, 7), (7, 9), (9, 7)]", "assert pair_wise([6, 4, 4, 1, 3, 2, 2, 5]) == [(6, 4), (4, 4), (4, 1), (1, 3), (3, 2), (2, 2), (2, 5)]", "assert pair_wise([5, 1, 1, 1, 2, 5, 2, 8]) == [(5, 1), (1, 1), (1, 1), (1, 2), (2, 5), (5, 2), (2, 8)]", "assert pair_wise([5, 5, 1, 7, 1, 5, 4, 1]) == [(5, 5), (5, 1), (1, 7), (7, 1), (1, 5), (5, 4), (4, 1)]", "assert pair_wise([6, 4, 3, 3, 6, 8, 1, 3]) == [(6, 4), (4, 3), (3, 3), (3, 6), (6, 8), (8, 1), (1, 3)]", "assert pair_wise([5, 2, 1, 5, 2, 5, 6, 4]) == [(5, 2), (2, 1), (1, 5), (5, 2), (2, 5), (5, 6), (6, 4)]", "assert pair_wise([3, 5, 3, 4, 7, 4, 4, 7]) == [(3, 5), (5, 3), (3, 4), (4, 7), (7, 4), (4, 4), (4, 7)]", "assert pair_wise([6, 6, 1, 4, 3, 4, 3, 10]) == [(6, 6), (6, 1), (1, 4), (4, 3), (3, 4), (4, 3), (3, 10)]", "assert pair_wise([6, 3, 4, 6, 4, 9, 8, 10]) == [(6, 3), (3, 4), (4, 6), (6, 4), (4, 9), (9, 8), (8, 10)]", "assert pair_wise([6, 1, 4, 4, 2, 8, 2, 3]) == [(6, 1), (1, 4), (4, 4), (4, 2), (2, 8), (8, 2), (2, 3)]", "assert pair_wise([2, 3, 1, 3, 8, 2, 5, 10]) == [(2, 3), (3, 1), (1, 3), (3, 8), (8, 2), (2, 5), (5, 10)]", "assert pair_wise([3, 5, 7, 4, 5, 3, 7, 5]) == [(3, 5), (5, 7), (7, 4), (4, 5), (5, 3), (3, 7), (7, 5)]", "assert pair_wise([2, 6, 2, 7, 7, 5, 1, 10]) == [(2, 6), (6, 2), (2, 7), (7, 7), (7, 5), (5, 1), (1, 10)]", "assert pair_wise([1, 3, 7, 6, 5, 4, 8, 7]) == [(1, 3), (3, 7), (7, 6), (6, 5), (5, 4), (4, 8), (8, 7)]", "assert pair_wise([4, 6, 4, 7, 6, 4, 4, 8]) == [(4, 6), (6, 4), (4, 7), (7, 6), (6, 4), (4, 4), (4, 8)]", "assert pair_wise([2, 4, 2, 5, 5, 1, 6, 8]) == [(2, 4), (4, 2), (2, 5), (5, 5), (5, 1), (1, 6), (6, 8)]", "assert pair_wise([2, 4, 3, 7, 1, 1, 9, 4]) == [(2, 4), (4, 3), (3, 7), (7, 1), (1, 1), (1, 9), (9, 4)]", "assert pair_wise([3, 1, 2, 3, 1, 4, 6, 8]) == [(3, 1), (1, 2), (2, 3), (3, 1), (1, 4), (4, 6), (6, 8)]", "assert pair_wise([5, 6, 3, 2, 2, 4, 5, 8]) == [(5, 6), (6, 3), (3, 2), (2, 2), (2, 4), (4, 5), (5, 8)]", "assert pair_wise([3, 3, 1, 3, 1, 7, 8, 6]) == [(3, 3), (3, 1), (1, 3), (3, 1), (1, 7), (7, 8), (8, 6)]", "assert pair_wise([4, 4, 6, 5, 4, 1, 9, 10]) == [(4, 4), (4, 6), (6, 5), (5, 4), (4, 1), (1, 9), (9, 10)]", "assert pair_wise([6, 2, 2, 6, 8, 6, 1, 8]) == [(6, 2), (2, 2), (2, 6), (6, 8), (8, 6), (6, 1), (1, 8)]", "assert pair_wise([1, 5, 4, 6, 7, 2, 4, 6]) == [(1, 5), (5, 4), (4, 6), (6, 7), (7, 2), (2, 4), (4, 6)]", "assert pair_wise([5, 5, 1, 6, 8, 2, 1, 10]) == [(5, 5), (5, 1), (1, 6), (6, 8), (8, 2), (2, 1), (1, 10)]", "assert pair_wise([3, 2, 5, 1, 1, 5, 8, 7]) == [(3, 2), (2, 5), (5, 1), (1, 1), (1, 5), (5, 8), (8, 7)]", "assert pair_wise([6, 1, 7, 3, 8, 6, 6, 3]) == [(6, 1), (1, 7), (7, 3), (3, 8), (8, 6), (6, 6), (6, 3)]", "assert pair_wise([1, 5, 3, 6, 2, 5, 9, 6]) == [(1, 5), (5, 3), (3, 6), (6, 2), (2, 5), (5, 9), (9, 6)]", "assert pair_wise([4, 6, 6, 3, 5, 9, 2, 7]) == [(4, 6), (6, 6), (6, 3), (3, 5), (5, 9), (9, 2), (2, 7)]", "assert pair_wise([3, 1, 6, 7, 4, 1, 3, 10]) == [(3, 1), (1, 6), (6, 7), (7, 4), (4, 1), (1, 3), (3, 10)]", "assert pair_wise([4, 1, 1, 8, 1, 2, 6, 7]) == [(4, 1), (1, 1), (1, 8), (8, 1), (1, 2), (2, 6), (6, 7)]", "assert pair_wise([2, 4, 2, 8, 2, 8, 9, 5]) == [(2, 4), (4, 2), (2, 8), (8, 2), (2, 8), (8, 9), (9, 5)]", "assert pair_wise([6, 4, 6, 4, 1, 9, 2, 4]) == [(6, 4), (4, 6), (6, 4), (4, 1), (1, 9), (9, 2), (2, 4)]", "assert pair_wise([1, 2, 3, 7, 12]) == [(1, 2), (2, 3), (3, 7), (7, 12)]", "assert pair_wise([1, 5, 6, 14, 15]) == [(1, 5), (5, 6), (6, 14), (14, 15)]", "assert pair_wise([6, 9, 6, 14, 10]) == [(6, 9), (9, 6), (6, 14), (14, 10)]", "assert pair_wise([6, 4, 11, 8, 14]) == [(6, 4), (4, 11), (11, 8), (8, 14)]", "assert pair_wise([3, 8, 12, 5, 9]) == [(3, 8), (8, 12), (12, 5), (5, 9)]", "assert pair_wise([1, 6, 11, 10, 10]) == [(1, 6), (6, 11), (11, 10), (10, 10)]", "assert pair_wise([6, 9, 12, 4, 10]) == [(6, 9), (9, 12), (12, 4), (4, 10)]", "assert pair_wise([6, 1, 3, 14, 9]) == [(6, 1), (1, 3), (3, 14), (14, 9)]", "assert pair_wise([3, 5, 3, 8, 13]) == [(3, 5), (5, 3), (3, 8), (8, 13)]", "assert pair_wise([4, 3, 5, 6, 7]) == [(4, 3), (3, 5), (5, 6), (6, 7)]", "assert pair_wise([2, 4, 12, 6, 5]) == [(2, 4), (4, 12), (12, 6), (6, 5)]", "assert pair_wise([6, 5, 12, 14, 15]) == [(6, 5), (5, 12), (12, 14), (14, 15)]", "assert pair_wise([6, 8, 10, 4, 15]) == [(6, 8), (8, 10), (10, 4), (4, 15)]", "assert pair_wise([3, 1, 11, 9, 7]) == [(3, 1), (1, 11), (11, 9), (9, 7)]", "assert pair_wise([2, 7, 3, 8, 15]) == [(2, 7), (7, 3), (3, 8), (8, 15)]", "assert pair_wise([3, 3, 10, 8, 8]) == [(3, 3), (3, 10), (10, 8), (8, 8)]", "assert pair_wise([1, 7, 10, 7, 11]) == [(1, 7), (7, 10), (10, 7), (7, 11)]", "assert pair_wise([2, 8, 4, 6, 6]) == [(2, 8), (8, 4), (4, 6), (6, 6)]", "assert pair_wise([5, 8, 8, 13, 7]) == [(5, 8), (8, 8), (8, 13), (13, 7)]", "assert pair_wise([3, 9, 2, 13, 15]) == [(3, 9), (9, 2), (2, 13), (13, 15)]", "assert pair_wise([3, 2, 10, 13, 11]) == [(3, 2), (2, 10), (10, 13), (13, 11)]", "assert pair_wise([2, 7, 2, 7, 11]) == [(2, 7), (7, 2), (2, 7), (7, 11)]", "assert pair_wise([2, 2, 4, 4, 12]) == [(2, 2), (2, 4), (4, 4), (4, 12)]", "assert pair_wise([1, 3, 10, 13, 6]) == [(1, 3), (3, 10), (10, 13), (13, 6)]", "assert pair_wise([5, 3, 12, 12, 5]) == [(5, 3), (3, 12), (12, 12), (12, 5)]", "assert pair_wise([6, 10, 4, 14, 10]) == [(6, 10), (10, 4), (4, 14), (14, 10)]", "assert pair_wise([1, 9, 3, 10, 5]) == [(1, 9), (9, 3), (3, 10), (10, 5)]", "assert pair_wise([4, 2, 7, 10, 11]) == [(4, 2), (2, 7), (7, 10), (10, 11)]", "assert pair_wise([2, 1, 12, 12, 11]) == [(2, 1), (1, 12), (12, 12), (12, 11)]", "assert pair_wise([4, 4, 12, 14, 11]) == [(4, 4), (4, 12), (12, 14), (14, 11)]", "assert pair_wise([6, 8, 4, 9, 12]) == [(6, 8), (8, 4), (4, 9), (9, 12)]", "assert pair_wise([4, 3, 8, 8, 6]) == [(4, 3), (3, 8), (8, 8), (8, 6)]", "assert pair_wise([3, 9, 2, 7, 8]) == [(3, 9), (9, 2), (2, 7), (7, 8)]", "assert pair_wise([5, 3, 7, 5, 4, 3, 3, 4, 10, 12]) == [(5, 3), (3, 7), (7, 5), (5, 4), (4, 3), (3, 3), (3, 4), (4, 10), (10, 12)]", "assert pair_wise([4, 5, 1, 9, 2, 11, 7, 12, 11, 15]) == [(4, 5), (5, 1), (1, 9), (9, 2), (2, 11), (11, 7), (7, 12), (12, 11), (11, 15)]", "assert pair_wise([2, 4, 2, 9, 9, 4, 12, 7, 10, 15]) == [(2, 4), (4, 2), (2, 9), (9, 9), (9, 4), (4, 12), (12, 7), (7, 10), (10, 15)]", "assert pair_wise([3, 2, 8, 6, 7, 10, 6, 12, 9, 13]) == [(3, 2), (2, 8), (8, 6), (6, 7), (7, 10), (10, 6), (6, 12), (12, 9), (9, 13)]", "assert pair_wise([6, 5, 3, 4, 2, 7, 8, 6, 7, 14]) == [(6, 5), (5, 3), (3, 4), (4, 2), (2, 7), (7, 8), (8, 6), (6, 7), (7, 14)]", "assert pair_wise([2, 4, 3, 7, 4, 9, 11, 3, 10, 7]) == [(2, 4), (4, 3), (3, 7), (7, 4), (4, 9), (9, 11), (11, 3), (3, 10), (10, 7)]", "assert pair_wise([2, 4, 4, 6, 6, 7, 2, 12, 8, 12]) == [(2, 4), (4, 4), (4, 6), (6, 6), (6, 7), (7, 2), (2, 12), (12, 8), (8, 12)]", "assert pair_wise([3, 1, 2, 7, 2, 10, 7, 10, 12, 13]) == [(3, 1), (1, 2), (2, 7), (7, 2), (2, 10), (10, 7), (7, 10), (10, 12), (12, 13)]", "assert pair_wise([4, 1, 5, 1, 2, 7, 4, 12, 4, 9]) == [(4, 1), (1, 5), (5, 1), (1, 2), (2, 7), (7, 4), (4, 12), (12, 4), (4, 9)]", "assert pair_wise([5, 6, 8, 6, 2, 2, 5, 13, 13, 10]) == [(5, 6), (6, 8), (8, 6), (6, 2), (2, 2), (2, 5), (5, 13), (13, 13), (13, 10)]", "assert pair_wise([1, 2, 4, 9, 3, 5, 6, 6, 5, 9]) == [(1, 2), (2, 4), (4, 9), (9, 3), (3, 5), (5, 6), (6, 6), (6, 5), (5, 9)]", "assert pair_wise([1, 3, 2, 2, 5, 3, 10, 11, 12, 10]) == [(1, 3), (3, 2), (2, 2), (2, 5), (5, 3), (3, 10), (10, 11), (11, 12), (12, 10)]", "assert pair_wise([4, 2, 8, 5, 10, 10, 11, 7, 9, 15]) == [(4, 2), (2, 8), (8, 5), (5, 10), (10, 10), (10, 11), (11, 7), (7, 9), (9, 15)]", "assert pair_wise([6, 3, 2, 6, 9, 6, 2, 5, 7, 8]) == [(6, 3), (3, 2), (2, 6), (6, 9), (9, 6), (6, 2), (2, 5), (5, 7), (7, 8)]", "assert pair_wise([3, 3, 4, 2, 7, 10, 12, 10, 7, 11]) == [(3, 3), (3, 4), (4, 2), (2, 7), (7, 10), (10, 12), (12, 10), (10, 7), (7, 11)]", "assert pair_wise([3, 4, 4, 5, 9, 4, 12, 12, 4, 15]) == [(3, 4), (4, 4), (4, 5), (5, 9), (9, 4), (4, 12), (12, 12), (12, 4), (4, 15)]", "assert pair_wise([5, 7, 2, 5, 6, 2, 9, 11, 6, 9]) == [(5, 7), (7, 2), (2, 5), (5, 6), (6, 2), (2, 9), (9, 11), (11, 6), (6, 9)]", "assert pair_wise([3, 2, 3, 9, 10, 1, 10, 13, 14, 14]) == [(3, 2), (2, 3), (3, 9), (9, 10), (10, 1), (1, 10), (10, 13), (13, 14), (14, 14)]", "assert pair_wise([3, 1, 7, 3, 8, 4, 7, 8, 13, 13]) == [(3, 1), (1, 7), (7, 3), (3, 8), (8, 4), (4, 7), (7, 8), (8, 13), (13, 13)]", "assert pair_wise([6, 7, 2, 9, 7, 1, 6, 12, 10, 11]) == [(6, 7), (7, 2), (2, 9), (9, 7), (7, 1), (1, 6), (6, 12), (12, 10), (10, 11)]", "assert pair_wise([2, 5, 4, 8, 9, 5, 2, 12, 7, 10]) == [(2, 5), (5, 4), (4, 8), (8, 9), (9, 5), (5, 2), (2, 12), (12, 7), (7, 10)]", "assert pair_wise([5, 5, 3, 2, 4, 1, 11, 12, 5, 9]) == [(5, 5), (5, 3), (3, 2), (2, 4), (4, 1), (1, 11), (11, 12), (12, 5), (5, 9)]", "assert pair_wise([2, 3, 4, 4, 2, 7, 10, 10, 11, 6]) == [(2, 3), (3, 4), (4, 4), (4, 2), (2, 7), (7, 10), (10, 10), (10, 11), (11, 6)]", "assert pair_wise([4, 6, 7, 1, 5, 6, 6, 7, 10, 9]) == [(4, 6), (6, 7), (7, 1), (1, 5), (5, 6), (6, 6), (6, 7), (7, 10), (10, 9)]", "assert pair_wise([1, 5, 3, 2, 8, 5, 5, 3, 10, 15]) == [(1, 5), (5, 3), (3, 2), (2, 8), (8, 5), (5, 5), (5, 3), (3, 10), (10, 15)]", "assert pair_wise([5, 4, 6, 7, 7, 2, 4, 12, 7, 7]) == [(5, 4), (4, 6), (6, 7), (7, 7), (7, 2), (2, 4), (4, 12), (12, 7), (7, 7)]", "assert pair_wise([6, 4, 7, 3, 8, 2, 3, 11, 4, 9]) == [(6, 4), (4, 7), (7, 3), (3, 8), (8, 2), (2, 3), (3, 11), (11, 4), (4, 9)]", "assert pair_wise([1, 2, 1, 3, 9, 10, 11, 11, 6, 15]) == [(1, 2), (2, 1), (1, 3), (3, 9), (9, 10), (10, 11), (11, 11), (11, 6), (6, 15)]", "assert pair_wise([1, 1, 2, 5, 7, 7, 3, 4, 7, 12]) == [(1, 1), (1, 2), (2, 5), (5, 7), (7, 7), (7, 3), (3, 4), (4, 7), (7, 12)]", "assert pair_wise([4, 6, 7, 2, 1, 8, 5, 8, 11, 14]) == [(4, 6), (6, 7), (7, 2), (2, 1), (1, 8), (8, 5), (5, 8), (8, 11), (11, 14)]", "assert pair_wise([4, 3, 1, 5, 7, 6, 6, 13, 10, 13]) == [(4, 3), (3, 1), (1, 5), (5, 7), (7, 6), (6, 6), (6, 13), (13, 10), (10, 13)]", "assert pair_wise([3, 6, 6, 6, 7, 11, 5, 3, 13, 9]) == [(3, 6), (6, 6), (6, 6), (6, 7), (7, 11), (11, 5), (5, 3), (3, 13), (13, 9)]", "assert pair_wise([6, 2, 6, 5, 1, 11, 6, 13, 10, 13]) == [(6, 2), (2, 6), (6, 5), (5, 1), (1, 11), (11, 6), (6, 13), (13, 10), (10, 13)]"], "entry_point": "pair_wise", "repair_prompt": ["Write a function pair_wise to return a list of all pairs of consecutive items in a given list. Ensure that your function handles edge cases. For example, consider lists with fewer than two items. Handle these cases appropriately.\npair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n", "Write a function pair_wise to return a list of all pairs of consecutive items in a given list, ensuring that the pairs are consecutive. Handle edge cases such as lists with fewer than two items appropriately.\npair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n", "Write a function pair_wise to return a list of all pairs of consecutive items in a given list, ensuring edge cases are handled, like lists with fewer than two items.\npair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import tee\n\ndef pair_wise(input_list: List) -> List[Tuple]:\n    \"\"\"\n    Generate pairs of consecutive items in a given list.\n\n    Args:\n    input_list: A list of items.\n\n    Returns:\n    A list of tuples representing pairs of consecutive items in the input list.\n    \"\"\"\n\n    if len(input_list) < 2:\n        return []\n\n    iter1, iter2 = tee(input_list)\n    next(iter2, None)\n\n    return list(zip(iter1, iter2))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate pairs of consecutive items in the input list.\n\n    Args:\n        input_list: A list of integers.\n\n    Returns:\n        A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n    \n    if len(input_list) < 2:\n        return []\n    \n    pairs = []\n    for i in range(len(input_list) - 1):\n        pairs.append((input_list[i], input_list[i+1]))\n    \n    return pairs\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate pairs of consecutive items from the input list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n\n    if len(input_list) < 2:\n        return []\n\n    pairs = [(input_list[i], input_list[i+1]) for i in range(len(input_list) - 1)]\n    \n    return pairs\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import tee\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate pairs of consecutive items in a list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n\n    if len(input_list) < 2:\n        return []\n\n    a, b = tee(input_list)\n    next(b, None)\n\n    return list(zip(a, b))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nimport itertools\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate consecutive pairs of items in a given list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n\n    pairs = list(zip(input_list, input_list[1:]))\n    return pairs\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate consecutive pairs of items in a given list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n\n    pairs = list(zip(input_list, input_list[1:]))\n    return pairs\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef pair_wise(input_list: List) -> List[Tuple]:\n    \"\"\"\n    Function to return a list of all pairs of consecutive items in a given list\n\n    Args:\n    input_list (List): Input list of items\n\n    Returns:\n    List[Tuple]: List of tuples containing consecutive pairs of items\n    \"\"\"\n    pairs = []\n    for i in range(len(input_list) - 1):\n        pairs.append((input_list[i], input_list[i + 1]))\n    return pairs\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nimport itertools\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate pairs of consecutive items in a list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples representing consecutive pairs of integers from the input list.\n    \"\"\"\n\n    pairs = list(zip(input_list, input_list[1:]))\n    return pairs\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom itertools import tee\n\ndef pairwise(iterable):\n    \"s -> (s0,s1), (s1,s2), (s2, s3), ...\"\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate all possible consecutive pairs in a given list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples representing consecutive pairs.\n    \"\"\"\n\n    if len(input_list) < 2:\n        return []\n\n    return list(pairwise(input_list))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate pairs of consecutive items in a given list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n\n    if len(input_list) < 2:\n        return []  # Return an empty list for lists with fewer than two items\n\n    return list(zip(input_list, input_list[1:]))\n\n"], "plans": ["requirement pool:\n- Handle edge cases in pair generation\n- Optimize pair generation algorithm for efficiency\n- Ensure output format meets user expectations\nWe will use Python and the itertools library to efficiently generate pairs of consecutive items in a given list. We will handle edge cases by checking the length of the input list and returning an empty list if it has fewer than two items.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Consecutive items refer to elements in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    pair_wise([1]) = []\n    Explanation: Since the list has fewer than two items, there are no pairs to form, so the expected output is an empty list.\n    pair_wise([]) = []\n    Explanation: An empty list cannot form any pairs, so the expected output is an empty list.\n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: The list has two items, so there is only one pair that can be formed.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(lst) < 2:\n            return [] \n        (other code)\n", "requirement pool:\n- Handle consecutive pairs in the list\n- Ensure edge cases are managed effectively\n- Optimize the function for performance\nWe will use a simple approach to iterate through the input list and create pairs of consecutive items. We will handle edge cases by checking if the list has fewer than two items.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Refers to items in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    Explanation: The function should return pairs of consecutive items in the list. In this case, each pair consists of two consecutive items in the list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(lst) < 2:\n            return []\n        (other code)\n", "requirement pool:\n- Handle edge cases where the list has fewer than two items\n- Ensure the function returns pairs of consecutive items correctly\n- Optimize the function for efficiency\nWe will use a simple approach to iterate through the input list and create pairs of consecutive items. We will handle edge cases by checking if the list has fewer than two items.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Refers to items in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously:\n    - Iterate through the input list and create pairs of consecutive items\n    - Handle edge cases by checking if the list has fewer than two items\n\n# [edge case] \n    pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    Explanation: The function should return all pairs of consecutive items in the given list. In this case, each pair consists of two consecutive items from the list.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(lst) < 2:\n            return []\n        (other code)\n", "requirement pool:\n- Implement pair_wise function to generate consecutive pairs\n- Handle edge cases such as lists with fewer than two items\n- Optimize the function for performance\nWe will use Python and the itertools library to efficiently generate pairs of consecutive items in a list while handling edge cases appropriately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Consecutive items refer to elements in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python and the itertools library, we can implement the code as follows:\n```python\nfrom itertools import tee\n\ndef pair_wise(lst):\n    if len(lst) < 2:\n        return []\n    \n    a, b = tee(lst)\n    next(b, None)\n    \n    return list(zip(a, b))\n```\n\n# [edge case] \n    pair_wise([1]) = []\n    Explanation: Since there is only one item in the list, there are no pairs to form.\n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: There is only one pair of consecutive items in the list.\n    pair_wise([]) = []\n    Explanation: Since the list is empty, there are no pairs to form.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided already handles cases where there are fewer than two items in the list.\n", "requirement pool:\n- Implement pair_wise function to generate consecutive pairs\n- Handle edge cases such as lists with fewer than two items\nWe will use Python and the itertools library to efficiently generate consecutive pairs of items in a given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive pairs'\n    Explanation: The core concept is to generate pairs of consecutive items in a list, where each pair consists of two items that are next to each other in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python and the itertools library, we can implement the code as follows:\n```python\nimport itertools\n\ndef pair_wise(lst):\n    pairs = list(zip(lst, lst[1:]))\n    return pairs\n```\n\n# [edge case] \n    pair_wise([1]) = []\n    Explanation: Since there is only one item in the list, there are no consecutive pairs to generate.\n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: There is only one pair of consecutive items in the list, which is (1, 2).\n    pair_wise([]) = []\n    Explanation: When the list is empty, there are no pairs to generate.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the code implementation already covers scenarios where there are fewer than two items in the list.\n", "requirement pool:\n- Implement pair_wise function to generate consecutive pairs\n- Handle edge cases such as lists with fewer than two items\nWe will use Python and the itertools library to efficiently generate consecutive pairs of items in a given list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive pairs'\n    Explanation: The core concept is to generate pairs of consecutive items in a list, where each pair consists of two items that are next to each other in the list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python and the itertools library, we can implement the function as follows:\n```python\nimport itertools\n\ndef pair_wise(lst):\n    pairs = list(zip(lst, lst[1:]))\n    return pairs\n```\n\n# [edge case] \n    pair_wise([1]) = []\n    Explanation: Since there is only one item in the list, there are no consecutive pairs to generate.\n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: There is only one pair of consecutive items in the list, which is (1, 2).\n    pair_wise([]) = []\n    Explanation: When the list is empty, there are no pairs to generate.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided already handles cases where there are fewer than two items in the list by returning an empty list or a single pair.\n", "requirement pool:\n- Handle consecutive pairs in the list efficiently\n- Ensure edge cases like lists with fewer than two items are managed correctly\n- Optimize the function for performance\nWe will use Python and the itertools library to efficiently generate pair-wise combinations of consecutive items in a list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Consecutive items refer to elements in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using Python and the itertools library, we can implement the code as follows:\n```python\nimport itertools\n\ndef pair_wise(lst):\n    return list(zip(lst, lst[1:]))\n\n# Test the function\nprint(pair_wise([1, 1, 2, 3, 3, 4, 4, 5]))\n```\n\n# [edge case] \n    pair_wise([1]) = []\n    Explanation: When the input list has fewer than two items, there are no consecutive pairs to form, so the expected output is an empty list.\n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: The input list has two items, and there is only one consecutive pair that can be formed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of the function already accounts for lists with fewer than two items by returning an empty list in such cases.\n", "requirement pool:\n- Handle edge cases like lists with fewer than two items\n- Generate all possible consecutive pairs accurately\n- Optimize performance for large input lists\nWe will use Python and the itertools library to efficiently generate all possible consecutive pairs in a given list, while handling edge cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive pairs'\n    Explanation: The core concept is to generate pairs of consecutive items in a list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and the itertools library, we can implement the function as follows:\n\n```python\nimport itertools\n\ndef pair_wise(lst):\n    pairs = list(zip(lst, lst[1:]))\n    return pairs\n```\n\n# [edge case] \n    pair_wise([1]) = []\n    Explanation: When the input list has only one item, there are no consecutive pairs to generate.\n    \n    pair_wise([]) = []\n    Explanation: When the input list is empty, there are no consecutive pairs to generate.\n    \n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: When the input list has two items, there is one consecutive pair to generate.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided above already handles cases where there are fewer than two items in the list.\n", "requirement pool:\n- Handle edge cases like lists with fewer than two items\n- Generate all possible consecutive pairs accurately\n- Optimize performance for large input lists\nWe will use Python and the itertools library to efficiently generate all possible consecutive pairs in a given list, while handling edge cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Refers to items in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and the itertools library, we can implement the code using the pairwise function from itertools to generate consecutive pairs efficiently. We also need to handle edge cases like lists with fewer than two items.\n\n# [edge case] \n    pair_wise([1, 2]) = [(1, 2)]\n    Explanation: In this case, there are only two items in the list, so we can only form one pair.\n    pair_wise([1]) = []\n    Explanation: With only one item in the list, there are no pairs to form.\n    pair_wise([]) = []\n    Explanation: An empty list cannot form any pairs.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(lst) < 2:\n            return []\n        (other code)\n", "requirement pool:\n- Handle edge cases for lists with fewer than two items\n- Ensure efficient pair generation for large lists\n- Optimize the function for speed and memory usage\nWe will use Python and the itertools library to efficiently generate pairs of consecutive items in a given list. We will handle edge cases by checking the length of the input list and returning an empty list if it has fewer than two items.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'consecutive items'\n    Explanation: Consecutive items refer to elements in the list that appear one after the other without any gaps.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using Python and itertools library, we can follow the steps provided in the plan to generate pairs of consecutive items. We will also need to handle edge cases where the input list has fewer than two items.\n\n# [edge case] \n    pair_wise([1]) == []\n    Explanation: When the input list has only one item, there are no pairs to form, so the expected output is an empty list.\n    pair_wise([]) == []\n    Explanation: When the input list is empty, there are no pairs to form, so the expected output is an empty list.\n    pair_wise([1, 2]) == [(1, 2)]\n    Explanation: When the input list has two items, there is only one pair that can be formed, which is (1, 2).\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if len(lst) < 2:\n            return []  # Return an empty list for lists with fewer than two items\n        (other code)\n"], "test": ["def check(pair_wise):\n\tassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "def check(pair_wise):\n\tassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "def check(pair_wise):\n\tassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]", "def check(pair_wise):\n\tassert pair_wise([1, 2, 5, 6, 5, 9, 9, 3]) == [(1, 2), (2, 5), (5, 6), (6, 5), (5, 9), (9, 9), (9, 3)]", "def check(pair_wise):\n\tassert pair_wise([1, 3, 4, 3, 1, 7, 9, 7]) == [(1, 3), (3, 4), (4, 3), (3, 1), (1, 7), (7, 9), (9, 7)]", "def check(pair_wise):\n\tassert pair_wise([6, 4, 4, 1, 3, 2, 2, 5]) == [(6, 4), (4, 4), (4, 1), (1, 3), (3, 2), (2, 2), (2, 5)]", "def check(pair_wise):\n\tassert pair_wise([5, 1, 1, 1, 2, 5, 2, 8]) == [(5, 1), (1, 1), (1, 1), (1, 2), (2, 5), (5, 2), (2, 8)]", "def check(pair_wise):\n\tassert pair_wise([5, 5, 1, 7, 1, 5, 4, 1]) == [(5, 5), (5, 1), (1, 7), (7, 1), (1, 5), (5, 4), (4, 1)]", "def check(pair_wise):\n\tassert pair_wise([6, 4, 3, 3, 6, 8, 1, 3]) == [(6, 4), (4, 3), (3, 3), (3, 6), (6, 8), (8, 1), (1, 3)]", "def check(pair_wise):\n\tassert pair_wise([5, 2, 1, 5, 2, 5, 6, 4]) == [(5, 2), (2, 1), (1, 5), (5, 2), (2, 5), (5, 6), (6, 4)]", "def check(pair_wise):\n\tassert pair_wise([3, 5, 3, 4, 7, 4, 4, 7]) == [(3, 5), (5, 3), (3, 4), (4, 7), (7, 4), (4, 4), (4, 7)]", "def check(pair_wise):\n\tassert pair_wise([6, 6, 1, 4, 3, 4, 3, 10]) == [(6, 6), (6, 1), (1, 4), (4, 3), (3, 4), (4, 3), (3, 10)]", "def check(pair_wise):\n\tassert pair_wise([6, 3, 4, 6, 4, 9, 8, 10]) == [(6, 3), (3, 4), (4, 6), (6, 4), (4, 9), (9, 8), (8, 10)]", "def check(pair_wise):\n\tassert pair_wise([6, 1, 4, 4, 2, 8, 2, 3]) == [(6, 1), (1, 4), (4, 4), (4, 2), (2, 8), (8, 2), (2, 3)]", "def check(pair_wise):\n\tassert pair_wise([2, 3, 1, 3, 8, 2, 5, 10]) == [(2, 3), (3, 1), (1, 3), (3, 8), (8, 2), (2, 5), (5, 10)]", "def check(pair_wise):\n\tassert pair_wise([3, 5, 7, 4, 5, 3, 7, 5]) == [(3, 5), (5, 7), (7, 4), (4, 5), (5, 3), (3, 7), (7, 5)]", "def check(pair_wise):\n\tassert pair_wise([2, 6, 2, 7, 7, 5, 1, 10]) == [(2, 6), (6, 2), (2, 7), (7, 7), (7, 5), (5, 1), (1, 10)]", "def check(pair_wise):\n\tassert pair_wise([1, 3, 7, 6, 5, 4, 8, 7]) == [(1, 3), (3, 7), (7, 6), (6, 5), (5, 4), (4, 8), (8, 7)]", "def check(pair_wise):\n\tassert pair_wise([4, 6, 4, 7, 6, 4, 4, 8]) == [(4, 6), (6, 4), (4, 7), (7, 6), (6, 4), (4, 4), (4, 8)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 2, 5, 5, 1, 6, 8]) == [(2, 4), (4, 2), (2, 5), (5, 5), (5, 1), (1, 6), (6, 8)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 3, 7, 1, 1, 9, 4]) == [(2, 4), (4, 3), (3, 7), (7, 1), (1, 1), (1, 9), (9, 4)]", "def check(pair_wise):\n\tassert pair_wise([3, 1, 2, 3, 1, 4, 6, 8]) == [(3, 1), (1, 2), (2, 3), (3, 1), (1, 4), (4, 6), (6, 8)]", "def check(pair_wise):\n\tassert pair_wise([5, 6, 3, 2, 2, 4, 5, 8]) == [(5, 6), (6, 3), (3, 2), (2, 2), (2, 4), (4, 5), (5, 8)]", "def check(pair_wise):\n\tassert pair_wise([3, 3, 1, 3, 1, 7, 8, 6]) == [(3, 3), (3, 1), (1, 3), (3, 1), (1, 7), (7, 8), (8, 6)]", "def check(pair_wise):\n\tassert pair_wise([4, 4, 6, 5, 4, 1, 9, 10]) == [(4, 4), (4, 6), (6, 5), (5, 4), (4, 1), (1, 9), (9, 10)]", "def check(pair_wise):\n\tassert pair_wise([6, 2, 2, 6, 8, 6, 1, 8]) == [(6, 2), (2, 2), (2, 6), (6, 8), (8, 6), (6, 1), (1, 8)]", "def check(pair_wise):\n\tassert pair_wise([1, 5, 4, 6, 7, 2, 4, 6]) == [(1, 5), (5, 4), (4, 6), (6, 7), (7, 2), (2, 4), (4, 6)]", "def check(pair_wise):\n\tassert pair_wise([5, 5, 1, 6, 8, 2, 1, 10]) == [(5, 5), (5, 1), (1, 6), (6, 8), (8, 2), (2, 1), (1, 10)]", "def check(pair_wise):\n\tassert pair_wise([3, 2, 5, 1, 1, 5, 8, 7]) == [(3, 2), (2, 5), (5, 1), (1, 1), (1, 5), (5, 8), (8, 7)]", "def check(pair_wise):\n\tassert pair_wise([6, 1, 7, 3, 8, 6, 6, 3]) == [(6, 1), (1, 7), (7, 3), (3, 8), (8, 6), (6, 6), (6, 3)]", "def check(pair_wise):\n\tassert pair_wise([1, 5, 3, 6, 2, 5, 9, 6]) == [(1, 5), (5, 3), (3, 6), (6, 2), (2, 5), (5, 9), (9, 6)]", "def check(pair_wise):\n\tassert pair_wise([4, 6, 6, 3, 5, 9, 2, 7]) == [(4, 6), (6, 6), (6, 3), (3, 5), (5, 9), (9, 2), (2, 7)]", "def check(pair_wise):\n\tassert pair_wise([3, 1, 6, 7, 4, 1, 3, 10]) == [(3, 1), (1, 6), (6, 7), (7, 4), (4, 1), (1, 3), (3, 10)]", "def check(pair_wise):\n\tassert pair_wise([4, 1, 1, 8, 1, 2, 6, 7]) == [(4, 1), (1, 1), (1, 8), (8, 1), (1, 2), (2, 6), (6, 7)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 2, 8, 2, 8, 9, 5]) == [(2, 4), (4, 2), (2, 8), (8, 2), (2, 8), (8, 9), (9, 5)]", "def check(pair_wise):\n\tassert pair_wise([6, 4, 6, 4, 1, 9, 2, 4]) == [(6, 4), (4, 6), (6, 4), (4, 1), (1, 9), (9, 2), (2, 4)]", "def check(pair_wise):\n\tassert pair_wise([1, 2, 3, 7, 12]) == [(1, 2), (2, 3), (3, 7), (7, 12)]", "def check(pair_wise):\n\tassert pair_wise([1, 5, 6, 14, 15]) == [(1, 5), (5, 6), (6, 14), (14, 15)]", "def check(pair_wise):\n\tassert pair_wise([6, 9, 6, 14, 10]) == [(6, 9), (9, 6), (6, 14), (14, 10)]", "def check(pair_wise):\n\tassert pair_wise([6, 4, 11, 8, 14]) == [(6, 4), (4, 11), (11, 8), (8, 14)]", "def check(pair_wise):\n\tassert pair_wise([3, 8, 12, 5, 9]) == [(3, 8), (8, 12), (12, 5), (5, 9)]", "def check(pair_wise):\n\tassert pair_wise([1, 6, 11, 10, 10]) == [(1, 6), (6, 11), (11, 10), (10, 10)]", "def check(pair_wise):\n\tassert pair_wise([6, 9, 12, 4, 10]) == [(6, 9), (9, 12), (12, 4), (4, 10)]", "def check(pair_wise):\n\tassert pair_wise([6, 1, 3, 14, 9]) == [(6, 1), (1, 3), (3, 14), (14, 9)]", "def check(pair_wise):\n\tassert pair_wise([3, 5, 3, 8, 13]) == [(3, 5), (5, 3), (3, 8), (8, 13)]", "def check(pair_wise):\n\tassert pair_wise([4, 3, 5, 6, 7]) == [(4, 3), (3, 5), (5, 6), (6, 7)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 12, 6, 5]) == [(2, 4), (4, 12), (12, 6), (6, 5)]", "def check(pair_wise):\n\tassert pair_wise([6, 5, 12, 14, 15]) == [(6, 5), (5, 12), (12, 14), (14, 15)]", "def check(pair_wise):\n\tassert pair_wise([6, 8, 10, 4, 15]) == [(6, 8), (8, 10), (10, 4), (4, 15)]", "def check(pair_wise):\n\tassert pair_wise([3, 1, 11, 9, 7]) == [(3, 1), (1, 11), (11, 9), (9, 7)]", "def check(pair_wise):\n\tassert pair_wise([2, 7, 3, 8, 15]) == [(2, 7), (7, 3), (3, 8), (8, 15)]", "def check(pair_wise):\n\tassert pair_wise([3, 3, 10, 8, 8]) == [(3, 3), (3, 10), (10, 8), (8, 8)]", "def check(pair_wise):\n\tassert pair_wise([1, 7, 10, 7, 11]) == [(1, 7), (7, 10), (10, 7), (7, 11)]", "def check(pair_wise):\n\tassert pair_wise([2, 8, 4, 6, 6]) == [(2, 8), (8, 4), (4, 6), (6, 6)]", "def check(pair_wise):\n\tassert pair_wise([5, 8, 8, 13, 7]) == [(5, 8), (8, 8), (8, 13), (13, 7)]", "def check(pair_wise):\n\tassert pair_wise([3, 9, 2, 13, 15]) == [(3, 9), (9, 2), (2, 13), (13, 15)]", "def check(pair_wise):\n\tassert pair_wise([3, 2, 10, 13, 11]) == [(3, 2), (2, 10), (10, 13), (13, 11)]", "def check(pair_wise):\n\tassert pair_wise([2, 7, 2, 7, 11]) == [(2, 7), (7, 2), (2, 7), (7, 11)]", "def check(pair_wise):\n\tassert pair_wise([2, 2, 4, 4, 12]) == [(2, 2), (2, 4), (4, 4), (4, 12)]", "def check(pair_wise):\n\tassert pair_wise([1, 3, 10, 13, 6]) == [(1, 3), (3, 10), (10, 13), (13, 6)]", "def check(pair_wise):\n\tassert pair_wise([5, 3, 12, 12, 5]) == [(5, 3), (3, 12), (12, 12), (12, 5)]", "def check(pair_wise):\n\tassert pair_wise([6, 10, 4, 14, 10]) == [(6, 10), (10, 4), (4, 14), (14, 10)]", "def check(pair_wise):\n\tassert pair_wise([1, 9, 3, 10, 5]) == [(1, 9), (9, 3), (3, 10), (10, 5)]", "def check(pair_wise):\n\tassert pair_wise([4, 2, 7, 10, 11]) == [(4, 2), (2, 7), (7, 10), (10, 11)]", "def check(pair_wise):\n\tassert pair_wise([2, 1, 12, 12, 11]) == [(2, 1), (1, 12), (12, 12), (12, 11)]", "def check(pair_wise):\n\tassert pair_wise([4, 4, 12, 14, 11]) == [(4, 4), (4, 12), (12, 14), (14, 11)]", "def check(pair_wise):\n\tassert pair_wise([6, 8, 4, 9, 12]) == [(6, 8), (8, 4), (4, 9), (9, 12)]", "def check(pair_wise):\n\tassert pair_wise([4, 3, 8, 8, 6]) == [(4, 3), (3, 8), (8, 8), (8, 6)]", "def check(pair_wise):\n\tassert pair_wise([3, 9, 2, 7, 8]) == [(3, 9), (9, 2), (2, 7), (7, 8)]", "def check(pair_wise):\n\tassert pair_wise([5, 3, 7, 5, 4, 3, 3, 4, 10, 12]) == [(5, 3), (3, 7), (7, 5), (5, 4), (4, 3), (3, 3), (3, 4), (4, 10), (10, 12)]", "def check(pair_wise):\n\tassert pair_wise([4, 5, 1, 9, 2, 11, 7, 12, 11, 15]) == [(4, 5), (5, 1), (1, 9), (9, 2), (2, 11), (11, 7), (7, 12), (12, 11), (11, 15)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 2, 9, 9, 4, 12, 7, 10, 15]) == [(2, 4), (4, 2), (2, 9), (9, 9), (9, 4), (4, 12), (12, 7), (7, 10), (10, 15)]", "def check(pair_wise):\n\tassert pair_wise([3, 2, 8, 6, 7, 10, 6, 12, 9, 13]) == [(3, 2), (2, 8), (8, 6), (6, 7), (7, 10), (10, 6), (6, 12), (12, 9), (9, 13)]", "def check(pair_wise):\n\tassert pair_wise([6, 5, 3, 4, 2, 7, 8, 6, 7, 14]) == [(6, 5), (5, 3), (3, 4), (4, 2), (2, 7), (7, 8), (8, 6), (6, 7), (7, 14)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 3, 7, 4, 9, 11, 3, 10, 7]) == [(2, 4), (4, 3), (3, 7), (7, 4), (4, 9), (9, 11), (11, 3), (3, 10), (10, 7)]", "def check(pair_wise):\n\tassert pair_wise([2, 4, 4, 6, 6, 7, 2, 12, 8, 12]) == [(2, 4), (4, 4), (4, 6), (6, 6), (6, 7), (7, 2), (2, 12), (12, 8), (8, 12)]", "def check(pair_wise):\n\tassert pair_wise([3, 1, 2, 7, 2, 10, 7, 10, 12, 13]) == [(3, 1), (1, 2), (2, 7), (7, 2), (2, 10), (10, 7), (7, 10), (10, 12), (12, 13)]", "def check(pair_wise):\n\tassert pair_wise([4, 1, 5, 1, 2, 7, 4, 12, 4, 9]) == [(4, 1), (1, 5), (5, 1), (1, 2), (2, 7), (7, 4), (4, 12), (12, 4), (4, 9)]", "def check(pair_wise):\n\tassert pair_wise([5, 6, 8, 6, 2, 2, 5, 13, 13, 10]) == [(5, 6), (6, 8), (8, 6), (6, 2), (2, 2), (2, 5), (5, 13), (13, 13), (13, 10)]", "def check(pair_wise):\n\tassert pair_wise([1, 2, 4, 9, 3, 5, 6, 6, 5, 9]) == [(1, 2), (2, 4), (4, 9), (9, 3), (3, 5), (5, 6), (6, 6), (6, 5), (5, 9)]", "def check(pair_wise):\n\tassert pair_wise([1, 3, 2, 2, 5, 3, 10, 11, 12, 10]) == [(1, 3), (3, 2), (2, 2), (2, 5), (5, 3), (3, 10), (10, 11), (11, 12), (12, 10)]", "def check(pair_wise):\n\tassert pair_wise([4, 2, 8, 5, 10, 10, 11, 7, 9, 15]) == [(4, 2), (2, 8), (8, 5), (5, 10), (10, 10), (10, 11), (11, 7), (7, 9), (9, 15)]", "def check(pair_wise):\n\tassert pair_wise([6, 3, 2, 6, 9, 6, 2, 5, 7, 8]) == [(6, 3), (3, 2), (2, 6), (6, 9), (9, 6), (6, 2), (2, 5), (5, 7), (7, 8)]", "def check(pair_wise):\n\tassert pair_wise([3, 3, 4, 2, 7, 10, 12, 10, 7, 11]) == [(3, 3), (3, 4), (4, 2), (2, 7), (7, 10), (10, 12), (12, 10), (10, 7), (7, 11)]", "def check(pair_wise):\n\tassert pair_wise([3, 4, 4, 5, 9, 4, 12, 12, 4, 15]) == [(3, 4), (4, 4), (4, 5), (5, 9), (9, 4), (4, 12), (12, 12), (12, 4), (4, 15)]", "def check(pair_wise):\n\tassert pair_wise([5, 7, 2, 5, 6, 2, 9, 11, 6, 9]) == [(5, 7), (7, 2), (2, 5), (5, 6), (6, 2), (2, 9), (9, 11), (11, 6), (6, 9)]", "def check(pair_wise):\n\tassert pair_wise([3, 2, 3, 9, 10, 1, 10, 13, 14, 14]) == [(3, 2), (2, 3), (3, 9), (9, 10), (10, 1), (1, 10), (10, 13), (13, 14), (14, 14)]", "def check(pair_wise):\n\tassert pair_wise([3, 1, 7, 3, 8, 4, 7, 8, 13, 13]) == [(3, 1), (1, 7), (7, 3), (3, 8), (8, 4), (4, 7), (7, 8), (8, 13), (13, 13)]", "def check(pair_wise):\n\tassert pair_wise([6, 7, 2, 9, 7, 1, 6, 12, 10, 11]) == [(6, 7), (7, 2), (2, 9), (9, 7), (7, 1), (1, 6), (6, 12), (12, 10), (10, 11)]", "def check(pair_wise):\n\tassert pair_wise([2, 5, 4, 8, 9, 5, 2, 12, 7, 10]) == [(2, 5), (5, 4), (4, 8), (8, 9), (9, 5), (5, 2), (2, 12), (12, 7), (7, 10)]", "def check(pair_wise):\n\tassert pair_wise([5, 5, 3, 2, 4, 1, 11, 12, 5, 9]) == [(5, 5), (5, 3), (3, 2), (2, 4), (4, 1), (1, 11), (11, 12), (12, 5), (5, 9)]", "def check(pair_wise):\n\tassert pair_wise([2, 3, 4, 4, 2, 7, 10, 10, 11, 6]) == [(2, 3), (3, 4), (4, 4), (4, 2), (2, 7), (7, 10), (10, 10), (10, 11), (11, 6)]", "def check(pair_wise):\n\tassert pair_wise([4, 6, 7, 1, 5, 6, 6, 7, 10, 9]) == [(4, 6), (6, 7), (7, 1), (1, 5), (5, 6), (6, 6), (6, 7), (7, 10), (10, 9)]", "def check(pair_wise):\n\tassert pair_wise([1, 5, 3, 2, 8, 5, 5, 3, 10, 15]) == [(1, 5), (5, 3), (3, 2), (2, 8), (8, 5), (5, 5), (5, 3), (3, 10), (10, 15)]", "def check(pair_wise):\n\tassert pair_wise([5, 4, 6, 7, 7, 2, 4, 12, 7, 7]) == [(5, 4), (4, 6), (6, 7), (7, 7), (7, 2), (2, 4), (4, 12), (12, 7), (7, 7)]", "def check(pair_wise):\n\tassert pair_wise([6, 4, 7, 3, 8, 2, 3, 11, 4, 9]) == [(6, 4), (4, 7), (7, 3), (3, 8), (8, 2), (2, 3), (3, 11), (11, 4), (4, 9)]", "def check(pair_wise):\n\tassert pair_wise([1, 2, 1, 3, 9, 10, 11, 11, 6, 15]) == [(1, 2), (2, 1), (1, 3), (3, 9), (9, 10), (10, 11), (11, 11), (11, 6), (6, 15)]", "def check(pair_wise):\n\tassert pair_wise([1, 1, 2, 5, 7, 7, 3, 4, 7, 12]) == [(1, 1), (1, 2), (2, 5), (5, 7), (7, 7), (7, 3), (3, 4), (4, 7), (7, 12)]", "def check(pair_wise):\n\tassert pair_wise([4, 6, 7, 2, 1, 8, 5, 8, 11, 14]) == [(4, 6), (6, 7), (7, 2), (2, 1), (1, 8), (8, 5), (5, 8), (8, 11), (11, 14)]", "def check(pair_wise):\n\tassert pair_wise([4, 3, 1, 5, 7, 6, 6, 13, 10, 13]) == [(4, 3), (3, 1), (1, 5), (5, 7), (7, 6), (6, 6), (6, 13), (13, 10), (10, 13)]", "def check(pair_wise):\n\tassert pair_wise([3, 6, 6, 6, 7, 11, 5, 3, 13, 9]) == [(3, 6), (6, 6), (6, 6), (6, 7), (7, 11), (11, 5), (5, 3), (3, 13), (13, 9)]", "def check(pair_wise):\n\tassert pair_wise([6, 2, 6, 5, 1, 11, 6, 13, 10, 13]) == [(6, 2), (2, 6), (6, 5), (5, 1), (1, 11), (11, 6), (6, 13), (13, 10), (10, 13)]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef pair_wise(input_list: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Generate pairs of consecutive items in a given list.\n\n    Args:\n    input_list: A list of integers.\n\n    Returns:\n    A list of tuples, each tuple containing a pair of consecutive items from the input list.\n    \"\"\"\n\n    if len(input_list) < 2:\n        return []  # Return an empty list for lists with fewer than two items\n\n    return list(zip(input_list, input_list[1:]))\n\n", "passed": true, "pass": true, "pass_num": 10, "round": 354, "mutate_method": "expand_one2two", "parent_index": 519}
