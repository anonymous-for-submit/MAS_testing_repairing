{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 162, "prompt": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).", "code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)", "test_imports": [], "test_list": ["assert sum_series(6)==12", "assert sum_series(10)==30", "assert sum_series(9)==25", "assert sum_series(5) == 9", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(1) == 1", "assert sum_series(4) == 6", "assert sum_series(4) == 6", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(10) == 30", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(6) == 12", "assert sum_series(6) == 12", "assert sum_series(3) == 4", "assert sum_series(8) == 20", "assert sum_series(9) == 25", "assert sum_series(10) == 30", "assert sum_series(5) == 9", "assert sum_series(3) == 4", "assert sum_series(1) == 1", "assert sum_series(11) == 36", "assert sum_series(3) == 4", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(10) == 30", "assert sum_series(9) == 25", "assert sum_series(3) == 4", "assert sum_series(6) == 12", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(13) == 49", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(8) == 20", "assert sum_series(8) == 20", "assert sum_series(15) == 64", "assert sum_series(13) == 49", "assert sum_series(12) == 42", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(15) == 64", "assert sum_series(15) == 64", "assert sum_series(12) == 42", "assert sum_series(11) == 36", "assert sum_series(11) == 36", "assert sum_series(15) == 64", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(7) == 16", "assert sum_series(5) == 9", "assert sum_series(10) == 30", "assert sum_series(12) == 42", "assert sum_series(7) == 16", "assert sum_series(15) == 64", "assert sum_series(9) == 25", "assert sum_series(14) == 56", "assert sum_series(7) == 16", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(7) == 16", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(8) == 20", "assert sum_series(11) == 36", "assert sum_series(6) == 12", "assert sum_series(11) == 36", "assert sum_series(12) == 42", "assert sum_series(4) == 6", "assert sum_series(11) == 36", "assert sum_series(10) == 30", "assert sum_series(8) == 20", "assert sum_series(5) == 9", "assert sum_series(12) == 42", "assert sum_series(10) == 30", "assert sum_series(4) == 6", "assert sum_series(6) == 12", "assert sum_series(13) == 49", "assert sum_series(4) == 6", "assert sum_series(9) == 25", "assert sum_series(12) == 42", "assert sum_series(5) == 9", "assert sum_series(7) == 16", "assert sum_series(11) == 36", "assert sum_series(13) == 49", "assert sum_series(13) == 49", "assert sum_series(8) == 20", "assert sum_series(9) == 25"], "entry_point": "sum_series", "repair_prompt": ["Write a function sum_series to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nsum_series(6)==12\n", "Write a function sum_series that computes the sum of (n - 2*i) for each iteration where i ranges from 0 to n // 2, with an example of adding n + (n-2) + (n-4) until the condition n-x =< 0 is met.\nsum_series(6)==12\n", "Write a function sum_series to calculate the sum (n - 2*i) for i=0 to n // 2, where each term is n + (n-2) + (n-4) until n-x =< 0.\nsum_series(6)==12\n"], "completions": ["from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series of numbers where each number is obtained by subtracting 2*i from n.\n\n    Args:\n        n: An integer representing the input value\n\n    Returns:\n        An integer representing the sum of the series\n    \"\"\"\n    sum_series = 0\n\n    for i in range(n // 2 + 1):\n        sum_series += n - 2*i\n\n    return sum_series\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series where each term is calculated as (n - 2*i) for i=0 to n // 2.\n\n    Args:\n        n: An integer representing the number of terms in the series.\n\n    Returns:\n        An integer representing the sum of the series.\n\n    Examples:\n        >>> sum_series(6)\n        10\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series where each term is n - 2*i, starting from i=0 to n//2.\n\n    Args:\n        n: An integer representing the upper limit of the series\n\n    Returns:\n        int: The sum of the series (n - 2*i) from i=0 to n // 2\n    \"\"\"\n    sum_series = 0\n\n    for i in range(n // 2 + 1):\n        sum_series += n - 2*i\n\n    return sum_series\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Computes the sum of a series based on a specific formula provided in the requirement.\n\n    Args:\n        n: An integer representing the input value.\n\n    Returns:\n        An integer representing the sum of the series computed.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + (n - 2)\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the series based on the specified formula.\n\n    Args:\n        n (int): An integer representing the input value.\n\n    Returns:\n        int: An integer representing the sum of the series.\n    \"\"\"\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 1)\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the specified series based on the input value 'n'.\n    \n    Args:\n        n (int): An integer representing the input value\n        \n    Returns:\n        int: An integer representing the sum of the series\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output: 12\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series of terms based on the formula (n - 2*i) for i=0 to n // 2.\n\n    Args:\n        n (int): An integer representing the upper limit of the series.\n\n    Returns:\n        int: The sum of the series.\n\n    Examples:\n        >>> sum_series(6)\n        12\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output should be 12\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculates the sum of a series of terms based on the formula (n - 2*i) for i=0 to n // 2.\n\n    Args:\n        n (int): An integer representing the upper limit of the series.\n\n    Returns:\n        int: The sum of the series.\n\n    Examples:\n        >>> sum_series(6)\n        12\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output should be 12\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series of terms based on a specific formula.\n\n    Args:\n        n (int): An integer representing the upper limit of the series.\n\n    Returns:\n        int: An integer representing the sum of the series.\n    \"\"\"\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output should be 12\n", "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series based on the formula (n - 2*i) from i=0 to n // 2.\n\n    Args:\n        n: An integer representing the upper limit of the series.\n\n    Returns:\n        An integer representing the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum_series_sum = 0\n\n    for i in range(n // 2 + 1):\n        term = n - 2*i\n        sum_series_sum += term\n\n    return sum_series_sum\n"], "plans": ["requirement analysis:\nThe function should iterate from 0 to n//2 and calculate the sum of (n - 2*i) at each step. It should handle edge cases like n=0 or n=1 appropriately.\nrequirement pool:\n- Implement the core logic to iterate and calculate the sum series\n- Perform input validation to ensure 'n' is a positive integer\n- Optimize the function for better performance by minimizing unnecessary calculations\nWe will use a simple Python function to implement the sum_series calculation without the need for defining a class. We will iterate from 0 to n//2 and calculate the sum of (n - 2*i) at each step.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The core concept is to calculate the sum of a series of numbers where each number is obtained by subtracting 2*i from n.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable sum_series to 0.\n    2. Iterate from i=0 to n//2.\n    3. At each step, calculate the value (n - 2*i) and add it to sum_series.\n    4. Return the final sum_series value.\n\n# [edge case] \n    sum_series(6) = 12\n    Explanation: For n=6, the series would be 6 + (6-2) = 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers all scenarios.\n", "requirement analysis:\nThe function should iterate through the series (n - 2*i) for i=0 to n // 2 and sum the values. It should handle edge cases like n=0 or negative n values.\nrequirement pool:\n- Implement the core sum_series function with correct summation logic\n- Include input validation to handle edge cases and ensure robustness\n- Optimize the function for performance, especially for large n values\nWe will use Python and the built-in functions to implement the sum_series function without defining any class. We will iterate through the series (n - 2*i) for i=0 to n // 2 and sum the values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The core concept is to calculate the sum of a series where each term is calculated as (n - 2*i) for i=0 to n // 2.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will iterate through the series (n - 2*i) for i=0 to n // 2 and sum the values.\n\n# [edge case] \n    sum_series(6) = 12\n    Explanation: For n=6, the series would be 6 + (6-2) = 6 + 4 = 10, so the expected output is 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The logic provided covers the calculation of the sum of the series.\n", "requirement pool:\n- Implement sum_series function to accurately calculate the specified series sum\n- Handle edge cases and validate input parameters for robustness\n- Optimize the algorithm for better performance and efficiency\nWe will use Python and the built-in functions to implement the sum_series function efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The core concept is to calculate the sum of a series where each term is n - 2*i, starting from i=0 to n//2.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable sum_series to 0.\n    2. Iterate i from 0 to n//2.\n    3. Add (n - 2*i) to sum_series in each iteration.\n    4. Return sum_series as the final result.\n\n# [edge case] \n    sum_series(6) = 12\n    Explanation: For n=6, the series would be 6 + (6-2) = 6 + 4 = 10 + (6-4) = 10 + 2 = 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Implement the sum_series function according to the defined formula\n- Ensure the function handles edge cases like n = 0 or negative values\n- Optimize the function for performance to handle large n values efficiently\nWe will use a simple Python function to implement the sum_series calculation without the need for defining a class. We will leverage basic arithmetic operations to efficiently compute the sum of the specified series.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The function computes the sum of a series based on a specific formula provided in the requirement.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    The logic to implement the code involves iterating through the series and summing up the values based on the formula provided in the requirement.\n\n# [edge case] \n    sum_series(0) = 0\n    Explanation: When n is 0, there are no iterations to perform, so the sum is 0.\n    sum_series(1) = 1\n    Explanation: When n is 1, there is only one iteration with i=0, so the sum is n = 1.\n    sum_series(2) = 2\n    Explanation: When n is 2, there is one iteration with i=0, so the sum is n + (n-2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the scenarios where n is 0, 1, or 2 appropriately.\n", "requirement analysis:\nThe function should iterate over the specified range and calculate the sum of (n - 2*i) for each iteration until the condition n-x =< 0 is met. It should handle both positive and negative n values and provide the correct sum as per the formula.\nrequirement pool:\n- Implement the core logic to compute the sum of the series\n- Handle edge cases such as negative n values and zero\n- Optimize the function for performance with large n values\nWe will design a simple static Python function to compute the sum of the specified series using basic arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of series'\n    Explanation: The core concept is to calculate the sum of a series based on a specific formula or pattern.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using basic arithmetic operations, the code logic can be implemented straightforwardly by following the steps provided in the plan.\n\n# [edge case] \n    sum_series(0) = 0\n    Explanation: When n is 0, there are no iterations, so the sum is 0.\n    sum_series(1) = 1\n    Explanation: When n is 1, there is only one iteration (n), so the sum is 1.\n    sum_series(2) = 2\n    Explanation: When n is 2, there are two iterations (n + (n-2)), so the sum is 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers the scenarios where n is 0, 1, or 2 appropriately.\n", "requirement pool:\n- Implement the sum_series function according to the provided formula\n- Ensure the function handles both positive and negative n values\n- Optimize the function for performance with large n values\nWe will design a simple static Python function to compute the sum of the specified series using basic arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum of series'\n    Explanation: The core concept is to calculate the sum of a series based on a specific formula or pattern.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple static Python function to compute the sum of the specified series using basic arithmetic operations, the logic can be implemented as follows:\n    \n```python\ndef sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output: 12\n```\n\n# [edge case] \n    sum_series(0) = 0\n    Explanation: When n is 0, the series becomes an empty series, so the sum is 0.\n    \n    sum_series(1) = 1\n    Explanation: When n is 1, the series becomes (1), so the sum is 1.\n    \n    sum_series(2) = 2\n    Explanation: When n is 2, the series becomes (2), so the sum is 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios including edge cases.\n", "requirement pool:\n- Implement sum_series function to accurately calculate the specified series sum\n- Handle edge cases and validate input parameters for robustness\n- Optimize the algorithm for better performance, especially with large n values\nWe will use Python and the built-in functions to implement the sum_series function efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The function calculates the sum of a series of terms based on a specific formula.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in functions efficiently, we can implement the sum_series function as follows:\n\n```python\ndef sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output should be 12\n```\n\n# [edge case] \n    sum_series(0) = 0\n    Explanation: When n is 0, the series is empty, so the sum is 0.\n    sum_series(1) = 1\n    Explanation: When n is 1, there is only one term in the series, which is n itself.\n    sum_series(2) = 2\n    Explanation: When n is 2, the series has two terms: n and n-2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of the function covers these cases effectively.\n", "requirement pool:\n- Implement sum_series function to handle series sum calculation\n- Ensure the function supports both positive and negative integer inputs\n- Include error handling for invalid input values\nWe will use Python and the built-in functions to implement the sum_series function efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The function calculates the sum of a series of terms based on a specific formula.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in functions efficiently, we can implement the sum_series function as follows:\n\n```python\ndef sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output should be 12\n```\n\n# [edge case] \n    sum_series(0) = 0\n    Explanation: When n is 0, the series becomes an empty series, so the sum is 0.\n    sum_series(1) = 1\n    Explanation: When n is 1, there is only one term in the series, which is n itself.\n    sum_series(2) = 2\n    Explanation: When n is 2, there are two terms in the series: n and n-2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of the function covers these cases effectively.\n", "requirement pool:\n- Implement sum_series function to accurately calculate the specified series sum\n- Handle edge cases such as n=0 or negative values gracefully\n- Optimize the algorithm for better performance with large n values\nWe will use Python and the built-in functions to implement the sum_series function efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The function calculates the sum of a series of terms based on a specific formula.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using Python and built-in functions efficiently, we can implement the sum_series function as follows:\n\n```python\ndef sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2*i\n    return total_sum\n\n# Test the function\nprint(sum_series(6))  # Output should be 12\n```\n\n# [edge case] \n    sum_series(0) = 0\n    Explanation: When n is 0, the series becomes an empty series, so the sum is 0.\n    sum_series(1) = 1\n    Explanation: When n is 1, there is only one term in the series, which is n itself.\n    sum_series(2) = 0\n    Explanation: When n is 2, the series becomes (2) + (0), so the sum is 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic in the function already covers these scenarios.\n", "requirement pool:\n- Implement the sum_series function as per the defined formula\n- Ensure the function handles edge cases like n=0 or negative n values\n- Optimize the function for better performance with large n values\nWe will use a simple Python function to implement the sum_series calculation without the need for defining a class. We will leverage basic arithmetic operations to efficiently compute the series sum.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sum_series'\n    Explanation: The core concept is to calculate the sum of a series based on the formula (n - 2*i) from i=0 to n // 2.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code logic for sum_series:\n    1. Define a function sum_series(n) that takes an integer n as input.\n    2. Initialize a variable sum_series_sum to 0.\n    3. Iterate from i=0 to n // 2:\n        - Calculate the term (n - 2*i).\n        - Add the term to sum_series_sum.\n    4. Return sum_series_sum as the final result.\n\n# [edge case] \n    sum_series(6) = 12\n    Explanation: For n=6, the series would be 6 + (6-2) + (6-4) = 6 + 4 + 2 = 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios within the given requirement.\n"], "test": ["def check(sum_series):\n\tassert sum_series(6)==12", "def check(sum_series):\n\tassert sum_series(10)==30", "def check(sum_series):\n\tassert sum_series(9)==25", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(1) == 1", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(3) == 4", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(15) == 64", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(14) == 56", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(10) == 30", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(6) == 12", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(4) == 6", "def check(sum_series):\n\tassert sum_series(9) == 25", "def check(sum_series):\n\tassert sum_series(12) == 42", "def check(sum_series):\n\tassert sum_series(5) == 9", "def check(sum_series):\n\tassert sum_series(7) == 16", "def check(sum_series):\n\tassert sum_series(11) == 36", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(13) == 49", "def check(sum_series):\n\tassert sum_series(8) == 20", "def check(sum_series):\n\tassert sum_series(9) == 25"], "scores": [1.0, 1.0, 1.0, 0.1275, 0.0196, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 13, 2, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef sum_series(n: int) -> int:\n    \"\"\"\n    Calculate the sum of a series based on the formula (n - 2*i) from i=0 to n // 2.\n\n    Args:\n        n: An integer representing the upper limit of the series.\n\n    Returns:\n        An integer representing the sum of the series (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum_series_sum = 0\n\n    for i in range(n // 2 + 1):\n        term = n - 2*i\n        sum_series_sum += term\n\n    return sum_series_sum\n", "passed": true, "pass": true, "pass_num": 8, "round": 64, "mutate_method": "condense_two2one", "parent_index": 64}
