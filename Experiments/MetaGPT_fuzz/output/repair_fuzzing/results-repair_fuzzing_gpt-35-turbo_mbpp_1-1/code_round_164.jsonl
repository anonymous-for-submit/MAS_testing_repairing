{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 460, "prompt": "Write a python function to retrieve the initial item of every sublist.", "code": "def Extract(lst): \n    return [item[0] for item in lst] ", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]", "assert Extract([[5, 6], [6, 9, 9], [2, 6, 3, 13]]) == [5, 6, 2]", "assert Extract([[2, 5], [8, 6, 7], [2, 9, 12, 11]]) == [2, 8, 2]", "assert Extract([[2, 4], [1, 7, 10], [10, 9, 12, 4]]) == [2, 1, 10]", "assert Extract([[1, 1], [7, 8, 7], [6, 3, 7, 10]]) == [1, 7, 6]", "assert Extract([[5, 4], [8, 9, 5], [9, 2, 7, 8]]) == [5, 8, 9]", "assert Extract([[5, 2], [8, 2, 6], [7, 10, 3, 4]]) == [5, 8, 7]", "assert Extract([[6, 2], [8, 9, 1], [3, 4, 10, 13]]) == [6, 8, 3]", "assert Extract([[5, 4], [4, 8, 2], [2, 6, 6, 4]]) == [5, 4, 2]", "assert Extract([[6, 2], [4, 9, 9], [11, 3, 3, 4]]) == [6, 4, 11]", "assert Extract([[2, 2], [1, 3, 8], [10, 4, 4, 12]]) == [2, 1, 10]", "assert Extract([[5, 3], [4, 3, 9], [8, 3, 9, 8]]) == [5, 4, 8]", "assert Extract([[6, 3], [4, 8, 2], [6, 12, 9, 10]]) == [6, 4, 6]", "assert Extract([[6, 4], [8, 4, 3], [10, 8, 3, 13]]) == [6, 8, 10]", "assert Extract([[2, 3], [1, 7, 9], [2, 9, 3, 6]]) == [2, 1, 2]", "assert Extract([[1, 6], [2, 5, 4], [6, 12, 5, 10]]) == [1, 2, 6]", "assert Extract([[5, 7], [5, 8, 9], [10, 11, 11, 12]]) == [5, 5, 10]", "assert Extract([[6, 6], [4, 9, 9], [3, 8, 10, 4]]) == [6, 4, 3]", "assert Extract([[1, 5], [8, 9, 9], [9, 5, 10, 4]]) == [1, 8, 9]", "assert Extract([[6, 4], [2, 9, 3], [8, 10, 13, 12]]) == [6, 2, 8]", "assert Extract([[4, 7], [6, 2, 9], [4, 12, 10, 14]]) == [4, 6, 4]", "assert Extract([[3, 5], [5, 5, 3], [7, 8, 4, 14]]) == [3, 5, 7]", "assert Extract([[3, 6], [5, 6, 5], [11, 7, 3, 9]]) == [3, 5, 11]", "assert Extract([[4, 2], [7, 4, 8], [4, 10, 12, 9]]) == [4, 7, 4]", "assert Extract([[6, 1], [1, 3, 1], [6, 7, 9, 11]]) == [6, 1, 6]", "assert Extract([[3, 7], [5, 4, 6], [2, 3, 12, 6]]) == [3, 5, 2]", "assert Extract([[1, 4], [3, 2, 6], [6, 6, 10, 12]]) == [1, 3, 6]", "assert Extract([[4, 3], [3, 9, 10], [6, 4, 3, 12]]) == [4, 3, 6]", "assert Extract([[3, 2], [4, 9, 3], [6, 12, 6, 6]]) == [3, 4, 6]", "assert Extract([[4, 1], [7, 1, 7], [10, 6, 6, 14]]) == [4, 7, 10]", "assert Extract([[4, 1], [1, 2, 5], [4, 12, 7, 4]]) == [4, 1, 4]", "assert Extract([[3, 1], [6, 3, 7], [3, 12, 11, 9]]) == [3, 6, 3]", "assert Extract([[3, 6], [5, 1, 7], [2, 8, 3, 13]]) == [3, 5, 2]", "assert Extract([[2, 6], [6, 9, 10], [4, 5, 13, 5]]) == [2, 6, 4]", "assert Extract([[6, 1, 1], [3, 4]]) == [6, 3]", "assert Extract([[2, 1, 6], [8, 1]]) == [2, 8]", "assert Extract([[1, 7, 4], [5, 7]]) == [1, 5]", "assert Extract([[1, 7, 8], [7, 6]]) == [1, 7]", "assert Extract([[1, 6, 6], [9, 3]]) == [1, 9]", "assert Extract([[2, 5, 3], [1, 6]]) == [2, 1]", "assert Extract([[5, 1, 4], [1, 9]]) == [5, 1]", "assert Extract([[5, 3, 2], [1, 7]]) == [5, 1]", "assert Extract([[3, 1, 7], [3, 1]]) == [3, 3]", "assert Extract([[5, 6, 3], [7, 9]]) == [5, 7]", "assert Extract([[2, 1, 4], [9, 8]]) == [2, 9]", "assert Extract([[1, 5, 7], [1, 7]]) == [1, 1]", "assert Extract([[5, 3, 3], [9, 1]]) == [5, 9]", "assert Extract([[5, 3, 5], [3, 2]]) == [5, 3]", "assert Extract([[2, 3, 7], [4, 8]]) == [2, 4]", "assert Extract([[3, 5, 1], [5, 3]]) == [3, 5]", "assert Extract([[5, 7, 6], [8, 4]]) == [5, 8]", "assert Extract([[6, 1, 1], [6, 3]]) == [6, 6]", "assert Extract([[1, 7, 8], [6, 6]]) == [1, 6]", "assert Extract([[1, 2, 2], [6, 7]]) == [1, 6]", "assert Extract([[1, 2, 2], [6, 3]]) == [1, 6]", "assert Extract([[1, 3, 3], [9, 9]]) == [1, 9]", "assert Extract([[6, 7, 8], [7, 8]]) == [6, 7]", "assert Extract([[2, 5, 1], [2, 7]]) == [2, 2]", "assert Extract([[6, 3, 3], [1, 7]]) == [6, 1]", "assert Extract([[4, 3, 8], [8, 6]]) == [4, 8]", "assert Extract([[5, 4, 7], [1, 1]]) == [5, 1]", "assert Extract([[5, 4, 1], [3, 3]]) == [5, 3]", "assert Extract([[1, 2, 7], [9, 6]]) == [1, 9]", "assert Extract([[2, 1, 7], [8, 6]]) == [2, 8]", "assert Extract([[4, 2, 1], [5, 9]]) == [4, 5]", "assert Extract([[6, 5, 1], [6, 7]]) == [6, 6]", "assert Extract([[5, 4, 7], [9, 7]]) == [5, 9]", "assert Extract([[4, 12, 4], [5, 6]]) == [4, 5]", "assert Extract([[11, 7, 2], [5, 2]]) == [11, 5]", "assert Extract([[4, 11, 2], [4, 7]]) == [4, 4]", "assert Extract([[8, 4, 2], [5, 1]]) == [8, 5]", "assert Extract([[6, 7, 6], [6, 3]]) == [6, 6]", "assert Extract([[12, 6, 6], [4, 1]]) == [12, 4]", "assert Extract([[11, 11, 4], [2, 5]]) == [11, 2]", "assert Extract([[6, 10, 2], [4, 3]]) == [6, 4]", "assert Extract([[7, 10, 3], [1, 3]]) == [7, 1]", "assert Extract([[13, 5, 4], [3, 2]]) == [13, 3]", "assert Extract([[14, 13, 3], [5, 4]]) == [14, 5]", "assert Extract([[10, 12, 6], [6, 3]]) == [10, 6]", "assert Extract([[5, 8, 4], [2, 7]]) == [5, 2]", "assert Extract([[8, 13, 2], [6, 6]]) == [8, 6]", "assert Extract([[5, 8, 1], [3, 6]]) == [5, 3]", "assert Extract([[8, 7, 4], [4, 4]]) == [8, 4]", "assert Extract([[5, 4, 3], [2, 3]]) == [5, 2]", "assert Extract([[9, 9, 6], [1, 7]]) == [9, 1]", "assert Extract([[8, 5, 6], [5, 4]]) == [8, 5]", "assert Extract([[9, 9, 1], [5, 4]]) == [9, 5]", "assert Extract([[8, 7, 2], [4, 6]]) == [8, 4]", "assert Extract([[8, 6, 6], [5, 2]]) == [8, 5]", "assert Extract([[11, 5, 5], [3, 6]]) == [11, 3]", "assert Extract([[9, 10, 3], [5, 1]]) == [9, 5]", "assert Extract([[6, 12, 2], [1, 2]]) == [6, 1]", "assert Extract([[12, 11, 6], [5, 7]]) == [12, 5]", "assert Extract([[7, 12, 6], [4, 7]]) == [7, 4]", "assert Extract([[4, 5, 3], [5, 6]]) == [4, 5]", "assert Extract([[12, 10, 1], [6, 5]]) == [12, 6]", "assert Extract([[10, 3, 1], [3, 6]]) == [10, 3]", "assert Extract([[5, 5, 1], [4, 3]]) == [5, 4]", "assert Extract([[8, 13, 1], [5, 4]]) == [8, 5]", "assert Extract([[9, 3, 5], [3, 1]]) == [9, 3]"], "entry_point": "Extract", "repair_prompt": ["Write a python function Extract to retrieve the initial item of every sublist.\nExtract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n", "Write a python function Extract that not only retrieves the initial item of every sublist but also returns this information for further processing.\nExtract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n", "Write a python function Extract to retrieve the initial item of every sublist.\nExtract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    sublists: List of sublists containing integers\n    \n    Returns:\n    List of initial items from each sublist\n    \"\"\"\n    initial_items = [sublist[0] for sublist in sublists if sublist]\n    return initial_items\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the initial item of each sublist in the input list.\n\n    Args:\n        lst: A list of sublists where each sublist contains integers.\n\n    Returns:\n        A list of integers representing the initial item of each sublist.\n\n    Examples:\n        Extract([]) => []\n        Extract([[1], [2], [3]]) => [1, 2, 3]\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    sublists: List of sublists containing integers\n    \n    Returns:\n    List of initial items from each sublist\n    \"\"\"\n    return [sublist[0] for sublist in sublists]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the initial elements from each sublist in the input list of sublists.\n\n    Args:\n    sublists: List of sublists containing integers.\n\n    Returns:\n    List of initial elements from each sublist.\n    \"\"\"\n    return list(map(lambda x: x[0], sublists))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(nested_list: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    nested_list: A list of sublists\n    \n    Returns:\n    A list containing the initial items from each sublist\n    \"\"\"\n    initial_items = [sublist[0] for sublist in nested_list]\n    return initial_items\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    sublists: List of sublists containing integers\n    \n    Returns:\n    List of initial items extracted from each sublist\n    \"\"\"\n    initial_items = [sublist[0] for sublist in sublists if sublist]\n    return initial_items\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    sublists: List of sublists containing integers\n    \n    Returns:\n    List of initial items from each sublist\n    \"\"\"\n    result = [sublist[0] for sublist in sublists if sublist]\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the initial items from sublists.\n\n    Args:\n    sublists: List of sublists containing integers.\n\n    Returns:\n    List of integers representing the initial items of each sublist.\n    \"\"\"\n    return list(map(lambda x: x[0], sublists))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n    Extracts the initial item of each sublist in the input list.\n\n    Args:\n        lst: A list of sublists where each sublist contains integers.\n\n    Returns:\n        A list of integers representing the initial item of each sublist.\n\n    Examples:\n        Extract([]) => []\n        Extract([[1], [2], [3]]) => [1, 2, 3]\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    sublists: List of sublists containing integers\n    \n    Returns:\n    List of initial items from each sublist\n    \"\"\"\n    initial_items = [sublist[0] for sublist in sublists if sublist]\n    return initial_items\n"], "plans": ["requirement pool:\n- Implement Extract function to retrieve initial items from sublists\n- Ensure Extract function handles empty sublists gracefully\n- Optimize Extract function for performance efficiency\nWe will design a simple Python function using basic list manipulation to efficiently extract initial items from sublists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, the output should also be empty.\n    Extract([[1], [2], [3]]) = [1, 2, 3]\n    Explanation: Each sublist contains only one element, and we need to extract the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract the initial item from each sublist will cover these cases.\n", "We will use a simple Python function to iterate through the list of sublists and extract the initial item of each sublist.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, the output should also be empty.\n    Extract([[1], [2], [3]]) = [1, 2, 3]\n    Explanation: Each sublist contains only one element, and we need to extract the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract the initial item of each sublist will cover these edge cases.\n", "requirement pool:\n- Implement Extract function to retrieve initial items\n- Ensure Extract handles empty sublists correctly\n- Optimize Extract for large datasets\nWe will use a simple Python function with list comprehension to extract initial items from sublists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We can implement the code using list comprehension to extract the initial items from sublists:\n    \n    ```python\n    def Extract(lst):\n        return [sublist[0] for sublist in lst]\n    ```\n\n# [edge case] \n    Extract([]) == []\n    Explanation: When the input list is empty, there are no sublists to extract initial items from, so the expected output is an empty list.\n    Extract([[1], [2], [3]]) == [1, 2, 3]\n    Explanation: Each sublist contains only one element, and we extract the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers the edge cases as well.\n", "requirement pool:\n- Implement Extract function to efficiently retrieve initial sublist elements\n- Ensure compatibility with different Python versions\n- Include error handling for invalid input types\nWe will use a simple Python function to implement the Extract functionality without the need for defining a class. We will leverage the built-in map function for efficient extraction of initial sublist elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist': Refers to a list that is part of a larger list.\n    'initial item': Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Define a function Extract that takes a list of sublists as input.\n    2. Use the map function to apply a lambda function that extracts the initial item of each sublist.\n    3. Return the list of initial items.\n\n```python\ndef Extract(lst):\n    return list(map(lambda x: x[0], lst))\n```\n\n# [edge case] \n    Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    Explanation: The function extracts the initial items of each sublist [1, 3, 6].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Implement Extract function to retrieve initial items from sublists\n- Ensure the function handles edge cases like empty sublists\n- Optimize the function for large nested lists\nWe will design a simple Python function using basic list manipulation techniques to efficiently extract initial items from sublists.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist': Refers to a list that is part of a larger list.\n    'initial item': Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, there are no sublists to extract initial items from, so the expected output is an empty list.\n    Extract([[1], [2], [3]]) = [1, 2, 3]\n    Explanation: Each sublist contains only one element, and the function extracts the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract initial items from sublists will work for empty lists and lists with single-element sublists.\n", "requirement pool:\n- Implement Extract function to retrieve initial items from sublists\n- Ensure Extract function handles edge cases like empty sublists\n- Optimize Extract function for large datasets\nWe will use a simple approach to implement the Extract function using basic Python functionality without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sublist': Refers to a list that is an element of the main list.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize an empty list to store the extracted items.\n    2. Iterate through each sublist in the input list.\n    3. For each sublist, extract the first item and append it to the result list.\n    4. Return the final list of extracted items.\n\n```python\ndef Extract(lst):\n    extracted_items = []\n    for sub_list in lst:\n        extracted_items.append(sub_list[0])\n    return extracted_items\n```\n\n# [edge case] \n    Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    Explanation: The function extracts the first element from each sublist in the input list and returns them in a new list.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios where the input is a list of sublists.\n", "requirement pool:\n- Implement Extract function to retrieve initial items\n- Ensure Extract handles empty sublists correctly\n- Optimize Extract for large datasets\nWe will use a simple approach to iterate through each sublist and extract the initial item efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, the output should also be empty.\n    Extract([[1], [2], [3]]) = [1, 2, 3]\n    Explanation: Each sublist contains only one element, and we need to extract the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract the initial item from each sublist will cover these cases.\n", "requirement pool:\n- Implement Extract function to retrieve initial items from sublists\n- Ensure the function works for sublists of varying lengths\n- Handle cases where sublists are empty gracefully\nWe will use a simple Python function to extract initial items from sublists without defining any class. We will leverage the built-in map function for efficiency.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, the output should also be empty.\n    Extract([[1], [2], [3]]) = [1, 2, 3]\n    Explanation: Each sublist contains only one element, and we need to extract the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract the initial item from each sublist should cover these edge cases.\n", "We will use a simple Python function to iterate through the list of sublists and extract the initial item of each sublist.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, the output should also be empty.\n    Extract([[1], [2], [3]]) = [1, 2, 3]\n    Explanation: Each sublist has only one element, and we need to extract the initial item from each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to extract the initial item of each sublist will cover these cases.\n", "requirement pool:\n- Implement Extract function to retrieve initial items\n- Ensure Extract handles empty sublists correctly\n- Optimize Extract for large input lists\nWe will use a simple Python function to iterate through the list of sublists and extract the initial item of each sublist.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'initial item'\n    Explanation: Refers to the first element of each sublist.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    Extract([]) = []\n    Explanation: When the input list is empty, the output should also be empty.\n    Extract([[1]]) = [1]\n    Explanation: When each sublist contains only one element, the output should be the same as the initial elements of each sublist.\n    Extract([[1, 2, 3], [4], [5, 6]]) = [1, 4, 5]\n    Explanation: The function should correctly extract the initial elements of each sublist.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios.\n"], "test": ["def check(Extract):\n\tassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "def check(Extract):\n\tassert Extract([[1,2,3],[4, 5]]) == [1,4]", "def check(Extract):\n\tassert Extract([[9,8,1],[1,2]]) == [9,1]", "def check(Extract):\n\tassert Extract([[5, 6], [6, 9, 9], [2, 6, 3, 13]]) == [5, 6, 2]", "def check(Extract):\n\tassert Extract([[2, 5], [8, 6, 7], [2, 9, 12, 11]]) == [2, 8, 2]", "def check(Extract):\n\tassert Extract([[2, 4], [1, 7, 10], [10, 9, 12, 4]]) == [2, 1, 10]", "def check(Extract):\n\tassert Extract([[1, 1], [7, 8, 7], [6, 3, 7, 10]]) == [1, 7, 6]", "def check(Extract):\n\tassert Extract([[5, 4], [8, 9, 5], [9, 2, 7, 8]]) == [5, 8, 9]", "def check(Extract):\n\tassert Extract([[5, 2], [8, 2, 6], [7, 10, 3, 4]]) == [5, 8, 7]", "def check(Extract):\n\tassert Extract([[6, 2], [8, 9, 1], [3, 4, 10, 13]]) == [6, 8, 3]", "def check(Extract):\n\tassert Extract([[5, 4], [4, 8, 2], [2, 6, 6, 4]]) == [5, 4, 2]", "def check(Extract):\n\tassert Extract([[6, 2], [4, 9, 9], [11, 3, 3, 4]]) == [6, 4, 11]", "def check(Extract):\n\tassert Extract([[2, 2], [1, 3, 8], [10, 4, 4, 12]]) == [2, 1, 10]", "def check(Extract):\n\tassert Extract([[5, 3], [4, 3, 9], [8, 3, 9, 8]]) == [5, 4, 8]", "def check(Extract):\n\tassert Extract([[6, 3], [4, 8, 2], [6, 12, 9, 10]]) == [6, 4, 6]", "def check(Extract):\n\tassert Extract([[6, 4], [8, 4, 3], [10, 8, 3, 13]]) == [6, 8, 10]", "def check(Extract):\n\tassert Extract([[2, 3], [1, 7, 9], [2, 9, 3, 6]]) == [2, 1, 2]", "def check(Extract):\n\tassert Extract([[1, 6], [2, 5, 4], [6, 12, 5, 10]]) == [1, 2, 6]", "def check(Extract):\n\tassert Extract([[5, 7], [5, 8, 9], [10, 11, 11, 12]]) == [5, 5, 10]", "def check(Extract):\n\tassert Extract([[6, 6], [4, 9, 9], [3, 8, 10, 4]]) == [6, 4, 3]", "def check(Extract):\n\tassert Extract([[1, 5], [8, 9, 9], [9, 5, 10, 4]]) == [1, 8, 9]", "def check(Extract):\n\tassert Extract([[6, 4], [2, 9, 3], [8, 10, 13, 12]]) == [6, 2, 8]", "def check(Extract):\n\tassert Extract([[4, 7], [6, 2, 9], [4, 12, 10, 14]]) == [4, 6, 4]", "def check(Extract):\n\tassert Extract([[3, 5], [5, 5, 3], [7, 8, 4, 14]]) == [3, 5, 7]", "def check(Extract):\n\tassert Extract([[3, 6], [5, 6, 5], [11, 7, 3, 9]]) == [3, 5, 11]", "def check(Extract):\n\tassert Extract([[4, 2], [7, 4, 8], [4, 10, 12, 9]]) == [4, 7, 4]", "def check(Extract):\n\tassert Extract([[6, 1], [1, 3, 1], [6, 7, 9, 11]]) == [6, 1, 6]", "def check(Extract):\n\tassert Extract([[3, 7], [5, 4, 6], [2, 3, 12, 6]]) == [3, 5, 2]", "def check(Extract):\n\tassert Extract([[1, 4], [3, 2, 6], [6, 6, 10, 12]]) == [1, 3, 6]", "def check(Extract):\n\tassert Extract([[4, 3], [3, 9, 10], [6, 4, 3, 12]]) == [4, 3, 6]", "def check(Extract):\n\tassert Extract([[3, 2], [4, 9, 3], [6, 12, 6, 6]]) == [3, 4, 6]", "def check(Extract):\n\tassert Extract([[4, 1], [7, 1, 7], [10, 6, 6, 14]]) == [4, 7, 10]", "def check(Extract):\n\tassert Extract([[4, 1], [1, 2, 5], [4, 12, 7, 4]]) == [4, 1, 4]", "def check(Extract):\n\tassert Extract([[3, 1], [6, 3, 7], [3, 12, 11, 9]]) == [3, 6, 3]", "def check(Extract):\n\tassert Extract([[3, 6], [5, 1, 7], [2, 8, 3, 13]]) == [3, 5, 2]", "def check(Extract):\n\tassert Extract([[2, 6], [6, 9, 10], [4, 5, 13, 5]]) == [2, 6, 4]", "def check(Extract):\n\tassert Extract([[6, 1, 1], [3, 4]]) == [6, 3]", "def check(Extract):\n\tassert Extract([[2, 1, 6], [8, 1]]) == [2, 8]", "def check(Extract):\n\tassert Extract([[1, 7, 4], [5, 7]]) == [1, 5]", "def check(Extract):\n\tassert Extract([[1, 7, 8], [7, 6]]) == [1, 7]", "def check(Extract):\n\tassert Extract([[1, 6, 6], [9, 3]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[2, 5, 3], [1, 6]]) == [2, 1]", "def check(Extract):\n\tassert Extract([[5, 1, 4], [1, 9]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[5, 3, 2], [1, 7]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[3, 1, 7], [3, 1]]) == [3, 3]", "def check(Extract):\n\tassert Extract([[5, 6, 3], [7, 9]]) == [5, 7]", "def check(Extract):\n\tassert Extract([[2, 1, 4], [9, 8]]) == [2, 9]", "def check(Extract):\n\tassert Extract([[1, 5, 7], [1, 7]]) == [1, 1]", "def check(Extract):\n\tassert Extract([[5, 3, 3], [9, 1]]) == [5, 9]", "def check(Extract):\n\tassert Extract([[5, 3, 5], [3, 2]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[2, 3, 7], [4, 8]]) == [2, 4]", "def check(Extract):\n\tassert Extract([[3, 5, 1], [5, 3]]) == [3, 5]", "def check(Extract):\n\tassert Extract([[5, 7, 6], [8, 4]]) == [5, 8]", "def check(Extract):\n\tassert Extract([[6, 1, 1], [6, 3]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[1, 7, 8], [6, 6]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 2, 2], [6, 7]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 2, 2], [6, 3]]) == [1, 6]", "def check(Extract):\n\tassert Extract([[1, 3, 3], [9, 9]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[6, 7, 8], [7, 8]]) == [6, 7]", "def check(Extract):\n\tassert Extract([[2, 5, 1], [2, 7]]) == [2, 2]", "def check(Extract):\n\tassert Extract([[6, 3, 3], [1, 7]]) == [6, 1]", "def check(Extract):\n\tassert Extract([[4, 3, 8], [8, 6]]) == [4, 8]", "def check(Extract):\n\tassert Extract([[5, 4, 7], [1, 1]]) == [5, 1]", "def check(Extract):\n\tassert Extract([[5, 4, 1], [3, 3]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[1, 2, 7], [9, 6]]) == [1, 9]", "def check(Extract):\n\tassert Extract([[2, 1, 7], [8, 6]]) == [2, 8]", "def check(Extract):\n\tassert Extract([[4, 2, 1], [5, 9]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[6, 5, 1], [6, 7]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[5, 4, 7], [9, 7]]) == [5, 9]", "def check(Extract):\n\tassert Extract([[4, 12, 4], [5, 6]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[11, 7, 2], [5, 2]]) == [11, 5]", "def check(Extract):\n\tassert Extract([[4, 11, 2], [4, 7]]) == [4, 4]", "def check(Extract):\n\tassert Extract([[8, 4, 2], [5, 1]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[6, 7, 6], [6, 3]]) == [6, 6]", "def check(Extract):\n\tassert Extract([[12, 6, 6], [4, 1]]) == [12, 4]", "def check(Extract):\n\tassert Extract([[11, 11, 4], [2, 5]]) == [11, 2]", "def check(Extract):\n\tassert Extract([[6, 10, 2], [4, 3]]) == [6, 4]", "def check(Extract):\n\tassert Extract([[7, 10, 3], [1, 3]]) == [7, 1]", "def check(Extract):\n\tassert Extract([[13, 5, 4], [3, 2]]) == [13, 3]", "def check(Extract):\n\tassert Extract([[14, 13, 3], [5, 4]]) == [14, 5]", "def check(Extract):\n\tassert Extract([[10, 12, 6], [6, 3]]) == [10, 6]", "def check(Extract):\n\tassert Extract([[5, 8, 4], [2, 7]]) == [5, 2]", "def check(Extract):\n\tassert Extract([[8, 13, 2], [6, 6]]) == [8, 6]", "def check(Extract):\n\tassert Extract([[5, 8, 1], [3, 6]]) == [5, 3]", "def check(Extract):\n\tassert Extract([[8, 7, 4], [4, 4]]) == [8, 4]", "def check(Extract):\n\tassert Extract([[5, 4, 3], [2, 3]]) == [5, 2]", "def check(Extract):\n\tassert Extract([[9, 9, 6], [1, 7]]) == [9, 1]", "def check(Extract):\n\tassert Extract([[8, 5, 6], [5, 4]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[9, 9, 1], [5, 4]]) == [9, 5]", "def check(Extract):\n\tassert Extract([[8, 7, 2], [4, 6]]) == [8, 4]", "def check(Extract):\n\tassert Extract([[8, 6, 6], [5, 2]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[11, 5, 5], [3, 6]]) == [11, 3]", "def check(Extract):\n\tassert Extract([[9, 10, 3], [5, 1]]) == [9, 5]", "def check(Extract):\n\tassert Extract([[6, 12, 2], [1, 2]]) == [6, 1]", "def check(Extract):\n\tassert Extract([[12, 11, 6], [5, 7]]) == [12, 5]", "def check(Extract):\n\tassert Extract([[7, 12, 6], [4, 7]]) == [7, 4]", "def check(Extract):\n\tassert Extract([[4, 5, 3], [5, 6]]) == [4, 5]", "def check(Extract):\n\tassert Extract([[12, 10, 1], [6, 5]]) == [12, 6]", "def check(Extract):\n\tassert Extract([[10, 3, 1], [3, 6]]) == [10, 3]", "def check(Extract):\n\tassert Extract([[5, 5, 1], [4, 3]]) == [5, 4]", "def check(Extract):\n\tassert Extract([[8, 13, 1], [5, 4]]) == [8, 5]", "def check(Extract):\n\tassert Extract([[9, 3, 5], [3, 1]]) == [9, 3]"], "scores": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef Extract(sublists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Function to extract initial items from sublists\n    \n    Args:\n    sublists: List of sublists containing integers\n    \n    Returns:\n    List of initial items from each sublist\n    \"\"\"\n    initial_items = [sublist[0] for sublist in sublists if sublist]\n    return initial_items\n", "passed": true, "pass": true, "pass_num": 10, "round": 164, "mutate_method": "rephrase_one", "parent_index": 164}
