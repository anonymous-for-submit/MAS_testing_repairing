{"source_file": "charlessutton@: Benchmark Questions Verification V2.ipynb", "task_id": 432, "prompt": "Write a function to find the median length of a trapezium. The trapezium is a quadrilateral with one pair of parallel sides. It is important to understand the concept of a trapezium to solve the problem correctly.", "code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median", "test_imports": [], "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5", "assert median_trapezium(20, 25, 31) == 22.5", "assert median_trapezium(12, 30, 31) == 21.0", "assert median_trapezium(19, 22, 30) == 20.5", "assert median_trapezium(13, 20, 37) == 16.5", "assert median_trapezium(13, 30, 40) == 21.5", "assert median_trapezium(17, 23, 38) == 20.0", "assert median_trapezium(10, 23, 39) == 16.5", "assert median_trapezium(12, 21, 40) == 16.5", "assert median_trapezium(19, 30, 39) == 24.5", "assert median_trapezium(11, 29, 30) == 20.0", "assert median_trapezium(10, 28, 31) == 19.0", "assert median_trapezium(16, 25, 32) == 20.5", "assert median_trapezium(12, 23, 38) == 17.5", "assert median_trapezium(15, 29, 34) == 22.0", "assert median_trapezium(20, 30, 32) == 25.0", "assert median_trapezium(20, 24, 30) == 22.0", "assert median_trapezium(15, 22, 35) == 18.5", "assert median_trapezium(18, 29, 32) == 23.5", "assert median_trapezium(11, 29, 31) == 20.0", "assert median_trapezium(13, 24, 30) == 18.5", "assert median_trapezium(13, 30, 35) == 21.5", "assert median_trapezium(17, 27, 32) == 22.0", "assert median_trapezium(16, 30, 30) == 23.0", "assert median_trapezium(13, 20, 34) == 16.5", "assert median_trapezium(15, 22, 36) == 18.5", "assert median_trapezium(12, 20, 34) == 16.0", "assert median_trapezium(16, 24, 39) == 20.0", "assert median_trapezium(13, 28, 30) == 20.5", "assert median_trapezium(15, 21, 33) == 18.0", "assert median_trapezium(13, 27, 40) == 20.0", "assert median_trapezium(13, 26, 31) == 19.5", "assert median_trapezium(17, 23, 36) == 20.0", "assert median_trapezium(13, 30, 38) == 21.5", "assert median_trapezium(13, 15, 32) == 14.0", "assert median_trapezium(5, 24, 33) == 14.5", "assert median_trapezium(5, 15, 35) == 10.0", "assert median_trapezium(9, 25, 28) == 17.0", "assert median_trapezium(10, 25, 34) == 17.5", "assert median_trapezium(9, 18, 35) == 13.5", "assert median_trapezium(15, 18, 33) == 16.5", "assert median_trapezium(6, 21, 28) == 13.5", "assert median_trapezium(8, 21, 31) == 14.5", "assert median_trapezium(13, 21, 30) == 17.0", "assert median_trapezium(11, 23, 29) == 17.0", "assert median_trapezium(8, 23, 35) == 15.5", "assert median_trapezium(12, 17, 25) == 14.5", "assert median_trapezium(12, 20, 34) == 16.0", "assert median_trapezium(13, 18, 32) == 15.5", "assert median_trapezium(8, 15, 27) == 11.5", "assert median_trapezium(14, 20, 26) == 17.0", "assert median_trapezium(14, 21, 25) == 17.5", "assert median_trapezium(9, 18, 32) == 13.5", "assert median_trapezium(5, 15, 32) == 10.0", "assert median_trapezium(15, 19, 30) == 17.0", "assert median_trapezium(14, 21, 30) == 17.5", "assert median_trapezium(7, 15, 32) == 11.0", "assert median_trapezium(15, 23, 25) == 19.0", "assert median_trapezium(9, 16, 34) == 12.5", "assert median_trapezium(14, 20, 26) == 17.0", "assert median_trapezium(10, 23, 33) == 16.5", "assert median_trapezium(11, 21, 34) == 16.0", "assert median_trapezium(7, 20, 29) == 13.5", "assert median_trapezium(15, 16, 27) == 15.5", "assert median_trapezium(11, 17, 25) == 14.0", "assert median_trapezium(7, 24, 25) == 15.5", "assert median_trapezium(10, 22, 28) == 16.0", "assert median_trapezium(9, 4, 4) == 6.5", "assert median_trapezium(11, 6, 6) == 8.5", "assert median_trapezium(7, 6, 2) == 6.5", "assert median_trapezium(1, 5, 7) == 3.0", "assert median_trapezium(9, 13, 5) == 11.0", "assert median_trapezium(4, 12, 9) == 8.0", "assert median_trapezium(10, 4, 5) == 7.0", "assert median_trapezium(3, 13, 2) == 8.0", "assert median_trapezium(3, 10, 4) == 6.5", "assert median_trapezium(3, 5, 1) == 4.0", "assert median_trapezium(5, 13, 9) == 9.0", "assert median_trapezium(2, 10, 8) == 6.0", "assert median_trapezium(8, 8, 5) == 8.0", "assert median_trapezium(11, 8, 8) == 9.5", "assert median_trapezium(2, 11, 6) == 6.5", "assert median_trapezium(2, 14, 8) == 8.0", "assert median_trapezium(7, 7, 8) == 7.0", "assert median_trapezium(4, 8, 3) == 6.0", "assert median_trapezium(8, 9, 7) == 8.5", "assert median_trapezium(5, 4, 3) == 4.5", "assert median_trapezium(2, 7, 8) == 4.5", "assert median_trapezium(10, 8, 3) == 9.0", "assert median_trapezium(9, 12, 7) == 10.5", "assert median_trapezium(11, 7, 9) == 9.0", "assert median_trapezium(6, 11, 2) == 8.5", "assert median_trapezium(8, 14, 1) == 11.0", "assert median_trapezium(5, 12, 5) == 8.5", "assert median_trapezium(1, 9, 4) == 5.0", "assert median_trapezium(7, 6, 8) == 6.5", "assert median_trapezium(2, 12, 2) == 7.0", "assert median_trapezium(4, 9, 9) == 6.5", "assert median_trapezium(6, 6, 6) == 6.0", "assert median_trapezium(4, 8, 4) == 6.0"], "entry_point": "median_trapezium", "repair_prompt": ["Write a function median_trapezium to find the median length of a trapezium. The trapezium is a quadrilateral with one pair of parallel sides. It is important to understand the concept of a trapezium to solve the problem correctly.\nmedian_trapezium(15,25,35)==20\n", "Write a function median_trapezium to find the median length of a trapezium. Understanding the concept of a trapezium is crucial for solving the problem accurately. The trapezium is a quadrilateral with one pair of parallel sides. It is important to understand the concept of a trapezium to solve the problem correctly.\nmedian_trapezium(15,25,35)==20\n", "Write a function median_trapezium to find the median length of a trapezium, a quadrilateral with one pair of parallel sides, by understanding the concept to solve the problem correctly.\nmedian_trapezium(15,25,35)==20\n"], "completions": ["from typing import List\n## main.py\n\ndef median_trapezium(side1: float, side2: float, base: float) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Args:\n        side1 (float): Length of one parallel side of the trapezium.\n        side2 (float): Length of the other parallel side of the trapezium.\n        base (float): Length of the base of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n\n    Examples:\n        >>> median_trapezium(0, 0, 0)\n        0\n        >>> median_trapezium(10, 10, 10)\n        10\n        >>> median_trapezium(5, 15, 25)\n        20\n    \"\"\"\n    return (side1 + side2 + 2 * base) / 4\n", "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Function to calculate the median length of a trapezium\n    Args:\n        a (float): Length of one side of the trapezium\n        b (float): Length of the other side of the trapezium\n        c (float): Length of the base of the trapezium\n    Returns:\n        float: The median length of the trapezium\n    \"\"\"\n    \n    # Extra code to handle edge cases\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    \n    # Calculate the median length of the trapezium\n    return (a + b + c - max(a, b, c) - min(a, b, c)) / 2\n", "from typing import List\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Function to calculate the median length of a trapezium\n    Args:\n        a (float): Length of one base of the trapezium\n        b (float): Length of the other base of the trapezium\n        c (float): Length of the median of the trapezium\n    Returns:\n        float: The median length of the trapezium\n    \"\"\"\n    # Check for edge case where all sides are 0\n    if a == b == c == 0:\n        return 0\n    \n    # Calculate the median length of the trapezium\n    return (a + b + c - max(a, b, c) - min(a, b, c)) / 2\n", "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    '''\n    Calculate the median length of a trapezium.\n    Args:\n        a (float): Length of one base of the trapezium.\n        b (float): Length of the other base of the trapezium.\n        c (float): Distance between the bases of the trapezium.\n    Returns:\n        float: Median length of the trapezium.\n    '''\n    if a == b == c == 0:\n        return 0\n    return (a + b + c) / 2\n", "from typing import List\n## main.py\n\ndef median_trapezium(side1: float, side2: float, base: float) -> float:\n    '''\n    Calculate the median length of a trapezium.\n    Args:\n        side1 (float): Length of one non-parallel side\n        side2 (float): Length of the other non-parallel side\n        base (float): Length of the parallel side\n    Returns:\n        float: Median length of the trapezium\n    '''\n    return (side1 + side2) / 2\n", "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Args:\n        a (float): Length of one base of the trapezium.\n        b (float): Length of the other base of the trapezium.\n        c (float): Length of the median of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n\n    Raises:\n        ValueError: If any of the input values are negative.\n\n    Examples:\n        median_trapezium(0, 0, 0) -> 0\n        median_trapezium(10, 10, 10) -> 10\n        median_trapezium(5, 15, 25) -> 15\n    \"\"\"\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Length values cannot be negative\")\n\n    if a == b == c == 0:\n        return 0\n\n    return (a + b + c) / 2\n", "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, h: float) -> float:\n    ## Calculate the median length of a trapezium\n    ## Args:\n    ##    a: float, the length of the shorter base of the trapezium\n    ##    b: float, the length of the longer base of the trapezium\n    ##    h: float, the height of the trapezium\n    ## Returns:\n    ##    float, the median length of the trapezium\n    if a <= 0 or b <= 0 or h <= 0:\n        return 0\n    return (a + b) / 2\n\n", "from typing import List\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Args:\n        a (float): Length of the first base of the trapezium.\n        b (float): Length of the second base of the trapezium.\n        c (float): Distance between the bases of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n\n    Examples:\n        median_trapezium(0, 0, 0) -> 0\n        median_trapezium(10, 10, 10) -> 10\n        median_trapezium(5, 15, 25) -> 15\n    \"\"\"\n    return (a + b + 2*c) / 4\n", "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium.\n    \n    Args:\n        a (float): Length of one of the non-parallel sides of the trapezium.\n        b (float): Length of the other non-parallel side of the trapezium.\n        c (float): Length of the parallel side of the trapezium.\n    \n    Returns:\n        float: The median length of the trapezium.\n    \"\"\"\n    return (2 * c - a - b) / 2\n", "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium using the formula: (a + b) / 2.\n\n    Args:\n        a (float): Length of one parallel side of the trapezium.\n        b (float): Length of the other parallel side of the trapezium.\n        c (float): Length of the non-parallel side of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n\n    Examples:\n        >>> median_trapezium(0, 0, 0)\n        0\n        >>> median_trapezium(10, 20, 30)\n        20\n        >>> median_trapezium(15, 25, 35)\n        20\n    \"\"\"\n    return (a + b) / 2\n"], "plans": ["requirement analysis:\nThe function should take three parameters representing the lengths of the two non-parallel sides and the parallel side of the trapezium. It should accurately calculate the median length of the trapezium based on these inputs.\nrequirement pool:\n- Implement the median_trapezium function with correct mathematical logic\n- Handle edge cases such as negative lengths or non-trapezium inputs\n- Optimize the function for performance to handle large sets of trapezium calculations efficiently\nWe will design a simple Python function using basic mathematical logic to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple Python function using basic mathematical logic to calculate the median length of a trapezium, the code logic should involve calculating the average of the two parallel sides of the trapezium.\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would also be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to the length of the parallel sides.\n    median_trapezium(5, 15, 25) = 20\n    Explanation: In this case, the median length of the trapezium with parallel sides of length 15 and 25 is calculated as (15 + 25) / 2 = 20.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases as the logic to calculate the median length already considers scenarios where side lengths are 0 or equal.\n", "requirement analysis:\nThe function should take three side lengths of a trapezium as input and return the median length. It should handle cases where the input does not form a valid trapezium.\nrequirement pool:\n- Calculate the median length of a trapezium accurately\n- Handle invalid trapezium inputs gracefully\n- Optimize the function for efficiency\nWe will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    median_trapezium(0, 25, 35) = 0\n    Explanation: When one side of the trapezium has a length of 0, the median length would also be 0.\n    median_trapezium(15, 25, 35) = 20\n    Explanation: Given sides of length 15, 25, and 35, the median length of the trapezium is calculated as (15 + 25) / 2 = 20.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 or b == 0 or c == 0:\n            return 0\n        (other code)\n", "requirement analysis:\nThe function should take three side lengths of a trapezium as input and calculate the median length accurately. It should consider the properties of a trapezium to determine the correct median. Error handling for invalid inputs should be included.\nrequirement pool:\n- Calculate the median length of a trapezium accurately\n- Handle different types of trapeziums (isosceles, right-angled, etc.)\n- Provide clear documentation on how the median is calculated\nWe will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to the base length.\n    median_trapezium(5, 15, 25) = 15\n    Explanation: In this case, the median length is equal to the length of the base of the trapezium.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c == 0:\n            return 0\n        (other code)\n", "requirement analysis:\nThe function should take three side lengths of a trapezium as input and return the median length. It must handle cases where the input does not form a valid trapezium. Understanding trapezium properties like parallel sides is essential for accurate results.\nrequirement pool:\n- Calculate the median length of a trapezium accurately\n- Handle different trapezium configurations and edge cases\n- Provide clear documentation on trapezium properties and function usage\nWe will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to the common side length.\n    median_trapezium(5, 15, 25) = 15\n    Explanation: In a trapezium where one side is significantly longer than the other, the median length would be closer to the longer side.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c == 0:\n            return 0\n        (other code)\n", "requirement analysis:\nThe function should take the lengths of the two non-parallel sides and the length of the parallel side as input, calculate the median length of the trapezium, and return the result. It should handle both integer and floating-point inputs.\nrequirement pool:\n- Calculate the median length accurately based on trapezium properties\n- Handle different types of input data gracefully\n- Provide clear error messages for invalid inputs\nWe will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    As the plan suggests, we will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to the base.\n    median_trapezium(5, 15, 25) = 15\n    Explanation: In this case, the median length is equal to the length of the base.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.\n", "requirement pool:\n- Calculate the median length of a trapezium accurately\n- Handle various trapezium configurations with different side lengths\n- Document the function to guide users on its usage\nWe will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    As the plan suggests, we will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to the base length.\n    median_trapezium(5, 15, 25) = 15\n    Explanation: In this case, the trapezium is actually a triangle with one side length being 25. The median length would be the length of the side adjacent to the base.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == b == c == 0:\n            return 0\n        (other code)\n", "requirement analysis:\nThe function should correctly identify the median length of a trapezium by considering the formula for trapezium area and the properties of trapeziums.\nrequirement pool:\n- Implement the formula to calculate the median length accurately\n- Handle different trapezium dimensions and shapes\n- Optimize the function for efficiency\nWe will design a simple Python function to calculate the median length of a trapezium using the provided formula and basic arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    median_trapezium(0, 25, 35) == 0\n    Explanation: When one of the sides of the trapezium is 0, the median length will also be 0.\n    median_trapezium(15, 25, 35) == 20\n    Explanation: Normal case where the sides are positive integers.\n    median_trapezium(15, 25, -35) == -5\n    Explanation: When one of the sides is negative, the median length can be negative.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a <= 0 or b <= 0 or c <= 0:\n            return 0\n        (other code)\n", "requirement analysis:\nThe function needs to correctly identify the median length of a trapezium based on the provided dimensions. It should handle various trapezium shapes and sizes to cater to different user needs.\nrequirement pool:\n- Calculate the median length of a trapezium accurately\n- Handle different trapezium dimensions and shapes\n- Ensure user-friendly input and output interactions\nWe will design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple Python function using basic arithmetic operations to calculate the median length of a trapezium, the logic can be implemented straightforwardly.\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to the base length.\n    median_trapezium(5, 15, 25) = 15\n    Explanation: In a trapezium where one side is significantly longer than the other, the median length tends towards the longer side.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for calculating the median length should cover these scenarios.\n", "requirement analysis:\nThe function should take the lengths of the two non-parallel sides and the length of the median as input, then calculate and return the median length of the trapezium.\nrequirement pool:\n- Calculate the median length accurately based on the trapezium dimensions\n- Handle different trapezium shapes and sizes to provide flexibility\n- Ensure the function is well-documented for easy understanding and maintenance\nWe will use basic Python functions to calculate the median length of a trapezium without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using basic Python functions, we can calculate the median length of a trapezium by finding the average of the two non-parallel sides.\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would be 0.\n    median_trapezium(10, 10, 10) = 10\n    Explanation: When all sides of the trapezium are equal, the median length would be equal to any side length.\n    median_trapezium(5, 15, 25) = 20\n    Explanation: In a trapezium with side lengths 5, 15, and 25, the median length would be (15+25)/2 = 20.\n\n# [extra code for edge case]\n    No extra code is needed to handle the edge cases. The logic to find the median length covers scenarios where side lengths are 0 or equal.\n", "requirement pool:\n- Calculate the median length of a trapezium accurately\n- Handle different trapezium configurations with ease\n- Ensure the function is well-documented for future maintenance\nWe will use basic Python functions to calculate the median length of a trapezium without the need for any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'trapezium'\n    Explanation: A trapezium is a quadrilateral with one pair of parallel sides.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'median': means the middle value of a dataset when arranged in ascending order\n\n# [code logic]\n    To implement the code, we can calculate the median length of a trapezium using the formula: (a + b) / 2, where 'a' and 'b' are the lengths of the two parallel sides.\n\n# [edge case] \n    median_trapezium(0, 0, 0) = 0\n    Explanation: When all sides of the trapezium are 0, the median length would also be 0.\n    median_trapezium(10, 20, 30) = 20\n    Explanation: In a trapezium where one side is twice the length of the other, the median length is equal to the length of the smaller side.\n    median_trapezium(15, 25, 35) = 20\n    Explanation: Given input values, the median length of the trapezium is calculated as (15 + 25) / 2 = 20.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula used to calculate the median length already accounts for different scenarios.\n"], "test": ["def check(median_trapezium):\n\tassert median_trapezium(15,25,35)==20", "def check(median_trapezium):\n\tassert median_trapezium(10,20,30)==15", "def check(median_trapezium):\n\tassert median_trapezium(6,9,4)==7.5", "def check(median_trapezium):\n\tassert median_trapezium(20, 25, 31) == 22.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 30, 31) == 21.0", "def check(median_trapezium):\n\tassert median_trapezium(19, 22, 30) == 20.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 20, 37) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 30, 40) == 21.5", "def check(median_trapezium):\n\tassert median_trapezium(17, 23, 38) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 23, 39) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 21, 40) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(19, 30, 39) == 24.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 29, 30) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 28, 31) == 19.0", "def check(median_trapezium):\n\tassert median_trapezium(16, 25, 32) == 20.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 23, 38) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 29, 34) == 22.0", "def check(median_trapezium):\n\tassert median_trapezium(20, 30, 32) == 25.0", "def check(median_trapezium):\n\tassert median_trapezium(20, 24, 30) == 22.0", "def check(median_trapezium):\n\tassert median_trapezium(15, 22, 35) == 18.5", "def check(median_trapezium):\n\tassert median_trapezium(18, 29, 32) == 23.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 29, 31) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 24, 30) == 18.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 30, 35) == 21.5", "def check(median_trapezium):\n\tassert median_trapezium(17, 27, 32) == 22.0", "def check(median_trapezium):\n\tassert median_trapezium(16, 30, 30) == 23.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 20, 34) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 22, 36) == 18.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 20, 34) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(16, 24, 39) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 28, 30) == 20.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 21, 33) == 18.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 27, 40) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 26, 31) == 19.5", "def check(median_trapezium):\n\tassert median_trapezium(17, 23, 36) == 20.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 30, 38) == 21.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 15, 32) == 14.0", "def check(median_trapezium):\n\tassert median_trapezium(5, 24, 33) == 14.5", "def check(median_trapezium):\n\tassert median_trapezium(5, 15, 35) == 10.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 25, 28) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 25, 34) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(9, 18, 35) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 18, 33) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(6, 21, 28) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(8, 21, 31) == 14.5", "def check(median_trapezium):\n\tassert median_trapezium(13, 21, 30) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(11, 23, 29) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(8, 23, 35) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 17, 25) == 14.5", "def check(median_trapezium):\n\tassert median_trapezium(12, 20, 34) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(13, 18, 32) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(8, 15, 27) == 11.5", "def check(median_trapezium):\n\tassert median_trapezium(14, 20, 26) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(14, 21, 25) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(9, 18, 32) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(5, 15, 32) == 10.0", "def check(median_trapezium):\n\tassert median_trapezium(15, 19, 30) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(14, 21, 30) == 17.5", "def check(median_trapezium):\n\tassert median_trapezium(7, 15, 32) == 11.0", "def check(median_trapezium):\n\tassert median_trapezium(15, 23, 25) == 19.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 16, 34) == 12.5", "def check(median_trapezium):\n\tassert median_trapezium(14, 20, 26) == 17.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 23, 33) == 16.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 21, 34) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 20, 29) == 13.5", "def check(median_trapezium):\n\tassert median_trapezium(15, 16, 27) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 17, 25) == 14.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 24, 25) == 15.5", "def check(median_trapezium):\n\tassert median_trapezium(10, 22, 28) == 16.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 4, 4) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 6, 6) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(7, 6, 2) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(1, 5, 7) == 3.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 13, 5) == 11.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 12, 9) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(10, 4, 5) == 7.0", "def check(median_trapezium):\n\tassert median_trapezium(3, 13, 2) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(3, 10, 4) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(3, 5, 1) == 4.0", "def check(median_trapezium):\n\tassert median_trapezium(5, 13, 9) == 9.0", "def check(median_trapezium):\n\tassert median_trapezium(2, 10, 8) == 6.0", "def check(median_trapezium):\n\tassert median_trapezium(8, 8, 5) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(11, 8, 8) == 9.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 11, 6) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 14, 8) == 8.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 7, 8) == 7.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 8, 3) == 6.0", "def check(median_trapezium):\n\tassert median_trapezium(8, 9, 7) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(5, 4, 3) == 4.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 7, 8) == 4.5", "def check(median_trapezium):\n\tassert median_trapezium(10, 8, 3) == 9.0", "def check(median_trapezium):\n\tassert median_trapezium(9, 12, 7) == 10.5", "def check(median_trapezium):\n\tassert median_trapezium(11, 7, 9) == 9.0", "def check(median_trapezium):\n\tassert median_trapezium(6, 11, 2) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(8, 14, 1) == 11.0", "def check(median_trapezium):\n\tassert median_trapezium(5, 12, 5) == 8.5", "def check(median_trapezium):\n\tassert median_trapezium(1, 9, 4) == 5.0", "def check(median_trapezium):\n\tassert median_trapezium(7, 6, 8) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(2, 12, 2) == 7.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 9, 9) == 6.5", "def check(median_trapezium):\n\tassert median_trapezium(6, 6, 6) == 6.0", "def check(median_trapezium):\n\tassert median_trapezium(4, 8, 4) == 6.0"], "scores": [0.0392, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0392, 0.0392, 1.0], "pass_results": [false, false, false, false, true, false, true, false, false, true], "pass_test_cases_num": [4, 0, 0, 0, 102, 0, 102, 4, 4, 102], "completion": "from typing import List\n## main.py\n\ndef median_trapezium(a: float, b: float, c: float) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium using the formula: (a + b) / 2.\n\n    Args:\n        a (float): Length of one parallel side of the trapezium.\n        b (float): Length of the other parallel side of the trapezium.\n        c (float): Length of the non-parallel side of the trapezium.\n\n    Returns:\n        float: The median length of the trapezium.\n\n    Examples:\n        >>> median_trapezium(0, 0, 0)\n        0\n        >>> median_trapezium(10, 20, 30)\n        20\n        >>> median_trapezium(15, 25, 35)\n        20\n    \"\"\"\n    return (a + b) / 2\n", "passed": true, "pass": true, "pass_num": 3, "round": 152, "mutate_method": "expand_one2two", "parent_index": 152}
