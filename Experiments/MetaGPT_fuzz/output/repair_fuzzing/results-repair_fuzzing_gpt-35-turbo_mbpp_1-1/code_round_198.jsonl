{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 638, "prompt": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.", "code": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,70)==86", "assert wind_chill(10,100)==116", "assert wind_chill(116, 30) == 33", "assert wind_chill(122, 32) == 36", "assert wind_chill(125, 32) == 36", "assert wind_chill(123, 32) == 36", "assert wind_chill(124, 38) == 45", "assert wind_chill(118, 40) == 48", "assert wind_chill(122, 33) == 37", "assert wind_chill(115, 34) == 39", "assert wind_chill(116, 33) == 37", "assert wind_chill(117, 39) == 46", "assert wind_chill(125, 31) == 34", "assert wind_chill(125, 39) == 46", "assert wind_chill(124, 39) == 46", "assert wind_chill(118, 33) == 37", "assert wind_chill(117, 32) == 36", "assert wind_chill(118, 35) == 40", "assert wind_chill(121, 32) == 36", "assert wind_chill(119, 31) == 34", "assert wind_chill(124, 37) == 43", "assert wind_chill(118, 32) == 36", "assert wind_chill(115, 40) == 48", "assert wind_chill(125, 38) == 45", "assert wind_chill(125, 36) == 42", "assert wind_chill(122, 32) == 36", "assert wind_chill(122, 34) == 39", "assert wind_chill(121, 40) == 48", "assert wind_chill(117, 38) == 45", "assert wind_chill(123, 36) == 42", "assert wind_chill(117, 36) == 42", "assert wind_chill(120, 33) == 37", "assert wind_chill(116, 39) == 46", "assert wind_chill(122, 40) == 48", "assert wind_chill(124, 31) == 34", "assert wind_chill(38, 69) == 85", "assert wind_chill(39, 69) == 85", "assert wind_chill(38, 73) == 90", "assert wind_chill(45, 69) == 85", "assert wind_chill(38, 73) == 90", "assert wind_chill(39, 69) == 85", "assert wind_chill(42, 71) == 88", "assert wind_chill(38, 72) == 89", "assert wind_chill(42, 66) == 81", "assert wind_chill(45, 73) == 91", "assert wind_chill(41, 73) == 90", "assert wind_chill(39, 73) == 90", "assert wind_chill(43, 70) == 87", "assert wind_chill(45, 65) == 80", "assert wind_chill(39, 66) == 81", "assert wind_chill(45, 67) == 83", "assert wind_chill(45, 70) == 87", "assert wind_chill(44, 72) == 89", "assert wind_chill(43, 68) == 84", "assert wind_chill(39, 70) == 86", "assert wind_chill(39, 70) == 86", "assert wind_chill(40, 72) == 89", "assert wind_chill(38, 71) == 87", "assert wind_chill(44, 69) == 85", "assert wind_chill(41, 67) == 82", "assert wind_chill(37, 73) == 90", "assert wind_chill(43, 69) == 85", "assert wind_chill(43, 75) == 93", "assert wind_chill(40, 73) == 90", "assert wind_chill(40, 66) == 81", "assert wind_chill(41, 71) == 88", "assert wind_chill(40, 71) == 88", "assert wind_chill(38, 70) == 86", "assert wind_chill(11, 100) == 117", "assert wind_chill(15, 102) == 121", "assert wind_chill(14, 102) == 121", "assert wind_chill(14, 102) == 121", "assert wind_chill(7, 104) == 119", "assert wind_chill(8, 100) == 115", "assert wind_chill(11, 98) == 114", "assert wind_chill(5, 102) == 114", "assert wind_chill(9, 105) == 121", "assert wind_chill(6, 102) == 115", "assert wind_chill(6, 96) == 108", "assert wind_chill(7, 102) == 116", "assert wind_chill(9, 102) == 118", "assert wind_chill(14, 97) == 115", "assert wind_chill(8, 103) == 118", "assert wind_chill(14, 96) == 114", "assert wind_chill(14, 95) == 112", "assert wind_chill(6, 100) == 113", "assert wind_chill(15, 105) == 125", "assert wind_chill(5, 96) == 107", "assert wind_chill(14, 103) == 122", "assert wind_chill(12, 96) == 113", "assert wind_chill(10, 95) == 110", "assert wind_chill(14, 101) == 120", "assert wind_chill(13, 95) == 112", "assert wind_chill(14, 103) == 122", "assert wind_chill(13, 100) == 118", "assert wind_chill(14, 101) == 120", "assert wind_chill(8, 105) == 121", "assert wind_chill(11, 102) == 119", "assert wind_chill(10, 105) == 122", "assert wind_chill(6, 96) == 108", "assert wind_chill(13, 101) == 119"], "entry_point": "wind_chill", "repair_prompt": ["Write a function wind_chill to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nwind_chill(120,35)==40\n", "Write a function wind_chill that takes in the wind velocity in km/h and temperature in celsius and calculates the wind chill index, then rounds it to the nearest integer.\nwind_chill(120,35)==40\n", "Write a function wind_chill to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nwind_chill(120,35)==40\n"], "completions": ["from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index based on wind speed and temperature.\n    \n    Args:\n        wind_speed: integer representing wind speed in km/h\n        temperature: integer representing temperature in celsius\n        \n    Returns:\n        integer representing the wind chill index rounded to the next integer\n    \"\"\"\n    \n    # Wind chill formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16)\n    \n    # Round up to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n    \n    return wind_chill_index\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index based on wind speed and temperature.\n    \n    Args:\n        wind_speed: integer representing wind speed in km/h\n        temperature: integer representing temperature in celsius\n        \n    Returns:\n        Integer rounded wind chill index\n    \"\"\"\n    \n    # Calculate wind chill index using the formula: 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n    \n    return int(wind_chill_index)\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index using the formula\n    \n    Args:\n        wind_speed (int): The speed of the wind in miles per hour\n        temperature (int): The temperature in Fahrenheit\n        \n    Returns:\n        int: The wind chill index, rounded up to the next integer\n    \"\"\"\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    return int(wind_chill_index + 0.5)\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index based on wind speed and temperature.\n    \n    Args:\n        wind_speed (float): The speed of the wind in km/h.\n        temperature (float): The temperature in Celsius.\n        \n    Returns:\n        int: The calculated wind chill index rounded to the nearest integer.\n    \"\"\"\n    \n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16)\n    \n    return round(wind_chill_index)\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index based on wind speed and temperature.\n\n    Args:\n        wind_speed (float): The speed of the wind in km/h.\n        temperature (float): The temperature in Celsius.\n\n    Returns:\n        int: The calculated wind chill index rounded to the nearest integer.\n    \"\"\"\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16)\n    \n    return round(wind_chill_index)\n\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: float, temperature: float) -> int:\n    \"\"\"\n    Calculate the wind chill index based on wind speed and temperature.\n\n    Args:\n        wind_speed (float): The speed of the wind in km/h.\n        temperature (float): The temperature in Celsius.\n\n    Returns:\n        int: The calculated wind chill index rounded to the nearest integer.\n    \"\"\"\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16)\n    \n    return round(wind_chill_index)\n\n", "from typing import List\n## main.py\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index using the given wind speed and temperature.\n\n    Args:\n        wind_speed (int): The speed of the wind in miles per hour.\n        temperature (int): The temperature in Fahrenheit.\n\n    Returns:\n        int: The calculated wind chill index rounded to the next integer.\n    \"\"\"\n    # Calculate wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    \n    # Round the result to the next integer\n    return int(wind_chill_index + 0.5)\n", "from typing import List\n## main.py\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index using the formula and round it to the next integer.\n\n    Args:\n        wind_speed (int): The wind speed in miles per hour.\n        temperature (int): The temperature in Fahrenheit.\n\n    Returns:\n        int: The wind chill index rounded to the next integer.\n    \"\"\"\n    # Calculate the wind chill index using the formula\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    \n    # Round the result to the next integer\n    return int(wind_chill_index + 0.5)\n", "from typing import List\n## main.py\n\nimport math\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index based on the wind speed and temperature.\n    \n    Args:\n        wind_speed (int): The wind speed in km/h.\n        temperature (int): The temperature in degrees Celsius.\n        \n    Returns:\n        int: The calculated wind chill index rounded to the next integer.\n    \"\"\"\n    \n    wind_chill_index = round(13.12 + 0.6215 * temperature - 11.37 * math.pow(wind_speed, 0.16) + 0.3965 * temperature * math.pow(wind_speed, 0.16))\n    \n    return wind_chill_index\n", "from typing import List\n## main.py\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    Args:\n        wind_speed: integer representing wind speed in km/h\n        temperature: integer representing temperature in celsius\n\n    Returns:\n        integer representing the wind chill index rounded to the next integer\n    \"\"\"\n    \n    if wind_speed == 0:\n        return temperature\n    elif temperature < 0:\n        return temperature\n    \n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    \n    return round(wind_chill_index)\n\n"], "plans": ["requirement pool:\n- Implement wind chill formula accurately\n- Round calculated index to the next integer\n- Optimize algorithm for efficiency\nWe will use the math library in Python to implement the wind chill formula and round up the result to the next integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to implement the wind chill formula and round up the result to the next integer.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -10\n    Explanation: When the temperature is below freezing point, the wind chill index can be lower than the actual temperature.\n    wind_chill(60, 20) = 25\n    Explanation: A moderate wind at a comfortable temperature results in a slightly lower wind chill index.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided should cover all scenarios effectively.\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the next integer\n- Handle both wind velocity and temperature inputs\nWe will use the math library in Python to efficiently calculate the wind chill index and round the result to the next integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library in Python to calculate the wind chill index and round the result to the next integer, the implementation can follow the plan directly.\n\n# [edge case] \n    wind_chill(120, 35) = 40\n    Explanation: The wind chill index is calculated based on the wind velocity and temperature. In this case, with a wind velocity of 120 km/h and a temperature of 35 degrees Celsius, the wind chill index is calculated to be 40.\n\n# [extra code for edge case]\n    No extra code needed to handle the edge cases. The plan already includes using the math library for efficient calculation.\n", "requirement pool:\n- Implement wind chill calculation formula\n- Ensure rounding to the next integer\n- Optimize algorithm for efficiency\nWe will use the math library in Python to implement the wind chill calculation formula efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library to implement the wind chill calculation formula efficiently, the code logic can be implemented as follows:\n\n```python\nimport math\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    wind_chill_index = math.ceil(13.12 + 0.6215*temperature - 11.37*math.pow(wind_speed, 0.16) + 0.3965*temperature*math.pow(wind_speed, 0.16))\n    return wind_chill_index\n```\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (wind speed = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -6\n    Explanation: For extreme cold temperatures, the wind chill index can be lower than the actual temperature.\n    wind_chill(50, 20) = 23\n    Explanation: A moderate wind speed can slightly decrease the perceived temperature.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula already considers different scenarios and provides accurate results.\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the nearest integer\n- Optimize performance for large datasets\nWe will use the math library in Python to calculate the wind chill index formula and round the result to the nearest integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to calculate the wind chill index formula and round the result to the nearest integer.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -10\n    Explanation: When the temperature is below freezing point, the wind chill index can be lower than the actual temperature.\n    wind_chill(60, 20) = 23\n    Explanation: A moderate wind at a comfortable temperature slightly decreases the perceived temperature.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula and rounding logic will cover all scenarios.\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the nearest integer\n- Optimize performance for large datasets\nWe will use the math library in Python to calculate the wind chill index formula and round the result to the nearest integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: It is a measure of how cold it feels due to the combination of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to calculate the wind chill index formula and round the result to the nearest integer.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -5\n    Explanation: In extreme cold temperatures, the wind chill index can make it feel even colder than the actual temperature.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The existing logic covers scenarios where wind velocity is zero or temperature is extremely low.\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the nearest integer\n- Optimize performance for large datasets\nWe will use the math library in Python to calculate the wind chill index formula and round the result to the nearest integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will use the math library in Python to calculate the wind chill index formula and round the result to the nearest integer.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -10\n    Explanation: When the temperature is below freezing point, the wind chill index can be lower than the actual temperature.\n    wind_chill(60, 20) = 23\n    Explanation: A moderate wind at a comfortable temperature slightly decreases the perceived temperature.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula and rounding logic cover all scenarios.\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the next integer\n- Handle large input datasets efficiently\nWe will design a simple Python function using basic mathematical operations to calculate the wind chill index and round it to the next integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple Python function using basic mathematical operations, the logic can be implemented straightforwardly without further interpretation.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -10\n    Explanation: When the temperature is below freezing point, the wind chill index can be lower than the actual temperature.\n    wind_chill(60, 20) = 25\n    Explanation: A moderate wind at a comfortable temperature slightly decreases the perceived temperature.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if velocity == 0:\n            return temperature\n        (other code)\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the next integer\n- Handle large wind velocity and temperature datasets efficiently\nWe will design a simple Python function using basic mathematical operations to calculate the wind chill index and round it to the next integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple Python function using basic mathematical operations, the logic can be implemented straightforwardly without further interpretation.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -10\n    Explanation: When the temperature is below freezing point, the wind chill index can be lower than the actual temperature.\n    wind_chill(60, 20) = 25\n    Explanation: A moderate wind at a comfortable temperature slightly decreases the perceived temperature.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if velocity == 0:\n            return temperature\n        (other code)\n", "requirement pool:\n- Calculate wind chill index accurately\n- Round the result to the next integer\n- Handle large wind velocity and temperature datasets efficiently\nWe will use the math library in Python to efficiently calculate the wind chill index and round the result to the next integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library in Python to calculate the wind chill index and round the result to the next integer, the implementation can follow the plan directly.\n\n# [edge case] \n    wind_chill(120, 35) == 40\n    Explanation: The wind chill index is calculated based on the wind velocity and temperature. In this case, with a wind velocity of 120 km/h and a temperature of 35 degrees Celsius, the wind chill index is calculated to be 40.\n\n# [extra code for edge case]\n    No extra code needed for handling edge cases. The provided logic should cover the calculation and rounding of the wind chill index accurately.\n", "requirement pool:\n- Implement wind chill formula accurately\n- Ensure rounding to the next integer\n- Optimize algorithm for efficiency\nWe will design a simple Python function using basic mathematical operations to accurately calculate the wind chill index and round it to the next integer.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'wind chill index'\n    Explanation: The wind chill index is a measure of how cold it feels due to the combined effect of wind and temperature.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is to design a simple Python function using basic mathematical operations, the logic can be implemented straightforwardly without additional interpretation.\n\n# [edge case] \n    wind_chill(0, 35) = 35\n    Explanation: When there is no wind (velocity = 0), the wind chill index is equal to the temperature itself.\n    wind_chill(120, -10) = -10\n    Explanation: When the temperature is below freezing point, the wind chill index can be lower than the actual temperature.\n    wind_chill(50, 20) = 20\n    Explanation: When the wind velocity is moderate, it may not significantly affect the perceived temperature.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if velocity == 0:\n            return temperature\n        elif temperature < 0:\n            return temperature\n        (other code)\n"], "test": ["def check(wind_chill):\n\tassert wind_chill(120,35)==40", "def check(wind_chill):\n\tassert wind_chill(40,70)==86", "def check(wind_chill):\n\tassert wind_chill(10,100)==116", "def check(wind_chill):\n\tassert wind_chill(116, 30) == 33", "def check(wind_chill):\n\tassert wind_chill(122, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(125, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(123, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(124, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(118, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(122, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(115, 34) == 39", "def check(wind_chill):\n\tassert wind_chill(116, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(117, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(125, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(125, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(124, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(118, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(117, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(118, 35) == 40", "def check(wind_chill):\n\tassert wind_chill(121, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(119, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(124, 37) == 43", "def check(wind_chill):\n\tassert wind_chill(118, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(115, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(125, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(125, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(122, 32) == 36", "def check(wind_chill):\n\tassert wind_chill(122, 34) == 39", "def check(wind_chill):\n\tassert wind_chill(121, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(117, 38) == 45", "def check(wind_chill):\n\tassert wind_chill(123, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(117, 36) == 42", "def check(wind_chill):\n\tassert wind_chill(120, 33) == 37", "def check(wind_chill):\n\tassert wind_chill(116, 39) == 46", "def check(wind_chill):\n\tassert wind_chill(122, 40) == 48", "def check(wind_chill):\n\tassert wind_chill(124, 31) == 34", "def check(wind_chill):\n\tassert wind_chill(38, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(39, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(38, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(45, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(38, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(39, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(42, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(38, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(42, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(45, 73) == 91", "def check(wind_chill):\n\tassert wind_chill(41, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(39, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(43, 70) == 87", "def check(wind_chill):\n\tassert wind_chill(45, 65) == 80", "def check(wind_chill):\n\tassert wind_chill(39, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(45, 67) == 83", "def check(wind_chill):\n\tassert wind_chill(45, 70) == 87", "def check(wind_chill):\n\tassert wind_chill(44, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(43, 68) == 84", "def check(wind_chill):\n\tassert wind_chill(39, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(39, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(40, 72) == 89", "def check(wind_chill):\n\tassert wind_chill(38, 71) == 87", "def check(wind_chill):\n\tassert wind_chill(44, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(41, 67) == 82", "def check(wind_chill):\n\tassert wind_chill(37, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(43, 69) == 85", "def check(wind_chill):\n\tassert wind_chill(43, 75) == 93", "def check(wind_chill):\n\tassert wind_chill(40, 73) == 90", "def check(wind_chill):\n\tassert wind_chill(40, 66) == 81", "def check(wind_chill):\n\tassert wind_chill(41, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(40, 71) == 88", "def check(wind_chill):\n\tassert wind_chill(38, 70) == 86", "def check(wind_chill):\n\tassert wind_chill(11, 100) == 117", "def check(wind_chill):\n\tassert wind_chill(15, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(14, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(14, 102) == 121", "def check(wind_chill):\n\tassert wind_chill(7, 104) == 119", "def check(wind_chill):\n\tassert wind_chill(8, 100) == 115", "def check(wind_chill):\n\tassert wind_chill(11, 98) == 114", "def check(wind_chill):\n\tassert wind_chill(5, 102) == 114", "def check(wind_chill):\n\tassert wind_chill(9, 105) == 121", "def check(wind_chill):\n\tassert wind_chill(6, 102) == 115", "def check(wind_chill):\n\tassert wind_chill(6, 96) == 108", "def check(wind_chill):\n\tassert wind_chill(7, 102) == 116", "def check(wind_chill):\n\tassert wind_chill(9, 102) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 97) == 115", "def check(wind_chill):\n\tassert wind_chill(8, 103) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 96) == 114", "def check(wind_chill):\n\tassert wind_chill(14, 95) == 112", "def check(wind_chill):\n\tassert wind_chill(6, 100) == 113", "def check(wind_chill):\n\tassert wind_chill(15, 105) == 125", "def check(wind_chill):\n\tassert wind_chill(5, 96) == 107", "def check(wind_chill):\n\tassert wind_chill(14, 103) == 122", "def check(wind_chill):\n\tassert wind_chill(12, 96) == 113", "def check(wind_chill):\n\tassert wind_chill(10, 95) == 110", "def check(wind_chill):\n\tassert wind_chill(14, 101) == 120", "def check(wind_chill):\n\tassert wind_chill(13, 95) == 112", "def check(wind_chill):\n\tassert wind_chill(14, 103) == 122", "def check(wind_chill):\n\tassert wind_chill(13, 100) == 118", "def check(wind_chill):\n\tassert wind_chill(14, 101) == 120", "def check(wind_chill):\n\tassert wind_chill(8, 105) == 121", "def check(wind_chill):\n\tassert wind_chill(11, 102) == 119", "def check(wind_chill):\n\tassert wind_chill(10, 105) == 122", "def check(wind_chill):\n\tassert wind_chill(6, 96) == 108", "def check(wind_chill):\n\tassert wind_chill(13, 101) == 119"], "scores": [0.5392, 0.5392, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [false, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [55, 55, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef wind_chill(wind_speed: int, temperature: int) -> int:\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n\n    Args:\n        wind_speed: integer representing wind speed in km/h\n        temperature: integer representing temperature in celsius\n\n    Returns:\n        integer representing the wind chill index rounded to the next integer\n    \"\"\"\n    \n    if wind_speed == 0:\n        return temperature\n    elif temperature < 0:\n        return temperature\n    \n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n    \n    return round(wind_chill_index)\n\n", "passed": true, "pass": true, "pass_num": 8, "round": 198, "mutate_method": "condense_two2one", "parent_index": 198}
