{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 611, "prompt": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column, ensuring that the function efficiently handles edge cases such as empty lists or columns with non-numeric values.", "code": "def max_of_nth(test_list, N):\n  res = max([sub[N] for sub in test_list])\n  return (res) ", "test_imports": [], "test_list": ["assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19", "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10", "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11", "assert max_of_nth([(10, 7, 12), (2, 2, 7), (7, 5, 16)], 1) == 7", "assert max_of_nth([(8, 2, 4), (3, 3, 9), (11, 13, 22)], 2) == 22", "assert max_of_nth([(8, 11, 4), (1, 7, 6), (9, 10, 14)], 1) == 11", "assert max_of_nth([(9, 10, 9), (4, 6, 1), (12, 12, 14)], 2) == 14", "assert max_of_nth([(10, 8, 6), (3, 7, 4), (5, 11, 18)], 1) == 11", "assert max_of_nth([(2, 4, 12), (2, 8, 2), (11, 7, 23)], 2) == 23", "assert max_of_nth([(8, 6, 12), (5, 4, 4), (12, 8, 24)], 1) == 8", "assert max_of_nth([(10, 1, 7), (3, 2, 6), (11, 6, 24)], 1) == 6", "assert max_of_nth([(3, 8, 7), (4, 7, 6), (7, 12, 18)], 1) == 12", "assert max_of_nth([(7, 1, 3), (6, 6, 3), (4, 12, 14)], 1) == 12", "assert max_of_nth([(4, 7, 8), (3, 6, 10), (9, 8, 23)], 1) == 8", "assert max_of_nth([(1, 7, 8), (4, 3, 9), (12, 10, 22)], 2) == 22", "assert max_of_nth([(5, 10, 6), (5, 3, 6), (7, 8, 15)], 2) == 15", "assert max_of_nth([(7, 2, 7), (1, 8, 9), (3, 8, 16)], 2) == 16", "assert max_of_nth([(10, 4, 2), (2, 1, 10), (11, 12, 23)], 1) == 12", "assert max_of_nth([(3, 2, 8), (2, 7, 9), (10, 4, 22)], 2) == 22", "assert max_of_nth([(6, 11, 12), (6, 2, 4), (5, 10, 20)], 2) == 20", "assert max_of_nth([(10, 6, 10), (2, 6, 5), (3, 5, 18)], 1) == 6", "assert max_of_nth([(6, 7, 9), (1, 8, 4), (4, 9, 19)], 2) == 19", "assert max_of_nth([(5, 6, 7), (1, 4, 3), (9, 11, 23)], 1) == 11", "assert max_of_nth([(4, 5, 6), (5, 1, 4), (6, 9, 23)], 2) == 23", "assert max_of_nth([(5, 6, 9), (5, 3, 2), (4, 8, 24)], 2) == 24", "assert max_of_nth([(10, 2, 8), (2, 6, 10), (11, 6, 20)], 2) == 20", "assert max_of_nth([(7, 5, 9), (4, 6, 3), (12, 6, 15)], 2) == 15", "assert max_of_nth([(4, 7, 7), (3, 8, 3), (8, 6, 14)], 2) == 14", "assert max_of_nth([(10, 11, 10), (5, 8, 10), (10, 9, 24)], 1) == 11", "assert max_of_nth([(9, 9, 6), (5, 2, 4), (10, 11, 15)], 1) == 11", "assert max_of_nth([(6, 4, 8), (6, 3, 2), (9, 11, 18)], 2) == 18", "assert max_of_nth([(4, 10, 3), (5, 1, 3), (11, 14, 15)], 2) == 15", "assert max_of_nth([(7, 9, 4), (2, 2, 5), (5, 12, 20)], 2) == 20", "assert max_of_nth([(5, 5, 2), (4, 2, 5), (11, 9, 14)], 1) == 9", "assert max_of_nth([(7, 9, 9), (4, 2, 8), (10, 6, 19)], 2) == 19", "assert max_of_nth([(3, 10, 2), (1, 6, 5), (6, 12, 22)], 2) == 22", "assert max_of_nth([(8, 6, 10), (4, 5, 4), (4, 11, 20)], 1) == 11", "assert max_of_nth([(11, 5, 3), (2, 6, 1), (4, 11, 15)], 1) == 11", "assert max_of_nth([(10, 12, 9), (1, 7, 5), (13, 14, 24)], 2) == 24", "assert max_of_nth([(10, 9, 6), (2, 1, 3), (7, 11, 17)], 1) == 11", "assert max_of_nth([(9, 5, 12), (4, 6, 7), (5, 10, 16)], 1) == 10", "assert max_of_nth([(4, 8, 3), (6, 8, 4), (11, 14, 23)], 1) == 14", "assert max_of_nth([(5, 5, 5), (3, 9, 3), (4, 13, 17)], 1) == 13", "assert max_of_nth([(1, 12, 8), (5, 6, 4), (14, 6, 22)], 1) == 12", "assert max_of_nth([(5, 11, 6), (1, 2, 2), (13, 5, 17)], 1) == 11", "assert max_of_nth([(7, 12, 9), (7, 9, 6), (14, 14, 23)], 2) == 23", "assert max_of_nth([(3, 8, 7), (7, 7, 8), (6, 12, 17)], 1) == 12", "assert max_of_nth([(3, 6, 6), (3, 3, 8), (9, 7, 18)], 1) == 7", "assert max_of_nth([(4, 12, 5), (1, 7, 9), (14, 5, 24)], 2) == 24", "assert max_of_nth([(11, 11, 10), (5, 8, 4), (10, 6, 25)], 1) == 11", "assert max_of_nth([(10, 9, 3), (4, 2, 2), (8, 7, 16)], 2) == 16", "assert max_of_nth([(11, 11, 7), (1, 4, 3), (7, 5, 22)], 2) == 22", "assert max_of_nth([(5, 3, 7), (2, 4, 10), (13, 9, 15)], 1) == 9", "assert max_of_nth([(7, 2, 10), (4, 2, 6), (7, 7, 19)], 1) == 7", "assert max_of_nth([(8, 4, 11), (3, 6, 8), (11, 8, 23)], 1) == 8", "assert max_of_nth([(2, 9, 8), (5, 1, 5), (7, 15, 25)], 1) == 15", "assert max_of_nth([(11, 2, 12), (5, 4, 2), (9, 6, 22)], 1) == 6", "assert max_of_nth([(11, 7, 6), (1, 3, 1), (10, 14, 19)], 2) == 19", "assert max_of_nth([(4, 11, 7), (3, 2, 8), (12, 7, 25)], 1) == 11", "assert max_of_nth([(5, 11, 5), (1, 2, 2), (9, 9, 18)], 1) == 11", "assert max_of_nth([(11, 2, 11), (5, 5, 5), (12, 9, 17)], 2) == 17", "assert max_of_nth([(8, 10, 8), (6, 4, 11), (11, 8, 22)], 2) == 22", "assert max_of_nth([(7, 3, 3), (1, 2, 4), (7, 9, 25)], 2) == 25", "assert max_of_nth([(3, 6, 4), (4, 9, 7), (9, 8, 20)], 1) == 9", "assert max_of_nth([(8, 12, 5), (7, 2, 2), (11, 8, 15)], 2) == 15", "assert max_of_nth([(11, 9, 7), (2, 5, 8), (12, 10, 20)], 1) == 10", "assert max_of_nth([(9, 7, 8), (4, 7, 10), (4, 5, 23)], 1) == 7", "assert max_of_nth([(11, 3, 5), (5, 1, 2), (11, 15, 17)], 2) == 17", "assert max_of_nth([(3, 11, 11), (6, 5, 10), (10, 6, 22)], 1) == 11", "assert max_of_nth([(10, 11, 14), (2, 1, 11), (9, 15, 16)], 2) == 16", "assert max_of_nth([(3, 4, 7), (7, 8, 9), (12, 12, 22)], 2) == 22", "assert max_of_nth([(11, 9, 13), (2, 7, 6), (15, 10, 25)], 1) == 10", "assert max_of_nth([(3, 11, 9), (6, 6, 12), (10, 15, 16)], 2) == 16", "assert max_of_nth([(6, 7, 5), (3, 7, 11), (12, 7, 23)], 2) == 23", "assert max_of_nth([(11, 8, 12), (1, 10, 12), (14, 16, 25)], 2) == 25", "assert max_of_nth([(8, 8, 9), (4, 6, 8), (14, 8, 23)], 2) == 23", "assert max_of_nth([(8, 13, 10), (1, 4, 7), (8, 11, 24)], 2) == 24", "assert max_of_nth([(4, 7, 13), (7, 4, 6), (15, 13, 23)], 1) == 13", "assert max_of_nth([(12, 7, 8), (3, 6, 7), (9, 11, 16)], 1) == 11", "assert max_of_nth([(3, 8, 10), (1, 4, 8), (12, 9, 21)], 2) == 21", "assert max_of_nth([(11, 7, 7), (6, 10, 9), (6, 12, 19)], 2) == 19", "assert max_of_nth([(3, 10, 12), (2, 9, 3), (7, 7, 19)], 1) == 10", "assert max_of_nth([(2, 10, 11), (5, 5, 5), (7, 7, 26)], 2) == 26", "assert max_of_nth([(6, 12, 7), (5, 2, 2), (5, 14, 21)], 2) == 21", "assert max_of_nth([(10, 7, 6), (6, 5, 5), (10, 9, 17)], 1) == 9", "assert max_of_nth([(10, 9, 6), (4, 1, 10), (13, 14, 18)], 1) == 14", "assert max_of_nth([(9, 6, 8), (6, 10, 4), (14, 9, 24)], 2) == 24", "assert max_of_nth([(8, 11, 4), (1, 4, 9), (8, 9, 21)], 2) == 21", "assert max_of_nth([(11, 10, 10), (5, 5, 12), (14, 14, 18)], 2) == 18", "assert max_of_nth([(9, 3, 9), (6, 3, 10), (7, 15, 20)], 1) == 15", "assert max_of_nth([(6, 7, 5), (4, 4, 6), (8, 13, 18)], 2) == 18", "assert max_of_nth([(11, 10, 14), (6, 10, 4), (14, 10, 22)], 1) == 10", "assert max_of_nth([(4, 8, 12), (2, 5, 10), (13, 12, 17)], 1) == 12", "assert max_of_nth([(3, 11, 5), (1, 1, 7), (6, 12, 17)], 2) == 17", "assert max_of_nth([(4, 13, 14), (1, 2, 11), (14, 9, 22)], 2) == 22", "assert max_of_nth([(8, 6, 9), (5, 5, 9), (5, 14, 21)], 2) == 21", "assert max_of_nth([(9, 10, 6), (7, 5, 4), (10, 6, 26)], 2) == 26", "assert max_of_nth([(9, 5, 14), (1, 2, 9), (8, 12, 26)], 2) == 26", "assert max_of_nth([(4, 11, 12), (4, 7, 11), (5, 9, 24)], 1) == 11", "assert max_of_nth([(11, 4, 9), (2, 1, 5), (14, 15, 20)], 1) == 15", "assert max_of_nth([(3, 12, 8), (3, 10, 2), (10, 8, 19)], 1) == 12", "assert max_of_nth([(5, 5, 11), (6, 7, 10), (14, 10, 21)], 2) == 21"], "entry_point": "max_of_nth", "repair_prompt": ["Write a function max_of_nth which given a matrix represented as a list of lists returns the max of the n'th column, ensuring that the function efficiently handles edge cases such as empty lists or columns with non-numeric values.\nmax_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n", "Write a function max_of_nth that efficiently handles edge cases like empty lists or non-numeric values in columns, by returning the maximum value of the n'th column in a matrix represented as a list of lists.\nmax_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n", "Write a function max_of_nth that returns the max of the n'th column in a matrix list efficiently handling edge cases like empty lists or non-numeric values.\nmax_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[int]], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to find the max value of the n'th column in the matrix\n    \n    Args:\n    matrix (List[List[int]]): A list of lists representing a table of data\n    n (int): The column index to find the maximum value\n    \n    Returns:\n    Union[int, None]: The maximum value in the n'th column or None if matrix is empty or n is out of bounds\n    \"\"\"\n    \n    if not matrix or not all(isinstance(row, list) for row in matrix) or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    column_values = [row[n] for row in matrix if isinstance(row[n], int)]\n    \n    return max(column_values) if column_values else None\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[int]], n: int) -> Union[int, None]:\n    # Function to find the max value of the n'th column in the matrix\n    try:\n        column_values = [row[n] for row in matrix]\n        numeric_values = [value for value in column_values if isinstance(value, int)]\n        if numeric_values:\n            return max(numeric_values)\n        else:\n            return None\n    except (IndexError, TypeError):\n        return None\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[int]], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to find the max value in the n'th column of the matrix\n    \n    Args:\n    matrix (List[List[int]]): A list of lists representing a table of values\n    n (int): The column index to find the maximum value\n    \n    Returns:\n    Union[int, None]: The maximum value found in the n'th column or None if not found\n    \"\"\"\n    \n    if not matrix or not all(isinstance(row, list) for row in matrix) or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    column_values = [row[n] for row in matrix if isinstance(row[n], int)]\n    \n    if not column_values:\n        return None\n    \n    return max(column_values)\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[Union[int, float]]], n: int) -> Union[int, float]:\n    \"\"\"\n    Function to find the maximum value of the n'th column in a matrix\n    \n    Args:\n    matrix: A list of lists representing the matrix\n    n: An integer representing the column index\n    \n    Returns:\n    The maximum value in the specified column, or None if there are edge cases\n    \"\"\"\n    \n    if not matrix or n >= len(matrix[0]) or not all(isinstance(row[n-1], (int, float)) for row in matrix):\n        return None\n    \n    column_values = [row[n-1] for row in matrix if isinstance(row, list) and n-1 < len(row) and isinstance(row[n-1], (int, float))]\n    \n    if not column_values:\n        return None\n    \n    return max(column_values)\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[Union[int, float]]], n: int) -> Union[int, float]:\n    \"\"\"\n    Function to find the maximum value of the n'th column in the matrix\n    \n    Args:\n    matrix: A list of lists representing the matrix\n    n: An integer representing the column index\n    \n    Returns:\n    The maximum value found in the n'th column of the matrix\n    \"\"\"\n    \n    if not matrix or not all(isinstance(row, list) for row in matrix) or n < 0 or any(len(row) <= n for row in matrix):\n        raise ValueError('Invalid input matrix or column index')\n    \n    column_values = [row[n] for row in matrix]\n    \n    return max(column_values)\n", "from typing import List\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[int]], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to find the maximum value of the n'th column in a matrix\n    \n    Args:\n    matrix: List of lists representing the matrix\n    n: Integer representing the column number\n    \n    Returns:\n    Maximum value in the n'th column or None if matrix is empty or contains non-numeric values\n    \"\"\"\n    \n    if not matrix or not all(isinstance(row, list) for row in matrix) or not all(isinstance(val, (int, float)) for row in matrix for val in row):\n        return None\n    \n    column_values = [row[n] for row in matrix if len(row) > n and isinstance(row[n], (int, float))]\n    \n    if not column_values:\n        return None\n    \n    return max(column_values)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Union\n\ndef max_of_nth(matrix: List[Tuple], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to return the max of the n'th column in a matrix list\n    \n    Args:\n    matrix (List[Tuple]): The input matrix list\n    n (int): The column number\n    \n    Returns:\n    Union[int, None]: The maximum value in the nth column or None if there are edge cases\n    \"\"\"\n    \n    if not matrix or not all(isinstance(row, tuple) for row in matrix):\n        return None\n    \n    try:\n        column_values = [row[n-1] for row in matrix]\n        max_value = max(column_values)\n        return max_value\n    except (IndexError, TypeError):\n        return None\n", "from typing import List\nfrom typing import List, Tuple, Union\n\ndef max_of_nth(matrix: List[Tuple], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to find the max value in the n'th column of a matrix\n\n    Args:\n    matrix (List[Tuple]): Input matrix\n    n (int): Column number\n\n    Returns:\n    Union[int, None]: Maximum value in the n'th column or None if not found\n    \"\"\"\n    if not matrix or not all(isinstance(row, tuple) for row in matrix) or any(not isinstance(cell, (int, float)) for row in matrix for cell in row):\n        return None\n    \n    column_values = [row[n-1] for row in matrix if len(row) >= n]\n    numeric_values = [value for value in column_values if isinstance(value, (int, float))]\n    \n    return max(numeric_values) if numeric_values else None\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Union\n\ndef max_of_nth(matrix: List[Tuple], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to return the max of the n'th column in a matrix list\n\n    Args:\n    matrix (List[Tuple]): The input matrix list\n    n (int): The column index to find the maximum value\n\n    Returns:\n    Union[int, None]: The maximum value in the specified column or None if matrix is empty, contains non-numeric values,\n                      n is negative, or the specified column does not exist in any row\n    \"\"\"\n    if not matrix or not all(isinstance(row, tuple) for row in matrix) or n < 0:\n        return None\n\n    column_values = [row[n] for row in matrix if len(row) > n and isinstance(row[n], (int, float))]\n\n    return max(column_values) if column_values else None\n", "from typing import List\n## main.py\n\nfrom typing import List, Union\n\ndef max_of_nth(matrix: List[List[int]], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to find the max value of the n'th column in a matrix\n    \n    Args:\n    matrix (List[List[int]]): A list of lists representing a table of data\n    n (int): The column index to find the maximum value\n    \n    Returns:\n    Union[int, None]: The maximum value found in the n'th column, or None if matrix is empty or n is out of bounds\n    \"\"\"\n    if not matrix or not all(isinstance(row, list) for row in matrix) or n < 0 or n >= len(matrix[0]):\n        return None\n    \n    column_values = [row[n] for row in matrix if isinstance(row, list) and len(row) > n and isinstance(row[n], (int, float))]\n    \n    return max(column_values) if column_values else None\n"], "plans": ["requirement pool:\n- Handle empty lists and non-numeric values\n- Optimize performance for large datasets\n- Ensure accurate max value retrieval\nWe will design a simple static Python function using the built-in functions to efficiently handle edge cases and accurately retrieve the max value of the n'th column in a matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': a list of lists representing a table of data\n    'max of n'th column': finding the maximum value in the n'th column of the matrix\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if the input matrix is empty or n is out of bounds\n    Iterate through the matrix to extract the n'th column values\n    Find the maximum value in the extracted column\n    Return the maximum value\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: The input matrix is empty, so there is no maximum value to find.\n    max_of_nth([(5, 6, 'a'), (1, 3, 5), (8, 9, 19)], 2) = 19\n    Explanation: The n'th column contains non-numeric values, but the function should handle this and return the correct maximum value.\n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 4) = None\n    Explanation: The input n is out of bounds, so there is no n'th column to find the maximum value.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or n >= len(matrix[0]):\n            return None\n        (other code)\n", "requirement pool:\n- Handle empty lists and non-numeric values\n- Optimize for performance on large datasets\n- Ensure scalability for potential future enhancements\nWe will use the pandas library in Python to efficiently handle edge cases and optimize performance for large matrices.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': a list of lists representing a table of data\n    'max of n'th column': finding the maximum value in the n'th column of the matrix\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the pandas library, the code logic would involve:\n    - Importing the pandas library\n    - Converting the list of lists into a pandas DataFrame\n    - Handling edge cases such as empty lists or non-numeric values\n    - Finding the maximum value in the n'th column using pandas functions\n    - Returning the maximum value\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: The input matrix is empty, so there is no maximum value to return.\n    \n    max_of_nth([(1, 'a', 3), (4, 5, 6)], 1) = 5\n    Explanation: The second column contains non-numeric values, so we need to handle this edge case by skipping non-numeric values and finding the maximum among numeric values.\n    \n    max_of_nth([(1, 2), (3, 4)], 3) = None\n    Explanation: The matrix does not have a third column, so the function should return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if the input matrix is empty and return None\n        - Check if the n'th column exists in the matrix and return None if it doesn't\n        - Handle non-numeric values in the column by skipping them during max calculation\n        (other code)\n", "requirement analysis:\nThe function needs to iterate through the matrix efficiently, handle edge cases, and accurately identify the max value in the specified column.\nrequirement pool:\n- Efficiently iterate through the matrix\n- Handle edge cases like empty lists and non-numeric values\n- Optimize performance for large datasets\nWe will design a simple static Python function using the built-in functions to efficiently iterate through the matrix, handle edge cases, and accurately identify the max value in the specified column.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': a list of lists representing a table of values\n    'max of n'th column': finding the maximum value in the specified column of the matrix\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Check if the input matrix is empty or n is out of bounds\n    2. Initialize a variable to store the maximum value found in the n'th column\n    3. Iterate through each row in the matrix\n    4. Check if the current row has at least n+1 elements\n    5. If yes, compare the value in the n'th column with the current maximum value and update if necessary\n    6. Return the final maximum value found\n\n# [edge case] \n    max_of_nth([], 0) = None\n    Explanation: The input matrix is empty, so there is no maximum value to find.\n    \n    max_of_nth([(1, 'a'), (2, 'b')], 1) = None\n    Explanation: The second column contains non-numeric values, so we cannot find the maximum value.\n    \n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) = 19\n    Explanation: In this case, the maximum value in the 2nd column is 19.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or n < 0 or n >= len(matrix[0]):\n            return None\n        (other code)\n", "requirement pool:\n- Handle empty lists gracefully\n- Support non-numeric values in columns\n- Ensure efficient performance for large datasets\nWe will use the built-in functions in Python to handle edge cases and efficiently find the maximum value of the n'th column in a matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum value of the n'th column'\n    Explanation: It refers to finding the largest value in the specified column of a matrix represented as a list of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the need to find the largest value in the column.\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: When the list is empty, there are no values to compare, so the function should return None.\n    max_of_nth([(5, 'a', 7), (1, 3, 5), (8, 9, 19)], 2) = 19\n    Explanation: The function should handle non-numeric values in columns and still return the maximum value of the specified column.\n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 4) = None\n    Explanation: If the specified column index is out of range, the function should return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or n >= len(matrix[0]) or not all(isinstance(row[n-1], (int, float)) for row in matrix):\n            return None\n        (other code)\n", "requirement analysis:\nThe function should handle edge cases like empty lists or non-numeric values by providing appropriate error handling. It should efficiently iterate through the matrix to find the maximum value in the specified column.\nrequirement pool:\n- Handle empty lists and non-numeric values\n- Optimize performance for large datasets\n- Ensure accurate retrieval of maximum value\nWe will design a simple static Python function using basic list operations to efficiently handle edge cases and accurately retrieve the maximum value of the n'th column in a matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum value of the n'th column'\n    Explanation: The core concept is to find the maximum value in the specified column of a matrix represented as a list of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': means we need to find the highest value in the specified column\n\n# [code logic]\n    1. Check if the input list is empty or n is out of range.\n    2. Initialize a variable to store the maximum value found.\n    3. Iterate through each row in the matrix.\n    4. Check if the row has at least n columns.\n    5. Update the maximum value if the value in the n'th column is greater than the current maximum.\n    6. Return the maximum value found.\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: The input list is empty, so there are no values to compare. The expected output is None.\n    max_of_nth([(5, 'a', 7), (1, 3, 5), (8, 9, 19)], 1) = 9\n    Explanation: In the second row, the value 'a' is non-numeric, so it should be skipped when finding the maximum value in the first column.\n    max_of_nth([(5, 6, 7), (1, 3), (8, 9, 19)], 2) = None\n    Explanation: The second row does not have a second column, so it should be considered as an edge case and return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or n < 1 or any(len(row) < n for row in matrix):\n            return None\n        (other code)\n", "requirement pool:\n- Efficiently handle edge cases like empty lists or non-numeric values\n- Return the maximum value of the n'th column in a matrix\nWe will use the built-in functions in Python to efficiently handle edge cases and accurately retrieve the maximum value of the n'th column in a matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maximum value of the n'th column'\n    Explanation: It refers to finding the largest value in the specified column of a matrix represented as a list of lists.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'maximum': Indicates the need to find the largest value in the column.\n\n# [code logic]\n    Check if the input list is empty or if any non-numeric values exist in the specified column.\n    Iterate through the list of lists to extract the n'th column values.\n    Filter out any non-numeric values from the column.\n    Find the maximum value in the column.\n    Return the maximum value.\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: The input list is empty, so there are no values to compare. The expected output is None.\n    max_of_nth([(5, 'a', 7), (1, 3, 5), (8, 9, 19)], 1) = 9\n    Explanation: In the second column, 'a' is a non-numeric value, so it should be excluded. The maximum value in the remaining values (3, 9) is 9.\n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) = 19\n    Explanation: The maximum value in the third column is 19.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or not all(isinstance(row[n-1], (int, float)) for row in matrix):\n            return None\n        (other code)\n", "requirement pool:\n- Efficiently handle edge cases like empty lists and non-numeric values\n- Ensure accurate retrieval of the maximum value in the specified column\n- Optimize performance for large matrices to handle big data efficiently\nWe will use the numpy library to efficiently handle matrix operations and edge cases like empty lists or non-numeric values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'max of nth column'\n    Explanation: The core concept is to find the maximum value in the nth column of a matrix list efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'efficiently': means that the code should be optimized for performance\n\n# [code logic]\n(check if there are steps should be considered simultaneously)\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: When the input list is empty, there are no elements to find the nth column, so the expected output is None.\n    max_of_nth([(1, 'a'), (2, 3)], 1) = 2\n    Explanation: The function should handle non-numeric values in the matrix list and return the max of the nth column, which is 2 in this case.\n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 'a')], 2) = 7\n    Explanation: The function should handle non-numeric values in the matrix list and return the max of the nth column, which is 7 in this case.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or not all(isinstance(row, tuple) for row in matrix):\n            return None\n        (other code)\n", "requirement analysis:\nThe function should efficiently handle edge cases, accurately find the max value, and optimize performance for large matrices.\nrequirement pool:\n- Handle empty lists and non-numeric values\n- Optimize performance for large matrices\n- Ensure accurate max value retrieval\nWe will design a simple static Python function using the built-in functions to efficiently handle edge cases and accurately find the max value in the n'th column of a matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'max of nth column'\n    Explanation: The core concept is to find the maximum value in the nth column of a matrix.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'efficiently': means that the function should be optimized for performance\n\n# [code logic]\n    To implement the code:\n    - Check if the input list is empty or not a matrix\n    - Iterate through the matrix to extract the nth column values\n    - Find the maximum value in the extracted column\n    - Return the maximum value\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: The input list is empty, so there is no nth column to find the maximum value.\n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 4) = None\n    Explanation: The input list does not have a 4th column, so the function should return None.\n    max_of_nth([(5, 6, 'a'), (1, 3, 5), (8, 9, 19)], 2) = None\n    Explanation: There is a non-numeric value in the nth column, so the function should return None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or not all(isinstance(row, tuple) for row in matrix) or any(not isinstance(cell, (int, float)) for row in matrix for cell in row):\n            return None\n        (other code)\n", "requirement pool:\n- Efficiently handle edge cases like empty lists and non-numeric values\n- Return the maximum value of the specified column in the matrix\n- Optimize the function for performance\nWe will use the built-in functions in Python to efficiently handle edge cases and accurately retrieve the maximum value of the specified column in a matrix list.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'max of nth column'\n    Explanation: The core concept is to find the maximum value in the nth column of a matrix list efficiently.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan mentions using built-in functions in Python, we can implement the code as follows:\n```python\ndef max_of_nth(matrix, n):\n    if not matrix or not all(isinstance(row, tuple) for row in matrix):\n        return None  # Handle empty lists or non-numeric values\n    column_values = [row[n] for row in matrix if len(row) > n]\n    if not column_values:\n        return None  # Handle edge case where the specified column does not exist in any row\n    return max(column_values)\n```\n\n# [edge case] \n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) = 19\n    Explanation: In the given matrix list, the third column values are 7, 5, and 19. The maximum value among them is 19.\n\n    max_of_nth([(1, 2), (3, 4)], 2) = None\n    Explanation: The specified column index is out of range for all rows, so the function returns None.\n\n    max_of_nth([], 0) = None\n    Explanation: The matrix list is empty, so the function returns None.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef max_of_nth(matrix, n):\n    if not matrix or not all(isinstance(row, tuple) for row in matrix):\n        return None  # Handle empty lists or non-numeric values\n    if n < 0:\n        return None  # Handle negative column index\n    column_values = [row[n] for row in matrix if len(row) > n]\n    if not column_values:\n        return None  # Handle edge case where the specified column does not exist in any row\n    return max(column_values)\n```\n", "requirement pool:\n- Handle empty matrices and non-numeric values\n- Optimize performance for large datasets\nWe will design a simple Python function using built-in functions to efficiently handle edge cases and accurately retrieve the max value of the n'th column in a matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': a list of lists representing a table of data\n    'max of n'th column': finding the maximum value in the n'th column of the matrix\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    To implement the code:\n    - Check if the input matrix is empty or if the column index is out of bounds\n    - Iterate through each row of the matrix and extract the n'th element\n    - Find the maximum value among all the n'th elements\n    - Return the maximum value found\n\n# [edge case] \n    max_of_nth([], 2) = None\n    Explanation: The input matrix is empty, so there is no maximum value to find.\n    max_of_nth([(5, 6, 'a'), (1, 3, 5), (8, 9, 19)], 2) = 19\n    Explanation: The n'th column contains non-numeric values, but the function should handle this and return the correct maximum value.\n    max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 4) = None\n    Explanation: The column index is out of bounds, so there is no maximum value to find.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not matrix or n >= len(matrix[0]) or n < 0:\n            return None\n        (other code)\n"], "test": ["def check(max_of_nth):\n\tassert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19", "def check(max_of_nth):\n\tassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10", "def check(max_of_nth):\n\tassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(10, 7, 12), (2, 2, 7), (7, 5, 16)], 1) == 7", "def check(max_of_nth):\n\tassert max_of_nth([(8, 2, 4), (3, 3, 9), (11, 13, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(8, 11, 4), (1, 7, 6), (9, 10, 14)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(9, 10, 9), (4, 6, 1), (12, 12, 14)], 2) == 14", "def check(max_of_nth):\n\tassert max_of_nth([(10, 8, 6), (3, 7, 4), (5, 11, 18)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(2, 4, 12), (2, 8, 2), (11, 7, 23)], 2) == 23", "def check(max_of_nth):\n\tassert max_of_nth([(8, 6, 12), (5, 4, 4), (12, 8, 24)], 1) == 8", "def check(max_of_nth):\n\tassert max_of_nth([(10, 1, 7), (3, 2, 6), (11, 6, 24)], 1) == 6", "def check(max_of_nth):\n\tassert max_of_nth([(3, 8, 7), (4, 7, 6), (7, 12, 18)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(7, 1, 3), (6, 6, 3), (4, 12, 14)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(4, 7, 8), (3, 6, 10), (9, 8, 23)], 1) == 8", "def check(max_of_nth):\n\tassert max_of_nth([(1, 7, 8), (4, 3, 9), (12, 10, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(5, 10, 6), (5, 3, 6), (7, 8, 15)], 2) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(7, 2, 7), (1, 8, 9), (3, 8, 16)], 2) == 16", "def check(max_of_nth):\n\tassert max_of_nth([(10, 4, 2), (2, 1, 10), (11, 12, 23)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(3, 2, 8), (2, 7, 9), (10, 4, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(6, 11, 12), (6, 2, 4), (5, 10, 20)], 2) == 20", "def check(max_of_nth):\n\tassert max_of_nth([(10, 6, 10), (2, 6, 5), (3, 5, 18)], 1) == 6", "def check(max_of_nth):\n\tassert max_of_nth([(6, 7, 9), (1, 8, 4), (4, 9, 19)], 2) == 19", "def check(max_of_nth):\n\tassert max_of_nth([(5, 6, 7), (1, 4, 3), (9, 11, 23)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(4, 5, 6), (5, 1, 4), (6, 9, 23)], 2) == 23", "def check(max_of_nth):\n\tassert max_of_nth([(5, 6, 9), (5, 3, 2), (4, 8, 24)], 2) == 24", "def check(max_of_nth):\n\tassert max_of_nth([(10, 2, 8), (2, 6, 10), (11, 6, 20)], 2) == 20", "def check(max_of_nth):\n\tassert max_of_nth([(7, 5, 9), (4, 6, 3), (12, 6, 15)], 2) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(4, 7, 7), (3, 8, 3), (8, 6, 14)], 2) == 14", "def check(max_of_nth):\n\tassert max_of_nth([(10, 11, 10), (5, 8, 10), (10, 9, 24)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(9, 9, 6), (5, 2, 4), (10, 11, 15)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(6, 4, 8), (6, 3, 2), (9, 11, 18)], 2) == 18", "def check(max_of_nth):\n\tassert max_of_nth([(4, 10, 3), (5, 1, 3), (11, 14, 15)], 2) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(7, 9, 4), (2, 2, 5), (5, 12, 20)], 2) == 20", "def check(max_of_nth):\n\tassert max_of_nth([(5, 5, 2), (4, 2, 5), (11, 9, 14)], 1) == 9", "def check(max_of_nth):\n\tassert max_of_nth([(7, 9, 9), (4, 2, 8), (10, 6, 19)], 2) == 19", "def check(max_of_nth):\n\tassert max_of_nth([(3, 10, 2), (1, 6, 5), (6, 12, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(8, 6, 10), (4, 5, 4), (4, 11, 20)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(11, 5, 3), (2, 6, 1), (4, 11, 15)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(10, 12, 9), (1, 7, 5), (13, 14, 24)], 2) == 24", "def check(max_of_nth):\n\tassert max_of_nth([(10, 9, 6), (2, 1, 3), (7, 11, 17)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(9, 5, 12), (4, 6, 7), (5, 10, 16)], 1) == 10", "def check(max_of_nth):\n\tassert max_of_nth([(4, 8, 3), (6, 8, 4), (11, 14, 23)], 1) == 14", "def check(max_of_nth):\n\tassert max_of_nth([(5, 5, 5), (3, 9, 3), (4, 13, 17)], 1) == 13", "def check(max_of_nth):\n\tassert max_of_nth([(1, 12, 8), (5, 6, 4), (14, 6, 22)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(5, 11, 6), (1, 2, 2), (13, 5, 17)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(7, 12, 9), (7, 9, 6), (14, 14, 23)], 2) == 23", "def check(max_of_nth):\n\tassert max_of_nth([(3, 8, 7), (7, 7, 8), (6, 12, 17)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(3, 6, 6), (3, 3, 8), (9, 7, 18)], 1) == 7", "def check(max_of_nth):\n\tassert max_of_nth([(4, 12, 5), (1, 7, 9), (14, 5, 24)], 2) == 24", "def check(max_of_nth):\n\tassert max_of_nth([(11, 11, 10), (5, 8, 4), (10, 6, 25)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(10, 9, 3), (4, 2, 2), (8, 7, 16)], 2) == 16", "def check(max_of_nth):\n\tassert max_of_nth([(11, 11, 7), (1, 4, 3), (7, 5, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(5, 3, 7), (2, 4, 10), (13, 9, 15)], 1) == 9", "def check(max_of_nth):\n\tassert max_of_nth([(7, 2, 10), (4, 2, 6), (7, 7, 19)], 1) == 7", "def check(max_of_nth):\n\tassert max_of_nth([(8, 4, 11), (3, 6, 8), (11, 8, 23)], 1) == 8", "def check(max_of_nth):\n\tassert max_of_nth([(2, 9, 8), (5, 1, 5), (7, 15, 25)], 1) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(11, 2, 12), (5, 4, 2), (9, 6, 22)], 1) == 6", "def check(max_of_nth):\n\tassert max_of_nth([(11, 7, 6), (1, 3, 1), (10, 14, 19)], 2) == 19", "def check(max_of_nth):\n\tassert max_of_nth([(4, 11, 7), (3, 2, 8), (12, 7, 25)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(5, 11, 5), (1, 2, 2), (9, 9, 18)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(11, 2, 11), (5, 5, 5), (12, 9, 17)], 2) == 17", "def check(max_of_nth):\n\tassert max_of_nth([(8, 10, 8), (6, 4, 11), (11, 8, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(7, 3, 3), (1, 2, 4), (7, 9, 25)], 2) == 25", "def check(max_of_nth):\n\tassert max_of_nth([(3, 6, 4), (4, 9, 7), (9, 8, 20)], 1) == 9", "def check(max_of_nth):\n\tassert max_of_nth([(8, 12, 5), (7, 2, 2), (11, 8, 15)], 2) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(11, 9, 7), (2, 5, 8), (12, 10, 20)], 1) == 10", "def check(max_of_nth):\n\tassert max_of_nth([(9, 7, 8), (4, 7, 10), (4, 5, 23)], 1) == 7", "def check(max_of_nth):\n\tassert max_of_nth([(11, 3, 5), (5, 1, 2), (11, 15, 17)], 2) == 17", "def check(max_of_nth):\n\tassert max_of_nth([(3, 11, 11), (6, 5, 10), (10, 6, 22)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(10, 11, 14), (2, 1, 11), (9, 15, 16)], 2) == 16", "def check(max_of_nth):\n\tassert max_of_nth([(3, 4, 7), (7, 8, 9), (12, 12, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(11, 9, 13), (2, 7, 6), (15, 10, 25)], 1) == 10", "def check(max_of_nth):\n\tassert max_of_nth([(3, 11, 9), (6, 6, 12), (10, 15, 16)], 2) == 16", "def check(max_of_nth):\n\tassert max_of_nth([(6, 7, 5), (3, 7, 11), (12, 7, 23)], 2) == 23", "def check(max_of_nth):\n\tassert max_of_nth([(11, 8, 12), (1, 10, 12), (14, 16, 25)], 2) == 25", "def check(max_of_nth):\n\tassert max_of_nth([(8, 8, 9), (4, 6, 8), (14, 8, 23)], 2) == 23", "def check(max_of_nth):\n\tassert max_of_nth([(8, 13, 10), (1, 4, 7), (8, 11, 24)], 2) == 24", "def check(max_of_nth):\n\tassert max_of_nth([(4, 7, 13), (7, 4, 6), (15, 13, 23)], 1) == 13", "def check(max_of_nth):\n\tassert max_of_nth([(12, 7, 8), (3, 6, 7), (9, 11, 16)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(3, 8, 10), (1, 4, 8), (12, 9, 21)], 2) == 21", "def check(max_of_nth):\n\tassert max_of_nth([(11, 7, 7), (6, 10, 9), (6, 12, 19)], 2) == 19", "def check(max_of_nth):\n\tassert max_of_nth([(3, 10, 12), (2, 9, 3), (7, 7, 19)], 1) == 10", "def check(max_of_nth):\n\tassert max_of_nth([(2, 10, 11), (5, 5, 5), (7, 7, 26)], 2) == 26", "def check(max_of_nth):\n\tassert max_of_nth([(6, 12, 7), (5, 2, 2), (5, 14, 21)], 2) == 21", "def check(max_of_nth):\n\tassert max_of_nth([(10, 7, 6), (6, 5, 5), (10, 9, 17)], 1) == 9", "def check(max_of_nth):\n\tassert max_of_nth([(10, 9, 6), (4, 1, 10), (13, 14, 18)], 1) == 14", "def check(max_of_nth):\n\tassert max_of_nth([(9, 6, 8), (6, 10, 4), (14, 9, 24)], 2) == 24", "def check(max_of_nth):\n\tassert max_of_nth([(8, 11, 4), (1, 4, 9), (8, 9, 21)], 2) == 21", "def check(max_of_nth):\n\tassert max_of_nth([(11, 10, 10), (5, 5, 12), (14, 14, 18)], 2) == 18", "def check(max_of_nth):\n\tassert max_of_nth([(9, 3, 9), (6, 3, 10), (7, 15, 20)], 1) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(6, 7, 5), (4, 4, 6), (8, 13, 18)], 2) == 18", "def check(max_of_nth):\n\tassert max_of_nth([(11, 10, 14), (6, 10, 4), (14, 10, 22)], 1) == 10", "def check(max_of_nth):\n\tassert max_of_nth([(4, 8, 12), (2, 5, 10), (13, 12, 17)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(3, 11, 5), (1, 1, 7), (6, 12, 17)], 2) == 17", "def check(max_of_nth):\n\tassert max_of_nth([(4, 13, 14), (1, 2, 11), (14, 9, 22)], 2) == 22", "def check(max_of_nth):\n\tassert max_of_nth([(8, 6, 9), (5, 5, 9), (5, 14, 21)], 2) == 21", "def check(max_of_nth):\n\tassert max_of_nth([(9, 10, 6), (7, 5, 4), (10, 6, 26)], 2) == 26", "def check(max_of_nth):\n\tassert max_of_nth([(9, 5, 14), (1, 2, 9), (8, 12, 26)], 2) == 26", "def check(max_of_nth):\n\tassert max_of_nth([(4, 11, 12), (4, 7, 11), (5, 9, 24)], 1) == 11", "def check(max_of_nth):\n\tassert max_of_nth([(11, 4, 9), (2, 1, 5), (14, 15, 20)], 1) == 15", "def check(max_of_nth):\n\tassert max_of_nth([(3, 12, 8), (3, 10, 2), (10, 8, 19)], 1) == 12", "def check(max_of_nth):\n\tassert max_of_nth([(5, 5, 11), (6, 7, 10), (14, 10, 21)], 2) == 21"], "scores": [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0392, 0.0392, 1.0, 0.0], "pass_results": [false, true, false, false, false, false, false, false, true, false], "pass_test_cases_num": [0, 102, 0, 0, 0, 0, 4, 4, 102, 0], "completion": "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Union\n\ndef max_of_nth(matrix: List[Tuple], n: int) -> Union[int, None]:\n    \"\"\"\n    Function to return the max of the n'th column in a matrix list\n\n    Args:\n    matrix (List[Tuple]): The input matrix list\n    n (int): The column index to find the maximum value\n\n    Returns:\n    Union[int, None]: The maximum value in the specified column or None if matrix is empty, contains non-numeric values,\n                      n is negative, or the specified column does not exist in any row\n    \"\"\"\n    if not matrix or not all(isinstance(row, tuple) for row in matrix) or n < 0:\n        return None\n\n    column_values = [row[n] for row in matrix if len(row) > n and isinstance(row[n], (int, float))]\n\n    return max(column_values) if column_values else None\n", "passed": true, "pass": true, "pass_num": 2, "round": 576, "mutate_method": "condense_two2one", "parent_index": 464}
