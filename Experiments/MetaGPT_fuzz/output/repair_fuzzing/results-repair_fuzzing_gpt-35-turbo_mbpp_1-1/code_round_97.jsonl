{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 266, "prompt": "Write a function to find the lateral surface area of a cube given its side length.", "code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(1) == 4", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(3) == 36", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(2) == 16", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(11) == 484", "assert lateralsurface_cube(4) == 64", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(10) == 400", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(7) == 196", "assert lateralsurface_cube(6) == 144", "assert lateralsurface_cube(14) == 784", "assert lateralsurface_cube(12) == 576", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(5) == 100", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(13) == 676", "assert lateralsurface_cube(9) == 324", "assert lateralsurface_cube(8) == 256", "assert lateralsurface_cube(13) == 676"], "entry_point": "lateralsurface_cube", "repair_prompt": ["Write a function lateralsurface_cube to find the lateral surface area of a cube given its side length.\nlateralsurface_cube(5)==100\n", "Write a function lateralsurface_cube that calculates the lateral surface area by multiplying the side length of the cube by four. This will help determine the total area of only the cube's vertical sides.\nlateralsurface_cube(5)==100\n", "Write a function lateralsurface_cube to find the lateral surface area of a cube with its side length.\nlateralsurface_cube(5)==100\n"], "completions": ["from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of each side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If side_length is negative.\n\n    Examples:\n        >>> lateralsurface_cube(0)\n        0\n        >>> lateralsurface_cube(1)\n        6\n        >>> lateralsurface_cube(10)\n        200\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length: The length of one side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        None\n    \"\"\"\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: int) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube based on the given side length.\n\n    Args:\n        side_length: An integer representing the length of the side of the cube.\n\n    Returns:\n        An integer representing the lateral surface area of the cube.\n\n    Raises:\n        None\n    \"\"\"\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: int) -> int:\n    '''\n    Calculate the lateral surface area of a cube\n    Args:\n        side_length (int): The length of the side of the cube\n    Returns:\n        int: The lateral surface area of the cube\n    '''\n    return side_length * 4\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: int) -> int:\n    '''\n    Calculate the lateral surface area of a cube\n    Args:\n        side_length (int): The length of the side of the cube\n    Returns:\n        int: The lateral surface area of the cube\n    '''\n    return side_length * 4\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: int) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length: An integer representing the side length of the cube.\n\n    Returns:\n        An integer representing the lateral surface area of the cube.\n    \"\"\"\n    return side_length * 4\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length: The length of the side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If side_length is negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length: float, the length of each side of the cube.\n\n    Returns:\n        float, the lateral surface area of the cube.\n\n    Raises:\n        None\n    \"\"\"\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of the side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        None\n    \"\"\"\n    return 4 * side_length ** 2\n", "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of each side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If side_length is negative.\n\n    Examples:\n        >>> lateralsurface_cube(0)\n        0\n        >>> lateralsurface_cube(1)\n        6\n        >>> lateralsurface_cube(10)\n        200\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length ** 2\n"], "plans": ["requirement pool:\n- Calculate lateral surface area of a cube given its side length\n- Support both integer and floating-point side lengths\n- Optimize the function for performance\nWe will design a simple Python function using basic arithmetic operations to calculate the lateral surface area of a cube.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'side length'\n    Explanation: The length of each side of the cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube is 0.\n    lateralsurface_cube(1) = 6\n    Explanation: When the side length is 1, the lateral surface area of the cube is 6.\n    lateralsurface_cube(10) = 200\n    Explanation: When the side length is 10, the lateral surface area of the cube is 200.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula for lateral surface area of a cube covers all scenarios.\n", "requirement pool:\n- Calculate lateral surface area of a cube accurately\n- Support both integer and floating-point side lengths\n- Optimize the function for better performance\nWe will use the math library in Python to efficiently calculate the lateral surface area of a cube.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'side length'\n    Explanation: The length of one side of the cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the math library, we can directly calculate the lateral surface area of a cube using the formula: 4 * (side length)^2.\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube is 0.\n    lateralsurface_cube(1) = 4\n    Explanation: When the side length is 1, the lateral surface area of the cube is 4.\n    lateralsurface_cube(10) = 400\n    Explanation: When the side length is 10, the lateral surface area of the cube is 400.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula will correctly calculate the lateral surface area for any valid side length.\n", "requirement pool:\n- Calculate lateral surface area of a cube given its side length\n- Handle edge cases like negative side lengths or zero\n- Optimize the algorithm for better performance\nWe will use a simple Python function to calculate the lateral surface area of a cube based on the given side length.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cube'\n    Explanation: Refers to a three-dimensional shape with six equal square faces.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the requirement is straightforward, we can directly calculate the lateral surface area of a cube using the formula: 4 * (side length)^2.\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube is 0.\n    lateralsurface_cube(1) = 4\n    Explanation: When the side length is 1, each face of the cube has an area of 1, so the total lateral surface area is 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula itself covers the scenarios where the side length is 0 or 1.\n", "requirement pool:\n- Calculate lateral surface area by multiplying side length by four\n- Ensure the function handles edge cases like negative side lengths\n- Optimize the function for performance efficiency\nWe will use a simple Python function to calculate the lateral surface area of a cube by multiplying the side length by four.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: It refers to the total area of only the vertical sides of a cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length of the cube is 0, the lateral surface area will be 0.\n    lateralsurface_cube(1) = 4\n    Explanation: When the side length of the cube is 1, the lateral surface area will be 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to calculate lateral surface area covers these cases.\n", "requirement pool:\n- Implement a function to calculate lateral surface area of a cube\n- Ensure the function handles edge cases and invalid inputs gracefully\n- Optimize the function for performance and efficiency\nWe will design a simple Python function using basic arithmetic operations to calculate the lateral surface area of a cube.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'side length'\n    Explanation: The length of each side of the cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area will be 0.\n    lateralsurface_cube(1) = 4\n    Explanation: When the side length is 1, the lateral surface area will be 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula directly calculates the lateral surface area based on the side length.\n", "requirement pool:\n- Calculate lateral surface area accurately\n- Ensure function efficiency for large cube side lengths\n- Handle invalid input gracefully\nWe will use a simple Python function to calculate the lateral surface area of a cube by multiplying the side length by four.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: It refers to the total area of only the vertical sides of a cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan is straightforward, we can directly implement the code without further interpretation.\n\n# [edge case] \n    lateralsurface_cube(0) == 0\n    Explanation: When the side length of the cube is 0, the lateral surface area should be 0 as well.\n    lateralsurface_cube(1) == 4\n    Explanation: When the side length of the cube is 1, the lateral surface area should be 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided in the plan covers all scenarios.\n", "requirement pool:\n- Calculate lateral surface area of a cube accurately\n- Support both integer and float side lengths\n- Optimize the function for performance\nWe will use basic Python functions to calculate the lateral surface area of a cube without defining any class.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: It refers to the total surface area of the sides of a cube, excluding the top and bottom faces.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the lateral surface area of a cube is calculated by multiplying the side length by 4 (since a cube has 4 equal sides), the code logic can be implemented as follows:\n    \n```python\ndef lateralsurface_cube(side_length: int) -> int:\n    return side_length * 4\n```\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube is also 0.\n    lateralsurface_cube(1) = 4\n    Explanation: When the side length is 1, each side has an area of 1, so the total lateral surface area is 4.\n    lateralsurface_cube(10) = 40\n    Explanation: When the side length is 10, each side has an area of 100, so the total lateral surface area is 400.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided covers all scenarios.\n", "requirement pool:\n- Calculate lateral surface area of a cube for a given side length\n- Support both integer and floating-point side lengths\n- Ensure the function is efficient and optimized for performance\nWe will use the math library in Python to efficiently calculate the lateral surface area of a cube.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'side length'\n    Explanation: The length of each side of the cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using the math library to calculate the lateral surface area of a cube efficiently, the code logic can involve using the formula for lateral surface area of a cube: 4 * (side length)^2.\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube is 0.\n    lateralsurface_cube(1) = 6\n    Explanation: When the side length is 1, the lateral surface area of the cube is 6.\n    lateralsurface_cube(10) = 400\n    Explanation: When the side length is 10, the lateral surface area of the cube is 400.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula for lateral surface area of a cube covers all possible scenarios.\n", "requirement pool:\n- Calculate the lateral surface area of a cube using the formula 4 * side_length^2\n- Handle input validation to ensure the side length is a positive number\n- Optimize the function for performance to handle large side lengths efficiently\nWe will design a simple Python function using basic arithmetic operations to calculate the lateral surface area of a cube.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lateral surface area'\n    Explanation: It refers to the total surface area of the sides of a cube, excluding the top and bottom faces.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the lateral surface area of a cube is calculated by multiplying the side length by 4, the code logic would involve multiplying the side length by 4.\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube would be 0.\n    lateralsurface_cube(1) = 4\n    Explanation: When the side length is 1, the lateral surface area of the cube would be 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula for calculating the lateral surface area directly handles the edge cases where the side length is 0 or 1.\n", "requirement pool:\n- Calculate lateral surface area of a cube given its side length\n- Support both integer and floating-point side lengths\n- Ensure the function is optimized for performance\nWe will design a simple Python function using basic arithmetic operations to calculate the lateral surface area of a cube.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'side length'\n    Explanation: The length of each side of the cube.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    lateralsurface_cube(0) = 0\n    Explanation: When the side length is 0, the lateral surface area of the cube is 0.\n    lateralsurface_cube(1) = 6\n    Explanation: When the side length is 1, the lateral surface area of the cube is 6.\n    lateralsurface_cube(10) = 200\n    Explanation: When the side length is 10, the lateral surface area of the cube is 200.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The formula for lateral surface area calculation covers all scenarios.\n"], "test": ["def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5)==100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9)==324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10)==400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(1) == 4", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(3) == 36", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(2) == 16", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(11) == 484", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(4) == 64", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(10) == 400", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(7) == 196", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(6) == 144", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(14) == 784", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(12) == 576", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(5) == 100", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(9) == 324", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(8) == 256", "def check(lateralsurface_cube):\n\tassert lateralsurface_cube(13) == 676"], "scores": [1.0, 1.0, 1.0, 0.0196, 0.0196, 0.0196, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, true, true, false, false, false, true, true, true, true], "pass_test_cases_num": [102, 102, 102, 2, 2, 2, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\ndef lateralsurface_cube(side_length: float) -> float:\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The length of each side of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n\n    Raises:\n        ValueError: If side_length is negative.\n\n    Examples:\n        >>> lateralsurface_cube(0)\n        0\n        >>> lateralsurface_cube(1)\n        6\n        >>> lateralsurface_cube(10)\n        200\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    \n    return 4 * side_length ** 2\n", "passed": true, "pass": true, "pass_num": 7, "round": 97, "mutate_method": "condense_two2one", "parent_index": 97}
