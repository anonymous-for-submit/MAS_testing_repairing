{"source_file": "Benchmark Questions Verification V2.ipynb", "task_id": 733, "prompt": "Write a function to identify the index. This is where a specified number first appears in a sorted array.", "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "assert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "assert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "assert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "assert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "assert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "assert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "assert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "assert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "assert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "assert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "assert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "assert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "assert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "assert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "assert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "assert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "assert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "assert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "assert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "assert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "assert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "assert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "assert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "assert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "assert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "assert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "assert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "assert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "assert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "assert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "assert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "assert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "assert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "assert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "assert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "assert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "assert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "assert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "assert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "assert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "assert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "assert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "assert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "assert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "assert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "assert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "assert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "assert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "assert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "assert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "assert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "assert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "assert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "assert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "assert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "assert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "assert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "assert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "assert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "assert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "assert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "assert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "assert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "assert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "assert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "assert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "assert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "assert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "assert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "assert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "assert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "assert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "assert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "assert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "assert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "assert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "assert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "assert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "assert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "assert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "assert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "assert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "assert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "assert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "assert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "assert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "assert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "assert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "assert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "assert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "assert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "assert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "assert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "assert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "assert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "assert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "assert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "assert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "assert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "entry_point": "find_first_occurrence", "repair_prompt": ["Write a function find_first_occurrence to identify the index. This is where a specified number first appears in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Write a function find_first_occurrence to determine the position within a sorted array where a specified number initially shows up. This index serves as the location of the number in the array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n", "Write a function find_first_occurrence to identify the index where a specified number first appears in a sorted array.\nfind_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a specified number in a sorted array.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The specified number to find.\n\n    Returns:\n        int: The index of the first occurrence of the specified number in the array. Returns -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport bisect\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    index = bisect.bisect_left(arr, target)\n    if index < len(arr) and arr[index] == target:\n        return index\n    return -1\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Function to find the index of the first occurrence of 'target' in 'arr'\n    \n    Args:\n        arr (List[int]): A sorted list of integers\n        target (int): The number to find the first occurrence of\n    \n    Returns:\n        int: The index of the first occurrence of 'target' in 'arr', or -1 if 'target' is not found\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the specified number in a sorted array using binary search.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The specified number to find.\n\n    Returns:\n        int: The index of the first occurrence of the specified number. Returns -1 if the number is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the index of the first occurrence of the specified number in a sorted array using binary search.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The specified number to find.\n\n    Returns:\n        int: The index of the first occurrence of the specified number. Returns -1 if the number is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a number in a sorted array using binary search.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array. Returns -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a specified number in a sorted array using binary search algorithm.\n\n    Args:\n        arr (List[int]): A sorted array of integers.\n        target (int): The specified number to find in the array.\n\n    Returns:\n        int: The index of the first occurrence of the specified number in the array. Returns -1 if the number is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a specified number in a sorted array using binary search algorithm.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The specified number to find.\n\n    Returns:\n        int: The index of the first occurrence of the specified number in the array. Returns -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n"], "plans": ["requirement analysis:\nThe function should efficiently locate the first occurrence of a specified number in a sorted array. It should handle duplicate numbers and return the correct index.\nrequirement pool:\n- Implement find_first_occurrence function to accurately identify the index of the first occurrence of a specified number in a sorted array\n- Ensure the function handles edge cases such as empty arrays or non-existent numbers gracefully\nWe will design a simple Python function using basic list manipulation to efficiently identify the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: It refers to the index where a specified number first appears in a sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Provide detailed logic to implement the code\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: The specified number 1 appears multiple times in the sorted array, but the first occurrence is at index 0.\n    find_first_occurrence([2, 2, 3, 3, 3], 1) = -1\n    Explanation: The specified number 1 does not appear in the sorted array, so the function returns -1.\n    find_first_occurrence([], 5) = -1\n    Explanation: The sorted array is empty, so the function returns -1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if not arr:\n            return -1\n        (other code)\n", "requirement pool:\n- Implement the find_first_occurrence function to accurately locate the first occurrence of a specified number in a sorted array\n- Ensure the function handles edge cases like empty arrays or non-existent numbers gracefully\nWe will use the bisect module in Python to efficiently find the index of the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'index'\n    Explanation: The position where a specified number first appears in a sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan suggests using the bisect module in Python, the logic to implement the code would involve:\n    - Importing the bisect module\n    - Using the bisect_left function to find the index of the first occurrence of the specified number in the sorted array\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    Explanation: In the sorted array [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], the first occurrence of the number 5 is at index 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case as using the bisect module efficiently finds the index of the first occurrence.\n", "requirement pool:\n- Implement the find_first_occurrence function to accurately locate the first occurrence of a number in a sorted array\nWe will implement the find_first_occurrence function using Python standard libraries to efficiently locate the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'index'\n    Explanation: The position where a specified number first appears in a sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Check if there are steps should be considered simultaneously\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: The specified number 1 appears at index 0 in the sorted array.\n    find_first_occurrence([2, 2, 3, 3, 4, 4], 5) == -1\n    Explanation: The specified number 5 does not appear in the sorted array, so the function returns -1.\n    find_first_occurrence([], 5) == -1\n    Explanation: The sorted array is empty, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic to find the first occurrence of a specified number in a sorted array can handle these cases effectively.\n", "requirement analysis:\nThe function should efficiently find the first occurrence of a specified number in a sorted array. It must return the index of the first occurrence or -1 if the number is not found.\nrequirement pool:\n- Implement find_first_occurrence function\n- Handle edge cases like empty arrays or non-existent numbers\n- Optimize the function for large arrays\nWe will use binary search algorithm to efficiently find the first occurrence of the specified number in the sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The array is sorted in ascending order, which means the elements are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using binary search algorithm, the detailed logic for binary search to find the first occurrence of the specified number in the sorted array should be implemented.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: The specified number 1 appears at the first index in the sorted array.\n    find_first_occurrence([2, 2, 2, 2, 2], 2) = 0\n    Explanation: The specified number 2 appears at the first index in the sorted array.\n    find_first_occurrence([3, 3, 3, 3, 3], 4) = -1\n    Explanation: The specified number 4 is not present in the sorted array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle finding the first occurrence of the specified number in the sorted array.\n", "requirement analysis:\nThe function should efficiently locate the first occurrence of a specified number in a sorted array. It must handle duplicates and return the correct index.\nrequirement pool:\n- Implement the core logic to find the first occurrence\n- Add test cases to validate the function's accuracy\n- Optimize the function for better performance\nWe will use a simple binary search algorithm to efficiently locate the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n    'first occurrence'\n    Explanation: We need to find the index of the first occurrence of the specified number in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, we can follow the steps provided in the plan to implement the code.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: All elements in the array are the same, and the specified number is present at index 0.\n    \n    find_first_occurrence([2, 2, 2, 2, 2], 2) = 0\n    Explanation: All elements in the array are the same, and the specified number is present at index 0.\n    \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The specified number does not exist in the array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these scenarios.\n", "requirement analysis:\nThe function should efficiently determine the index of the first occurrence of a specified number in a sorted array. It must handle duplicates and return the correct index.\nrequirement pool:\n- Implement the find_first_occurrence function\n- Perform thorough testing with different input arrays\n- Optimize the function for large arrays\nWe will implement the find_first_occurrence function using a simple binary search algorithm to efficiently locate the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n    'first occurrence'\n    Explanation: We need to find the index of the first occurrence of the specified number in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, we can follow the steps provided in the plan to implement the code.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: All elements in the array are the same, and the specified number is present at index 0.\n    \n    find_first_occurrence([2, 2, 2, 2, 2], 3) = -1\n    Explanation: The specified number does not exist in the array, so the function returns -1.\n    \n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The specified number is greater than any element in the array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these scenarios.\n", "requirement analysis:\nThe function should efficiently locate the first occurrence of a specified number in a sorted array. It should return the index of the first occurrence or -1 if the number is not found.\nrequirement pool:\n- Implement the find_first_occurrence function\n- Write test cases to validate the function's correctness\n- Optimize the function for large arrays\nWe will design a simple Python function using basic list manipulation to efficiently find the first occurrence of a number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n    'first occurrence'\n    Explanation: We need to find the index where the specified number first appears in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the array is sorted, we can utilize binary search to efficiently find the first occurrence of the specified number in the array. Here is the detailed logic:\n    1. Initialize variables for start index and end index of the array.\n    2. Perform binary search:\n        - Calculate the mid index.\n        - If the mid element is equal to the specified number:\n            - Check if it is the first occurrence by comparing with the previous element.\n            - If it is the first occurrence, return the index.\n            - Else, update the end index to mid - 1.\n        - If the mid element is less than the specified number, update the start index to mid + 1.\n        - If the mid element is greater than the specified number, update the end index to mid - 1.\n    3. If the specified number is not found, return -1.\n\n# [edge case] \n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) = 1\n    Explanation: The first occurrence of number 5 in the sorted array is at index 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge case. The binary search logic covers finding the first occurrence efficiently.\n", "requirement analysis:\nThe function should efficiently locate the first occurrence of a specified number in a sorted array. It should return the index of the first occurrence or -1 if the number is not found.\nrequirement pool:\n- Implement the find_first_occurrence function\n- Test the function with various input arrays\n- Optimize the algorithm for better performance\nWe will implement the find_first_occurrence function using a simple binary search algorithm to efficiently locate the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n    'first occurrence'\n    Explanation: We need to find the index of the first appearance of the specified number in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    We will implement the find_first_occurrence function using a simple binary search algorithm to efficiently locate the first occurrence of a specified number in a sorted array.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) = 0\n    Explanation: All elements in the array are the same, and the specified number is the first element, so the expected output is 0.\n    find_first_occurrence([2, 2, 2, 2, 2], 3) = -1\n    Explanation: The specified number does not exist in the array, so the function returns -1.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) = -1\n    Explanation: The specified number is greater than any element in the array, so the function returns -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these scenarios.\n", "requirement analysis:\nThe function should efficiently determine the index of the first occurrence of a specified number in a sorted array. It should handle duplicates appropriately and have a time complexity better than O(n) for large arrays.\nrequirement pool:\n- Implement the find_first_occurrence function with a time complexity better than O(n)\n- Test the function with various input arrays including edge cases\n- Optimize the function for performance and memory usage\nWe will use a simple binary search algorithm to efficiently find the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sorted array'\n    Explanation: The input array is sorted in ascending order.\n\n    'first occurrence'\n    Explanation: We need to find the index where the specified number first appears in the sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Since the plan already mentions using a binary search algorithm, we can follow the steps provided in the plan to implement the code.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: All elements in the array are the same, and the specified number is the first element, so the expected output is 0.\n    find_first_occurrence([2, 2, 2, 2, 2], 3) == -1\n    Explanation: The specified number does not exist in the array, so the function should return -1.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number is greater than any element in the array, so the function should return -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm will efficiently handle these scenarios.\n", "requirement analysis:\nThe requirement is clear and focused on finding the first occurrence of a number in a sorted array. The function should return the index where the specified number first appears.\nrequirement pool:\n- Implement the find_first_occurrence function\n- Test the function with various input arrays\n- Optimize the algorithm for better performance\nWe will implement the find_first_occurrence function using a simple binary search algorithm to efficiently identify the first occurrence of a specified number in a sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'first occurrence'\n    Explanation: It refers to the index where a specified number first appears in a sorted array.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    Implement a binary search algorithm to efficiently identify the first occurrence of the specified number in a sorted array.\n\n# [edge case] \n    find_first_occurrence([1, 1, 1, 1, 1], 1) == 0\n    Explanation: All elements in the array are the same, and the specified number is the first element, so the expected output is 0.\n    find_first_occurrence([2, 2, 2, 2, 2], 3) == -1\n    Explanation: The specified number does not exist in the array, so the function should return -1.\n    find_first_occurrence([1, 2, 3, 4, 5], 6) == -1\n    Explanation: The specified number is greater than any element in the array, so the function should return -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The binary search algorithm covers all scenarios.\n"], "test": ["def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 3, 2, 7, 8, 3, 13, 4, 11, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 6, 1, 6, 7, 10, 9, 5, 12, 10], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 8, 10, 7, 11, 6, 12, 6, 13], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 3, 4, 9, 13, 5, 7, 12], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 6, 3, 7, 2, 11, 5, 13, 6], 3) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 8, 4, 7, 10, 12, 10, 14, 13], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 2, 10, 4, 13, 14, 12], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 3, 7, 3, 2, 7, 8, 7, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 10, 9, 8, 1, 4, 13, 10, 4, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 2, 5, 3, 5, 13, 12, 4, 6], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 3, 3, 10, 9, 10, 9, 4, 13], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 5, 1, 5, 9, 6, 6, 13, 12, 10], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 10, 3, 4, 6, 8, 3, 9, 10, 14], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 7, 9, 9, 5, 12, 7, 11, 10], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 5, 10, 5, 9, 11, 4, 5, 7], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 7, 2, 5, 11, 2, 9, 13, 11, 9], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 1, 5, 1, 5, 6, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 9, 6, 10, 7, 10, 6, 5, 5], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 10, 8, 7, 12, 10, 11, 12], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 3, 3, 7, 7, 5, 7, 13, 6], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 4, 1, 4, 9, 6, 14, 13, 8], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 6, 10, 4, 11, 5, 10, 12], 5) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 2, 7, 7, 1, 7, 9, 13, 9, 14], 7) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 1, 2, 3, 5, 7, 10, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 9, 9, 11, 9, 3, 13, 7, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 9, 6, 5, 9, 5, 3, 12, 6, 12], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 4, 5, 6, 11, 8, 11, 10, 14, 10], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 5, 9, 8, 4, 11, 10, 13, 11, 5], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 3, 8, 3, 7, 6, 11, 4, 10], 3) == 2", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 8, 3, 10, 6, 5, 10, 11, 9], 10) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 4, 1, 2, 1, 11, 10, 13, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 8, 1, 10, 9, 13, 6, 7, 7], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 1, 5, 10, 5, 10, 6, 11, 12], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 7, 7, 5, 6, 1, 6, 6, 14, 12], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 10, 2, 2, 3, 7, 8, 12, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 5, 8, 3, 1, 12, 8, 5, 5], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 5, 2, 1, 3, 11, 7, 6, 12], 7) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 6, 8, 3, 4, 1, 6, 11, 4, 10], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 10, 8, 1, 9, 13, 8, 14, 10], 8) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 8, 7, 2, 11, 5, 7, 9, 9, 9], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 9, 4, 3, 10, 4, 4, 7, 9], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 3, 9, 10, 9, 11, 14, 14, 9], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 1, 4, 3, 7, 4, 6, 10, 4, 10], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 6, 5, 8, 3, 9, 14, 14, 11], 1) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 1, 9, 9, 10, 13, 10, 11, 5], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 5, 1, 2, 3, 4, 5, 8, 12, 11], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 1, 9, 8, 11, 3, 6, 8, 4], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 8, 7, 8, 3, 5, 11, 14, 12], 8) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 3, 10, 1, 3, 10, 14, 13, 8], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 1, 10, 11, 5, 7, 13, 4, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 4, 9, 8, 2, 10, 10, 11, 8, 5], 10) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 7, 10, 5, 8, 11, 11, 13, 12, 6], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 7, 6, 8, 4, 5, 4, 4, 7], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 2, 4, 10, 11, 8, 3, 6, 10, 12], 2) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 7, 2, 10, 1, 7, 12, 14, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 1, 4, 2, 3, 8, 8, 12, 12, 4], 1) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 10, 9, 3, 11, 7, 8, 11, 5], 3) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 9, 1, 7, 3, 3, 4, 5, 5], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 3, 9, 1, 11, 7, 11, 11, 6, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 7, 5, 1, 2, 1, 11, 5, 11, 11], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 9, 6, 11, 1, 6, 5, 12, 12], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 4, 9, 2, 8, 9, 11, 11, 13], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 5, 9, 9, 6, 11, 3, 9, 8, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 1, 6, 8, 4, 8, 10, 10, 10, 10], 5) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 5, 8, 4, 6, 9, 11, 10, 8, 14], 9) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 2, 1, 5, 4, 3, 9, 4, 12, 11], 4) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 5, 2, 1, 6, 3, 13, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 1, 4, 10, 2, 5, 11, 11, 5], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 5, 3, 8, 1, 5, 11, 9, 8, 4], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 6, 6, 2, 3, 1, 10, 14, 4, 11], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 8, 3, 2, 8, 1, 6, 10, 9, 4], 10) == 7", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 1, 4, 3, 3, 4, 14, 7, 13], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 5, 3, 8, 8, 10, 8, 11, 13], 5) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 7, 4, 2, 8, 10, 5, 8, 4, 9], 4) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([3, 9, 2, 5, 10, 1, 3, 5, 13, 6], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 3, 4, 9, 3, 10, 13, 6, 14, 5], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 4, 5, 9, 11, 4, 6, 8, 12, 4], 4) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 3, 2, 1, 7, 8, 12, 10, 9, 5], 8) == 5", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 5, 3, 6, 8, 5, 10, 13, 10], 11) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 9, 3, 7, 4, 11, 9, 11, 7, 6], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 4, 7, 10, 5, 5, 14, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 6, 3, 8, 6, 9, 9, 7, 5], 10) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 1, 1, 10, 8, 10, 4, 9, 7, 10], 8) == 4", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 1, 4, 4, 3, 10, 9, 9, 11, 13], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 4, 5, 5, 10, 5, 9, 8, 6, 8], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 1, 4, 7, 5, 4, 11, 10, 4, 10], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 2, 4, 2, 11, 4, 11, 12, 7, 10], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 8, 4, 13, 4, 4, 14], 9) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 7, 4, 8, 5, 1, 9, 5, 4, 10], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 4, 3, 8, 8, 7, 13, 11, 14], 3) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 8, 2, 4, 5, 11, 12, 13, 4, 4], 6) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([6, 9, 5, 8, 7, 9, 8, 11, 9, 9], 4) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([5, 8, 4, 1, 3, 8, 10, 14, 7, 13], 2) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 7, 3, 2, 5, 5, 6, 13, 7, 7], 7) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([2, 5, 3, 5, 11, 4, 4, 13, 13, 7], 2) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 3, 5, 8, 11, 7, 7, 4, 7, 5], 3) == 1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([1, 6, 3, 10, 9, 6, 10, 9, 5, 4], 1) == 0", "def check(find_first_occurrence):\n\tassert find_first_occurrence([4, 2, 4, 1, 9, 3, 12, 13, 5, 7], 8) == -1", "def check(find_first_occurrence):\n\tassert find_first_occurrence([7, 6, 1, 5, 9, 5, 9, 12, 13, 11], 5) == -1"], "scores": [1.0, 0.7255, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "pass_results": [true, false, true, true, true, true, true, true, true, true], "pass_test_cases_num": [102, 74, 102, 102, 102, 102, 102, 102, 102, 102], "completion": "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\"\n    Find the first occurrence of a specified number in a sorted array using binary search algorithm.\n\n    Args:\n        arr (List[int]): A sorted list of integers.\n        target (int): The specified number to find.\n\n    Returns:\n        int: The index of the first occurrence of the specified number in the array. Returns -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n", "passed": true, "pass": true, "pass_num": 9, "round": 342, "mutate_method": "expand_one2two", "parent_index": 496}
