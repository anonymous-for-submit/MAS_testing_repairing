{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has acquired an intriguing flower and is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has acquired an intriguing flower and is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has acquired an intriguing flower and is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. It will no longer grow and remains dead for the rest of the days.\n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has acquired an intriguing flower and is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and need to determine what happened with his flower in the end, as the flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter, and if watered on the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day, the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i, watered in enumerate(case):\n            if watered == 1:\n                if i > 0 and case[i - 1] == 1:\n                    height += 5  # Grows by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grows by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n\n        for i, watered in enumerate(case):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    flower_died = True\n                    break\n        \n        results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_watered_days = 0\n        flower_died = False\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_watered_days = 0\n            else:\n                consecutive_watered_days += 1\n                if consecutive_watered_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Call the function and get results\n    results = calculate_flower_height(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(days)):\n            if days[i] == 1:\n                if i > 0 and days[i-1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input(): \").split()))\n        test_cases.append(days)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm for consecutive watering days\n                else:\n                    height += 1  # Grow by 1 cm for a single watering day\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        consecutive_dry_days = 0  # Track consecutive dry days\n        \n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered after a dry day\n                previous_day_watered = True\n                consecutive_dry_days = 0  # Reset dry days counter\n            else:\n                consecutive_dry_days += 1\n                if consecutive_dry_days == 2:\n                    height = -1  # Flower dies\n                    break\n                previous_day_watered = False\n        \n        results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n\n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered after a dry day\n                previous_day_watered = True\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    flower_died = True\n                    break\n                previous_day_watered = False\n\n        results.append(height)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Call the function and get results\n    results = calculate_flower_height(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower or -1 if it dies for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n        \n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Calculate results\n    results = calculate_flower_height(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = 0\n        flower_dead = False\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                consecutive_days_watered += 1\n                if consecutive_days_watered == 1:\n                    height += 1\n                elif consecutive_days_watered == 2:\n                    height += 4  # Additional 4 cm for the second consecutive day\n            else:\n                consecutive_days_watered = 0\n                if i > 0 and watering_pattern[i-1] == 0:\n                    flower_dead = True\n                    break\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower based on specific watering patterns over a series of days. The main challenge is to accurately calculate the height of the flower or determine if it dies due to consecutive days without watering. The solution must handle multiple test cases efficiently and provide clear outputs.\nrequirement pool:\n- Implement the growth calculation logic based on watering patterns.\n- Ensure the program can handle multiple test cases in a single run.\n- Optimize the solution for performance with larger input sizes.\n- Provide detailed error messages for invalid inputs.\n- Include a user-friendly interface for input and output.\nWe will implement a function to simulate the growth of the flower based on the given watering pattern. The function will iterate through each day, updating the flower's height according to the rules provided. We will use a simple loop to handle the growth logic and check for consecutive days without watering to determine if the flower dies. The solution will handle multiple test cases by iterating over each test case and applying the growth logic separately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower's height changes according to specific rules depending on whether it is watered or not.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with a value of 0 in the input list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case.\n    - For each test case, iterate through the list of days:\n        - If two consecutive days are not watered (both values are 0), set the height to -1 and break the loop.\n        - If a day is watered (value is 1), check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n    - Print the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n    \n    Test case: [1, 0, 0] = -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n    \n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the first two days (total 6 cm), does not grow on the third day, and grows by 1 cm on the fourth day (total 8 cm).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and handles them appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately track the growth and determine if the flower dies due to consecutive days without water. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the solution for performance given constraints.\n- Consider edge cases such as consecutive days without watering.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use simple list operations to track the watering pattern and calculate the height or determine if the flower dies. The solution will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on its watering pattern over a series of days. The flower's height changes according to specific rules, and the task is to determine its final height or if it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two successive zeros in the watering pattern.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - Check if the flower is watered (a_i = 1):\n          - If watered on consecutive days, increase height by 5 cm.\n          - Otherwise, increase height by 1 cm.\n        - If not watered (a_i = 0), check if the previous day was also not watered:\n          - If two consecutive days are not watered, set height to -1 (flower dies) and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The main challenge is to correctly implement the growth rules and handle cases where the flower dies due to consecutive days without water.\nrequirement pool:\n- Implement the flower growth algorithm based on watering rules.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the code for performance with large input sizes.\n- Provide detailed error messages for invalid inputs.\n- Include a user-friendly interface for input and output.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided for each test case. The function will iterate through the days, applying the growth rules and checking for consecutive days without water to determine if the flower dies. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules, and the task is to determine its final height or if it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through the list of days:\n        - If two consecutive days are not watered (two zeros in a row), return -1 (flower dies).\n        - If a day is watered (1), check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n    - Return the final height after processing all days.\n\n# [edge case]\n    Input: 1\n    0\n    Output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Input: 2\n    0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Input: 3\n    1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering) and does not grow on the third day. Total height = 1 + 5 = 6 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without water and adjusts growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on specific watering rules over a given number of days. The solution must handle multiple test cases and provide accurate results for each scenario, including cases where the flower dies due to lack of water.\nrequirement pool:\n- Implement the flower growth algorithm based on watering rules.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output format as specified in the requirements.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the given rules. The function will iterate over the days, updating the flower's height according to whether it was watered or not. We will use a simple loop to handle the growth logic and check for consecutive days without water to determine if the flower dies. The solution will handle multiple test cases by iterating over each test case and applying the growth logic separately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not on consecutive days. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n    'consecutive days'\n    Explanation: This refers to two or more days in a row. The flower's growth or death is affected by whether it is watered on consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start of each test case.\n2. Iterate over each day in the test case:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on consecutive days, increase the height by 5 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 12\n    Explanation: The flower grows by 5 cm on the first two days (total 6 cm), does not grow on the third day, and grows by 1 cm on the fourth day (total 12 cm).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without water and adjusting growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately track the growth or death of the flower based on consecutive days without water. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's final height or death.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of a flower based on the given watering pattern over multiple test cases. The function will iterate through each test case, track the growth or death of the flower, and return the final height or -1 if the flower dies. We will use simple list operations and conditionals to achieve this, ensuring the solution is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n    'test cases'\n    Explanation: The requirement involves multiple test cases, each with its own set of days and watering pattern.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on consecutive days, increase the height by 5 cm.\n3. After processing all days in a test case, store the result (height or -1) for that test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case with all zeros: [0, 0, 0] = -1\n    Explanation: The flower is not watered at all, so it dies after two consecutive days without water.\n\n    Test case with alternating pattern: [1, 0, 1, 0] = 3\n    Explanation: The flower grows by 1 cm on each watered day, totaling 3 cm.\n\n    Test case with maximum consecutive watering: [1, 1, 1, 1] = 21\n    Explanation: The flower grows by 5 cm for each pair of consecutive watering days, resulting in a total height of 21 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower dies or grows based on watering patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on daily watering patterns. The key challenge is to accurately compute the flower's height or determine if it dies, while efficiently handling multiple test cases. The solution must adhere to the specified input-output format and ensure all edge cases are covered.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the given watering pattern for each test case. The function will iterate through the days, updating the flower's height according to the rules provided. We will use a simple loop and conditional statements to handle the growth logic efficiently. The solution will be implemented in a single file, 'main.py', and will handle multiple test cases as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules depending on whether it is watered or not.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with no watering.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through each day's watering status:\n      - If the flower is watered on a given day, check if it was also watered the previous day:\n        - If yes, increase height by 5 cm.\n        - If no, increase height by 1 cm.\n      - If the flower is not watered, check if it was also not watered the previous day:\n        - If yes, set height to -1 (flower dies) and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering and then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on specific watering patterns over a given number of days. The solution must handle multiple test cases and provide accurate results for each scenario, including the possibility of the flower dying due to consecutive days without watering.\nrequirement pool:\n- Implement the main growth calculation logic based on watering patterns.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear output format as specified in the requirements.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of a flower based on the given watering pattern over a specified number of days. The function will iterate through each test case, checking the watering pattern to determine the flower's growth or death. We will use simple list operations to track the growth and check for consecutive days without watering. The solution will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower grows by specific rules depending on consecutive watering days or lack thereof.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is either watered or not. Consecutive days without watering lead to the flower's death.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start.\n    - Iterate through each test case independently.\n    - For each test case, iterate through the list of watering patterns:\n        - If two consecutive days are not watered (two zeros in a row), set height to -1 and break out of the loop.\n        - If a day is watered, check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case with all zeros: \n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Test case with alternating watering:\n    Input: 4\n           1 0 1 0\n    Output: 3\n    Explanation: The flower grows by 1 cm on the first and third days, totaling 3 cm.\n\n    Test case with continuous watering:\n    Input: 3\n           1 1 1\n    Output: 11\n    Explanation: The flower grows by 5 cm on the second day and another 5 cm on the third day, totaling 11 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and handles growth correctly based on watering patterns.\n", "requirement analysis:\nThe task requires implementing a function to simulate the growth of a flower over a series of days based on watering patterns. The function must handle multiple test cases and determine the final height of the flower or if it dies due to consecutive days without water.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering pattern.\n- Ensure the program can handle up to 100 test cases efficiently.\n- Optimize the code for performance with edge cases.\n- Provide clear error messages for invalid inputs.\n- Include detailed comments and documentation for maintainability.\nWe will implement a function that simulates the growth of a flower over a series of days based on a given watering pattern. The function will iterate through each test case, checking the watering pattern day by day. It will update the flower's height according to the rules provided and check for consecutive days without water to determine if the flower dies. The function will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on its watering pattern over a series of days. The flower's height changes according to specific rules, and the task is to determine its final height or if it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm at the start of each test case.\n    2. Iterate through each day's watering pattern:\n        - If the flower is watered (a_i = 1), check if it was also watered the previous day:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0), check if it was not watered the previous day:\n            - If yes, set height to -1 (flower dies) and break out of the loop.\n    3. After processing all days, store the final height or -1 for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the second and third days consecutively, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering and then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on daily watering patterns. The key aspects include handling multiple test cases, ensuring the flower's growth or death is accurately calculated, and providing the correct output format.\nrequirement pool:\n- Implement the flower growth logic based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or death.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function that simulates the growth of a flower based on the given watering pattern for each test case. The function will iterate through the days, updating the flower's height according to the rules provided. If the flower is not watered for two consecutive days, it will be marked as dead. We will use a simple loop and conditionals to achieve this, ensuring the solution is efficient and easy to understand. The function will handle multiple test cases as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower grows by specific rules depending on whether it is watered or not.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is either watered or not. If the flower isn't watered for two consecutive days, it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two successive zeros in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height when a 1 is encountered.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1. Implemented by adding 5 to the height when two successive 1s are encountered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - Check if the flower is watered (a_i = 1):\n          - If watered on consecutive days, increase height by 5 cm.\n          - Otherwise, increase height by 1 cm.\n        - Check if the flower is not watered for two consecutive days (a_i = 0 and a_(i+1) = 0):\n          - Mark the flower as dead and set height to -1.\n          - Break out of the loop for this test case.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days and then by 1 cm on the fourth day.\n\n    Test case: [0] = 1\n    Explanation: The flower is not watered but does not die because there is only one day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and handles single-day scenarios appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately calculate the height of the flower while handling multiple test cases efficiently. The program must also determine if the flower dies due to consecutive days without watering and provide the correct output format for each test case.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Develop a clear and correct output format for the results.\n- Optimize the code for performance with large inputs.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of a flower over a series of days based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use a simple loop to handle the growth logic and check for consecutive days without watering to determine if the flower dies. The solution will be efficient enough to handle the maximum constraints given the problem size.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules, and the task is to determine its final height or if it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm at the start.\n    2. Iterate through each test case:\n        - For each day in the test case, check if the flower is watered (a_i = 1) or not (a_i = 0).\n        - If two consecutive days are not watered (two sequential zeros), set the height to -1 and break out of the loop for that test case.\n        - If watered on a single day, increase height by 1 cm.\n        - If watered on two consecutive days, increase height by 5 cm.\n    3. Output the final height for each test case or -1 if the flower dies.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the first two days (due to consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n"], "scores": [], "pass_results": [false, true, true, true, true, false, false, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 905, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "rephrase_one", "parent_index": 411}
