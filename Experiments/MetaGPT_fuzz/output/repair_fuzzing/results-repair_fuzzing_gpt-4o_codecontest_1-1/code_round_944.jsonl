{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "prompt": "The robot remains on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns). Rows on the board are indexed from 1 to n starting from the top down, and columns are indexed from 1 to m starting from the left across.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side. It can move to the cells that share a side with its current position. \n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one. It does so strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For instance, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nIdentify the cell from which the robot should begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "repair_prompt": ["The robot remains on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns). Rows on the board are indexed from 1 to n starting from the top down, and columns are indexed from 1 to m starting from the left across.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side. It can move to the cells that share a side with its current position. \n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one. It does so strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For instance, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nIdentify the cell from which the robot should begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot remains on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns). Rows on the board are indexed from 1 to n starting from the top down, and columns are indexed from 1 to m starting from the left across.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side. It can move to the cells that are adjacent to its current position. It shares a side with its existing cell.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one. It does so strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For instance, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nIdentify the cell from which the robot should begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot remains on a checkered rectangular board with dimensions n \u00d7 m (n rows, m columns). Rows on the board are indexed from 1 to n starting from the top down, and columns are indexed from 1 to m starting from the left across.\n\nThe robot can move from the current cell to one of the four cells adjacent by side, meaning it can move to cells that share a side with its current position. \n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell, executing the commands strictly in the order they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks; a command causing this is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For instance, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, it will perform one command, then the next command will force it to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column), moves right, right, down, left, up, and up, and ends in the cell (1, 2) (first row, second column).\n\nIdentify the cell from which the robot should begin its movement in order to carry out as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2"], "completions": ["from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot on a checkered board.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the dimensions of the board (n, m) and the sequence of commands (s).\n\n    Returns:\n        A list of tuples, each containing the optimal starting position (row, column) for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position and the maximum number of commands executed\n        best_position = (1, 1)\n        max_commands_executed = 0\n\n        # Iterate over all possible starting positions on the board\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement according to the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if a new position allows more commands to be executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_position = (start_row, start_col)\n\n        results.append(best_position)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n    \n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n        \n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement according to the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n                    \n                    commands_executed += 1\n                \n                # Update the best starting position if the current position allows more commands to be executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n        \n        results.append(best_starting_position)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands without falling off the board.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the dimensions of the board and the command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n    \n    for n, m, s in test_cases:\n        max_commands = 0\n        best_position = (1, 1)\n        \n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    # Check if the robot is still within bounds\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best position if a new maximum is found\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_position = (start_row, start_col)\n        \n        results.append(best_position)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, commands in test_cases:\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the execution of the command sequence\n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still on the board\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        results.append(best_starting_position)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Call the function and get results\n    results = find_optimal_starting_position(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands_executed = 0\n        optimal_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the optimal position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_position = (start_row, start_col)\n\n        results.append(optimal_position)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    test_cases.append((n, m, s))\n\n# Call the function and print the results\nresults = find_optimal_starting_position(t, test_cases)\nfor r, c in results:\n    print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the dimensions of the board and the command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands_executed = 0\n        optimal_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the optimal position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_position = (start_row, start_col)\n\n        results.append(optimal_position)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Call the function and print the results\n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting cell for the robot to execute the maximum number of commands.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the dimensions of the board (n, m) and the command sequence (s).\n\n    Returns:\n        A list of tuples, each containing the row and column of the optimal starting cell for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                # Simulate the robot's movement\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if a new maximum is found\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        results.append(best_starting_position)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Call the function and print the results\n    results = find_optimal_starting_cell(t, test_cases)\n    for r, c in results:\n        print(r, c)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    results = []\n    \n    # Define movement deltas for each command\n    move_deltas = {\n        'L': (0, -1),\n        'R': (0, 1),\n        'U': (-1, 0),\n        'D': (1, 0)\n    }\n    \n    for n, m, s in test_cases:\n        max_successful_commands = 0\n        best_start_position = (1, 1)\n        \n        # Iterate over each possible starting position\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                successful_commands = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    delta_row, delta_col = move_deltas[command]\n                    new_row = current_row + delta_row\n                    new_col = current_col + delta_col\n                    \n                    # Check if the new position is within the board boundaries\n                    if 1 <= new_row <= n and 1 <= new_col <= m:\n                        successful_commands += 1\n                        current_row, current_col = new_row, new_col\n                    else:\n                        break\n                \n                # Update the best starting position if this one is better\n                if successful_commands > max_successful_commands:\n                    max_successful_commands = successful_commands\n                    best_start_position = (start_row, start_col)\n        \n        results.append(best_start_position)\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    test_cases = []\n    \n    index = 1\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        s = data[index + 1].strip()\n        test_cases.append((n, m, s))\n        index += 2\n    \n    # Call the function\n    results = find_optimal_start(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    results = []\n    \n    for n, m, s in test_cases:\n        max_commands = 0\n        optimal_start = (1, 1)\n        \n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n                    \n                    # Check if the robot is still on the board\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the optimal starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    optimal_start = (start_row, start_col)\n        \n        results.append(optimal_start)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    \n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    # Call the function\n    results = find_optimal_start(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    results = []\n    \n    # Define movement deltas for each command\n    move_deltas = {\n        'L': (0, -1),\n        'R': (0, 1),\n        'U': (-1, 0),\n        'D': (1, 0)\n    }\n    \n    for n, m, commands in test_cases:\n        max_commands_executed = 0\n        optimal_start = (1, 1)\n        \n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in commands:\n                    delta_row, delta_col = move_deltas[command]\n                    new_row = current_row + delta_row\n                    new_col = current_col + delta_col\n                    \n                    # Check if the new position is within the board boundaries\n                    if 1 <= new_row <= n and 1 <= new_col <= m:\n                        current_row, current_col = new_row, new_col\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the optimal start if this position allows more commands\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_start = (start_row, start_col)\n        \n        results.append(optimal_start)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    # Output interface\n    results = find_optimal_start(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires determining the optimal starting position for a robot on a board to execute a sequence of commands without falling off. The solution must handle large board sizes and command sequences efficiently, ensuring the maximum number of commands are executed. The output must be formatted correctly for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for the robot.\n- Ensure the solution handles large inputs efficiently.\n- Optimize the algorithm for speed and performance.\n- Provide clear documentation and examples for users.\n- Implement additional features for user interaction and feedback.\nWe will implement a function to determine the optimal starting position for the robot on a checkered board. The function will simulate the robot's movements from each possible starting position and track the number of successful commands executed before the robot falls off the board. We will use a greedy approach to find the starting position that allows the maximum number of commands to be executed. Given the constraints, the solution must be efficient, so we will optimize the simulation to avoid unnecessary computations. We will use Python's built-in data structures for simplicity and performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'commands'\n    Explanation: The sequence of movements ('L', 'R', 'D', 'U') that the robot executes to navigate the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': \n    Explanation: The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position that allows the longest sequence of uninterrupted moves.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the dimensions of the board (n, m) and the sequence of commands (s).\n    2. Initialize variables to track the best starting position and the maximum number of commands executed.\n    3. Iterate over all possible starting positions on the board.\n    4. For each starting position, simulate the robot's movement according to the command sequence.\n    5. Track the number of successful commands executed before the robot falls off the board.\n    6. Update the best starting position if a new position allows more commands to be executed.\n    7. Output the best starting position for each test case.\n\n# [edge case] \n    Test case with smallest board and single command:\n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The board is 1x1, so any command will cause the robot to fall immediately. The only possible starting position is (1, 1).\n\n    Test case with a board where all commands lead to falling:\n    Input: 2 2 LURD\n    Output: 1 1\n    Explanation: Any starting position will result in falling after executing one command, so any position can be chosen.\n\n    Test case with a large board and repetitive commands:\n    Input: 1000 1000 LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\n    Output: 1 1000\n    Explanation: Starting at the far right column allows executing all 'L' commands without falling.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from each possible starting position inherently handles these scenarios by checking boundary conditions during simulation.\n", "requirement analysis:\nThe task requires determining the optimal starting position for a robot on a checkered board to execute a sequence of commands without falling off. The solution must handle large board sizes and command sequences efficiently, ensuring that the robot executes the maximum number of commands possible. The output should be clear and concise, providing the starting cell coordinates for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for maximum command execution.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance on large board sizes.\n- Consider edge cases where the board size is minimal.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and execute the command sequence to determine the maximum number of commands that can be executed without the robot falling off the board. We will use a simple loop to check each starting position and track the number of successful commands executed. The solution will be optimized to handle large inputs efficiently by avoiding unnecessary computations and using direct indexing for board positions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move from one cell to another adjacent cell.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': means maximizing the number of commands executed without the robot falling off the board.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read n, m, and the command sequence s.\n    2. Initialize variables to track the best starting position and the maximum number of commands executed.\n    3. Iterate over all possible starting positions on the board.\n    4. For each starting position, simulate the robot's movement according to the command sequence.\n    5. Track the number of commands executed before the robot falls off the board.\n    6. Update the best starting position if the current position allows more commands to be executed.\n    7. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with a 1x1 board and any command sequence = (1, 1)\n    Explanation: The robot cannot move without falling off, so it should start at (1, 1) and execute zero commands.\n\n    Test case with a command sequence that immediately causes a fall = (any valid starting position)\n    Explanation: If the first command causes a fall, any valid starting position will result in zero successful commands.\n\n    Test case with a command sequence that fits perfectly within the board dimensions = (any valid starting position)\n    Explanation: If the command sequence does not exceed board boundaries, any valid starting position will execute all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements and checking boundaries will naturally handle these scenarios.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting position for the robot on a checkered board to execute the maximum number of commands without falling off. The solution must efficiently handle large input sizes and provide accurate results for multiple test cases.\nrequirement pool:\n- Determine optimal starting position for maximum command execution\n- Handle large input sizes efficiently\n- Provide accurate results for multiple test cases\n- Ensure solution robustness against edge cases\n- Optimize algorithm for speed and performance\nWe will implement a function that simulates the robot's movement on the board and determines the optimal starting position for executing the maximum number of commands without falling off. The approach involves iterating over possible starting positions and simulating the command sequence to check if the robot remains within bounds. We will use efficient iteration and boundary checks to handle large input sizes. The solution will be optimized for speed and performance using basic Python data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where each cell can be accessed by the robot. The robot can move to adjacent cells based on the commands given.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the movement of the robot on the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position where the robot can perform the longest sequence of moves without breaking.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read n, m, and the command sequence s.\n    2. Initialize variables to track the best starting position and maximum commands executed.\n    3. Iterate over all possible starting positions on the board.\n    4. For each starting position, simulate the robot's movement according to the command sequence.\n    5. Check if each move keeps the robot within the board boundaries.\n    6. Track the number of successful commands executed for each starting position.\n    7. Update the best starting position if a new maximum is found.\n    8. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with smallest board and single command:\n    1 1\n    L\n    Expected output: 1 1\n    Explanation: The board is only 1x1, so any command will cause the robot to fall off immediately.\n\n    Test case with a single row:\n    1 2\n    L\n    Expected output: 1 2\n    Explanation: Starting at (1,2) allows executing one command successfully before falling off.\n\n    Test case with a single column:\n    3 1\n    U\n    Expected output: 3 1\n    Explanation: Starting at (3,1) allows executing one command successfully before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements and checking boundaries will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting position for the robot to execute the maximum number of commands without falling off the board. The solution must efficiently handle large board sizes and multiple test cases, ensuring quick and accurate results.\nrequirement pool:\n- Determine the optimal starting position for maximum command execution\n- Handle large board sizes efficiently\n- Provide clear and accurate output for each test case\n- Optimize algorithm for speed and scalability\n- Ensure solution handles edge cases effectively\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions on the board and simulate the execution of the command sequence from each position. It will track the number of successful commands executed before the robot falls off the board. The starting position that allows the maximum number of commands to be executed will be selected. Given the constraints, the solution will be optimized to handle large board sizes efficiently by avoiding unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure of the board where the robot can move. Each cell on the board can be identified by its row and column indices.\n\n    'adjacent by side'\n    Explanation: This means the robot can move to any of the four neighboring cells that share a side with its current cell, i.e., left, right, up, or down.\n\n    'sequence of commands'\n    Explanation: This is the list of movements ('L', 'R', 'D', 'U') that the robot must execute in order.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position that allows the longest sequence of commands to be executed.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case, read the dimensions of the board and the sequence of commands.\n3. Initialize variables to track the best starting position and the maximum number of commands executed.\n4. Iterate over all possible starting positions on the board.\n5. For each starting position, simulate the execution of the command sequence:\n   - Track the current position of the robot.\n   - For each command, update the robot's position.\n   - If a command causes the robot to move out of bounds, stop executing further commands.\n6. Compare the number of successfully executed commands with the current maximum and update if necessary.\n7. After checking all starting positions, record the best starting position for each test case.\n8. Output the best starting position for each test case.\n\n# [edge case] \n    1 1\n    L = 1 1\n    Explanation: The board is only 1x1, so any move will cause the robot to fall off. The only valid starting position is (1, 1).\n\n    2 2\n    RR = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows executing one 'R' before falling off.\n\n    3 3\n    UUU = 3 1\n    Explanation: Starting at (3, 1) allows executing all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating each possible starting position inherently handles these cases by checking bounds during simulation.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting position for a robot on a checkered board to execute a sequence of commands without falling off. The solution must handle large board sizes efficiently and ensure maximum command execution.\nrequirement pool:\n- Determine optimal starting position for maximum command execution\n- Ensure algorithm efficiency for large board sizes\n- Handle edge cases where board dimensions are minimal\n- Provide clear output format for test cases\n- Optimize for multiple starting positions if applicable\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions on the board and simulate the execution of the command sequence from each position. It will track the number of commands successfully executed before the robot falls off the board. The starting position that allows the maximum number of commands to be executed will be selected. Given the constraints, the solution must be efficient, so we will use a greedy approach to quickly determine the optimal starting position. We will not use any additional libraries as the problem can be solved with basic Python constructs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string of characters ('L', 'R', 'D', 'U') that dictate the robot's movement direction.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to execute the maximum number of commands without the robot falling off the board.\n    Explanation: This means finding a starting position where the robot can execute the longest sequence of commands without breaking.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible starting positions on the board.\n    2. For each starting position, simulate the robot's movement according to the command sequence.\n    3. Track the number of commands successfully executed before the robot falls off the board.\n    4. Select the starting position that allows the maximum number of commands to be executed.\n    5. Return the coordinates of this optimal starting position.\n\n# [edge case]\n    Case 1: n = 1, m = 1, s = \"L\"\n    Expected output: 1 1\n    Explanation: The board is only 1x1, so any command will cause the robot to fall immediately. The only starting position is (1, 1).\n\n    Case 2: n = 1, m = 2, s = \"L\"\n    Expected output: 1 2\n    Explanation: Starting at (1, 2), the robot can execute the command 'L' without falling off.\n\n    Case 3: n = 3, m = 3, s = \"RRDLUU\"\n    Expected output: 2 1\n    Explanation: Starting at (2, 1), all commands can be executed successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from all possible starting positions inherently handles these cases.\n", "requirement analysis:\nThe problem requires determining the optimal starting position for a robot on a grid to execute the maximum number of commands without falling off. The solution must efficiently handle large grid sizes and command sequences, ensuring the robot's path is calculated correctly for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for the robot.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance on large grids.\n- Consider edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions on the board and simulate the execution of the command sequence from each position. It will track the number of commands successfully executed before the robot falls off the board. The starting position that allows the maximum number of commands to be executed will be selected. Given the constraints, the solution must be optimized to handle large inputs efficiently. We will use simple loops and condition checks to ensure the solution is both efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string of characters ('L', 'R', 'D', 'U') that dictate the robot's movement direction.\n\n    'adjacent by side'\n    Explanation: The robot can move to cells directly next to its current position, sharing a side.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to execute the maximum number of commands without the robot falling off the board.\n    Explanation: This means finding a starting position where the robot can execute the longest sequence of commands before hitting the edge.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible starting positions on the board.\n    2. For each starting position, simulate the execution of the command sequence.\n    3. Track the number of commands successfully executed before the robot falls off the board.\n    4. Select the starting position that allows the maximum number of commands to be executed.\n    5. Return the coordinates of this starting position.\n\n# [edge case]\n    Case 1: n = 1, m = 1, s = \"L\"\n    Output: 1 1\n    Explanation: The board is a single cell, any command will cause the robot to fall immediately.\n\n    Case 2: n = 1, m = 2, s = \"L\"\n    Output: 1 2\n    Explanation: Starting at (1,2), the robot can execute \"L\" without falling off.\n\n    Case 3: n = 3, m = 3, s = \"RRDLUU\"\n    Output: 2 1\n    Explanation: Starting at (2,1), all commands can be executed successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating each starting position and tracking successful command execution inherently handles edge cases.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting cell for the robot to execute the maximum number of commands without falling off the board. The solution must handle large board sizes and command sequences efficiently, ensuring the output format is consistent with the given requirements.\nrequirement pool:\n- Determine the optimal starting cell for maximum command execution.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for speed and accuracy.\n- Consider edge cases where the board size is minimal.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions on the board and simulate the execution of the command sequence from each position. It will track the number of commands successfully executed before the robot falls off the board. The function will return the starting position that allows the maximum number of commands to be executed. Given the constraints, we will optimize the simulation to handle large board sizes and command sequences efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure of the board where the robot can move. Each cell is a square, and the board has a specified number of rows (n) and columns (m).\n\n    'adjacent by side'\n    Explanation: The robot can move to any of the four neighboring cells that share a side with its current position, i.e., left, right, up, or down.\n\n    'sequence of commands'\n    Explanation: This is the string of movements ('L', 'R', 'D', 'U') that the robot must execute in order.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position that allows the longest sequence of commands to be executed.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the dimensions of the board (n, m) and the command sequence (s).\n2. Initialize variables to track the best starting position and the maximum number of commands executed.\n3. Iterate over all possible starting positions on the board.\n4. For each starting position, simulate the robot's movement according to the command sequence.\n5. Track the number of commands executed before the robot falls off the board.\n6. Update the best starting position if a new maximum is found.\n7. Output the best starting position for each test case.\n\n# [edge case] \n    1 1\n    Explanation: With a 1x1 board, any command will cause the robot to fall off immediately, so any starting position is valid but will execute 0 commands.\n    \n    1 2\n    Explanation: On a 1x2 board with a single 'L' command, starting at (1, 2) will execute 1 command successfully.\n    \n    3 3\n    Explanation: On a 3x3 board with commands \"RRDLUU\", starting at (2, 1) allows all commands to be executed successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating each possible starting position inherently handles edge cases by checking if a move would cause the robot to fall off the board.\n", "requirement analysis:\nThe task requires determining the optimal starting cell for a robot on a checkered board to execute the maximum number of commands without falling off. The solution must handle large board sizes and command sequences efficiently, ensuring the output format is consistent with the requirements.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for maximum command execution.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for speed and scalability.\n- Consider edge cases where the board size is minimal.\nWe will implement a function that simulates the robot's movement on the board, checking each possible starting position to determine the maximum number of commands that can be executed without falling off the board. The function will iterate over each cell on the board, simulate the sequence of commands, and track the number of successful moves. We will use efficient iteration and boundary checks to ensure the solution handles large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position that allows the longest sequence of uninterrupted moves.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read n, m, and the command sequence s.\n    2. Initialize variables to track the best starting position and the maximum number of successful commands.\n    3. Iterate over each possible starting cell (r, c) on the board.\n    4. Simulate the robot's movement from (r, c) using the command sequence s.\n    5. For each command, check if the move keeps the robot within the board boundaries.\n    6. If a move causes the robot to fall off, stop executing further commands from that starting position.\n    7. Track the number of successful commands for each starting position.\n    8. Update the best starting position if a new position allows more successful commands.\n    9. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with smallest board and single command:\n    1 1\n    L\n    Expected output: 1 1\n    Explanation: The board is 1x1, any move will cause the robot to fall off immediately.\n\n    Test case with a board where all moves are possible:\n    3 3\n    RRR\n    Expected output: 1 1\n    Explanation: Starting from (1,1), all moves are possible without falling off.\n\n    Test case with a command sequence longer than board size:\n    2 2\n    RRRUUU\n    Expected output: 1 1\n    Explanation: Starting from (1,1), only two moves can be executed before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating moves and checking boundaries inherently handles these scenarios.\n", "requirement analysis:\nThe problem requires determining the optimal starting position for a robot on a grid to execute the maximum number of commands without falling off. The solution must efficiently handle large grid sizes and command sequences, ensuring that the robot's path is calculated accurately for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for the robot.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear output for each test case.\n- Optimize the algorithm for performance.\n- Consider edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and execute the command sequence, keeping track of the number of successful commands executed before the robot falls off the board. The optimal starting position will be the one that allows the maximum number of commands to be executed. Given the constraints, we will use efficient iteration and boundary checks to ensure performance. We will not use any external libraries as the problem can be solved with basic Python constructs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to execute the maximum number of commands without the robot falling off the board.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible starting positions on the board.\n    2. For each starting position, simulate the robot's movement according to the command sequence.\n    3. Keep track of the number of commands successfully executed before the robot falls off the board.\n    4. Compare the number of successful commands for each starting position and select the position with the maximum number.\n    5. Return the coordinates of the optimal starting position.\n\n# [edge case]\n    Test case with a single cell board (1x1) and any command sequence:\n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The robot cannot move anywhere, so it starts and ends at the same cell.\n\n    Test case with a command sequence longer than the board dimensions:\n    Input: 2 2 LURD\n    Output: 1 1\n    Explanation: The robot can start at (1,1) and execute all commands without falling off.\n\n    Test case with a command sequence that immediately causes a fall:\n    Input: 3 3 UUU\n    Output: 3 1\n    Explanation: Starting at (3,1) allows executing one command before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements and checking boundaries will naturally handle these scenarios.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting cell for the robot to execute the maximum number of commands without falling off the board. The solution must handle large board sizes and command sequences efficiently, ensuring that the total length of commands across all test cases does not exceed 10^6.\nrequirement pool:\n- Determine the optimal starting cell for maximum command execution.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear output for each test case.\n- Optimize the algorithm for performance.\n- Consider edge cases where the board size is minimal.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and execute the sequence of commands, keeping track of the number of successfully executed commands. The optimal starting position will be the one that allows the maximum number of commands to be executed without the robot falling off the board. Given the constraints, we will use a simple simulation approach without any complex data structures, ensuring efficiency for large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n    'falling off the board'\n    Explanation: If the robot moves beyond the boundaries of the board, it is considered to have fallen off.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to execute the maximum number of commands without falling off the board.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible starting positions on the board.\n    2. For each starting position, simulate the robot's movement according to the sequence of commands.\n    3. Track the number of successfully executed commands for each starting position.\n    4. Identify the starting position that allows the maximum number of commands to be executed.\n    5. Return the coordinates of this optimal starting position.\n\n# [edge case]\n    Test case with a 1x1 board and any command: \n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The robot cannot move anywhere without falling off, so it starts and ends at (1, 1).\n\n    Test case with a single row or column:\n    Input: 1 2 L\n    Output: 1 2\n    Explanation: The robot can only move left once before falling off, so it starts at (1, 2).\n\n    Test case with a sequence that immediately causes a fall:\n    Input: 3 3 UUU\n    Output: Any valid starting position in row 3\n    Explanation: Starting from any position in row 3 will allow one command to be executed before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The simulation logic inherently handles these scenarios by checking boundaries before executing each command.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 944, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "parent_index": 379}
