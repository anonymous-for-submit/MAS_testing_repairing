{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He then sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the given sorted array of sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in the sorted array b is the sum of all three numbers in array a.\n        total_sum = case[-1]\n        # The smallest number in the sorted array b is one of the numbers in array a.\n        smallest_number = case[0]\n        # Deduce the other two numbers using arithmetic operations.\n        # Since total_sum = a1 + a2 + a3 and smallest_number = a1 (or a2 or a3),\n        # We can find the other two numbers as follows:\n        # a2 = case[1] - smallest_number\n        # a3 = total_sum - smallest_number - a2\n        a1 = smallest_number\n        a2 = case[1] - a1\n        a3 = total_sum - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the given sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element of a\n        a1 = b[0]\n        # The second smallest element in b is the second element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[6]\n        # Calculate the third element of a\n        a3 = sum_all - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[-2]\n        \n        # Deduce the original array a\n        a2 = sum_two_largest - a1\n        a3 = sum_a - a2 - a1\n        \n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array.\n    # The largest number in b is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - (a1 + a2)\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[-2]\n        \n        # Deduce the original array elements\n        a3 = sum_all - a1\n        a2 = sum_two_largest - a3\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    sum_all = b[-1]\n    # The second smallest element in b is the sum of two of the original integers\n    sum_two = b[1]\n    # Deduce the other two integers\n    a2 = sum_two - a1\n    a3 = sum_all - sum_two\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the original array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements a_1\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements of a\n        sum_two_largest = b[5]\n        \n        # Deduce the original elements\n        a2 = sum_two_largest - a1\n        a3 = sum_all - sum_two_largest\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem statement and the given approach:\n        a1 = b[0]  # The smallest element in b is the smallest element in a\n        a2 = b[1]  # The second smallest element in b is the second smallest element in a\n        a3 = b[6] - a1 - a2  # The largest element in b is the sum of all elements in a\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Call the function to restore the arrays\n    results = restore_array(n, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of array a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a3 = b[-1] - (a1 + a2)\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    number_of_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(number_of_test_cases, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of 3 integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # The second largest element in b is the sum of the two largest original integers\n    a2_a3 = b[5]\n    \n    # Deduce the second integer\n    a2 = a2_a3 - a1\n    # Deduce the third integer\n    a3 = a1_a2_a3 - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires reconstructing an original array of three integers from the given sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide a user-friendly interface for input and output.\n- Optimize the solution for speed and memory usage.\n- Include detailed comments and documentation for the code.\nWe will use the property that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the numbers in a. By using these properties, we can deduce the values of a by simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the array a. In code, this can be implemented by calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b represents the sum of all elements in array a. This helps in deducing the values of a.\n\n# [code logic]\n    1. Identify the largest number in array b, which is the sum of all three numbers in array a.\n    2. Identify the smallest number in array b, which is one of the numbers in array a.\n    3. Use arithmetic operations to deduce the other two numbers in array a by considering the properties of sums and differences.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All numbers are identical, and their sums are repeated. The smallest number is one of the numbers in a, and the largest is the sum of all three identical numbers.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest number is one of the numbers in a, and the largest is the sum of all three numbers. The other numbers can be deduced by considering differences.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All numbers are identical, and their sums are repeated. The smallest number is one of the numbers in a, and the largest is the sum of all three identical numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the largest and smallest numbers and using arithmetic operations will suffice for all cases.\n", "requirement analysis:\nThe task is to deduce the original array of three integers from the given sorted sums of all non-empty subsequences. The key is to identify the smallest, second smallest, and largest values in the sorted list to reconstruct the original array. The smallest value is the smallest element of the original array, the second smallest is the second element, and the largest value is the sum of all three elements.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution is efficient and handles up to 5000 test cases.\n- Optimize the code for readability and maintainability.\n- Include error handling for unexpected input formats.\n- Provide detailed comments and documentation for the code.\nWe will use the property that the smallest element in the sorted array b is the smallest element of the original array a. The second smallest element in b is the second element of a, and the largest element in b is the sum of all three elements of a. By subtracting the smallest and second smallest elements from the largest, we can deduce the third element of a. This approach is efficient and straightforward, handling up to 5000 test cases smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationships are present in the requirement.\n\n# [degree adverb] \n    No degree adverbs are present in the requirement.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n2. Identify the second smallest element in array b, which corresponds to the second element in array a.\n3. Identify the largest element in array b, which is the sum of all three elements of array a.\n4. Calculate the third element of array a by subtracting the first and second elements from the largest element.\n5. Return the three elements as the restored array a.\n\n# [edge case] \n    Edge Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array a consists of three identical numbers.\n\n    Edge Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest and second smallest elements are 1 and 2, and the largest is 7. The third element is calculated as 7 - (1 + 2) = 4.\n\n    Edge Case 3: b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical in groups, so the original array a consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements and calculating the third element will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Ensure the solution handles the maximum constraints smoothly.\n- Provide clear and correct output for each test case.\n- Optimize for both time and space complexity.\n- Consider edge cases and validate input constraints.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a from b. This approach is efficient and works well within the given constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the array a, excluding the empty set. In code, this can be implemented by calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array b, which corresponds to the smallest element in the original array a.\n    'largest': Refers to the largest element in the sorted array b, which is the sum of all elements in the original array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these observations to deduce the original array a from b.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each element in a is 1.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7 (sum of all elements). The second largest is 6 (sum of two largest elements).\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing array a from b inherently handles these cases by using the properties of sorted sums and subsequences.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Output the results in the specified format.\n- Handle large integer values up to 10^9.\n- Provide multiple valid outputs if possible.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array. In code, this can be implemented by calculating all possible sums of combinations of the array elements.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in the sorted array b is the sum of all three elements of the original array a.\n\n# [code logic]\n    1. For each test case, read the sorted array b.\n    2. Identify the smallest three numbers in b, which correspond to the individual elements of a.\n    3. Identify the largest number in b, which is the sum of all three elements of a.\n    4. Use these observations to deduce the original array a.\n    5. Print the deduced array a for each test case.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest three numbers are 1, 1, and 999999998. The largest number is 1000000000, which is the sum of all three elements.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, and their sum is the largest number.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is 5, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number in b will suffice to deduce the original array a correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the algorithm for speed and efficiency.\n- Provide clear and concise output formatting.\n- Include error handling for unexpected input formats.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of the original array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this can be implemented by iterating through all combinations of elements and calculating their sums.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in array b represents the sum of all elements in array a. This helps in deducing one of the original elements of array a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to the smallest element in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these insights to deduce the original array a:\n       - Let a1 be the smallest element in b.\n       - Let a3 be the largest element in b minus a1.\n       - Let a2 be the second largest element in b minus a3.\n    5. Return a1, a2, and a3.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, which corresponds to one of the smallest elements in a. The largest element is 1000000000, which is the sum of all elements in a. The second largest element is 999999999, which is the sum of two largest elements in a.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using sorted properties and sum relationships.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Optimize the solution for large integer values\n- Validate the output format for each test case\n- Provide documentation and comments for code clarity\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array b is one of the original integers, and the largest element is the sum of all three integers. Using these observations, we can deduce the original integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means we need to calculate the sum of every possible combination of the elements in array a, excluding the empty set. In code, this involves iterating over combinations of the array elements and summing them.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in array b represents the sum of all three integers in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the original integers.\n2. Identify the largest element in array b, which is the sum of all three integers.\n3. Use the second smallest and second largest elements to deduce the other two integers.\n4. Return the three integers as the restored array a.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest element is 1, and the largest is 1000000000. The second smallest and second largest help deduce the other two integers.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, indicating that all integers in array a are the same.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest element is 1, and the largest is 5. The second smallest and second largest help deduce the other two integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic efficiently deduces the integers from the sorted sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted and easy to interpret.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle up to 5000 test cases efficiently\n- Ensure the solution works with large integer values\n- Provide clear and correctly formatted output\n- Optimize for speed and clarity\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a. We will use simple arithmetic operations to extract the original array from the given sorted array b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the array a, excluding the empty set. In code, this can be implemented by calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in array b is the sum of all three elements of array a. This helps us identify the total sum of the original array.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the original elements in a.\n    2. Identify the largest element in b, which is the sum of all three elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these observations to deduce the values of a_1, a_2, and a_3 using simple arithmetic operations.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest element is 1, and the largest element is 1000000000. The second largest element is 999999999, which helps deduce the original array.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, indicating that the original array consists of three identical elements.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest element is 1 and the largest is 5. The second largest is 4, which helps deduce the original array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing the original array from b inherently handles these cases by using arithmetic operations based on sorted properties and sum relationships.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be correctly formatted, and the solution should be robust enough to handle edge cases, such as when the integers in the array are very large or when there are multiple possible solutions.\nrequirement pool:\n- Implement the main algorithm to reconstruct the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Format the output correctly for each test case.\n- Consider edge cases and ensure the solution is robust.\nWe will solve the problem by leveraging the properties of the sorted array of sums. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a. The largest element is the sum of all three numbers in a. The second smallest element is the second smallest number in a. By using these properties, we can deduce the three numbers in a as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The sums of the subsequences are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum for each possible combination of elements in the array a, excluding the empty set. In code, this involves iterating over combinations of elements and summing them.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify a1 as the smallest element b[0].\n    3. Identify a2 as the second smallest element b[1].\n    4. Calculate a3 using the formula: a3 = b[6] - a1 - a2.\n    5. Output the values of a1, a2, and a3.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest element minus these two gives 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest element minus these two gives another 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly handles all cases by leveraging the properties of sorted sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and clear.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Provide clear and accurate output for each test case\n- Optimize for large integer values\n- Maintain simplicity in implementation\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can deduce the original array a efficiently. This approach ensures that we handle up to 5000 test cases and large integer values effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sums of all possible combinations of the elements in array a, excluding the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The resulting array b is sorted such that each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the array a consists of exactly three elements, each greater than zero.\n\n    '7 integers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n3. The largest number in b is the sum of all three elements of a.\n4. Use these observations to deduce the original array a:\n   - Let a1 be the smallest element in b.\n   - Let a2 be the second smallest element in b.\n   - Let a3 be the largest element minus (a1 + a2).\n5. Output the three integers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical numbers.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and identical, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these scenarios by leveraging the properties of sorted sums and distinct subsequence sums.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correctness and performance.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution works for all valid test cases\n- Optimize the solution for performance\n- Handle large integer values efficiently\n- Provide clear and understandable code\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can efficiently restore the original array a. We will use basic list operations and arithmetic to achieve this without any complex data structures or algorithms.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next, which helps in identifying the smallest and largest sums.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum for each possible combination of elements from the array a. In code, this involves iterating over combinations of elements and summing them.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest integer in array b represents the sum of all three integers in array a. This helps in deducing one of the original integers.\n\n# [code logic]\n1. Identify the smallest element in b, which is one of the original integers.\n2. Identify the largest element in b, which is the sum of all three original integers.\n3. Use these two identified values to deduce the remaining integers by subtracting the smallest integer from other sums in b.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, leading to identical sums for subsequences. The original array consists of three identical integers.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest integer is 1, and the largest sum is 7. Using these values helps deduce the original integers.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are large and identical, leading to identical sums for subsequences. The original array consists of three identical large integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using the smallest and largest values in b to deduce the original integers.\n"], "scores": [], "pass_results": [false, true, true, false, false, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 955, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 43}
