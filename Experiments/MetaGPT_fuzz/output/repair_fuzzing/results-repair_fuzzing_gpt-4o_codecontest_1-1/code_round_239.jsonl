{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are sequentially configured in a circular layout. The towns are numbered from 1 to n in clockwise order. In i-th town, there resides a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Moreover, in each town, the i-th singer got inspired and created a song that lasts a_i minutes. The song was added to his repertoire for him to perform in the remaining cities.\n\nTherefore, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an arrangement of b integer numbers, where b_i represents the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or declare that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are sequentially configured in a circular layout. The towns are numbered from 1 to n in clockwise order. In i-th town, there resides a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Moreover, in each town, the i-th singer got inspired and created a song that lasts a_i minutes. The song was added to his repertoire for him to perform in the remaining cities.\n\nTherefore, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an arrangement of b integer numbers, where b_i represents the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or declare that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are sequentially configured in a circular layout. The towns are numbered from 1 to n in clockwise order. In the i-th town, there resides a singer with a repertoire of a_i minutes. This holds true for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Moreover, in each town, the i-th singer got inspired and created a song that lasts a_i minutes. The song was added to his repertoire for him to perform in the remaining cities.\n\nTherefore, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an arrangement of b integer numbers, where b_i represents the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or declare that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are sequentially configured in a circular layout and are numbered from 1 to n in clockwise order. In i-th town, there resides a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, creating a song that lasts a_i minutes in each town which was added to his repertoire for performing in remaining cities. Therefore, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an arrangement of b integer numbers, where b_i represents the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or declare that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or declares impossibility.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list `b` of total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        possible = True\n        a = [0] * n\n\n        # Calculate potential values for a_i\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by n\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the expected sum of a_i\n        expected_sum = total_sum // n\n        \n        # Calculate the sequence a\n        valid = True\n        for i in range(n):\n            a[i] = (b[i] - expected_sum + n) // n\n            if a[i] <= 0 or (b[i] - expected_sum) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or declares it impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        total_sum = sum(b)\n        \n        # Check if the sum of b_i is divisible by n\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of a_i\n        sum_a = total_sum // n\n        \n        # Calculate potential sequence a_i\n        a = [0] * n\n        valid = True\n        \n        for i in range(n):\n            if (b[i] - sum_a) % n != 0:\n                valid = False\n                break\n            a[i] = (b[i] - sum_a) // n\n        \n        if valid and all(x > 0 for x in a):\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers based on concert durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n    \n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoires\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_repertoire = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n                if (total_repertoire - diff) % n != 0 or (total_repertoire - diff) <= 0:\n                    possible = False\n                    break\n                a[i] = (total_repertoire - diff) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or declares impossibility.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total concert durations.\n\n    Returns:\n        List[str]: Results for each test case, either \"NO\" or \"YES\" followed by the sequence.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_b = sum(b)\n        \n        # Check if the sum of b is divisible by n\n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        avg_contribution = total_b // n\n        possible = True\n        a = [0] * n\n        \n        # Attempt to reconstruct sequence a\n        for i in range(n):\n            if b[i] < avg_contribution:\n                possible = False\n                break\n            a[i] = b[i] - avg_contribution\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or declares impossibility.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list of total concert durations `b`.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        total_b = sum(b)\n\n        # Check if the sum of b is divisible by n\n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n\n        a_sum = total_b // n\n        a = [0] * n\n        possible = True\n\n        for i in range(n):\n            if (b[i] - a_sum) % n != 0:\n                possible = False\n                break\n            a[i] = (b[i] - a_sum) // n\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Special case when there's only one town\n            if b[0] % n == 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0] // n}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Calculate each a_i\n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            a[i] = (total_a - diff) // n\n            \n            # Check if a_i is a valid positive integer\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        if all(x == b[0] for x in b):\n            # Edge case: All concert durations are equal\n            results.append(\"YES\")\n            results.append(\"1 \" * n)\n            continue\n        \n        # Attempt to find a valid sequence\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            if b[0] == 1:\n                results.append(\"YES\")\n                results.append(\"1\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        if all(x == b[0] for x in b):\n            results.append(\"NO\")\n            continue\n        \n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs a sequence of positive integers based on concert durations in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and a list of concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by\n            the sequence of initial repertoire durations.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Check if the sum of b is divisible by n\n        if sum(b) % n != 0:\n            results.append(\"NO\")\n            continue\n\n        # Calculate the total sum of initial repertoires\n        total_repertoire = sum(b) // n\n\n        # Initialize the sequence a\n        a = [0] * n\n\n        # Calculate the sequence a using the derived formula\n        for i in range(n):\n            a[i] = (b[i] - (b[i - 1] if i > 0 else b[-1]) + total_repertoire) // n\n\n        # Verify if the sequence a is valid\n        if all(x > 0 for x in a) and sum(a) == total_repertoire:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        b = list(map(int, input().strip().split()))\n        test_cases.append((n, b))\n\n    # Call the function and get results\n    results = reconstruct_sequence(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of integers representing the initial repertoire durations of singers based on the total concert durations in each town. The solution must efficiently handle multiple test cases and large input sizes, ensuring scalability and correctness.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Ensure the solution works for n up to 4 \u22c5 10^4\n- Output the sequence of repertoire durations if possible\n- Provide a clear 'NO' output if no valid sequence exists\n- Optimize for large values of b_i up to 10^9\nWe will use a mathematical approach to reconstruct the sequence of repertoire durations. The key observation is that the sum of the sequence a_i multiplied by the number of towns should match the total duration b_i for each town. We will iterate over each test case, calculate potential values for a_i, and verify if they satisfy the conditions. If a valid sequence is found, we output it; otherwise, we output 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after the last town back to the first.\n\n    'repertoire of a_i minutes'\n    Explanation: Each singer starts with a repertoire of a_i minutes, which increases as they visit each town.\n\n    'concert duration'\n    Explanation: The duration of each concert increases as the singer visits more towns, starting from a_i and increasing by a_i for each subsequent town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': This means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': This means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate potential values for `a_i` by dividing `b_i` by `n`.\n4. Verify if these values satisfy the conditions for all towns.\n5. If a valid sequence is found, append it to `a` and print \"YES\" followed by the sequence.\n6. If no valid sequence is found, print \"NO\".\n\n# [edge case] \n    Test case 1: n = 1, b = [1]\n    Expected output: YES 1\n    Explanation: With only one town, the initial repertoire must be equal to the total concert duration.\n\n    Test case 2: n = 3, b = [1, 2, 3]\n    Expected output: NO\n    Explanation: It's impossible to find a sequence that satisfies the conditions with these values.\n\n    Test case 3: n = 6, b = [81, 75, 75, 93, 93, 87]\n    Expected output: YES 5 5 4 1 4 5\n    Explanation: A valid sequence that satisfies all conditions is found.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        # Attempt to reconstruct a\n        possible = True\n        a = [0] * n\n        \n        # Calculate potential values for a_i\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n\n```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing singers' initial repertoire durations based on given concert durations in towns. The challenge lies in ensuring the sequence satisfies the conditions of concert duration calculations across all towns.\nrequirement pool:\n- Reconstruct sequence of singers' repertoire accurately.\n- Handle multiple test cases efficiently.\n- Provide clear output for possible and impossible cases.\n- Ensure the solution is scalable for large inputs.\n- Optimize the algorithm for better performance.\nWe will iterate over each test case and attempt to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the sequence a_i for each singer should match the given total concert durations b_i in each town. We will use a mathematical approach to derive the sequence a from b, ensuring that the conditions are met. If a valid sequence cannot be constructed, we will return 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circular manner, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer visits more towns.\n    Implementation: Use multiplication to calculate the concert duration based on the number of towns visited.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations for each town.\n    - Attempt to reconstruct the sequence of initial repertoire durations (a_i) such that the sum of concerts matches b_i for each town.\n    - Use mathematical deduction to derive possible values for a_i based on b_i and the circular layout.\n    - If a valid sequence is found, print 'YES' followed by the sequence. If not, print 'NO'.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and a total concert duration of 1, the only possible initial repertoire is 1.\n    \n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: It's impossible to reconstruct a valid sequence because the concert durations do not allow for a consistent increase based on initial repertoire.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence can be reconstructed as shown in the example output.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement checks to ensure that derived values for a_i are positive integers.\n        - Ensure that calculations respect the circular nature of town visits.\n        - Use modulo operations to handle circular indexing when calculating concert durations.\n", "requirement analysis:\nThe requirement involves reconstructing a sequence of integers based on given concert durations in towns. The challenge is to ensure the sequence is valid and meets the conditions specified. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible.\nrequirement pool:\n- Efficiently handle multiple test cases.\n- Ensure output clarity and correctness.\n- Optimize for large input sizes.\n- Provide alternative solutions if multiple sequences are possible.\n- Implement error handling for invalid inputs.\nWe will use a mathematical approach to reconstruct the sequence of integers. The key observation is that the sum of the sequence a_i multiplied by the number of towns n should equal the sum of b_i. We will iterate over each test case, calculate the potential sequence, and verify if it satisfies the conditions. If it does, we output the sequence; otherwise, we declare it impossible. This approach ensures efficiency and clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of concerts increases as the singer moves from town to town, based on their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, calculate the sum of b_i.\n    - Check if this sum is divisible by n. If not, print \"NO\".\n    - If divisible, calculate potential sequence a_i by dividing each b_i by n.\n    - Verify if this sequence satisfies the conditions for concert durations.\n    - If valid, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The only singer has a repertoire of 1 minute, and since there's only one town, the concert duration matches exactly. Expected output is \"YES\" with sequence \"1\".\n\n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: The sum of b_i is 6, which is divisible by n = 3. However, no valid sequence satisfies the concert duration conditions. Expected output is \"NO\".\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: The sum of b_i is divisible by n = 6. A valid sequence exists that satisfies the conditions. Expected output is \"YES\" with sequence \"5 5 4 1 4 5\".\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if sum(b) % n != 0:\n            print(\"NO\")\n        else:\n            # Calculate potential sequence and verify conditions\n            # (other code)\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing singers' initial repertoire durations based on given concert durations in towns. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate results within constraints.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Ensure the solution works for n up to 4 \u22c5 10^4\n- Provide clear output format as specified\n- Handle edge cases where no valid sequence exists\n- Optimize for performance with large numbers\nWe will implement a function to reconstruct the sequence of singers' initial repertoire durations based on the given total concert durations in each town. The approach involves iterating over the towns and calculating the possible initial durations using the given constraints. If a valid sequence is found, it will be returned; otherwise, the function will return 'NO'. The solution will efficiently handle multiple test cases and large input sizes using basic arithmetic operations and modular arithmetic to manage the circular nature of the towns.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. Iterate over each town index `i`:\n   - Calculate the initial repertoire `a_i` for the singer in town `i` using the formula derived from the given concert durations.\n   - Ensure that the calculated `a_i` is a positive integer and satisfies all constraints.\n4. If a valid sequence `a` is found for all towns, print \"YES\" followed by the sequence. Otherwise, print \"NO\".\n\n# [edge case] \n    Test case 1: \n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Test case 2:\n    Input: 3\n           3\n           1 2 3\n    Output: NO\n    Explanation: It's impossible to find a valid sequence of initial repertoires that satisfy the given concert durations.\n\n    Test case 3:\n    Input: 4\n           6\n           81 75 75 93 93 87\n    Output: YES\n            5 5 4 1 4 5\n    Explanation: A valid sequence of initial repertoires is found that satisfies all concert durations.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be found.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoires\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)\n```\n\nThis code checks if each total concert duration `b[i]` is divisible by `n`, ensuring that each calculated initial repertoire `a[i]` is a positive integer. If not, it returns \"NO\".\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given concert durations in a circular town layout. The solution must efficiently handle multiple test cases and large input sizes, ensuring correct output format and handling edge cases where reconstruction is impossible.\nrequirement pool:\n- Efficiently handle large input sizes\n- Correctly reconstruct sequence or declare impossibility\n- Ensure output format is consistent with requirements\n- Handle multiple test cases efficiently\n- Provide clear error messages when reconstruction is impossible\nWe will use a mathematical approach to reconstruct the sequence of integers a from the given total concert durations b. The key observation is that the sum of the sequence a should be equal to the sum of b divided by n, as each singer contributes to each town's total concert duration. We will iterate over the possible starting points and check if a valid sequence can be constructed. If the sum of b is not divisible by n, it is impossible to construct such a sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire of a_i minutes'\n    Explanation: Each singer starts with a specific duration of songs they can perform, which increases as they visit more towns.\n\n    'total duration of concerts in the i-th town'\n    Explanation: This is the sum of all concerts performed by all singers in a particular town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration doubles for the next town.\n    'k + 2 \u22c5 a_i': The concert duration increases by a factor of (k + 2) for subsequent towns.\n    'n \u22c5 a_i': The concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the sum of b. If it is not divisible by n, print \"NO\" because it's impossible to distribute the durations evenly.\n2. If divisible, calculate the average contribution per singer as sum(b) / n.\n3. Iterate over each possible starting point and try to reconstruct the sequence a.\n4. For each starting point, check if the sequence a can be constructed such that each b_i matches the total concert duration for that town.\n5. If a valid sequence is found, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The simplest case where only one town and one singer exist, making it trivially possible to have a_1 = 1.\n\n    Test case with n = 3 and b = [3, 6, 9]\n    Explanation: Each town's total duration is a multiple of 3, making it possible to have a sequence like [1, 2, 3].\n\n    Test case with n = 4 and b = [10, 10, 10, 10]\n    Explanation: If all b_i are equal and n is even, it might be impossible to find a valid sequence if the sum is not divisible by n.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b is not divisible by n.\n    \n```python\ndef solve(test_cases):\n    results = []\n    for n, b in test_cases:\n        total_b = sum(b)\n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        avg_contribution = total_b // n\n        possible = True\n        a = [0] * n\n        \n        # Attempt to reconstruct sequence a\n        for i in range(n):\n            if b[i] < avg_contribution:\n                possible = False\n                break\n            a[i] = b[i] - avg_contribution\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n```\nThis code checks if the sum of b is divisible by n and attempts to reconstruct the sequence a. If it cannot be done, it outputs \"NO\".\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing the initial repertoire of singers based on the total concert durations in each town. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate calculations and clear output formatting.\nrequirement pool:\n- Efficiently handle multiple test cases.\n- Accurately calculate possible sequences of singers' repertoire.\n- Ensure the solution is scalable for large inputs.\n- Provide clear and consistent output formatting.\n- Optimize the algorithm for better performance.\nWe will use a mathematical approach to reconstruct the sequence of singers' repertoire. The key observation is that the sum of the sequence a_i multiplied by the number of towns should match the given total concert durations b_i. We will iterate over each test case, calculate the possible sequence, and check if it satisfies the conditions. If not, we will return 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire of a_i minutes'\n    Explanation: Each singer starts with a repertoire of a_i minutes, which increases as they visit more towns.\n\n    'concert duration'\n    Explanation: The duration of each concert is determined by the singer's repertoire, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': The concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': In the last town, the concert duration is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial repertoire of each singer.\n3. Calculate the sum of all `b_i` values.\n4. Check if the sum is divisible by `n`. If not, print \"NO\" and continue to the next test case.\n5. If divisible, calculate each `a_i` as `b_i / n`.\n6. Verify that the calculated `a` values satisfy the conditions for each town's total concert duration.\n7. If valid, print \"YES\" followed by the sequence `a`. Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Expected output: YES 1\n    Explanation: With only one town and one singer, the initial repertoire must be 1 to match the total concert duration.\n\n    Test case with n = 3 and b = [1, 2, 3]:\n    Expected output: NO\n    Explanation: The sum of b is not divisible by n, making it impossible to find a valid sequence.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]:\n    Expected output: YES 5 5 4 1 4 5\n    Explanation: The sequence satisfies the conditions for each town's total concert duration.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b is not divisible by n.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        total_b = sum(b)\n        \n        if total_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        a_sum = total_b // n\n        a = [0] * n\n        \n        possible = True\n        for i in range(n):\n            if (b[i] - a_sum) % n != 0:\n                possible = False\n                break\n            a[i] = (b[i] - a_sum) // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n\n```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle large inputs and multiple test cases, ensuring accurate reconstruction or correctly identifying when it's impossible.\nrequirement pool:\n- Efficient handling of large inputs\n- Accurate reconstruction of sequence a\n- Clear output format\n- Handling edge cases\n- Optimized algorithm for performance\nWe will use a mathematical approach to reconstruct the sequence a from the given sequence b. The key observation is that the sum of the durations of concerts in each town is a linear combination of the initial durations a_i. We will iterate over possible values of a_1 and check if a consistent sequence can be formed. If not, we will declare it impossible. This approach ensures that we efficiently handle large inputs by leveraging mathematical properties rather than brute force.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circular manner, meaning after the last town, the sequence wraps around to the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of concerts increases as the singer moves from town to town, based on their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire of the singer.\n    Implementation: Multiply the initial repertoire by 2 for the next town's concert duration.\n\n    '(k + 2) \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    Implementation: Multiply the initial repertoire by (k + 2) for each subsequent town.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Iterate over possible values of a_1.\n    - For each a_1, calculate the possible sequence a using the given sequence b.\n    - Check if the calculated sequence a is consistent with all b values.\n    - If a consistent sequence is found, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town, the sequence a is simply [1] if b_1 matches the concert duration.\n    \n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: It's impossible to form a consistent sequence a because the concert durations do not match any linear combination of initial repertoires.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A consistent sequence can be formed as [5, 5, 4, 1, 4, 5] based on the given b values.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or when no consistent sequence can be formed.\n        if n == 1:\n            if b[0] % n == 0:\n                print(\"YES\")\n                print(b[0] // n)\n            else:\n                print(\"NO\")\n        else:\n            # Implement logic to check consistency of sequence a with b values\n            # If no consistent sequence found, print \"NO\"\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must handle large inputs efficiently and ensure correctness across multiple test cases. The output format must be strictly followed.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence\n- Ensure the solution handles edge cases and large inputs\n- Optimize the solution for performance\n- Validate the solution with multiple test cases\n- Provide clear documentation and comments in the code\nWe will use a mathematical approach to reconstruct the sequence of integers. The key observation is that the sum of the sequence a_i multiplied by the number of cities should match the given total duration b_i for each city. We will iterate over each test case and attempt to find a valid sequence by checking divisibility and consistency of the sums. If a valid sequence is found, we will output it; otherwise, we will output 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of concerts increases as the singer moves from town to town, starting from their own town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': This indicates that the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations for each town.\n    - Initialize an array to store the initial repertoire durations for each singer.\n    - For each town, calculate the possible initial repertoire duration by dividing the total concert duration by n (number of towns).\n    - Check if this calculated duration is consistent across all towns.\n    - If a consistent sequence is found, print 'YES' followed by the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Test case with only one town: \n    Input: 1 1\n    Expected output: YES 1\n    Explanation: With only one town, the initial repertoire is equal to the total concert duration.\n\n    Test case with all concert durations being equal:\n    Input: 3 3 3 3\n    Expected output: YES 1 1 1\n    Explanation: Each singer can have an initial repertoire of 1, resulting in equal concert durations.\n\n    Test case with maximum possible values:\n    Input: 4 10^9 10^9 10^9 10^9\n    Expected output: NO\n    Explanation: It's impossible to distribute such large values consistently across towns with given constraints.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or all b_i are equal.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif all(x == b[0] for x in b):\n            print(\"YES\")\n            print(\"1 \" * n)\n        else:\n            # Original logic to find sequence or print NO\n\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing singers' initial repertoire durations based on given concert durations in towns. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Ensure the solution works for n up to 4 \u22c5 10^4\n- Provide clear output format as specified\n- Handle edge cases where reconstruction is impossible\n- Optimize for large input sizes\nWe will iterate over each test case and attempt to reconstruct the sequence of initial repertoire durations for each singer. The key challenge is to determine if a valid sequence exists that satisfies the given total concert durations in each town. We will use a mathematical approach to derive the initial durations from the given total durations, ensuring that the solution is efficient enough to handle the upper limits of input size. We will use basic arithmetic operations and modular arithmetic to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The duration of concerts in each town, which increases as the singer moves from town to town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations.\n    - Initialize an array to store the initial repertoire durations.\n    - For each town, calculate the possible initial repertoire duration using modular arithmetic and check if it satisfies the total concert duration.\n    - If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Output: YES\n    Explanation: With only one town and a total concert duration of 1, the initial repertoire must be 1.\n\n    Test case with n = 3 and b_1 = b_2 = b_3 = 1:\n    Output: NO\n    Explanation: It's impossible to have a valid sequence where each town has a total concert duration of 1 with three towns.\n\n    Test case with n = 2 and b_1 = 4, b_2 = 4:\n    Output: YES\n    Explanation: The initial repertoire can be 2 for both singers, satisfying the total concert durations.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or all b_i are equal.\n        if n == 1:\n            if b[0] == 1:\n                print(\"YES\")\n                print(1)\n            else:\n                print(\"NO\")\n        elif all(x == b[0] for x in b):\n            print(\"NO\")\n        else:\n            # Original logic for calculating initial repertoire durations\n            ...\n", "requirement analysis:\nThe requirement is to reconstruct a sequence of positive integers based on given concert durations in towns. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible. The constraints on input size and values necessitate an optimized approach to ensure performance.\nrequirement pool:\n- Efficiently handle multiple test cases.\n- Provide clear output for each test case.\n- Optimize for large input sizes and values.\n- Ensure robustness against edge cases.\n- Maintain simplicity in implementation.\nWe will implement a function to reconstruct the sequence of positive integers based on the given concert durations in towns. The approach involves iterating over each test case, checking if a valid sequence can be constructed by ensuring that the sum of the sequence matches the given concert durations. We will use a simple mathematical approach to derive the sequence from the given constraints. The solution will be efficient to handle large input sizes and will provide clear output for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular layout'\n    Explanation: The towns are arranged in a circular manner, meaning after the last town, the sequence wraps back to the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration'\n    Explanation: The total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': This indicates that the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the concert durations.\n    - Check if a valid sequence can be constructed by ensuring that the sum of the sequence matches the given concert durations.\n    - Use mathematical derivation to reconstruct the sequence based on constraints.\n    - If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and one concert duration, the sequence is trivially valid with a_1 = 1.\n\n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: It's impossible to construct a valid sequence because the concert durations do not match any possible sequence derived from initial repertoires.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence can be derived as shown in the example output.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be constructed.\n        if sum(b) % n != 0:\n            print(\"NO\")\n        else:\n            # Implement logic to derive sequence a from b\n            # Check if derived sequence matches constraints\n            # Print \"YES\" and sequence or \"NO\" based on validity\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 239, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "rephrase_one", "parent_index": 44}
