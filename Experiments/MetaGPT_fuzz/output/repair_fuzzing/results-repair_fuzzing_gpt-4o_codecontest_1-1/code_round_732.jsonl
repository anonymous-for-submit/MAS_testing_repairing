{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4. He also wrote out 4 + 3 = 7 and 1 + 4 + 3 = 8 and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nimport typing\n\ndef restore_original_array(b: typing.List[int]) -> typing.Tuple[int, int, int]:\n    \"\"\"Restores the original array of 3 positive integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A tuple of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is one of the original numbers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original numbers\n    sum_all = b[-1]\n    # Deduce the other two elements using the known sums\n    a2 = b[1] - a1\n    a3 = sum_all - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Restore the original array a from the given array b for each test case.\n    \n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n    \n    Returns:\n        List[List[int]]: List of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        \n        # Deduce the other two elements\n        a2 = sum_two_largest - a1\n        a3 = sum_all - sum_two_largest\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    sum_all = b[-1]\n    # The second smallest element in b is the sum of a1 and another original integer\n    a2 = b[1]\n    # Calculate the third integer using the largest element and the identified integers a1 and a2\n    a3 = sum_all - a1 - a2\n    # Return the three integers as the restored array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in b correspond to the individual elements of the original array a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[2]\n    \n    # Verify by checking if a1 + a2 + a3 equals the largest element in b.\n    # The largest number in b is the sum of all three elements of a.\n    if a1 + a2 + a3 == b[-1]:\n        return [a1, a2, a3]\n    else:\n        # If the sum does not match, we need to adjust the elements.\n        # Since b is sorted, the correct elements should be a1, a2, and b[3] (which is a1 + a2).\n        return [a1, a2, b[3] - a1 - a2]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three positive integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three elements in 'b' are the individual elements of the original array 'a'.\n    # The largest element in 'b' is the sum of all three elements of 'a'.\n    # Therefore, the original array 'a' can be deduced as the first three elements of 'b'.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # Since b[6] is the sum of all three elements a1, a2, and a3.\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a.\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted array of subsequence sums.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # Deduce the original array a from the sorted array b\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - (a_1 + a_2)\n        \n        restored_arrays.append([a_1, a_2, a_3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array.\n    a1, a2 = b[0], b[1]\n    # The largest number in b is the sum of all three elements.\n    sum_all = b[6]\n    \n    # Calculate the third element\n    a3 = sum_all - a1 - a2\n    \n    # Return the original array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and prompt output.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input values and multiple test cases.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness of the solution.\n- Document the solution approach for better understanding and maintenance.\nWe will use a simple mathematical approach to restore the original array from the given sorted list of sums. The key observation is that the smallest element in the sorted list is one of the original numbers, and the largest element is the sum of all three original numbers. By using these observations, we can efficiently deduce the original array without complex computations. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'largest': The largest element in array b is the sum of all three elements of array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the original elements in array a.\n2. Identify the largest element in array b, which is the sum of all three elements in array a.\n3. Use the smallest and largest elements to deduce the other two elements by considering the sums that include two elements of array a.\n4. Return the three deduced elements as array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so each element in a is 1.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each element in a is 1000000000.\n    \n    1 2 3 3 4 5 6 = 1 2 3\n    Explanation: The smallest element is 1, and the largest is 6, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the others will handle these cases correctly.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate the input to ensure it meets the problem's constraints.\n- Format the output correctly for each test case.\n- Optimize the solution for performance improvements.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of the array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means that each element in b is the sum of a unique combination of elements from a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in b represents the sum of all elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to the smallest element in a.\n    2. Identify the largest element in b, which corresponds to the sum of all elements in a.\n    3. Identify the second largest element in b, which corresponds to the sum of the two largest elements in a.\n    4. Deduce the individual elements of a using these observations.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, the largest is 7 (sum of all), and second largest is 6 (sum of two largest).\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the array a from b for all given test cases.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple possible solutions if applicable\nWe will implement a function that takes the sorted array of sums of subsequences and deduces the original array of three integers. The approach is based on the observation that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array. We will use basic Python operations without any complex libraries, ensuring the solution is both efficient and simple.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any combination of the elements of the array, including individual elements and combinations of two or all three elements. The task involves calculating the sum of each possible subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The resulting array of sums is sorted from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the original array has exactly three elements, each greater than zero.\n\n    '7 integers': Refers to the number of elements in the sorted array of sums, which corresponds to all possible non-empty subsequences of a three-element array.\n\n# [degree adverb]\n    'non-decreasing': Indicates that the array is sorted such that each element is greater than or equal to the previous one.\n\n# [code logic]\n1. Identify the smallest element in the sorted array `b`, which corresponds to one of the original integers `a1`.\n2. Identify the largest element in `b`, which is the sum of all three original integers `a1 + a2 + a3`.\n3. Use the second smallest element in `b` to identify another original integer `a2`.\n4. Calculate the third integer `a3` using the largest element and the identified integers `a1` and `a2`.\n5. Return the three integers as the restored array.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest element is 1, which is one of the original integers. The largest element is 1000000000, which is the sum of all three integers. Using these, we can deduce the original array.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are either 300000000 or sums thereof, indicating that all original integers are equal.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, and using the largest element (5), we can deduce the original integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted subsequences and their sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the algorithm for speed and efficiency.\n- Provide a clear and concise output format.\n- Include error handling for edge cases.\nWe will use a simple mathematical approach to restore the original array from the given sorted array of subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently reconstruct the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb]\n    'sorted in non-decreasing order'\n    Explanation: This implies that the array b is arranged such that each subsequent element is greater than or equal to the previous one, ensuring a non-decreasing sequence.\n\n# [code logic]\n    1. Identify the smallest three numbers in the sorted array b, which correspond to the individual elements of the original array a.\n    2. The largest number in b is the sum of all three elements of a.\n    3. Use these observations to reconstruct the original array a:\n       - Let a1 be the smallest element in b.\n       - Let a2 be the second smallest element in b.\n       - Let a3 be the third smallest element in b.\n       - Verify by checking if a1 + a2 + a3 equals the largest element in b.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sum matches the largest element in b.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The sum of these three numbers (1+2+4) matches the largest element in b.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical large numbers, and their sum matches the largest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and verifying their sum against the largest number in b will suffice.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Validate the input to ensure it meets the constraints.\n- Format the output correctly for each test case.\n- Optimize the algorithm for large numbers.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to directly deduce the original array from the given sorted array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array of 3 positive integers'\n    Explanation: The original array 'a' consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For an array of three elements, there are 7 non-empty subsequences.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is greater than or equal to the previous one.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. The smallest element in 'b' is one of the elements in 'a'.\n2. The second smallest element in 'b' is another element in 'a'.\n3. The third smallest element in 'b' is the last element in 'a'.\n4. The largest element in 'b' is the sum of all three elements of 'a'.\n5. Return the three smallest elements as the original array 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical numbers.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7 which is the sum of all three numbers.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of selecting the smallest three elements and verifying with the largest sum inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for performance and clarity\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains all possible sums of the non-empty subsequences of a, we can deduce that the smallest element in b is one of the elements of a, the second smallest is another, and the largest element in b is the sum of all three elements of a. By using these properties, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means that we need to consider all possible combinations of the elements in array a, excluding the empty set, and calculate their sums.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in array b represents the sum of all three elements in array a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the elements in a.\n    2. Identify the second smallest element in b, which corresponds to another element in a.\n    3. Identify the largest element in b, which is the sum of all three elements in a.\n    4. Use these properties to deduce the values of a_1, a_2, and a_3.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each element in a is 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, second smallest is 2, and largest is 7 (sum of all three elements).\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers; each element in a is 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for reconstructing array a from b inherently handles these cases by using the properties of sorted array b.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to restore the array from subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize for large integer values up to 10^9\n- Validate the output format for each test case\n- Provide documentation and examples for clarity\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted list are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array, excluding the empty set. For an array of three elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum for each possible combination of elements from the array a. In code, this involves iterating through combinations and summing their elements.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in the sorted array b is the sum of all three elements of the original array a.\n\n# [code logic]\n    1. For each test case, read the sorted array b.\n    2. Identify the smallest three numbers in b as the individual elements of a.\n    3. Identify the largest number in b as the sum of all three elements of a.\n    4. Use these observations to deduce the original array a.\n    5. Print the deduced array a for each test case.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = [1, 1, 1]\n    Explanation: All elements are identical, and their sum is the largest number.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = [1, 2, 4]\n    Explanation: The smallest three numbers are individual elements; the largest is their sum.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = [1000000000, 1000000000, 1000000000]\n    Explanation: All elements are identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying smallest three numbers and largest number will suffice.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure the solution works with large integer values\n- Provide a clear and concise output format\n- Optimize for speed and simplicity\nWe will use a simple mathematical approach to restore the original array from the given sorted array of subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently without complex computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in the sorted array b is the sum of all elements in the original array a.\n\n# [code logic]\n    1. Identify the smallest three numbers in the sorted array b, which correspond to the individual elements of the original array a.\n    2. The largest number in b is the sum of all three elements of a.\n    3. Use these observations to deduce the original array a:\n       - a_1 = b[0]\n       - a_2 = b[1]\n       - a_3 = b[6] - (a_1 + a_2)\n\n# [edge case]\n    Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical numbers.\n\n    Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n\n    Case 3: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using the smallest three numbers and the largest number in b to deduce a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Implement the algorithm to restore the original array from the subsequence sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide a clear and concise output format for each test case.\n- Optimize the solution for speed and memory usage.\n- Include error handling for unexpected input formats.\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b are the original numbers a1, a2, and a3. The largest number in b is the sum of a1, a2, and a3. By using these properties, we can efficiently determine the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of every possible combination of elements from the array a, excluding the empty set. In code, this means calculating sums for all combinations of 1, 2, and 3 elements from a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b is the sum of all elements in array a. This helps us identify the total sum of the original array.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to individual elements of a.\n    3. Identify the largest number in b, which is the sum of all three elements of a.\n    4. Use these properties to reconstruct the original array a.\n    5. Print the reconstructed array a for each test case.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are 1, and the largest number is 3 (sum of three ones).\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Similar to the previous case but with larger numbers. The smallest three numbers are identical, and the largest number is their sum.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are individual elements of a. The largest number is the sum of these three numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number in b will suffice to reconstruct array a correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct output for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the subsequence sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for performance with large inputs.\n- Provide clear and concise output formatting.\n- Include error handling for unexpected input scenarios.\nWe will implement a function that takes the sorted array of sums of subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the array elements.\n\n# [phrase showing quantity relationship]\n    'sum': This indicates the addition of elements in a subsequence to form a new value. In code, this is implemented using the addition operator (+).\n\n# [degree adverb]\n    'non-decreasing': This means the array is sorted such that each subsequent element is greater than or equal to the previous one. In code, this can be checked using comparison operators.\n\n# [code logic]\n    1. For each test case, identify the smallest three numbers in the sorted array `b`. These represent the individual elements of the original array `a`.\n    2. The largest number in `b` is the sum of all three elements of `a`.\n    3. Use these observations to deduce the original array `a`:\n       - Let `a1`, `a2`, and `a3` be the smallest three numbers in `b`.\n       - The largest number in `b` should be equal to `a1 + a2 + a3`.\n    4. Return `a1`, `a2`, and `a3` for each test case.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sum is correctly represented as the largest number.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Large identical numbers with their sum correctly represented as the largest number.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are individual elements, and their sum is correctly represented as the largest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using the largest number as their sum will handle these cases correctly.\n"], "scores": [], "pass_results": [true, true, true, false, false, true, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 732, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 43}
