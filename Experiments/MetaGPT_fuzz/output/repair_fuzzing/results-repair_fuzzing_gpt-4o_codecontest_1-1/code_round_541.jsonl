{"name": "1607_E. Robot on the Board 1", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "tags": ["implementation"], "difficulty": 11, "id": 1607, "sample_io": [{"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}], "test_list": [{"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n1 1\n3 4\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n2 1\n4 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRUDLLLDU\n", "output": ["1 2\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n2 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n2 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 1\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUUURDDLLLUR\n", "output": ["1 1\n1 1\n1 1\n4 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nLRDRUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 2\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n17 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 1\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 1\n3 1\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUURRDLLLDU\n", "output": ["1 1\n1 2\n2 1\n4 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 4\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nUULRRD\n6 1\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 1\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n3 4\nDUULRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n2 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 2\nUULRRD\n6 2\nUULULDRRDULL\n", "output": ["1 1\n1 2\n3 2\n4 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n13 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n9 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n22 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n8 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n1 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n4 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRDRLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n4 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n6 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n4 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n10 3\nRRDLUU\n6 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n3 2\nLUUDRLDLRLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 4\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 4\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nRRDLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n8 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUT\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n5 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n3 3\nRRDUUL\n4 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n6 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n3 3\nUULDRR\n11 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n7 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n3 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nDRRLUU\n6 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n12 3\nRRDLUU\n8 2\nUULLLDDRRUUL\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n2 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n5 2\nL\n3 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n10 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nRRDLUU\n4 3\nLUULRRDLDLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n2 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nRRDUUL\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n6 3\nRRDLUU\n9 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n2 3\nRRDUUL\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n6 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n4 3\nRRDLUU\n9 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n3 3\nRDRLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nUULDRR\n4 2\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n6 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 3\nRRDLUU\n4 4\nLUUDRRLLLDUU\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n6 3\nRRDLUU\n4 3\nUULLLDURDURL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 1\nL\n1 3\nRRDLUU\n8 3\nLUURRDDLLLUU\n", "output": ["1 2\n1 1\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n2 2\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n12 2\nL\n5 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 2\nL\n3 2\nL\n3 3\nRRDLUU\n8 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n2 3\nDRRLUU\n6 3\nLUUDRRDLLLVU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n4 3\nRRDLUU\n5 3\nLUURRDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nDRRLUU\n6 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n12 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nUULDRR\n3 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n11 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRDLUU\n5 3\nUUULLDRRDULL\n", "output": ["1 1\n1 2\n2 1\n4 3\n"]}, {"input": "4\n1 1\nL\n10 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 2\nUULDRR\n10 3\nLUULRRDDLLUU\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n4 3\nRRULDU\n23 3\nLLUDRRDLLUUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n1 3\nRRDLUU\n3 3\nUULLLDRRDTUL\n", "output": ["1 1\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n13 2\nL\n2 3\nRRDLUU\n8 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n2 2\nL\n7 2\nL\n3 3\nUULDRR\n6 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n7 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n6 2\nL\n3 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n9 3\nRRDLUU\n4 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n15 3\nLUURRDDLLLUU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n3 3\nRRDLUU\n8 3\nLRUURDDLLLVU\n", "output": ["1 1\n1 1\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n6 3\nRRDLUU\n4 4\nLUURRDDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDLUU\n3 3\nLUUDRUDLLLUR\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n4 3\nRRDLUU\n6 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nUULDRR\n5 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n2 2\nL\n3 3\nRRDLUU\n5 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n3 3\nRRDUUL\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n2 1\n3 2\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n5 3\nRRDLUU\n4 4\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n11 2\nL\n2 3\nRRDLUU\n5 3\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n1 1\n3 2\n"]}, {"input": "4\n1 1\nL\n1 1\nL\n1 3\nRRDKUU\n8 3\nLUURRDDLLLUV\n", "output": ["1 1\n1 1\n1 1\n3 2\n"]}, {"input": "4\n1 2\nL\n7 2\nL\n2 2\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n1 1\n3 3\n"]}, {"input": "4\n1 1\nL\n2 2\nL\n3 3\nUULDRR\n10 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n3 2\n3 3\n"]}, {"input": "4\n1 1\nL\n3 2\nL\n5 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 2\nL\n4 2\nL\n4 3\nUULDRR\n4 3\nLUUDRRDLLLUU\n", "output": ["1 2\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n3 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}, {"input": "4\n1 1\nL\n7 2\nL\n3 3\nRRDLUU\n12 1\nUULLLDRRDUUL\n", "output": ["1 1\n1 2\n2 1\n3 1\n"]}, {"input": "4\n1 1\nL\n4 2\nL\n3 3\nUULRDR\n6 2\nLUUDRRDLLLUU\n", "output": ["1 1\n1 2\n3 2\n3 2\n"]}, {"input": "4\n1 2\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nUULLLDRRDUUL\n", "output": ["1 2\n1 2\n2 1\n3 3\n"]}], "task_id": "codecontest/102", "prompt": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one. It does so strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "repair_prompt": ["The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one. It does so strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U'. Each symbol triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. The robot executes the commands starting from the first one. It does so strictly in the order in which they are listed in s. If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is not considered successfully executed.\n\nThe robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns) where the rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side.\n\nThe sequence of commands s executed by the robot is given. Each command is denoted by one of the symbols 'L', 'R', 'D' or 'U', and triggers the movement to left, right, down or up, respectively.\n\nThe robot can start its movement in any cell as it executes the commands starting from the first one strictly in the order in which they are listed in s, and if the robot moves beyond the edge of the board, it falls and breaks; a command that causes the robot to break is not considered successfully executed. The robot's task is to execute as many commands as possible without falling off the board. For example, on board 3 \u00d7 3, if the robot starts a sequence of actions s=\"RRDLUU\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell (2, 1) (second row, first column) then all commands will be executed successfully and the robot will stop at the cell (1, 2) (first row, second column).\n\n<image> The robot starts from cell (2, 1) (second row, first column). It moves right, right, down, left, up, and up. In this case it ends in the cell (1, 2) (first row, second column).\n\nDetermine the cell from which the robot should start its movement in order to execute as many commands as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2"], "completions": ["from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting cell for the robot to execute maximum commands without falling off the board.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the dimensions of the board and the command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting cells for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, commands in test_cases:\n        # Initialize variables to track the best starting position and maximum commands executed\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions on the board\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement according to the command sequence\n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if each move keeps the robot within the board boundaries\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if a new maximum is found\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        results.append(best_starting_position)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Call the function and print results\n    results = find_optimal_starting_cell(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef find_optimal_starting_position(t: int, test_cases: list) -> list:\n    \"\"\"Find the optimal starting position for the robot to execute maximum commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples containing board dimensions and command sequence.\n\n    Returns:\n        list: List of tuples with optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions on the board\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement according to the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        results.append(best_starting_position)\n\n    return results\n\n# Interface using input() and print()\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    results = find_optimal_starting_position(t, test_cases)\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position and the maximum number of commands executed\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions on the board\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement according to the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if the current position allows more commands to be executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        # Store the best starting position for the current test case\n        results.append(best_starting_position)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = input().strip()\n    test_cases.append((n, m, s))\n\n# Call the function\nresults = find_optimal_starting_position(t, test_cases)\n\n# Output interface\nfor result in results:\n    print(result[0], result[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands = 0\n        best_start = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still on the board\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n\n        results.append(best_start)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    results = find_optimal_start(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of rows in the board.\n            - m: Number of columns in the board.\n            - s: Sequence of commands ('L', 'R', 'D', 'U').\n\n    Returns:\n        A list of tuples, each containing the optimal starting position (row, column) for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands_executed = 0\n        optimal_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the optimal position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    optimal_position = (start_row, start_col)\n\n        results.append(optimal_position)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands = 0\n        best_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still within the board boundaries\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best position if more commands are executed\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_position = (start_row, start_col)\n\n        results.append(best_position)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Finds the optimal starting cell for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, commands in test_cases:\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement\n                for command in commands:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot is still on the board\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if a new maximum is found\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        results.append(best_starting_position)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Call the function and print the results\n    results = find_optimal_starting_cell(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting cell for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the board dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting positions for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        # Initialize variables to track the best starting position and the maximum number of commands executed\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n\n        # Iterate over all possible starting positions on the board\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the robot's movement according to the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check boundaries to ensure the robot does not fall off the board\n                    if 1 <= current_row <= n and 1 <= current_col <= m:\n                        commands_executed += 1\n                    else:\n                        break\n\n                # Update the best starting position if a new maximum is found\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n\n        results.append(best_starting_position)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    results = find_optimal_starting_cell(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_starting_position(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    results = []\n    \n    # Define movement deltas for each command\n    move_deltas = {\n        'L': (0, -1),\n        'R': (0, 1),\n        'U': (-1, 0),\n        'D': (1, 0)\n    }\n    \n    for n, m, s in test_cases:\n        max_commands_executed = 0\n        best_starting_position = (1, 1)\n        \n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n                \n                # Simulate the robot's movement\n                for command in s:\n                    delta_row, delta_col = move_deltas[command]\n                    new_row = current_row + delta_row\n                    new_col = current_col + delta_col\n                    \n                    # Check if the new position is within the grid boundaries\n                    if 1 <= new_row <= n and 1 <= new_col <= m:\n                        current_row, current_col = new_row, new_col\n                        commands_executed += 1\n                    else:\n                        break\n                \n                # Update the best starting position if more commands are executed\n                if commands_executed > max_commands_executed:\n                    max_commands_executed = commands_executed\n                    best_starting_position = (start_row, start_col)\n        \n        results.append(best_starting_position)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n    \n    # Output interface\n    results = find_optimal_starting_position(t, test_cases)\n    for result in results:\n        print(result[0], result[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_starting_cell(t: int, test_cases: List[Tuple[int, int, str]]) -> List[Tuple[int, int]]:\n    \"\"\"Find the optimal starting cell for the robot to execute the maximum number of commands.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, str]]): List of test cases, each containing the grid dimensions and command sequence.\n\n    Returns:\n        List[Tuple[int, int]]: List of optimal starting cells for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, s in test_cases:\n        max_commands = 0\n        best_start = (1, 1)\n\n        # Iterate over all possible starting positions\n        for start_row in range(1, n + 1):\n            for start_col in range(1, m + 1):\n                current_row, current_col = start_row, start_col\n                commands_executed = 0\n\n                # Simulate the execution of the command sequence\n                for command in s:\n                    if command == 'L':\n                        current_col -= 1\n                    elif command == 'R':\n                        current_col += 1\n                    elif command == 'U':\n                        current_row -= 1\n                    elif command == 'D':\n                        current_row += 1\n\n                    # Check if the robot falls off the board\n                    if current_row < 1 or current_row > n or current_col < 1 or current_col > m:\n                        break\n\n                    commands_executed += 1\n\n                # Update the best starting position if a new maximum is found\n                if commands_executed > max_commands:\n                    max_commands = commands_executed\n                    best_start = (start_row, start_col)\n\n        results.append(best_start)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        s = input().strip()\n        test_cases.append((n, m, s))\n\n    # Call the function and print the results\n    results = find_optimal_starting_cell(t, test_cases)\n    for r, c in results:\n        print(r, c)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires determining the optimal starting cell for a robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring that the robot's path is calculated accurately for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for the robot.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide clear output for each test case.\n- Optimize the algorithm for performance.\n- Consider edge cases where the robot starts at the boundary.\nWe will implement a function to determine the optimal starting cell for the robot on a grid to execute the maximum number of commands without falling off. The function will simulate the robot's movement from each possible starting position and track the number of successful commands executed. We will use a greedy approach to find the optimal starting position by iterating over possible starting points and simulating the command sequence. Given the constraints, we will ensure the solution is efficient by avoiding unnecessary recalculations and using simple data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure where the robot can move. Each cell in the grid is a potential starting point for the robot.\n\n    'sequence of commands'\n    Explanation: This is the list of movements ('L', 'R', 'D', 'U') that the robot will execute, determining its path on the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without the robot falling off the board.\n    Implementation: Track the number of successful commands from each starting position and choose the one with the maximum count.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the dimensions of the board and the sequence of commands.\n    2. Initialize variables to track the best starting position and maximum commands executed.\n    3. Iterate over all possible starting positions on the board.\n    4. For each starting position, simulate the robot's movement according to the command sequence.\n    5. Check if each move keeps the robot within the board boundaries.\n    6. Count the number of successful moves for each starting position.\n    7. Update the best starting position if a new maximum is found.\n    8. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with smallest grid and single command:\n    1 1\n    L\n    Expected output: 1 1\n    Explanation: The robot cannot move anywhere without falling off, so it starts and ends at (1, 1).\n\n    Test case with a grid where all commands lead to falling off:\n    2 2\n    LLRR\n    Expected output: Any valid starting position, e.g., 1 1\n    Explanation: No matter where the robot starts, it will fall off after executing any command.\n\n    Test case with a large grid and no movement:\n    1000000 1000000\n    ''\n    Expected output: Any valid starting position, e.g., 1 1\n    Explanation: With no commands, any starting position is valid.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements and checking boundaries inherently handles these scenarios.\n", "requirement analysis:\nThe task requires determining the optimal starting position for a robot on a board to execute the maximum number of commands without falling off. The solution must handle large board sizes and command sequences efficiently, ensuring that the output is clear and concise for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting position for the robot.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance.\n- Consider edge cases where the board size is minimal.\nWe will implement a function that simulates the robot's movement on the board for each possible starting position. The function will track the number of commands executed before the robot falls off the board. We will use a greedy approach to find the starting position that allows the maximum number of commands to be executed. Given the constraints, we will optimize the solution to handle large inputs efficiently by avoiding unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions: left ('L'), right ('R'), down ('D'), and up ('U') on a checkered board. The goal is to execute as many commands as possible without the robot falling off the board.\n\n    'starting position'\n    Explanation: The initial cell from which the robot begins executing the sequence of commands. The task is to determine the optimal starting position to maximize the number of commands executed.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without the robot falling off the board. In code, this can be implemented by simulating the robot's movement and counting the number of successful moves.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the dimensions of the board (n, m) and the sequence of commands (s).\n2. Initialize variables to track the best starting position and the maximum number of commands executed.\n3. Iterate over all possible starting positions on the board.\n4. For each starting position, simulate the robot's movement according to the command sequence.\n5. Track the robot's position and count how many commands are executed before it falls off the board.\n6. If a starting position allows more commands to be executed than previously recorded, update the best starting position.\n7. After checking all starting positions, record the best starting position for each test case.\n\n# [edge case] \n    1 1\n    L\n    = 1 1\n    Explanation: On a 1x1 board, any move will cause the robot to fall off immediately. The only possible starting position is (1, 1).\n\n    2 2\n    RR\n    = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows executing one 'R' command before falling off.\n\n    3 3\n    UUU\n    = 3 1\n    Explanation: Starting at (3, 1) allows executing all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from each possible starting position inherently handles these cases by checking boundary conditions during simulation.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting position for a robot on a checkered board to execute a sequence of commands without falling off. The solution must handle large board sizes and command sequences efficiently, ensuring maximum command execution.\nrequirement pool:\n- Determine optimal starting position for maximum command execution\n- Handle large board sizes efficiently\n- Optimize algorithm for quick computation\n- Ensure solution passes all test cases\n- Provide clear output format\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and simulate the execution of the command sequence from each position. It will track the number of successful commands executed before the robot falls off the board. The starting position that allows the maximum number of commands to be executed will be selected. Given the constraints, the solution will be optimized to handle large board sizes and command sequences efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    The robot can move in four directions: left (L), right (R), down (D), and up (U) on a checkered board.\n\n    'starting position'\n    The robot can start from any cell on the board, and the goal is to find the starting position that allows the maximum number of commands to be executed without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means we need to maximize the number of commands executed without the robot falling off the board.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the dimensions of the board (n, m) and the sequence of commands (s).\n2. Initialize variables to track the best starting position and the maximum number of commands executed.\n3. Iterate over all possible starting positions on the board.\n4. For each starting position, simulate the robot's movement according to the command sequence.\n5. Track the number of commands executed before the robot falls off the board.\n6. Update the best starting position if the current position allows more commands to be executed.\n7. After checking all positions, store the best starting position for each test case.\n8. Output the best starting positions for all test cases.\n\n# [edge case] \n    1 1\n    L = 1 1\n    Explanation: The board is 1x1, so any move will cause the robot to fall. The only starting position is (1, 1).\n\n    2 2\n    RR = 1 1\n    Explanation: On a 2x2 board, starting at (1, 1) allows executing one 'R' before falling off.\n\n    3 3\n    UUU = 3 1\n    Explanation: Starting at (3, 1) allows executing all 'U' commands without falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from all possible starting positions inherently handles these cases.\n", "requirement analysis:\nThe task requires determining the optimal starting position for a robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring that the robot can execute as many commands as possible from the starting position.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for maximum command execution.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance on large grids.\n- Consider edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and execute the command sequence to determine the maximum number of commands that can be executed without the robot falling off the board. We will use efficient iteration and boundary checks to ensure the solution handles large inputs efficiently. The Python standard library will be sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string of characters ('L', 'R', 'D', 'U') that dictate the robot's movement direction.\n\n    'execute as many commands as possible'\n    Explanation: The goal is to maximize the number of commands executed without the robot falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without breaking. In code, this involves iterating through possible starting positions and counting successful moves.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Parse the number of test cases.\n    2. For each test case, read the dimensions of the board and the sequence of commands.\n    3. Iterate over all possible starting positions on the board.\n    4. Simulate the robot's movement from each starting position, counting the number of successful commands.\n    5. Track the starting position that allows for the maximum number of commands to be executed.\n    6. Output the coordinates of this starting position for each test case.\n\n# [edge case]\n    Test case with a 1x1 board and any command sequence = (1, 1)\n    Explanation: The robot cannot move without falling off, so it must start at (1, 1) and execute zero commands.\n\n    Test case with a command sequence longer than the board dimensions = (any valid starting position)\n    Explanation: The robot will fall off after executing some commands, so any valid starting position that maximizes command execution is acceptable.\n\n    Test case with all commands leading off the board immediately = (any valid starting position)\n    Explanation: If all commands lead off the board immediately, any starting position will result in zero successful commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all starting positions and simulating movements inherently handles these scenarios.\n", "requirement analysis:\nThe task requires determining the optimal starting position for a robot on a grid to execute a sequence of commands without falling off. The solution must efficiently handle large grids and command sequences, ensuring the robot executes the maximum number of commands possible. The output must be formatted correctly for each test case.\nrequirement pool:\n- Develop an efficient algorithm to find the optimal starting cell.\n- Ensure the solution handles the maximum constraints of input size.\n- Optimize the algorithm for speed and simplicity.\n- Provide clear documentation and comments in the code.\n- Consider edge cases and validate the solution against them.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and execute the sequence of commands, keeping track of the number of successfully executed commands. The optimal starting position will be the one that allows the maximum number of commands to be executed without the robot falling off the board. Given the constraints, we will ensure the solution is efficient by avoiding unnecessary computations and using simple data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string of characters ('L', 'R', 'D', 'U') that dictate the robot's movement directions.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position that allows the longest sequence of uninterrupted moves.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible starting positions on the board.\n    2. For each starting position, simulate the robot's movement according to the sequence of commands.\n    3. Track the number of successfully executed commands for each starting position.\n    4. Identify the starting position that allows the maximum number of commands to be executed.\n    5. Return the coordinates of this optimal starting position.\n\n# [edge case]\n    Test case with smallest board and single command:\n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The board is 1x1, so any command will cause the robot to fall. The only possible starting position is (1, 1).\n\n    Test case with a board where all commands lead to falling:\n    Input: 2 2 LURD\n    Output: Any valid starting position (e.g., 1 1)\n    Explanation: Regardless of the starting position, the sequence will cause the robot to fall after executing one command.\n\n    Test case with a large board and repetitive commands:\n    Input: 1000 1000 LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\n    Output: Any valid starting position on the first column (e.g., 1 1)\n    Explanation: The robot can execute all 'L' commands if it starts from any cell in the first column.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from all possible starting positions inherently handles these scenarios.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting position for a robot on a checkered board to execute a sequence of commands without falling off. The solution must handle multiple test cases efficiently, especially given the constraints on board size and command sequence length. The primary challenge is to ensure the robot executes the maximum number of commands without failure, which involves calculating potential starting positions and simulating command execution.\nrequirement pool:\n- Determine optimal starting position for maximum command execution.\n- Efficiently handle large board sizes and command sequences.\n- Simulate robot movement based on command sequence.\n- Ensure solution scalability for multiple test cases.\n- Provide clear output format for test case results.\nWe will use a simulation approach to determine the optimal starting position for the robot. The key challenge is efficiently handling large board sizes and command sequences. We will iterate over possible starting positions and simulate the robot's movement based on the command sequence. The simulation will track the robot's position and ensure it does not fall off the board. We will use Python's built-in data structures for efficient computation and avoid unnecessary complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to execute the maximum number of commands without the robot falling off the board.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read n, m, and the command sequence s.\n    2. Initialize variables to track the best starting position and the maximum number of commands executed.\n    3. Iterate over all possible starting positions on the board.\n    4. For each starting position, simulate the robot's movement according to the command sequence.\n    5. Track the robot's position and ensure it remains within the board boundaries.\n    6. If a command causes the robot to fall off, stop executing further commands for that starting position.\n    7. Compare the number of successfully executed commands with the current maximum and update if necessary.\n    8. Output the starting position that allows the maximum number of commands to be executed.\n\n# [edge case]\n    Test case with a 1x1 board and any command sequence = (1, 1)\n    Explanation: The robot cannot move without falling off, so it should start at (1, 1) and execute zero commands.\n\n    Test case with a command sequence longer than the board size = (starting position that allows maximum execution)\n    Explanation: The robot should start at a position that allows it to execute as many commands as possible before falling off.\n\n    Test case with all commands leading off the board immediately = (any valid starting position)\n    Explanation: If all commands lead off the board immediately, any starting position will result in zero successful commands.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The simulation logic inherently handles these scenarios by checking boundaries during command execution.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting cell for the robot to execute the maximum number of commands without falling off the board. The solution must efficiently handle large board sizes and command sequences, ensuring accurate output for each test case.\nrequirement pool:\n- Determine the optimal starting cell for maximum command execution.\n- Ensure the solution handles large board sizes efficiently.\n- Provide accurate output for each test case.\n- Optimize the algorithm for complex command sequences.\n- Include visualization tools for robot paths.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions on the board and simulate the execution of the command sequence from each position. It will track the number of commands executed before the robot falls off the board and return the starting position that allows the maximum number of commands to be executed. Given the constraints, we will optimize the simulation to handle large board sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: The goal is to execute the maximum number of commands without the robot falling off the board. This means finding a starting position that allows the longest sequence of uninterrupted moves.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Parse the number of test cases.\n    2. For each test case, read the dimensions of the board and the sequence of commands.\n    3. Initialize variables to track the best starting position and the maximum number of commands executed.\n    4. Iterate over all possible starting positions on the board.\n    5. Simulate the robot's movement from each starting position, counting the number of commands executed before falling off.\n    6. Update the best starting position if a new maximum is found.\n    7. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with a single cell board (1x1) and any command: \n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The robot cannot move without falling off, so it starts and ends at (1, 1).\n\n    Test case with a board where all commands lead to falling off immediately:\n    Input: 2 2 RRR\n    Output: 1 1\n    Explanation: Starting at any position will result in falling off after the first command, so any starting position is valid.\n\n    Test case with a large board and a short command sequence:\n    Input: 1000 1000 L\n    Output: Any valid position on the first column\n    Explanation: The robot can start anywhere in the first column since it only moves left once.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from all possible starting positions inherently handles these scenarios.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting cell for the robot to execute the maximum number of commands without falling off the board. The solution must efficiently handle large board sizes and command sequences, ensuring the output format is consistent across multiple test cases.\nrequirement pool:\n- Determine the optimal starting cell for maximum command execution.\n- Ensure the solution handles large board sizes efficiently.\n- Provide consistent output format for all test cases.\n- Optimize the algorithm for speed and accuracy.\n- Include error handling for edge cases.\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over all possible starting positions and execute the sequence of commands to determine the maximum number of commands that can be executed without the robot falling off the board. We will use efficient iteration and boundary checks to ensure the solution handles large board sizes and command sequences efficiently. The solution will prioritize simplicity and speed, using basic data structures and avoiding complex algorithms.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where the robot can move between adjacent cells.\n\n    'sequence of commands'\n    Explanation: A string consisting of 'L', 'R', 'D', 'U' that dictates the robot's movement direction.\n\n    'execute as many commands as possible'\n    Explanation: The goal is to start the robot in a position where it can perform the maximum number of movements without falling off the board.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': This means maximizing the number of commands executed without the robot falling off the board. In code, this involves checking each starting position and counting the number of successful moves.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read n, m, and the sequence of commands s.\n2. Initialize variables to track the best starting position and the maximum number of commands executed.\n3. Iterate over all possible starting positions on the board.\n4. For each starting position, simulate the robot's movement according to s.\n5. Check boundaries to ensure the robot does not fall off the board.\n6. Count the number of successfully executed commands for each starting position.\n7. Update the best starting position if a new maximum is found.\n8. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with a 1x1 board and any command: \n    Input: 1 1 L\n    Output: 1 1\n    Explanation: The robot cannot move anywhere without falling off, so it starts and ends at (1, 1).\n\n    Test case with a 1x2 board and command 'L':\n    Input: 1 2 L\n    Output: 1 2\n    Explanation: Starting at (1, 2) allows executing one command without falling off.\n\n    Test case with a large board and a sequence that moves in circles:\n    Input: 3 3 RRDLUU\n    Output: 2 1\n    Explanation: Starting at (2, 1) allows executing all commands successfully.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements and checking boundaries will naturally handle these scenarios.\n", "requirement analysis:\nThe task requires determining the optimal starting position for a robot on a grid to execute a sequence of commands without falling off the grid. The solution must handle large grid sizes and command sequences efficiently, ensuring that the robot executes the maximum number of commands possible. The output should be clear and concise, providing the starting cell coordinates for each test case.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for the robot.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance.\n- Consider edge cases where the grid size is minimal.\nWe will implement a function that simulates the robot's movement on the grid. The function will iterate over all possible starting positions on the grid and simulate the execution of the command sequence from each position. It will track the number of commands successfully executed before the robot falls off the grid. The starting position that allows the maximum number of commands to be executed will be selected. Given the constraints, the solution will be optimized to handle large inputs efficiently by avoiding unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions: left ('L'), right ('R'), down ('D'), and up ('U') on a grid. The task is to determine the starting position that allows the robot to execute the maximum number of commands without falling off the grid.\n\n    'grid boundaries'\n    Explanation: The robot must stay within the boundaries of the grid defined by n rows and m columns. If a command causes the robot to move outside these boundaries, it falls and breaks.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible': The goal is to maximize the number of commands executed without the robot falling off the grid.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the dimensions of the grid (n, m) and the sequence of commands (s).\n2. Initialize variables to track the best starting position and the maximum number of commands executed.\n3. Iterate over all possible starting positions on the grid.\n4. For each starting position, simulate the robot's movement according to the command sequence.\n5. Track the number of commands executed before the robot falls off the grid.\n6. Update the best starting position if the current position allows more commands to be executed.\n7. Output the best starting position for each test case.\n\n# [edge case] \n    Test case 1: 1 1, L = 1 1\n    Explanation: The grid is 1x1, so any movement will cause the robot to fall. The only possible starting position is (1, 1).\n\n    Test case 2: 1 2, L = 1 2\n    Explanation: The grid is 1x2, and starting at (1, 2) allows executing one command ('L') without falling.\n\n    Test case 3: 3 3, RRDLUU = 2 1\n    Explanation: Starting at (2, 1) allows executing all commands without falling.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from all possible starting positions inherently handles edge cases by considering all boundary conditions.\n", "requirement analysis:\nThe task requires determining the optimal starting cell for a robot on a grid to execute the maximum number of commands without falling off. The solution must handle large grid sizes and command sequences efficiently, ensuring the output format is consistent with the requirements.\nrequirement pool:\n- Develop an algorithm to find the optimal starting cell for maximum command execution.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance on large grids.\n- Consider edge cases where the grid size is minimal.\nWe will implement a function to determine the optimal starting cell for the robot on a grid to execute the maximum number of commands without falling off. The approach will involve simulating the robot's movements from each possible starting cell and tracking the number of successful commands executed. We will use efficient algorithms to handle large grid sizes and command sequences, ensuring the solution is optimized for performance. The function will iterate over each test case, simulate the robot's movements, and return the optimal starting cell for each case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid on which the robot moves, defined by n rows and m columns.\n\n    'adjacent by side'\n    Explanation: The robot can move to cells directly next to its current position, either left, right, up, or down.\n\n    'sequence of commands'\n    Explanation: A string of movements ('L', 'R', 'D', 'U') that the robot must execute in order.\n\n# [phrase showing quantity relationship]\n    'as many commands as possible'\n    Explanation: The goal is to maximize the number of commands executed without the robot falling off the board. This means finding a starting position where the robot can execute the longest sequence of commands before hitting the edge.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the dimensions of the board (n, m) and the sequence of commands (s).\n2. Initialize variables to track the best starting position and the maximum number of commands executed.\n3. Iterate over all possible starting positions on the board.\n4. For each starting position, simulate the execution of the command sequence:\n   - Track the current position of the robot.\n   - Execute each command in sequence, updating the robot's position.\n   - If a command causes the robot to move off the board, stop execution for that starting position.\n5. Compare the number of successfully executed commands for each starting position and update the best starting position if a new maximum is found.\n6. Output the best starting position for each test case.\n\n# [edge case]\n    Test case with a 1x1 board and any command sequence = 1 1\n    Explanation: The robot cannot move without falling off, so it should start at the only cell available.\n\n    Test case with a command sequence longer than the board's perimeter = Starting position that allows maximum perimeter traversal\n    Explanation: The robot should start at a position that allows it to traverse around the perimeter without falling off.\n\n    Test case with a command sequence that immediately causes a fall = Starting position that avoids immediate fall\n    Explanation: The robot should start at a position where it can execute at least one command without falling.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating movements from each possible starting cell inherently handles these scenarios by checking boundary conditions during simulation.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 541, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nIn the description of each test case, the first line contains two integers n and m (1 \u2264 n, m \u2264 10^6) \u2014 the height and width of the field that the robot is located on. The second line of the description is a string s consisting solely of characters 'L', 'R', 'D' and 'U' \u2014 the sequence of commands the robot executes. The string has a length from 1 to 10^6 commands.\n\nIt is guaranteed that the total length of s over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers r (1 \u2264 r \u2264 n) and c (1 \u2264 c \u2264 m), separated by a space \u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible.\n\nIf there are several such cells, you may output any of them.\n\nExample\n\nInput\n\n\n4\n1 1\nL\n1 2\nL\n3 3\nRRDLUU\n4 3\nLUURRDDLLLUU\n\n\nOutput\n\n\n1 1\n1 2\n2 1\n3 2", "mutate_method": "expand_one2two", "parent_index": 35}
