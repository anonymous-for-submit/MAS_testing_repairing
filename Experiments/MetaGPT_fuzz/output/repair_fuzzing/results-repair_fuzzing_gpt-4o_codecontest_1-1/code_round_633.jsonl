{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts such that each song is included in exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. The length of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts such that each song is included in exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. The length of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to allocate all songs into two concerts. Each song should be included in exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. The length of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to allocate all songs into two concerts such that each song is included in exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. Please help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is even, the minimal difference is 0\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            # If the total duration is odd, the minimal difference is 1\n            results.append(1)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Function call\n    results = minimal_difference(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        test_cases: A list of tuples, each containing three integers representing the number\n                    of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The goal is to split the total duration into two parts with minimal difference\n        # The minimal difference is the remainder when total_duration is divided by 2\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Calculate results\n    results = minimize_concert_difference(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute,\n            two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference is the remainder when total_duration is divided by 2\n        # This is because we can always split the songs such that the difference is minimized\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Compute minimal duration difference\n    results = minimize_concert_difference(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n            two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize a DP array to track possible sums\n        possible_sums = [False] * (total_duration + 1)\n        possible_sums[0] = True\n        \n        # Update DP array for one-minute songs\n        for _ in range(a):\n            for j in range(total_duration, 0, -1):\n                if possible_sums[j - 1]:\n                    possible_sums[j] = True\n        \n        # Update DP array for two-minute songs\n        for _ in range(b):\n            for j in range(total_duration, 1, -1):\n                if possible_sums[j - 2]:\n                    possible_sums[j] = True\n        \n        # Update DP array for three-minute songs\n        for _ in range(c):\n            for j in range(total_duration, 2, -1):\n                if possible_sums[j - 3]:\n                    possible_sums[j] = True\n        \n        # Find the maximum sum that is less than or equal to half of the total duration\n        half_duration = total_duration // 2\n        max_sum = 0\n        for i in range(half_duration + 1):\n            if possible_sums[i]:\n                max_sum = i\n        \n        # Calculate the minimal difference\n        minimal_difference = abs(total_duration - 2 * max_sum)\n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print results\n    results = minimal_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is 0 if total_duration is even, otherwise 1\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = minimize_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n                                                 two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == 1 and b == 0 and c == 0:\n            results.append(1)\n            continue\n        \n        # Dynamic programming approach\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest possible sum to half of the total duration\n        closest_sum = 0\n        for i in range(half_duration, -1, -1):\n            if dp[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal difference\n        minimal_difference = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Call the function and print results\nresults = minimal_concert_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is determined by the parity of the total duration\n        # If the total duration is even, the difference can be 0\n        # If the total duration is odd, the difference can be 1\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input(): \").split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimize_concert_difference(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n        representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If the total duration is even, the minimal difference is 0\n            results.append(0)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = minimize_concert_difference(test_cases)\n    \n    # Output the minimal possible difference for each test case\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference is the remainder when total_duration is divided by 2\n        # This is because we can always split the songs such that the difference is minimized\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimize_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal difference is the absolute difference between two equal parts\n        # If total_duration is even, the difference can be 0\n        # If total_duration is odd, the difference will be 1\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input(): \").split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimize_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their total durations is minimized. The solution must efficiently handle up to 1000 test cases with large numbers of songs, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle the maximum input constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance and simplicity.\n- Consider edge cases and validate the solution thoroughly.\nWe will use a dynamic programming approach to solve the problem of distributing songs into two concerts such that the absolute difference in their total durations is minimized. The problem can be reduced to a subset sum problem where we try to partition the songs into two subsets with minimal difference in their total durations. This approach is efficient and can handle the large input sizes specified in the requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the two separate events where songs are allocated.\n    'absolute difference': means the non-negative difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': these phrases indicate the duration of each type of song. In code, they can be represented as 1, 2, and 3 respectively.\n\n# [degree adverb]\n    'minimal': means the smallest possible value for the absolute difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find a subset of songs that can be allocated to one concert such that the difference between the total durations of the two concerts is minimized.\n    3. Initialize a DP array where each index represents a possible total duration for one concert.\n    4. Iterate over each song type and update the DP array to reflect possible durations.\n    5. Find the minimal difference by checking all possible durations in the DP array.\n\n# [edge case]\n    Case 1: (1, 0, 0) = 1\n    Explanation: Only one one-minute song exists, so it must be allocated to one concert, resulting in a difference of 1 minute.\n    \n    Case 2: (0, 0, 0) = 0\n    Explanation: No songs exist, so both concerts have a duration of 0 minutes, resulting in a difference of 0.\n    \n    Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no songs exist or when there is only one song:\n    ```python\n    if a == 0 and b == 0 and c == 0:\n        return 0\n    if a + b + c == 1:\n        return min(1*a + 2*b + 3*c)\n    # Continue with dynamic programming logic for other cases\n    ```\n", "requirement analysis:\nThe problem requires dividing songs into two groups such that the difference in total duration is minimized. This is a classic partition problem that can be approached using dynamic programming or greedy algorithms. Given the constraints, an efficient solution is necessary to handle large inputs.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations\n- Ensure the solution is scalable for large values of a, b, and c\n- Optimize the code for readability and maintainability\n- Include comprehensive test cases to validate the solution\n- Document the code to explain the logic and approach used\nWe will use a greedy algorithm to solve this problem. The idea is to distribute the songs between two concerts such that the difference in their total durations is minimized. Given the constraints, a greedy approach is efficient and simple enough to handle large inputs effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the grouping of songs into two separate events, where each song is included in exactly one concert.\n    'absolute difference': refers to the non-negative difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute songs', 'two-minute songs', 'three-minute songs': these phrases indicate the duration of each type of song. The total duration of a concert is calculated by summing up these durations based on the number of songs.\n\n# [degree adverb]\n    'minimal': indicates that the goal is to achieve the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a greedy algorithm to distribute songs between two concerts to minimize the absolute difference in their durations.\n    3. Iterate through each test case, and for each test case:\n        - Calculate the total duration of all songs.\n        - Try different combinations of distributing songs to minimize the difference.\n        - Return the minimal possible difference for each test case.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    Test case: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0 minutes.\n    \n    Test case: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, they can be evenly distributed between two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently considers all possible distributions to minimize the difference, including edge cases.\n", "requirement analysis:\nThe requirement is to allocate songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases with potentially large numbers of songs, ensuring efficient computation and accurate results.\nrequirement pool:\n- Efficiently compute minimal duration difference for each test case\n- Handle large input values up to 10^9 for song counts\n- Provide clear output format for each test case\n- Ensure code readability and maintainability\n- Optimize for performance with large data sets\nWe will use a greedy algorithm to efficiently allocate songs into two concerts. The approach involves calculating the total duration of all songs and then attempting to split them into two groups with minimal difference. We will leverage Python's built-in capabilities for handling large integers and efficient computation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the grouping of songs into two separate events, where each song is included in exactly one concert.\n    'absolute difference': means the non-negative difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': these phrases indicate the duration of each type of song. The total duration of a concert is calculated by summing these durations.\n    Implementation: Calculate the total duration for each concert by summing the products of the number of songs and their respective durations.\n\n# [degree adverb]\n    'minimal': means the smallest possible value for the absolute difference between the durations of the two concerts.\n    Implementation: Use a greedy algorithm to attempt to balance the total durations of the two concerts as closely as possible.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Attempt to split the songs into two groups such that the absolute difference between their total durations is minimized.\n    3. Use a greedy approach to allocate songs, starting with those that have the longest duration, to balance the concerts.\n    4. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Case 1: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    Case 2: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0 minutes.\n    \n    Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently considers all possible distributions to minimize the difference.\n", "requirement analysis:\nThe problem requires dividing songs into two groups such that the absolute difference in their total durations is minimized. The challenge lies in efficiently handling large numbers of songs and ensuring the solution is optimal for each test case.\nrequirement pool:\n- Implement an algorithm to minimize the difference in concert durations.\n- Ensure the solution is efficient for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases where the number of songs is extremely large.\n- Optimize the algorithm for speed and simplicity.\nWe will use a dynamic programming approach to solve this problem. The idea is to treat it as a variation of the subset sum problem, where we try to partition the songs into two groups with minimal difference in their total durations. We will use a 1D DP array to keep track of possible sums of durations and update it iteratively for each song type.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts': Refers to the two separate events where songs are allocated.\n    'absolute difference': The non-negative difference between the total durations of the two concerts.\n    'minimize': The goal is to make the absolute difference as small as possible.\n\n# [phrase showing quantity relationship]\n    'one-minute songs', 'two-minute songs', 'three-minute songs': These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of each type of song by its duration (1, 2, or 3) to get the total duration for that type.\n\n# [degree adverb]\n    'minimal': Indicates that the goal is to achieve the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to find a subset of songs that can form a sum closest to half of the total duration.\n3. Initialize a DP array where each index represents a possible sum of durations.\n4. For each song type, update the DP array to reflect new possible sums.\n5. Find the maximum sum that is less than or equal to half of the total duration.\n6. Calculate the minimal difference as twice the difference between this sum and half of the total duration.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    1 1 1 = 0\n    Explanation: As explained in the example, one possible allocation results in both concerts having equal durations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The dynamic programming approach inherently handles cases with zero or minimal songs by considering all possible sums, including zero.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their total durations is minimized. The solution must efficiently handle up to 1000 test cases with large input values for a, b, and c. The challenge lies in balancing the distribution of songs to achieve the minimal difference.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution is scalable for large input values.\n- Handle edge cases where the number of songs is extremely unbalanced.\n- Provide detailed comments and documentation for the code.\n- Optimize the code for readability and maintainability.\nWe will use a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their total durations is minimized. The approach involves calculating the total duration of all songs and then attempting to balance the distribution by considering the number of songs of each type. This method is efficient and can handle large input values due to its simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference'\n    Explanation: The goal is to distribute the songs between two concerts such that the difference in their total durations is as small as possible. This involves balancing the total time of songs in each concert.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of each type of song by its duration to get the total time contributed by that type.\n\n# [degree adverb] \n    'minimal possible difference'\n    Explanation: This means finding the smallest possible value for the absolute difference between the durations of the two concerts. In code, this involves calculating the total duration and attempting to split it as evenly as possible.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The goal is to split this total duration into two parts with minimal difference.\n3. If `total_duration` is even, the minimal difference can be 0 by splitting it equally.\n4. If `total_duration` is odd, the minimal difference will be 1.\n5. Use a greedy approach to distribute songs such that the difference is minimized.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must go to one concert, leaving the other concert empty, resulting in a difference of 1.\n    \n    0 0 0 = 0\n    Explanation: No songs to distribute, so both concerts have a duration of 0, resulting in a difference of 0.\n    \n    1 1 1 = 0\n    Explanation: Distribute one one-minute and one two-minute song to one concert and one three-minute song to another, resulting in equal durations and a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating total duration and checking its parity (even or odd) will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their total durations is minimized. The solution must efficiently handle up to 1000 test cases with large values for a, b, and c, each up to 10^9. The output must be the minimal possible difference for each test case.\nrequirement pool:\n- Develop an algorithm to minimize the concert duration difference.\n- Ensure the solution is efficient for large input sizes.\n- Provide a clear and concise output format.\n- Optimize the algorithm for both small and large test cases.\n- Include detailed comments and documentation in the code.\nWe will use a dynamic programming approach to solve this problem. The idea is to treat it as a variation of the subset sum problem, where we try to partition the songs into two groups such that the difference in their total durations is minimized. We will calculate the total duration of all songs and then use a DP table to find the closest possible sum to half of the total duration. This will help us determine the minimal difference between the two concerts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts': refers to the two separate events where songs are allocated.\n    'absolute difference': means the non-negative difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': indicates the duration of each type of song.\n    Explanation: These phrases define the duration of each song type, which is crucial for calculating the total duration of concerts.\n\n# [degree adverb]\n    'minimal': means the smallest possible difference between the durations of the two concerts.\n    Explanation: The goal is to achieve the smallest possible difference in total duration between the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find the closest possible sum to half of the total duration.\n    3. Partition the songs into two groups based on the DP result to minimize the difference.\n    4. Calculate and return the absolute difference between the two groups.\n\n# [edge case]\n    Case 1: (1, 0, 0) = 1\n    Explanation: Only one one-minute song exists, so one concert will have a duration of 1 and the other will have 0, resulting in a difference of 1.\n    \n    Case 2: (0, 0, 0) = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n    \n    Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for general cases.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their total durations is minimized. The solution must efficiently handle up to 1000 test cases with large values for a, b, and c, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Develop an algorithm to minimize the duration difference between two concerts.\n- Ensure the solution can handle the maximum constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance and clarity.\n- Include detailed comments and documentation for the solution.\nWe will use a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their total durations is minimized. The approach involves calculating the total duration of all songs and then attempting to balance the two concerts by iteratively assigning songs to the concert with the lesser current duration. This method is efficient and can handle large input sizes due to its linear complexity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference'\n    Explanation: The goal is to distribute the songs between two concerts such that the difference in their total durations is as small as possible.\n\n    'one-minute, two-minute, three-minute songs'\n    Explanation: These are the durations of the songs, and they determine how the total duration of each concert is calculated.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates that the goal is to make the difference between the concert durations as small as possible, ideally zero.\n\n# [degree adverb]\n    'minimal': This means the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is to have a duration close to `total_duration / 2`.\n3. Use a greedy approach to assign songs to each concert:\n   - Start with two empty concerts.\n   - Assign songs one by one, prioritizing the concert with the lesser current duration.\n   - After assigning all songs, calculate the absolute difference between the two concerts' durations.\n4. Return the minimal possible difference.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must go to one concert, resulting in a difference of 1.\n\n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs to distribute, so the difference is naturally 0.\n\n    Edge Case 3: (1, 1, 1) = 0\n    Explanation: Distribute one one-minute and one two-minute song to one concert and one three-minute song to another, resulting in a balanced distribution with a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these cases by attempting to balance the durations as much as possible.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their total durations is minimized. The solution must efficiently handle up to 1000 test cases with large values for a, b, and c, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle the maximum input constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for performance and scalability.\n- Include detailed comments and documentation for the code.\nWe will use a greedy algorithm to distribute the songs into two concerts. The key is to balance the total duration of songs in each concert by iteratively assigning songs based on their duration, starting with the largest duration songs. This approach will help minimize the absolute difference between the total durations of the two concerts. We will use Python's built-in capabilities to handle large integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference'\n    Explanation: The goal is to distribute the songs between two concerts such that the difference in their total durations is as small as possible.\n\n    'one-minute, two-minute, three-minute songs'\n    Explanation: These are the durations of the songs, and they need to be allocated between two concerts.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This implies that the difference should be minimized to the greatest extent feasible.\n\n# [degree adverb] \n    'minimal': This indicates that the smallest possible difference in concert durations is desired.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a greedy approach to distribute songs between two concerts, starting with the largest duration songs.\n3. Track the total duration of each concert and adjust allocations to minimize the absolute difference.\n4. For each test case, output the minimal possible difference.\n\n# [edge case] \n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs to allocate, so the difference is naturally 0.\n\n    Edge Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    \n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            results.append(0)\n    return results\n```\n\nThis code checks if the total duration is even or odd. If it's odd, it's impossible to perfectly balance the concerts, so the minimal difference is 1. If it's even, a perfect balance is possible, resulting in a difference of 0.\n", "requirement analysis:\nThe problem requires dividing songs into two groups to minimize the absolute difference in their total durations. The challenge lies in efficiently handling large numbers of songs and ensuring the solution is optimal for all test cases.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations\n- Ensure the solution can handle up to 1000 test cases efficiently\n- Optimize the algorithm for large input values of a, b, and c\n- Provide clear documentation and examples for users\n- Implement additional features for user interaction\nWe will use a greedy algorithm to distribute the songs between two concerts. The key is to balance the total duration of songs in each concert by iteratively assigning songs to the concert with the lesser total duration. This approach is efficient and can handle large input sizes due to its simplicity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'minimize the absolute difference'\n    Explanation: The goal is to distribute the songs between two concerts such that the absolute difference in total duration between the two concerts is minimized.\n\n    'one-minute, two-minute, three-minute songs'\n    Explanation: These are the durations of the songs, and they determine how the total duration of each concert is calculated.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This implies that the goal is to make the difference between the concert durations as small as possible, ideally zero.\n\n# [degree adverb] \n    'minimal': This indicates that the solution should aim for the smallest possible difference in concert durations.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute songs between two concerts:\n       - Start with two empty concerts.\n       - Iteratively assign songs to the concert with the lesser total duration.\n       - Prioritize assigning longer duration songs first to balance the concerts more effectively.\n    3. Calculate the absolute difference between the total durations of the two concerts.\n    4. Return this minimal difference for each test case.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n    \n    0 0 0 = 0\n    Explanation: No songs to distribute, so the difference is naturally 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, one possible distribution is (1+2) and (3), resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these cases by attempting to balance the durations as much as possible.\n", "requirement analysis:\nThe requirement is to allocate songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with potentially large numbers of songs, ensuring accurate and optimal allocation.\nrequirement pool:\n- Implement an algorithm to minimize the duration difference between two concerts.\n- Ensure the solution handles large input values efficiently.\n- Provide clear output format for each test case.\n- Optimize the algorithm for scalability.\n- Maintain code readability and ease of maintenance.\nWe will use a greedy algorithm to allocate songs into two concerts. The idea is to balance the total duration of songs in each concert by iteratively assigning songs to the concert with the currently lesser total duration. This approach efficiently handles large input values and minimizes the absolute difference between concert durations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the grouping of songs into two separate events, where each song is included in exactly one concert.\n    'absolute difference': means the non-negative difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': these phrases indicate the duration of each type of song. In code, they can be represented as 1, 2, and 3 respectively, and used to calculate the total duration of each concert.\n\n# [degree adverb]\n    'minimal': means the smallest possible value. In this context, it refers to achieving the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    1. For each test case, calculate the total duration of all songs.\n    2. Use a greedy algorithm to distribute songs into two concerts, aiming to balance their durations.\n    3. Start by assigning songs with longer durations first to minimize the difference.\n    4. Calculate the absolute difference between the total durations of the two concerts.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    Test case: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0 minutes, resulting in a difference of 0.\n    \n    Test case: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently balances the durations by considering all song types and their quantities.\n"], "scores": [], "pass_results": [false, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 633, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "rephrase_one", "parent_index": 128}
