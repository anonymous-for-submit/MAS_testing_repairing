{"name": "1575_I. Illusions of the Desert", "description": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions.\n\nThe map of the labyrinth forms a tree with n rooms numbered from 1 to n and n - 1 tunnels connecting them such that it is possible to travel between each pair of rooms through several tunnels.\n\nThe i-th room (1 \u2264 i \u2264 n) has a_i illusion rate. To go from the x-th room to the y-th room, there must exist a tunnel between x and y, and it takes max(|a_x + a_y|, |a_x - a_y|) energy. |z| denotes the absolute value of z.\n\nTo prevent grave robbers, the maze can change the illusion rate of any room in it. Chanek and Indiana would ask q queries.\n\nThere are two types of queries to be done:\n\n  * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). \n  * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). \n\n\n\nHelp them, so you can get a portion of the treasure!\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "tags": ["data structures", "trees"], "difficulty": 15, "id": 1575, "sample_io": [{"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["39\n32\n0\n"]}], "test_list": [{"input": "2 1\n-1000000000 1000000000\n2 1\n2 1 2\n", "output": ["2000000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000000003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["19\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n30\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["9\n12\n"]}, {"input": "2 1\n-1000000000 1010000000\n2 1\n2 1 2\n", "output": ["2010000000\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2102\n0\n1000002003\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["39\n33\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n32\n23\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n32\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["9\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["35\n29\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["9\n32\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["31\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["3\n26\n22\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n40\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n38\n0\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n29\n0\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["17\n0\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["16\n0\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n19\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n22\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n34\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n8\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["9\n13\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 2 3\n", "output": ["8\n11\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000002003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n22\n15\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["1\n4\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["21\n32\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 6 3\n", "output": ["9\n30\n5\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 0\n2 1 2\n2 5 2\n", "output": ["3\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["17\n45\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n24\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n7\n0\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n25\n"]}, {"input": "6 4\n0 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n21\n0\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n15\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["19\n32\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["21\n0\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1100\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["1\n14\n21\n"]}, {"input": "6 4\n0 -9 2 -1 3 -6\n1 5\n6 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["19\n30\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["38\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["3\n24\n22\n"]}, {"input": "6 3\n0 0 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 4\n1 2 3\n", "output": ["19\n12\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["28\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["0\n4\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 5 2\n", "output": ["1\n5\n9\n"]}, {"input": "6 4\n10 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["26\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["0\n5\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 5\n2 3 3\n", "output": ["5\n5\n0\n"]}, {"input": "2 1\n-1000000000 1000000010\n2 1\n2 1 2\n", "output": ["2000000010\n"]}, {"input": "6 4\n0 -9 2 -1 4 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n22\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["9\n12\n21\n"]}, {"input": "2 1\n-651044801 1010000000\n2 1\n2 1 2\n", "output": ["1661044801\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["10\n0\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n2 3 3\n", "output": ["9\n15\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["35\n35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -2\n2 1 2\n1 3 2\n", "output": ["9\n31\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n30\n0\n"]}, {"input": "6 4\n10 -13 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["35\n0\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["0\n26\n22\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["0\n35\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n23\n"]}, {"input": "6 4\n-1 -9 4 0 8 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["17\n0\n13\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n13\n"]}, {"input": "6 4\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n0\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 2 3\n", "output": ["8\n12\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["39\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n31\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 5\n", "output": ["0\n7\n4\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["37\n0\n0\n"]}, {"input": "4 4\n2 -1000 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n21\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n43\n15\n"]}, {"input": "6 4\n3 -9 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["19\n0\n"]}, {"input": "2 1\n-651044801 1010000100\n2 1\n2 1 2\n", "output": ["1661044901\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["28\n30\n14\n"]}, {"input": "6 4\n0 -6 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n20\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["9\n0\n13\n"]}, {"input": "6 3\n10 -15 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["45\n25\n"]}, {"input": "6 3\n0 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 5\n2 2 3\n", "output": ["8\n8\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 4 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["37\n0\n"]}, {"input": "4 4\n2 -1000 110 4\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1110\n0\n1000000004\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n13\n51\n"]}, {"input": "6 4\n0 -9 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["27\n30\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["51\n25\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["28\n10\n48\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["57\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n31\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n55\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 6\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n24\n0\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["37\n40\n"]}, {"input": "2 1\n-1000000000 1010001000\n2 1\n2 1 2\n", "output": ["2010001000\n"]}, {"input": "6 4\n0 -9 2 -1 4 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 2\n", "output": ["9\n26\n17\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["5\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 2\n", "output": ["1\n34\n"]}, {"input": "6 4\n0 -9 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["17\n35\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["10\n38\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n8\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 6\n", "output": ["16\n0\n10\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["16\n0\n"]}, {"input": "6 4\n0 -12 4 0 14 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["28\n0\n16\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 3\n1 1 -3\n2 1 4\n2 3 3\n", "output": ["29\n8\n0\n"]}, {"input": "6 4\n10 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n27\n0\n"]}, {"input": "6 4\n10 -9 1 -1 4 -6\n1 5\n2 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["49\n32\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 1\n", "output": ["9\n0\n25\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 6\n", "output": ["9\n13\n7\n"]}, {"input": "6 4\n0 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n23\n22\n"]}, {"input": "6 4\n0 -14 4 -1 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 1 3\n", "output": ["17\n45\n35\n"]}, {"input": "6 4\n0 -3 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["0\n23\n0\n"]}, {"input": "6 4\n10 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["11\n24\n"]}, {"input": "6 4\n10 -9 2 -1 6 -6\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["42\n0\n"]}, {"input": "6 4\n1 -9 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -1\n2 1 2\n2 5 2\n", "output": ["4\n24\n22\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n15\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 4\n2 4 3\n", "output": ["0\n4\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n1 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 5\n2 3 6\n", "output": ["0\n5\n2\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 4 3\n", "output": ["9\n13\n21\n"]}, {"input": "6 4\n10 -9 2 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 3 -3\n2 1 2\n2 3 3\n", "output": ["31\n31\n0\n"]}, {"input": "6 4\n0 -9 0 -1 4 -5\n1 6\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["28\n22\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["47\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["0\n28\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["37\n0\n23\n"]}, {"input": "6 4\n0 -9 4 1 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["1\n0\n13\n"]}, {"input": "6 4\n0 -9 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["8\n12\n0\n"]}, {"input": "6 4\n0 -14 4 -1 8 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -3\n2 1 2\n2 3 3\n", "output": ["17\n25\n0\n"]}, {"input": "6 4\n0 -3 2 -1 2 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -3\n2 1 2\n2 1 5\n", "output": ["0\n7\n2\n"]}, {"input": "4 4\n2 -1350 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["1460\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 7 -6\n1 5\n1 4\n5 6\n4 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["10\n14\n24\n"]}, {"input": "6 4\n0 -9 4 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 2 -4\n2 1 2\n2 2 3\n", "output": ["28\n34\n10\n"]}, {"input": "6 3\n0 -17 2 -1 4 -5\n1 5\n3 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["23\n29\n"]}, {"input": "6 4\n0 -9 4 0 0 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 4 2\n2 2 3\n", "output": ["9\n9\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n5 2\n2 3\n2 1 4\n1 1 -3\n2 1 2\n2 5 2\n", "output": ["9\n20\n13\n"]}, {"input": "6 4\n3 -2 2 -1 4 0\n1 5\n5 4\n4 6\n6 2\n6 3\n1 2 4\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["21\n0\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["28\n15\n"]}, {"input": "6 4\n0 -8 0 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["26\n29\n14\n"]}, {"input": "6 3\n10 -21 2 -1 4 -6\n1 5\n5 4\n5 2\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["39\n67\n"]}, {"input": "6 4\n10 -9 2 -1 3 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 3\n", "output": ["37\n23\n"]}, {"input": "6 4\n0 -6 4 0 14 1\n1 6\n5 4\n5 6\n1 2\n6 3\n2 1 4\n1 1 -4\n2 1 2\n2 2 3\n", "output": ["30\n10\n20\n"]}, {"input": "6 3\n0 -17 2 -1 4 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 2 4\n1 2 3\n", "output": ["9\n44\n"]}, {"input": "6 3\n10 -21 2 -1 4 -9\n1 4\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n33\n"]}, {"input": "6 3\n10 -21 2 -1 8 -9\n1 5\n5 4\n5 6\n1 2\n6 3\n2 1 2\n1 1 -3\n2 2 3\n2 3 3\n", "output": ["31\n63\n"]}, {"input": "6 3\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 5\n0 2 3\n", "output": ["9\n7\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n26\n0\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 3 3\n", "output": ["10\n35\n0\n"]}, {"input": "6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -4\n2 1 2\n1 3 3\n", "output": ["31\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["2\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n29\n9\n"]}, {"input": "6 4\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 6\n", "output": ["16\n0\n15\n"]}, {"input": "6 3\n0 -9 4 0 8 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 1\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["0\n0\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["33\n27\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 3 2\n2 3 1\n", "output": ["9\n23\n25\n"]}, {"input": "6 4\n0 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["16\n15\n14\n"]}, {"input": "6 4\n19 -9 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 3 3\n", "output": ["20\n24\n"]}, {"input": "6 4\n0 -9 2 0 14 1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 1 2\n2 2 3\n", "output": ["39\n42\n13\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -4\n2 1 4\n2 5 3\n", "output": ["9\n13\n16\n"]}, {"input": "6 4\n-1 -9 2 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -3\n2 2 2\n2 3 3\n", "output": ["5\n0\n0\n"]}, {"input": "6 4\n10 -25 2 -1 4 -11\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 4 -3\n2 1 2\n2 3 3\n", "output": ["57\n0\n"]}, {"input": "6 4\n0 -9 2 0 8 -4\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["33\n0\n19\n"]}, {"input": "6 4\n0 -9 4 1 -1 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["3\n0\n13\n"]}, {"input": "4 4\n2 -2609 110 3\n4 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2719\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 3 -1 2 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 6\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["9\n26\n15\n"]}, {"input": "6 4\n13 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n1 1 2\n1 3 -3\n2 1 2\n2 2 3\n", "output": ["31\n24\n"]}, {"input": "6 4\n1 -9 4 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -6\n2 1 2\n2 2 3\n", "output": ["10\n35\n25\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n30\n0\n"]}, {"input": "6 4\n10 -3 2 -1 2 -6\n1 4\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 3 -3\n2 1 2\n2 3 6\n", "output": ["0\n31\n9\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["13\n37\n0\n"]}, {"input": "6 4\n1 -1 2 -1 1 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 0\n2 1 2\n2 5 2\n", "output": ["17\n15\n14\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["21\n12\n0\n"]}, {"input": "6 4\n0 -17 2 -1 4 -16\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["42\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n1 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["27\n0\n"]}, {"input": "6 4\n-1 -9 2 -1 0 -9\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -3\n2 1 2\n2 3 5\n", "output": ["21\n30\n20\n"]}, {"input": "6 3\n0 -7 4 -1 10 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n42\n"]}, {"input": "6 4\n4 -9 4 -1 4 -6\n1 2\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -2\n2 1 3\n2 3 3\n", "output": ["13\n36\n0\n"]}, {"input": "6 4\n19 -3 1 -1 0 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n1 1 3\n", "output": ["20\n18\n"]}, {"input": "6 4\n0 -10 3 0 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -4\n2 1 4\n2 1 3\n", "output": ["21\n12\n25\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 1 2\n2 4 4\n", "output": ["13\n27\n0\n"]}, {"input": "6 3\n0 -7 4 -1 10 -3\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["21\n36\n"]}, {"input": "6 4\n0 -16 2 -1 4 -23\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 3\n1 1 -6\n2 1 4\n1 3 3\n", "output": ["56\n15\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n2 2 2\n2 4 4\n", "output": ["13\n0\n0\n"]}, {"input": "6 4\n10 -9 2 -1 3 -1\n1 5\n5 4\n5 6\n6 2\n6 3\n2 3 2\n1 4 -3\n1 2 2\n2 4 4\n", "output": ["13\n0\n"]}, {"input": "4 4\n3 -1000 100 3\n2 1\n3 2\n4 1\n2 1 3\n2 2 2\n1 1 -1000000000\n2 1 4\n", "output": ["2103\n0\n1000000003\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 4\n2 3 2\n", "output": ["9\n12\n23\n"]}, {"input": "6 3\n0 -5 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n1 1 4\n2 2 3\n", "output": ["9\n"]}, {"input": "6 4\n10 -9 2 -1 2 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 2 -5\n2 1 2\n2 3 3\n", "output": ["0\n31\n0\n"]}, {"input": "6 4\n0 -9 4 0 11 0\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 2 3\n", "output": ["22\n0\n13\n"]}, {"input": "6 4\n0 -3 2 -1 2 -12\n1 5\n5 4\n5 6\n6 2\n6 3\n2 2 2\n1 1 -5\n2 1 2\n2 3 3\n", "output": ["0\n36\n0\n"]}, {"input": "6 4\n10 -1 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 3\n2 3 3\n", "output": ["31\n25\n0\n"]}, {"input": "6 4\n0 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 2 2\n2 3 4\n", "output": ["9\n0\n23\n"]}, {"input": "6 4\n0 -9 2 -1 4 -5\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 5\n1 1 -4\n2 1 4\n2 3 3\n", "output": ["4\n13\n0\n"]}, {"input": "4 4\n2 -1000 100 3\n2 1\n3 2\n4 2\n2 2 3\n2 2 2\n1 2 -1000000000\n2 1 4\n", "output": ["1100\n0\n2000000005\n"]}, {"input": "6 4\n0 -4 2 -1 4 -2\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 4\n1 1 -3\n2 1 2\n2 3 3\n", "output": ["9\n19\n0\n"]}], "task_id": "codecontest/8", "prompt": "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n, each pair of rooms is connected by several tunnels as it is possible to travel between them. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, and to go from the x-th room to the y-th room, there must exist a tunnel between x and y, which takes max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure! Make sure your solution is efficient to handle large inputs.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "repair_prompt": ["Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n, each pair of rooms is connected by several tunnels as it is possible to travel between them. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, and to go from the x-th room to the y-th room, there must exist a tunnel between x and y, which takes max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure! Make sure your solution is efficient to handle large inputs.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions. The map of the labyrinth forms a tree with n rooms numbered from 1 to n. Each pair of rooms is connected by several tunnels. It is possible to travel between them. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, and to go from the x-th room to the y-th room, there must exist a tunnel between x and y, which takes max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure! Make sure your solution is efficient to handle large inputs.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "Chanek Jones is back, helping his long-lost relative Indiana Jones, to find a secret treasure in a maze buried below a desert full of illusions, and the map of the labyrinth forms a tree with n rooms numbered from 1 to n, each pair of rooms is connected by several tunnels as it is possible to travel between them. The i-th room (1 \u2264 i \u2264 n) has a_i illusion rate, and to go from the x-th room to the y-th room, there must exist a tunnel between x and y, which takes max(|a_x + a_y|, |a_x - a_y|) energy, where |z| denotes the absolute value of z. To prevent grave robbers, the maze can change the illusion rate of any room in it, and Chanek and Indiana would ask q queries. There are two types of queries to be done: * 1\\ u\\ c \u2014 The illusion rate of the x-th room is changed to c (1 \u2264 u \u2264 n, 0 \u2264 |c| \u2264 10^9). * 2\\ u\\ v \u2014 Chanek and Indiana ask you the minimum sum of energy needed to take the secret treasure at room v if they are initially at room u (1 \u2264 u, v \u2264 n). Help them, so you can get a portion of the treasure! Make sure your solution is efficient to handle large inputs.\n\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: List[int]) -> None:\n    \"\"\"Update the illusion rate of a specific room.\n\n    Args:\n        room (int): The room number to update.\n        new_rate (int): The new illusion rate for the room.\n        illusion_rates (List[int]): The list of current illusion rates for all rooms.\n    \"\"\"\n    illusion_rates[room - 1] = new_rate\n\ndef dfs(node: int, parent: int, depth: int, tree: List[List[int]], parent_array: List[int], depth_array: List[int]) -> None:\n    \"\"\"Perform a Depth First Search to compute parent and depth arrays.\n\n    Args:\n        node (int): The current node being visited.\n        parent (int): The parent of the current node.\n        depth (int): The depth of the current node.\n        tree (List[List[int]]): The adjacency list representation of the tree.\n        parent_array (List[int]): Array to store the parent of each node.\n        depth_array (List[int]): Array to store the depth of each node.\n    \"\"\"\n    parent_array[node] = parent\n    depth_array[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, tree, parent_array, depth_array)\n\ndef lca(u: int, v: int, parent_array: List[int], depth_array: List[int]) -> int:\n    \"\"\"Find the Lowest Common Ancestor (LCA) of two nodes.\n\n    Args:\n        u (int): The first node.\n        v (int): The second node.\n        parent_array (List[int]): Array containing the parent of each node.\n        depth_array (List[int]): Array containing the depth of each node.\n\n    Returns:\n        int: The LCA of the two nodes.\n    \"\"\"\n    if depth_array[u] < depth_array[v]:\n        u, v = v, u\n    while depth_array[u] > depth_array[v]:\n        u = parent_array[u]\n    while u != v:\n        u = parent_array[u]\n        v = parent_array[v]\n    return u\n\ndef calculate_energy(a_x: int, a_y: int) -> int:\n    \"\"\"Calculate the energy required to travel between two rooms.\n\n    Args:\n        a_x (int): The illusion rate of the first room.\n        a_y (int): The illusion rate of the second room.\n\n    Returns:\n        int: The energy required.\n    \"\"\"\n    return max(abs(a_x + a_y), abs(a_x - a_y))\n\ndef min_energy_path(u: int, v: int, illusion_rates: List[int], tree: List[List[int]]) -> int:\n    \"\"\"Calculate the minimum energy required to travel from room u to room v.\n\n    Args:\n        u (int): The starting room.\n        v (int): The destination room.\n        illusion_rates (List[int]): The list of current illusion rates for all rooms.\n        tree (List[List[int]]): The adjacency list representation of the tree.\n\n    Returns:\n        int: The minimum energy required.\n    \"\"\"\n    n = len(illusion_rates)\n    parent_array = [-1] * (n + 1)\n    depth_array = [0] * (n + 1)\n    \n    # Precompute parent and depth arrays using DFS\n    dfs(1, -1, 0, tree, parent_array, depth_array)\n    \n    # Find LCA of u and v\n    ancestor = lca(u, v, parent_array, depth_array)\n    \n    # Calculate energy from u to ancestor and ancestor to v\n    energy = 0\n    current = u\n    while current != ancestor:\n        energy += calculate_energy(illusion_rates[current - 1], illusion_rates[parent_array[current] - 1])\n        current = parent_array[current]\n    \n    current = v\n    while current != ancestor:\n        energy += calculate_energy(illusion_rates[current - 1], illusion_rates[parent_array[current] - 1])\n        current = parent_array[current]\n    \n    return energy\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        s = int(data[index])\n        t = int(data[index + 1])\n        index += 2\n        tree[s].append(t)\n        tree[t].append(s)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1])\n        v = int(data[index + 2])\n        index += 3\n        \n        if query_type == 1:\n            update_illusion_rate(u, v, illusion_rates)\n        elif query_type == 2:\n            result = min_energy_path(u, v, illusion_rates, tree)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: List[int]) -> None:\n    \"\"\"Updates the illusion rate of a specified room.\"\"\"\n    illusion_rates[room - 1] = new_rate\n\ndef dfs(u: int, parent: int, tree: List[List[int]], illusion_rates: List[int], path: List[int]) -> None:\n    \"\"\"Performs Depth First Search to find the path from the root to a node.\"\"\"\n    path.append(u)\n    for v in tree[u]:\n        if v != parent:\n            dfs(v, u, tree, illusion_rates, path)\n\ndef find_minimum_energy_path(u: int, v: int, illusion_rates: List[int], tree: List[List[int]]) -> int:\n    \"\"\"Finds the minimum energy path between two rooms using DFS.\"\"\"\n    path_u = []\n    path_v = []\n    dfs(u, -1, tree, illusion_rates, path_u)\n    dfs(v, -1, tree, illusion_rates, path_v)\n    \n    # Find the common ancestor\n    i = 0\n    while i < len(path_u) and i < len(path_v) and path_u[i] == path_v[i]:\n        i += 1\n    \n    # Calculate the energy required\n    energy = 0\n    for j in range(i, len(path_u)):\n        if j + 1 < len(path_u):\n            x = path_u[j]\n            y = path_u[j + 1]\n            energy += max(abs(illusion_rates[x - 1] + illusion_rates[y - 1]), abs(illusion_rates[x - 1] - illusion_rates[y - 1]))\n    \n    for j in range(i, len(path_v)):\n        if j + 1 < len(path_v):\n            x = path_v[j]\n            y = path_v[j + 1]\n            energy += max(abs(illusion_rates[x - 1] + illusion_rates[y - 1]), abs(illusion_rates[x - 1] - illusion_rates[y - 1]))\n    \n    return energy\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n, q = map(int, input().split())\n    illusion_rates = list(map(int, input().split()))\n    tree = [[] for _ in range(n + 1)]\n    \n    for _ in range(n - 1):\n        s, t = map(int, input().split())\n        tree[s].append(t)\n        tree[t].append(s)\n    \n    for _ in range(q):\n        query = list(map(int, input().split()))\n        if query[0] == 1:\n            update_illusion_rate(query[1], query[2], illusion_rates)\n        elif query[0] == 2:\n            result = find_minimum_energy_path(query[1], query[2], illusion_rates, tree)\n            print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nclass Tree:\n    \"\"\"Class to represent the tree structure of the maze.\"\"\"\n    \n    def __init__(self, n: int, edges: list):\n        \"\"\"Initialize the tree with nodes and edges.\"\"\"\n        self.n = n\n        self.adj_list = [[] for _ in range(n + 1)]\n        for u, v in edges:\n            self.adj_list[u].append(v)\n            self.adj_list[v].append(u)\n        self.parent = [-1] * (n + 1)\n        self.depth = [0] * (n + 1)\n        self.subtree_size = [0] * (n + 1)\n        self.chain_head = [-1] * (n + 1)\n        self.chain_index = [-1] * (n + 1)\n        self.pos_in_base = [-1] * (n + 1)\n        self.base_array = []\n        self.chain_no = 0\n        self.ptr = 0\n\n    def dfs(self, current: int, parent: int):\n        \"\"\"Perform DFS to calculate parent, depth, and subtree size.\"\"\"\n        self.parent[current] = parent\n        self.subtree_size[current] = 1\n        for neighbor in self.adj_list[current]:\n            if neighbor == parent:\n                continue\n            self.depth[neighbor] = self.depth[current] + 1\n            self.dfs(neighbor, current)\n            self.subtree_size[current] += self.subtree_size[neighbor]\n\n    def hld(self, current: int, parent: int):\n        \"\"\"Perform Heavy-Light Decomposition on the tree.\"\"\"\n        if self.chain_head[self.chain_no] == -1:\n            self.chain_head[self.chain_no] = current\n        self.chain_index[current] = self.chain_no\n        self.pos_in_base[current] = self.ptr\n        self.base_array.append(current)\n        self.ptr += 1\n\n        special_child = -1\n        for neighbor in self.adj_list[current]:\n            if neighbor != parent:\n                if special_child == -1 or self.subtree_size[neighbor] > self.subtree_size[special_child]:\n                    special_child = neighbor\n\n        if special_child != -1:\n            self.hld(special_child, current)\n\n        for neighbor in self.adj_list[current]:\n            if neighbor != parent and neighbor != special_child:\n                self.chain_no += 1\n                self.hld(neighbor, current)\n\n    def lca(self, u: int, v: int) -> int:\n        \"\"\"Find the Lowest Common Ancestor of nodes u and v.\"\"\"\n        while self.chain_index[u] != self.chain_index[v]:\n            if self.depth[self.chain_head[self.chain_index[u]]] < self.depth[self.chain_head[self.chain_index[v]]]:\n                v = self.parent[self.chain_head[self.chain_index[v]]]\n            else:\n                u = self.parent[self.chain_head[self.chain_index[u]]]\n        return u if self.depth[u] < self.depth[v] else v\n\n\nclass SegmentTree:\n    \"\"\"Class to represent the Segment Tree for efficient range queries and updates.\"\"\"\n    \n    def __init__(self, n: int):\n        \"\"\"Initialize the segment tree.\"\"\"\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n\n    def build(self, start: int, end: int, node: int, illusion_rates: list):\n        \"\"\"Build the segment tree.\"\"\"\n        if start == end:\n            self.tree[node] = illusion_rates[start]\n        else:\n            mid = (start + end) // 2\n            self.build(start, mid, 2 * node + 1, illusion_rates)\n            self.build(mid + 1, end, 2 * node + 2, illusion_rates)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update_range(self, start: int, end: int, l: int, r: int, node: int, value: int):\n        \"\"\"Update the segment tree in a range.\"\"\"\n        if self.lazy[node] != 0:\n            self.tree[node] += (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] += self.lazy[node]\n                self.lazy[2 * node + 2] += self.lazy[node]\n            self.lazy[node] = 0\n\n        if start > end or start > r or end < l:\n            return\n\n        if start >= l and end <= r:\n            self.tree[node] += (end - start + 1) * value\n            if start != end:\n                self.lazy[2 * node + 1] += value\n                self.lazy[2 * node + 2] += value\n            return\n\n        mid = (start + end) // 2\n        self.update_range(start, mid, l, r, 2 * node + 1, value)\n        self.update_range(mid + 1, end, l, r, 2 * node + 2, value)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query_range(self, start: int, end: int, l: int, r: int, node: int) -> int:\n        \"\"\"Query the segment tree in a range.\"\"\"\n        if start > end or start > r or end < l:\n            return 0\n\n        if self.lazy[node] != 0:\n            self.tree[node] += (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] += self.lazy[node]\n                self.lazy[2 * node + 2] += self.lazy[node]\n            self.lazy[node] = 0\n\n        if start >= l and end <= r:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_query = self.query_range(start, mid, l, r, 2 * node + 1)\n        right_query = self.query_range(mid + 1, end, l, r, 2 * node + 2)\n        return left_query + right_query\n\n\ndef update_illusion_rate(room: int, new_rate: int, segment_tree: SegmentTree, tree: Tree):\n    \"\"\"Update the illusion rate of a room.\"\"\"\n    pos = tree.pos_in_base[room]\n    segment_tree.update_range(0, tree.n - 1, pos, pos, 0, new_rate)\n\n\ndef min_energy_path(start_room: int, end_room: int, segment_tree: SegmentTree, tree: Tree) -> int:\n    \"\"\"Calculate the minimum energy path between two rooms.\"\"\"\n    lca = tree.lca(start_room, end_room)\n    energy = 0\n    while tree.chain_index[start_room] != tree.chain_index[lca]:\n        chain_head = tree.chain_head[tree.chain_index[start_room]]\n        energy += segment_tree.query_range(0, tree.n - 1, tree.pos_in_base[chain_head], tree.pos_in_base[start_room], 0)\n        start_room = tree.parent[chain_head]\n    while tree.chain_index[end_room] != tree.chain_index[lca]:\n        chain_head = tree.chain_head[tree.chain_index[end_room]]\n        energy += segment_tree.query_range(0, tree.n - 1, tree.pos_in_base[chain_head], tree.pos_in_base[end_room], 0)\n        end_room = tree.parent[chain_head]\n    energy += segment_tree.query_range(0, tree.n - 1, tree.pos_in_base[lca], tree.pos_in_base[start_room], 0)\n    energy += segment_tree.query_range(0, tree.n - 1, tree.pos_in_base[lca], tree.pos_in_base[end_room], 0)\n    return energy\n\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    edges = []\n    for _ in range(n - 1):\n        u = int(data[index])\n        v = int(data[index + 1])\n        edges.append((u, v))\n        index += 2\n    \n    queries = []\n    for _ in range(q):\n        queries.append(data[index:index + 3])\n        index += 3\n    \n    tree = Tree(n, edges)\n    tree.dfs(1, -1)\n    tree.hld(1, -1)\n    \n    segment_tree = SegmentTree(n)\n    segment_tree.build(0, n - 1, 0, illusion_rates)\n    \n    results = []\n    for query in queries:\n        if query[0] == '1':\n            room = int(query[1])\n            new_rate = int(query[2])\n            update_illusion_rate(room, new_rate, segment_tree, tree)\n        elif query[0] == '2':\n            start_room = int(query[1])\n            end_room = int(query[2])\n            result = min_energy_path(start_room, end_room, segment_tree, tree)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: List[int]) -> None:\n    \"\"\"Update the illusion rate of a specified room.\n\n    Args:\n        room (int): The room number to update.\n        new_rate (int): The new illusion rate for the room.\n        illusion_rates (List[int]): The list of current illusion rates for all rooms.\n    \"\"\"\n    illusion_rates[room - 1] = new_rate\n\ndef dfs(node: int, parent: int, depth: int, tree: Dict[int, List[int]], \n        parent_array: List[int], depth_array: List[int]) -> None:\n    \"\"\"Perform a Depth First Search to compute parent and depth arrays.\n\n    Args:\n        node (int): The current node being visited.\n        parent (int): The parent of the current node.\n        depth (int): The depth of the current node.\n        tree (Dict[int, List[int]]): The adjacency list representation of the tree.\n        parent_array (List[int]): The array to store parent information.\n        depth_array (List[int]): The array to store depth information.\n    \"\"\"\n    parent_array[node] = parent\n    depth_array[node] = depth\n    for neighbor in tree[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, tree, parent_array, depth_array)\n\ndef lca(u: int, v: int, parent_array: List[int], depth_array: List[int]) -> int:\n    \"\"\"Find the Lowest Common Ancestor (LCA) of two nodes.\n\n    Args:\n        u (int): The first node.\n        v (int): The second node.\n        parent_array (List[int]): The array containing parent information.\n        depth_array (List[int]): The array containing depth information.\n\n    Returns:\n        int: The LCA of nodes u and v.\n    \"\"\"\n    # Bring both nodes to the same depth\n    while depth_array[u] > depth_array[v]:\n        u = parent_array[u]\n    while depth_array[v] > depth_array[u]:\n        v = parent_array[v]\n    \n    # Move both nodes up until they meet\n    while u != v:\n        u = parent_array[u]\n        v = parent_array[v]\n    \n    return u\n\ndef calculate_min_energy(u: int, v: int, illusion_rates: List[int], tree: Dict[int, List[int]]) -> int:\n    \"\"\"Calculate the minimum energy required to move from room u to room v.\n\n    Args:\n        u (int): The starting room.\n        v (int): The destination room.\n        illusion_rates (List[int]): The list of current illusion rates for all rooms.\n        tree (Dict[int, List[int]]): The adjacency list representation of the tree.\n\n    Returns:\n        int: The minimum energy required to travel from room u to room v.\n    \"\"\"\n    n = len(illusion_rates)\n    parent_array = [-1] * (n + 1)\n    depth_array = [0] * (n + 1)\n    \n    # Precompute parent and depth arrays using DFS\n    dfs(1, -1, 0, tree, parent_array, depth_array)\n    \n    # Find the LCA of u and v\n    ancestor = lca(u, v, parent_array, depth_array)\n    \n    # Calculate the energy required to travel from u to v via the LCA\n    energy = 0\n    current = u\n    while current != ancestor:\n        next_node = parent_array[current]\n        energy += max(abs(illusion_rates[current - 1] + illusion_rates[next_node - 1]),\n                      abs(illusion_rates[current - 1] - illusion_rates[next_node - 1]))\n        current = next_node\n    \n    current = v\n    while current != ancestor:\n        next_node = parent_array[current]\n        energy += max(abs(illusion_rates[current - 1] + illusion_rates[next_node - 1]),\n                      abs(illusion_rates[current - 1] - illusion_rates[next_node - 1]))\n        current = next_node\n    \n    return energy\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        s = int(data[index])\n        t = int(data[index + 1])\n        index += 2\n        tree[s].append(t)\n        tree[t].append(s)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            c = int(data[index + 2])\n            update_illusion_rate(u, c, illusion_rates)\n            index += 3\n        elif query_type == 2:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            result = calculate_min_energy(u, v, illusion_rates, tree)\n            results.append(result)\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass MazeSolver:\n    def __init__(self, n: int, illusion_rates: List[int], tunnels: List[Tuple[int, int]]):\n        self.n = n\n        self.illusion_rates = illusion_rates\n        self.tunnels = tunnels\n        self.tree = [[] for _ in range(n + 1)]\n        self.parent = [-1] * (n + 1)\n        self.depth = [0] * (n + 1)\n        self.build_tree()\n        self.dfs(1, -1, 0)\n\n    def build_tree(self):\n        for u, v in self.tunnels:\n            self.tree[u].append(v)\n            self.tree[v].append(u)\n\n    def dfs(self, node: int, par: int, dep: int):\n        self.parent[node] = par\n        self.depth[node] = dep\n        for neighbor in self.tree[node]:\n            if neighbor != par:\n                self.dfs(neighbor, node, dep + 1)\n\n    def lca(self, u: int, v: int) -> int:\n        if self.depth[u] < self.depth[v]:\n            u, v = v, u\n        while self.depth[u] > self.depth[v]:\n            u = self.parent[u]\n        while u != v:\n            u = self.parent[u]\n            v = self.parent[v]\n        return u\n\n    def update_illusion_rate(self, room: int, new_rate: int):\n        self.illusion_rates[room - 1] = new_rate\n\n    def calculate_energy(self, u: int, v: int) -> int:\n        lca_node = self.lca(u, v)\n        energy = 0\n        current = u\n        while current != lca_node:\n            next_node = self.parent[current]\n            energy += self.calculate_segment_energy(current, next_node)\n            current = next_node\n        current = v\n        while current != lca_node:\n            next_node = self.parent[current]\n            energy += self.calculate_segment_energy(current, next_node)\n            current = next_node\n        return energy\n\n    def calculate_segment_energy(self, x: int, y: int) -> int:\n        ax = self.illusion_rates[x - 1]\n        ay = self.illusion_rates[y - 1]\n        return max(abs(ax + ay), abs(ax - ay))\n\ndef handle_queries(n: int, q: int, illusion_rates: List[int], tunnels: List[Tuple[int, int]], queries: List[Tuple[int, int, int]]) -> List[int]:\n    solver = MazeSolver(n, illusion_rates, tunnels)\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            _, u, c = query\n            solver.update_illusion_rate(u, c)\n        elif query[0] == 2:\n            _, u, v = query\n            energy = solver.calculate_energy(u, v)\n            results.append(energy)\n    return results\n\n# Input interface\nn, q = map(int, input().split())\nillusion_rates = list(map(int, input().split()))\ntunnels = [tuple(map(int, input().split())) for _ in range(n - 1)]\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Call the function and print results\nresults = handle_queries(n, q, illusion_rates, tunnels, queries)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass SegmentTree:\n    \"\"\"Segment Tree for efficient updates and queries of illusion rates.\"\"\"\n    \n    def __init__(self, data: List[int]):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        self.build(data)\n    \n    def build(self, data: List[int]):\n        \"\"\"Builds the segment tree from the initial data.\"\"\"\n        for i in range(self.n):\n            self.tree[i + self.n] = data[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]\n    \n    def update(self, index: int, value: int):\n        \"\"\"Updates the value at a specific index.\"\"\"\n        index += self.n\n        self.tree[index] = value\n        while index > 1:\n            index //= 2\n            self.tree[index] = self.tree[index * 2] + self.tree[index * 2 + 1]\n    \n    def query(self, left: int, right: int) -> int:\n        \"\"\"Queries the sum of values in a range [left, right).\"\"\"\n        result = 0\n        left += self.n\n        right += self.n\n        while left < right:\n            if left & 1:\n                result += self.tree[left]\n                left += 1\n            if right & 1:\n                right -= 1\n                result += self.tree[right]\n            left //= 2\n            right //= 2\n        return result\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: List[int], segment_tree: SegmentTree) -> None:\n    \"\"\"Updates the illusion rate of a specific room.\"\"\"\n    illusion_rates[room - 1] = new_rate\n    segment_tree.update(room - 1, new_rate)\n\ndef dfs_find_path(u: int, v: int, tunnels: List[List[int]], visited: List[bool], path: List[int]) -> bool:\n    \"\"\"DFS to find the path between two rooms.\"\"\"\n    if u == v:\n        path.append(u)\n        return True\n    visited[u] = True\n    path.append(u)\n    for neighbor in tunnels[u]:\n        if not visited[neighbor]:\n            if dfs_find_path(neighbor, v, tunnels, visited, path):\n                return True\n    path.pop()\n    return False\n\ndef calculate_minimum_energy(u: int, v: int, illusion_rates: List[int], tunnels: List[Tuple[int, int]]) -> int:\n    \"\"\"Calculates the minimum sum of energy required to travel from room u to room v.\"\"\"\n    n = len(illusion_rates)\n    adjacency_list = [[] for _ in range(n + 1)]\n    for s, t in tunnels:\n        adjacency_list[s].append(t)\n        adjacency_list[t].append(s)\n    \n    visited = [False] * (n + 1)\n    path = []\n    dfs_find_path(u, v, adjacency_list, visited, path)\n    \n    energy_sum = 0\n    for i in range(len(path) - 1):\n        x, y = path[i], path[i + 1]\n        energy_sum += max(abs(illusion_rates[x - 1] + illusion_rates[y - 1]), abs(illusion_rates[x - 1] - illusion_rates[y - 1]))\n    \n    return energy_sum\n\ndef main():\n    \"\"\"Main function to handle input/output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tunnels = []\n    for _ in range(n - 1):\n        s = int(data[index])\n        t = int(data[index + 1])\n        tunnels.append((s, t))\n        index += 2\n    \n    segment_tree = SegmentTree(illusion_rates)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1])\n        v = int(data[index + 2])\n        index += 3\n        \n        if query_type == 1:\n            update_illusion_rate(u, v, illusion_rates, segment_tree)\n        elif query_type == 2:\n            result = calculate_minimum_energy(u, v, illusion_rates, tunnels)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nimport networkx as nx\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: list) -> None:\n    \"\"\"Updates the illusion rate of a specified room.\"\"\"\n    illusion_rates[room - 1] = new_rate\n\ndef calculate_min_energy(start_room: int, end_room: int, illusion_rates: list, tree: nx.Graph) -> int:\n    \"\"\"Calculates the minimum energy required to move from start_room to end_room.\"\"\"\n    path = nx.shortest_path(tree, source=start_room, target=end_room)\n    total_energy = 0\n    for i in range(len(path) - 1):\n        room_x = path[i]\n        room_y = path[i + 1]\n        a_x = illusion_rates[room_x - 1]\n        a_y = illusion_rates[room_y - 1]\n        energy = max(abs(a_x + a_y), abs(a_x - a_y))\n        total_energy += energy\n    return total_energy\n\ndef main():\n    \"\"\"Main function to handle input parsing, tree construction, and query processing.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = nx.Graph()\n    for _ in range(n - 1):\n        s = int(data[index])\n        t = int(data[index + 1])\n        tree.add_edge(s, t)\n        index += 2\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            c = int(data[index + 2])\n            update_illusion_rate(u, c, illusion_rates)\n            index += 3\n        elif query_type == 2:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            result = calculate_min_energy(u, v, illusion_rates, tree)\n            results.append(result)\n            index += 3\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef update_illusion_rate(illusion_rates: List[int], u: int, c: int) -> None:\n    \"\"\"Updates the illusion rate of the specified room.\"\"\"\n    illusion_rates[u - 1] = c\n\ndef dfs(node: int, parent: int, depth: int, adj_list: List[List[int]], parent_array: List[int], depth_array: List[int]) -> None:\n    \"\"\"Performs Depth First Search to precompute parent and depth information.\"\"\"\n    parent_array[node] = parent\n    depth_array[node] = depth\n    for neighbor in adj_list[node]:\n        if neighbor != parent:\n            dfs(neighbor, node, depth + 1, adj_list, parent_array, depth_array)\n\ndef lca(u: int, v: int, parent_array: List[int], depth_array: List[int]) -> int:\n    \"\"\"Finds the Lowest Common Ancestor of two nodes.\"\"\"\n    if depth_array[u] < depth_array[v]:\n        u, v = v, u\n    while depth_array[u] > depth_array[v]:\n        u = parent_array[u]\n    while u != v:\n        u = parent_array[u]\n        v = parent_array[v]\n    return u\n\ndef calculate_energy(u: int, v: int, illusion_rates: List[int], parent_array: List[int], depth_array: List[int]) -> int:\n    \"\"\"Calculates the minimum energy required to travel from room u to room v.\"\"\"\n    ancestor = lca(u, v, parent_array, depth_array)\n    energy = 0\n    while u != ancestor:\n        energy += max(abs(illusion_rates[u - 1] + illusion_rates[parent_array[u] - 1]), abs(illusion_rates[u - 1] - illusion_rates[parent_array[u] - 1]))\n        u = parent_array[u]\n    while v != ancestor:\n        energy += max(abs(illusion_rates[v - 1] + illusion_rates[parent_array[v] - 1]), abs(illusion_rates[v - 1] - illusion_rates[parent_array[v] - 1]))\n        v = parent_array[v]\n    return energy\n\ndef minimum_energy_path(n: int, queries: List[Tuple[int, int, int]], edges: List[Tuple[int, int]], illusion_rates: List[int]) -> List[int]:\n    \"\"\"Processes queries to update illusion rates and calculate minimum energy paths.\"\"\"\n    adj_list = [[] for _ in range(n)]\n    for s, t in edges:\n        adj_list[s - 1].append(t - 1)\n        adj_list[t - 1].append(s - 1)\n\n    parent_array = [-1] * n\n    depth_array = [0] * n\n    dfs(0, -1, 0, adj_list, parent_array, depth_array)\n\n    results = []\n    for query in queries:\n        if query[0] == 1:\n            update_illusion_rate(illusion_rates, query[1], query[2])\n        elif query[0] == 2:\n            energy = calculate_energy(query[1] - 1, query[2] - 1, illusion_rates, parent_array, depth_array)\n            results.append(energy)\n    return results\n\n# Input interface\nn, q = map(int, input().split())\nillusion_rates = list(map(int, input().split()))\nedges = [tuple(map(int, input().split())) for _ in range(n - 1)]\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Output interface\nresults = minimum_energy_path(n, queries, edges, illusion_rates)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: List[int]) -> None:\n    \"\"\"Update the illusion rate of a specified room.\n\n    Args:\n        room: The room number whose illusion rate is to be updated.\n        new_rate: The new illusion rate to be set for the room.\n        illusion_rates: The list of current illusion rates for all rooms.\n    \"\"\"\n    illusion_rates[room - 1] = new_rate\n\ndef calculate_min_energy(u: int, v: int, illusion_rates: List[int], tree: List[List[int]]) -> int:\n    \"\"\"Calculate the minimum energy required to travel from room u to room v.\n\n    Args:\n        u: The starting room number.\n        v: The destination room number.\n        illusion_rates: The list of current illusion rates for all rooms.\n        tree: The adjacency list representing the tree structure of the maze.\n\n    Returns:\n        The minimum energy required to travel from room u to room v.\n    \"\"\"\n    # Precompute LCA and path information using DFS\n    parent = [-1] * (len(tree))\n    depth = [-1] * (len(tree))\n    visited = [False] * (len(tree))\n    \n    def dfs(node: int, par: int, dep: int):\n        visited[node] = True\n        parent[node] = par\n        depth[node] = dep\n        for neighbor in tree[node]:\n            if not visited[neighbor]:\n                dfs(neighbor, node, dep + 1)\n    \n    dfs(1, -1, 0)  # Assuming room numbers start from 1\n\n    def lca(x: int, y: int) -> int:\n        if depth[x] < depth[y]:\n            x, y = y, x\n        while depth[x] > depth[y]:\n            x = parent[x]\n        while x != y:\n            x = parent[x]\n            y = parent[y]\n        return x\n\n    def path_energy(x: int, y: int) -> int:\n        energy = 0\n        while x != y:\n            energy += max(abs(illusion_rates[x - 1] + illusion_rates[parent[x] - 1]),\n                          abs(illusion_rates[x - 1] - illusion_rates[parent[x] - 1]))\n            x = parent[x]\n        return energy\n\n    ancestor = lca(u, v)\n    return path_energy(u, ancestor) + path_energy(v, ancestor)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        s = int(data[index])\n        t = int(data[index + 1])\n        index += 2\n        tree[s].append(t)\n        tree[t].append(s)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        if query_type == 1:\n            u = int(data[index + 1])\n            c = int(data[index + 2])\n            index += 3\n            update_illusion_rate(u, c, illusion_rates)\n        elif query_type == 2:\n            u = int(data[index + 1])\n            v = int(data[index + 2])\n            index += 3\n            result = calculate_min_energy(u, v, illusion_rates, tree)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef update_illusion_rate(room: int, new_rate: int, illusion_rates: List[int]) -> None:\n    \"\"\"Updates the illusion rate of a specified room.\"\"\"\n    illusion_rates[room - 1] = new_rate\n\ndef dfs(tree: List[List[int]], current: int, parent: int, path: List[int]) -> None:\n    \"\"\"Performs Depth First Search to find the path from root to a node.\"\"\"\n    path.append(current)\n    for neighbor in tree[current]:\n        if neighbor != parent:\n            dfs(tree, neighbor, current, path)\n\ndef min_energy_path(u: int, v: int, illusion_rates: List[int], tree: List[List[int]]) -> int:\n    \"\"\"Calculates the minimum energy required to travel from room u to room v.\"\"\"\n    path_u = []\n    path_v = []\n    dfs(tree, u, -1, path_u)\n    dfs(tree, v, -1, path_v)\n\n    # Find the common ancestor\n    i = 0\n    while i < len(path_u) and i < len(path_v) and path_u[i] == path_v[i]:\n        i += 1\n\n    # Calculate energy for the path from u to v\n    energy = 0\n    for j in range(i, len(path_u) - 1):\n        x, y = path_u[j], path_u[j + 1]\n        energy += max(abs(illusion_rates[x - 1] + illusion_rates[y - 1]), abs(illusion_rates[x - 1] - illusion_rates[y - 1]))\n\n    for j in range(i, len(path_v) - 1):\n        x, y = path_v[j], path_v[j + 1]\n        energy += max(abs(illusion_rates[x - 1] + illusion_rates[y - 1]), abs(illusion_rates[x - 1] - illusion_rates[y - 1]))\n\n    return energy\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    q = int(data[index + 1])\n    index += 2\n    \n    illusion_rates = list(map(int, data[index:index + n]))\n    index += n\n    \n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        s = int(data[index])\n        t = int(data[index + 1])\n        index += 2\n        tree[s].append(t)\n        tree[t].append(s)\n    \n    results = []\n    for _ in range(q):\n        query_type = int(data[index])\n        u = int(data[index + 1])\n        v = int(data[index + 2])\n        index += 3\n        \n        if query_type == 1:\n            update_illusion_rate(u, v, illusion_rates)\n        elif query_type == 2:\n            result = min_energy_path(u, v, illusion_rates, tree)\n            results.append(result)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe main challenge is to efficiently handle up to 100,000 rooms and queries, ensuring that updates to illusion rates and path calculations are performed quickly. The solution must be optimized for both time and space complexity, leveraging data structures that support dynamic updates and fast queries.\nrequirement pool:\n- Efficiently handle up to 100,000 rooms and queries\n- Implement fast path calculation between any two rooms\n- Allow dynamic updates to room illusion rates\n- Ensure the solution is scalable and maintains performance\n- Provide a user-friendly interface for input and output\nWe will use a combination of Depth First Search (DFS) and Lowest Common Ancestor (LCA) techniques to efficiently handle the path queries in the tree structure. For dynamic updates of the illusion rates, we will maintain an array that can be updated in constant time. The DFS will help in precomputing the necessary information for LCA, and the LCA will allow us to quickly find the path between any two nodes. This approach ensures that both updates and queries are handled efficiently, even for large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected acyclic graph. In this problem, the maze is represented as a tree with rooms as nodes and tunnels as edges.\n\n    'illusion rate'\n    Explanation: Each room has an associated illusion rate, which affects the energy cost to travel between rooms.\n\n    'energy'\n    Explanation: The energy required to travel between two rooms is determined by the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the respective rooms.\n\n    'query'\n    Explanation: There are two types of queries: updating the illusion rate of a room and finding the minimum energy required to travel between two rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase indicates that the energy cost is the maximum of the absolute values of the sum and difference of the illusion rates of two connected rooms. In code, this can be implemented using Python's built-in `max` and `abs` functions.\n\n# [degree adverb]\n    'minimum'\n    Explanation: For type 2 queries, we need to find the minimum sum of energy needed to travel from one room to another. This involves calculating the energy for all possible paths and selecting the smallest value.\n\n# [code logic]\n1. Parse the input to extract the number of rooms, number of queries, initial illusion rates, and tunnel connections.\n2. Construct the tree using adjacency lists based on the tunnel connections.\n3. Precompute necessary information for LCA using DFS, such as parent and depth arrays.\n4. For each query:\n   - If it's a type 1 query, update the illusion rate of the specified room.\n   - If it's a type 2 query, use LCA to find the path between the two specified rooms and calculate the minimum energy required using the precomputed information.\n\n# [edge case]\n    1. Minimum number of rooms (n=2) with maximum illusion rates = 10^9\n       Explanation: This tests the handling of large values in energy calculations.\n       Expected output: The energy will be max(|10^9 + 10^9|, |10^9 - 10^9|) = 2 * 10^9.\n\n    2. All rooms have an illusion rate of zero.\n       Explanation: This tests if the code correctly handles zero values in calculations.\n       Expected output: The energy for any path will be zero since max(|0 + 0|, |0 - 0|) = 0.\n\n    3. A single update query followed by a path query that includes the updated room.\n       Explanation: This tests if updates are correctly applied before path calculations.\n       Expected output: The output should reflect the updated illusion rate in energy calculations.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic should handle them correctly by ensuring that updates are applied before path queries and that calculations handle large and zero values appropriately.\n", "requirement analysis:\nThe main challenge is to efficiently handle updates to the illusion rates and compute the minimum energy path in a tree structure. The solution must be optimized for large inputs, ensuring quick response times for both types of queries.\nrequirement pool:\n- Efficiently handle updates to illusion rates\n- Compute minimum energy path between rooms\n- Optimize for large input sizes\n- Ensure accurate energy calculations\n- Provide a user-friendly interface\nWe will use Depth First Search (DFS) to preprocess the tree and compute the minimum energy path efficiently. We will utilize adjacency lists to represent the tree and handle updates to illusion rates using direct list manipulation. For efficient query handling, we will use a combination of DFS and path compression techniques.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It is used in the calculation of energy as max(|a_x + a_y|, |a_x - a_y|).\n\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there are no cycles, and each pair of rooms is connected by exactly one path.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase indicates the calculation of energy required to travel between two rooms. It involves taking the maximum of the absolute values of the sum and difference of the illusion rates of two rooms.\n\n# [degree adverb]\n    'minimum'\n    Explanation: For type 2 queries, we need to find the minimum sum of energy required to travel from one room to another.\n\n# [code logic]\n    1. Parse the input to get the number of rooms, queries, initial illusion rates, and tunnel connections.\n    2. Represent the tree using adjacency lists.\n    3. Implement DFS to preprocess the tree and compute paths.\n    4. Handle type 1 queries by updating the illusion rate directly in the list.\n    5. For type 2 queries, use DFS and path compression to efficiently calculate the minimum energy path.\n\n# [edge case]\n    Input: 2 1\n           0 0\n           1 2\n           2 1 2\n    Expected Output: 0\n    Explanation: Both rooms have an illusion rate of 0, so the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    Input: 3 1\n           1000000000 -1000000000 1000000000\n           1 2\n           2 3\n           2 1 3\n    Expected Output: 3000000000\n    Explanation: The energy required is max(|1000000000 + (-1000000000)|, |1000000000 - (-1000000000)|) = 2000000000 for the first tunnel and max(|-1000000000 + 1000000000|, |-1000000000 - 1000000000|) = 1000000000 for the second tunnel.\n\n    Input: 4 1\n           -1 -1 -1 -1\n           1 2\n           2 3\n           3 4\n           2 1 4\n    Expected Output: 6\n    Explanation: The energy required is max(|-1 + (-1)|, |-1 - (-1)|) = 2 for each tunnel, totaling to 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using DFS and path compression will handle these cases efficiently.\n", "requirement analysis:\nThe main challenge is to efficiently handle updates to the illusion rates and compute the minimum energy path in a tree structure. The solution must be optimized for large inputs, ensuring quick updates and queries. The use of data structures like segment trees or heavy-light decomposition may be necessary to achieve the required performance.\nrequirement pool:\n- Efficiently handle updates to illusion rates\n- Compute minimum energy path between rooms\n- Optimize for large input sizes\n- Provide clear and concise output\n- Ensure the solution is scalable\nWe will use a combination of Depth First Search (DFS) for tree traversal and a Segment Tree or Heavy-Light Decomposition (HLD) to efficiently handle updates and queries. This approach will allow us to efficiently update the illusion rates and compute the minimum energy path between rooms in a tree structure. The Segment Tree or HLD will help in managing the dynamic changes in the tree and provide quick access to path queries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected acyclic graph. In this problem, the maze is represented as a tree with rooms as nodes and tunnels as edges.\n\n    'illusion rate'\n    Explanation: Each room has an associated illusion rate, which affects the energy cost to travel between rooms.\n\n    'energy'\n    Explanation: The energy required to travel between two rooms is determined by the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the respective rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy cost is the maximum of the absolute values of the sum and difference of the illusion rates of two connected rooms. In code, this can be implemented using the `max` and `abs` functions: `max(abs(a_x + a_y), abs(a_x - a_y))`.\n\n# [degree adverb] \n    'minimum': This indicates that for type 2 queries, we need to find the path with the minimum sum of energy costs from room u to room v. This can be implemented using algorithms that find the shortest path in a tree, such as DFS or BFS combined with data structures like Segment Tree or HLD for efficiency.\n\n# [code logic]\n1. Parse the input to get the number of rooms (n), number of queries (q), initial illusion rates, and the connections between rooms.\n2. Construct the tree using adjacency lists based on the given connections.\n3. Implement a data structure (Segment Tree or HLD) to handle dynamic updates and queries efficiently.\n4. For each query:\n   - If it's a type 1 query, update the illusion rate of the specified room.\n   - If it's a type 2 query, calculate the minimum energy path from room u to room v using DFS or BFS and the data structure for efficient path queries.\n5. Output the result for each type 2 query.\n\n# [edge case] \n    Edge Case 1: Minimum number of rooms and queries\n    Input: \n    ```\n    2 1\n    0 0\n    1 2\n    2 1 2\n    ```\n    Expected Output: 0\n    Explanation: With both rooms having an illusion rate of 0, the energy cost is max(|0 + 0|, |0 - 0|) = 0.\n\n    Edge Case 2: All rooms have maximum illusion rate\n    Input:\n    ```\n    3 1\n    1000000000 1000000000 1000000000\n    1 2\n    2 3\n    2 1 3\n    ```\n    Expected Output: 2000000000\n    Explanation: The energy cost between any two connected rooms is max(|1000000000 + 1000000000|, |1000000000 - 1000000000|) = 2000000000.\n\n    Edge Case 3: Illusion rate changes to maximum negative value\n    Input:\n    ```\n    3 2\n    1 -1 1\n    1 2\n    2 3\n    1 2 -1000000000\n    2 1 3\n    ```\n    Expected Output: 2000000001\n    Explanation: After changing room 2's illusion rate to -1000000000, the energy cost from room 1 to room 3 is max(|1 + (-1000000000)|, |1 - (-1000000000)|) + max(|-1000000000 + 1|, |-1000000000 - 1|) = 2000000001.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic using DFS/BFS and Segment Tree or HLD will naturally handle these scenarios due to their comprehensive nature in managing tree structures and dynamic updates.\n", "requirement analysis:\nThe solution must efficiently handle up to 100,000 rooms and queries, ensuring quick updates to illusion rates and accurate energy calculations for room transitions. The tree structure of the maze allows for efficient traversal algorithms.\nrequirement pool:\n- Efficiently handle large inputs and queries.\n- Accurately calculate energy required for room transitions.\n- Allow dynamic updates to room illusion rates.\n- Ensure solution is scalable and responsive.\n- Provide clear output format for energy calculations.\nWe will use a combination of Depth First Search (DFS) and Lowest Common Ancestor (LCA) techniques to efficiently handle the tree structure of the maze. This will allow us to quickly compute the minimum energy required for room transitions. We will also maintain an array to store the illusion rates, which can be updated dynamically as per the queries. The use of DFS will help in precomputing necessary information for LCA, making the energy calculation queries efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It can be dynamically changed through queries.\n\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there is a unique path between any two rooms, and it does not contain cycles.\n\n    'energy'\n    Explanation: The energy required to travel between rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy required to travel between two rooms is the maximum of the absolute values of the sum and difference of their illusion rates. In code, this can be implemented using the `max` function and `abs` for absolute value.\n\n# [degree adverb]\n    'minimum': In the context of type 2 queries, it refers to finding the minimum sum of energy needed to travel from one room to another. This involves calculating the energy for each segment of the path and summing them up.\n\n# [code logic]\n    1. Parse the input to get the number of rooms, queries, initial illusion rates, and tunnel connections.\n    2. Construct the tree using adjacency lists based on tunnel connections.\n    3. Use DFS to precompute necessary information for LCA, such as parent and depth arrays.\n    4. Implement a function to handle type 1 queries by updating the illusion rate of a specified room.\n    5. Implement a function to handle type 2 queries by calculating the minimum energy required using LCA to find the path between two rooms.\n    6. For each type 2 query, traverse the path and compute the energy using the given formula, summing up the energies for each segment.\n\n# [edge case]\n    Input: 2 1\n           0 0\n           1 2\n           2 1 2\n    Output: 0\n    Explanation: Both rooms have an illusion rate of 0, so traveling between them requires 0 energy.\n\n    Input: 3 1\n           10 -10 10\n           1 2\n           2 3\n           2 1 3\n    Output: 30\n    Explanation: The path is 1 \u2192 2 \u2192 3. Energy calculations are max(|10 + (-10)|, |10 - (-10)|) = 20 for 1 \u2192 2 and max(|-10 + 10|, |-10 - 10|) = 10 for 2 \u2192 3.\n\n    Input: 4 1\n           -5 -5 -5 -5\n           1 2\n           2 3\n           3 4\n           2 1 4\n    Output: 30\n    Explanation: The path is 1 \u2192 2 \u2192 3 \u2192 4. Each segment requires max(|-5 + (-5)|, |-5 - (-5)|) = 10 energy.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating energy using max(|a_x + a_y|, |a_x - a_y|) handles all cases correctly.\n", "requirement analysis:\nThe main challenge is to efficiently handle updates to the illusion rates and compute the minimum energy path in a tree structure. The solution must be optimized for large inputs, ensuring quick updates and queries. The tree structure allows for efficient traversal and pathfinding algorithms.\nrequirement pool:\n- Efficiently handle updates to the illusion rates of rooms.\n- Compute the minimum energy path between any two rooms quickly.\n- Ensure the solution can handle the maximum constraints of input size.\n- Provide a clear and concise output format for query results.\n- Optimize the user interface for ease of input and output handling.\nWe will use a combination of Depth First Search (DFS) and Lowest Common Ancestor (LCA) techniques to efficiently handle the queries. The DFS will help in precomputing necessary information for each node, and LCA will be used to quickly find the path between any two nodes. We will also use a Segment Tree to handle updates to the illusion rates efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It can be changed by queries, impacting the calculation of energy.\n\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there is a unique path between any two rooms, and it has no cycles.\n\n    'energy calculation'\n    Explanation: The energy required to travel between two rooms is determined by the maximum of the absolute values of the sum and difference of their illusion rates.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase indicates that the energy required to travel between two rooms is the greater of the absolute value of the sum or the absolute value of the difference of their illusion rates. In code, this can be implemented using the `max` function with `abs` for absolute values.\n\n# [degree adverb]\n    'minimum'\n    Explanation: For type 2 queries, we need to find the minimum sum of energy required to travel from one room to another. This involves finding the path with the least energy cost.\n\n# [code logic]\n    - Use DFS to precompute necessary information for each node, such as parent and depth.\n    - Implement LCA to quickly find the path between any two nodes.\n    - Use a Segment Tree to efficiently handle updates to illusion rates.\n    - For type 2 queries, calculate the energy required for each segment of the path using the precomputed information and update results based on changes in illusion rates.\n\n# [edge case]\n    Case 1: When all rooms have an illusion rate of 0.\n    Input: \n    ```\n    3 2\n    0 0 0\n    1 2\n    2 3\n    2 1 3\n    ```\n    Expected Output: 0\n    Explanation: Since all illusion rates are zero, the energy required for any path is zero.\n\n    Case 2: When there is only one room.\n    Input:\n    ```\n    1 1\n    5\n    2 1 1\n    ```\n    Expected Output: 0\n    Explanation: No movement is needed as there is only one room, so energy required is zero.\n\n    Case 3: When a query changes an illusion rate to its maximum possible value.\n    Input:\n    ```\n    3 3\n    1 2 3\n    1 2\n    2 3\n    1 1 1000000000\n    2 1 3\n    ```\n    Expected Output: Large value (depends on implementation)\n    Explanation: Changing an illusion rate to a very high value will significantly increase the energy required for paths involving that room.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases related to updates in illusion rates and single-room scenarios.\n    \n```python\ndef handle_edge_cases(n, q, illusion_rates, connections, queries):\n    if n == 1:\n        return [0] * q\n    \n    # Handle updates efficiently using Segment Tree or similar data structure\n    # Implement logic for handling maximum possible values in queries\n```\n\n", "requirement analysis:\nThe requirements focus on efficiently processing queries related to changing room illusion rates and calculating the minimum energy required to traverse the maze. The solution must handle large inputs and provide accurate results quickly.\nrequirement pool:\n- Efficient query processing for changing illusion rates\n- Accurate calculation of minimum energy required\n- Handling large inputs without performance degradation\n- User-friendly interface for input and output\n- Scalability for future enhancements\nWe will use a combination of Depth First Search (DFS) and Segment Tree to efficiently handle the queries. The DFS will help in finding the path between two nodes in the tree, and the Segment Tree will allow us to update and query the illusion rates efficiently. This approach ensures that we can handle the large input sizes and number of queries within the given constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It can be changed by queries, impacting the calculation of energy.\n\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there is a unique path between any two rooms, and it is acyclic.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase describes the energy required to travel between two rooms. It is the maximum of the absolute values of the sum and difference of their illusion rates. In code, this can be implemented using the `max` function and `abs` for absolute values.\n\n# [degree adverb]\n    'minimum'\n    Explanation: For type 2 queries, we need to find the minimum sum of energy required to travel from one room to another. This involves calculating the energy for each segment of the path and summing them up.\n\n# [code logic]\n    1. Parse the input to get the number of rooms, queries, initial illusion rates, and tunnel connections.\n    2. Construct the tree using adjacency lists from the tunnel connections.\n    3. Implement DFS to find paths between rooms for type 2 queries.\n    4. Use a Segment Tree to efficiently update illusion rates for type 1 queries and calculate energy for type 2 queries.\n    5. For each type 2 query, calculate the energy required for each segment in the path using `max(|a_x + a_y|, |a_x - a_y|)` and sum them up.\n\n# [edge case]\n    Case 1: Minimum number of rooms\n    Input: \n    ```\n    2 1\n    0 0\n    1 2\n    2 1 2\n    ```\n    Expected Output: \n    ```\n    0\n    ```\n    Explanation: With both rooms having an illusion rate of 0, the energy required is `max(|0 + 0|, |0 - 0|) = 0`.\n\n    Case 2: Maximum illusion rate change\n    Input:\n    ```\n    3 2\n    10^9 -10^9 0\n    1 2\n    2 3\n    1 1 -10^9\n    2 1 3\n    ```\n    Expected Output:\n    ```\n    20^9\n    ```\n    Explanation: After changing the illusion rate of room 1, the energy required is `max(|-10^9 + (-10^9)|, |-10^9 - (-10^9)|) = max(20^9, 0) = 20^9`.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using DFS and Segment Tree will handle these cases efficiently.\n", "requirement analysis:\nThe solution must efficiently handle up to 100,000 rooms and queries, ensuring quick updates to illusion rates and accurate energy calculations for pathfinding. The tree structure of the maze allows for efficient traversal algorithms.\nrequirement pool:\n- Efficiently handle large inputs and queries.\n- Accurately calculate energy required for room transitions.\n- Enable dynamic updates to room illusion rates.\n- Ensure solution scalability for maximum input sizes.\n- Provide clear output format for energy calculations.\nWe will use Depth First Search (DFS) to traverse the tree and calculate the minimum energy required for each query. For dynamic updates to the illusion rates, we will use an array to store the rates and update them efficiently. The networkx library can be used to represent the tree structure and perform DFS efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected graph with no cycles, which means there is exactly one path between any two nodes (rooms in this case).\n\n    'illusion rate'\n    Explanation: This is a value associated with each room that affects the energy calculation when moving between rooms.\n\n    'energy calculation'\n    Explanation: The energy required to move between two rooms is determined by the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the respective rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This indicates that for each move between two rooms, the energy required is the maximum of the absolute sum or absolute difference of their illusion rates. In code, this can be implemented using the `max` function and `abs` for absolute values.\n\n# [degree adverb]\n    'minimum': In the context of the queries, it refers to finding the path with the least total energy cost from room u to room v. This can be implemented using algorithms like DFS or BFS to explore paths and calculate their energy costs.\n\n# [code logic]\n1. Parse the input to get the number of rooms, queries, initial illusion rates, and connections between rooms.\n2. Represent the maze as a tree using an adjacency list.\n3. For each query:\n   - If it's a type 1 query, update the illusion rate of the specified room.\n   - If it's a type 2 query, use DFS or BFS to find the path from room u to room v and calculate the total energy using the given formula.\n4. Output the result for each type 2 query.\n\n# [edge case]\n    1. Minimum number of rooms (n=2) with maximum illusion rates:\n       Input: \n       ```\n       2 1\n       1000000000 -1000000000\n       1 2\n       2 1 2\n       ```\n       Expected Output: \n       ```\n       2000000000\n       ```\n       Explanation: The only path is from room 1 to room 2, and the energy is max(|1000000000 + (-1000000000)|, |1000000000 - (-1000000000)|) = 2000000000.\n\n    2. All rooms have zero illusion rate:\n       Input:\n       ```\n       3 1\n       0 0 0\n       1 2\n       2 3\n       2 1 3\n       ```\n       Expected Output:\n       ```\n       0\n       ```\n       Explanation: All rooms have zero illusion rate, so any path will have zero energy cost.\n\n    3. Single query with no change in illusion rates:\n       Input:\n       ```\n       4 1\n       5 -5 5 -5\n       1 2\n       2 3\n       3 4\n       2 1 4\n       ```\n       Expected Output:\n       ```\n       20\n       ```\n       Explanation: The path from room 1 to room 4 is through rooms 2 and 3, with energy costs calculated at each step.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating illusion rates and calculating path energy using DFS/BFS will handle these cases correctly.\n", "requirement analysis:\nThe main challenge is to efficiently handle updates to the illusion rates and calculate the minimum energy path in a tree structure. The solution must be optimized for large inputs, ensuring quick response times for both types of queries. The algorithm should leverage the tree structure for efficient pathfinding and updates.\nrequirement pool:\n- Implement an efficient algorithm for pathfinding in a tree structure.\n- Develop a method to update illusion rates dynamically.\n- Optimize the solution to handle up to 100,000 queries efficiently.\n- Ensure the solution is robust and handles edge cases.\n- Provide clear and concise output for each query.\nWe will use a combination of Depth First Search (DFS) and Lowest Common Ancestor (LCA) techniques to efficiently handle pathfinding in the tree structure. For dynamic updates of illusion rates, we will maintain an array to store the current illusion rates and update it as needed. The DFS will help in precomputing necessary information for LCA, which will allow us to quickly compute the minimum energy path between any two rooms. This approach is efficient and suitable for handling large inputs and multiple queries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It can be dynamically changed through queries.\n\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there is a unique path between any two rooms, and it is acyclic.\n\n    'energy calculation'\n    Explanation: The energy required to travel between two rooms is determined by the maximum of the absolute values of the sum and difference of their illusion rates.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)'\n    Explanation: This phrase indicates that the energy required to travel between two rooms is the greater of the absolute value of the sum or the absolute value of the difference of their illusion rates. In code, this can be implemented using the `max` function with `abs`.\n\n# [degree adverb]\n    'minimum'\n    Explanation: For type 2 queries, we need to find the minimum sum of energy required to travel from one room to another. This involves finding the path with the least total energy cost.\n\n# [code logic]\n    1. Parse the input to get the number of rooms, queries, initial illusion rates, and tunnel connections.\n    2. Construct the tree using adjacency lists based on tunnel connections.\n    3. Implement DFS to precompute necessary information for LCA, such as parent and depth arrays.\n    4. For type 1 queries, update the illusion rate of the specified room.\n    5. For type 2 queries, use LCA to find the path between two rooms and calculate the total energy using the given formula.\n    6. Output the result for each type 2 query.\n\n# [edge case]\n    Case 1: Minimum number of rooms (n=2)\n    Input: \n    ```\n    2 1\n    5 -5\n    1 2\n    2 1 2\n    ```\n    Expected Output: \n    ```\n    10\n    ```\n    Explanation: Only one tunnel exists, and energy is calculated as max(|5 + (-5)|, |5 - (-5)|) = 10.\n\n    Case 2: All illusion rates are zero\n    Input:\n    ```\n    3 1\n    0 0 0\n    1 2\n    2 3\n    2 1 3\n    ```\n    Expected Output:\n    ```\n    0\n    ```\n    Explanation: Energy between any rooms is zero since all illusion rates are zero.\n\n    Case 3: Large illusion rates\n    Input:\n    ```\n    3 1\n    1000000000 -1000000000 1000000000\n    1 2\n    2 3\n    2 1 3\n    ```\n    Expected Output:\n    ```\n    3000000000\n    ```\n    Explanation: Energy calculation involves large numbers, ensuring handling of large values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using DFS and LCA will efficiently handle these scenarios by correctly calculating energy based on current illusion rates and tree structure.\n", "requirement analysis:\nThe project requires handling a tree structure of rooms with dynamic updates to room properties and efficient path calculations. The main challenge is to ensure the solution can handle the upper limits of input size efficiently, both in terms of time and space complexity.\nrequirement pool:\n- Efficiently handle up to 100,000 rooms and queries\n- Implement dynamic updates to room illusion rates\n- Calculate minimum energy paths quickly\n- Ensure the solution is scalable and maintainable\n- Provide clear and concise output for each query\nWe will use a combination of Depth First Search (DFS) and Lowest Common Ancestor (LCA) techniques to efficiently handle the tree structure and path queries. We will maintain an array to store the illusion rates and update it dynamically. For path queries, we will precompute the necessary data to quickly calculate the minimum energy required using the properties of the tree and the given energy formula.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'illusion rate'\n    Explanation: The illusion rate is a property of each room that affects the energy required to travel between rooms. It can be changed dynamically with queries.\n\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there is exactly one path between any two rooms, and it has no cycles.\n\n    'energy'\n    Explanation: The energy required to travel between two rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy required to travel between two rooms is the maximum of the absolute values of the sum and difference of their illusion rates. In code, this can be implemented using the `max` function and `abs` function.\n\n# [degree adverb]\n    'minimum': In the context of type 2 queries, it refers to finding the minimum sum of energy needed to travel from one room to another. This involves calculating the energy for each segment of the path and summing them up.\n\n# [code logic]\n    1. Parse the input to get the number of rooms, queries, initial illusion rates, and tunnel connections.\n    2. Construct the tree using adjacency lists based on tunnel connections.\n    3. Implement DFS to precompute necessary data for LCA and path queries.\n    4. Handle type 1 queries by updating the illusion rate of a specified room.\n    5. Handle type 2 queries by calculating the minimum energy required using precomputed data and the energy formula.\n    6. Output results for type 2 queries.\n\n# [edge case]\n    Case 1: Minimum number of rooms (n=2)\n    Input: \n    ```\n    2 1\n    0 0\n    1 2\n    2 1 2\n    ```\n    Expected Output: 0\n    Explanation: With both rooms having an illusion rate of 0, the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    Case 2: Maximum illusion rate change\n    Input:\n    ```\n    3 2\n    10^9 -10^9 0\n    1 2\n    2 3\n    1 1 -10^9\n    2 1 3\n    ```\n    Expected Output: max(|-10^9 + (-10^9)|, |-10^9 - (-10^9)|) = max(2*10^9, 0) = 2*10^9\n\n    Case 3: All rooms have zero illusion rate initially\n    Input:\n    ```\n    4 1\n    0 0 0 0\n    1 2\n    2 3\n    3 4\n    2 1 4\n    ```\n    Expected Output: 0\n    Explanation: Since all rooms have an illusion rate of zero, the energy required for any path is zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should handle these cases correctly by considering the properties of absolute values and maximum function in energy calculation.\n", "requirement analysis:\nThe main challenge is to efficiently handle updates to the illusion rates and compute the minimum energy path in a tree structure. The solution must be optimized for large inputs, ensuring quick updates and fast query responses. The use of data structures like segment trees or heavy-light decomposition may be necessary to achieve the desired performance.\nrequirement pool:\n- Efficiently handle updates to room illusion rates\n- Compute minimum energy path between two rooms\n- Optimize for large input sizes\n- Ensure accurate energy calculations\n- Provide a user-friendly interface for input and output\nWe will use a combination of Depth First Search (DFS) for tree traversal and a Segment Tree or Heavy-Light Decomposition to efficiently handle updates and queries. This approach will allow us to efficiently update the illusion rates and compute the minimum energy path between two rooms in a tree structure. The Segment Tree will help in managing the updates and queries in logarithmic time, which is crucial given the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: The maze is structured as a tree, meaning there are no cycles, and each room is connected in a hierarchical manner. This allows for efficient traversal using algorithms like DFS.\n\n    'illusion rate'\n    Explanation: Each room has an associated illusion rate, which affects the energy required to travel between rooms. This rate can be updated dynamically.\n\n    'energy calculation'\n    Explanation: The energy required to move between rooms is calculated using the formula max(|a_x + a_y|, |a_x - a_y|), where a_x and a_y are the illusion rates of the rooms.\n\n# [phrase showing quantity relationship]\n    'max(|a_x + a_y|, |a_x - a_y|)': This phrase indicates that the energy required to move between two rooms is the maximum of the absolute sum or difference of their illusion rates. In code, this can be implemented using the `max` function and `abs` for absolute values.\n\n# [degree adverb]\n    'minimum': In the context of type 2 queries, it refers to finding the minimum sum of energy needed to travel from one room to another. This can be implemented by calculating the energy for all possible paths and selecting the smallest sum.\n\n# [code logic]\n1. Parse the input to extract the number of rooms, queries, initial illusion rates, and tunnel connections.\n2. Construct the tree using adjacency lists based on the tunnel connections.\n3. Implement DFS to traverse the tree and calculate paths.\n4. Use a Segment Tree or Heavy-Light Decomposition to efficiently handle updates to illusion rates and compute minimum energy paths.\n5. For type 1 queries, update the illusion rate of the specified room.\n6. For type 2 queries, calculate the minimum energy required to travel from room u to room v using the current illusion rates.\n\n# [edge case]\n    Input: 2 1\n           0 0\n           1 2\n           2 1 2\n    Output: 0\n    Explanation: With both rooms having an illusion rate of 0, the energy required is max(|0 + 0|, |0 - 0|) = 0.\n\n    Input: 3 2\n           1000000000 -1000000000 1000000000\n           1 2\n           2 3\n           2 1 3\n           1 1 -1000000000\n    Output: 3000000000\n    Explanation: The initial path requires max(|1000000000 + (-1000000000)|, |1000000000 - (-1000000000)|) = 2000000000 energy for the first segment and max(|-1000000000 + 1000000000|, |-1000000000 - 1000000000|) = 1000000000 for the second segment.\n\n    Input: 4 3\n           -5 -5 -5 -5\n           1 2\n           2 3\n           3 4\n           2 1 4\n           1 3 5\n           2 1 4\n    Output: 30\n    Explanation: Initially, each segment requires max(|-5 + (-5)|, |-5 - (-5)|) = 10 energy. After updating room 3's illusion rate to 5, the path changes accordingly.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases involving large values and zero values efficiently.\n```python\ndef handle_edge_cases(n, q, illusion_rates, tunnels, queries):\n    # Initialize data structures for tree representation and segment tree\n    # Implement logic to handle large values and zero values efficiently\n\n    # Example handling for zero values:\n    if all(rate == 0 for rate in illusion_rates):\n        return [0] * q\n\n    # Example handling for large values:\n    # Ensure calculations do not overflow by using appropriate data types\n\n    # Implement main logic for handling queries and updates\n```\n"], "scores": [], "pass_results": [false, true, false, false, true, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 182, "examples": "\nInput\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the number of rooms in the maze and the number of queries.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 |a_i| \u2264 10^9) \u2014 inital illusion rate of each room.\n\nThe i-th of the next n-1 lines contains two integers s_i and t_i (1 \u2264 s_i, t_i \u2264 n), meaning there is a tunnel connecting s_i-th room and t_i-th room. The given edges form a tree.\n\nThe next q lines contain the query as described. The given queries are valid.\n\nOutput\n\nFor each type 2 query, output a line containing an integer \u2014 the minimum sum of energy needed for Chanek and Indiana to take the secret treasure.\n\nExample\n\nInput\n\n\n6 4\n10 -9 2 -1 4 -6\n1 5\n5 4\n5 6\n6 2\n6 3\n2 1 2\n1 1 -3\n2 1 2\n2 3 3\n\n\nOutput\n\n\n39\n32\n0\n\nNote\n\n<image>\n\nIn the first query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|10 + 4|, |10 - 4|) = 14 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\nIn total, it takes 39 energy.\n\nIn the second query, the illusion rate of the 1-st room changes from 10 to -3.\n\nIn the third query, their movement from the 1-st to the 2-nd room is as follows.\n\n  * 1 \u2192 5 \u2014 takes max(|-3 + 4|, |-3 - 4|) = 7 energy. \n  * 5 \u2192 6 \u2014 takes max(|4 + (-6)|, |4 - (-6)|) = 10 energy. \n  * 6 \u2192 2 \u2014 takes max(|-6 + (-9)|, |-6 - (-9)|) = 15 energy. \n\n\n\nNow, it takes 32 energy.", "mutate_method": "condense_two2one", "parent_index": 114}
