{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider various combinations to achieve this minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider various combinations to achieve this minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He possesses a songs lasting one minute. He also possesses b songs lasting two minutes and c songs lasting three minutes. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider various combinations to achieve this minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He possesses a songs lasting one minute, b songs lasting two minutes, and c songs lasting three minutes, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert. Please help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider various combinations to achieve this minimal difference.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples containing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        \n        # Dynamic programming approach to find minimal difference\n        # Initialize DP array\n        dp = [False] * (total_duration // 2 + 1)\n        dp[0] = True\n        \n        # Update DP array based on available songs\n        for _ in range(a):\n            for j in range(total_duration // 2, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(total_duration // 2, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(total_duration // 2, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half of total_duration\n        for i in range(total_duration // 2, -1, -1):\n            if dp[i]:\n                results.append(total_duration - 2 * i)\n                break\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples where each tuple contains\n            three integers representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge case handling\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(max(a, b, c))\n            continue\n        \n        # Dynamic programming approach\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1 and dp[j - 1]:\n                    dp[j] = True\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 1, -1):\n                if j >= 2 and dp[j - 2]:\n                    dp[j] = True\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 2, -1):\n                if j >= 3 and dp[j - 3]:\n                    dp[j] = True\n        \n        # Find the closest sum to half of the total duration\n        closest_sum = max(i for i in range(half_duration + 1) if dp[i])\n        \n        # Calculate minimal difference\n        minimal_difference = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_concert_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples where each tuple contains\n            three integers representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge case handling\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(max(1 * a, 2 * b, 3 * c))\n            continue\n        \n        # Dynamic programming approach\n        # We need to find the closest sum to half of the total duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half_duration\n        closest_sum = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        # Calculate minimal difference\n        minimal_difference = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Call the function and print results\nresults = minimal_concert_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is odd, the minimal difference is 1\n        # If the total duration is even, the minimal difference is 0\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples where each tuple contains\n            three integers a, b, c representing the number of one-minute, two-minute, and\n            three-minute songs respectively.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The goal is to split the total duration into two parts with minimal difference\n        # We can achieve this by checking if the total duration is even or odd\n        if total_duration % 2 == 0:\n            # If even, the minimal difference can be 0\n            results.append(0)\n        else:\n            # If odd, the minimal difference can be 1\n            results.append(1)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print results\n    results = minimal_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport itertools\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples where each tuple contains\n            the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize memoization table\n        memo = {}\n        \n        def dp(index, current_sum):\n            \"\"\"Recursive function to calculate minimal difference using dynamic programming.\n\n            Args:\n                index (int): Current index in the list of songs.\n                current_sum (int): Current sum of durations in one concert.\n\n            Returns:\n                int: Minimal difference for the current configuration.\n            \"\"\"\n            if index == 3:\n                # Calculate the difference between two concerts\n                other_sum = total_duration - current_sum\n                return abs(current_sum - other_sum)\n            \n            if (index, current_sum) in memo:\n                return memo[(index, current_sum)]\n            \n            # Calculate minimal difference by including current type of song in the concert\n            min_diff = float('inf')\n            for count in range(test_cases[0][index] + 1):\n                new_sum = current_sum + count * (index + 1)\n                min_diff = min(min_diff, dp(index + 1, new_sum))\n            \n            memo[(index, current_sum)] = min_diff\n            return min_diff\n        \n        # Start dynamic programming from the first type of song\n        min_diff = dp(0, 0)\n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n                                                 two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize dynamic programming array\n        max_possible_sum = total_duration // 2\n        dp = [False] * (max_possible_sum + 1)\n        dp[0] = True\n        \n        # Update dp array for one-minute songs\n        for _ in range(a):\n            for j in range(max_possible_sum, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Update dp array for two-minute songs\n        for _ in range(b):\n            for j in range(max_possible_sum, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Update dp array for three-minute songs\n        for _ in range(c):\n            for j in range(max_possible_sum, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest achievable sum to total_duration // 2\n        closest_sum = 0\n        for i in range(max_possible_sum + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        # Calculate minimal possible difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = minimal_difference(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge case handling\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == 1 and b == 0 and c == 0:\n            results.append(1)\n            continue\n        \n        # Dynamic programming approach\n        # We need to find a subset of songs whose total duration is as close as possible to half of the total duration\n        half_duration = total_duration // 2\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest possible duration to half_duration\n        closest_duration = 0\n        for i in range(half_duration + 1):\n            if dp[i]:\n                closest_duration = i\n        \n        # Calculate the minimal possible difference\n        minimal_difference = abs(total_duration - 2 * closest_duration)\n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Function call\nresults = minimal_difference(n, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimal_difference(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing three integers\n                                      representing the number of one-minute, two-minute,\n                                      and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        a, b, c = case\n        \n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == 1 and b == 0 and c == 0:\n            results.append(1)\n            continue\n        \n        # Dynamic programming approach\n        # We need to find a subset of songs that sum up to half of the total duration\n        # or as close as possible to it.\n        half_duration = total_duration // 2\n        \n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        \n        # Iterate over each type of song and update possible sums\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        # Find the closest sum to half_duration\n        closest_sum = min(possible_sums, key=lambda x: abs(x - half_duration))\n        \n        # Calculate the minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize a DP table to track possible durations\n        max_possible_duration = total_duration // 2\n        dp = [False] * (max_possible_duration + 1)\n        dp[0] = True\n        \n        # Update DP table for one-minute songs\n        for _ in range(a):\n            for j in range(max_possible_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Update DP table for two-minute songs\n        for _ in range(b):\n            for j in range(max_possible_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Update DP table for three-minute songs\n        for _ in range(c):\n            for j in range(max_possible_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest possible duration to half of the total duration\n        closest_duration = 0\n        for i in range(max_possible_duration + 1):\n            if dp[i]:\n                closest_duration = i\n        \n        # Calculate the minimal difference\n        minimal_difference = abs(total_duration - 2 * closest_duration)\n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Call the function and print results\nresults = minimal_concert_difference(n, test_cases)\nfor result in results:\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently.\nrequirement pool:\n- Efficient algorithm to minimize duration difference\n- Handle large input values accurately\n- Optimize for performance with large test cases\n- Provide clear output format\n- Ensure solution scalability\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to use a subset sum algorithm to partition the songs into two groups with minimal difference in their total durations. Given the constraints, we will optimize the solution to handle large values of a, b, and c by calculating the total duration and attempting to split it as evenly as possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'songs lasting one minute, two minutes, three minutes'\n    Explanation: These are the durations of the songs that need to be distributed between two concerts.\n\n    'absolute difference of durations'\n    Explanation: The goal is to minimize the absolute difference in total duration between the two concerts.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This means we need to find a way to distribute the songs such that the difference in total duration between the two concerts is minimized.\n\n# [degree adverb] \n    'minimal': This indicates that we are looking for the smallest possible difference in concert durations.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to find a subset of songs that can form a concert with a duration as close as possible to half of the total duration.\n3. Calculate the difference between the total duration and twice the duration of this subset.\n4. The result for each test case is this difference.\n\n# [edge case] \n    1 0 0 = 1\n    Explanation: With only one song of one minute, it must go to one concert, resulting in a difference of 1 minute.\n    \n    0 0 0 = 0\n    Explanation: No songs to distribute, so the difference is naturally 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, a one-minute and a two-minute song can be in one concert, and a three-minute song in another, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    \n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        # Dynamic programming approach to find minimal difference\n        # Initialize DP array\n        dp = [False] * (total_duration // 2 + 1)\n        dp[0] = True\n        \n        # Update DP array based on available songs\n        for _ in range(a):\n            for j in range(total_duration // 2, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(total_duration // 2, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(total_duration // 2, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half of total_duration\n        for i in range(total_duration // 2, -1, -1):\n            if dp[i]:\n                results.append(total_duration - 2 * i)\n                break\n    \n    return results\n```\n\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases efficiently, with each test case having potentially large values for a, b, and c.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure the solution handles large input values without performance issues\n- Provide clear and correct output for each test case\n- Optimize for scalability across multiple test cases\n- Maintain accuracy in results for all possible input combinations\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the difference between their sums is minimized. This is similar to the subset sum problem, which can be solved using dynamic programming. We will utilize Python's built-in capabilities to handle large numbers and ensure the solution is scalable for up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find a way to distribute songs such that the sum of durations in each concert is as close as possible.\n\n    'dynamic programming'\n    Explanation: A method for solving complex problems by breaking them down into simpler subproblems. It is useful for optimization problems like minimizing the difference between two sets.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of songs in a concert is calculated by summing these durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: We need to find the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use dynamic programming to find a subset of songs whose total duration is as close as possible to half of the total duration.\n3. Calculate the difference between the total duration and twice the duration of this subset.\n4. Return this difference for each test case.\n\n# [edge case]\n    Case 1: 1 0 0 = 1\n    Explanation: With only one song, it must be placed in one concert, resulting in a difference equal to its duration.\n    \n    Case 2: 0 0 0 = 0\n    Explanation: No songs are present, so the difference is zero.\n    \n    Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a + b + c == 1:\n            return max(a, b, c)\n        (other code for dynamic programming approach)\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with large values for a, b, and c, ensuring scalability and accuracy.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure the solution handles large input values up to 10^9\n- Optimize for speed to handle up to 1000 test cases\n- Maintain consistent output format for easy interpretation\n- Provide detailed documentation for the algorithm\nWe will use a dynamic programming approach to solve this problem. The idea is to calculate the total duration of all songs and then try to partition them into two subsets (concerts) such that the absolute difference between their sums is minimized. This is similar to the 'Partition Problem' which can be solved using a dynamic programming technique. Given the constraints, we will optimize the solution to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find two subsets of songs such that the difference in their total durations is as small as possible.\n\n    'dynamic programming'\n    Explanation: The plan suggests using dynamic programming, which is a method for solving complex problems by breaking them down into simpler subproblems. It is particularly useful for optimization problems like this one.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of each concert is calculated by summing these durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The goal is to achieve the smallest possible difference in concert durations. This requires finding an optimal partition of songs.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find two subsets of songs such that the absolute difference between their total durations is minimized.\n    3. Iterate through possible partitions and calculate the difference for each.\n    4. Return the minimal difference found.\n\n# [edge case]\n    Case 1: t = 1, a = 0, b = 0, c = 0\n    Expected output: 0\n    Explanation: With no songs, both concerts have a duration of 0, so the difference is 0.\n\n    Case 2: t = 1, a = 1, b = 0, c = 0\n    Expected output: 1\n    Explanation: Only one song exists, and it must be placed in one concert, resulting in a difference of 1.\n\n    Case 3: t = 1, a = 0, b = 1, c = 1\n    Expected output: 1\n    Explanation: The best partition is one concert with a two-minute song and another with a three-minute song, resulting in a difference of |2-3| = 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a + b + c == 1:\n            return max(1*a, 2*b, 3*c)\n        # Implement dynamic programming logic for other cases\n", "requirement analysis:\nThe requirements focus on distributing songs into two concerts with minimal duration difference. The challenge lies in efficiently calculating the minimal difference for potentially large input values, ensuring the solution is scalable and accurate.\nrequirement pool:\n- Implement the main algorithm to calculate minimal difference\n- Ensure the solution handles large input values efficiently\n- Optimize the algorithm for performance\n- Validate output format for clarity\n- Consider edge cases and test thoroughly\nWe will use a dynamic programming approach to solve the problem efficiently. The key is to find a way to partition the songs into two groups such that the absolute difference in their total durations is minimized. Given the constraints, we can leverage the fact that the total duration of all songs is fixed and try to balance the two partitions as closely as possible. We will use Python's built-in capabilities to handle large integers and optimize the algorithm for performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference between two values is the non-negative difference between them, calculated as |a - b|. In this context, it refers to the difference in total durations of the two concerts.\n    \n    'partition': This involves dividing the songs into two groups (concerts) such that each song is included in exactly one concert.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes': These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of songs by their respective durations to calculate total time.\n\n# [degree adverb]\n    'minimal': This indicates that we need to find the smallest possible value for the absolute difference in concert durations. In code, this involves iterating through possible partitions and keeping track of the smallest difference found.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to explore possible partitions of songs into two groups.\n3. For each test case, iterate through possible combinations of song distributions.\n4. Calculate the total duration for each partition and compute the absolute difference.\n5. Track the minimal absolute difference found across all partitions.\n6. Output the minimal difference for each test case.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    0 0 0 = 0\n    Explanation: No songs to distribute, so the difference is naturally 0.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, a balanced distribution can be achieved with a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    \n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration % 2 == 1:\n            results.append(1)\n        else:\n            results.append(0)\n    return results\n```\n\nThis code snippet handles cases where there are no songs or an odd total duration, ensuring that the minimal difference is calculated correctly.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently. The output must be accurate for each test case.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure scalability for large input values\n- Optimize for quick computation across multiple test cases\n- Provide clear and correct output format\n- Consider edge cases and validate results\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to use a knapsack-like algorithm to partition the songs into two groups such that the absolute difference in their total durations is minimized. This approach will allow us to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The absolute difference between two values is the non-negative difference, calculated as |x - y|, where x and y are the durations of the two concerts.\n\n    'distribute all songs into two concerts'\n    Explanation: Each song must be assigned to one of the two concerts, ensuring that no song is left out.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes'\n    Explanation: These phrases indicate the duration of each type of song. In code, these will be used to calculate the total duration of songs assigned to each concert.\n\n# [degree adverb]\n    'minimal possible difference'\n    Explanation: The goal is to achieve the smallest possible absolute difference between the total durations of the two concerts. This requires exploring combinations of song assignments to minimize this difference.\n\n# [code logic]\n1. For each test case, calculate the total duration of all songs.\n2. Use a dynamic programming approach similar to the knapsack problem to determine if it's possible to split the songs into two groups with a specific total duration.\n3. Iterate over possible total durations for one concert and calculate the absolute difference with the remaining songs.\n4. Track the minimal absolute difference encountered during this process.\n5. Output the minimal difference for each test case.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    0 0 0 = 0\n    Explanation: With no songs, both concerts have a duration of 0, resulting in a difference of 0.\n\n    1 1 1 = 0\n    Explanation: As explained in the example, a combination can be found where the difference is minimized to 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - If there are no songs (a = b = c = 0), directly return 0.\n        - If there is only one type of song, handle it by directly calculating the difference based on their count and duration.\n        (other code)\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for song counts efficiently. The output must be formatted correctly for each test case.\nrequirement pool:\n- Implement efficient algorithm for minimal difference calculation\n- Ensure solution handles large input values seamlessly\n- Optimize for fast execution across multiple test cases\n- Provide clear and concise output format\n- Consider edge cases and validate results\nWe will use a dynamic programming approach to solve the problem efficiently. The goal is to partition the songs into two groups such that the absolute difference in their total durations is minimized. We will leverage the itertools library to generate combinations and use a memoization technique to store intermediate results for optimization.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. Absolute difference means the non-negative difference between two values, calculated as |x - y|.\n\n    'dynamic programming'\n    Explanation: Dynamic programming is a method for solving complex problems by breaking them down into simpler subproblems. It is used here to efficiently find the optimal partition of songs.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of each concert is calculated by summing these durations.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the number of songs of each duration for each test case.\n    2. For each test case, calculate the total duration of all songs.\n    3. Use dynamic programming to find a partition of songs that minimizes the absolute difference between the two concerts.\n    4. Iterate through possible partitions and calculate the difference in durations.\n    5. Return the minimal difference for each test case.\n\n# [edge case]\n    Test case with all songs having the same duration:\n    1 1 1 = 0\n    Explanation: The total duration is 6 minutes, which can be evenly split into two concerts of 3 minutes each, resulting in a difference of 0.\n\n    Test case with only one type of song:\n    0 0 5 = 0\n    Explanation: All songs are three-minute songs, totaling 15 minutes. They can be split into two concerts of 7 and 8 minutes, resulting in a minimal difference of 1.\n\n    Test case with large numbers:\n    1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be evenly distributed to achieve a minimal difference.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def minimal_difference(t, test_cases):\n            results = []\n            for a, b, c in test_cases:\n                total_duration = a * 1 + b * 2 + c * 3\n                half_duration = total_duration // 2\n                # Implement dynamic programming or other efficient method to find minimal difference\n                # Placeholder for actual logic\n                min_diff = abs(total_duration - half_duration * 2)\n                results.append(min_diff)\n            return results\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The challenge lies in efficiently handling large numbers of songs and ensuring the solution is optimal for all test cases.\nrequirement pool:\n- Implement an algorithm to calculate minimal difference in concert durations.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the algorithm for large input sizes up to 10^9 songs.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure accuracy in all scenarios.\nWe will use a dynamic programming approach to solve the problem efficiently. The idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the difference between their sums is minimized. This is similar to the subset sum problem, which can be solved using dynamic programming. We will use Python's built-in capabilities to handle large numbers and efficiently compute the minimal difference.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The absolute difference between two numbers is the non-negative difference between them, calculated as |a - b|. In this context, it refers to the difference in total durations of the two concerts.\n\n    'distribute all songs into two concerts'\n    Explanation: Each song must be assigned to one of the two concerts, and no song can be left out or assigned to both.\n\n    'minimal possible difference'\n    Explanation: The goal is to make the absolute difference between the total durations of the two concerts as small as possible.\n\n# [phrase showing quantity relationship]\n    'one minute', 'two minutes', 'three minutes': These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the number of songs by their respective durations to get the total duration for each type.\n\n# [degree adverb]\n    'minimal': This indicates that we need to find the smallest possible value for the difference in concert durations. In code, this involves finding the optimal partitioning of songs to achieve this minimal difference.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. Initialize a dynamic programming array `dp` where `dp[i]` indicates whether a sum `i` can be achieved with the given songs.\n3. Set `dp[0] = True` because a sum of 0 is always achievable with no songs.\n4. Iterate over each type of song and update the `dp` array to reflect achievable sums.\n5. Find the closest achievable sum to `total_duration // 2` using the `dp` array.\n6. Calculate the minimal possible difference as `|total_duration - 2 * closest_sum|`.\n\n# [edge case]\n    Edge Case 1: a = 1, b = 0, c = 0\n    Expected Output: 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1.\n\n    Edge Case 2: a = 0, b = 0, c = 0\n    Expected Output: 0\n    Explanation: No songs to distribute, so the difference is naturally 0.\n\n    Edge Case 3: a = 10^9, b = 10^9, c = 10^9\n    Expected Output: 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The dynamic programming approach inherently handles cases with zero or very large numbers of songs by considering all possible sums up to half of the total duration.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution should efficiently handle up to 1000 test cases with large values for a, b, and c. The output must be formatted correctly for each test case.\nrequirement pool:\n- Efficiently calculate minimal difference for large inputs\n- Ensure correct output format for multiple test cases\n- Provide a user-friendly input method\n- Design a responsive and appealing UI\n- Include detailed output explanation\nWe will use a dynamic programming approach to solve this problem. The idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the absolute difference between their sums is minimized. This is similar to the 'Partition Problem' which can be solved using a dynamic programming approach. Given the constraints, we will optimize the solution to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find a way to distribute the songs such that the difference in total duration between the two concerts is as small as possible.\n\n    'dynamic programming'\n    Explanation: The plan suggests using dynamic programming, which is a method for solving complex problems by breaking them down into simpler subproblems. It is particularly useful for optimization problems like this one, where we need to find the best way to partition the songs.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by assigning values of 1, 2, and 3 to the respective song types.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the minimal possible difference in minutes between the concerts durations. This means we need to aim for the smallest possible value of the absolute difference.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find a subset of songs whose total duration is as close as possible to half of the total duration.\n    3. Calculate the difference between the total duration and twice the duration of this subset.\n    4. Return the absolute value of this difference as the minimal possible difference.\n\n# [edge case]\n    Case 1: Input: 1 0 0; Expected Output: 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Case 2: Input: 0 0 0; Expected Output: 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0 minutes.\n\n    Case 3: Input: 1000000000 1000000000 1000000000; Expected Output: 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for general cases\n        (other code)\n", "requirement analysis:\nThe task requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with large values for a, b, and c, ensuring optimal performance and clarity in output.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations\n- Ensure the solution can handle the maximum input constraints\n- Provide clear and concise output for each test case\n- Optimize the algorithm for performance\n- Consider edge cases and ensure robustness\nWe will use a dynamic programming approach to solve the problem efficiently. The key idea is to use a subset sum approach where we try to partition the songs into two groups such that the difference in their total durations is minimized. We will leverage the itertools library to generate combinations and use a memoization technique to store intermediate results for optimization.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find a way to distribute the songs such that the sum of durations in each concert is as close as possible.\n\n    'dynamic programming'\n    Explanation: A method for solving complex problems by breaking them down into simpler subproblems, storing the results of subproblems to avoid redundant calculations.\n\n    'subset sum'\n    Explanation: A problem-solving approach where we try to find a subset of numbers that add up to a specific sum. In this context, it is used to partition songs into two groups with minimal difference in total duration.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute': These phrases indicate the duration of each type of song. The relationship is that each song contributes a specific amount to the total duration of a concert.\n\n# [degree adverb]\n    'minimal': The goal is to achieve the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to explore all possible distributions of songs into two groups.\n    3. For each distribution, calculate the difference in durations between the two groups.\n    4. Track the minimal difference encountered during these calculations.\n    5. Return the minimal difference for each test case.\n\n# [edge case]\n    Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    Case 2: (0, 0, 0) = 0\n    Explanation: No songs are present, so both concerts have a duration of 0 minutes, resulting in a difference of 0.\n    \n    Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for other cases\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases efficiently, with each test case having potentially large values for a, b, and c. The algorithm should consider all possible combinations to achieve the minimal difference.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure the solution handles large input values up to 10^9\n- Optimize for speed to handle up to 1000 test cases\n- Validate accuracy of results across all test cases\n- Consider edge cases and potential input anomalies\nWe will use a dynamic programming approach to solve this problem efficiently. The key idea is to use a knapsack-like algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. Given the constraints, we will focus on optimizing the solution to handle large input values and multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'distribute all songs into two concerts'\n    Explanation: Every song must be assigned to one of the two concerts, ensuring no song is left out.\n\n# [phrase showing quantity relationship]\n    'one-minute, two-minute, three-minute'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of a concert is calculated by summing the durations of all songs assigned to it.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The goal is to achieve the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    1. For each test case, calculate the total duration of all songs.\n    2. Use a dynamic programming approach to find a subset of songs that can be assigned to one concert such that the absolute difference between the two concerts is minimized.\n    3. Initialize a DP table where dp[i] represents whether a total duration of i minutes can be achieved with a subset of songs.\n    4. Iterate over each song type and update the DP table accordingly.\n    5. Find the closest possible duration to half of the total duration using the DP table.\n    6. Calculate the minimal difference using this closest duration.\n\n# [edge case]\n    Test case: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    Test case: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Test case: 1 1 0 = 1\n    Explanation: With one one-minute song and one two-minute song, assigning them to different concerts results in a difference of 1 minute.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The dynamic programming approach inherently handles these cases by considering all possible distributions of songs.\n"], "scores": [], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 843, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 294}
