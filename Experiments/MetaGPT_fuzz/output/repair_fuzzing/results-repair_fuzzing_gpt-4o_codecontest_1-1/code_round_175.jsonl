{"name": "1582_C. Grandma Capa Knits a Scarf", "description": "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n.\n\nGrandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s.\n\nShe also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose.\n\nA string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.", "tags": ["brute force", "data structures", "greedy", "strings", "two pointers"], "difficulty": 9, "id": 1582, "sample_io": [{"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n3\n2\n"]}], "test_list": [{"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqarlap\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabab\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacaa\n6\nxyzxyy\n4\nabba\n8\nrpqarlap\n10\nkyyyhhhhky\n", "output": ["-1\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcbacab\n6\nxyzxyz\n4\nbaba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["3\n-1\n1\n3\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxyz\n4\nbaba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nacba\n8\nrpqarlap\n10\nykhhhhyyyk\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxxz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n0\n3\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\naabb\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n2\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxyz\n4\nbaba\n8\nrprarlap\n10\nkhhyhhyyky\n", "output": ["-1\n-1\n1\n3\n3\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nbaba\n8\nrprarlaq\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyzxzyx\n4\nabba\n8\nrpqarlao\n10\nkyyyhhhhky\n", "output": ["2\n1\n0\n-1\n4\n"]}, {"input": "5\n8\nabcabcaa\n6\nxyzxyy\n4\nabbb\n8\nrpqarkap\n10\nkyyyhhhhky\n", "output": ["-1\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nabca\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhxhky\n", "output": ["2\n-1\n0\n3\n-1\n"]}, {"input": "5\n8\nabcaacba\n6\nxyzxyz\n4\nabab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["0\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacaa\n6\nxyzxyy\n4\nabba\n8\nrpqarlap\n10\nkyyyhkhhhy\n", "output": ["-1\n3\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxzzxyy\n4\nabba\n8\nrpqarkap\n10\nkyyyhhhhky\n", "output": ["2\n2\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzwyz\n4\nabba\n8\nrpqarlap\n10\nxkhyhhyyhk\n", "output": ["2\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxzxzyx\n4\nbaba\n8\nrprarlaq\n10\nkhyyhhyhky\n", "output": ["-1\n1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcabcaa\n6\nxyzxyy\n4\nabba\n8\nrpqarkap\n10\nkhyyhhyhky\n", "output": ["-1\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabbaacbb\n6\nxxzwyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhk\n", "output": ["3\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyy\n4\nadba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n3\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nbaba\n8\nrprarlap\n10\nkhyyhhxhky\n", "output": ["2\n-1\n1\n3\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nbaba\n8\nrpparlar\n10\nkhyyhhxhky\n", "output": ["2\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nbacbacba\n6\nxyzxyz\n4\nabba\n8\npalraqor\n10\nkhyyhhzhky\n", "output": ["3\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\naccabbaa\n6\nxyzxyy\n4\nacbb\n8\nrprapkas\n10\nkyyyhhhhky\n", "output": ["2\n3\n-1\n-1\n4\n"]}, {"input": "5\n8\naccabbaa\n6\nxxzxyy\n4\nacbb\n8\nrprapkas\n10\nkyyyhhhhky\n", "output": ["2\n-1\n-1\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyyxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxzy\n4\nabab\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["2\n1\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyzxxy\n4\nabba\n8\nrpaqrlap\n10\nkyyyhhhhky\n", "output": ["2\n-1\n0\n-1\n4\n"]}, {"input": "5\n8\nabcabcaa\n6\nyyzxyy\n4\nabba\n8\nrpqarkap\n10\nkyyyhhhhky\n", "output": ["-1\n1\n0\n-1\n4\n"]}, {"input": "5\n8\nabcbacaa\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhxhky\n", "output": ["-1\n-1\n0\n3\n-1\n"]}, {"input": "5\n8\nabbaacbb\n6\nxyzxyz\n4\nabaa\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["3\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyy\n4\nabca\n8\nrpqaplar\n10\nykhyhhyyhk\n", "output": ["-1\n3\n1\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nyyxzyx\n4\nbbba\n8\nrpqarlao\n10\nkyzyhhhhky\n", "output": ["2\n3\n1\n-1\n-1\n"]}, {"input": "5\n8\naccabbaa\n6\nxyzwyy\n4\nabbb\n8\nrpqapkas\n10\nkyyyhhhhky\n", "output": ["2\n-1\n1\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxzy\n4\nabab\n8\nrprarlap\n10\nkhyyhhhyky\n", "output": ["2\n1\n1\n3\n4\n"]}, {"input": "5\n8\nabdaacab\n6\nyyzxxy\n4\nabba\n8\nrpaqrlap\n10\nkyyyhhhhky\n", "output": ["-1\n-1\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nyyzxxz\n4\nabba\n8\npalraqpr\n10\nykhyhhyyhk\n", "output": ["2\n2\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nxzzxyy\n4\nbaba\n8\nrpqarkap\n10\nkyyyhhhhky\n", "output": ["2\n2\n1\n-1\n4\n"]}, {"input": "5\n8\nabbaacbb\n6\nxxzwxz\n4\nbaba\n8\nspaqrlap\n10\nykhyhhyyhk\n", "output": ["3\n3\n1\n-1\n2\n"]}, {"input": "5\n8\naccabbaa\n6\nyyzwyy\n4\nabbb\n8\nrpqapkas\n10\nkyyyhhhhky\n", "output": ["2\n1\n1\n-1\n4\n"]}, {"input": "5\n8\naccabbaa\n6\nxyzxyx\n4\nacbb\n8\nsakparpr\n10\nkyyyhhhhky\n", "output": ["2\n1\n-1\n-1\n4\n"]}, {"input": "5\n8\naacaacab\n6\nyyzxxz\n4\nabba\n8\npalraqpr\n10\nykhyhhyyhk\n", "output": ["-1\n2\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\naabb\n8\nrpqarlao\n10\nkyyyhhhhky\n", "output": ["2\n3\n2\n-1\n4\n"]}, {"input": "5\n8\nabcaacba\n6\nyyxzyx\n4\nacba\n8\nrqqarlap\n10\nykhhhhyyyk\n", "output": ["0\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\nbcaa\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n-1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyx\n4\nabba\n8\nqpsarlap\n10\nykhyhhyyhk\n", "output": ["2\n1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcabcaa\n6\nxyzxzy\n4\nabba\n8\nrpqarkap\n10\nkhyyhhyhky\n", "output": ["-1\n1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacbabca\n6\nxyzxyz\n4\nabba\n8\npalraqos\n10\nkhyyhhzhky\n", "output": ["1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nbbcaacaa\n6\nxyzzyx\n4\nabba\n8\nrpqarlap\n10\nkhyzhhyhky\n", "output": ["-1\n0\n0\n-1\n-1\n"]}, {"input": "5\n8\naacaacab\n6\nxyzxyz\n4\nabab\n8\nrprarmap\n10\nkhyyihyhky\n", "output": ["-1\n-1\n1\n3\n-1\n"]}, {"input": "5\n8\ncccbaaab\n6\nzxyzyx\n4\nbbab\n8\npalrarpr\n10\nkhyyhhyhky\n", "output": ["3\n1\n1\n3\n2\n"]}, {"input": "5\n8\naccabcaa\n6\nxyzxyy\n4\nabbc\n8\nrprapkas\n10\nkyyyhhhhky\n", "output": ["3\n3\n-1\n-1\n4\n"]}, {"input": "5\n8\nabdaacab\n6\nyyzxxy\n4\nacba\n8\nrpaqrlap\n10\nkyyyhhhhky\n", "output": ["-1\n-1\n1\n-1\n4\n"]}, {"input": "5\n8\nbbcaacbb\n6\nzyxzyx\n4\nabba\n8\nroqarlap\n10\nykhxhhyyhk\n", "output": ["0\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\naccabbaa\n6\nyyzwyy\n4\nabbb\n8\nrpqapkas\n10\nkyhyhyhhky\n", "output": ["2\n1\n1\n-1\n3\n"]}, {"input": "5\n8\naacaacab\n6\nyyzxxz\n4\nabba\n8\npalraqpr\n10\nykhyhiyyhk\n", "output": ["-1\n2\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nzyxzxx\n4\nabbb\n8\nqprarlap\n10\nkhhyyhyhky\n", "output": ["2\n3\n1\n-1\n2\n"]}, {"input": "5\n8\naccabbaa\n6\nyyzwyy\n4\nbabb\n8\nrpqapkas\n10\njyyyhhhhky\n", "output": ["2\n1\n1\n-1\n-1\n"]}, {"input": "5\n8\nbacbacba\n6\nzzzxyx\n4\nabba\n8\npalraqpr\n10\nkhyyhhyhky\n", "output": ["3\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nbacbacba\n6\nxyxzyz\n4\nabba\n8\npalraqpr\n10\nkhyyhhhyky\n", "output": ["3\n-1\n0\n-1\n4\n"]}, {"input": "5\n8\ncccbaaab\n6\nzxyzyx\n4\nbbab\n8\npalrarpr\n10\nkgyyhhyhky\n", "output": ["3\n1\n1\n3\n-1\n"]}, {"input": "5\n8\nabcabcba\n6\nxyzxzy\n4\nabba\n8\nrpqarkap\n10\nkhyyhhyhky\n", "output": ["1\n1\n0\n-1\n2\n"]}, {"input": "5\n8\nbabaadba\n6\nxyyxxy\n4\ncbba\n8\noalraqpr\n10\nkyyyhhihjy\n", "output": ["-1\n3\n-1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nyzywyz\n4\nacda\n8\napqrrlap\n10\nykhxhhyyhk\n", "output": ["-1\n1\n1\n-1\n-1\n"]}, {"input": "5\n8\nbabaadba\n6\nyxxxyx\n4\ncbba\n8\noalraqpr\n10\nkyyyhhihjy\n", "output": ["-1\n1\n-1\n-1\n-1\n"]}, {"input": "5\n8\ncbabacbb\n6\nyyzyxx\n4\naabb\n8\nrpqarlap\n10\nkyyyhhhhkx\n", "output": ["3\n-1\n2\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\nrpqarlap\n10\nykhghhyyyk\n", "output": ["2\n3\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzzyx\n4\nabab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n0\n1\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\naabb\n8\nrpqarlap\n10\nykhyyhyhhk\n", "output": ["-1\n-1\n2\n-1\n3\n"]}, {"input": "5\n8\nabcaacab\n6\nyyzxyz\n4\nbaba\n8\nrrparlap\n10\nkhyyhhyhky\n", "output": ["2\n3\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\nrpqarlap\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nxyzxyy\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nspqarlap\n10\nykhyhhyyhk\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\nrpqarlap\n10\nykhhhhyyyk\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nbaba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\nrqqarlap\n10\nykhhhhyyyk\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxxz\n4\nbaba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nbaba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nbbba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nbbcaacaa\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqaslap\n10\nkhyyhhyhky\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqarkap\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\npalraqpr\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzwyz\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabab\n8\nrprarmap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\nabba\n8\nspqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\nrpqarlao\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaabba\n6\nxyzwyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxzzxyz\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nzyxzyx\n4\nabab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpaqrlap\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nxyzxyz\n4\nabab\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nbaba\n8\nrrparlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nacba\n8\nrqqarlap\n10\nykhhhhyyyk\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabcabcaa\n6\nxyzxyy\n4\nabba\n8\nrpqarkap\n10\nkyyyhhhhky\n", "output": ["-1\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\nabba\n8\nspqarlap\n10\nykhyhgyyhk\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxxz\n4\nabba\n8\nrprarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n3\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxxzwyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\nabba\n8\nspaqrlbp\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nbacaabba\n6\nxyywyz\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nzyxzyx\n4\naaab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\naabb\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n2\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nabab\n8\nrprarlaq\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxxz\n4\nabba\n8\nspqarlap\n10\nykhyhgyyhk\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\nbbaa\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n2\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nabac\n8\nrprarlaq\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxxz\n4\nabba\n8\nspqarlap\n10\nykhyigyyhk\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nacba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nadba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzwyz\n4\nadba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxxzwyz\n4\nadba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabbaacbc\n6\nxxzwyz\n4\nadba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqaplar\n10\nykhyhhyyhk\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrplarqap\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxxz\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nqpsarlap\n10\nykhyhhyyhk\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabab\n8\nqprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabab\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxyz\n4\ncaba\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxxz\n4\nbaba\n8\nrpsarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nabab\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nbbcaacaa\n6\nxyzxyz\n4\nabba\n8\nrpqarlbp\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\nabba\n8\npalraqps\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nbbba\n8\nrpqarlao\n10\nkyyyhhhhky\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nabaa\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nxyzxyz\n4\nabba\n8\npalraqpr\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxyz\n4\naabb\n8\nrpparlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n2\n-1\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\naaba\n8\nspaqrlbp\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nabca\n8\nrpqarlap\n10\nykhxghyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nabab\n8\nrprarlaq\n10\njhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcabcaa\n6\nxyzxyy\n4\nabbb\n8\nrpqaskap\n10\nkyyyhhhhky\n", "output": ["-1\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxxz\n4\nabba\n8\nspqarlap\n10\nkhyyghyhky\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nabac\n8\nrpraqlaq\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacbb\n6\nxxzwyz\n4\naeba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabbaacbc\n6\nxxzwyz\n4\nadba\n8\nrpqarlap\n10\nyyhxhhykhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyy\n4\nabba\n8\nrpqaplar\n10\nykhyhhyyhk\n", "output": ["-1\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\naaab\n8\nqprarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxxz\n4\nbaba\n8\npalraspr\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nbbab\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nyyxzyx\n4\nbbba\n8\nrpqarlao\n10\nkyyyhhhhky\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\naaba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nbacbacba\n6\nxyzxyz\n4\nabba\n8\npalraqpr\n10\nkhyyhhyhky\n", "output": ["3\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcbbcaa\n6\nxyzxyy\n4\nabba\n8\nrpqarkap\n10\nkhyyhhyhky\n", "output": ["-1\n3\n0\n-1\n2\n"]}, {"input": "5\n8\naccabbaa\n6\nxyzxyy\n4\nabbb\n8\nrpqaskap\n10\nkyyyhhhhky\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nwyzxxz\n4\nabba\n8\nspqarlap\n10\nkhyyghyhky\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxxzwyz\n4\naeba\n8\nrpqarlap\n10\nylhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabbaacbc\n6\nxxzwyz\n4\nadba\n8\nrpqarlap\n10\nyyhxhhykgk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nabba\n8\nrpqaplar\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\naaab\n8\nqprarlap\n10\nkhyyhhxhky\n", "output": ["2\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nbaba\n8\npalraspr\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\nbbab\n8\npalrarpr\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nyxxzyx\n4\nbbba\n8\nrpqarlao\n10\nkyyyhhhhky\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nbacbacba\n6\nxyzxyz\n4\nabba\n8\npalraqor\n10\nkhyyhhyhky\n", "output": ["3\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\naccabbaa\n6\nxyzxyy\n4\nabbb\n8\nrpqapkas\n10\nkyyyhhhhky\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nwyzxxz\n4\naaba\n8\nspqarlap\n10\nkhyyghyhky\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\ncbcbaaab\n6\nzxxzyx\n4\naaba\n8\npalraspr\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\naccabbaa\n6\nxyzxyy\n4\nabbb\n8\nrprapkas\n10\nkyyyhhhhky\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nabbaacab\n6\nzxxzyw\n4\naaba\n8\nspqarlap\n10\nkhyyghyhky\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nbacbacba\n6\nxyzxyz\n4\nabba\n8\npalraqos\n10\nkhyyhhzhky\n", "output": ["3\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\naccabbaa\n6\nxzxxyy\n4\nacbb\n8\nrprapkas\n10\nkyyyhhhhky\n", "output": ["2\n-1\n-1\n-1\n4\n"]}, {"input": "5\n8\ncbcaaaab\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyy\n4\nabba\n8\nrpqlraap\n10\nykhyhhyyhk\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nyyxzyx\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\nrqqaralp\n10\nykhhhhyyyk\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxyz\n4\nbaaa\n8\nrprarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n1\n3\n2\n"]}, {"input": "5\n8\nbbcaacaa\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nkhyzhhyhky\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nyyxzyx\n4\nabba\n8\npalraqor\n10\nkyyyhhhhky\n", "output": ["2\n3\n0\n-1\n4\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzwyz\n4\nabab\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabab\n8\nrprarmap\n10\nkhyyihyhky\n", "output": ["2\n-1\n1\n3\n-1\n"]}, {"input": "5\n8\nbacaacba\n6\nyyxzyx\n4\nacba\n8\nrpqarlap\n10\nykhhhhyyyk\n", "output": ["2\n3\n1\n-1\n4\n"]}, {"input": "5\n8\nbacaabba\n6\nxyzwyz\n4\nabbb\n8\nspaqrlap\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nzyxzzx\n4\nabba\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaacba\n6\nxyzxyz\n4\nabba\n8\nrpqarlap\n10\nykhyhhyyhk\n", "output": ["2\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\ncbcbaaab\n6\nxyzxxz\n4\nabba\n8\npalrarpr\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n3\n2\n"]}, {"input": "5\n8\nabbaacab\n6\nzywzxx\n4\nabba\n8\nspaqrlap\n10\nykhyhhyyhk\n", "output": ["-1\n-1\n0\n-1\n2\n"]}, {"input": "5\n8\nbacaabba\n6\nxyywyz\n4\nacba\n8\nspaqrlap\n10\nykhyhhyyhl\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\naaab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["2\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacbb\n6\nzyxzyx\n4\nabba\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzwyz\n4\naabb\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["-1\n-1\n2\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxyz\n4\nabca\n8\nrpqarlap\n10\nykhxhhyyhk\n", "output": ["2\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabbaacab\n6\nxyzxxz\n4\nabba\n8\nspqarlap\n10\nyhkyigyyhk\n", "output": ["-1\n-1\n0\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxyzxyz\n4\nadba\n8\nrpqarlap\n10\nkhyyhhxhky\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nabcaacbb\n6\nxxzwyz\n4\nadba\n8\nrpqaalrp\n10\nykhxhhyyhk\n", "output": ["-1\n-1\n1\n-1\n-1\n"]}, {"input": "5\n8\nbacaacba\n6\nxyzxyy\n4\nabba\n8\nrpqaplar\n10\nykhyhhyyhk\n", "output": ["2\n3\n0\n-1\n2\n"]}, {"input": "5\n8\nabcaacba\n6\nzyxzyx\n4\nabab\n8\nrpqarlap\n10\nkhyyhhyhky\n", "output": ["0\n-1\n1\n-1\n2\n"]}, {"input": "5\n8\nabcaacab\n6\nxyzxxz\n4\nabba\n8\npalraqpr\n10\nykhyhhyyhk\n", "output": ["2\n-1\n0\n-1\n2\n"]}], "task_id": "codecontest/30", "prompt": "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters, and Grandpa Sher wrote a string s of length n. Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, yet she doesn't want to offend him in any way. Therefore, to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s. She also wants to minimize the number of erased symbols from the pattern, so please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose. A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not. You need to consider all possibilities for the letter choice and find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.", "repair_prompt": ["Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters, and Grandpa Sher wrote a string s of length n. Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, yet she doesn't want to offend him in any way. Therefore, to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s. She also wants to minimize the number of erased symbols from the pattern, so please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose. A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not. You need to consider all possibilities for the letter choice and find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.", "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters, and Grandpa Sher wrote a string s of length n. Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher. Yet she doesn't want to offend him in any way. Therefore, to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s. She also wants to minimize the number of erased symbols from the pattern, so please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose. A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not. You need to consider all possibilities for the letter choice and find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.", "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, and Grandpa Sher wrote a string s of length n, consisting of lowercase English letters. Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome; she wants to change the pattern written by Grandpa Sher, yet she doesn't want to offend him in any way. Therefore, to avoid offending him, she will choose one lowercase English letter and erase some (at her choice, possibly none or all) occurrences of that letter in string s. She also wants to minimize the number of erased symbols from the pattern, so please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it's impossible. Notice that she can only erase symbols equal to the one letter she chose. A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings 'kek', 'abacaba', 'r' and 'papicipap' are palindromes, while the strings 'abb' and 'iq' are not. You need to consider all possibilities for the letter choice and find the optimal solution.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_erasures_to_palindrome(t: int, test_cases: List[str]) -> List[int]:\n    \"\"\"Calculate the minimum number of erasures required to make each string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[str]): List of strings for each test case.\n\n    Returns:\n        List[int]: List of minimum erasures required for each test case, or -1 if impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\"\"\"\n        return s == s[::-1]\n\n    def min_removals_for_char(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum removals needed to make the string a palindrome by removing a specific character.\"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                left += 1\n                removals += 1\n            elif s[right] == char:\n                right -= 1\n                removals += 1\n            else:\n                return float('inf')  # Impossible to make palindrome by removing this character\n\n        return removals\n\n    results = []\n    for s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_removals = float('inf')\n\n        for char in unique_chars:\n            removals = min_removals_for_char(s, char)\n            min_removals = min(min_removals, removals)\n\n        if min_removals == float('inf'):\n            results.append(-1)\n        else:\n            results.append(min_removals)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        s = input().strip()\n        test_cases.append(s)\n\n    # Output interface\n    results = min_erasures_to_palindrome(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_removals_to_palindrome(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum number of removals required to make each string a palindrome.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[tuple]): A list of tuples, each containing an integer n and a string s.\n\n    Returns:\n        List[int]: A list of integers representing the minimum number of removals for each test case,\n                   or -1 if it's impossible to make the string a palindrome.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\"\"\"\n        return s == s[::-1]\n\n    def min_removals_for_letter(s: str, letter: str) -> int:\n        \"\"\"Calculate the minimum removals needed to make the string a palindrome by removing a specific letter.\"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == letter:\n                left += 1\n                removals += 1\n            elif s[right] == letter:\n                right -= 1\n                removals += 1\n            else:\n                return float('inf')  # Impossible to make a palindrome by removing this letter\n\n        return removals\n\n    results = []\n\n    for n, s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        min_removals = float('inf')\n        unique_letters = set(s)\n\n        for letter in unique_letters:\n            removals = min_removals_for_letter(s, letter)\n            min_removals = min(min_removals, removals)\n\n        if min_removals == float('inf'):\n            results.append(-1)\n        else:\n            results.append(min_removals)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append((n, s))\n\n# Output interface\nresults = min_removals_to_palindrome(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef min_deletions_to_palindrome(t: int, test_cases: List[Tuple[int, str]]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make each string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, str]]): List of tuples where each tuple contains the length of the string and the string itself.\n\n    Returns:\n        List[int]: List of minimum deletions required for each test case, or -1 if it's impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\"\"\"\n        return s == s[::-1]\n\n    def min_deletions_for_char(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum deletions required to make the string a palindrome by removing occurrences of a specific character.\"\"\"\n        left, right = 0, len(s) - 1\n        deletions = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                left += 1\n                deletions += 1\n            elif s[right] == char:\n                right -= 1\n                deletions += 1\n            else:\n                return float('inf')  # Impossible to make a palindrome by removing this character\n\n        return deletions\n\n    results = []\n\n    for n, s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_deletions = float('inf')\n\n        for char in unique_chars:\n            deletions = min_deletions_for_char(s, char)\n            min_deletions = min(min_deletions, deletions)\n\n        if min_deletions == float('inf'):\n            results.append(-1)\n        else:\n            results.append(min_deletions)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        s = input().strip()\n        test_cases.append((n, s))\n\n    # Output interface\n    results = min_deletions_to_palindrome(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_erasures_to_palindrome(t: int, test_cases: List[str]) -> List[int]:\n    \"\"\"Calculate the minimum number of erasures required to make each string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[str]): List of strings for each test case.\n\n    Returns:\n        List[int]: List of minimum erasures required for each test case, or -1 if impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\n\n        Args:\n            s (str): The string to check.\n\n        Returns:\n            bool: True if the string is a palindrome, False otherwise.\n        \"\"\"\n        return s == s[::-1]\n\n    def min_removals_for_palindrome(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum removals of a specific character to make the string a palindrome.\n\n        Args:\n            s (str): The string to process.\n            char (str): The character to remove.\n\n        Returns:\n            int: Minimum number of removals, or a large number if impossible.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                left += 1\n                removals += 1\n            elif s[right] == char:\n                right -= 1\n                removals += 1\n            else:\n                return float('inf')  # Impossible to form a palindrome\n\n        return removals\n\n    results = []\n    for s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_removals = float('inf')\n\n        for char in unique_chars:\n            removals = min_removals_for_palindrome(s, char)\n            min_removals = min(min_removals, removals)\n\n        results.append(min_removals if min_removals != float('inf') else -1)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append(s)\n\n# Output interface\nresults = min_erasures_to_palindrome(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_erasures_to_palindrome(t: int, test_cases: List[str]) -> List[int]:\n    \"\"\"Calculate the minimum number of erased symbols required to make each string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[str]): List of strings for each test case.\n\n    Returns:\n        List[int]: List of minimum number of erasures for each test case, or -1 if impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\"\"\"\n        return s == s[::-1]\n\n    def min_removals_for_palindrome(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum removals needed to make the string a palindrome by removing occurrences of a specific character.\"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                left += 1\n                removals += 1\n            elif s[right] == char:\n                right -= 1\n                removals += 1\n            else:\n                return float('inf')  # Impossible to form a palindrome\n\n        return removals\n\n    results = []\n    for s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_removals = float('inf')\n\n        for char in unique_chars:\n            removals = min_removals_for_palindrome(s, char)\n            min_removals = min(min_removals, removals)\n\n        results.append(min_removals if min_removals != float('inf') else -1)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append(s)\n\n# Output interface\nresults = min_erasures_to_palindrome(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_deletions_to_palindrome(t: int, test_cases: List[str]) -> List[int]:\n    \"\"\"Calculate the minimum number of deletions required to make each string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[str]): List of strings to be processed.\n\n    Returns:\n        List[int]: List of minimum deletions required for each test case, or -1 if impossible.\n    \"\"\"\n    def can_form_palindrome_by_removing(s: str, char_to_remove: str) -> int:\n        \"\"\"Check if a palindrome can be formed by removing occurrences of a specific character.\n\n        Args:\n            s (str): The string to be processed.\n            char_to_remove (str): The character to be removed.\n\n        Returns:\n            int: Minimum number of deletions required, or -1 if impossible.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        deletions = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char_to_remove:\n                left += 1\n                deletions += 1\n            elif s[right] == char_to_remove:\n                right -= 1\n                deletions += 1\n            else:\n                return -1\n\n        return deletions\n\n    results = []\n    for s in test_cases:\n        unique_chars = set(s)\n        min_deletions = float('inf')\n\n        for char in unique_chars:\n            deletions = can_form_palindrome_by_removing(s, char)\n            if deletions != -1:\n                min_deletions = min(min_deletions, deletions)\n\n        results.append(min_deletions if min_deletions != float('inf') else -1)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        s = input().strip()\n        test_cases.append(s)\n\n    # Output interface\n    results = min_deletions_to_palindrome(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import Counter\n\ndef min_erased_to_palindrome(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum number of erased symbols required to make the string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples, each containing an integer n and a string s.\n\n    Returns:\n        List[int]: List of results for each test case, where each result is the minimum number of\n                   erased symbols required to make the string a palindrome, or -1 if impossible.\n    \"\"\"\n    results = []\n\n    for n, s in test_cases:\n        min_erases = float('inf')\n        unique_chars = set(s)\n\n        for char in unique_chars:\n            left, right = 0, n - 1\n            erases = 0\n\n            while left < right:\n                if s[left] == s[right]:\n                    left += 1\n                    right -= 1\n                elif s[left] == char:\n                    left += 1\n                    erases += 1\n                elif s[right] == char:\n                    right -= 1\n                    erases += 1\n                else:\n                    erases = float('inf')\n                    break\n\n            if erases < min_erases:\n                min_erases = erases\n\n        if min_erases == float('inf'):\n            results.append(-1)\n        else:\n            results.append(min_erases)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append((n, s))\n\n# Function call\nresults = min_erased_to_palindrome(t, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef min_erasures_to_palindrome(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum number of erased symbols required to make the string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples containing the length of the string and the string itself.\n\n    Returns:\n        List[int]: List of minimum number of erased symbols for each test case, or -1 if impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\"\"\"\n        return s == s[::-1]\n\n    def min_removals_for_palindrome(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum removals needed to make the string a palindrome by removing occurrences of a specific character.\"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                left += 1\n                removals += 1\n            elif s[right] == char:\n                right -= 1\n                removals += 1\n            else:\n                return float('inf')  # Impossible to form a palindrome by removing this character\n\n        return removals\n\n    results = []\n    for n, s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_removals = float('inf')\n\n        for char in unique_chars:\n            removals = min_removals_for_palindrome(s, char)\n            min_removals = min(min_removals, removals)\n\n        results.append(min_removals if min_removals != float('inf') else -1)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append((n, s))\n\n# Output interface\nresults = min_erasures_to_palindrome(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_erasures_to_palindrome(t: int, test_cases: List[str]) -> List[int]:\n    \"\"\"Calculate the minimum number of erased symbols required to make each string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[str]): List of strings for each test case.\n\n    Returns:\n        List[int]: List of minimum number of erased symbols for each test case, or -1 if impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\n\n        Args:\n            s (str): The string to check.\n\n        Returns:\n            bool: True if the string is a palindrome, False otherwise.\n        \"\"\"\n        return s == s[::-1]\n\n    def min_removals_to_palindrome(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum removals required to make a string a palindrome by removing a specific character.\n\n        Args:\n            s (str): The string to transform.\n            char (str): The character to remove.\n\n        Returns:\n            int: Minimum number of removals required, or float('inf') if impossible.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                removals += 1\n                left += 1\n            elif s[right] == char:\n                removals += 1\n                right -= 1\n            else:\n                return float('inf')\n        \n        return removals\n\n    results = []\n    for s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_removals = float('inf')\n\n        for char in unique_chars:\n            removals = min_removals_to_palindrome(s, char)\n            min_removals = min(min_removals, removals)\n\n        results.append(min_removals if min_removals != float('inf') else -1)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append(s)\n\n# Output interface\nresults = min_erasures_to_palindrome(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef min_erased_to_palindrome(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the minimum number of erased symbols required to make the string a palindrome.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples containing the length of the string and the string itself.\n\n    Returns:\n        List[int]: List of minimum number of erased symbols for each test case, or -1 if impossible.\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        \"\"\"Check if a string is a palindrome.\n\n        Args:\n            s (str): The string to check.\n\n        Returns:\n            bool: True if the string is a palindrome, False otherwise.\n        \"\"\"\n        return s == s[::-1]\n\n    def min_removals_to_palindrome(s: str, char: str) -> int:\n        \"\"\"Calculate the minimum removals needed to make the string a palindrome by removing occurrences of a specific character.\n\n        Args:\n            s (str): The string to process.\n            char (str): The character to remove.\n\n        Returns:\n            int: Minimum number of removals, or a large number if impossible.\n        \"\"\"\n        left, right = 0, len(s) - 1\n        removals = 0\n\n        while left < right:\n            if s[left] == s[right]:\n                left += 1\n                right -= 1\n            elif s[left] == char:\n                left += 1\n                removals += 1\n            elif s[right] == char:\n                right -= 1\n                removals += 1\n            else:\n                return float('inf')  # Impossible to make palindrome by removing this character\n\n        return removals\n\n    results = []\n\n    for n, s in test_cases:\n        if is_palindrome(s):\n            results.append(0)\n            continue\n\n        unique_chars = set(s)\n        min_removals = float('inf')\n\n        for char in unique_chars:\n            removals = min_removals_to_palindrome(s, char)\n            min_removals = min(min_removals, removals)\n\n        if min_removals == float('inf'):\n            results.append(-1)\n        else:\n            results.append(min_removals)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    s = input().strip()\n    test_cases.append((n, s))\n\n# Output interface\nresults = min_erased_to_palindrome(t, test_cases)\nfor result in results:\n    print(result)\n"], "plans": ["requirement analysis:\nThe requirement is to determine the minimum number of erasures needed to convert a given string into a palindrome by removing occurrences of a single chosen letter. The solution must efficiently handle up to 100 test cases with string lengths up to 100,000, ensuring the sum of all string lengths does not exceed 200,000.\nrequirement pool:\n- Efficiently process up to 100 test cases\n- Handle string lengths up to 100,000\n- Optimize for minimal erasures\n- Provide clear output format\n- Ensure solution handles edge cases\nWe will implement a function that iterates over each character in the string and attempts to make the string a palindrome by removing occurrences of that character. For each character, we will use a two-pointer technique to check if the string can be made a palindrome by removing that character. We will keep track of the minimum number of removals required. If no character can be removed to make the string a palindrome, we will return -1. This approach ensures that we efficiently handle large inputs by minimizing unnecessary operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forwards and backwards. The requirement is to transform the given string into a palindrome by removing occurrences of a single chosen letter.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols': means we need to find the least number of occurrences of a chosen letter to remove in order to make the string a palindrome.\n\n# [degree adverb] \n    'minimum': means we need to find the smallest number of removals necessary to achieve a palindrome.\n\n# [code logic]\n    1. For each test case, iterate over each unique character in the string.\n    2. For each character, use a two-pointer approach to attempt to form a palindrome by removing occurrences of that character.\n    3. Track the number of removals needed for each character and update the minimum removals found.\n    4. If no palindrome can be formed by removing occurrences of any character, return -1 for that test case.\n    5. Output the minimum number of removals for each test case.\n\n# [edge case] \n    abcaacab = 2\n    Explanation: Removing two 'a's (first and last) results in 'bcaacb', which is a palindrome.\n    \n    xyzxyz = -1\n    Explanation: No single letter removal can make this string a palindrome.\n    \n    abba = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over each character and using two-pointer technique will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to determine the minimum number of characters to erase from a string to make it a palindrome by only removing occurrences of a single chosen character. The solution must efficiently handle up to 100 test cases with a total character count of up to 200,000. The output should be the minimum number of erasures or -1 if it's impossible.\nrequirement pool:\n- Implement the main algorithm to determine the minimum erasures needed.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the algorithm for performance improvements.\n- Provide clear and concise output formatting.\n- Include comprehensive test cases for validation.\nWe will implement a function that iterates over each possible letter choice and attempts to make the string a palindrome by removing occurrences of that letter. The function will use a two-pointer technique to check if the string can be a palindrome after removals, and will keep track of the minimum number of removals required. If no letter choice results in a palindrome, it will return -1 for that test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. The task is to transform the given string into a palindrome by removing occurrences of a single chosen letter.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols'\n    Explanation: This means we need to find the smallest number of characters that need to be removed to achieve a palindrome. In code, this can be implemented by iterating over each possible letter choice and calculating the number of removals needed for each, then selecting the minimum.\n\n# [degree adverb] \n    'minimum'\n    Explanation: The goal is to minimize the number of characters removed. This requires keeping track of the least number of deletions needed across all possible letter choices.\n\n# [code logic]\n1. For each test case, read the integer n and the string s.\n2. Initialize a variable to store the minimum number of deletions required, starting with a large value.\n3. For each letter in the alphabet:\n   - Use a two-pointer approach to attempt to form a palindrome by removing occurrences of the current letter.\n   - Count the number of deletions required.\n   - If a palindrome is formed, update the minimum deletions if the current count is lower.\n4. If no palindrome can be formed for any letter choice, return -1 for that test case.\n5. Otherwise, return the minimum number of deletions found.\n\n# [edge case] \n    Test case 1: \"a\" = 0\n    Explanation: A single character string is already a palindrome, so no deletions are needed.\n\n    Test case 2: \"abc\" = -1\n    Explanation: No single letter removal can make this string a palindrome, so the output is -1.\n\n    Test case 3: \"aaabaaa\" = 0\n    Explanation: The string is already a palindrome, so no deletions are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each letter and using two pointers will naturally handle these cases.\n", "requirement analysis:\nThe problem requires determining the minimum number of deletions of a single character type to make a string a palindrome. The solution must efficiently handle up to 100 test cases with a total character count of up to 200,000. The algorithm should consider all possible characters for deletion and find the optimal solution or determine if it's impossible.\nrequirement pool:\n- Develop an efficient algorithm to determine the minimum deletions required to form a palindrome.\n- Ensure the solution handles the maximum input constraints effectively.\n- Provide clear output indicating the number of deletions or impossibility.\n- Optimize the algorithm to minimize computational complexity.\n- Consider edge cases where the string is already a palindrome.\nWe will use a two-pointer technique to check if a string can be transformed into a palindrome by removing occurrences of a single character. For each character in the string, we will attempt to make the string a palindrome by removing occurrences of that character. We will iterate through the string using two pointers, one starting from the beginning and the other from the end, and count the number of deletions required. If the string can be made a palindrome by removing occurrences of a single character, we will record the minimum number of deletions. If no such character exists, we will return -1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. The task is to transform the given string into a palindrome by removing occurrences of a single character.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols': This means we need to find the smallest number of deletions required to make the string a palindrome.\n    'at her choice, possibly none or all': This indicates that the number of deletions can range from zero to all occurrences of a chosen character.\n\n# [degree adverb]\n    'minimum': This indicates that we need to find the smallest possible number of deletions to achieve the goal.\n\n# [code logic]\n1. For each test case, read the integer n and the string s.\n2. Initialize a variable to store the minimum number of deletions required, starting with a large value.\n3. For each unique character in the string, attempt to make the string a palindrome by removing occurrences of that character:\n   - Use two pointers, one starting at the beginning (left) and one at the end (right) of the string.\n   - Move the pointers towards each other, skipping over occurrences of the chosen character.\n   - Count the number of deletions required to make the remaining characters form a palindrome.\n4. If a valid palindrome can be formed, update the minimum deletions required.\n5. If no valid palindrome can be formed for any character, return -1 for that test case.\n6. Output the minimum number of deletions for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 1\n    Explanation: A single character is already a palindrome, so no deletions are needed.\n    \n    Test case: 2\n    Input: 2\n    Explanation: Two different characters cannot form a palindrome by removing one type, so return -1.\n    \n    Test case: 'aaaa'\n    Output: 0\n    Explanation: The string is already a palindrome, so no deletions are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers cases where no deletions are needed or where it's impossible to form a palindrome.\n", "requirement analysis:\nThe requirement is to determine the minimum number of erasures needed to convert a given string into a palindrome by removing occurrences of a single chosen letter. The solution must efficiently handle multiple test cases and large strings, ensuring minimal erasures and providing clear output.\nrequirement pool:\n- Efficiently handle large input sizes up to 10^5 characters\n- Determine the minimum number of erasures needed\n- Provide clear output for each test case\n- Handle multiple test cases in a single run\n- Optimize for minimal erasures\nWe will implement a function that iterates over each character in the string and attempts to make the string a palindrome by removing occurrences of that character. For each character, we will use a two-pointer technique to check if the string can be made a palindrome by removing the minimum number of that character. If a palindrome is possible, we will track the minimum number of removals required. If no character can be removed to form a palindrome, we will return -1 for that test case. This approach ensures efficiency even for large strings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. The task is to make the string a palindrome by removing occurrences of one chosen character.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols'\n    Explanation: This means we need to find the smallest number of characters to remove to achieve a palindrome. In code, this involves tracking the count of removals for each character and selecting the minimum.\n\n# [degree adverb] \n    'minimum'\n    Explanation: This indicates that we need to find the smallest possible number of removals. In code, this can be implemented by maintaining a variable to store the minimum number of removals found.\n\n# [code logic]\n1. For each test case, read the integer n and the string s.\n2. Initialize a variable to store the minimum number of removals, set it to a large value initially.\n3. Iterate over each unique character in the string s.\n4. For each character, use a two-pointer approach:\n   - Initialize two pointers, one at the start and one at the end of the string.\n   - Move the pointers towards each other, skipping over occurrences of the chosen character.\n   - Count how many times you skip the chosen character.\n   - If the remaining string between the pointers is a palindrome, update the minimum number of removals if this count is less than the current minimum.\n5. If no palindrome can be formed by removing any character, return -1 for that test case.\n6. Output the minimum number of removals for each test case.\n\n# [edge case] \n    abcaacab = 2\n    Explanation: By removing two 'a's (first and last), we get 'bcaacb', which is a palindrome.\n    \n    xyzxyz = -1\n    Explanation: No single character removal can make this string a palindrome.\n    \n    abba = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over each character and using a two-pointer approach inherently handles these cases.\n", "requirement analysis:\nThe task is to determine the minimum number of characters that need to be erased from a given string to make it a palindrome by only removing occurrences of a single chosen character. The solution should efficiently handle multiple test cases and large input sizes, ensuring that the sum of all string lengths does not exceed 200,000.\nrequirement pool:\n- Implement the main algorithm to determine the minimum number of erasures needed to form a palindrome.\n- Ensure the solution handles up to 100 test cases efficiently.\n- Optimize the algorithm to handle the maximum input size within time limits.\n- Provide clear and concise output for each test case.\n- Consider edge cases such as already palindromic strings or strings where no palindrome can be formed.\nWe will implement a function that iterates over each character in the string and attempts to form a palindrome by removing occurrences of that character. The function will use a two-pointer technique to check if the remaining string can be a palindrome after removing the chosen character. We will keep track of the minimum number of removals required for each character and return the smallest value. If no palindrome can be formed, we will return -1. This approach ensures that we efficiently handle up to 100 test cases and large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. For example, 'kek', 'abacaba', and 'r' are palindromes.\n\n    'erase some occurrences'\n    Explanation: This means selectively removing instances of a chosen character from the string to potentially form a palindrome.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols'\n    Explanation: This refers to the smallest count of character removals needed to transform the string into a palindrome. In code, this can be implemented by iterating over possible characters to remove and keeping track of the minimum removals needed.\n\n# [degree adverb] \n    'minimum'\n    Explanation: The least amount of something, in this case, the fewest characters that need to be erased to achieve a palindrome. In code, this is typically managed by maintaining a variable that updates only when a smaller value is found.\n\n# [code logic]\n1. For each test case, read the integer n and the string s.\n2. Initialize a variable to store the minimum number of removals needed, starting with a large value.\n3. For each unique character in the string:\n   - Use a two-pointer approach to attempt forming a palindrome by removing occurrences of this character.\n   - Count how many removals are needed.\n   - If a palindrome is formed, update the minimum removals if this count is smaller.\n4. If no palindrome can be formed for any character, return -1 for that test case.\n5. Otherwise, return the minimum number of removals found.\n\n# [edge case] \n    Test case 1: \"a\" = 0\n    Explanation: A single character is already a palindrome, so no removals are needed.\n\n    Test case 2: \"abc\" = -1\n    Explanation: No single character removal can make this string a palindrome.\n\n    Test case 3: \"aaabaaa\" = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each character and using two pointers will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to develop a solution that can determine the minimum number of deletions required to make a string a palindrome by removing occurrences of a single chosen character. The solution must handle multiple test cases efficiently, especially given the constraint that the sum of string lengths across all test cases can be large. The output should clearly indicate the minimum deletions or if it's impossible to form a palindrome.\nrequirement pool:\n- Efficiently process up to 100 test cases with a total of 200,000 characters.\n- Determine the minimum deletions required to form a palindrome.\n- Provide clear error messages when a palindrome cannot be formed.\n- Optimize for performance to handle large inputs quickly.\n- Ensure the solution is easy to use and understand.\nWe will implement a function that iterates over each character in the string and attempts to form a palindrome by removing occurrences of that character. The function will use a two-pointer technique to check if the remaining string can be a palindrome after removing the chosen character. This approach ensures that we efficiently handle large inputs by minimizing unnecessary operations. We will use Python's built-in capabilities to manage string operations and comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forwards and backwards. The requirement is to transform the given string into a palindrome by removing occurrences of a single chosen letter.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols': means we need to find the least number of occurrences of a chosen letter to remove in order to make the string a palindrome.\n\n# [degree adverb] \n    'minimum': means we need to minimize the number of symbols erased to achieve a palindrome.\n\n# [code logic]\n    1. For each test case, iterate over each unique character in the string.\n    2. For each character, use a two-pointer approach to attempt forming a palindrome by removing occurrences of that character.\n    3. If the string can be transformed into a palindrome, calculate the number of removals needed.\n    4. Track the minimum number of removals across all characters for each test case.\n    5. If no palindrome can be formed, return -1 for that test case.\n\n# [edge case] \n    Test case with already palindrome string: abba = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n    \n    Test case with no possible palindrome: xyzxyz = -1\n    Explanation: No single character removal can transform the string into a palindrome.\n    \n    Test case with all identical characters: aaaaa = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each character and attempting to form a palindrome will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to determine the minimum number of symbols to erase from a string to make it a palindrome by choosing one letter and erasing its occurrences. The solution must efficiently handle multiple test cases and large strings, providing clear output for each case.\nrequirement pool:\n- Efficiently process up to 100 test cases with large strings.\n- Determine if it's impossible to make a string a palindrome.\n- Optimize the solution to minimize symbol erasure.\n- Ensure the output format is clear and concise.\n- Handle edge cases such as already palindromic strings.\nWe will iterate over each test case and for each string, try to make it a palindrome by choosing one letter and erasing its occurrences. We will use a two-pointer technique to check if a string can be a palindrome by erasing occurrences of a specific letter. This approach will efficiently handle large strings and multiple test cases. We will use the collections library to count occurrences of each letter.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. For example, 'kek' and 'abacaba' are palindromes.\n\n    'erase some occurrences'\n    Explanation: This means removing some or all instances of a chosen letter from the string to potentially form a palindrome.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols'\n    Explanation: This refers to the smallest number of characters that need to be removed to achieve the desired outcome. In code, this can be implemented by iterating over possible letters to erase and calculating the minimum removals needed.\n\n# [degree adverb]\n    'impossible'\n    Explanation: This indicates that there is no way to transform the string into a palindrome by erasing occurrences of a single letter. In code, this can be represented by returning -1 when no solution is found.\n\n# [code logic]\n1. For each test case, read the integer n and the string s.\n2. Initialize a variable to store the minimum number of erasures needed, starting with a large value.\n3. Iterate over each unique character in the string s.\n4. Use a two-pointer technique to attempt forming a palindrome by erasing occurrences of the current character.\n5. If a palindrome can be formed, update the minimum erasures needed.\n6. If no palindrome can be formed for any character, return -1 for that test case.\n7. Output the minimum number of erasures for each test case.\n\n# [edge case]\n    Test case 1: \"a\" = 0\n    Explanation: The string is already a palindrome, so no erasures are needed.\n\n    Test case 2: \"abc\" = -1\n    Explanation: No single character can be removed to make this string a palindrome.\n\n    Test case 3: \"aaabaaa\" = 0\n    Explanation: The string is already a palindrome, so no erasures are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking each character and using two pointers will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to determine the minimum number of erasures needed to convert a given string into a palindrome by removing occurrences of a single chosen letter. The solution must efficiently handle multiple test cases and large input sizes, ensuring that the output format is consistent and easy to interpret.\nrequirement pool:\n- Efficiently handle large input sizes up to 10^5 characters\n- Provide clear output format for each test case\n- Optimize the solution for minimal erasures\n- Handle edge cases where palindrome formation is impossible\n- Ensure the solution is user-friendly and easy to understand\nWe will implement a function that iterates over each possible character in the string and attempts to form a palindrome by removing occurrences of that character. The function will use a two-pointer technique to check if the string can be a palindrome after removing certain characters. If a palindrome can be formed, it will calculate the minimum number of removals required. If no palindrome can be formed for any character, it will return -1. This approach ensures efficiency even for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. The requirement is to transform the given string into a palindrome by removing occurrences of a single chosen character.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols': The goal is to erase the fewest possible occurrences of a chosen character to make the string a palindrome.\n    Implementation: Track the number of removals needed for each character choice and select the minimum.\n\n# [degree adverb]\n    'minimum': Refers to the smallest number of characters that need to be erased to achieve a palindrome.\n    Implementation: Compare the number of removals for each character choice and select the smallest.\n\n# [code logic]\n    1. For each test case, iterate over each unique character in the string.\n    2. For each character, use a two-pointer approach to attempt forming a palindrome by removing occurrences of that character.\n    3. Track the number of removals needed for each character choice.\n    4. If a palindrome can be formed, store the minimum number of removals.\n    5. If no palindrome can be formed for any character, return -1 for that test case.\n\n# [edge case]\n    abcaacab = 2\n    Explanation: Choose 'a' and remove its first and last occurrences to form 'bcaacb', which is a palindrome.\n    \n    xyzxyz = -1\n    Explanation: No single character removal can transform the string into a palindrome.\n    \n    abba = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by checking all possible character removals and selecting the minimum or returning -1 if impossible.\n", "requirement analysis:\nThe requirement is to transform a given string into a palindrome by erasing occurrences of a single chosen letter, minimizing the number of erasures. The solution must efficiently handle multiple test cases and large input sizes, ensuring the output format is clear and concise.\nrequirement pool:\n- Efficiently handle large input sizes up to 10^5 characters.\n- Provide clear output format for each test case.\n- Optimize the solution to minimize the number of erasures.\n- Handle edge cases where palindrome formation is impossible.\n- Ensure the solution is easy to understand and implement.\nWe will implement a function that iterates over each possible character that can be removed and checks if the string can be transformed into a palindrome by removing occurrences of that character. The function will use a two-pointer technique to check for palindromes and count the minimum number of removals required. If no character can be removed to form a palindrome, the function will return -1 for that test case. This approach ensures efficiency even for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. The requirement is to transform the given string into a palindrome by removing occurrences of a single chosen character.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols'\n    Explanation: This means we need to find the smallest number of occurrences of a chosen character to remove in order to make the string a palindrome.\n\n# [degree adverb]\n    'minimum'\n    Explanation: We need to ensure that the number of erased symbols is as small as possible while achieving the goal of making the string a palindrome.\n\n# [code logic]\n    1. For each test case, iterate over each unique character in the string.\n    2. For each character, use a two-pointer approach to check if the string can be made into a palindrome by removing occurrences of that character.\n    3. Count the number of removals required for each character and keep track of the minimum count.\n    4. If no character can be removed to form a palindrome, return -1 for that test case.\n    5. Output the minimum number of removals for each test case.\n\n# [edge case]\n    abcaacab = 2\n    Explanation: By removing two 'a's, either the first and last or all 'b's, we can make the string a palindrome.\n    \n    xyzxyz = -1\n    Explanation: No single character removal can make this string a palindrome.\n    \n    abba = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over each character and using a two-pointer approach will naturally handle these cases.\n", "requirement analysis:\nThe problem requires finding the minimum number of characters to erase from a string to make it a palindrome by only removing occurrences of a single chosen character. The solution must efficiently handle up to 100 test cases with a total character count of up to 200,000. The algorithm should consider all possible characters for removal and determine the optimal choice.\nrequirement pool:\n- Develop an efficient algorithm to determine the minimum number of erasures needed.\n- Ensure the solution handles edge cases and large inputs within constraints.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm to minimize the number of erased symbols.\n- Implement comprehensive testing to validate the solution.\nWe will iterate over each character in the string and attempt to make the string a palindrome by removing occurrences of that character. For each character, we will use a two-pointer technique to check if the string can be made a palindrome by removing that character. We will keep track of the minimum number of removals required. If no character can make the string a palindrome, we will return -1 for that test case. This approach ensures that we efficiently handle the constraints and large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'palindrome'\n    Explanation: A palindrome is a string that reads the same forward and backward. For example, 'kek' and 'abba' are palindromes.\n\n    'erase some occurrences'\n    Explanation: This means selectively removing instances of a chosen character from the string to potentially form a palindrome.\n\n# [phrase showing quantity relationship]\n    'minimum number of erased symbols'\n    Explanation: This refers to the smallest count of character removals needed to transform the string into a palindrome. In code, this can be implemented by keeping track of the number of removals for each character and selecting the minimum.\n\n# [degree adverb] \n    'minimum'\n    Explanation: The smallest possible value. In this context, it refers to the least number of characters that need to be removed to achieve a palindrome.\n\n# [code logic]\n1. For each test case, read the integer n and the string s.\n2. Initialize a variable to store the minimum number of removals, starting with a large value.\n3. Iterate over each unique character in the string:\n   - Use a two-pointer approach to attempt forming a palindrome by removing occurrences of the current character.\n   - Count the number of removals needed.\n   - Update the minimum number of removals if the current attempt requires fewer removals.\n4. If no palindrome can be formed by removing any single character, return -1 for that test case.\n5. Otherwise, return the minimum number of removals found.\n\n# [edge case] \n    Test case 1: \"a\" = 0\n    Explanation: A single character is already a palindrome, so no removals are needed.\n\n    Test case 2: \"abc\" = -1\n    Explanation: No single character removal can make this string a palindrome.\n\n    Test case 3: \"aaabaaa\" = 0\n    Explanation: The string is already a palindrome, so no removals are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over each character and using a two-pointer approach will naturally handle these cases.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 175, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2 \u22c5 t lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string.\n\nThe second line of each test case contains the string s consisting of n lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and -1, if it is impossible.\n\nExample\n\nInput\n\n\n5\n8\nabcaacab\n6\nxyzxyz\n4\nabba\n8\nrprarlap\n10\nkhyyhhyhky\n\n\nOutput\n\n\n2\n-1\n0\n3\n2\n\nNote\n\nIn the first test case, you can choose a letter 'a' and erase its first and last occurrences, you will get a string 'bcaacb', which is a palindrome. You can also choose a letter 'b' and erase all its occurrences, you will get a string 'acaaca', which is a palindrome as well.\n\nIn the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome.\n\nIn the third test case, you don't have to erase any symbols because the string is already a palindrome.", "mutate_method": "condense_two2one", "parent_index": 101}
