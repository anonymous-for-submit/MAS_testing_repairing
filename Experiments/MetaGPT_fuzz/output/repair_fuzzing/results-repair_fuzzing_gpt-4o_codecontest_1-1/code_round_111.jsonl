{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of 3 positive numbers. He noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of 3 positive numbers. He noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of 3 positive numbers. He noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, in increasing order, and produced an array b consisting of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of 3 positive numbers. Noting down the totals of all non-empty subsequences of this array, he arranged them in ascending order and produced an array b consisting of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b, assuming all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem, b is sorted and contains the sums of all non-empty subsequences of a.\n        # The smallest element in b is a_1, the second smallest is a_2, and the largest is a_1 + a_2 + a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    \n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        a3 = b[6] - a1 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a1_a2_a3 = b[6]\n        # Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2\n        a_3 = sum_a1_a2_a3 - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list of non-empty subsequence sums b.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Identify a_1 as the smallest element in b\n        a_1 = b[0]\n        # Identify a_2 as the second smallest element in b\n        a_2 = b[1]\n        # Identify a_3 by subtracting a_1 and a_2 from the largest element in b\n        a_3 = b[-1] - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    # Call the restore_array function\n    results = restore_array(t, test_cases)\n    # Print the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        a2_a3 = b[5]\n        \n        # Calculate a2 and a3 using the relationships\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a2_a3\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    result = []\n    for b in test_cases:\n        # The smallest element in b is one of the original numbers\n        a1 = b[0]\n        # The largest element in b is the sum of all three original numbers\n        total_sum = b[-1]\n        # Deduce the remaining elements using the properties of subsequences\n        a2 = b[1]  # The second smallest element in b\n        a3 = total_sum - a1 - a2  # Calculate the third element\n        result.append([a1, a2, a3])\n    return result\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    # Restore the original arrays\n    result = restore_array(t, test_cases)\n    # Output the restored arrays\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is the sum a_1 + a_2 + a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[-1] - a_1 - a_2\n        \n        # Append the restored array a to the results\n        results.append([a_1, a_2, a_3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a_3 = b[-1] - (a_1 + a_2)\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Call the function to restore arrays\n    results = restore_array(n, test_cases)\n    # Print the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the sum of all elements\n        a3 = sum_a - a1 - a2\n        # Append the restored array a to the results\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Output interface\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a = b[-1]\n        # Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2\n        a_3 = sum_a - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Call the function to restore the array\n    results = restore_array(n, test_cases)\n    # Print the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and easy to interpret.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for multiple test cases\n- Handle large integer values without performance degradation\n- Provide clear and concise output format\n- Optimize for both speed and clarity\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. By subtracting the smallest and second smallest elements from the largest, we can find a_3. This approach is efficient and works well within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': refers to the smallest element in array b, which corresponds to a_1.\n    'largest': refers to the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n\n# [code logic]\n    1. Identify the smallest element in array b, which is a_1.\n    2. Identify the second smallest element in array b, which is a_2.\n    3. Identify the largest element in array b, which is the sum a_1 + a_2 + a_3.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n    5. Return the values of a_1, a_2, and a_3.\n\n# [edge case] \n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest element is 1 (a_1), the second smallest is also 1 (a_2), and the largest element is 1000000000 (a_1 + a_2 + a_3). Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: The smallest element is 300000000 (a_1), the second smallest is also 300000000 (a_2), and the largest element is 900000000 (a_1 + a_2 + a_3). Thus, a_3 = 900000000 - 300000000 - 300000000 = 300000000.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest element is 5 (a_1 + a_2 + a_3). Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying a_1, a_2, and calculating a_3 using subtraction from the largest element.\n", "requirement analysis:\nThe task requires determining the original array of three distinct numbers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the output format is correct and consistent.\n- Optimize for performance to handle maximum constraints.\n- Provide a user-friendly interface for input and output.\nWe will use a straightforward approach to determine the original array 'a' from the given sorted array 'b'. The key observation is that the smallest element in 'b' is 'a_1', the second smallest element is 'a_2', and the largest element is the sum of all three elements 'a_1 + a_2 + a_3'. This allows us to deduce 'a_3' by subtracting 'a_1' and 'a_2' from the largest element. This approach is efficient and simple, leveraging the properties of subsequence sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array 'a' consists of exactly three elements, all of which are greater than zero.\n\n    '7 numbers': The array 'b' consists of exactly seven elements, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to 'a_1'.\n2. Identify the second smallest element in array 'b', which corresponds to 'a_2'.\n3. Identify the largest element in array 'b', which is the sum of all three elements: 'a_1 + a_2 + a_3'.\n4. Calculate 'a_3' by subtracting 'a_1' and 'a_2' from the largest element.\n5. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in b are either 1 or sums of 1s, indicating that a consists of three 1s.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest two elements are 1 and 2. The largest element is 7, so a_3 = 7 - 1 - 2 = 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are either 1000000000 or sums of it, indicating that a consists of three 1000000000s.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to handle all cases as it directly derives the values of a_1, a_2, and a_3 from the properties of the array b.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the properties of the array b, which is the sorted list of all non-empty subsequences of array a. Since a consists of 3 distinct positive numbers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, all of which are positive integers.\n    \n    '7 numbers': The array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    'smallest': Refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all three elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b as a_1.\n3. Identify the second smallest element in b as a_2.\n4. Identify the largest element in b as the sum of a_1, a_2, and a_3.\n5. Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2.\n6. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    1 1 2 999999998 999999999 999999999 1000000000 = 999999998 1 1\n    Explanation: The smallest two numbers are both 1, and the largest number is 1000000000. Therefore, a_3 = 1000000000 - (1 + 1) = 999999998.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to 300000000.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest number is 1, the second smallest is 2, and the largest is 5. Therefore, a_3 = 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a given sorted array of seven integers, which represent all possible non-empty subsequence sums of the original array. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Restore the original array a from the given array b.\n- Ensure the solution is efficient for the maximum constraints.\n- Handle edge cases where elements in b are very large.\n- Provide clear and concise output for each test case.\n- Allow flexibility in output if multiple solutions exist.\nWe will leverage the properties of the array b, which is the sorted list of all non-empty subsequence sums of array a. Since a consists of three distinct positive integers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can deduce the values of a_1, a_2, and a_3 efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of three elements, there are 7 non-empty subsequences.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all three elements'\n    Explanation: This indicates that the largest number in array b is the sum of all elements in array a. In code, this can be implemented by identifying the largest element in b.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify a_1 as the smallest element in b.\n3. Identify a_2 as the second smallest element in b.\n4. Identify a_3 by subtracting a_1 and a_2 from the largest element in b.\n5. Return a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest element is 1000000000, which is the sum of all three elements.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest element is 5, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles them by correctly identifying the smallest, second smallest, and largest elements in array b.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is correctly formatted. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format matches requirements\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently reconstruct the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three positive integers.\n    \n    '7 numbers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a (a_1).\n2. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n3. Identify the second largest element in b, which is the sum of the two largest elements in a (a_2 + a_3).\n4. Use these relationships to solve for a_2 and a_3:\n   - a_2 = (second largest element) - (smallest element)\n   - a_3 = (largest element) - (second largest element)\n5. Return the elements a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each number in array a is 1.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so each number in array a is 1000000000.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the second largest is 6 (2+4), and the largest is 7 (1+2+4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of the sorted array b to deduce the values of array a.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Implement the main logic to restore array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for performance with large inputs.\n- Provide clear and concise output for each test case.\n- Include error handling for unexpected input formats.\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 distinct integers. The key observation is that the smallest element in b is one of the original numbers, and the largest element in b is the sum of all three original numbers. By using these properties, we can efficiently restore the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all three original numbers'\n    Explanation: The largest number in array b is the sum of all elements in array a. This helps us identify the total sum of the original array.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest number in array b is one of the original numbers in array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n    2. Identify the largest element in array b, which is the sum of all elements in array a.\n    3. Use the properties of subsequences to deduce the remaining elements of array a.\n    4. Return the three elements of array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sum matches the largest element in b.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest element is the sum of all three numbers, which is 7.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sum matches the largest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle these cases by identifying the smallest and largest elements and deducing the remaining elements based on subsequence properties.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct positive integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Efficiently compute the original array a from the given array b.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases where numbers are at their maximum constraints.\n- Allow flexibility in output if multiple solutions exist.\nWe will use the properties of the sorted array b to deduce the original array a. Since b contains all possible sums of non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all elements a_1 + a_2 + a_3. By using these properties, we can efficiently restore the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, all of which are positive integers.\n    \n    '7 numbers': The array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a_1.\n2. Identify the second smallest element in b, which corresponds to a_2.\n3. Identify the largest element in b, which corresponds to the sum a_1 + a_2 + a_3.\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n5. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    b = [1, 1, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest element is 1 (a_1), the second smallest is 1 (a_2), and the largest is 5 (a_1 + a_2 + a_3). Thus, a_3 = 5 - 1 - 1 = 3.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = [1000000000, 1000000000, 1000000000]\n    Explanation: All elements are equal, so each element of a is equal to the smallest element.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = [1, 2, 4]\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest is 7 (a_1 + a_2 + a_3). Thus, a_3 = 7 - 1 - 2 = 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and calculating the third element will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output format is correct. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format matches requirements\n- Optimize for large numbers\n- Provide multiple valid outputs if possible\nWe will leverage the properties of the array b, which is the sorted list of all non-empty subsequences of array a. The smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. By using these properties, we can efficiently determine the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': The smallest element in array b corresponds to the smallest element in array a.\n    'largest': The largest element in array b corresponds to the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify a_1 as the smallest element in b.\n    3. Identify a_2 as the second smallest element in b.\n    4. Calculate a_3 using the formula: a_3 = largest element in b - (a_1 + a_2).\n    5. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    Input: [1, 1, 2, 999999998, 999999999, 999999999, 1000000000]\n    Output: 999999998 1 1\n    Explanation: The smallest two numbers are both 1, and the largest number is 1000000000. Thus, a_3 = 1000000000 - (1 + 1) = 999999998.\n\n    Input: [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000]\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are the same, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: [1, 2, 2, 3, 3, 4, 5]\n    Output: 1 2 2\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 5. Thus, a_3 = 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by leveraging the properties of sorted subsequences.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide output in the specified format. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large numbers\n- Provide clear documentation\nWe will implement a function that takes the array b and deduces the array a by leveraging the properties of the sums of subsequences. The smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these properties, we can efficiently restore the array a. We will use Python's built-in list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers'\n    Explanation: The array a consists of exactly three positive integers.\n\n    '7 numbers'\n    Explanation: The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a (a_1).\n2. Identify the second smallest element in b, which corresponds to the second smallest element in a (a_2).\n3. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in b.\n5. Return the elements a_1, a_2, and a_3 as the restored array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest element is 1, and the largest is 3, which is the sum of all elements.\n    \n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 5. Subtracting gives us the third element as 2.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but follow the same logic as smaller numbers. The smallest is 1000000000, and the largest is 3000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by leveraging the properties of subsequences and their sums.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide output in the specified format. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large numbers\n- Provide multiple valid outputs if possible\nWe will leverage the properties of the array b, which is the sorted list of all non-empty subsequences of array a. Since a consists of 3 distinct positive numbers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. Using these properties, we can deduce the values of a_1, a_2, and a_3 efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, all of which are positive integers.\n\n    '7 numbers': The array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to the smallest element in array a.\n\n    'largest': Refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b as a_1.\n3. Identify the second smallest element in b as a_2.\n4. Identify the largest element in b as the sum of a_1, a_2, and a_3.\n5. Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2.\n6. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so each element in array a is 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest is 1, second smallest is 2, and the largest is 7. Thus, a_3 = 7 - (1 + 2) = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal to the maximum possible value, so each element in array a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted subsequences and their sums.\n"], "scores": [], "pass_results": [true, false, true, false, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 111, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 91}
