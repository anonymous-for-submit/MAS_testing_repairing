{"name": "1607_F. Robot on the Board 2", "description": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns). The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right.\n\nThe robot is able to move from the current cell to one of the four cells adjacent by side.\n\nEach cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively.\n\nThe robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. \n\n  * If the robot moves beyond the edge of the board, it falls and breaks. \n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore). \n\n\n\nRobot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written (it does not matter whether to another square or beyond the edge of the board).\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "tags": ["brute force", "dfs and similar", "dp", "graphs", "implementation"], "difficulty": 12, "id": 1607, "sample_io": [{"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4\n"]}], "test_list": [{"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 6\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nUDUR\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDLDU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 2 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n2 1 7\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nRUDU\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nRUDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRDRR\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 7\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 6\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 10\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 10\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDUDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 10\n1 1 3"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nUDRU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n2 1 7\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 6\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULRL\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 2 8\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDUD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n3 3 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n2 2 4\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nURLL\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 1 12\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDLDU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 9\n1 2 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 1 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nULDD\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 6\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 2\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nUUDR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n1 2 2\n3 1 5\n4 3 10\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDRUU\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDRUU\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nDRRR\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n3 2 5\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 9\n3 3 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n4 3 5\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 5\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDULD\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 6\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nURLL\n\n4 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nUURD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n1 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDRUU\nURUD\nRLLU\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 2 2\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUDU\nDRUU\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n2 1 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nDRRR\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n1 2 4\n3 2 5\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n3 1 4\n3 1 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n2 2 4\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nDRRR\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n1 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n2 2 4\n2 1 7\n2 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nDDLU\nDUDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n2 2 4\n4 3 10\n1 1 3"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n1 2 3\n2 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nUDDL\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n1 2 3\n4 3 12\n3 4 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n3 3 6"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n3 1 5\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n1 1 4\n3 1 4\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 4\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n1 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n2 2 4\n4 3 10\n1 2 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nDDLR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 1 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nLLUR\n\n4 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n3 1 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n1 2 2\n1 2 3\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 6\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 6\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n3 2 13\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 1 4\n2 1 3\n3 1 6\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nUURD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 2 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nUDLD\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 6\n3 2 6\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n2 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n2 2 4\n2 1 7\n2 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 4\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n3 1 5\n4 3 9\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nDURU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 2 2\n1 2 3\n2 1 3\n3 1 4\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRDUU\nDURU\nULLR\n\n2 4\nDDLU\nDDUR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n2 2 4\n1 1 5\n2 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n1 2 2\n1 2 3\n3 2 13\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nLU\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 6\n4 3 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 4\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 2\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n2 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 10\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nUDRU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 3\n2 1 3\n3 1 5\n3 2 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nDRUU\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n2 1 7\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nRLLU\n\n4 4\nULDD\nRDDU\nUUUU\nRDDL\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n3 1 7\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 4\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nLRR\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 2 2\n1 1 4\n1 1 4\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRLR\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 2\n1 2 2\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nUR\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 2\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nULDD\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n2 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nLLUR\n\n1 4\nDDLU\nDRDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 1 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 2\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n3 1 5\n3 2 6\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nDRRR\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 1 4\n3 1 4\n4 3 9\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nLU\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n2 2 4\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nURLL\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n1 2 3\n4 1 8\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nDU\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 1 4\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDUUR\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nUDDR\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 11\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDDL\n", "output": ["1 1 1\n1 1 3\n2 1 3\n1 2 2\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n3 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDDRU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 2\n2 1 3\n3 1 5\n4 3 12\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nDLDU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n3 2 6\n3 1 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRDR\nRUUD\nUDRU\nULRL\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 9\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nUURD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 10\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nLD\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n2 1 3\n2 1 3\n1 2 3\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nRLLU\n\n4 4\nDDLU\nUDDR\nUUUU\nDDLR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 1 9\n1 3 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nDRUU\nURUD\nRLLU\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n3 2 6\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nLU\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRUDD\nUUUU\nDRLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 4\n4 3 12\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 3 12\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRDR\nRUUD\nURDU\nULRL\n\n4 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n4 2 8\n1 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nUR\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n1 4\nDDLU\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n1 2 2\n3 1 5\n4 3 12\n1 3 2"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nULDD\nURDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n3 2 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n4 3 12\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nUR\n\n4 4\nRRRD\nRUDU\nDURU\nULLR\n\n4 4\nDDLU\nDRDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 3\n2 1 6\n1 3 5"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nUR\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nDUUR\nURUD\nULLR\n\n4 4\nULDD\nRDDU\nUUUU\nDLDR\n", "output": ["1 1 1\n1 1 3\n1 2 3\n2 1 3\n3 1 5\n3 2 6\n3 1 4"]}, {"input": "7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nLD\nUL\nUR\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n2 4\nDDLU\nRUDD\nUUUU\nRDLD\n", "output": ["1 1 1\n1 1 3\n1 1 4\n2 1 3\n1 2 4\n4 3 12\n1 1 4"]}], "task_id": "codecontest/103", "prompt": "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns), with rows numbered from 1 to n from top to bottom, and columns from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side. Each cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively. The robot can start its movement in any cell, and then move to the adjacent square in the direction indicated on the current square in one move.\n\n  * If the robot moves beyond the edge of the board, it falls and breaks.\n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore).\n\nRobot can choose any cell as the starting cell and its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written. It does not matter whether to another square or beyond the edge of the board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "repair_prompt": ["The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns), with rows numbered from 1 to n from top to bottom, and columns from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side. Each cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively. The robot can start its movement in any cell, and then move to the adjacent square in the direction indicated on the current square in one move.\n\n  * If the robot moves beyond the edge of the board, it falls and breaks.\n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore).\n\nRobot can choose any cell as the starting cell and its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written. It does not matter whether to another square or beyond the edge of the board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns), with rows numbered from 1 to n from top to bottom, and columns from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side. Each cell has one of the symbols 'L', 'R', 'D' or 'U' written on it. These symbols indicate the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively. The robot can start its movement in any cell, and then move to the adjacent square in the direction indicated on the current square in one move.\n\n  * If the robot moves beyond the edge of the board, it falls and breaks.\n  * If the robot appears in the cell it already visited before, it breaks. This means it stops and doesn't move anymore.\n\nRobot can choose any cell as the starting cell and its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written. It does not matter whether to another square or beyond the edge of the board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "The robot is located on a checkered rectangular board of size n \u00d7 m (n rows, m columns), with rows numbered from 1 to n from top to bottom, and columns from 1 to m from left to right; it is able to move from the current cell to one of the four cells adjacent by side. Each cell has one of the symbols 'L', 'R', 'D' or 'U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively. The robot can start its movement in any cell, and then move to the adjacent square in the direction indicated on the current square in one move.\n\n  * If the robot moves beyond the edge of the board, it falls and breaks.\n  * If the robot appears in the cell it already visited before, it breaks (it stops and doesn't move anymore).\n\nRobot can choose any cell as the starting cell and its goal is to make the maximum number of steps before it breaks or stops.\n\nDetermine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written. It does not matter whether to another square or beyond the edge of the board.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the optimal starting cell for the robot to maximize the number of moves.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the dimensions of the board and the board itself.\n\n    Returns:\n        A list of tuples, each containing the optimal starting cell (row, column) and the maximum number of moves.\n    \"\"\"\n    def dfs(x: int, y: int, board: List[str], n: int, m: int, visited: List[List[bool]], memo: List[List[int]]) -> int:\n        \"\"\"Perform a depth-first search to simulate the robot's movement.\n\n        Args:\n            x: Current row position of the robot.\n            y: Current column position of the robot.\n            board: The board configuration.\n            n: Number of rows in the board.\n            m: Number of columns in the board.\n            visited: A matrix to track visited cells.\n            memo: A matrix to store results of previously computed paths.\n\n        Returns:\n            The number of moves the robot can make from the current position.\n        \"\"\"\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return 0  # Robot falls off the board\n\n        if visited[x][y]:\n            return 0  # Robot revisits a cell\n\n        if memo[x][y] != -1:\n            return memo[x][y]  # Return cached result\n\n        visited[x][y] = True\n        direction = board[x][y]\n        next_x, next_y = x, y\n\n        if direction == 'L':\n            next_y -= 1\n        elif direction == 'R':\n            next_y += 1\n        elif direction == 'U':\n            next_x -= 1\n        elif direction == 'D':\n            next_x += 1\n\n        moves = 1 + dfs(next_x, next_y, board, n, m, visited, memo)\n        visited[x][y] = False\n        memo[x][y] = moves\n        return moves\n\n    results = []\n    for n, m, board in test_cases:\n        max_moves = 0\n        start_row, start_col = 1, 1\n        memo = [[-1] * m for _ in range(n)]\n\n        for i in range(n):\n            for j in range(m):\n                visited = [[False] * m for _ in range(n)]\n                moves = dfs(i, j, board, n, m, visited, memo)\n                if moves > max_moves:\n                    max_moves = moves\n                    start_row, start_col = i + 1, j + 1\n\n        results.append((start_row, start_col, max_moves))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the optimal starting position for the robot to make the maximum number of moves.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing the board dimensions and the board itself.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of results for each test case, each containing the starting row, column, and maximum number of moves.\n    \"\"\"\n    results = []\n\n    # Direction vectors for 'L', 'R', 'D', 'U'\n    direction_map = {\n        'L': (0, -1),\n        'R': (0, 1),\n        'D': (1, 0),\n        'U': (-1, 0)\n    }\n\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_start = (1, 1)\n\n        for start_row in range(n):\n            for start_col in range(m):\n                visited = set()\n                current_row, current_col = start_row, start_col\n                moves = 0\n\n                while True:\n                    if (current_row, current_col) in visited:\n                        break\n                    visited.add((current_row, current_col))\n                    moves += 1\n\n                    direction = board[current_row][current_col]\n                    delta_row, delta_col = direction_map[direction]\n                    next_row = current_row + delta_row\n                    next_col = current_col + delta_col\n\n                    if not (0 <= next_row < n and 0 <= next_col < m):\n                        break\n\n                    current_row, current_col = next_row, next_col\n\n                if moves > max_moves:\n                    max_moves = moves\n                    best_start = (start_row + 1, start_col + 1)\n\n        results.append((*best_start, max_moves))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the optimal starting position for the robot to maximize the number of moves before breaking.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing the board dimensions and the board itself.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of results for each test case, each containing the optimal starting row, column, and maximum move count.\n    \"\"\"\n    def dfs(board: List[str], n: int, m: int, start_row: int, start_col: int) -> int:\n        \"\"\"Perform depth-first search to simulate robot movement and count moves.\n\n        Args:\n            board (List[str]): The board configuration.\n            n (int): Number of rows in the board.\n            m (int): Number of columns in the board.\n            start_row (int): Starting row for the robot.\n            start_col (int): Starting column for the robot.\n\n        Returns:\n            int: Number of moves before the robot breaks or revisits a cell.\n        \"\"\"\n        directions = {'L': (0, -1), 'R': (0, 1), 'D': (1, 0), 'U': (-1, 0)}\n        visited = set()\n        moves = 0\n        row, col = start_row, start_col\n\n        while True:\n            if (row, col) in visited:\n                break\n            visited.add((row, col))\n            moves += 1\n            direction = board[row][col]\n            d_row, d_col = directions[direction]\n            row += d_row\n            col += d_col\n            if row < 0 or row >= n or col < 0 or col >= m:\n                break\n\n        return moves\n\n    results = []\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_start = (1, 1)\n        for r in range(n):\n            for c in range(m):\n                moves = dfs(board, n, m, r, c)\n                if moves > max_moves:\n                    max_moves = moves\n                    best_start = (r + 1, c + 1)  # Convert to 1-based index\n        results.append((*best_start, max_moves))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    def dfs(x: int, y: int, n: int, m: int, board: List[str], visited: List[List[bool]], memo: List[List[int]]) -> int:\n        if x < 0 or x >= n or y < 0 or y >= m:\n            return 0\n        if visited[x][y]:\n            return 0\n        if memo[x][y] != -1:\n            return memo[x][y]\n        \n        visited[x][y] = True\n        direction = board[x][y]\n        if direction == 'L':\n            next_x, next_y = x, y - 1\n        elif direction == 'R':\n            next_x, next_y = x, y + 1\n        elif direction == 'U':\n            next_x, next_y = x - 1, y\n        elif direction == 'D':\n            next_x, next_y = x + 1, y\n        else:\n            next_x, next_y = x, y\n        \n        moves = 1 + dfs(next_x, next_y, n, m, board, visited, memo)\n        visited[x][y] = False\n        memo[x][y] = moves\n        return moves\n\n    results = []\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_start = (1, 1)\n        memo = [[-1] * m for _ in range(n)]\n        \n        for i in range(n):\n            for j in range(m):\n                visited = [[False] * m for _ in range(n)]\n                moves = dfs(i, j, n, m, board, visited, memo)\n                if moves > max_moves:\n                    max_moves = moves\n                    best_start = (i + 1, j + 1)\n        \n        results.append((best_start[0], best_start[1], max_moves))\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Finds the optimal starting position for the robot to maximize moves.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the dimensions of the board and the board itself.\n\n    Returns:\n        A list of tuples, each containing the starting row, column, and maximum number of moves.\n    \"\"\"\n    # Direction mappings for 'L', 'R', 'D', 'U'\n    direction_map = {\n        'L': (0, -1),\n        'R': (0, 1),\n        'D': (1, 0),\n        'U': (-1, 0)\n    }\n    \n    results = []\n\n    def dfs(x: int, y: int, board: List[str], visited: List[List[bool]]) -> int:\n        \"\"\"Performs a depth-first search to count the number of moves from a starting cell.\n\n        Args:\n            x: Current row position.\n            y: Current column position.\n            board: The board configuration.\n            visited: A matrix to track visited cells.\n\n        Returns:\n            The number of moves made before the robot breaks or stops.\n        \"\"\"\n        n, m = len(board), len(board[0])\n        moves = 0\n        while True:\n            if x < 0 or x >= n or y < 0 or y >= m or visited[x][y]:\n                break\n            visited[x][y] = True\n            moves += 1\n            direction = board[x][y]\n            dx, dy = direction_map[direction]\n            x, y = x + dx, y + dy\n        return moves\n\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_start = (1, 1)  # Default starting position (1-based index)\n\n        for i in range(n):\n            for j in range(m):\n                visited = [[False] * m for _ in range(n)]\n                moves = dfs(i, j, board, visited)\n                if moves > max_moves:\n                    max_moves = moves\n                    best_start = (i + 1, j + 1)  # Convert to 1-based index\n\n        results.append((*best_start, max_moves))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    def simulate_robot_movement(board: List[str], n: int, m: int) -> Tuple[int, int, int]:\n        def dfs(r: int, c: int, visited: set, memo: dict) -> int:\n            if (r < 0 or r >= n or c < 0 or c >= m):\n                return 0\n            if (r, c) in visited:\n                return 0\n            if (r, c) in memo:\n                return memo[(r, c)]\n            \n            visited.add((r, c))\n            direction = board[r][c]\n            if direction == 'L':\n                moves = 1 + dfs(r, c - 1, visited, memo)\n            elif direction == 'R':\n                moves = 1 + dfs(r, c + 1, visited, memo)\n            elif direction == 'U':\n                moves = 1 + dfs(r - 1, c, visited, memo)\n            elif direction == 'D':\n                moves = 1 + dfs(r + 1, c, visited, memo)\n            visited.remove((r, c))\n            memo[(r, c)] = moves\n            return moves\n\n        max_moves = 0\n        start_position = (0, 0)\n        memo = {}\n        for i in range(n):\n            for j in range(m):\n                visited = set()\n                moves = dfs(i, j, visited, memo)\n                if moves > max_moves:\n                    max_moves = moves\n                    start_position = (i + 1, j + 1)\n        \n        return start_position[0], start_position[1], max_moves\n\n    results = []\n    for n, m, board in test_cases:\n        result = simulate_robot_movement(board, n, m)\n        results.append(result)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0].strip())\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        while data[index].strip() == \"\":\n            index += 1\n        n, m = map(int, data[index].strip().split())\n        index += 1\n        board = []\n        for _ in range(n):\n            board.append(data[index].strip())\n            index += 1\n        test_cases.append((n, m, board))\n    \n    # Call the function\n    results = find_optimal_start(t, test_cases)\n    \n    # Output interface\n    for r, c, d in results:\n        print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_best_starting_position(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the best starting position for the robot to maximize the number of moves before breaking.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing the board dimensions and the board itself.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of results for each test case, each containing the starting row, column, and maximum number of moves.\n    \"\"\"\n    def dfs(x: int, y: int, board: List[str], visited: List[List[bool]], memo: List[List[int]]) -> int:\n        \"\"\"Perform a depth-first search to calculate the number of moves from a given starting position.\n\n        Args:\n            x (int): Current row position.\n            y (int): Current column position.\n            board (List[str]): The board configuration.\n            visited (List[List[bool]]): Matrix to track visited cells.\n            memo (List[List[int]]): Matrix to store results of previously computed paths.\n\n        Returns:\n            int: Number of moves from the current position.\n        \"\"\"\n        if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or visited[x][y]:\n            return 0\n        if memo[x][y] != -1:\n            return memo[x][y]\n\n        visited[x][y] = True\n        direction = board[x][y]\n        if direction == 'L':\n            next_x, next_y = x, y - 1\n        elif direction == 'R':\n            next_x, next_y = x, y + 1\n        elif direction == 'U':\n            next_x, next_y = x - 1, y\n        elif direction == 'D':\n            next_x, next_y = x + 1, y\n        else:\n            next_x, next_y = x, y\n\n        moves = 1 + dfs(next_x, next_y, board, visited, memo)\n        visited[x][y] = False\n        memo[x][y] = moves\n        return moves\n\n    results = []\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_start = (1, 1)\n        memo = [[-1] * m for _ in range(n)]\n        visited = [[False] * m for _ in range(n)]\n\n        for i in range(n):\n            for j in range(m):\n                moves = dfs(i, j, board, visited, memo)\n                if moves > max_moves:\n                    max_moves = moves\n                    best_start = (i + 1, j + 1)\n\n        results.append((*best_start, max_moves))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_best_starting_position(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the optimal starting position for the robot to make the maximum number of moves.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing the dimensions of the board\n            and the board itself.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of results for each test case, each containing the starting position (row, column)\n            and the maximum number of moves.\n    \"\"\"\n    def dfs(board: List[str], n: int, m: int, r: int, c: int) -> int:\n        \"\"\"Perform depth-first search to calculate the number of moves from a starting position.\n\n        Args:\n            board (List[str]): The board configuration.\n            n (int): Number of rows in the board.\n            m (int): Number of columns in the board.\n            r (int): Starting row position.\n            c (int): Starting column position.\n\n        Returns:\n            int: Number of moves possible from the starting position.\n        \"\"\"\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n        visited = set()\n        moves = 0\n        stack = [(r, c)]\n\n        while stack:\n            current_r, current_c = stack.pop()\n            if (current_r, current_c) in visited:\n                break\n            visited.add((current_r, current_c))\n            moves += 1\n\n            direction = board[current_r][current_c]\n            dr, dc = directions[direction]\n            next_r, next_c = current_r + dr, current_c + dc\n\n            if 0 <= next_r < n and 0 <= next_c < m:\n                stack.append((next_r, next_c))\n\n        return moves\n\n    results = []\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_position = (1, 1)\n\n        for r in range(n):\n            for c in range(m):\n                moves = dfs(board, n, m, r, c)\n                if moves > max_moves:\n                    max_moves = moves\n                    best_position = (r + 1, c + 1)\n\n        results.append((*best_position, max_moves))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the optimal starting cell for the robot to make the maximum number of moves.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing the dimensions of the board\n            and the board itself.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of results for each test case, each containing the starting cell (row, column)\n            and the maximum number of moves.\n    \"\"\"\n    def dfs(board: List[str], n: int, m: int, r: int, c: int) -> int:\n        \"\"\"Perform a depth-first search to calculate the number of steps the robot can take from a starting cell.\n\n        Args:\n            board (List[str]): The board configuration.\n            n (int): Number of rows in the board.\n            m (int): Number of columns in the board.\n            r (int): Starting row.\n            c (int): Starting column.\n\n        Returns:\n            int: Number of steps the robot can take before breaking.\n        \"\"\"\n        visited = set()\n        steps = 0\n        directions = {'L': (0, -1), 'R': (0, 1), 'U': (-1, 0), 'D': (1, 0)}\n        \n        while (r, c) not in visited and 0 <= r < n and 0 <= c < m:\n            visited.add((r, c))\n            steps += 1\n            direction = board[r][c]\n            dr, dc = directions[direction]\n            r += dr\n            c += dc\n        \n        return steps\n\n    results = []\n    for n, m, board in test_cases:\n        max_steps = 0\n        best_start = (1, 1)\n        \n        for r in range(n):\n            for c in range(m):\n                steps = dfs(board, n, m, r, c)\n                if steps > max_steps:\n                    max_steps = steps\n                    best_start = (r + 1, c + 1)  # Convert to 1-based index\n        \n        results.append((*best_start, max_steps))\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    input()  # Read the blank line\n    n, m = map(int, input().split())\n    board = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, board))\n\n# Output interface\nresults = find_optimal_start(t, test_cases)\nfor r, c, d in results:\n    print(r, c, d)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_optimal_start(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Find the optimal starting cell for the robot to maximize the number of moves.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing the board dimensions and the board itself.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of results for each test case, each containing the starting cell and maximum number of moves.\n    \"\"\"\n    results = []\n\n    # Direction vectors for 'L', 'R', 'D', 'U'\n    direction_map = {\n        'L': (0, -1),\n        'R': (0, 1),\n        'D': (1, 0),\n        'U': (-1, 0)\n    }\n\n    for n, m, board in test_cases:\n        max_moves = 0\n        best_start = (1, 1)\n\n        for start_row in range(n):\n            for start_col in range(m):\n                visited = set()\n                current_row, current_col = start_row, start_col\n                moves = 0\n\n                while True:\n                    if (current_row, current_col) in visited:\n                        break\n                    visited.add((current_row, current_col))\n                    moves += 1\n\n                    direction = board[current_row][current_col]\n                    delta_row, delta_col = direction_map[direction]\n                    next_row = current_row + delta_row\n                    next_col = current_col + delta_col\n\n                    if not (0 <= next_row < n and 0 <= next_col < m):\n                        break\n\n                    current_row, current_col = next_row, next_col\n\n                if moves > max_moves:\n                    max_moves = moves\n                    best_start = (start_row + 1, start_col + 1)\n\n        results.append((*best_start, max_moves))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n\n    for _ in range(t):\n        input()  # Read the blank line\n        n, m = map(int, input().strip().split())\n        board = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, board))\n\n    # Call the function\n    results = find_optimal_start(t, test_cases)\n\n    # Output interface\n    for r, c, d in results:\n        print(r, c, d)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on determining the optimal starting cell for the robot to maximize its movement steps on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes, ensuring robust performance and clear output.\nrequirement pool:\n- Implement algorithm to find optimal starting cell for maximum steps.\n- Ensure solution handles edge cases where robot moves out of bounds.\n- Optimize performance for large board sizes.\n- Provide clear output format as specified in requirements.\n- Consider user-friendly UI for visualizing robot's path.\nWe will implement a function to simulate the robot's movement on the board. The function will iterate over each cell as a potential starting point, simulate the robot's path, and track the number of steps taken until the robot either falls off the board or revisits a cell. We will use a depth-first search (DFS) approach to explore each path and keep track of visited cells to detect cycles. The solution will be optimized to handle large board sizes efficiently by using memoization to store results of previously computed paths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions ('L', 'R', 'D', 'U') based on the symbol in the current cell. The goal is to maximize the number of moves before the robot breaks or stops.\n\n    'maximum number of steps'\n    Explanation: The robot should start from a cell that allows it to make the most moves before breaking or stopping.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': The robot should make as many moves as possible before breaking or stopping. This can be implemented by tracking the number of successful moves from each starting cell and selecting the one with the highest count.\n\n# [degree adverb]\n    'maximum': The robot should start from a cell that allows it to make the maximum number of moves. This involves comparing the number of moves from different starting cells and selecting the one with the highest count.\n\n# [code logic]\n1. Initialize variables to store the maximum number of moves and the corresponding starting cell.\n2. Iterate over each cell on the board as a potential starting point.\n3. For each starting cell, simulate the robot's movement using DFS.\n4. Track visited cells to detect cycles and prevent revisiting.\n5. If the robot moves beyond the board's edge, stop the simulation for that path.\n6. Compare the number of moves for each starting cell and update the maximum if a higher count is found.\n7. Output the starting cell and maximum number of moves.\n\n# [edge case]\n    Edge Case 1: A board with only one cell, e.g., 1x1 board with 'R'.\n    Expected Output: 1 1 1\n    Explanation: The robot can only make one move before falling off the board.\n\n    Edge Case 2: A board where all cells direct the robot off the board immediately, e.g., 1x3 board with 'RRL'.\n    Expected Output: 1 1 3\n    Explanation: Starting from (1,1), the robot can make three moves before falling off.\n\n    Edge Case 3: A board with a cycle, e.g., 2x2 board with 'DL', 'RU'.\n    Expected Output: 1 1 4\n    Explanation: Starting from (1,1), the robot can make four moves before revisiting a cell.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using DFS and cycle detection will naturally handle these scenarios.\n", "requirement analysis:\nThe main requirement is to determine the optimal starting cell for the robot to maximize its movement on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes, ensuring that the robot does not revisit cells or move off the board.\nrequirement pool:\n- Implement the algorithm to find the optimal starting cell for maximum moves.\n- Ensure the solution handles edge cases where the robot might revisit cells.\n- Optimize the algorithm for performance on large boards.\n- Provide clear and concise output for each test case.\n- Consider alternative strategies for pathfinding.\nWe will implement a function to simulate the robot's movement on the board. The function will iterate over each cell as a potential starting point, simulate the robot's path, and track the number of moves until it either revisits a cell or moves off the board. We will use a set to track visited cells to efficiently detect cycles. The function will return the starting cell and the maximum number of moves. Given the constraints, we will ensure the solution is optimized for large board sizes by avoiding unnecessary recalculations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions ('L', 'R', 'D', 'U') based on the symbol in the current cell. The goal is to determine the starting cell that allows the robot to make the maximum number of moves before it either revisits a cell or moves off the board.\n\n    'maximum number of steps'\n    Explanation: The task is to find the starting position on the board that results in the longest sequence of valid moves before the robot breaks or stops.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': This means we need to find the starting cell that allows the robot to make the most moves possible.\n    Implementation: Track the number of moves from each starting cell and compare to find the maximum.\n\n# [degree adverb]\n    'maximum': This indicates that we need to find the starting position that results in the highest number of moves.\n    Implementation: Use a variable to keep track of the maximum number of moves found and update it as necessary.\n\n# [code logic]\n1. Initialize variables to store the best starting position and maximum number of moves.\n2. Iterate over each cell on the board as a potential starting point.\n3. For each starting point, simulate the robot's movement:\n   - Use a set to track visited cells.\n   - Move in the direction indicated by the current cell.\n   - If the robot revisits a cell or moves off the board, stop the simulation.\n   - Count the number of successful moves.\n4. Compare the number of moves from this starting point with the current maximum and update if necessary.\n5. Return the starting position and maximum number of moves.\n\n# [edge case]\n    Edge Case 1: A 1x1 board with any direction (e.g., 'R') = 1 1 1\n    Explanation: The robot can only make one move before moving off the board.\n\n    Edge Case 2: A board where all cells point in a loop (e.g., 2x2 with 'RD', 'LU') = 1 1 4\n    Explanation: The robot can move through all cells once before revisiting a cell.\n\n    Edge Case 3: A board where all cells point outwards (e.g., 2x2 with 'RR', 'DD') = 1 1 2\n    Explanation: The robot will move off the board after two moves from any starting position.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of tracking visited cells and stopping when revisiting or moving off the board will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on maximizing the robot's movement on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes while ensuring the robot does not break by revisiting cells or moving off the board.\nrequirement pool:\n- Implement efficient robot movement algorithm\n- Handle edge cases where robot revisits cells\n- Optimize performance for large board sizes\n- Provide clear output format for test cases\n- Ensure solution scalability for up to 10000 test cases\nWe will implement a function that simulates the robot's movement on the board. The function will iterate over each cell as a potential starting point, track the path using a set to detect revisits, and count the number of moves until the robot breaks. We will use a depth-first search (DFS) approach to explore each path from a starting cell. The solution will efficiently handle large board sizes by ensuring each cell is visited only once per test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions ('L', 'R', 'D', 'U') based on the symbol in the current cell. The goal is to maximize the number of moves before the robot breaks or stops.\n\n    'maximum number of steps'\n    Explanation: The robot should start from a cell that allows it to make the most moves before breaking or revisiting a cell.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': The robot should make as many moves as possible before breaking or stopping. This can be implemented by tracking the number of moves from each starting cell and selecting the one with the highest count.\n\n# [degree adverb]\n    'maximum': The robot should start from a cell that allows it to make the maximum number of moves. This involves comparing move counts from different starting cells and selecting the highest.\n\n# [code logic]\n    1. Initialize variables to store the best starting position and maximum move count.\n    2. Iterate over each cell on the board as a potential starting point.\n    3. Use DFS to simulate the robot's movement from the current starting cell.\n    4. Track visited cells using a set to detect revisits.\n    5. Count the number of moves until the robot breaks or revisits a cell.\n    6. Update the best starting position if the current path has more moves than previously recorded.\n    7. Return the best starting position and maximum move count for each test case.\n\n# [edge case]\n    Edge Case 1: A board with only one cell, e.g., 'R'\n    Output: 1 1 1\n    Explanation: The robot can only make one move before breaking.\n\n    Edge Case 2: A board where all cells direct the robot off the board immediately, e.g., 'RRR'\n    Output: 1 1 3\n    Explanation: Starting from the first cell, the robot makes three moves before breaking.\n\n    Edge Case 3: A board with a loop, e.g., 'DL', 'RU'\n    Output: 1 1 4\n    Explanation: Starting from (1,1), the robot makes four moves before revisiting a cell.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking visited cells and counting moves will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting cell for the robot to maximize its movement on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes, ensuring robustness against edge cases such as revisiting cells or moving beyond the board's boundaries.\nrequirement pool:\n- Implement efficient pathfinding algorithm for robot movement.\n- Ensure solution handles maximum board size within constraints.\n- Optimize for performance across multiple test cases.\n- Develop robust handling for edge cases like revisiting cells.\n- Provide clear output format as specified in requirements.\nWe will implement a solution using a depth-first search (DFS) algorithm to explore all possible paths from each cell on the board. The DFS will track visited cells to prevent revisiting and breaking the robot. We will use memoization to store the maximum number of moves possible from each cell to optimize performance. This approach efficiently handles large board sizes and multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where each cell contains a direction ('L', 'R', 'D', 'U') indicating where the robot will move next.\n\n    'robot movement'\n    Explanation: The robot moves according to the direction specified in the current cell. If it moves out of bounds or revisits a cell, it breaks.\n\n    'maximum number of steps'\n    Explanation: The goal is to determine the starting cell that allows the robot to make the most moves before breaking.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': The robot should make as many moves as possible before breaking. This means finding the starting point that results in the highest number of valid moves.\n\n# [degree adverb]\n    'maximum': Indicates the need to find the starting position that allows for the greatest number of moves.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the dimensions of the board and the board itself.\n3. Implement a DFS algorithm to explore paths from each cell:\n   - Use a stack or recursion to explore each direction from the current cell.\n   - Track visited cells to prevent revisiting.\n   - Use memoization to store results of previously computed paths to optimize performance.\n4. For each starting cell, calculate the number of moves until the robot breaks.\n5. Track the starting cell that results in the maximum number of moves.\n6. Output the starting cell coordinates and the maximum number of moves for each test case.\n\n# [edge case]\n    1 1\n    R\n    = 1 1 1\n    Explanation: The board has only one cell, so the robot can only make one move before breaking.\n\n    2 2\n    LL\n    RR\n    = 1 1 2\n    Explanation: Starting from (1,1), the robot can move right once and then falls off, making two moves in total.\n\n    3 3\n    LRU\n    DLD\n    URU\n    = 2 2 4\n    Explanation: Starting from (2,2), the robot can move down, left, up, and right, making four moves before revisiting a cell.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The DFS with memoization inherently handles these scenarios by tracking visited cells and optimizing path calculations.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting position for a robot on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes, ensuring the robot makes the maximum number of moves without revisiting cells or falling off the board.\nrequirement pool:\n- Implement efficient pathfinding algorithm for robot movement.\n- Ensure robust handling of edge cases where the robot may fall off the board.\n- Optimize performance for handling large board sizes.\n- Provide clear output format for test case results.\n- Develop a user-friendly interface for input and output handling.\nWe will implement a depth-first search (DFS) algorithm to explore all possible paths from each starting cell on the board. The DFS will track visited cells to prevent revisiting and will also handle edge cases where the robot might fall off the board. We will use a dictionary to map the direction symbols to their respective movements. The solution will iterate over each cell as a potential starting point and calculate the number of moves until the robot breaks or stops. The maximum number of moves and the corresponding starting position will be recorded for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot moves according to the direction indicated by the symbols 'L', 'R', 'D', 'U' on the board. The goal is to maximize the number of moves before the robot breaks or stops.\n\n    'maximum number of steps'\n    Explanation: The objective is to determine the starting position that allows the robot to make the most moves before it either falls off the board or revisits a cell.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': This means we need to find the starting position that results in the highest number of moves. In code, this involves tracking and comparing the number of moves from each starting position.\n\n# [degree adverb]\n    'maximum': This indicates that we are looking for the highest possible number of moves. In code, this involves maintaining a variable to store the maximum number of moves found and updating it as necessary.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the dimensions of the board and the board itself.\n3. Define a function to perform DFS from a given starting cell, tracking visited cells and counting moves.\n4. Use a dictionary to map direction symbols to their respective movements.\n5. Iterate over each cell on the board as a potential starting point.\n6. For each starting point, use DFS to calculate the number of moves until the robot breaks or stops.\n7. Track the maximum number of moves and the corresponding starting position for each test case.\n8. Output the starting position and maximum number of moves for each test case.\n\n# [edge case]\n    1 1\n    R\n    = 1 1 1\n    Explanation: The board has only one cell, so the robot can only make one move before falling off.\n\n    2 2\n    UU\n    UU\n    = 1 1 1\n    Explanation: Starting from any cell, the robot will immediately revisit a cell, resulting in only one move.\n\n    3 3\n    LLL\n    LLL\n    LLL\n    = 1 3 3\n    Explanation: Starting from (1,3), the robot can move left three times before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The DFS logic inherently handles revisiting cells and falling off the board by tracking visited cells and checking boundaries.\n", "requirement analysis:\nThe task requires determining the optimal starting position for a robot on a board to maximize its movement without revisiting cells or falling off the board. The solution must efficiently handle multiple test cases and large board sizes, ensuring performance and correctness.\nrequirement pool:\n- Implement the main algorithm to determine the optimal starting cell.\n- Ensure the solution handles edge cases such as small and large boards.\n- Optimize the algorithm for performance with large inputs.\n- Provide clear and correct output format for each test case.\n- Consider additional features like visualizing the robot's path.\nWe will implement a function to simulate the robot's movement on the board, keeping track of visited cells and ensuring the robot does not move beyond the board's edges. We will use a depth-first search (DFS) approach to explore all possible starting positions and calculate the maximum number of moves for each. The solution will efficiently handle large board sizes by using memoization to store results of previously computed paths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot moves according to the direction indicated by the symbols 'L', 'R', 'D', 'U' on the board. The goal is to maximize the number of moves before the robot breaks or stops.\n\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where each cell contains a direction symbol.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps'\n    Explanation: The task is to find the starting position that allows the robot to make the most moves before breaking or stopping. This involves exploring all possible paths and counting the steps.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We need to find the starting position that results in the highest number of moves. This requires comparing the number of moves from different starting positions and selecting the one with the greatest count.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the dimensions of the board and the board itself.\n3. Implement a function to simulate the robot's movement:\n   - Use a depth-first search (DFS) approach to explore paths from each starting cell.\n   - Keep track of visited cells to detect cycles and prevent revisiting.\n   - Count the number of moves made before breaking or stopping.\n4. Use memoization to store results of previously computed paths to optimize performance.\n5. For each test case, determine the starting position that results in the maximum number of moves.\n6. Output the starting position and the maximum number of moves for each test case.\n\n# [edge case]\n    Test case with a single cell board (1x1) = 1 1 1\n    Explanation: The robot can only make one move from this cell, as it will immediately fall off the board.\n\n    Test case with all cells pointing outwards = 1 1 1\n    Explanation: If all cells direct the robot out of bounds immediately, any starting position will result in only one move.\n\n    Test case with a cycle in a small board = 1 1 4\n    Explanation: If there's a cycle, such as a 2x2 board with directions forming a loop, the robot can make multiple moves before revisiting a cell.\n\n# [extra code for edge case]\n    We need extra code to handle cycles and ensure that revisiting cells is detected.\n```python\ndef simulate_robot_movement(board, n, m):\n    def dfs(r, c, visited):\n        if (r < 0 or r >= n or c < 0 or c >= m) or (r, c) in visited:\n            return 0\n        visited.add((r, c))\n        direction = board[r][c]\n        if direction == 'L':\n            return 1 + dfs(r, c - 1, visited)\n        elif direction == 'R':\n            return 1 + dfs(r, c + 1, visited)\n        elif direction == 'U':\n            return 1 + dfs(r - 1, c, visited)\n        elif direction == 'D':\n            return 1 + dfs(r + 1, c, visited)\n\n    max_moves = 0\n    start_position = (0, 0)\n    for i in range(n):\n        for j in range(m):\n            visited = set()\n            moves = dfs(i, j, visited)\n            if moves > max_moves:\n                max_moves = moves\n                start_position = (i + 1, j + 1)\n    \n    return start_position[0], start_position[1], max_moves\n\n# Example usage for one test case\nn, m = 2, 2\nboard = ['DL', 'RU']\nprint(simulate_robot_movement(board, n, m)) # Output should be (1, 1, 4)\n```\nThis code snippet demonstrates how to handle cycles and ensure that revisiting cells is detected using a DFS approach with memoization.\n", "requirement analysis:\nThe problem requires determining the optimal starting position on a board for a robot to make the maximum number of moves before breaking. The solution must efficiently handle multiple test cases and large board sizes, ensuring scalability and performance.\nrequirement pool:\n- Implement the main algorithm to determine the starting position and maximum moves.\n- Optimize the algorithm for large board sizes.\n- Ensure the solution is scalable and efficient.\n- Provide clear and concise output for each test case.\n- Test the solution against various edge cases.\nWe will implement a depth-first search (DFS) algorithm to explore each cell on the board and track the number of moves the robot can make before it breaks. The algorithm will efficiently handle large board sizes by using memoization to store results of previously computed paths, thus avoiding redundant calculations. This approach ensures scalability and performance, especially given the constraints on board size and number of test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions ('L', 'R', 'D', 'U') based on the symbol in the current cell. The goal is to maximize the number of moves before the robot breaks.\n\n    'maximum number of steps'\n    Explanation: The robot should start from a cell that allows it to make the most moves before breaking or stopping.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': This indicates that we need to find the starting cell that results in the highest number of moves before the robot breaks. In code, this can be implemented by tracking the number of moves from each starting cell and comparing them to find the maximum.\n\n# [degree adverb]\n    'maximum': This means we need to find the starting position that results in the highest number of moves. In code, this can be implemented by maintaining a variable to store the maximum number of moves found and updating it whenever a higher value is encountered.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and details for each board.\n    2. For each test case, initialize a board and a visited matrix to track visited cells.\n    3. Implement a DFS function that explores each cell, following the direction indicated by the symbol in the cell.\n    4. Use memoization to store results of previously computed paths to avoid redundant calculations.\n    5. Track the number of moves for each starting cell and update the maximum moves found.\n    6. Output the starting cell coordinates and the maximum number of moves for each test case.\n\n# [edge case]\n    Test case with a single cell: \n    Input: 1 1 R\n    Output: 1 1 1\n    Explanation: The robot can only make one move before breaking as it moves beyond the edge.\n\n    Test case with all cells having the same direction:\n    Input: 2 2 RR\n           RR\n    Output: 1 1 2\n    Explanation: Starting from (1,1), the robot can move right twice before breaking.\n\n    Test case with a loop:\n    Input: 2 2 RU\n           DL\n    Output: 1 1 4\n    Explanation: Starting from (1,1), the robot follows a loop and makes four moves before revisiting a cell.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using DFS and memoization will naturally handle these scenarios by tracking visited cells and breaking when revisiting or moving beyond edges.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting position for a robot on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes, ensuring the robot makes the maximum number of moves without breaking.\nrequirement pool:\n- Implement efficient board traversal algorithm\n- Handle edge cases where the robot may break\n- Optimize performance for large board sizes\n- Provide clear output format for test cases\n- Ensure solution scalability for up to 10000 test cases\nWe will implement a depth-first search (DFS) algorithm to traverse the board and determine the maximum number of moves the robot can make from each starting position. The DFS will track visited cells to prevent revisiting and breaking the robot. We will use Python's built-in data structures for efficient traversal and handling of large inputs. The solution will iterate over each cell as a potential starting point and calculate the number of moves possible, selecting the starting position with the maximum moves.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: This refers to the grid-like structure of the board where the robot can move. Each cell on the board has a specific direction that dictates the robot's movement.\n\n    'adjacent by side'\n    Explanation: This means the robot can move to one of the four neighboring cells (left, right, up, down) from its current position.\n\n    'maximum number of steps'\n    Explanation: The goal is to determine the starting position that allows the robot to make the most moves before it either falls off the board or revisits a cell.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': This indicates that we need to find the starting position that results in the highest number of moves. In code, this can be implemented by keeping track of the number of moves from each starting position and selecting the maximum.\n\n# [degree adverb]\n    'maximum': This refers to finding the starting position that allows for the greatest number of moves. In code, this involves comparing move counts from different starting positions and selecting the highest.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the dimensions of the board and the board itself.\n3. Implement a DFS function that:\n   - Takes a starting position and explores all possible moves.\n   - Tracks visited cells to prevent revisiting.\n   - Counts the number of successful moves.\n4. Iterate over each cell on the board as a potential starting point.\n5. Use the DFS function to calculate the number of moves from each starting point.\n6. Keep track of the maximum number of moves and corresponding starting position.\n7. Output the starting position and maximum number of moves for each test case.\n\n# [edge case]\n    1 1\n    L = 1 1 1\n    Explanation: The board is only one cell, so the robot can only make one move before falling off.\n\n    2 2\n    LR\n    UD = 1 1 4\n    Explanation: The robot can start at (1,1) and follow a loop without revisiting any cell, making 4 moves.\n\n    3 3\n    RRR\n    DDD\n    LLL = 1 1 3\n    Explanation: Starting at (1,1), the robot will move right three times before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic using DFS and tracking visited cells will naturally handle these scenarios by ensuring no revisits and counting moves correctly.\n", "requirement analysis:\nThe solution must efficiently compute the maximum number of steps the robot can take from any starting point on the board. It should handle multiple test cases and large board sizes while providing clear output. The algorithm should avoid revisiting cells and handle edge cases where the robot moves off the board.\nrequirement pool:\n- Efficient computation for maximum steps\n- Handle multiple test cases\n- Clear output format\n- Scalability for large boards\n- Robust handling of edge cases\nWe will use a depth-first search (DFS) algorithm to explore all possible paths from each starting cell on the board. The DFS will track visited cells to prevent revisiting and will handle edge cases where the robot moves off the board. We will iterate over each cell as a potential starting point and calculate the number of steps the robot can take before breaking. The solution will efficiently handle multiple test cases and large board sizes using Python's built-in data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'checkered rectangular board'\n    Explanation: The board is a grid with n rows and m columns, where each cell contains a direction ('L', 'R', 'D', 'U') indicating where the robot will move next.\n\n    'robot movement'\n    Explanation: The robot moves according to the direction specified in the current cell. It can move left ('L'), right ('R'), down ('D'), or up ('U').\n\n    'maximum number of steps'\n    Explanation: The goal is to determine the starting cell that allows the robot to make the most moves before it either falls off the board or revisits a cell.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps': The robot should make as many moves as possible before breaking. This means finding the starting point that results in the highest number of moves.\n\n# [degree adverb]\n    'maximum': This indicates that we need to find the starting position that allows for the greatest number of moves before the robot breaks.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the dimensions of the board and the board itself.\n3. Implement a DFS algorithm to explore paths from each cell:\n   - Track visited cells to avoid revisiting.\n   - Handle cases where the robot moves off the board.\n4. For each starting cell, calculate the number of steps until the robot breaks.\n5. Keep track of the maximum number of steps and corresponding starting cell.\n6. Output the starting cell and maximum steps for each test case.\n\n# [edge case]\n    Edge Case 1: Single cell board with direction leading off-board\n    Input: 1 1 R\n    Expected Output: 1 1 1\n    Explanation: The robot can only make one move before falling off the board.\n\n    Edge Case 2: Board with a loop\n    Input: 2 2\n           RU\n           DL\n    Expected Output: 1 1 4\n    Explanation: Starting at (1,1), the robot follows a loop and makes 4 moves before revisiting a cell.\n\n    Edge Case 3: Board with all directions leading off-board\n    Input: 2 2\n           RR\n           LL\n    Expected Output: 1 1 2\n    Explanation: Starting at any cell, the robot can only make two moves before falling off.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The DFS algorithm inherently handles revisiting cells and moving off-board by tracking visited cells and checking boundaries.\n", "requirement analysis:\nThe requirements focus on determining the optimal starting cell for the robot to maximize its movement steps on a board with directional commands. The solution must efficiently handle multiple test cases and large board sizes, ensuring robust performance and clear output.\nrequirement pool:\n- Implement algorithm to find optimal starting cell for maximum steps\n- Ensure solution handles edge cases like board boundaries\n- Optimize performance for large board sizes\n- Provide clear output format for test cases\n- Allow flexibility in choosing any starting cell\nWe will implement a function to simulate the robot's movement on the board. The function will iterate over each cell as a potential starting point, simulate the robot's path, and track the number of steps until it either falls off the board or revisits a cell. We will use a set to track visited cells to detect cycles efficiently. The solution will handle multiple test cases and large board sizes by optimizing the simulation process.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'robot movement'\n    Explanation: The robot can move in four directions ('L', 'R', 'D', 'U') based on the symbol in the current cell. The goal is to maximize the number of moves before the robot breaks or stops.\n\n    'checkered rectangular board'\n    Explanation: The board is defined by dimensions n \u00d7 m, where n is the number of rows and m is the number of columns.\n\n# [phrase showing quantity relationship]\n    'maximum number of steps'\n    Explanation: The robot should start from a cell that allows it to make the highest number of moves before breaking or stopping. This involves simulating paths from each cell and counting steps.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The requirement is to find the starting cell that results in the highest number of moves. This involves comparing the number of moves from different starting cells.\n\n# [code logic]\n1. Parse the input to get the number of test cases and details for each board.\n2. For each test case, initialize variables to track the maximum number of moves and corresponding starting cell.\n3. Iterate over each cell on the board as a potential starting point.\n4. Simulate the robot's movement from the current starting cell:\n   - Use a set to track visited cells to detect cycles.\n   - Move according to the direction indicated by the current cell.\n   - Count steps until the robot either falls off the board or revisits a cell.\n5. Update the maximum number of moves and starting cell if a longer path is found.\n6. Output the starting cell and maximum number of moves for each test case.\n\n# [edge case]\n    Test case with a single cell board (e.g., 1x1):\n    1 1\n    R\n    Output: 1 1 1\n    Explanation: The robot can only move once before falling off the board.\n\n    Test case with all cells pointing outwards:\n    2 2\n    DL\n    RU\n    Output: 1 1 4\n    Explanation: Starting from (1,1), the robot can move through all cells once before falling off.\n\n    Test case with a cycle:\n    2 2\n    UD\n    RU\n    Output: 2 1 3\n    Explanation: Starting from (2,1), the robot revisits a cell after three moves, breaking the cycle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of simulating paths and tracking visited cells will naturally handle these scenarios.\n"], "scores": [], "pass_results": [true, false, true, true, false, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 433, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the test.\n\nEach test case's description is preceded by a blank line. Next is a line that contains integers n and m (1 \u2264 n \u2264 2000; 1 \u2264 m \u2264 2000) \u2014 the height and width of the board. This line followed by n lines, the i-th of which describes the i-th line of the board. Each of them is exactly m letters long and consists of symbols 'L', 'R', 'D' and 'U'.\n\nIt is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u22c510^6.\n\nOutput\n\nFor each test case, output three integers r, c and d (1 \u2264 r \u2264 n; 1 \u2264 c \u2264 m; d \u2265 0), which denote that the robot should start moving from cell (r, c) to make the maximum number of moves d. If there are several answers, output any of them.\n\nExample\n\nInput\n\n\n7\n\n1 1\nR\n\n1 3\nRRL\n\n2 2\nDL\nRU\n\n2 2\nUD\nRU\n\n3 2\nDL\nUL\nRU\n\n4 4\nRRRD\nRUUD\nURUD\nULLR\n\n4 4\nDDLU\nRDDU\nUUUU\nRDLD\n\n\nOutput\n\n\n1 1 1\n1 1 3\n1 1 4\n2 1 3\n3 1 5\n4 3 12\n1 1 4", "mutate_method": "expand_one2two", "parent_index": 247}
