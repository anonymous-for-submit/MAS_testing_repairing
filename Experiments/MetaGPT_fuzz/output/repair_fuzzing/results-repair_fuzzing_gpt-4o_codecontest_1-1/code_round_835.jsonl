{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "prompt": "Kawasiro Nitori is adept in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her compute how many trains are in maintenance on each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "repair_prompt": ["Kawasiro Nitori is adept in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her compute how many trains are in maintenance on each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is adept in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. Initially, no trains are available. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her compute how many trains are in maintenance on each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is adept in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. Initially, there are no trains, and at each of the following m days, one train will be added or removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her compute how many trains are in maintenance on each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the dictionary to store the state of each train model\n    train_state = {}\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:\n            # Add train of model k\n            train_state[k] = {'cycle_day': 1, 'x_i': x_i, 'y_i': y_i}\n        elif op == 2:\n            # Remove train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Update the cycle for each train and count maintenance\n        maintenance_count = 0\n        for model, state in train_state.items():\n            state['cycle_day'] += 1\n            if state['cycle_day'] > state['x_i'] + state['y_i']:\n                state['cycle_day'] = 1\n\n            # Check if the train is in maintenance\n            if state['cycle_day'] > state['x_i']:\n                maintenance_count += 1\n\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef manage_trains(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Manage train models and their maintenance schedules.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains op and k.\n\n    Returns:\n        List[int]: List of integers denoting the number of trains in maintenance on each day.\n    \"\"\"\n    # Initialize the dictionary to track train states\n    train_state = {}\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_cycles[k - 1]\n            train_state[k] = {'state': 'working', 'remaining_days': x_i, 'cycle': (x_i, y_i)}\n        \n        elif op == 2:  # Remove train\n            if k in train_state:\n                del train_state[k]\n        \n        # Update train states and count maintenance trains\n        maintenance_count = 0\n        for model, info in train_state.items():\n            info['remaining_days'] -= 1\n            if info['remaining_days'] == 0:\n                if info['state'] == 'working':\n                    info['state'] = 'maintenance'\n                    info['remaining_days'] = info['cycle'][1]\n                else:\n                    info['state'] = 'working'\n                    info['remaining_days'] = info['cycle'][0]\n            \n            if info['state'] == 'maintenance':\n                maintenance_count += 1\n        \n        maintenance_counts.append(maintenance_count)\n    \n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = manage_trains(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state and cycle position of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = cycles[k - 1]\n\n        if op == 1:\n            # Add the train model and set its initial state to working\n            train_state[k] = (0, x_i, y_i)  # (current day in cycle, working days, maintenance days)\n        elif op == 2:\n            # Remove the train model from tracking\n            if k in train_state:\n                del train_state[k]\n\n        # Update the state of each train model based on its cycle\n        for model in list(train_state.keys()):\n            current_day, working_days, maintenance_days = train_state[model]\n            if current_day < working_days:\n                # Train is in working state\n                train_state[model] = (current_day + 1, working_days, maintenance_days)\n            elif current_day < working_days + maintenance_days:\n                # Train is in maintenance state\n                train_state[model] = (current_day + 1, working_days, maintenance_days)\n                maintenance_count[day] += 1\n            else:\n                # Reset the cycle\n                train_state[model] = (1, working_days, maintenance_days)\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ncycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef train_maintenance(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (days).\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of tuples where each tuple contains (op, k) representing the operation type and train model.\n\n    Returns:\n        List[int]: List containing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the status dictionary to track operational and maintenance status of each train model\n    train_status = {}\n    \n    # Initialize a list to store the number of trains in maintenance for each day\n    maintenance_count = [0] * m\n    \n    # Iterate through each day's operation\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Train of model k is added\n            x_i, y_i = train_models[k - 1]\n            train_status[k] = {'operational_days': x_i, 'maintenance_days': y_i, 'current_status': 'operational', 'days_in_current_status': 0}\n        \n        elif op == 2:  # Train of model k is removed\n            if k in train_status:\n                del train_status[k]\n        \n        # Update the status of each train model\n        for model in train_status:\n            train_info = train_status[model]\n            train_info['days_in_current_status'] += 1\n            \n            if train_info['current_status'] == 'operational':\n                if train_info['days_in_current_status'] >= train_info['operational_days']:\n                    train_info['current_status'] = 'maintenance'\n                    train_info['days_in_current_status'] = 0\n            \n            elif train_info['current_status'] == 'maintenance':\n                if train_info['days_in_current_status'] >= train_info['maintenance_days']:\n                    train_info['current_status'] = 'operational'\n                    train_info['days_in_current_status'] = 0\n        \n        # Count the number of trains currently in maintenance\n        maintenance_count[day] = sum(1 for model in train_status if train_status[model]['current_status'] == 'maintenance')\n    \n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = train_maintenance(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\nfrom datetime import datetime, timedelta\n\ndef track_maintenance(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Tracks the number of trains in maintenance each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the number of working days and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple\n            containing the operation type (1 for add, 2 for remove) and the train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}\n    # Initialize the list to keep track of maintenance count each day\n    maintenance_count = [0] * m\n\n    # Simulate each day based on operations\n    for day in range(m):\n        op, model = operations[day]\n        if op == 1:  # Add train\n            x, y = train_cycles[model - 1]\n            train_state[model] = {'work_days': x, 'maintenance_days': y, 'current_day': 0}\n        elif op == 2:  # Remove train\n            if model in train_state:\n                del train_state[model]\n\n        # Update maintenance count for the current day\n        for state in train_state.values():\n            state['current_day'] += 1\n            if state['current_day'] > state['work_days']:\n                maintenance_count[day] += 1\n                if state['current_day'] == state['work_days'] + state['maintenance_days']:\n                    state['current_day'] = 0\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = track_maintenance(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef train_maintenance(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:\n            # Add train of model k\n            train_state[k] = (day, x_i, y_i)\n        elif op == 2:\n            # Remove train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_count[day] = sum(\n            1 for start_day, work_days, maintenance_days in train_state.values()\n            if (day - start_day) % (work_days + maintenance_days) >= work_days\n        )\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = train_maintenance(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of tuples where each tuple contains (op, k) representing the operation type and train model.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the status dictionary to track the operational status of each train model\n    train_status = {}\n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_counts = [0] * m\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]  # Get the operational and maintenance days for the model\n\n        if op == 1:  # Add train operation\n            # Calculate the day when the train will enter maintenance\n            maintenance_start_day = day + x_i\n            # Calculate the day when the train will exit maintenance\n            maintenance_end_day = maintenance_start_day + y_i\n            # Update the train status with the maintenance period\n            train_status[k] = (maintenance_start_day, maintenance_end_day)\n        elif op == 2:  # Remove train operation\n            # Remove the train from the status dictionary\n            if k in train_status:\n                del train_status[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_count = 0\n        for start, end in train_status.values():\n            if start <= day < end:\n                maintenance_count += 1\n\n        # Store the maintenance count for the current day\n        maintenance_counts[day] = maintenance_count\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}\n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_count = [0] * m\n\n    # Iterate through each day's operations\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:\n            # Add train of model k\n            train_state[k] = {'start_day': day, 'x_i': x_i, 'y_i': y_i}\n        elif op == 2:\n            # Remove train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for model, state in train_state.items():\n            cycle_length = state['x_i'] + state['y_i']\n            days_since_start = day - state['start_day']\n            if days_since_start >= state['x_i']:\n                # Check if the train is in maintenance\n                maintenance_period_start = state['x_i']\n                maintenance_period_end = cycle_length\n                if maintenance_period_start <= days_since_start % cycle_length < maintenance_period_end:\n                    maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\ndef main():\n    n, m = map(int, input().split())\n    train_models = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = calculate_maintenance_days(n, m, train_models, operations)\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Dictionary to track the state of each train model\n    train_state = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_count = [0] * m\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:  # Add train\n            # Calculate the next maintenance start day\n            next_maintenance_start = day + x_i\n            # Store the train's state and next maintenance start day\n            train_state[k] = (next_maintenance_start, x_i, y_i)\n        elif op == 2:  # Remove train\n            # Remove the train from the state dictionary\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for model, (next_maintenance_start, x_i, y_i) in train_state.items():\n            if next_maintenance_start <= day < next_maintenance_start + y_i:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef manage_trains(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Manage train operations and calculate the number of trains in maintenance each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of tuples where each tuple contains (op, k) representing the operation type and train model.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the status dictionary for train models\n    train_status = {}\n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_count = [0] * m\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:  # Add train\n            train_status[k] = {'day_in_cycle': 1, 'in_maintenance': False}\n        elif op == 2:  # Remove train\n            if k in train_status:\n                del train_status[k]\n\n        # Update the status of all trains\n        for model in list(train_status.keys()):\n            status = train_status[model]\n            if status['in_maintenance']:\n                if status['day_in_cycle'] < y_i:\n                    status['day_in_cycle'] += 1\n                else:\n                    status['day_in_cycle'] = 1\n                    status['in_maintenance'] = False\n            else:\n                if status['day_in_cycle'] < x_i:\n                    status['day_in_cycle'] += 1\n                else:\n                    status['day_in_cycle'] = 1\n                    status['in_maintenance'] = True\n\n        # Count the number of trains in maintenance for the current day\n        maintenance_count[day] = sum(1 for status in train_status.values() if status['in_maintenance'])\n\n    return maintenance_count\n\n# Input interface\ndef main():\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Output interface\n    result = manage_trains(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on calculating the number of trains in maintenance each day based on their operational and maintenance cycles. The solution must handle large input sizes efficiently and provide accurate daily counts.\nrequirement pool:\n- Implement efficient algorithm to track train maintenance cycles.\n- Ensure accurate daily output of maintenance counts.\n- Integrate solution with existing train management systems.\n- Provide user-friendly interface for data input and output.\n- Offer detailed analytics on train maintenance patterns.\nWe will implement an efficient algorithm using a dictionary to track the operational and maintenance cycles of each train model. The algorithm will handle large input sizes by updating the state of each train model daily and calculating the number of trains in maintenance. We will use Python's built-in data structures for optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own operational and maintenance cycle.\n\n    'operational and maintenance cycle'\n    Explanation: Each train model has a specific number of days it operates (x_i) and a specific number of days it is in maintenance (y_i).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model at any time, but not more than one.\n\n    'x_i days' and 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance. These are used to calculate the train's cycle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to store the state of each train model, including its current cycle day and whether it is operational or in maintenance.\n2. For each day, process the operation:\n   - If a train is added (op=1), start its cycle from day 1 as operational.\n   - If a train is removed (op=2), remove it from the dictionary.\n3. For each train in the dictionary, update its cycle:\n   - Increment the cycle day.\n   - If the cycle day exceeds x_i + y_i, reset it to 1.\n   - Determine if the train is in maintenance based on its current cycle day.\n4. Count and output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and operates for 1 day, so it is never in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that none enter maintenance during the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the cycle and checking for maintenance status will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of train models, ensuring accurate maintenance scheduling. It should handle up to 200,000 operations and support large maintenance cycles up to 1 billion days.\nrequirement pool:\n- Implement train addition and removal functionality.\n- Calculate daily maintenance counts accurately.\n- Optimize scheduling to prevent model overlap.\n- Track maintenance cycles for each train model.\n- Provide user-friendly interface for train management.\nWe will implement a function to manage train models and their maintenance schedules using efficient data structures. The function will track the addition and removal of trains, calculate daily maintenance counts, and handle up to 200,000 operations. We will use Python's built-in data structures such as dictionaries and lists to efficiently manage the state of each train model and its maintenance cycle.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own working and maintenance schedule.\n\n    'maintenance cycle'\n    Explanation: The period during which a train is not operational and is undergoing maintenance. This cycle alternates with the working period.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to keep track of the current state (working or maintenance) and the cycle (x_i, y_i) for each train model.\n2. For each operation (add or remove):\n   - If adding a train (op=1), set its initial state to working and start its cycle.\n   - If removing a train (op=2), remove it from the tracking dictionary.\n3. For each day, update the state of each train:\n   - Decrease the remaining days in its current state.\n   - If a train's working days are over, switch it to maintenance and vice versa.\n4. Count and print the number of trains in maintenance at the end of each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's state and switching between working and maintenance handles these cases naturally.\n", "requirement analysis:\nThe requirement is to track the number of trains in maintenance each day based on their work and maintenance cycles. The solution must efficiently handle up to 200,000 operations and large cycle durations, ensuring accurate daily counts.\nrequirement pool:\n- Implement efficient data structures to manage train states.\n- Ensure accurate calculation of maintenance days.\n- Optimize for large input sizes and long cycle durations.\n- Provide clear and concise output format.\n- Integrate with existing train management systems.\nWe will use a dictionary to track the state of each train model, specifically whether it is currently working or in maintenance. We will also maintain a list to keep track of the number of trains in maintenance for each day. The approach will involve iterating over the operations, updating the state of each train model, and calculating the number of trains in maintenance based on their cycles. This will ensure efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model': Refers to the different types of trains, each with its own working and maintenance cycle.\n    'working days (x_i)': The number of consecutive days a train model is operational.\n    'maintenance days (y_i)': The number of consecutive days a train model is under maintenance.\n    'operation (op)': Indicates whether a train is added (op=1) or removed (op=2).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Ensures that there is only one train per model at any time.\n    'x_i days': Specifies the duration a train works before going into maintenance.\n    'y_i days': Specifies the duration a train remains in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state (working or maintenance) and cycle position of each train model.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. Iterate over each operation:\n   - If op=1, add the train model and set its initial state to working.\n   - If op=2, remove the train model from tracking.\n4. For each day, update the state of each train model based on its cycle (working or maintenance).\n5. Count and record the number of trains in maintenance for that day.\n6. Output the recorded maintenance counts for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: The train is added and removed on the same day, so it never enters maintenance.\n\n    Input: 2 3\n           1 1\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Both trains are added but neither enters maintenance before being removed.\n\n    Input: 1 2\n           2 2\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: The train is added but removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's state and cycle will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that train models are added and removed correctly while tracking their maintenance cycles. The solution should be optimized for performance given the large input constraints.\nrequirement pool:\n- Efficiently track and update train maintenance status daily.\n- Ensure no duplicate train models are present in the system.\n- Provide a user-friendly interface for train management.\n- Integrate seamlessly with existing train operation systems.\n- Offer detailed reporting and analytics on train maintenance.\nWe will use a dictionary to track the status of each train model, whether it is in operation or maintenance. A list will be used to store the number of trains in maintenance for each day. We will iterate through the operations, updating the status of each train model and calculating the number of trains in maintenance accordingly. This approach ensures efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific operational and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced or repaired.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be no more than one train of a particular model at any given time in the department.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance. This cycle repeats until the train is removed.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the status (operational or maintenance) of each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. Iterate through each day's operation:\n        - If a train is added, update its status to operational and calculate when it will enter maintenance.\n        - If a train is removed, ensure it is not counted as in maintenance.\n    4. For each day, count the number of trains currently in maintenance and store this in the list.\n    5. Output the list containing the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it is operational on the first day, so no trains are in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added on the first day and removed on the second day, so no trains are in maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 2\n           2 2\n           1 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that none are in maintenance during these days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking operational and maintenance status using a dictionary and list will handle these scenarios effectively.\n", "requirement analysis:\nThe system needs to efficiently track the maintenance schedule of trains based on their model-specific work and maintenance cycles. It should handle up to 200,000 operations and provide accurate daily counts of trains in maintenance.\nrequirement pool:\n- Implement the core logic to track train maintenance cycles.\n- Optimize performance for handling large input sizes.\n- Ensure accurate daily maintenance counts.\n- Integrate with existing train management systems.\n- Provide user-friendly output format.\nWe will implement a function to track the maintenance schedule of trains using a dictionary to store the state of each train model. We will use a list to keep track of the number of trains in maintenance each day. The function will efficiently handle up to 200,000 operations by updating the state of each train model based on the operations provided. We will use the datetime module to manage the days and cycles of work and maintenance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance schedule'\n    Explanation: This refers to the cycle of operation and maintenance for each train model, where a train works for a certain number of days and then undergoes maintenance for another set of days.\n\n    'train model'\n    Explanation: Each train model is unique, and the department can have at most one train of each model at any time.\n\n# [phrase showing quantity relationship]\n    'at most one': This indicates that there can be zero or one train of each model in the department at any given time.\n    Implementation: Use a dictionary to track the presence of each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to store the state (working or maintenance) of each train model.\n    2. Initialize a list to keep track of the number of trains in maintenance each day.\n    3. For each operation (add or remove), update the state of the train model in the dictionary.\n    4. Use a loop to simulate each day, updating the maintenance count based on the current state of each train model.\n    5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: Train model 1 is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           1 1\n           1 2\n           1 3\n           1 1\n           2 2\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Train models are added and removed without overlapping maintenance periods.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these scenarios by updating the state of each train model based on operations and simulating each day accordingly.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that train models are correctly tracked for their working and maintenance cycles. The solution should provide daily counts of trains in maintenance, considering the addition and removal of trains as per the operations provided.\nrequirement pool:\n- Efficiently track train maintenance cycles and provide daily counts.\n- Ensure the system can handle up to 200,000 operations without performance degradation.\n- Integrate seamlessly with existing train management systems.\n- Provide a user-friendly interface for train managers.\n- Offer analytics and reporting features for maintenance schedules.\nWe will use a dictionary to track the state of each train model, whether it is working or in maintenance. We will also maintain a list to keep track of the number of trains in maintenance for each day. The approach will efficiently handle up to 200,000 operations by updating the state of trains and counting the maintenance trains in O(1) time for each operation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific working and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced or repaired.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be no more than one train of a particular model at any given time in the department.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it remains in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the state (working or maintenance) of each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. For each operation (add or remove), update the state of the train model in the dictionary.\n    4. Calculate the number of trains in maintenance for each day based on the current state of all train models.\n    5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 2\n           2 2\n           1 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that no train enters maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic efficiently handles adding and removing trains while tracking their maintenance status.\n", "requirement analysis:\nThe requirements focus on managing train models efficiently, ensuring no duplication, and accurately tracking maintenance schedules. The system should handle up to 200,000 operations and support large values for maintenance and work periods.\nrequirement pool:\n- Implement train addition and removal functionality\n- Calculate daily maintenance counts accurately\n- Ensure no duplicate train models in the department\n- Optimize for large input sizes and values\n- Integrate with existing train management systems\nWe will use a dictionary to track the status of each train model, whether it is in operation or maintenance. We will also use a list to keep track of the number of trains in maintenance for each day. The approach will efficiently handle up to 200,000 operations by updating the status of trains and calculating maintenance counts based on the given input operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific operational and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced. The requirement is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be zero or one train of each model at any given time, but not more than one.\n\n    'works for x_i days', 'maintenance for y_i days'\n    Explanation: Specifies the cycle duration for each train model, where x_i is the number of days a train operates before going into maintenance, and y_i is the number of days it remains in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a dictionary to track the status (operational or maintenance) of each train model.\n    - Initialize a list to store the number of trains in maintenance for each day.\n    - For each operation (add or remove), update the status of the train model in the dictionary.\n    - Calculate the number of trains in maintenance based on the current status and update the list accordingly.\n    - Output the list showing the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it operates for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no train enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train status and updating maintenance counts will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to handle up to 200,000 operations efficiently, ensuring that train models are added and removed correctly. It must track the maintenance cycle accurately, considering the work and maintenance days for each model. The output should reflect the number of trains in maintenance each day, excluding the day a train is removed.\nrequirement pool:\n- Implement efficient data structures to manage train schedules.\n- Ensure accurate calculation of maintenance days.\n- Develop a user-friendly interface for train management.\n- Integrate with existing railway systems for data consistency.\n- Provide analytics and reporting features for train maintenance.\nWe will use a dictionary to track the state of each train model, whether it is in operation or maintenance. A list will be used to store the number of trains in maintenance for each day. We will iterate through the operations, updating the state of each train model and calculating the number of trains in maintenance accordingly. This approach ensures efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific operational and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced or repaired.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance. These values dictate the cycle of operation and maintenance for each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the state (operational or maintenance) of each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. Iterate through each day's operations:\n        - If a train is added (op=1), update its state to operational and calculate when it will enter maintenance.\n        - If a train is removed (op=2), remove its entry from the dictionary.\n        - For each day, check the state of all trains and count how many are in maintenance.\n    4. Output the count of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it is operational on the first day, so no trains are in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no trains are in maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that none are in maintenance during the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train states and counting maintenance days will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to track the number of trains in maintenance each day based on operations of adding or removing trains. Each train model has a specific work and maintenance cycle. The solution must efficiently handle up to 200,000 operations and provide accurate daily counts.\nrequirement pool:\n- Efficiently track train maintenance cycles and provide daily counts.\n- Handle up to 200,000 operations with optimal performance.\n- Ensure compatibility with existing train management systems.\n- Provide clear and concise input/output formats.\n- Offer a user-friendly interface for data input and result display.\nWe will use a dictionary to track the state of each train model, whether it is in operation or maintenance. We will also use a list to store the number of trains in maintenance for each day. The approach will efficiently handle up to 200,000 operations by updating the state of trains based on the input operations and calculating the maintenance status accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that can be added or removed. Each model can have only one train at a time.\n\n    'maintenance cycle'\n    Explanation: Each train has a cycle of working days followed by maintenance days. This cycle repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be no more than one train of each model at any given time.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to keep track of each train model's current state (working or maintenance) and the day it was last updated.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation:\n   - If a train is added, calculate its next maintenance start day based on its working days.\n   - If a train is removed, ensure it is not counted in maintenance.\n   - Update the dictionary with the current state and day for each train model.\n4. For each day, calculate the number of trains in maintenance by checking if the current day falls within any train's maintenance period.\n5. Append the result for each day to the list and print it.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so it is not in maintenance on the first day.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 1\n           1 2\n           1 3\n           2 2\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the state of trains and calculating maintenance status will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on managing train models efficiently, ensuring no duplication, and accurately tracking maintenance cycles. The system should handle up to 200,000 operations and support large maintenance cycles up to 1 billion days.\nrequirement pool:\n- Implement train addition and removal functionality.\n- Calculate daily maintenance counts accurately.\n- Ensure no duplicate train models in the department.\n- Track maintenance cycles for each train model.\n- Provide alerts for upcoming maintenance schedules.\nWe will use a dictionary to track the status of each train model, whether it is in operation or maintenance. We will also use a list to store the number of trains in maintenance for each day. The approach will efficiently handle up to 200,000 operations using simple data structures and logic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have at most one train at any time.\n\n    'maintenance cycle'\n    Explanation: Each train model has a specific cycle of working days (x_i) followed by maintenance days (y_i). This cycle repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train'\n    Explanation: Indicates that there can be no more than one train of each model in the department at any given time.\n    \n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance. This can be implemented using a counter to track the current day within the cycle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the status of each train model, including the current day in its cycle and whether it is in operation or maintenance.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation (add or remove a train):\n   - If adding a train, set its initial status to working and start its cycle.\n   - If removing a train, ensure it is not counted as in maintenance on that day.\n4. For each day, update the status of all trains:\n   - Increment the day counter for each train.\n   - Switch between working and maintenance based on x_i and y_i.\n5. Count and record the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for one day, so it is never in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's cycle and updating their status daily will naturally handle these scenarios.\n"], "scores": [], "pass_results": [false, false, true, true, false, true, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 835, "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "rephrase_one", "parent_index": 60}
