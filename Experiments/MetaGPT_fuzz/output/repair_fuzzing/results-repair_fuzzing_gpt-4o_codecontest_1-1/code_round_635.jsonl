{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower and is a busy person, so he occasionally neglects to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower and is a busy person, so he occasionally neglects to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower and is a busy person, so he occasionally neglects to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows:\n\n  * If the flower isn't watered for two consecutive days, it dies. The flower cannot survive more than two days without water, as this leads to its death.\n  * If the flower is watered in the i-th day, it grows by 1 centimeter.\n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1.\n  * If the flower is not watered in the i-th day, it does not grow.\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower and is a busy person, so he occasionally neglects to water it. You are given n days from Petya's life and must determine the flower's fate.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two consecutive days, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth_simulation(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower based on watering patterns over a series of days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing watering patterns over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n        \n        for i in range(len(days)):\n            if days[i] == 0:\n                # Check for consecutive days without watering\n                if i > 0 and days[i-1] == 0:\n                    flower_died = True\n                    break\n                previous_day_watered = False\n            else:\n                # Flower is watered on the current day\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    days = list(map(int, input().split()))\n    test_cases.append(days)\n\n# Output interface\nresults = flower_growth_simulation(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nimport typing\n\ndef calculate_flower_height(t: int, test_cases: typing.List[typing.Tuple[int, typing.List[int]]]) -> typing.List[int]:\n    \"\"\"Calculate the final height of the flower for each test case based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (typing.List[typing.Tuple[int, typing.List[int]]]): List of test cases, each containing\n            the number of days and the watering pattern.\n\n    Returns:\n        typing.List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for n, watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n        \n        for day in range(n):\n            if watering_pattern[day] == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    flower_died = True\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth_simulation(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over a series of days for multiple test cases.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n        \n        for i in range(len(days)):\n            if days[i] == 0:\n                if i > 0 and days[i - 1] == 0:\n                    flower_died = True\n                    break\n                previous_day_watered = False\n            else:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = flower_growth_simulation(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_dead = False  # Track if the flower is dead\n\n        for i, watered in enumerate(days):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_dead = True\n                    break\n\n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after a series of days based on watering patterns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing watering status for each day.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_no_water_days = 0\n        \n        for i in range(len(days)):\n            if days[i] == 1:\n                if i > 0 and days[i-1] == 1:\n                    height += 5  # Grow by 5 cm for consecutive watering days\n                else:\n                    height += 1  # Grow by 1 cm for a single watering day\n                consecutive_no_water_days = 0  # Reset consecutive no water days\n            else:\n                consecutive_no_water_days += 1\n                if consecutive_no_water_days == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_pattern: List[int]) -> int:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        n (int): The number of days.\n        watering_pattern (List[int]): A list indicating whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        int: The final height of the flower or -1 if the flower dies.\n    \"\"\"\n    # Initial height of the flower\n    height = 1\n    # Track consecutive days without water\n    consecutive_dry_days = 0\n\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            # Reset consecutive dry days counter\n            consecutive_dry_days = 0\n            # Check if the previous day was also watered\n            if i > 0 and watering_pattern[i - 1] == 1:\n                # Grow by 5 cm if watered consecutively\n                height += 5\n            else:\n                # Grow by 1 cm if watered but not consecutively\n                height += 1\n        else:\n            # Increment consecutive dry days counter\n            consecutive_dry_days += 1\n            # Check if the flower dies\n            if consecutive_dry_days == 2:\n                return -1\n\n    return height\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        result = calculate_flower_height(n, watering_pattern)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n\n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n\n        results.append(height)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing watering days (1 for watered, 0 for not watered).\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_watered = False  # Track if the previous day was watered\n        flower_died = False  # Track if the flower dies\n\n        for i, watered in enumerate(days):\n            if watered == 1:\n                if consecutive_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_watered = True\n            else:\n                if consecutive_watered:\n                    consecutive_watered = False\n                else:\n                    # If not watered for two consecutive days, the flower dies\n                    flower_died = True\n                    break\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth_simulation(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over a series of days based on the given watering pattern.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_watered = False  # Flag to track consecutive watering\n        dead = False  # Flag to track if the flower is dead\n        \n        for i, watered in enumerate(days):\n            if watered == 1:\n                if i > 0 and days[i - 1] == 1:\n                    # If watered on consecutive days, grow by 5 cm\n                    height += 5\n                else:\n                    # If watered on a single day, grow by 1 cm\n                    height += 1\n                consecutive_watered = True\n            else:\n                if i > 0 and days[i - 1] == 0:\n                    # If not watered for two consecutive days, the flower dies\n                    dead = True\n                    break\n                consecutive_watered = False\n        \n        if dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n\n    # Output interface\n    results = flower_growth_simulation(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over a series of days based on watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i in range(len(days)):\n            if days[i] == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to correctly implement the growth rules and handle multiple test cases efficiently. The solution must also account for the flower dying if not watered for two consecutive days.\nrequirement pool:\n- Implement the flower growth simulation based on the given rules.\n- Ensure the program can handle up to 100 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the solution for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the given rules. The function will iterate through each test case, process the watering pattern, and calculate the final height of the flower or determine if it dies. We will use basic Python data structures like lists to handle the input and output efficiently. The solution will be optimized to handle up to 100 test cases with a maximum of 100 days each.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on specific watering patterns over a series of days.\n\n    'consecutive days'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list of watering patterns.\n    \n    'grows by 1 centimeter': If the flower is watered on a single day, it grows by 1 centimeter. This can be implemented by incrementing the height by 1 for each day with a value of 1.\n    \n    'grows by 5 centimeters': If the flower is watered on two consecutive days, it grows by 5 centimeters instead of 1. This can be implemented by checking for consecutive ones and incrementing the height by 5.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 centimeter.\n    - Iterate through each test case:\n        - For each test case, iterate through the list of watering patterns:\n            - Check if there are two consecutive zeros; if found, set height to -1 and break out of the loop.\n            - If a day is watered (value is 1), check if the previous day was also watered:\n                - If yes, increment height by 5.\n                - If no, increment height by 1.\n    - Return the final height for each test case.\n\n# [edge case]\n    Input: 2\n           2\n           0 0\n           3\n           1 0 0\n    Output: -1\n            -1\n    Explanation: In both test cases, the flower is not watered for two consecutive days, so it dies, resulting in a height of -1.\n\n    Input: 2\n           4\n           1 1 0 1\n           5\n           0 1 1 0 1\n    Output: 7\n            8\n    Explanation: In the first test case, the flower grows by 5 cm on the first two days and then by 1 cm on the fourth day. In the second test case, it grows by 5 cm on the second and third days and then by 1 cm on the fifth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive zeros leading to the flower's death and handles growth based on watering patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days, accounting for watering patterns and neglect. The solution must handle multiple test cases and provide accurate results for each scenario, including cases where the flower dies due to consecutive days of neglect.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the given watering pattern for each test case. The function will iterate through the days, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The solution will be implemented in a single file, 'main.py', using standard Python libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not, with specific rules for consecutive watering.\n\n    'consecutive days'\n    Explanation: The flower's growth or death depends on whether it is watered on consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    \n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate through each test case:\n   - For each day, check if the flower is watered (a_i = 1) or not (a_i = 0).\n   - If a_i = 0 and the previous day was also 0, set the height to -1 (flower dies) and break out of the loop.\n   - If a_i = 1 and the previous day was also 1, increase the height by 5 cm.\n   - If a_i = 1 and the previous day was not 1, increase the height by 1 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 0] = -1\n    Explanation: The flower grows to 6 cm after two consecutive waterings but dies after two consecutive dry days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for two consecutive zeros and adjusting growth based on watering patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on daily watering patterns. The key challenge is to accurately track the growth or death of the flower over multiple test cases, ensuring the output is correct and efficiently handled.\nrequirement pool:\n- Implement the flower growth simulation logic.\n- Handle multiple test cases efficiently.\n- Ensure the output format is clear and correct.\n- Optimize the code for performance with up to 100 test cases.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the given rules. The function will iterate through each test case, track the growth or death of the flower, and return the final height or -1 if the flower dies. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on whether it is watered or not over a series of days.\n\n    'consecutive days'\n    Explanation: This refers to two days in a row. If the flower isn't watered for two consecutive days, it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list of days.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height if a day is watered.\n    \n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm. Implemented by adding 5 to the height if two consecutive days are watered.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize the height of the flower to 1 cm at the start.\n    2. For each test case, iterate through the list of days:\n        - If two consecutive days are not watered (two zeros in a row), set the height to -1 and break out of the loop.\n        - If a day is watered and the previous day was also watered, increase the height by 5 cm.\n        - If a day is watered but the previous day was not, increase the height by 1 cm.\n    3. After processing all days, store the final height for each test case.\n    4. Output the results for all test cases.\n\n# [edge case] \n    Case 1: Input: [0] = Output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but it doesn't die because it's only one day.\n\n    Case 2: Input: [0, 0] = Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Case 3: Input: [1, 1, 0, 1] = Output: 8\n    Explanation: The flower grows by 5 cm on the first two days (total 6 cm), does not grow on the third day, and grows by 1 cm on the fourth day (total 8 cm).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for consecutive zeros and adjusting growth based on watering patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately track the growth and handle cases where the flower dies due to consecutive days without water. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Develop error handling for scenarios where the flower dies.\n- Optimize the code for performance with large input sizes.\n- Enhance user interface for better input and output clarity.\nWe will implement a function to simulate the growth of a flower over a series of days based on the given watering pattern. The function will iterate through each day, updating the flower's height according to the rules provided. If the flower is not watered for two consecutive days, it will be marked as dead, and the function will return -1 for that test case. We will use a simple loop and conditionals to handle the logic, ensuring the solution is efficient and easy to understand. The function will handle multiple test cases as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower's height changes according to specific rules, and the main task is to calculate its final height or determine if it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with no watering.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - If the flower is watered (a_i = 1):\n          - Check if the previous day was also watered (a_(i-1) = 1), if so, increase height by 5 cm.\n          - Otherwise, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0):\n          - Check if the previous day was also not watered (a_(i-1) = 0), if so, mark the flower as dead and return -1 for this test case.\n    - Return the final height for each test case unless the flower dies.\n\n# [edge case]\n    Input: 2\n           2\n           0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Input: 3\n           3\n           1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days and does not grow on the third day.\n\n    Input: 4\n           4\n           1 0 1 0\n    Output: 3\n    Explanation: The flower grows by 1 cm on the first day, does not grow on the second day, grows by 1 cm on the third day, and does not grow on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering leading to the flower's death.\n", "requirement analysis:\nThe task requires implementing a function to simulate the growth of a flower over a series of days based on watering patterns. The function must handle multiple test cases, determine if the flower dies, and calculate its final height. The constraints are manageable, allowing for straightforward iteration over the days.\nrequirement pool:\n- Implement the flower growth simulation algorithm.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the algorithm for edge cases.\n- Provide detailed error messages for invalid inputs.\n- Enhance user interface for better user experience.\nWe will implement a function to simulate the growth of a flower over a series of days based on watering patterns. The function will iterate over the days, checking the watering status and updating the flower's height accordingly. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower's height changes depending on whether it is watered or not, with specific rules for consecutive watering and non-watering days.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is either watered or not. The flower's survival and growth depend on these consecutive patterns.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two back-to-back days without watering.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    'more than': The flower cannot survive more than two days without water, meaning it dies if not watered for three or more consecutive days.\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate over each test case:\n   - For each day, check if the flower is watered (a_i = 1) or not (a_i = 0).\n   - If watered on a single day, increase height by 1 cm.\n   - If watered on consecutive days, increase height by 5 cm.\n   - If not watered for two consecutive days, set height to -1 (flower dies) and break out of the loop.\n3. Output the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it hasn't been two consecutive days without water.\n\n    Test case: 3\n    Input: 1 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 4\n    Input: 1 1 0 1\n    Expected output: 12\n    Explanation: The flower grows by 5 cm on the second day (consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days leading to the flower's death and handles single-day watering appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately track the growth and determine if the flower dies due to neglect. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear error handling for scenarios where the flower dies.\n- Optimize the code for performance with large input sizes.\n- Enhance user experience with detailed output explanations.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided. The function will iterate through each day, updating the flower's height according to the rules specified. If the flower is not watered for two consecutive days, it will return -1 indicating the flower has died. We will use basic list operations and control flow statements to achieve this, ensuring the solution is efficient and handles multiple test cases as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on whether it is watered or not over a series of days. The flower's growth is determined by specific rules regarding consecutive watering and non-watering days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates that if the flower is not watered for two days in a row, it dies. In code, this can be implemented by checking pairs of days for consecutive zeros.\n    'grows by 1 centimeter': This means that on any given day, if the flower is watered, it increases in height by 1 cm.\n    'grows by 5 centimeters': This means that if the flower is watered on two consecutive days, it grows by 5 cm on the second day.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the height of the flower to 1 cm at the start.\n    2. Iterate through each test case:\n       - For each day in the test case, check if the flower is watered.\n       - If watered, check if the previous day was also watered to determine growth (1 cm or 5 cm).\n       - If not watered, check if the previous day was also not watered to determine if the flower dies.\n    3. If the flower dies, return -1 for that test case.\n    4. Otherwise, return the final height after all days are processed.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it does not die because it needs two consecutive days without water to die.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, leading to its death.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering and then by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking consecutive days and updating height accordingly will handle these cases naturally.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately track growth and determine if the flower dies due to neglect. The solution must efficiently handle multiple test cases and provide clear outputs for each scenario.\nrequirement pool:\n- Implement the flower growth logic based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of a flower based on the given watering pattern over a series of days. The function will handle multiple test cases efficiently by iterating through each test case and applying the growth rules. We will use simple list operations to track the growth and determine if the flower dies due to neglect. The solution will focus on clarity and performance, ensuring it handles the maximum constraints smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not. It grows by 1 cm if watered on a single day, and by 5 cm if watered on two consecutive days.\n\n    'flower death'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days in a row. In code, this can be checked by iterating through the list and checking pairs of days.\n    \n    'grows by 1 centimeter': This means the height increases by 1 cm when watered on a single day. In code, this can be implemented as `height += 1`.\n    \n    'grows by 5 centimeters': This means the height increases by 5 cm when watered on two consecutive days. In code, this can be implemented as `height += 5`.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is watered (a_i = 1):\n     - Check if the previous day was also watered. If so, increase height by 5 cm.\n     - Otherwise, increase height by 1 cm.\n   - If the flower is not watered (a_i = 0):\n     - Check if the previous day was also not watered. If so, the flower dies, and set height to -1.\n3. If the flower dies, break out of the loop for that test case.\n4. Output the final height for each test case.\n\n# [edge case] \n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 0] = -1\n    Explanation: The flower grows to 6 cm after the first two days but dies on the last two days due to lack of water.\n\n    Test case: [1, 0, 1, 0] = 3\n    Explanation: The flower grows by 1 cm on the first and third days, resulting in a total height of 3 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without water leading to the flower's death.\n", "requirement analysis:\nThe task requires implementing a function to simulate the growth of a flower over a series of days based on watering patterns. The function must handle multiple test cases, determine if the flower dies due to neglect, and calculate the correct height based on the watering rules provided.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering rules.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the code for performance with large input sizes.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function that simulates the growth of a flower over a series of days based on the given watering pattern. The function will iterate through each test case, checking the watering status for each day, and apply the growth rules accordingly. If the flower is not watered for two consecutive days, it will be marked as dead. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and does not grow if not watered. If not watered for two consecutive days, it dies.\n\n    'consecutive days'\n    Explanation: This refers to two days in a row. If the flower is not watered for two consecutive days, it dies. If watered on consecutive days, it grows by 5 cm instead of 1 cm.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list of watering days.\n    \n    'grows by 1 centimeter': If the flower is watered on a single day, it grows by 1 cm. This can be implemented by adding 1 to the height for each day with a value of 1 that is not preceded by another 1.\n    \n    'grows by 5 centimeters': If the flower is watered on consecutive days, it grows by 5 cm. This can be implemented by adding 5 to the height for each pair of consecutive days with a value of 1.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on consecutive days, increase the height by 5 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for two consecutive zeros and adjusting growth based on watering patterns.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The main challenge is to correctly implement the growth rules and handle cases where the flower dies due to neglect. The solution must efficiently process multiple test cases and provide accurate results for each.\nrequirement pool:\n- Implement the flower growth simulation based on watering rules.\n- Handle multiple test cases and provide correct output for each.\n- Optimize the solution for performance with up to 100 test cases.\n- Ensure the solution is easy to understand and maintain.\n- Include comments and documentation for clarity.\nWe will implement a function to simulate the growth of the flower over a series of days based on the given watering pattern. The function will iterate through each test case, checking the watering status for each day and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead. The solution will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and does not grow if not watered. If not watered for two consecutive days, it dies.\n\n    'test cases'\n    Explanation: The requirement involves multiple test cases, each with its own set of days and watering pattern. The solution must handle each test case independently.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the height increases by 1 cm.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the height increases by 5 cm instead of 1 cm.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on consecutive days, increase the height by 5 cm.\n3. After processing all days in a test case, store the result (height or -1) for that test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case with all zeros: \n    Input: 3\n           0 0 0\n    Output: -1\n    Explanation: The flower is not watered at all, so it dies after two consecutive days without water.\n\n    Test case with alternating pattern:\n    Input: 4\n           1 0 1 0\n    Output: 3\n    Explanation: The flower is watered on days 1 and 3, growing by 1 cm each time, resulting in a total height of 3 cm.\n\n    Test case with maximum watering:\n    Input: 5\n           1 1 1 1 1\n    Output: 21\n    Explanation: The flower is watered every day, growing by 5 cm on each consecutive day after the first, resulting in a total height of 21 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower is not watered for two consecutive days or is watered in various patterns.\n", "requirement analysis:\nThe task requires implementing a function that simulates the growth of a flower over a series of days based on whether it is watered or not. The function must handle multiple test cases and determine the final height of the flower or if it dies due to neglect. The constraints are manageable, allowing for a straightforward simulation approach.\nrequirement pool:\n- Implement the flower growth simulation based on watering patterns.\n- Ensure the function handles multiple test cases efficiently.\n- Optimize the solution for performance within given constraints.\n- Provide detailed error messages for invalid inputs.\n- Include additional test cases to cover edge scenarios.\nWe will implement a function that simulates the growth of a flower over a series of days based on whether it is watered or not. The function will iterate through the list of days, updating the flower's height according to the rules provided. If the flower is not watered for two consecutive days, it will die, and the function will return -1 for that test case. We will use basic list operations and control structures to achieve this, ensuring the solution is efficient given the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on whether it is watered or not. The flower's height changes according to specific rules depending on consecutive days of watering or neglect.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is either watered or not. The flower's growth or death depends on these consecutive sequences.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with a value of 0 in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    \n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate through each test case:\n   - For each day in the test case, check if the flower is watered (1) or not (0).\n   - If the flower is watered on a single day, increase height by 1 cm.\n   - If watered on two consecutive days, increase height by 5 cm.\n   - If not watered for two consecutive days, set height to -1 and break out of the loop for that test case.\n3. Output the final height for each test case.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days of neglect to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower is watered on the first two days (grows by 5 cm), not watered on the third day (no growth), and watered again on the fourth day (grows by 1 cm).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days and updating the height accordingly.\n"], "scores": [], "pass_results": [false, false, true, true, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 635, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "parent_index": 408}
