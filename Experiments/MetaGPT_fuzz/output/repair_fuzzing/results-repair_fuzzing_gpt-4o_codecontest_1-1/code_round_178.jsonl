{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are sequentially arranged in a circular manner. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Furthermore, in each town, the i-th singer got inspired. During his inspiration, he composed a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all calculations are made under modulo operation where needed.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are sequentially arranged in a circular manner. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Furthermore, in each town, the i-th singer got inspired. During his inspiration, he composed a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all calculations are made under modulo operation where needed.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are sequentially arranged in a circular manner. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. Furthermore, in each town, the i-th singer got inspired. In the moments when inspiration struck, he composed a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all calculations are made under modulo operation where needed.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are sequentially arranged in a circular manner, numbered from 1 to n in clockwise order, with each town having a singer whose repertoire lasts a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns starting with the town he lives in and gave exactly one concert in each town; during his inspiration in each town, he composed a song lasting a_i minutes which was added to his repertoire for subsequent performances. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Assume all calculations are made under modulo operation where needed.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Check if all b values are the same\n        if all(b[i] == b[0] for i in range(1, n)):\n            results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct the sequence a\n        a = [0] * n\n        valid = True\n        \n        # Calculate the initial repertoire durations\n        for i in range(n):\n            # Calculate a_i using the formula derived from the problem statement\n            a[i] = (b[i] - b[i - 1] + b[i - 2]) // n\n            if a[i] <= 0 or a[i] > 10**9:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers or indicates impossibility.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence array\n        a = [0] * n\n        \n        # Calculate the initial repertoire for each singer\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_repertoire = total_sum // (n * (n + 1) // 2)\n        \n        valid = True\n        for i in range(n):\n            prev_index = (i - 1 + n) % n\n            diff = b[i] - b[prev_index]\n            if (diff + total_repertoire) % n != 0 or (diff + total_repertoire) <= 0:\n                valid = False\n                break\n            a[i] = (diff + total_repertoire) // n\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for each singer.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and a list of total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town, the initial repertoire must be equal to the total concert duration.\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n\n        # Check if all b_i are equal, which may lead to no valid sequence.\n        if all(x == b[0] for x in b):\n            results.append(\"NO\")\n            continue\n\n        # Calculate the sum of b_i and check divisibility by n * (n + 1) / 2\n        total_sum = sum(b)\n        required_sum = n * (n + 1) // 2\n\n        if total_sum % required_sum != 0:\n            results.append(\"NO\")\n            continue\n\n        # Calculate the initial repertoire durations\n        a = [0] * n\n        valid = True\n        initial_sum = total_sum // required_sum\n\n        for i in range(n):\n            # Calculate a_i using the differences between consecutive b_i values\n            a[i] = (b[i] - b[i - 1] + initial_sum) // n\n            if a[i] <= 0 or a[i] > 10**9:\n                valid = False\n                break\n\n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Handle the edge case where there is only one town\n            if b[0] == 1:\n                results.append(\"YES\")\n                results.append(\"1\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct the sequence of initial repertoire durations\n        a = [0] * n\n        valid = True\n        \n        # Calculate the sum of b\n        total_b = sum(b)\n        \n        # Check if the total_b is divisible by n * (n + 1) / 2\n        if total_b % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a = total_b // (n * (n + 1) // 2)\n        \n        # Calculate each a_i\n        for i in range(n):\n            diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n            a[i] = (total_a - diff) // n\n            \n            # Check if a_i is a valid positive integer\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    # Call the function and get results\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by n * (n + 1) / 2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append((\"NO\", []))\n            continue\n        \n        # Calculate the total sum of initial repertoires\n        total_a = total_sum // (n * (n + 1) // 2)\n        \n        # Try to reconstruct the sequence a\n        valid = True\n        for i in range(n):\n            # Calculate the difference between consecutive b values\n            diff = b[i] - b[i - 1]\n            # Calculate a_i using the formula derived from the problem statement\n            a[i] = (total_a - diff) // n\n            \n            # Check if a_i is a positive integer\n            if a[i] <= 0 or (total_a - diff) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    # Call the function\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    \"\"\"Reconstructs the sequence of initial repertoires for singers based on concert durations in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of concert durations.\n\n    Returns:\n        List[Tuple[str, List[int]]]: List of results for each test case, either \"YES\" with the sequence or \"NO\".\n    \"\"\"\n    results = []\n    \n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoires\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n\n# Program call flow\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing the number of towns (n) and a list of total concert durations (b).\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        possible = True\n        \n        # Calculate the initial repertoire durations\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_a = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                diff = b[i] - b[i - 1]\n                a[i] = (total_a + diff) // n\n                if a[i] <= 0 or (total_a + diff) % n != 0:\n                    possible = False\n                    break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print results\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs a sequence of initial repertoire durations for singers or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and\n                                                  the total concert durations in each town.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_sum_b = sum(b)\n        \n        # Check if the sum of b is divisible by n\n        if total_sum_b % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        target_sum = total_sum_b // n\n        a = [0] * n\n        valid = True\n        \n        # Attempt to construct sequence 'a'\n        for i in range(n):\n            # Calculate the expected sum for the i-th town\n            expected_sum = 0\n            for j in range(n):\n                expected_sum += (j + 1) * a[(i + j) % n]\n            \n            # Check if the expected sum matches the given sum b[i]\n            if expected_sum != b[i]:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        b = list(map(int, input().strip().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Check if the total sum is divisible by n * (n + 1) / 2\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the total sum of a_i\n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        # Try to reconstruct the sequence a\n        valid = True\n        for i in range(n):\n            # Calculate the difference between b[i] and b[i-1] in a circular manner\n            diff = b[i] - b[i - 1]\n            # Calculate a[i] using the derived formula\n            a[i] = (total_a_sum - diff) // n\n            \n            # Check if a[i] is a positive integer\n            if a[i] <= 0 or (total_a_sum - diff) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs a sequence of initial repertoire durations for singers in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): Each test case contains the number of towns `n`\n            and a list `b` of total concert durations in each town.\n\n    Returns:\n        List[str]: A list of results for each test case. Each result is either \"NO\" if no valid\n            sequence can be reconstructed, or \"YES\" followed by the sequence of initial repertoire\n            durations.\n    \"\"\"\n    results = []\n    \n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        \n        # Edge case for a single town\n        if n == 1:\n            results.append(f\"YES\\n{b[0]}\")\n            continue\n        \n        # Attempt to reconstruct sequence\n        a = [0] * n\n        possible = True\n        \n        # Calculate the initial repertoire for each town\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        # Check if the calculated sequence is valid\n        if possible:\n            results.append(f\"YES\\n{' '.join(map(str, a))}\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        b = list(map(int, data[index + 1:index + 1 + n]))\n        test_cases.append((n, b))\n        index += n + 1\n    \n    # Call the function and get the result\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for each test case, considering the circular arrangement of towns. The solution must handle large input sizes efficiently and provide correct outputs for all test cases.\nrequirement pool:\n- Implement the main algorithm to reconstruct sequence a.\n- Ensure the solution handles the maximum input size efficiently.\n- Provide detailed error messages for invalid inputs.\n- Optimize the algorithm for better performance.\n- Enhance the user interface for better readability of outputs.\nWe will implement a function to reconstruct the sequence a based on the given constraints. The main challenge is to ensure that the sequence satisfies the conditions for each test case, considering the circular arrangement of towns. We will iterate over each test case, and for each town, calculate the possible initial repertoire durations. We will use a mathematical approach to derive the sequence a from the given b values. If a valid sequence cannot be found, we will return 'NO'. The solution will be optimized to handle large input sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circular sequence, meaning after the last town, the sequence wraps back to the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'modulo operation'\n    Explanation: Calculations are performed under modulo operation to handle circular indexing and large numbers.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations for each town.\n    - Initialize an array to store the initial repertoire durations for each singer.\n    - For each town, calculate the possible initial repertoire duration using the given total concert durations and constraints.\n    - Check if the calculated sequence satisfies all conditions for circular arrangement.\n    - If a valid sequence is found, print 'YES' followed by the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Input: 1\n           1\n           Output: YES\n                   1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Input: 2\n           1 1\n           Output: NO\n    Explanation: With two towns having equal total concert durations, it's impossible to find a valid sequence that satisfies the conditions.\n\n    Input: 4\n           10 10 10 10\n           Output: NO\n    Explanation: With all towns having equal total concert durations, it's impossible to find a valid sequence that satisfies the conditions.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement checks for single town scenarios where direct assignment is possible.\n        - Implement checks for scenarios where all towns have equal total concert durations, which should return 'NO'.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle up to 200,000 total cities across all test cases, ensuring that the output is correct and concise. Edge cases, such as when no valid sequence exists, must be handled gracefully.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence of integers.\n- Ensure the solution handles the maximum input size efficiently.\n- Provide clear output formatting for each test case.\n- Handle edge cases where no valid sequence exists.\n- Optimize the solution for better performance.\nWe will implement a function to reconstruct the sequence of integers based on the given constraints. The approach involves iterating over the towns and calculating the initial repertoire of each singer using the total concert durations provided. We will use modular arithmetic to handle the circular arrangement of towns and ensure the solution is efficient for large inputs. The function will check if a valid sequence is possible and return the sequence or indicate impossibility.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circular sequence, meaning after the last town, the sequence wraps back to the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before visiting other towns.\n\n    'modulo operation'\n    Explanation: Used to handle the circular arrangement of towns, ensuring indices wrap around correctly.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations.\n    - Initialize an array to store the initial repertoire for each singer.\n    - Iterate over each town and calculate the initial repertoire using the total concert durations and modular arithmetic.\n    - Check if a valid sequence is possible by ensuring all calculated values are positive integers.\n    - If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case] \n    Input: 1\n           1\n           Output: YES\n           Explanation: With only one town and one concert duration, the initial repertoire is equal to the concert duration.\n\n    Input: 2\n           2\n           1 1\n           Output: NO\n           Explanation: It's impossible to have two towns with equal concert durations and find a valid sequence.\n\n    Input: 4\n           4\n           1000000000 1000000000 1000000000 1000000000\n           Output: YES\n           Explanation: Large values test the efficiency and correctness of modular arithmetic handling.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence is possible.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        elif any(b[i] < n for i in range(n)):\n            print(\"NO\")\n        else:\n            # Implement logic to calculate and print valid sequence or \"NO\" if impossible.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. The solution must handle large inputs efficiently, considering the constraints on the number of test cases and the size of each test case.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers.\n- Ensure the solution handles up to 10^3 test cases efficiently.\n- Optimize the solution for large values of n, up to 4 \u22c5 10^4.\n- Provide clear output format as specified in the requirements.\n- Consider edge cases where reconstruction is impossible.\nWe will implement a function to reconstruct the sequence of integers based on the given constraints. The approach involves iterating over each test case, analyzing the total duration of concerts in each town, and attempting to derive the initial repertoire durations for each singer. If a valid sequence is found, it will be returned; otherwise, 'NO' will be output. The solution will be optimized to handle large inputs efficiently using mathematical operations and modular arithmetic where necessary.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circular sequence, meaning after the last town, the sequence wraps around to the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before visiting other towns.\n\n    'modulo operation'\n    Explanation: Calculations are performed under modulo arithmetic, which involves wrapping around values when they exceed a certain limit.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town visited is n times the initial repertoire duration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations for each town.\n    - Initialize an array to store the initial repertoire durations for each singer.\n    - For each town, calculate the possible initial repertoire duration using the total concert duration and modulo arithmetic.\n    - Check if the calculated sequence satisfies all conditions for each town.\n    - If a valid sequence is found, print 'YES' followed by the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Input: 2\n           2\n           1 1\n    Output: NO\n    Explanation: It's impossible to have two towns with equal total concert durations and derive a valid sequence.\n\n    Input: 4\n           4\n           10 10 10 10\n    Output: NO\n    Explanation: All towns have equal total concert durations, making it impossible to derive a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement checks for cases where n = 1, as it simplifies to directly using b_i as a_i.\n        - Implement checks for cases where all b_i are equal, which may lead to no valid sequence.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must handle multiple test cases efficiently, ensuring that the output is correct and formatted as specified. The challenge lies in managing large input sizes and ensuring the algorithm is optimized for performance.\nrequirement pool:\n- Develop the main algorithm to reconstruct sequence a\n- Ensure the solution handles large input sizes efficiently\n- Implement input and output formatting as per requirements\n- Optimize the algorithm for performance\n- Provide detailed documentation for the solution\nWe will implement a function to reconstruct the sequence a based on the given constraints. The key challenge is to determine if a valid sequence exists that satisfies the conditions for each test case. We will iterate over the given durations and attempt to deduce the initial repertoire durations. The solution will involve checking if the total concert durations can be decomposed into a valid sequence of initial durations. We will use modular arithmetic to handle the circular nature of the towns.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circular sequence, meaning after the last town, the sequence wraps back to the first town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'modulo operation'\n    Explanation: Used to handle the circular arrangement of towns, ensuring indices wrap around correctly.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer moves to subsequent towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire duration.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Parse the number of test cases.\n    - For each test case, read the number of towns and the total concert durations.\n    - Attempt to reconstruct the sequence of initial repertoire durations:\n      - For each town, calculate possible initial durations using modular arithmetic.\n      - Check if these calculated durations can form a valid sequence that matches the given total durations.\n    - If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and a total duration of 1, the initial repertoire must be 1. The output should be \"YES\" followed by \"1\".\n\n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: It's impossible to form a valid sequence with these durations as they don't match any valid pattern. The output should be \"NO\".\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence can be formed as shown in the example. The output should be \"YES\" followed by \"5 5 4 1 4 5\".\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be formed.\n        if n == 1:\n            if b[0] == 1:\n                print(\"YES\")\n                print(\"1\")\n            else:\n                print(\"NO\")\n        else:\n            # Implement logic to check for valid sequences using modular arithmetic\n            # If no valid sequence is found, print \"NO\"\n            # Otherwise, print \"YES\" followed by the sequence\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle up to 200,000 total cities across all test cases, ensuring that the algorithm is both time and space efficient. The output must clearly indicate whether a solution is possible and provide one if it exists.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers a.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide clear output format as specified in the requirements.\n- Optimize the solution for both time and space complexity.\n- Consider edge cases and validate input data.\nWe will use a mathematical approach to reconstruct the sequence of integers a. The key observation is that the sum of the durations of concerts in each town can be expressed as a linear combination of the initial durations a_i. We will use modular arithmetic to ensure calculations remain within bounds and efficiently handle large numbers. The algorithm will iterate over each test case, attempt to reconstruct the sequence, and check for feasibility.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the tour.\n\n    'modulo operation'\n    Explanation: Calculations are performed under modulo arithmetic to handle large numbers and ensure they remain within a certain range.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire of the singer.\n    'k + 2': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` representing total concert durations in each town.\n2. Initialize an array `a` to store the initial repertoire durations for each singer.\n3. Use a mathematical approach to deduce possible values for `a` by considering the circular nature and the given total durations `b`.\n4. Check if a valid sequence `a` can be constructed such that it satisfies all conditions for each town.\n5. If a valid sequence is found, print \"YES\" followed by the sequence `a`. If not, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town and one singer, the initial repertoire can directly be equal to the total concert duration.\n\n    Test case with n = 3 and b = [1, 2, 3] = NO\n    Explanation: The given durations do not allow for a valid sequence of initial repertoires that satisfy all conditions.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87] = YES, 5 5 4 1 4 5\n    Explanation: A valid sequence of initial repertoires can be constructed that satisfies the total concert durations in each town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement checks to ensure that calculated values for `a` are positive integers.\n    - Use modular arithmetic to handle large numbers and ensure calculations remain within bounds.\n    - Ensure that the sum of calculated concert durations matches the given `b` values for each town.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle large input sizes and provide correct outputs for multiple test cases. The challenge lies in ensuring the sequence a can be reconstructed or determining if it's impossible.\nrequirement pool:\n- Implement the main algorithm to reconstruct sequence a\n- Ensure the solution handles large input sizes efficiently\n- Provide clear output formatting\n- Optimize performance for edge cases\n- Include detailed comments and documentation\nWe will implement a function to reconstruct the sequence of integers based on the given constraints. The approach involves iterating over the towns and calculating the possible initial repertoire for each singer. We will use modular arithmetic to handle large numbers and ensure the solution is efficient for large input sizes. The function will check if a valid sequence can be reconstructed or determine if it's impossible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'modulo operation'\n    Explanation: Calculations are performed under modulo arithmetic to handle large numbers and ensure they fit within specified limits.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire of the singer.\n    \n    '(k + 2) \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` representing total concert durations in each town.\n2. Initialize an empty list `a` to store the initial repertoire for each singer.\n3. Iterate over each town and calculate the possible initial repertoire `a_i` for each singer using the given formula and constraints.\n4. Use modular arithmetic to ensure calculations remain within limits.\n5. Check if a valid sequence `a` can be reconstructed:\n   - If yes, print \"YES\" followed by the sequence `a`.\n   - If no, print \"NO\".\n\n# [edge case] \n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town and a total concert duration of 1, the initial repertoire must be 1.\n\n    Test case with n = 3 and b = [1, 2, 3] = NO\n    Explanation: The given durations do not allow for a valid sequence of initial repertoires that satisfy all conditions.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87] = YES, 5 5 4 1 4 5\n    Explanation: A valid sequence of initial repertoires can be reconstructed that satisfies all conditions.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement checks to ensure that calculated values for `a_i` are positive integers.\n    - Use modular arithmetic to handle large numbers and ensure calculations fit within specified limits.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoires\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\nprint(reconstruct_sequence(t, test_cases))\n```\nThis code handles edge cases by ensuring that each calculated `a_i` is a positive integer and uses modular arithmetic to manage large numbers.\n", "requirement analysis:\nThe requirements focus on reconstructing a sequence of initial repertoire durations based on given concert durations in towns. The solution must handle multiple test cases efficiently and provide clear output indicating whether reconstruction is possible.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Correctly reconstruct sequence or determine impossibility\n- Ensure output format is consistent with requirements\n- Optimize for large input sizes up to 2 \u22c5 10^5\n- Provide multiple valid sequences if possible\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key is to understand the pattern of concert durations and use modular arithmetic to solve the problem efficiently. We will iterate over each test case, calculate possible values for the sequence, and check if they satisfy the given conditions. If multiple solutions exist, we can choose any valid one. We will use Python's built-in capabilities for handling large integers and modular arithmetic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire lasts a_i minutes'\n    Explanation: Each singer starts with a repertoire that lasts a certain number of minutes, denoted by a_i for the i-th singer.\n\n    'modulo operation'\n    Explanation: Calculations are performed using modular arithmetic, which involves wrapping around after reaching a certain value (in this case, n).\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This means the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire duration as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns n and the list of total concert durations b.\n2. Initialize an empty list to store the initial repertoire durations a.\n3. For each town, calculate the possible initial repertoire duration a_i using the given total concert durations and modular arithmetic.\n4. Check if the calculated sequence satisfies the conditions for all towns.\n5. If a valid sequence is found, print \"YES\" followed by the sequence. If not, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The simplest case where there is only one town and one concert duration. The expected output is \"YES\" with a_1 = 1.\n\n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: The sequence cannot be reconstructed as no valid initial repertoire durations satisfy the conditions. The expected output is \"NO\".\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A complex case where multiple solutions might exist. The expected output is \"YES\" with one possible sequence being [5, 5, 4, 1, 4, 5].\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement checks to ensure that calculated initial repertoire durations are positive integers.\n    - Use modular arithmetic to handle circular arrangements and ensure calculations wrap around correctly.\n\n```python\ndef solve_concert_durations(test_cases):\n    results = []\n    for n, b in test_cases:\n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        for i in range(n):\n            # Calculate a_i based on b and modular arithmetic\n            # This is a placeholder logic; actual logic needs to be derived based on problem constraints\n            a[i] = b[i] // n  # Simplified assumption for illustration\n            if a[i] <= 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Example usage:\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\noutput = solve_concert_durations(test_cases)\nfor line in output:\n    print(line)\n```\nThis code provides a basic framework for solving the problem but requires further refinement to accurately calculate the initial repertoire durations using modular arithmetic and ensure all conditions are met.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers, considering the circular arrangement. The solution must handle large inputs efficiently and provide correct outputs for all test cases.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence a from b.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the algorithm to reduce time complexity.\n- Provide detailed comments and documentation for the code.\n- Implement additional test cases to verify the solution.\nWe will iterate over each test case and attempt to reconstruct the sequence 'a' from the given sequence 'b'. The key observation is that the sum of the sequence 'a' should be equal to the sum of sequence 'b' divided by n, as each singer contributes to each town's total concert duration. If the sum of 'b' is not divisible by n, it is impossible to construct such a sequence, and we should return 'NO'. Otherwise, we can construct a valid sequence by ensuring each element of 'a' is positive and the sum of the sequence matches the required total.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire lasts a_i minutes'\n    Explanation: Each singer starts with a repertoire of a_i minutes, which increases as they visit more towns.\n\n    'total duration of concerts in the i-th town'\n    Explanation: This is the sum of all concerts given by all singers in the i-th town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This means the concert duration doubles for the next town.\n    'k + 2': This indicates the multiplier for the concert duration increases by 1 for each subsequent town.\n    'n \u22c5 a_i': This is the maximum multiplier for the concert duration when the singer reaches the last town.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the sum of b. If this sum is not divisible by n, print \"NO\".\n2. If divisible, calculate the target sum for sequence 'a' as sum(b) / n.\n3. Attempt to construct sequence 'a' such that each a_i is positive and their sum equals the target sum.\n4. For each town, ensure that the calculated sequence 'a' can produce the given sequence 'b' using the described concert duration pattern.\n5. If a valid sequence 'a' is found, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The simplest case where only one town and one singer exist. The output should be \"YES\" with a_1 = 1.\n\n    Test case with n = 3 and b = [3, 3, 3]\n    Explanation: Each town has equal concert duration, which might suggest equal initial repertoire for each singer. The output should be \"YES\" with a possible sequence like [1, 1, 1].\n\n    Test case with n = 2 and b = [5, 7]\n    Explanation: The sum of b is not divisible by n, so it's impossible to construct such a sequence. The output should be \"NO\".\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b is not divisible by n.\n```python\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    \n    if sum(b) % n != 0:\n        print(\"NO\")\n        continue\n    \n    target_sum = sum(b) // n\n    # Further logic to construct sequence 'a' and validate it\n```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to determine if a valid sequence exists and to efficiently compute it for large input sizes. The solution must handle edge cases where no valid sequence can be formed.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers a.\n- Ensure the solution handles up to 10^3 test cases efficiently.\n- Optimize the algorithm to handle the maximum input size within time limits.\n- Implement a mechanism to detect and handle cases where no valid sequence exists.\n- Provide detailed comments and documentation for the code.\nWe will use a mathematical approach to reconstruct the sequence of integers a based on the given constraints. The key is to understand the pattern of concert durations and derive the initial repertoire durations. We will iterate over each test case, calculate possible values for a_i, and check if they satisfy the conditions. If no valid sequence can be formed, we will output 'NO'. The solution will be efficient enough to handle large inputs using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again.\n\n    'repertoire lasts a_i minutes'\n    Explanation: Each singer starts with a repertoire of a_i minutes in their home town.\n\n    'composed a song lasting a_i minutes'\n    Explanation: In each town, the singer adds a song of a_i minutes to their repertoire for subsequent performances.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': The concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': In the last town, the concert duration is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate possible values for `a_i` by considering the total duration `b_i` and the pattern of concert durations.\n4. Check if the calculated values satisfy the conditions for all towns.\n5. If a valid sequence is found, append it to `a` and print \"YES\" followed by the sequence.\n6. If no valid sequence can be formed, print \"NO\".\n\n# [edge case]\n    Test case 1: \n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and one singer, the concert duration matches the initial repertoire.\n\n    Test case 2:\n    Input: 3\n           3\n           1 2 3\n    Output: NO\n    Explanation: The given durations do not allow for a valid sequence of initial repertoires.\n\n    Test case 3:\n    Input: 4\n           4\n           4 8 12 16\n    Output: YES\n            1 2 3 4\n    Explanation: Each singer's concert duration matches the pattern described.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be sufficient to determine if a valid sequence can be formed or not.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle up to 200,000 total cities across all test cases, ensuring that the output is correct and adheres to the input-output format. Edge cases, such as when no valid sequence exists, must be handled gracefully.\nrequirement pool:\n- Develop an efficient algorithm to reconstruct the sequence of integers.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide clear and concise output for each test case.\n- Implement edge case handling to ensure robustness.\n- Optimize the solution for speed and memory usage.\nWe will implement a function that reconstructs the sequence of integers based on the given constraints. The key challenge is to determine if a valid sequence exists and to efficiently compute it for each test case. We will iterate over the cities and calculate the initial repertoire of each singer by leveraging the given total concert durations. The solution will handle large inputs by ensuring that operations are performed in linear time complexity relative to the number of cities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular manner'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after the last town back to the first.\n\n    'repertoire of a_i minutes'\n    Explanation: Each singer starts with a repertoire of a certain duration, which increases as they compose new songs in each town.\n\n    'modulo operation'\n    Explanation: Calculations involving indices are performed using modulo to handle the circular arrangement of towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': The concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    'n \u22c5 a_i': In the last town, the concert duration is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate the initial repertoire `a_i` by dividing the total concert duration by `n`.\n4. Check if the calculated `a_i` values satisfy the conditions for all towns.\n5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES\n    Explanation: With only one town, the initial repertoire can be directly set to 1.\n\n    Test case with n = 3 and b = [1, 2, 3] = NO\n    Explanation: The sequence cannot be reconstructed as the total durations do not allow for a consistent initial repertoire.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87] = YES\n    Explanation: A valid sequence can be reconstructed as shown in the example output.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be reconstructed.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        if n == 1:\n            results.append(\"YES\\n\" + str(b[0]))\n            continue\n        \n        # Attempt to reconstruct sequence\n        a = [0] * n\n        possible = True\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)\n```\n\nThis code handles edge cases by checking divisibility and reconstructing sequences based on given constraints.\n"], "scores": [], "pass_results": [true, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 178, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "expand_one2two", "parent_index": 121}
