{"name": "1598_B. Groups", "description": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "tags": ["brute force", "implementation"], "difficulty": 8, "id": 1598, "sample_io": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}], "test_list": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 1 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n-1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 0 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 1 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 0 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n-1 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 1\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 1 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n1 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 1 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 0 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 1 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 1 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 1\n0 0 1 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 0 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 1 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}], "task_id": "codecontest/59", "prompt": "n students participated in the first meeting of the Berland SU programming course (where n is even). Each group will attend exactly one class per week on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), and the selected days for the groups should not be the same. Additionally, both groups need to have the same number of students.\n\nEvery student has completed a survey indicating which weekdays are suitable for them to attend a lesson, and which are not.\n\nYour task is to determine if it is feasible to select two distinct weekdays to schedule the classes for the groups (the first group will have the lesson on the first chosen day, the second group will have the lesson on the second chosen day), and split the students into two groups, so the groups are equal in size, and the chosen lesson day for their group is suitable for each student.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "repair_prompt": ["n students participated in the first meeting of the Berland SU programming course (where n is even). Each group will attend exactly one class per week on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), and the selected days for the groups should not be the same. Additionally, both groups need to have the same number of students.\n\nEvery student has completed a survey indicating which weekdays are suitable for them to attend a lesson, and which are not.\n\nYour task is to determine if it is feasible to select two distinct weekdays to schedule the classes for the groups (the first group will have the lesson on the first chosen day, the second group will have the lesson on the second chosen day), and split the students into two groups, so the groups are equal in size, and the chosen lesson day for their group is suitable for each student.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students participated in the first meeting of the Berland SU programming course (where n is even). Each group will attend exactly one class per week on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday). The selected days for the groups should not be the same. Additionally, both groups need to have the same number of students.\n\nEvery student has completed a survey. The survey indicates which weekdays are suitable for them to attend a lesson, and which are not.\n\nYour task is to determine if it is feasible to select two distinct weekdays to schedule the classes for the groups (the first group will have the lesson on the first chosen day, the second group will have the lesson on the second chosen day), and split the students into two groups, so the groups are equal in size, and the chosen lesson day for their group is suitable for each student.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students participated in the first meeting of the Berland SU programming course (where n is even). Each group will attend exactly one class per week on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), and the selected days for the groups should not be the same, and both groups need to have the same number of students.\n\nEvery student has completed a survey indicating which weekdays are suitable for them to attend a lesson, and which are not.\n\nYour task is to determine if it is feasible to select two distinct weekdays to schedule the classes for the groups (the first group will have the lesson on the first chosen day, the second group will have the lesson on the second chosen day), and split the students into two groups, so the groups are equal in size, and the chosen lesson day for their group is suitable for each student.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_schedule_classes(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if it's possible to divide students into two groups with distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if a valid schedule is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                both_days = 0\n                \n                # Count students who can attend on day i, day j, and both\n                for student in case:\n                    if student[i] == 1 and student[j] == 1:\n                        both_days += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can split students into two groups of size n/2\n                if count_i + both_days >= n // 2 and count_j + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_schedule_classes(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two equal groups attending on distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        possible = False\n        \n        # Iterate over all pairs of weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students available on each day and both days\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two equal groups\n                if (count_day1 + both_days >= n // 2) and (count_day2 + both_days >= n // 2):\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_schedule_classes(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending on distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Check each student's availability for the selected pair of days\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have exactly half_n students\n                if group1_count >= half_n and group2_count >= half_n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_schedule_classes(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_schedule_classes(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determines if students can be divided into two groups attending classes on distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                # Count students available on each day\n                count_day1 = sum(student[day1] for student in availability)\n                count_day2 = sum(student[day2] for student in availability)\n                \n                # Check if the total number of students available on these days is at least n\n                if count_day1 + count_day2 >= n:\n                    # Calculate the number of students available on both days\n                    count_both_days = sum(student[day1] and student[day2] for student in availability)\n                    \n                    # Check if a valid division is possible\n                    if count_day1 >= n // 2 and count_day2 >= n // 2 and count_day1 + count_day2 - count_both_days >= n:\n                        possible = True\n                        break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    availability = [list(map(int, input().split())) for _ in range(n)]\n    test_cases.append(availability)\n\n# Output interface\nresults = can_schedule_classes(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two equal groups attending classes on different weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    weekdays = 5  # Monday to Friday\n\n    for case in test_cases:\n        n = len(case)\n        half_n = n // 2\n        possible = False\n\n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(weekdays):\n            for day2 in range(day1 + 1, weekdays):\n                # Count students available on day1 and day2\n                count_day1 = 0\n                count_day2 = 0\n                count_both = 0\n\n                for student in case:\n                    if student[day1] == 1 and student[day2] == 1:\n                        count_both += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n\n                # Check if we can split students into two equal groups\n                if count_day1 + count_both >= half_n and count_day2 + count_both >= half_n:\n                    possible = True\n                    break\n\n            if possible:\n                break\n\n        results.append(\"YES\" if possible else \"NO\")\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_schedule_classes(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students available on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Output interface\n    results = can_schedule_classes(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two equal groups with distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of weekdays (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                both_days = 0\n                \n                # Count students who can attend on day i, day j, and both days\n                for student in availability:\n                    if student[i] == 1:\n                        count_i += 1\n                    if student[j] == 1:\n                        count_j += 1\n                    if student[i] == 1 and student[j] == 1:\n                        both_days += 1\n                \n                # Check if it's possible to split students into two groups of size n/2\n                if count_i >= half_n and count_j >= half_n and (count_i + count_j - both_days) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        availability = [list(map(int, input().strip().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_schedule_classes(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two equal groups with distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for test_case in test_cases:\n        n = len(test_case)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                both_days = 0\n                \n                # Count students who can attend on day i, day j, and both days\n                for student in test_case:\n                    if student[i] == 1:\n                        count_i += 1\n                    if student[j] == 1:\n                        count_j += 1\n                    if student[i] == 1 and student[j] == 1:\n                        both_days += 1\n                \n                # Check if it's possible to split students into two groups of size n/2\n                if count_i >= half_n and count_j >= half_n and (count_i + count_j - both_days) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    availability = [list(map(int, input().split())) for _ in range(n)]\n    test_cases.append(availability)\n\n# Output interface\nresults = can_schedule_classes(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_schedule_classes(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"\n    Determines if it is possible to divide students into two groups of equal sizes\n    and choose different days for the groups so each student can attend the lesson\n    on the chosen day of their group.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, where each test case\n            is a list of student availability for each weekday.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if the division\n            is possible.\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, or both\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    if count_day1 + count_day2 + both_days >= n:\n                        possible = True\n                        break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_schedule_classes(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students and their availability.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    for n, availability in test_cases:\n        # Iterate over all pairs of distinct weekdays\n        possible = False\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                # Count students available on each day\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n\n                # Check if we can split students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n\n        results.append(\"YES\" if possible else \"NO\")\n    return results\n\n# Interface using input() and print()\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, availability))\n\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to determine the feasibility of scheduling classes on two distinct weekdays for two equal-sized groups of students, ensuring each student can attend on their preferred day. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students.\nrequirement pool:\n- Efficiently process up to 10,000 test cases.\n- Ensure equal-sized student groups with distinct weekdays.\n- Optimize for maximum student convenience.\n- Provide clear output indicating feasibility.\n- Handle edge cases where scheduling is not possible.\nWe will use a simple approach to iterate over each test case and check the feasibility of dividing students into two groups with distinct weekdays. We will utilize Python's built-in data structures like lists and sets to efficiently manage and check student availability. The solution will focus on finding at least one feasible configuration rather than all possible configurations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for an equal split into two groups.\n    'distinct weekdays': Each group must attend classes on different weekdays.\n    'equal in size': Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'exactly one class per week': Each group attends only one class on a chosen weekday.\n    'same number of students': Both groups must have an equal number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all pairs of distinct weekdays (i, j).\n4. For each pair, count how many students can attend on day i and how many can attend on day j.\n5. Check if it's possible to split the students into two groups of size n/2 such that one group can attend on day i and the other on day j.\n6. If such a split is possible for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    1. Input: 2\n       1 1 0 0 0\n       0 0 1 1 0\n       Expected Output: NO\n       Explanation: There is no way to split the students into two groups with distinct weekdays.\n       \n    2. Input: 4\n       1 1 0 0 0\n       1 1 0 0 0\n       0 0 1 1 0\n       0 0 1 1 0\n       Expected Output: YES\n       Explanation: The first two students can attend on Monday or Tuesday, and the last two on Wednesday or Thursday.\n       \n    3. Input: 6\n       1 0 0 0 1\n       1 0 0 0 1\n       0 1 1 0 0\n       0 1 1 0 0\n       1 0 0 0 1\n       0 1 1 0 0\n       Expected Output: YES\n       Explanation: Three students can attend on Monday or Friday, and three on Tuesday or Wednesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking the feasibility of splitting students into two groups will naturally handle these cases.\n", "requirement analysis:\nThe problem requires determining if students can be divided into two equal groups with distinct class days, ensuring each student can attend on their group's day. The solution must efficiently handle up to 10^5 students across multiple test cases, considering constraints and edge cases.\nrequirement pool:\n- Efficiently handle up to 10^5 students across test cases.\n- Ensure correct and clear output for each test case.\n- Optimize the algorithm for edge cases.\n- Provide a scalable solution for large inputs.\n- Maintain code readability and simplicity.\nWe will iterate over each test case and for each test case, we will check all possible pairs of weekdays. For each pair, we will try to divide the students into two groups such that each group can attend on one of the chosen days. We will use a greedy approach to count the number of students available on each day and check if we can form two equal groups with distinct days.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for an equal split into two groups.\n    'distinct weekdays': The two groups must attend classes on different weekdays.\n    'equal in size': Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'exactly one class per week': Each group attends only one class on a chosen weekday.\n    'at least one': Each student can attend at least one day, meaning there is at least one '1' in each student's availability.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students and their availability.\n2. Iterate over all possible pairs of weekdays (10 pairs since there are 5 weekdays).\n3. For each pair, count how many students can attend on each day.\n4. Check if it's possible to split the students into two equal groups such that each group can attend on one of the chosen days.\n5. If a valid split is found for any pair, print \"YES\". If no valid split is found after checking all pairs, print \"NO\".\n\n# [edge case]\n    Test case 1: \n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: There are only two students, and they can only attend on different days, making it impossible to form two groups with distinct days.\n\n    Test case 2:\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: The first two students can attend on Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. We can split them into two groups attending on Monday and Wednesday.\n\n    Test case 3:\n    Input: 6\n           1 0 0 0 0\n           1 0 0 0 0\n           1 0 0 0 0\n           0 1 0 0 0\n           0 1 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: All students are only available on either Monday or Tuesday, making it impossible to form two groups with distinct days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for a valid split inherently handles these cases.\n", "requirement analysis:\nThe requirement is to determine the feasibility of scheduling classes on two distinct weekdays for two groups of students, ensuring each group has equal size and students can attend on their preferred days. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students.\nrequirement pool:\n- Efficiently process multiple test cases\n- Ensure equal group sizes\n- Optimize day selection for maximum student convenience\n- Provide clear output for feasibility\n- Handle edge cases with minimal student availability\nWe will implement a function that processes each test case independently. For each test case, we will iterate over all possible pairs of weekdays and check if it's possible to divide the students into two groups such that each group can attend on one of the selected days. We will use a simple combinatorial approach to check all pairs of days and verify the feasibility of grouping students. The solution will be efficient enough to handle the constraints using basic Python data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct weekdays'\n    Explanation: The requirement specifies that the two groups must attend classes on different weekdays, meaning no overlap in the selected days for each group.\n\n    'equal in size'\n    Explanation: Each group must have the same number of students, which is half of the total number of students since n is even.\n\n# [phrase showing quantity relationship]\n    'equal': means that both groups must have the same number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Iterate over all pairs of distinct weekdays.\n    3. For each pair, check if it's possible to divide the students into two groups such that:\n       - Each student in the first group can attend on the first day.\n       - Each student in the second group can attend on the second day.\n       - Both groups have n/2 students.\n    4. If a valid division is found for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: YES\n    Explanation: Each student can attend on a different day, satisfying the requirement.\n\n    Test case with all students available on only one day:\n    Input: 4\n           1 0 0 0 0\n           1 0 0 0 0\n           1 0 0 0 0\n           1 0 0 0 0\n    Output: NO\n    Explanation: All students can only attend on Monday, making it impossible to split them into two groups attending on different days.\n\n    Test case with alternating availability:\n    Input: 4\n           1 0 0 1 0\n           0 1 0 1 0\n           1 0 0 1 0\n           0 1 0 1 0\n    Output: YES\n    Explanation: Students can be split into two groups attending on Monday and Tuesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs of weekdays and checking feasibility covers these scenarios.\n", "requirement analysis:\nThe solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. It should ensure that students are divided into two groups with equal sizes, attending classes on different weekdays. The output should be clear and concise, indicating whether the division is possible for each test case.\nrequirement pool:\n- Efficiently handle large input sizes\n- Ensure equal group sizes with different weekdays\n- Provide clear and concise output\n- Handle edge cases effectively\n- Optimize for performance\nWe will implement a function that iterates over all possible pairs of weekdays and checks if it's possible to divide the students into two groups such that each group can attend classes on one of the selected weekdays. We will use a combination of set operations and counting to efficiently determine if a valid division is possible. The solution will handle up to 10,000 test cases with a total of 100,000 students efficiently by leveraging Python's built-in data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct weekdays'\n    Explanation: This means that the two groups must attend classes on different days of the week.\n\n    'equal in size'\n    Explanation: This means that each group must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'n is even': This indicates that the number of students is always an even number, which allows for an equal split into two groups.\n    \n    'at least one': This means that each student can attend at least one day, ensuring that no student is completely unavailable.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students `n`.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all possible pairs of distinct weekdays.\n4. For each pair of weekdays, check if it's possible to split the students into two groups such that:\n   - Each group can attend classes on one of the selected weekdays.\n   - Both groups have the same number of students.\n5. Use set operations to determine if a valid division is possible for each pair of weekdays.\n6. If a valid division is found for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case] \n    Test case 1: \n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Expected Output: NO\n    Explanation: There are only two students, and they cannot attend classes on the same day, making it impossible to form two groups with distinct weekdays.\n\n    Test case 2:\n    Input: 4\n           4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Expected Output: YES\n    Explanation: The first two students can attend on Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. A valid division is possible.\n\n    Test case 3:\n    Input: 6\n           6\n           1 0 0 0 0\n           1 0 0 0 0\n           0 1 0 0 0\n           0 1 0 0 0\n           0 0 1 0 0\n           0 0 1 0 0\n    Expected Output: YES\n    Explanation: Students can be divided into three pairs, each attending on a different day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for a valid division inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and a total of 100,000 students. The key challenge is ensuring that the selected days for the groups are distinct and suitable for all students in each group.\nrequirement pool:\n- Efficiently handle large input sizes up to 10^5 students.\n- Ensure groups are of equal size and attend on different days.\n- Provide clear and concise output for each test case.\n- Maintain code readability and simplicity.\n- Consider edge cases where student availability is limited.\nWe will use a combinatorial approach to check all possible pairs of weekdays and determine if students can be divided into two equal groups based on their availability. The solution will iterate over all pairs of weekdays and check if it's possible to split students into two groups such that each group can attend classes on one of the chosen days. We will use efficient data structures to handle the constraints and ensure the solution is optimal for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct weekdays'\n    Explanation: This means that the two groups must attend classes on different days of the week.\n\n    'equal in size'\n    Explanation: Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'even': n is even, meaning it can be divided by 2 without remainder, ensuring equal group sizes.\n    'equal': Both groups must have the same number of students, meaning n/2 students per group.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all pairs of weekdays (Monday to Friday).\n    2. For each pair, check if it's possible to split students into two groups such that:\n        - Each student in the first group can attend on the first day.\n        - Each student in the second group can attend on the second day.\n    3. Ensure both groups have n/2 students.\n    4. If a valid configuration is found for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: \n    Input: \n    2\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected Output: NO\n    Explanation: With only two students, they cannot attend on different days while maintaining equal group sizes.\n\n    Case 2:\n    Input:\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    Expected Output: YES\n    Explanation: The first two students can attend on Monday, and the last two on Wednesday.\n\n    Case 3:\n    Input:\n    6\n    1 0 0 0 0\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    Expected Output: YES\n    Explanation: Three students can attend on Monday and three on Tuesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for valid group configurations inherently handles edge cases.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups with distinct weekdays for classes, ensuring each student can attend on their preferred days. The solution must efficiently handle up to 10,000 test cases and a total of 100,000 students.\nrequirement pool:\n- Efficiently handle multiple test cases.\n- Ensure equal group sizes with distinct weekdays.\n- Maximize student satisfaction with chosen days.\n- Provide clear output for feasibility.\n- Optimize performance for large datasets.\nWe will use a simple approach to iterate over all possible pairs of weekdays and check if students can be divided into two equal groups based on their availability. We will utilize Python's built-in data structures for efficient computation and ensure the solution handles up to 10,000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for an equal split into two groups.\n    'distinct weekdays': The two groups must attend classes on different days.\n    'equal in size': Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'exactly one class per week': Each group attends only one class on a specific day.\n    'same number of students': Both groups must have an equal number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case, read the number of students and their availability for each weekday.\n3. Iterate over all pairs of distinct weekdays (e.g., Monday-Tuesday, Monday-Wednesday, etc.).\n4. For each pair, check if it's possible to divide the students into two groups such that:\n   - Each group has n/2 students.\n   - All students in the first group can attend on the first day of the pair.\n   - All students in the second group can attend on the second day of the pair.\n5. If such a division is possible for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: With only two students and each available on different days, it's impossible to form two groups with distinct weekdays.\n\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 0\n    0 0 1 1 0\n    = YES\n    Explanation: The first two students can attend on either Monday or Tuesday, and the last two on Wednesday or Thursday.\n\n    6\n    1 0 0 0 1\n    1 0 0 0 1\n    0 1 1 0 0\n    0 1 1 0 0\n    1 0 0 1 0\n    1 0 0 1 0\n    = YES\n    Explanation: Students can be divided into three pairs, each attending on different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for possible groupings inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. The key challenge is to ensure that two distinct weekdays can be chosen such that each group can attend on their respective day.\nrequirement pool:\n- Efficiently handle large input sizes and multiple test cases.\n- Ensure the solution is correct and outputs the expected results for all test cases.\n- Maintain code readability and simplicity for future maintenance.\n- Provide clear documentation and comments within the code.\n- Optimize the solution for performance improvements where possible.\nWe will use a combinatorial approach to check all possible pairs of weekdays and determine if students can be divided into two equal groups based on their availability. The solution will iterate over all pairs of weekdays and check if it's possible to split students into two groups such that each group can attend on one of the chosen days. We will use Python's built-in data structures for efficient manipulation and checking of conditions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for an equal split into two groups.\n    'distinct weekdays': The two groups must attend classes on different weekdays.\n    'suitable for each student': Each student in a group must be able to attend on the chosen day for that group.\n\n# [phrase showing quantity relationship]\n    'equal in size': Both groups must have the same number of students, which is n/2 for each group.\n    'at least one': Each student can attend at least one day, meaning there is at least one '1' in each student's availability list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case, read the number of students and their availability.\n3. Iterate over all pairs of weekdays (i, j) where i != j.\n4. For each pair, count how many students can attend on day i and how many can attend on day j.\n5. Check if it's possible to split the students into two groups of size n/2 such that one group can attend on day i and the other on day j.\n6. If such a split is possible for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    2\n    2\n    1 1 0 0 0\n    0 0 1 1 1\n    = NO\n    Explanation: There is no way to split the students into two groups with distinct weekdays since each student can only attend on non-overlapping days.\n\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    = YES\n    Explanation: The first two students can form a group attending on Monday or Tuesday, and the last two can form a group attending on Wednesday or Thursday.\n\n    6\n    1 0 0 0 0\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: All students are only available on either Monday or Tuesday, making it impossible to form two groups with distinct weekdays.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for possible splits inherently handles these cases.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for different weekdays. The solution must ensure that the selected days are distinct and suitable for all students in each group. The challenge lies in efficiently processing multiple test cases and ensuring the constraints are met.\nrequirement pool:\n- Implement the main algorithm to determine feasibility of scheduling.\n- Optimize the solution for handling up to 10^4 test cases efficiently.\n- Ensure the output format strictly follows the requirements.\n- Develop a user-friendly interface for input and output handling.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to determine if it is feasible to divide students into two equal groups based on their availability for different weekdays. The function will iterate over all possible pairs of weekdays and check if students can be divided into two groups such that each group can attend classes on one of the selected weekdays. We will use efficient data structures to handle up to 10^4 test cases and ensure the constraints are met. The solution will be implemented using basic Python libraries without any external dependencies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which means they can be perfectly divided into two equal groups.\n    'distinct weekdays': The two groups must attend classes on different weekdays.\n    'suitable': A student can only attend a class on a day that is marked as suitable (1) for them.\n\n# [phrase showing quantity relationship]\n    'equal in size': Both groups must have the same number of students, which is n/2 for each group.\n    'at least one': Each student has at least one day marked as suitable, ensuring they can attend at least one class.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students `n`.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all pairs of distinct weekdays (i, j).\n4. For each pair, count how many students can attend on day i and how many on day j.\n5. Check if it's possible to split the students into two groups of size n/2 such that one group can attend on day i and the other on day j.\n6. If such a split is possible for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case 1: \n    2\n    1 1 0 0 0\n    0 0 1 1 1\n    Expected output: NO\n    Explanation: There is no way to split the students into two groups with distinct weekdays.\n\n    Test case 2:\n    4\n    1 0 0 1 0\n    0 1 0 0 1\n    0 0 0 1 0\n    0 1 0 1 0\n    Expected output: YES\n    Explanation: As explained in the example, a valid split is possible.\n\n    Test case 3:\n    6\n    1 1 1 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    1 0 0 1 0\n    0 1 0 0 1\n    Expected output: YES\n    Explanation: There are multiple ways to split the students into two groups with distinct weekdays.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for possible splits inherently handles edge cases.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for different weekdays. The solution must ensure that each group attends classes on distinct days and that all students can attend on their preferred days. The challenge lies in efficiently processing multiple test cases and ensuring the constraints are met for each.\nrequirement pool:\n- Implement the main algorithm to divide students into two groups.\n- Ensure the solution handles up to 10,000 test cases efficiently.\n- Optimize the algorithm for quick feasibility checks.\n- Provide clear output for each test case.\n- Consider edge cases where grouping may not be possible.\nWe will implement a function that processes each test case independently. For each test case, we will check all pairs of distinct weekdays to see if students can be divided into two equal groups based on their availability. We will use combinatorial logic to efficiently determine if a valid grouping is possible. The solution will handle up to 10,000 test cases efficiently by iterating over possible day pairs and checking student availability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct weekdays'\n    Explanation: This means that the two groups must attend classes on different days of the week.\n\n    'equal in size'\n    Explanation: Each group must have the same number of students.\n\n    'suitable for each student'\n    Explanation: Each student in a group must be able to attend the class on the chosen day for that group.\n\n# [phrase showing quantity relationship]\n    'n is even': This indicates that the number of students is always an even number, which allows for an equal split into two groups.\n    \n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students `n`.\n2. For each student, read their availability for each weekday.\n3. Iterate over all pairs of distinct weekdays (e.g., Monday-Tuesday, Monday-Wednesday, etc.).\n4. For each pair of weekdays, count how many students can attend on each day.\n5. Check if it's possible to split the students into two groups of `n/2` students such that one group can attend on the first day and the other on the second day.\n6. If such a split is possible for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case] \n    Test case 1:\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: There are only two students, and they can only attend on different days, making it impossible to form two groups with distinct weekdays.\n\n    Test case 2:\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    = YES\n    Explanation: The first two students can form a group attending on either Monday or Tuesday, and the last two can form a group attending on Wednesday, Thursday, or Friday.\n\n    Test case 3:\n    6\n    1 0 0 0 0\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    = YES\n    Explanation: The first three students can form a group attending on Monday, and the last three can form a group attending on Tuesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of distinct weekdays and checking for possible groupings inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must ensure that each group attends classes on different days and that all students in a group can attend on the chosen day. The constraints include handling up to 10,000 test cases and ensuring the total number of students does not exceed 100,000.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure groups are of equal size and attend on different days.\n- Provide clear output for each test case.\n- Handle edge cases where division is not possible.\n- Optimize for large input sizes.\nWe will iterate over each test case and for each test case, we will check all possible pairs of weekdays. For each pair, we will try to divide the students into two groups such that each group can attend on one of the chosen days. We will use a greedy approach to count the number of students available on each day and check if it's possible to split them equally. This approach ensures that we efficiently handle the constraints and provide a solution for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which is crucial for dividing them into two equal groups.\n    'distinct weekdays': The two groups must attend classes on different weekdays.\n    'suitable': Each student must be able to attend the class on the chosen day for their group.\n\n# [phrase showing quantity relationship]\n    'equal': The two groups must have the same number of students, meaning n/2 students per group.\n    'at least one': Each student can attend at least one day, ensuring there's always a possibility for scheduling.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students and their availability.\n2. Iterate over all pairs of distinct weekdays (10 possible pairs).\n3. For each pair, count how many students can attend on each day.\n4. Check if it's possible to split the students into two groups of equal size such that one group can attend on the first day and the other on the second day.\n5. If a valid split is found for any pair, print \"YES\". If no valid split is found after checking all pairs, print \"NO\".\n\n# [edge case]\n    Test case 1: \n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: There are only two students, each available on a different day, making it impossible to form two groups with distinct days.\n\n    Test case 2:\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 0\n           0 0 1 1 0\n    Output: YES\n    Explanation: Two groups can be formed with the first two students attending on Monday or Tuesday and the last two on Wednesday or Thursday.\n\n    Test case 3:\n    Input: 6\n           1 0 1 0 1\n           1 0 1 0 1\n           0 1 0 1 0\n           0 1 0 1 0\n           1 0 1 0 1\n           0 1 0 1 0\n    Output: YES\n    Explanation: Three students can attend on Monday or Wednesday and three on Tuesday or Thursday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for possible splits inherently handles edge cases.\n"], "scores": [], "pass_results": [false, false, false, true, true, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 729, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "mutate_method": "rephrase_one", "parent_index": 24}
