{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. Luntik wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. Luntik wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He has a one-minute songs, and he also has b two-minute songs and c three-minute songs. Luntik wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing and has a one-minute songs, b two-minute songs and c three-minute songs. Luntik wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        \n        # Dynamic programming approach to find minimal difference\n        possible_sums = {0}\n        for count, duration in [(a, 1), (b, 2), (c, 3)]:\n            new_sums = set()\n            for _ in range(count):\n                for s in possible_sums:\n                    new_sums.add(s + duration)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        min_diff = float('inf')\n        for s in possible_sums:\n            min_diff = min(min_diff, abs(total_duration - 2 * s))\n        \n        results.append(min_diff)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\ndef minimal_difference(t: int, test_cases: list[tuple[int, int, int]]) -> list[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        list[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Check edge cases\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == 1 and b == 0 and c == 0:\n            results.append(1)\n            continue\n        \n        # Dynamic programming approach to find the closest sum to half of the total duration\n        half_duration = total_duration // 2\n        possible_sums = [False] * (half_duration + 1)\n        possible_sums[0] = True\n        \n        # Iterate over each type of song and update possible sums\n        for song_duration, count in [(1, a), (2, b), (3, c)]:\n            for _ in range(count):\n                for j in range(half_duration, song_duration - 1, -1):\n                    if possible_sums[j - song_duration]:\n                        possible_sums[j] = True\n        \n        # Find the closest possible sum to half of the total duration\n        closest_sum = 0\n        for i in range(half_duration, -1, -1):\n            if possible_sums[i]:\n                closest_sum = i\n                break\n        \n        # Calculate the minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\n# Interface using input() and print()\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        if total_duration % 2 != 0:\n            results.append(1)\n            continue\n        \n        # If total duration is even, check if it can be perfectly split\n        half_duration = total_duration // 2\n        \n        # Dynamic programming approach to check if we can reach half_duration\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(half_duration, 1, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(half_duration, 2, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Check if we can reach exactly half_duration\n        if dp[half_duration]:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print results\n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimal_difference(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing three integers a, b, c.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        a, b, c = case\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Initialize the dynamic programming table\n        dp = [False] * (total_duration + 1)\n        dp[0] = True\n        \n        # Update the dp table for one-minute songs\n        for _ in range(a):\n            for i in range(total_duration, 0, -1):\n                if i >= 1 and dp[i - 1]:\n                    dp[i] = True\n        \n        # Update the dp table for two-minute songs\n        for _ in range(b):\n            for i in range(total_duration, 1, -1):\n                if i >= 2 and dp[i - 2]:\n                    dp[i] = True\n        \n        # Update the dp table for three-minute songs\n        for _ in range(c):\n            for i in range(total_duration, 2, -1):\n                if i >= 3 and dp[i - 3]:\n                    dp[i] = True\n        \n        # Find the closest possible sum to total_duration // 2\n        closest_sum = 0\n        for i in range(total_duration // 2 + 1):\n            if dp[i]:\n                closest_sum = i\n        \n        # Calculate the minimal difference\n        minimal_diff = abs(total_duration - 2 * closest_sum)\n        results.append(minimal_diff)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    # Call the function and get results\n    results = minimal_difference(t, test_cases)\n    # Output results\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing the number of one-minute,\n            two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The target for each concert is to have a duration as close as possible to half of the total duration\n        target = total_duration // 2\n        \n        # Initialize a boolean array to track possible durations\n        possible_durations = [False] * (target + 1)\n        possible_durations[0] = True\n        \n        # Process three-minute songs\n        for _ in range(c):\n            for j in range(target, 2, -1):\n                if possible_durations[j - 3]:\n                    possible_durations[j] = True\n        \n        # Process two-minute songs\n        for _ in range(b):\n            for j in range(target, 1, -1):\n                if possible_durations[j - 2]:\n                    possible_durations[j] = True\n        \n        # Process one-minute songs\n        for _ in range(a):\n            for j in range(target, 0, -1):\n                if possible_durations[j - 1]:\n                    possible_durations[j] = True\n        \n        # Find the closest possible duration to the target\n        for i in range(target, -1, -1):\n            if possible_durations[i]:\n                closest_duration = i\n                break\n        \n        # Calculate the minimal difference\n        difference = abs(total_duration - 2 * closest_duration)\n        results.append(difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing the number of 1-minute, 2-minute, and 3-minute songs.\n\n    Returns:\n        List[int]: A list of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate the total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is the absolute difference between the two concerts\n        # We can achieve this by checking the parity of the total duration\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n            two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The goal is to split the total duration into two parts as evenly as possible\n        # If total_duration is even, the minimal difference is 0\n        # If total_duration is odd, the minimal difference is 1\n        minimal_diff = total_duration % 2\n        \n        results.append(minimal_diff)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Calculate minimal difference for each test case\n    results = minimal_difference(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, \n                                                 two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is the remainder when total_duration is divided by 2\n        # This is because we can always split the songs such that the difference is minimized\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = minimal_difference(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # The minimal possible difference is the absolute difference between total_duration and twice the sum of one concert\n        # Since we want to balance the concerts, we need to check if the total duration is even or odd\n        if total_duration % 2 == 0:\n            # If even, the minimal difference can be 0\n            results.append(0)\n        else:\n            # If odd, the minimal difference can be 1\n            results.append(1)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples, each containing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge case handling\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a == b == c:\n            results.append(0)\n            continue\n        \n        # Dynamic programming approach to find the minimal difference\n        # Initialize a set to store possible sums of one concert\n        possible_sums = {0}\n        \n        # Add one-minute songs\n        for _ in range(a):\n            possible_sums.update({x + 1 for x in possible_sums})\n        \n        # Add two-minute songs\n        for _ in range(b):\n            possible_sums.update({x + 2 for x in possible_sums})\n        \n        # Add three-minute songs\n        for _ in range(c):\n            possible_sums.update({x + 3 for x in possible_sums})\n        \n        # Find the minimal difference\n        min_difference = float('inf')\n        half_total = total_duration // 2\n        \n        for sum1 in possible_sums:\n            sum2 = total_duration - sum1\n            min_difference = min(min_difference, abs(sum1 - sum2))\n        \n        results.append(min_difference)\n    \n    return results\n\n# Input interface\nnum_test_cases = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(num_test_cases)]\n\n# Function call\nresults = minimal_concert_difference(num_test_cases, test_cases)\n\n# Output interface\nfor result in results:\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with large numbers of songs, ensuring that the algorithm is both time and space efficient.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations\n- Ensure the solution can handle the maximum constraints efficiently\n- Provide clear and formatted output for each test case\n- Optimize the algorithm for both time and space complexity\n- Include comments and documentation for code clarity\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to use a subset sum algorithm to partition the songs into two groups with minimal difference in their total durations. Given the constraints, we will optimize the algorithm to handle large numbers of songs by focusing on the total duration rather than individual song counts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference': The absolute difference between two numbers is the non-negative difference between them, calculated as |x - y|.\n\n    'minimal possible difference': This refers to finding the smallest possible value of the absolute difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': These phrases indicate the duration of each type of song. In code, this can be represented by multiplying the count of each type of song by its duration to get the total duration.\n\n# [degree adverb]\n    'minimal': This indicates that we need to find the smallest possible value for the difference in durations. In code, this can be implemented by iterating through possible distributions and keeping track of the smallest difference found.\n\n# [code logic]\n1. Calculate the total duration of all songs.\n2. Use a dynamic programming approach to find a subset of songs that can form a concert with a total duration as close as possible to half of the total duration.\n3. Calculate the difference between the total duration and twice the duration of this subset.\n4. The minimal possible difference is this calculated difference.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    0 0 0 = 0\n    Explanation: With no songs, both concerts have a duration of 0, resulting in a difference of 0 minutes.\n    \n    1 1 1 = 0\n    Explanation: As explained in the example, one possible distribution results in both concerts having equal durations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where there are no songs or only one type of song.\n    \n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        if total_duration == 0:\n            results.append(0)\n            continue\n        # Dynamic programming approach to find minimal difference\n        # Initialize a set to store possible sums\n        possible_sums = {0}\n        for count, duration in [(a, 1), (b, 2), (c, 3)]:\n            new_sums = set()\n            for _ in range(count):\n                for s in possible_sums:\n                    new_sums.add(s + duration)\n            possible_sums.update(new_sums)\n        \n        # Find the closest sum to half of total_duration\n        half_duration = total_duration // 2\n        min_diff = float('inf')\n        for s in possible_sums:\n            min_diff = min(min_diff, abs(total_duration - 2 * s))\n        \n        results.append(min_diff)\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [(1, 1, 1), (2, 1, 3), (5, 5, 5), (1, 1, 2)]\nprint(minimal_difference(t, test_cases)) # Output: [0, 1, 0, 1]\n```\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with large input values for a, b, and c. The approach should consider the total duration and attempt to balance the distribution of songs to achieve the minimal difference.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations\n- Ensure the solution handles edge cases and large inputs effectively\n- Provide clear and concise output for each test case\n- Optimize the solution for performance and memory usage\n- Maintain readability and simplicity in the code\nWe will use a dynamic programming approach to solve this problem. The idea is to treat it as a variation of the subset sum problem, where we try to partition the songs into two groups with minimal difference in their total durations. We will calculate the total duration of all songs and then use a boolean array to track possible sums that can be achieved with the given songs. This will help us find the closest possible sum to half of the total duration, which will minimize the difference between the two concerts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'concert duration'\n    Explanation: The duration of a concert is the sum of the durations of all songs included in that concert.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, they can be represented as constants or variables that contribute to the total duration calculation.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the smallest possible absolute difference between the durations of the two concerts. This involves optimizing the distribution of songs.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find subsets of songs that can achieve sums close to half of the total duration.\n    3. Track possible sums using a boolean array.\n    4. Find the closest possible sum to half of the total duration.\n    5. Calculate the minimal difference using the closest sum found.\n\n# [edge case]\n    Case 1: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    Case 2: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0 minutes.\n    \n    Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for general cases\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large input values efficiently. The challenge lies in balancing the total duration of songs between the two concerts.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle the maximum input constraints.\n- Optimize the algorithm for speed and scalability.\n- Provide clear and understandable output for each test case.\n- Include edge case handling for minimal and maximal input values.\nWe will use a dynamic programming approach to solve this problem efficiently. The idea is to use a knapsack-like algorithm to distribute the songs into two groups such that the absolute difference in their total durations is minimized. This approach will allow us to handle large input values and multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'distribute all songs into two concerts'\n    Explanation: Each song must be assigned to one of the two concerts, ensuring that no song is left out or assigned to both concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These phrases indicate the duration of each type of song. The total duration of a concert is calculated by summing the durations of all songs assigned to it.\n\n# [degree adverb]\n    'minimal possible difference'\n    Explanation: The goal is to achieve the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a dynamic programming approach to find a subset of songs whose total duration is as close as possible to half of the total duration.\n    3. Calculate the duration of the other subset and find the absolute difference between the two subsets.\n    4. Return the minimal absolute difference for each test case.\n\n# [edge case]\n    Case 1: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    Case 2: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0 minutes.\n\n    Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, they can be perfectly balanced between two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == 1 and b == 0 and c == 0:\n            return 1\n        # Implement dynamic programming logic for other cases\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large input values efficiently.\nrequirement pool:\n- Implement efficient algorithm for minimal difference calculation\n- Ensure solution scalability for large input values\n- Provide clear and concise output format\n- Optimize for performance with large datasets\n- Include detailed comments for code clarity\nWe will implement a dynamic programming approach to solve the problem of distributing songs into two concerts such that the absolute difference in their durations is minimized. The problem can be reduced to a subset sum problem where we try to partition the total duration of songs into two subsets with minimal difference. We will use a simple dynamic programming table to keep track of possible sums and find the closest possible partition.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts': Refers to the two separate events where songs are distributed.\n    'absolute difference': The non-negative difference between the total durations of the two concerts.\n    'duration': The total time in minutes of songs in a concert.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': These phrases indicate the duration of each type of song. In code, these will be used to calculate the total duration of songs in each concert.\n    'minimal possible difference': This means finding the smallest non-negative difference between the total durations of the two concerts.\n\n# [degree adverb]\n    'minimal': Refers to the smallest possible value. In this context, it means the smallest possible difference in durations between the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. Initialize a boolean array `dp` where `dp[i]` indicates if a sum `i` is possible with the given songs.\n3. Set `dp[0] = True` because a sum of 0 is always possible.\n4. Iterate over each song type and update the `dp` array to reflect possible sums.\n5. Find the closest possible sum to `total_duration // 2` using the `dp` array.\n6. Calculate the minimal difference as `abs(total_duration - 2 * closest_sum)`.\n7. Repeat for each test case.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: Only one one-minute song, so one concert will have 1 minute and the other will have 0 minutes, resulting in a difference of 1.\n\n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs to distribute, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Edge Case 3: (1, 1, 1) = 0\n    Explanation: Distribute one one-minute and one two-minute song to one concert and one three-minute song to another, resulting in equal durations and a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The dynamic programming approach inherently handles these cases by considering all possible sums and finding the minimal difference.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The challenge lies in efficiently handling large numbers of songs and ensuring the solution is optimal for all test cases.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations\n- Ensure the solution can handle up to 1000 test cases efficiently\n- Optimize the algorithm for large input sizes\n- Provide clear and concise output for each test case\n- Include detailed comments and documentation in the code\nWe will use a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. The approach involves calculating the total duration of all songs and then attempting to balance the durations by distributing songs based on their lengths. We will use Python's built-in capabilities to handle large numbers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the durations of the songs that Luntik has. Each song has a fixed duration of either one, two, or three minutes.\n\n    'absolute difference of durations'\n    Explanation: This refers to the absolute value of the difference between the total durations of the two concerts. The goal is to minimize this value.\n\n# [phrase showing quantity relationship]\n    'as small as possible': This indicates that the goal is to minimize the absolute difference between the durations of the two concerts.\n\n# [degree adverb] \n    'minimal': This indicates that the solution should aim for the smallest possible difference in concert durations.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is to have a duration as close as possible to `total_duration / 2`.\n3. Use a greedy approach to distribute songs:\n   - Start by distributing the largest duration songs (three-minute) to balance the concerts.\n   - Then distribute two-minute songs.\n   - Finally, distribute one-minute songs.\n4. Calculate the absolute difference between the two concerts' durations and return it.\n\n# [edge case] \n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must go to one concert, resulting in a difference of 1 minute.\n\n    Edge Case 2: (0, 0, 0) = 0\n    Explanation: No songs to distribute, so the difference is naturally 0.\n\n    Edge Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these cases by attempting to balance the durations as closely as possible.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their total durations is minimized. The challenge lies in efficiently handling large numbers of songs and ensuring the solution is optimal.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations\n- Ensure the solution is efficient for large input sizes\n- Handle edge cases where the number of songs is extremely large\n- Provide clear documentation and examples\n- Optimize for readability and maintainability\nWe will use a greedy algorithm to distribute the songs into two concerts. The goal is to minimize the absolute difference in total durations. We will calculate the total duration of all songs and try to split them into two parts as evenly as possible. This can be achieved by iteratively assigning songs to the concert with the currently smaller total duration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'concert duration'\n    Explanation: The duration of a concert is the sum of the durations of all songs assigned to that concert.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': The goal is to achieve the smallest non-negative difference between the durations of the two concerts.\n\n# [degree adverb]\n    'minimal': This indicates that the solution should aim for the smallest possible value for the difference between concert durations.\n\n# [code logic]\n    1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n    2. Initialize two variables to represent the durations of the two concerts: `concert1_duration` and `concert2_duration`.\n    3. Use a greedy approach to distribute songs:\n        - Start by assigning songs to the concert with the smaller current duration.\n        - Iterate over each type of song (1-minute, 2-minute, 3-minute) and assign them one by one to balance the durations.\n    4. Calculate the absolute difference between `concert1_duration` and `concert2_duration`.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Input: 1 0 0\n    Expected Output: 1\n    Explanation: With only one song, it must be assigned to one concert, resulting in a difference equal to its duration.\n\n    Input: 0 0 0\n    Expected Output: 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Input: 1000000000 1000000000 1000000000\n    Expected Output: 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these scenarios by attempting to balance the durations as evenly as possible.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with potentially large numbers of songs, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle the maximum constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for both speed and simplicity.\n- Include detailed comments and documentation for the code.\nWe will use a greedy algorithm to distribute the songs into two concerts. The key is to balance the total duration of songs in each concert by iteratively assigning songs based on their duration. We will use a simple approach to calculate the total duration of songs and then find the minimal difference between the two concerts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference in the total duration of songs between two concerts. This means the difference should be non-negative and as small as possible.\n\n    'distribute all songs into two concerts'\n    Explanation: Each song must be assigned to one of the two concerts, ensuring that no song is left out or assigned to both concerts.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': The goal is to achieve the smallest non-negative difference in total duration between the two concerts.\n\n# [degree adverb]\n    'minimal': This indicates that the solution should aim for the smallest possible difference in concert durations.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a greedy approach to distribute songs into two concerts, aiming to balance their durations.\n    3. Calculate the difference in durations between the two concerts.\n    4. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    Case 2: (0, 0, 0) = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Case 3: (1000000000, 1000000000, 1000000000) = 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of balancing durations using a greedy approach will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large input values efficiently.\nrequirement pool:\n- Implement an efficient algorithm to minimize concert duration difference\n- Ensure the solution handles large input values up to 10^9\n- Optimize for speed and accuracy\n- Maintain consistent output format\n- Consider edge cases and test thoroughly\nWe will use a greedy algorithm to distribute the songs into two concerts. The idea is to balance the total duration of songs in each concert by iteratively assigning songs to the concert with the lesser current duration. This approach is efficient and can handle large input values up to 10^9.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means the difference should be non-negative and as small as possible.\n\n    'distribute all songs'\n    Explanation: Every song must be assigned to one of the two concerts, ensuring no song is left out.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference': The goal is to achieve the smallest non-negative difference between the durations of the two concerts.\n\n# [degree adverb]\n    'minimal': This indicates that the solution should aim for the smallest possible value of the absolute difference between concert durations.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Initialize two variables to represent the duration of each concert.\n    3. Use a greedy approach to assign songs to the concert with the lesser current duration, aiming to balance the durations.\n    4. After distributing all songs, calculate the absolute difference between the two concert durations.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Input: 1 0 0\n    Expected Output: 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    Input: 0 0 0\n    Expected Output: 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Input: 1000000000 1000000000 1000000000\n    Expected Output: 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, they can be perfectly balanced between two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these scenarios by balancing durations as much as possible.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with potentially large numbers of songs, ensuring that the output format is strictly followed.\nrequirement pool:\n- Develop an algorithm to minimize the difference in concert durations.\n- Ensure the solution can handle the maximum constraints efficiently.\n- Provide a clear and concise output format for each test case.\n- Optimize the algorithm for edge cases with large input values.\n- Document the solution approach and edge case handling.\nWe will use a greedy algorithm to distribute the songs into two concerts. The key idea is to balance the total duration of songs in each concert by iteratively assigning songs to the concert with the currently lesser total duration. This approach is efficient and can handle large input sizes due to its simplicity. We will use basic arithmetic operations to calculate the total duration and the difference between the two concerts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference in the total duration of songs between two concerts. This means the difference should be non-negative and as small as possible.\n\n    'distribute all songs into two concerts'\n    Explanation: Each song must be assigned to one of the two concerts, ensuring that no song is left out.\n\n# [phrase showing quantity relationship]\n    'minimal possible difference'\n    Explanation: The goal is to achieve the smallest possible difference in total duration between the two concerts. This can be implemented by iteratively balancing the durations using a greedy approach.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the smallest possible value for the difference in concert durations. This involves optimizing the distribution of songs.\n\n# [code logic]\n    1. Initialize two variables to keep track of the total duration of each concert.\n    2. Sort the songs by their duration in descending order to prioritize longer songs.\n    3. Iterate through the sorted list of songs, assigning each song to the concert with the currently lesser total duration.\n    4. After all songs are assigned, calculate the absolute difference between the two concert durations.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Case 1: Input: 1 0 0 = Output: 1\n    Explanation: With only one one-minute song, it must be assigned to one concert, resulting in a difference of 1 minute.\n\n    Case 2: Input: 0 0 0 = Output: 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0.\n\n    Case 3: Input: 1000000000 1000000000 1000000000 = Output: 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these cases by balancing durations as it iterates through the songs.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases efficiently, with each test case containing up to 10^9 songs of varying durations. The output should be the minimal possible difference for each test case.\nrequirement pool:\n- Efficiently handle up to 1000 test cases\n- Accurately calculate the minimal possible difference in concert durations\n- Optimize for large input values up to 10^9\n- Provide clear and concise output for each test case\n- Ensure the solution is user-friendly and easy to understand\nWe will use a dynamic programming approach to solve the problem of distributing songs into two concerts such that the absolute difference in their durations is minimized. The problem can be reduced to a subset sum problem where we try to partition the songs into two subsets with minimal difference in their total durations. Given the constraints, we will optimize the solution to handle large input values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'absolute difference'\n    Explanation: The requirement is to minimize the absolute difference between the total durations of two concerts. This means we need to find a way to distribute the songs such that the sum of durations in each concert is as close as possible.\n\n    'dynamic programming'\n    Explanation: The plan suggests using dynamic programming, which is a method for solving complex problems by breaking them down into simpler subproblems. It is particularly useful for optimization problems like this one.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, this can be represented by assigning values 1, 2, and 3 to the respective song types.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the smallest possible difference between the durations of the two concerts. This involves calculating the absolute difference and ensuring it is minimized.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find a subset of songs that can form one concert with a sum closest to half of the total duration.\n    3. Calculate the duration of the other concert as the total duration minus the duration of the first concert.\n    4. Compute the absolute difference between the two concert durations.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Edge Case 1: 1 0 0 = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n    \n    Edge Case 2: 0 0 0 = 0\n    Explanation: No songs are present, so both concerts have a duration of 0, resulting in a difference of 0 minutes.\n    \n    Edge Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a == b == c:\n            return 0\n        # Implement dynamic programming logic for other cases\n        (other code)\n"], "scores": [], "pass_results": [false, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 275, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "expand_one2two", "parent_index": 12}
