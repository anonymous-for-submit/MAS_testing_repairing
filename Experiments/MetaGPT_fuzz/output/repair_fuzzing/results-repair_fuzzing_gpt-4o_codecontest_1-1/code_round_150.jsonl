{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of 3 positive numbers and noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of 3 positive numbers and noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of 3 positive numbers and noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After he computed the sums, he arranged them in ascending order. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of 3 positive numbers and noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and he only has the array b left, so help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2_a3 = b[-2]\n        \n        # Deduce the elements of array a\n        a3 = sum_a - a1\n        a2 = sum_a2_a3 - a3\n        \n        # Append the result for the current test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print the results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum a_1 + a_2 + a_3\n        largest_sum = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the largest element\n        a_3 = largest_sum - a_1 - a_2\n        # Append the restored array [a_1, a_2, a_3] to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing an array b of 7 integers.\n\n    Returns:\n        A list of restored arrays a, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b corresponds to a_1\n        a_1 = b[0]\n        # The second smallest element in b corresponds to a_2\n        a_2 = b[1]\n        # The largest element in b corresponds to the sum a_1 + a_2 + a_3\n        sum_a = b[-1]\n        # Calculate a_3 using the formula: a_3 = sum_a - a_1 - a_2\n        a_3 = sum_a - a_1 - a_2\n        # Append the restored array [a_1, a_2, a_3] to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nimport typing\n\ndef restore_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to ensure it is in ascending order\n        b.sort()\n        \n        # Deduce a_1, a_2, and a_3\n        a_1 = b[0]  # The smallest element in b\n        a_2 = b[1]  # The second smallest element in b\n        a_3 = b[-1] - a_1 - a_2  # The largest element in b minus a_1 and a_2\n        \n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    \n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    t = int(data[0])\n    test_cases = [list(map(int, line.split())) for line in data[1:t+1]]\n    \n    results = restore_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a sorted array b of 7 integers.\n\n    Returns:\n        A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from the sorted array b\n        a_1 = b[0]  # The smallest element in b\n        a_2 = b[1]  # The second smallest element in b\n        a_3 = b[-1] - a_1 - a_2  # The largest element in b minus a_1 and a_2\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem, b is sorted and represents all non-empty subsequences of a.\n        # The smallest element in b is a_1, the second smallest is a_2, and the largest is a_1 + a_2 + a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Call the function and print the results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a1_a2_a3 = b[6]\n        # Calculate a_3\n        a_3 = sum_a1_a2_a3 - a_1 - a_2\n        # Append the restored array [a_1, a_2, a_3] to results\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n\n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' which contains\n    sums of all non-empty subsequences of 'a'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a = b[-1]\n        # Calculate a_3\n        a_3 = sum_a - a_1 - a_2\n        # Append the result for this test case\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Identify the smallest element in b, which corresponds to a_1\n        a_1 = b[0]\n        # Identify the second smallest element in b, which corresponds to a_2\n        a_2 = b[1]\n        # Identify the largest element in b, which corresponds to the sum a_1 + a_2 + a_3\n        largest_sum = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the largest element\n        a_3 = largest_sum - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array b of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem, the smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a_3 = b[6] - a_1 - a_2\n        # Append the restored array [a_1, a_2, a_3] to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure output format is strictly followed\n- Handle large integer values effectively\n- Optimize for scalability across multiple test cases\n- Provide clear documentation for the solution\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. By using these properties, we can efficiently reconstruct the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three positive integers.\n    \n    '7 numbers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these properties to deduce the three elements of array a:\n   - Let a1 be the smallest element in b.\n   - Let a3 be the largest element in b minus a1.\n   - Let a2 be the second largest element in b minus a3.\n5. Return the elements a1, a2, and a3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the largest is 7, and the second largest is 6. Thus, a = [1, 2, 4].\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of array b to deduce array a.\n", "requirement analysis:\nThe task is to deduce the original array a from the given array b, which contains the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring that the output is correctly formatted for each test case.\nrequirement pool:\n- Implement the algorithm to restore array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for performance with large inputs.\n- Provide documentation and comments for the code.\nWe will leverage the properties of the array b, which contains the sums of all non-empty subsequences of array a. Since a consists of 3 distinct positive numbers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. By subtracting the smallest and second smallest elements from the largest, we can deduce a_3. This approach ensures that we efficiently restore array a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'smallest', 'second smallest', 'largest'\n    Explanation: The smallest element in b corresponds to a_1, the second smallest to a_2, and the largest element in b corresponds to the sum a_1 + a_2 + a_3.\n\n# [degree adverb]\n    'smallest': Refers to the minimum value in array b, which is a_1.\n    'largest': Refers to the maximum value in array b, which is the sum of all elements in array a (a_1 + a_2 + a_3).\n\n# [code logic]\n    1. For each test case, identify the smallest element in b as a_1.\n    2. Identify the second smallest element in b as a_2.\n    3. Identify the largest element in b as the sum of a_1, a_2, and a_3.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n    5. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1 (a_1), the second smallest is also 1 (a_2), and the largest is 1000000000 (a_1 + a_2 + a_3). Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest is 5 (a_1 + a_2 + a_3). Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying the smallest, second smallest, and largest elements in b to deduce array a.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which contains the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is in the correct format.\nrequirement pool:\n- Efficiently compute array a from array b for each test case.\n- Ensure the solution handles the maximum constraints smoothly.\n- Provide clear and concise output for each test case.\n- Optimize for both time and space complexity.\n- Consider edge cases and ensure robustness.\nWe will leverage the properties of the array b, which contains the sums of all non-empty subsequences of array a. Since a consists of 3 distinct positive numbers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. By using these properties, we can efficiently determine the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n    4. Calculate a_3 using the formula: a_3 = (largest element) - a_1 - a_2.\n    5. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1 (a_1), the second smallest is also 1 (a_2), and the largest element is 1000000000 (a_1 + a_2 + a_3). Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are the same, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest element is 5 (a_1 + a_2 + a_3). Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to determine the values of a_1, a_2, and a_3 based on the properties of array b.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which contains the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Implement the main logic to deduce array a from array b.\n- Ensure the solution is optimized for large inputs.\n- Format the output correctly for each test case.\n- Handle edge cases and validate input constraints.\n- Provide documentation and comments for code clarity.\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these properties, we can deduce a_3 as the difference between the largest element and the sum of a_1 and a_2. This approach is efficient and handles large numbers smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers'\n    Explanation: The array a consists of exactly three positive integers.\n\n    '7 numbers'\n    Explanation: The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a_1.\n2. Identify the second smallest element in b, which corresponds to a_2.\n3. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n4. Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2.\n5. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array is [1, 1, 1].\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest is 7 (a_1 + a_2 + a_3). Thus, a_3 = 7 - (1 + 2) = 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical in pattern to the first edge case.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying a_1, a_2, and calculating a_3.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for multiple test cases\n- Handle large integer values accurately\n- Provide clear and correctly formatted output\n- Optimize resource usage for computation\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these observations, we can efficiently restore the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations except the empty set.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which is the sum of all elements in array a (a_1 + a_2 + a_3).\n    4. Deduce a_3 by subtracting a_1 and a_2 from the largest element in array b.\n    5. Return the array a as [a_1, a_2, a_3].\n\n# [edge case] \n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest element is 1000000000. Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are the same, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest element is 5. Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by using the properties of sorted array b to deduce array a.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide the correct output format. The constraints ensure that the solution is feasible within the given limits.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is clear and correct\n- Optimize for large integer values\n- Provide multiple valid solutions if possible\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. By subtracting the smallest and second smallest elements from the largest, we can find a_3. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\n    5. Return the values of a_1, a_2, and a_3.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are the same, so the smallest, second smallest, and largest sum are all equal.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers with repeated values, but the logic remains consistent.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest and second smallest are straightforward, and the largest sum gives us the third element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to handle all cases as it directly derives the values of a_1, a_2, and a_3 from the properties of array b.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring accurate restoration of array a.\nrequirement pool:\n- Develop a function to restore array a from array b\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize for large number inputs\n- Format output correctly for easy interpretation\n- Consider edge cases and ensure accuracy\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can efficiently restore the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A non-empty subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to a_1.\n    2. Identify the second smallest element in array b, which corresponds to a_2.\n    3. Identify the largest element in array b, which is the sum of a_1, a_2, and a_3.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n    5. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    Edge cases are not explicitly provided in the requirement, but we can consider:\n    \n    Case 1: b = [1, 1, 1, 2, 2, 2, 3]\n    Expected output: 1 1 1\n    Explanation: All elements are the same, so a_1 = a_2 = a_3 = 1.\n\n    Case 2: b = [1, 2, 3, 4, 5, 6, 7]\n    Expected output: 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the largest is 7. Thus, a_3 = 7 - (1 + 2) = 4.\n\n    Case 3: b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000]\n    Expected output: 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical for a_1 and a_2, and their sum is the largest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest two elements and using the largest element to deduce the third element will handle these cases correctly.\n", "requirement analysis:\nThe task requires determining the original array of three distinct positive integers from the given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and formatted output for each test case.\nrequirement pool:\n- Efficiently compute the original array from the subsequence sums\n- Handle up to 5000 test cases with large integer values\n- Ensure the output format is correct for each test case\n- Optimize for both speed and memory usage\n- Provide a user-friendly interface for input and output\nWe will use a simple mathematical approach to deduce the original array 'a' from the sorted array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', the smallest element in 'b' is 'a_1', the second smallest is 'a_2', and the largest element is the sum of all three elements 'a_1 + a_2 + a_3'. By subtracting the smallest and second smallest elements from the largest, we can find 'a_3'. This approach is efficient and handles large numbers smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array 'a' consists of exactly three elements, all of which are positive integers.\n\n    '7 numbers': The array 'b' consists of exactly seven elements, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to the smallest element in array 'a', denoted as 'a_1'.\n2. Identify the second smallest element in array 'b', which corresponds to the second smallest element in array 'a', denoted as 'a_2'.\n3. Identify the largest element in array 'b', which is the sum of all three elements of array 'a' (i.e., 'a_1 + a_2 + a_3').\n4. Calculate 'a_3' by subtracting 'a_1' and 'a_2' from the largest element in array 'b'.\n5. Return the elements 'a_1', 'a_2', and 'a_3'.\n\n# [edge case]\n    b = [1, 1, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 1, and the largest is 5. Subtracting 1 and 1 from 5 gives 3, but since we need distinct elements, we consider the next possible configuration.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 5. Subtracting 1 and 2 from 5 gives 2.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in 'a' is equal to the smallest element in 'b'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of subsequences and distinct elements.\n", "requirement analysis:\nThe problem requires determining the original array a from the given array b, which contains the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, with each test case providing 7 integers. The output must be three integers representing the original array a, and the solution should be robust enough to handle the constraints provided.\nrequirement pool:\n- Develop an efficient algorithm to determine array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Implement edge case handling for large integer values.\n- Provide clear and concise output for each test case.\n- Optimize the solution for readability and maintainability.\nWe will leverage the properties of the array b, which contains the sums of all non-empty subsequences of array a. Since a consists of 3 distinct positive numbers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. By subtracting the smallest and second smallest elements from the largest, we can determine a_3. This approach ensures that we efficiently determine the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three numbers, all greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to a_1.\n3. Identify the second smallest element in b, which corresponds to a_2.\n4. Identify the largest element in b, which corresponds to the sum a_1 + a_2 + a_3.\n5. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n6. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array is [1, 1, 1].\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest elements are 1 and 2, and the largest is 7. Thus, a_3 = 7 - (1 + 2) = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array is [1000000000, 1000000000, 1000000000].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements in b and calculating a_3 will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide output in the specified format. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these observations, we can efficiently restore the array a for each test case. We will use Python's built-in list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all three elements'\n    Explanation: The largest element in array b is the sum of all elements in array a. This can be implemented by identifying the largest number in b and using it to deduce the sum of a_1, a_2, and a_3.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to a_1, and the largest element corresponds to the sum of a_1, a_2, and a_3. This can be implemented by accessing the first and last elements of the sorted array b.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify a_1 as the smallest element in b (b[0]).\n    3. Identify a_2 as the second smallest element in b (b[1]).\n    4. Identify a_3 using the largest element in b (b[6]) minus a_1 and a_2.\n    5. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest two numbers are both 1, and the largest number is the sum of all three numbers, which is 1000000000. Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, second smallest is 2, and the largest element is the sum of all three numbers, which is 5. Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases correctly by using the properties of sorted array b to deduce array a.\n"], "scores": [], "pass_results": [false, true, true, true, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 150, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 117}
