{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "prompt": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "repair_prompt": ["Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering. Her skills in engineering are exceptionally advanced and impressive. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering, thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. At each of the following m days, one train will be added, or one train will be removed, and in the beginning, there are no trains. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Calculate the day when the train will first enter maintenance\n            maintenance_start_day = day + x_i\n            # Calculate the cycle length\n            cycle_length = x_i + y_i\n            # Add the train to the state dictionary\n            train_state[k] = (maintenance_start_day, cycle_length)\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the state dictionary\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for start_day, cycle in train_state.values():\n            if (day - start_day) % cycle < y_i:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the work cycle and maintenance cycle for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple\n            containing the operation type (1 for add, 2 for remove) and the train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_count = []  # List to store the number of trains in maintenance for each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, model = operations[day]\n        model -= 1  # Convert to zero-based index\n\n        if op == 1:  # Add train\n            work_cycle, maintenance_cycle = train_cycles[model]\n            # Set the initial state to working and calculate when it will go into maintenance\n            train_state[model] = (day + work_cycle, maintenance_cycle)\n        elif op == 2:  # Remove train\n            if model in train_state:\n                del train_state[model]\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_today = 0\n        for start_day, maintenance_cycle in train_state.values():\n            if day >= start_day and (day - start_day) % (maintenance_cycle + train_cycles[model][0]) < maintenance_cycle:\n                maintenance_today += 1\n\n        maintenance_count.append(maintenance_today)\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the status of each train model\n    train_status = [None] * (n + 1)  # None means no train of this model is present\n\n    # Result list to store the number of trains in maintenance for each day\n    maintenance_counts = []\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Set the initial status of the train\n            train_status[k] = (day, x_i, y_i)  # (start_day, work_days, maintenance_days)\n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n\n        # Count trains in maintenance\n        maintenance_count = 0\n        for status in train_status:\n            if status is not None:\n                start_day, work_days, maintenance_days = status\n                # Calculate the cycle position\n                cycle_length = work_days + maintenance_days\n                days_since_start = day - start_day\n                cycle_position = days_since_start % cycle_length\n\n                # Check if the train is in maintenance\n                if cycle_position >= work_days:\n                    maintenance_count += 1\n\n        # Append the count for the current day\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_counts = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train\n            # Set initial state to working and start counting its cycle\n            train_state[k] = {'day_in_cycle': 0, 'in_maintenance': False}\n        elif op == 2:  # Remove train\n            # Ensure it is not counted as in maintenance on the removal day\n            if k in train_state:\n                del train_state[k]\n\n        # Update the state of all trains\n        for model, state in train_state.items():\n            # Increment the day count for each train\n            state['day_in_cycle'] += 1\n\n            # Check if a train transitions from working to maintenance or vice versa\n            if state['in_maintenance']:\n                if state['day_in_cycle'] > y_i:\n                    # Transition from maintenance to working\n                    state['day_in_cycle'] = 1\n                    state['in_maintenance'] = False\n            else:\n                if state['day_in_cycle'] > x_i:\n                    # Transition from working to maintenance\n                    state['day_in_cycle'] = 1\n                    state['in_maintenance'] = True\n\n        # Count how many trains are in maintenance and store this count for the day\n        maintenance_counts[day] = sum(1 for state in train_state.values() if state['in_maintenance'])\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the dictionary to track the status of each train model\n    train_status = {}\n    \n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_count = [0] * m\n    \n    # Iterate through each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n        \n        if op == 1:  # Add train\n            # Calculate the day when the train will first enter maintenance\n            maintenance_start_day = day + x_i\n            # Calculate the day when the train will first exit maintenance\n            maintenance_end_day = maintenance_start_day + y_i\n            \n            # Update the train status with its working and maintenance schedule\n            train_status[k] = (maintenance_start_day, maintenance_end_day)\n        \n        elif op == 2:  # Remove train\n            # Remove the train from the status dictionary\n            if k in train_status:\n                del train_status[k]\n        \n        # Count the number of trains in maintenance for the current day\n        for start, end in train_status.values():\n            if start <= day < end:\n                maintenance_count[day] += 1\n    \n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add/remove).\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Dictionary to track the status of each train model\n    train_status = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train\n            train_status[k] = {'work_days': x_i, 'maintenance_days': y_i, 'current_day': 0}\n        elif op == 2:  # Remove train\n            if k in train_status:\n                del train_status[k]\n\n        # Update the status of each train\n        maintenance_count = 0\n        for model, status in train_status.items():\n            status['current_day'] += 1\n            if status['current_day'] > status['work_days']:\n                maintenance_count += 1\n                if status['current_day'] > status['work_days'] + status['maintenance_days']:\n                    status['current_day'] = 1  # Reset cycle\n\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains working days and maintenance days for a train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple containing operation type and train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the dictionary to track the state of each train model\n    train_state = {}\n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_counts = [0] * m\n\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:\n            # Add train model k\n            x_i, y_i = train_cycles[k - 1]\n            train_state[k] = {'cycle_position': 0, 'working_days': x_i, 'maintenance_days': y_i, 'in_maintenance': False}\n        elif op == 2:\n            # Remove train model k\n            if k in train_state:\n                del train_state[k]\n\n        # Update the state of each train model\n        for model in train_state:\n            train = train_state[model]\n            if train['in_maintenance']:\n                train['cycle_position'] += 1\n                if train['cycle_position'] >= train['maintenance_days']:\n                    train['cycle_position'] = 0\n                    train['in_maintenance'] = False\n            else:\n                train['cycle_position'] += 1\n                if train['cycle_position'] >= train['working_days']:\n                    train['cycle_position'] = 0\n                    train['in_maintenance'] = True\n\n        # Count the number of trains in maintenance\n        maintenance_counts[day] = sum(1 for train in train_state.values() if train['in_maintenance'])\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef manage_trains(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Manage train models and calculate the number of trains in maintenance each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = [None] * (n + 1)  # None means no train of that model is present\n    maintenance_count = [0] * m  # To store the number of trains in maintenance each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Calculate the day it will enter maintenance\n            maintenance_start_day = day + x_i\n            train_state[k] = (day, maintenance_start_day, x_i, y_i)\n        elif op == 2:  # Remove train of model k\n            train_state[k] = None\n\n        # Calculate the number of trains in maintenance for the current day\n        for model in range(1, n + 1):\n            if train_state[model] is not None:\n                start_day, maintenance_start_day, x_i, y_i = train_state[model]\n                # Check if the current day is within a maintenance period\n                if maintenance_start_day <= day < maintenance_start_day + y_i:\n                    maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_models = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = manage_trains(n, m, train_models, operations)\n    for count in result:\n        print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the status dictionary to track the operational status of each train model\n    train_status = {}\n    \n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_counts = [0] * m\n    \n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n        \n        if op == 1:  # Add train\n            # Calculate the operational and maintenance schedule\n            train_status[k] = (day, x_i, y_i)\n        elif op == 2:  # Remove train\n            if k in train_status:\n                del train_status[k]\n        \n        # Count the number of trains in maintenance for the current day\n        maintenance_count = 0\n        for start_day, x, y in train_status.values():\n            # Calculate the cycle length\n            cycle_length = x + y\n            # Calculate the number of days since the train was added\n            days_since_added = day - start_day\n            # Determine if the train is in maintenance\n            if days_since_added >= x and (days_since_added % cycle_length) < y:\n                maintenance_count += 1\n        \n        # Store the maintenance count for the current day\n        maintenance_counts[day] = maintenance_count\n    \n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of days.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the work and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple\n            containing the operation type (1 for add, 2 for remove) and the train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Dictionary to track the state of each train model\n    train_state = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        k -= 1  # Convert to zero-based index\n\n        if op == 1:\n            # Add train of model k\n            x_i, y_i = train_cycles[k]\n            train_state[k] = {'work_days': x_i, 'maintenance_days': y_i, 'in_maintenance': False}\n        elif op == 2:\n            # Remove train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Update the state of each train\n        maintenance_count = 0\n        for model, state in train_state.items():\n            if state['in_maintenance']:\n                state['maintenance_days'] -= 1\n                if state['maintenance_days'] == 0:\n                    # Switch to working cycle\n                    state['work_days'] = train_cycles[model][0]\n                    state['in_maintenance'] = False\n            else:\n                state['work_days'] -= 1\n                if state['work_days'] == 0:\n                    # Switch to maintenance cycle\n                    state['maintenance_days'] = train_cycles[model][1]\n                    state['in_maintenance'] = True\n\n            # Count trains in maintenance\n            if state['in_maintenance']:\n                maintenance_count += 1\n\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n"], "plans": ["requirement analysis:\nThe requirements focus on calculating the number of trains in maintenance each day based on their operational and maintenance cycles. The solution must handle up to 200,000 operations efficiently and ensure accurate tracking of train states.\nrequirement pool:\n- Implement efficient data structures to track train states.\n- Develop algorithms to calculate daily maintenance counts.\n- Ensure integration with existing train management systems.\n- Provide detailed documentation for maintainability.\n- Optimize for performance to handle large datasets.\nWe will use a dictionary to track the state of each train model, whether it is in operation or maintenance. We will also use a list to store the number of trains in maintenance for each day. The algorithm will efficiently update the state of trains based on the operations provided, ensuring that the maintenance count is accurately calculated for each day.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific operational and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced or repaired.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance. These values dictate the cycle of operation and maintenance for each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to keep track of the state (operational or maintenance) of each train model.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation (add or remove), update the state of the train model in the dictionary.\n4. Calculate the number of trains in maintenance for each day based on the current state of all train models.\n5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it is operational on the first day, so no trains are in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed immediately, so no trains are in maintenance on either day.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 2\n           2 2\n    Output: 0\n            0\n            0\n    Explanation: A train is added and removed, and another train is added but remains operational, so no trains are in maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these scenarios by updating the state of each train model based on the operations provided.\n", "requirement analysis:\nThe solution needs to efficiently track the maintenance status of trains based on their operational and maintenance cycles. It should handle up to 200,000 operations and integrate seamlessly with existing systems. The focus is on providing accurate daily counts of trains in maintenance.\nrequirement pool:\n- Implement efficient tracking of train maintenance cycles.\n- Ensure accurate daily reporting of maintenance counts.\n- Integrate with existing train management systems.\n- Optimize performance for handling large datasets.\n- Provide user-friendly interface for data visualization.\nWe will implement a function to track the maintenance status of trains using a dictionary to store the state of each train model. We will iterate over the days, updating the state of each train model based on the operations (add or remove) and their respective work and maintenance cycles. The function will efficiently handle up to 200,000 operations by using a dictionary for quick access and updates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the requirement, maintenance refers to the period when a train is not operational and is being serviced. The task is to calculate how many trains are in maintenance on each day.\n\n    'work cycle'\n    Explanation: This refers to the period when a train is operational before it goes into maintenance. Each train model has a specific work cycle duration.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to keep track of the state of each train model (whether it is working or in maintenance).\n    2. Iterate over the days and perform operations based on the input:\n        - If a train is added, set its initial state to working and calculate when it will go into maintenance.\n        - If a train is removed, ensure it is not counted as in maintenance.\n    3. For each day, update the count of trains in maintenance based on their current state.\n    4. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: The train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: Both trains are added and removed on consecutive days, so neither enters maintenance.\n\n    Input: 3 3\n           1 1\n           1 1\n           1 1\n           1 2\n           2 2\n    Output: 0\n    Explanation: Train model 2 is added and removed on consecutive days, so it never enters maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking the state of each train model and updating based on operations will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of trains, ensuring no duplication of models. It must accurately calculate the number of trains in maintenance each day, considering the work and maintenance cycles of each train model.\nrequirement pool:\n- Implement train addition and removal logic\n- Calculate daily maintenance count\n- Ensure no duplicate train models in the system\n- Optimize performance for large input sizes\n- Integrate with existing train management systems\nWe will use a simple list to track the status of each train model, whether it is in maintenance or not. We will iterate through the days, updating the status of each train model based on its work and maintenance cycle. The use of a list allows for efficient updates and checks, ensuring that the solution can handle large input sizes effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model has its own work and maintenance cycle.\n\n    'work and maintenance cycle'\n    Explanation: Each train model has a specific number of days it works and a specific number of days it is in maintenance. This cycle repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be no more than one train of each model at any given time in the department.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works, and y_i represents the number of days it is in maintenance. These values are used to determine the cycle of each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a list to track the status of each train model (whether it is working or in maintenance).\n    2. Iterate through each day, processing the operations (add or remove trains).\n    3. For each train added, calculate its work and maintenance cycle based on x_i and y_i.\n    4. Update the list to reflect the current status of each train model.\n    5. On each day, count the number of trains in maintenance and store the result.\n    6. Output the count for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n           Output: 0\n    Explanation: A train is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 1\n           1 2\n           1 3\n           Output: 0\n    Explanation: Trains are added but none are in maintenance due to their cycles.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking the status of each train model and counting maintenance days will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently manage the addition and removal of trains while keeping track of their maintenance schedules. It should handle up to 200,000 operations and provide accurate daily reports on the number of trains in maintenance. The solution should be scalable and integrate seamlessly with existing systems.\nrequirement pool:\n- Efficiently handle up to 200,000 operations.\n- Provide accurate daily maintenance reports.\n- Ensure seamless integration with existing systems.\n- Support real-time updates for train status.\n- Offer a user-friendly interface for train managers.\nWe will implement a function to manage the train maintenance schedule using a dictionary to track the state of each train model. The function will process each operation (add or remove) and update the maintenance status accordingly. We will use a list to store the number of trains in maintenance for each day. This approach ensures efficient handling of up to 200,000 operations by leveraging dictionary operations for quick access and updates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages, with each model having specific work and maintenance cycles.\n\n    'work and maintenance cycle'\n    Explanation: Each train model has a defined period during which it operates (works) and a period during which it undergoes maintenance. This cycle repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: 'x_i days' refers to the number of days a train works before going into maintenance, and 'y_i days' refers to the number of days it remains in maintenance. These are used to calculate the train's status over time.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model, including its current day in the cycle and whether it is in maintenance.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation (add or remove):\n   - If adding a train, set its initial state to working and start counting its cycle.\n   - If removing a train, ensure it is not counted as in maintenance on the removal day.\n4. For each day, update the state of all trains:\n   - Increment the day count for each train.\n   - Check if a train transitions from working to maintenance or vice versa based on its cycle.\n   - Count how many trains are in maintenance and store this count for the day.\n5. Output the list of maintenance counts for each day.\n\n# [edge case]\n    1. Input: 1 1\n       1 1\n       1 1\n       Output: 0\n       Explanation: A single train is added and works for one day, so it is not in maintenance on the first day.\n\n    2. Input: 2 2\n       1 1\n       1 1\n       1 1\n       2 1\n       Output: 0\n       Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    3. Input: 3 3\n       2 2\n       2 2\n       1 1\n       1 2\n       1 3\n       Output: 0\n       Explanation: All trains are added on the same day and are initially working, so none are in maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's cycle and updating their states daily will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the status of trains, ensuring that the addition and removal of trains are accurately reflected in the maintenance count. The solution should handle up to 200,000 operations and provide real-time updates on train statuses.\nrequirement pool:\n- Implement train addition and removal functionality.\n- Calculate daily maintenance count accurately.\n- Optimize performance for large input sizes.\n- Ensure no duplicate train models in the department.\n- Provide user-friendly output format.\nWe will implement a function to manage train addition and removal operations efficiently using a dictionary to track the status of each train model. We will use a list to store the maintenance count for each day. The function will iterate through the operations, updating the status of trains and calculating the maintenance count based on the given x_i and y_i values. The solution will handle large input sizes by ensuring operations are performed in constant time using dictionary lookups.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model': Refers to the different types of trains, each with unique working and maintenance cycles.\n    'maintenance': The period during which a train is not operational and is being serviced.\n    'operation': Refers to the addition or removal of a train on a given day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days': The number of days a train works before going into maintenance.\n    'y_i days': The number of days a train is in maintenance before it can work again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the status (working or maintenance) of each train model.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation (add or remove):\n   - If adding a train, calculate its working and maintenance schedule based on x_i and y_i.\n   - Update the dictionary to reflect the train's current status.\n   - If removing a train, update the dictionary to remove its entry.\n4. For each day, count the number of trains currently in maintenance and store this in the list.\n5. Output the maintenance count for each day.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: A single train is added and works for 1 day, so no train is in maintenance.\n\n    2. Input: 2 2\n             1 1\n             1 1\n             1 1\n             2 1\n       Output: 0\n               0\n       Explanation: A train is added and removed on consecutive days, so no train is in maintenance.\n\n    3. Input: 3 3\n             2 2\n             2 2\n             1 1\n             1 2\n             2 2\n       Output: 0\n               0\n               0\n       Explanation: Trains are added and removed such that no train enters maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train status and updating based on operations will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that train models can be added or removed without errors. It should accurately track the maintenance schedule of each train model and provide daily counts of trains in maintenance. The solution must be scalable and integrate seamlessly with existing systems.\nrequirement pool:\n- Efficiently handle up to 200,000 operations.\n- Accurately track maintenance schedules for each train model.\n- Provide daily counts of trains in maintenance.\n- Ensure seamless integration with existing systems.\n- User-friendly interface for train model management.\nWe will use a dictionary to keep track of the trains currently in operation and their maintenance schedules. For each day, we will update the status of each train and count how many are in maintenance. This approach ensures that we efficiently handle up to 200,000 operations by using constant time operations for adding and removing trains, and linear time operations for updating the maintenance status.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the requirement, maintenance refers to the period when a train is not operational and is being serviced. The task is to calculate how many trains are in maintenance on each day.\n\n    'model'\n    Explanation: A model refers to a specific type of train. Each model can have different working and maintenance schedules.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance. This cycle repeats until the train is removed.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to keep track of trains and their schedules.\n    2. For each operation (add or remove), update the dictionary accordingly.\n    3. For each day, iterate through the dictionary to update the status of each train.\n    4. Count how many trains are in maintenance and store the result for that day.\n    5. Print the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n           Output: 0\n    Explanation: A train is added and removed on consecutive days, so no train enters maintenance.\n\n    Input: 3 3\n           10 10\n           10 10\n           1 1\n           1 2\n           Output: 0\n               0\n               Explanation: Both trains are added but neither enters maintenance within the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the status of trains and counting those in maintenance will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to handle up to 200,000 operations efficiently, ensuring that train addition and removal are processed correctly. The maintenance cycle must be accurately tracked for each train model, and the output should reflect the number of trains in maintenance each day.\nrequirement pool:\n- Implement efficient data structures to manage train states and maintenance cycles.\n- Ensure accurate calculation of maintenance periods for each train model.\n- Optimize performance to handle the maximum input size within time constraints.\n- Develop a user-friendly interface for input and output operations.\n- Integrate predictive analytics for maintenance scheduling.\nWe will use a dictionary to track the state of each train model, including its working and maintenance cycles. A list will be used to store the number of trains in maintenance for each day. The approach will efficiently handle up to 200,000 operations using simple data structures and logic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model': Refers to the different types of trains, each with unique working and maintenance cycles.\n    'working days (x_i)': The number of consecutive days a train model is operational.\n    'maintenance days (y_i)': The number of consecutive days a train model is under maintenance.\n    'operation (op)': Indicates whether a train is added (op=1) or removed (op=2).\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Ensures that there is only one train per model at any time.\n    'x_i days': Specifies the duration a train is operational.\n    'y_i days': Specifies the duration a train is in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model, including its current cycle position and whether it is in maintenance or working.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation:\n   - If op=1, add the train model to the dictionary with its initial state (working).\n   - If op=2, remove the train model from the dictionary.\n   - Update the state of each train model in the dictionary based on its cycle (working or maintenance).\n   - Count and record the number of trains currently in maintenance.\n4. Output the list of maintenance counts for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so it is never in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           2 2\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by updating and checking the state of each train model daily.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of train models, ensuring accurate maintenance scheduling. It should handle up to 200,000 operations and provide daily maintenance counts without overlap in train model operations.\nrequirement pool:\n- Implement train addition and removal functionality.\n- Calculate daily maintenance counts accurately.\n- Ensure no overlap in train model operations.\n- Optimize maintenance cycle tracking.\n- Provide user-friendly interface for train management.\nWe will implement a function to manage the train models and their maintenance schedules. The function will track the addition and removal of train models, and calculate the number of trains in maintenance each day. We will use a dictionary to store the state of each train model and a list to keep track of the maintenance schedule. The function will efficiently handle up to 200,000 operations by updating the state of each train model and recalculating the maintenance count for each day.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific working and maintenance schedules.\n\n    'maintenance schedule'\n    Explanation: The cycle of days a train is operational and the days it is under maintenance. This schedule repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model (whether it's added or removed).\n2. For each operation (add or remove), update the state of the train model.\n3. Maintain a list to track the maintenance schedule for each train model.\n4. For each day, calculate the number of trains in maintenance by checking their schedules.\n5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, then goes into maintenance for 1 day. On the first day, it is working, so no trains are in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: On the first day, a train is added and works, so no trains are in maintenance. On the second day, it is removed, so still no trains are in maintenance.\n\n    Input: 2 3\n           2 2\n           2 2\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Both trains are added and work for two days before going into maintenance. They are removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train states and schedules will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of train models, ensuring no duplicates and accurate maintenance scheduling. It should handle up to 200,000 operations and provide daily maintenance counts.\nrequirement pool:\n- Implement train addition and removal logic.\n- Calculate daily maintenance counts accurately.\n- Ensure no duplicate train models are in operation.\n- Optimize for large input sizes up to 200,000 operations.\n- Provide user-friendly output format.\nWe will use a dictionary to track the status of each train model, whether it is in operation or maintenance. We will also use a list to store the number of trains in maintenance for each day. The approach will efficiently handle up to 200,000 operations by updating the status of trains based on the input operations and calculating the maintenance count accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model': Refers to the different types of trains, each with unique operational and maintenance cycles.\n    'maintenance': The period during which a train is not operational and is being serviced.\n    'operation': The period during which a train is actively running.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days': The number of days a train is operational before going into maintenance.\n    'y_i days': The number of days a train is in maintenance before becoming operational again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the status (operational or maintenance) of each train model.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation (add or remove a train):\n   - If adding a train, calculate its operational and maintenance schedule.\n   - Update the dictionary with the train's current status.\n   - If removing a train, update the dictionary to reflect its removal.\n4. For each day, count the number of trains in maintenance and store it in the list.\n5. Output the list of maintenance counts for each day.\n\n# [edge case]\n    1. Input: 1 1\n             1 1\n             1 1\n       Output: 0\n       Explanation: A single train is added and is operational on the first day, so no trains are in maintenance.\n\n    2. Input: 2 2\n             1 1\n             1 1\n             1 1\n             2 1\n       Output: 0\n       Explanation: A train is added and then removed on consecutive days, so no trains are in maintenance.\n\n    3. Input: 3 3\n             2 2\n             2 2\n             1 1\n             1 2\n             2 2\n       Output: 0\n       Explanation: Trains are added and removed such that no train enters maintenance during the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the status of trains and counting those in maintenance will naturally handle these scenarios.\n", "requirement analysis:\nThe solution needs to efficiently track the maintenance schedule of trains based on their operational and maintenance cycles. It should handle up to 200,000 operations and integrate seamlessly with existing systems. The focus is on providing accurate daily counts of trains in maintenance.\nrequirement pool:\n- Implement efficient tracking of train maintenance cycles.\n- Ensure accurate daily reporting of maintenance counts.\n- Integrate with existing train management systems.\n- Provide a user-friendly interface for train managers.\n- Offer analytics and reporting features for maintenance trends.\nWe will implement a function to track the maintenance schedule of trains using a dictionary to store the state of each train model. The function will iterate over the days, updating the state of each train model based on the operations (add or remove) and their respective work and maintenance cycles. We will use efficient data structures to handle up to 200,000 operations and ensure accurate daily reporting of maintenance counts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages, with each model having specific work and maintenance cycles.\n\n    'work and maintenance cycles'\n    Explanation: Each train model has a defined number of days it works (x_i) and a number of days it is in maintenance (y_i). These cycles repeat until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5'\n    Explanation: The number of train models (n) and the number of days (m) are both between 1 and 200,000.\n\n    '1 \u2264 x_i,y_i \u2264 10^9'\n    Explanation: The work (x_i) and maintenance (y_i) days for each train model are between 1 and 1 billion.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model, including its current cycle position and whether it is in maintenance.\n2. Iterate over each day, processing the operations:\n   - If a train is added, set its initial state to working for x_i days.\n   - If a train is removed, remove its entry from the dictionary.\n3. For each day, update the cycle position of each active train:\n   - If a train is in its working cycle, decrement its working days.\n   - If a train is in its maintenance cycle, decrement its maintenance days.\n   - Switch between working and maintenance cycles as needed.\n4. Count the number of trains in maintenance at the end of each day and store the result.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no train enters maintenance.\n\n    Input: 3 3\n           2 2\n           2 2\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where trains are added and removed without entering maintenance.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 11, "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "expand_one2two", "parent_index": 11}
