{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it, and you are given n days from Petya's live to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on consecutive days, it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it, and you are given n days from Petya's live to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on consecutive days, it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on consecutive days, it grows by 5 centimeters instead of 1. This increase in height on consecutive days is significant because it could make the flower taller.\n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it, and you are given n days from Petya's live to determine what happened with his flower in the end. The flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered on consecutive days, it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall, so what is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = 0  # Track consecutive days watered\n        consecutive_days_not_watered = 0  # Track consecutive days not watered\n        \n        for day in watering_pattern:\n            if day == 1:\n                consecutive_days_not_watered = 0  # Reset non-watering days counter\n                consecutive_days_watered += 1\n                if consecutive_days_watered > 1:\n                    height += 5  # Grow by 5 cm for consecutive watering\n                else:\n                    height += 1  # Grow by 1 cm for single day watering\n            else:\n                consecutive_days_watered = 0  # Reset watering days counter\n                consecutive_days_not_watered += 1\n                if consecutive_days_not_watered == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Call the function and get results\n    results = calculate_flower_height(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef simulate_flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over n days based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_not_watered = 0\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_not_watered = 0  # Reset consecutive non-watering days\n            else:\n                consecutive_days_not_watered += 1\n                if consecutive_days_not_watered == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = simulate_flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        previous_day_watered = False\n        \n        for day in days:\n            if day == 1:\n                if previous_day_watered:\n                    height += 4  # Additional 4 cm because it already grew by 1 cm\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                previous_day_watered = False\n            \n            if consecutive_unwatered_days == 2:\n                height = -1\n                break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth_simulation(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower based on watering patterns over multiple test cases.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing watering patterns over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i, watered in enumerate(days):\n            if watered == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5  # Growth due to consecutive watering\n                else:\n                    height += 1  # Growth due to single day watering\n                consecutive_days_without_water = 0  # Reset counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = flower_growth_simulation(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_pattern: List[int]) -> int:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        n (int): The number of days.\n        watering_pattern (List[int]): A list indicating whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        int: The final height of the flower or -1 if the flower dies.\n    \"\"\"\n    height = 1  # Initial height of the flower\n    previous_day_watered = False  # Track if the previous day was watered\n\n    for day in range(n):\n        if watering_pattern[day] == 1:\n            if previous_day_watered:\n                height += 5  # Grow by 5 cm if watered on consecutive days\n            else:\n                height += 1  # Grow by 1 cm if watered on a single day\n            previous_day_watered = True\n        else:\n            if not previous_day_watered:\n                return -1  # Flower dies if not watered for two consecutive days\n            previous_day_watered = False\n\n    return height\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        result = calculate_flower_height(n, watering_pattern)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the height of the flower after n days based on watering patterns.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = False  # Flag to track consecutive watering days\n        flower_died = False  # Flag to track if the flower dies\n\n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if consecutive_days_watered:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_days_watered = True\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    flower_died = True\n                    break\n                consecutive_days_watered = False\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    results = calculate_flower_height(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        consecutive_days_with_water = 0\n        \n        for day in watering_pattern:\n            if day == 1:\n                consecutive_days_without_water = 0\n                consecutive_days_with_water += 1\n                if consecutive_days_with_water > 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                consecutive_days_with_water = 0\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List containing test cases, each with n days and watering pattern.\n\n    Returns:\n        List[int]: List of final heights for each test case or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = case[0]\n        watering_pattern = case[1:]\n        \n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        consecutive_days_with_water = 0\n        \n        for day in watering_pattern:\n            if day == 1:\n                consecutive_days_without_water = 0\n                consecutive_days_with_water += 1\n                if consecutive_days_with_water > 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                consecutive_days_with_water = 0\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append([n] + watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset consecutive days without water\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Calculate results\n    results = calculate_flower_height(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower died\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered non-consecutively\n                previous_day_watered = True\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    flower_died = True  # Flower dies if not watered for two consecutive days\n                    break\n                previous_day_watered = False\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Calculate results\n    results = calculate_flower_height(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key conditions include growth increments based on consecutive watering and the flower dying if not watered for two consecutive days. The solution must handle multiple test cases and provide accurate results for each scenario.\nrequirement pool:\n- Implement the flower growth logic based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the solution for performance with large input sizes.\n- Consider edge cases such as consecutive days without watering.\nWe will implement a function to simulate the growth of the flower based on the given watering pattern for each test case. The function will iterate through the days, updating the flower's height according to the rules provided. We will use a simple loop and conditionals to handle the growth logic and check for consecutive days without watering. The solution will efficiently handle multiple test cases by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on whether it is watered or not over a series of days. The growth is determined by specific rules regarding watering patterns.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is watered or not. It affects the growth rate and survival of the flower.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height for each day with a 1.\n    \n    'grows by 5 centimeters': If watered on consecutive days, it grows by 5 cm instead of 1. Implemented by checking consecutive ones and adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. For each test case, iterate through the list of days:\n   - If two consecutive days are not watered (two zeros in a row), set height to -1 and break out of the loop.\n   - If a day is watered (1), check if the previous day was also watered:\n     - If yes, increase height by 5 cm.\n     - If no, increase height by 1 cm.\n3. After processing all days, store the result for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: 1\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 2\n    Input: 3\n           1 1 0\n    Output: 6\n    Explanation: The flower is watered on two consecutive days, growing by 5 cm, then not watered on the third day.\n\n    Test case: 3\n    Input: 4\n           0 1 0 1\n    Output: 3\n    Explanation: The flower is watered on non-consecutive days, growing by 1 cm each time.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and adjusts growth accordingly.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The simulation must handle multiple test cases and provide the final height of the flower or indicate if it dies. The solution should efficiently process up to 100 test cases with each having up to 100 days of data.\nrequirement pool:\n- Implement the flower growth simulation logic.\n- Ensure the program can handle multiple test cases.\n- Optimize the solution for performance with large inputs.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth over n days based on the watering pattern provided. The function will iterate through each test case, updating the flower's height according to the rules specified. We will use simple list operations to track the watering pattern and calculate the height efficiently. The solution will handle multiple test cases and provide the correct output for each.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not, with specific rules for consecutive watering and non-watering days.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (1) or not watered (0), which affects the flower's growth or death.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking for two consecutive zeros in the watering pattern.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height when a 1 is encountered.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1. Implemented by checking for consecutive ones and adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day's watering status:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered, check if it was also watered the previous day:\n     - If yes, increase the height by 5 cm.\n     - If no, increase the height by 1 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: 2\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days and does not grow on the third day.\n\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered but does not die because it's only one day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and handles them appropriately by setting the height to -1.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on specific watering rules over a given number of days. The solution must handle multiple test cases and provide accurate results for each scenario, including the possibility of the flower dying.\nrequirement pool:\n- Implement the flower growth algorithm based on watering rules.\n- Handle multiple test cases efficiently.\n- Ensure the output format is clear and concise.\n- Optimize the code for performance with large input sizes.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the given rules. The function will iterate over the days, updating the flower's height according to whether it was watered or not, and checking for consecutive days without watering to determine if the flower dies. We will use basic Python data structures like lists to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on specific watering conditions over a series of days.\n\n    'watering conditions'\n    Explanation: The flower's growth or death is determined by whether it is watered on consecutive days or not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. This can be implemented by adding 1 to the height for each day with a 1.\n    \n    'grows by 5 centimeters': If watered on consecutive days, it grows by 5 cm instead of 1. This can be implemented by checking for consecutive ones and adding 5 to the height for each pair of consecutive ones.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate over each test case:\n   - For each day, check if the flower is watered (a_i = 1) or not (a_i = 0).\n   - If watered, check if the previous day was also watered to apply the 5 cm growth rule.\n   - If not watered, check if the previous day was also not watered to determine if the flower dies.\n3. If the flower dies, set the height to -1 for that test case.\n4. Output the final height for each test case.\n\n# [edge case]\n    Test case: 2\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days and does not grow on the third day.\n\n    Test case: 4\n    Input: 0 1 0 1\n    Output: 3\n    Explanation: The flower grows by 1 cm on the second and fourth days, totaling a height of 3 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the flower dies due to two consecutive days without watering.\n    \n```python\ndef simulate_flower_growth(test_cases):\n    results = []\n    for n, days in test_cases:\n        height = 1\n        consecutive_unwatered_days = 0\n        previous_day_watered = False\n        \n        for day in days:\n            if day == 1:\n                if previous_day_watered:\n                    height += 4  # Additional 4 cm because it already grew by 1 cm\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                previous_day_watered = False\n            \n            if consecutive_unwatered_days == 2:\n                height = -1\n                break\n        \n        results.append(height)\n    \n    return results\n```\nThis code handles the edge cases by tracking consecutive unwatered days and adjusting growth based on whether the previous day was watered.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The simulation must handle multiple test cases and determine if the flower dies due to consecutive days without water. The output should clearly indicate the final height or if the flower has died.\nrequirement pool:\n- Implement the flower growth simulation logic.\n- Handle multiple test cases efficiently.\n- Ensure the output format is clear and correct.\n- Optimize the code for performance with up to 100 test cases.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to simulate the growth of a flower based on the given watering pattern over multiple test cases. The function will iterate through each test case, track the growth of the flower, and determine if it dies due to consecutive days without water. We will use simple control structures to handle the logic and ensure the output format is correct. The function will be efficient enough to handle up to 100 test cases as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and does not grow if not watered. If not watered for two consecutive days, it dies.\n\n    'consecutive days'\n    Explanation: This refers to days that follow one another without interruption. In this context, it affects the growth rate of the flower.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This means two consecutive days. In code, this can be checked by iterating through the list and checking if two consecutive elements are 0.\n    \n    'grows by 1 centimeter': This indicates an increase in height by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height variable when a 1 is encountered.\n    \n    'grows by 5 centimeters': This indicates an increase in height by 5 cm when watered on consecutive days. In code, this can be implemented by adding 5 to the height variable when two consecutive 1s are encountered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is watered (a_i = 1), check if the previous day was also watered:\n     - If yes, increase the height by 5 cm.\n     - If no, increase the height by 1 cm.\n   - If the flower is not watered (a_i = 0), check if the previous day was also not watered:\n     - If yes, set the height to -1 (flower dies) and break out of the loop.\n3. After processing all days, store the final height for each test case.\n4. Print the results for all test cases.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it does not die because it needs two consecutive days without water to die.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 12\n    Explanation: The flower grows by 5 cm on the second day (consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without water and handles them appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately track the growth and determine if the flower dies due to consecutive days without watering. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear and concise output for each test case.\n- Handle edge cases such as consecutive days without watering.\n- Optimize the code for performance with large input sizes.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use simple list operations to track the watering pattern and calculate the height efficiently. The function will handle multiple test cases and edge cases such as consecutive days without watering, which results in the flower dying. We will use Python's built-in capabilities without any additional libraries, as the problem is straightforward and does not require complex data structures or algorithms.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules, and the task is to determine its final height or if it dies.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    'grows by 1 centimeter': The flower grows by 1 cm if watered on a single day.\n    'grows by 5 centimeters': The flower grows by 5 cm if watered on consecutive days.\n\n# [degree adverb]\n    'taller': Refers to the flower's height increasing significantly when watered on consecutive days.\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through the list of days:\n        - If a day is watered (a_i = 1), check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n        - If a day is not watered (a_i = 0), check if the previous day was also not watered:\n            - If yes, the flower dies, set height to -1 and break the loop.\n            - If no, continue without changing height.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two consecutive days, doesn't grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The key challenge is handling consecutive days without watering, which results in the flower dying. The solution must efficiently process multiple test cases and provide accurate results.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Develop edge case handling for consecutive days without watering.\n- Optimize the code for fast processing of input data.\n- Provide detailed output explanation for each test case.\nWe will implement a function that processes multiple test cases to determine the height of a flower after n days based on watering patterns. The function will handle edge cases where the flower dies due to consecutive days without watering. We will use simple list operations and control flow statements to achieve this, ensuring the solution is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n    'consecutive days'\n    Explanation: This refers to days that follow one another without interruption. If the flower is watered on consecutive days, it grows significantly more.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This means two consecutive days. In code, this can be checked by iterating through the list and checking if two consecutive elements are 0.\n    \n    'grows by 1 centimeter': This indicates an increase in height by 1 cm for each day the flower is watered. In code, this can be implemented by adding 1 to the height variable when a 1 is encountered in the list.\n    \n    'grows by 5 centimeters': This indicates an increase in height by 5 cm for each consecutive day the flower is watered. In code, this can be implemented by adding 5 to the height variable when two consecutive 1s are encountered in the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is not watered for two consecutive days (two 0s in a row), set the height to -1 and break out of the loop.\n   - If the flower is watered (1), check if it was also watered the previous day:\n     - If yes, increase the height by 5 cm.\n     - If no, increase the height by 1 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 0] = -1\n    Explanation: The flower grows to 6 cm after being watered on two consecutive days but then dies due to two consecutive days without water.\n\n    Test case: [1, 0, 1, 0] = 3\n    Explanation: The flower grows by 1 cm on the first and third days, resulting in a total height of 3 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately track the growth and determine if the flower dies due to consecutive days without watering. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear output indicating the flower's final height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided. The function will iterate through each day's watering status, updating the flower's height accordingly and checking for consecutive days without watering to determine if the flower dies. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on its watering schedule. The flower's height changes depending on whether it is watered or not, and it can die if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. This can be implemented by adding 1 to the height for each day with a value of 1.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1. This can be implemented by checking for consecutive ones and adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each day's watering status:\n        - If the current day is watered (1), check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n        - If the current day is not watered (0), check if the previous day was also not watered:\n            - If yes, and it's the second consecutive day without water, return -1 (flower dies).\n    - After processing all days, return the final height of the flower.\n\n# [edge case]\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Input: 3\n           1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days and does not grow on the third day.\n\n    Input: 4\n           0 1 0 1\n    Output: 3\n    Explanation: The flower grows by 1 cm on the second and fourth days, totaling a height of 3 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts growth based on consecutive watering days.\n", "requirement analysis:\nThe problem requires simulating the growth of a flower over a series of days based on whether it is watered or not. The key challenge is to correctly implement the growth rules and handle the case where the flower dies due to consecutive days without water. The solution must efficiently process multiple test cases and provide the correct height or indicate if the flower dies.\nrequirement pool:\n- Implement the growth logic for the flower based on watering rules.\n- Handle multiple test cases and provide output for each.\n- Optimize the solution for performance with up to 100 test cases.\n- Ensure the solution is robust against edge cases, such as minimum and maximum days.\n- Provide detailed comments and documentation for the code.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided for each test case. The function will iterate through the days, applying the growth rules and checking for consecutive days without water to determine if the flower dies. We will use basic Python data structures and control flow to efficiently handle up to 100 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules about watering.\n\n    'consecutive days'\n    Explanation: This refers to days that follow one another without interruption. In this context, it affects how much the flower grows or if it dies.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking for two consecutive zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height when a 1 is encountered.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1. Implemented by checking for consecutive 1s and adding 5 to the height.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day's watering status:\n   - If the flower is watered (1), check if it was watered the previous day:\n     - If yes, increase height by 5 cm.\n     - If no, increase height by 1 cm.\n   - If the flower is not watered (0), check if it was not watered the previous day:\n     - If yes, set height to -1 (flower dies) and break out of the loop.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0 0\n    Output: -1\n    Explanation: The flower grows by 5 cm on the first two days but dies after two consecutive days without water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without water and adjusts growth accordingly.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The key challenge is to accurately track the growth and determine if the flower dies due to consecutive days without water. The solution must handle multiple test cases efficiently and provide the correct output for each scenario.\nrequirement pool:\n- Implement the growth logic based on watering conditions.\n- Handle multiple test cases and provide output for each.\n- Optimize the solution for performance with up to 100 test cases.\n- Ensure the solution is easy to understand and maintain.\n- Consider edge cases such as all days watered or none watered.\nWe will implement a function to simulate the flower's growth over a series of days based on the watering pattern provided. The function will iterate through each test case, track the flower's height, and check for consecutive days without watering to determine if the flower dies. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns over a series of days. The flower's height changes depending on whether it is watered or not, and it can die if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that if the flower is not watered for two consecutive days, it dies. In code, this can be implemented by checking for two consecutive zeros in the list of watering patterns.\n    'grows by 1 centimeter': This means that if the flower is watered on a single day, its height increases by 1 cm. In code, this can be implemented by adding 1 to the flower's height for each day it is watered.\n    'grows by 5 centimeters': This means that if the flower is watered on consecutive days, its height increases by 5 cm instead of 1 cm. In code, this can be implemented by checking for consecutive ones in the list and adding 5 to the flower's height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through each day's watering pattern:\n        - If the current day is watered (1), check if the previous day was also watered:\n            - If yes, increase the height by 5 cm.\n            - If no, increase the height by 1 cm.\n        - If the current day is not watered (0), check if the previous day was also not watered:\n            - If yes, set the height to -1 (flower dies) and break out of the loop.\n    - After processing all days, store the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it does not die because it requires two consecutive days without water to die. The initial height remains unchanged.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two consecutive days and then grows by 1 cm on the fourth day. It does not die because there are no two consecutive days without water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The solution must handle multiple test cases and accurately determine the flower's height or if it dies due to consecutive days without watering.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or death.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the given watering pattern over n days. The function will iterate through each test case, updating the flower's height according to the rules provided. We will use simple list operations to track the watering pattern and calculate the height efficiently. The solution will handle multiple test cases and provide clear output for each case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on a watering schedule over a series of days. The flower's growth is determined by whether it is watered and the pattern of watering.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (represented by 1) or not watered (represented by 0) affects the growth or death of the flower.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking for two consecutive zeros in the watering pattern.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. This can be implemented by adding 1 to the height for each isolated 1 in the pattern.\n    \n    'grows by 5 centimeters': If watered on consecutive days, it grows by 5 cm instead of 1. This can be implemented by adding 5 to the height for each pair of consecutive 1s.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each test case:\n   - For each day, check if the flower is watered (a_i = 1) or not (a_i = 0).\n   - If two consecutive days are not watered (two consecutive 0s), set the height to -1 and break out of the loop for that test case.\n   - If a day is watered, check if it was also watered the previous day:\n     - If yes, increase height by 5 cm.\n     - If no, increase height by 1 cm.\n3. Output the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and adjusts growth based on watering patterns.\n"], "scores": [], "pass_results": [true, true, false, true, true, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 248, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "parent_index": 64}
