{"name": "1613_E. Crazy Robot", "description": "There is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "tags": ["dfs and similar", "graphs"], "difficulty": 11, "id": 1613, "sample_io": [{"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n", "output": ["...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n"]}], "test_list": [{"input": "1\n3 31\n############################..#\n.............................L.\n############################..#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n3 25\n######################..#\n.......................L.\n######################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n######################++#\n"]}, {"input": "1\n3 31\n#############################..\n.............................L.\n############################..#\n", "output": ["#############################++\n+++++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n######################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n.#++L++++\n"]}, {"input": "1\n3 31\n############################..#\n.L.............................\n############################..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n############################..#\n"]}, {"input": "1\n3 25\n#..######################\n.......................L.\n######################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n######################++#\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..######################\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..######################\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..######################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n3 25\n######################..#\n.......................L.\n#..######################\n", "output": ["######################++#\n...++++++++++++++++++++L+\n#..######################\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n############################..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n3 25\n######################..#\n.L.......................\n######################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n######################..#\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n.#...\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["...\n.L.\n...\n#++++\n++##L\n+#...\n++...\nL\n.#++L++++\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n############################..#\n", "output": ["#++############################\n+L++++++++++++++++++++++++++...\n############################..#\n"]}, {"input": "1\n3 25\n#####################..##\n.......................L.\n#..######################\n", "output": ["#####################..##\n.......................L+\n#..######################\n"]}, {"input": "4\n3 3\n...\n..L\n...\n4 5\n#....\n..##L\n.#...\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["..+\n..L\n..+\n#++++\n++##L\n+#...\n++...\nL\n.#++L++++\n"]}, {"input": "1\n3 25\n#####################..##\n.L.......................\n#..######################\n", "output": ["#####################..##\n+L+++++++++++++++++++....\n#++######################\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#################\"##########..#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n3 31\n..#############################\n.............................L.\n############################..#\n", "output": ["..#############################\n..+++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n3 25\n#..######################\n.L.......................\n######################..#\n", "output": ["#++######################\n+L++++++++++++++++++++...\n######################..#\n"]}, {"input": "1\n3 25\n##..#####################\n.......................L.\n#..######################\n", "output": ["##..#####################\n....+++++++++++++++++++L+\n#..######################\n"]}, {"input": "1\n3 31\n#############################..\n...........L...................\n############################..#\n", "output": ["#############################..\n+++++++++++L++++++++++++++++...\n############################..#\n"]}, {"input": "1\n3 25\n######################..#\n.L.......................\n#..######################\n", "output": ["######################..#\n+L++++++++++++++++++++...\n#++######################\n"]}, {"input": "1\n2 25\n##.#############.########\n.L.......................\n#..###$###########$######\n", "output": ["##.#############.########\n+L.......................\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n#..############################\n", "output": ["#++############################\n+L+++++++++++++++++++++++++++++\n#++############################\n"]}, {"input": "1\n3 25\n##..#####################\n.L.......................\n#..######################\n", "output": ["##..#####################\n+L.......................\n#++######################\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n############################..#\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n############################++#\n"]}, {"input": "1\n3 25\n#..######################\n.......................L.\n#..######################\n", "output": ["#..######################\n...++++++++++++++++++++L+\n#..######################\n"]}, {"input": "1\n3 25\n#####################..##\n.L.......................\n######################..#\n", "output": ["#####################..##\n+L+++++++++++++++++++....\n######################..#\n"]}, {"input": "1\n2 25\n################.#####.##\n.L.......................\n#..######$####\"#$########\n", "output": ["################.#####.##\n+L++++++++++++++.........\n"]}, {"input": "1\n3 31\n..#############################\n.L.............................\n############################..#\n", "output": ["++#############################\n+L++++++++++++++++++++++++++...\n############################..#\n"]}, {"input": "1\n2 31\n#..############################\n.............................L.\n##########\"######\"##########./#\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n"]}, {"input": "1\n3 31\n#############################..\n...................L...........\n############################..#\n", "output": ["#############################..\n+++++++++++++++++++L++++++++...\n############################..#\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n#.##.##########################\n", "output": ["#++############################\n+L++...........................\n#+##.##########################\n"]}, {"input": "1\n2 25\n##.##########.###########\n.L.......................\n####\"#################..#\n", "output": ["##.##########.###########\n+L.......................\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n#############\"########..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n################.#####.##\n.......................L.\n######\"######\"##$#####..#\n", "output": ["################.#####.##\n.......................L+\n"]}, {"input": "1\n3 31\n#..############################\n.L.............................\n################.############.#\n", "output": ["#++############################\n+L++++++++++++++...............\n################.############.#\n"]}, {"input": "4\n3 3\n...\n..L\n...\n4 5\n#....\n..##L\n..#..\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["..+\n..L\n..+\n#++++\n..##L\n..#..\n.....\nL\n.#++L++++\n"]}, {"input": "1\n3 25\n#..######################\n.L.......................\n#..######################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n#++######################\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n#..############################\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n#..############################\n"]}, {"input": "1\n2 25\n##.#####.################\n.L.......................\n#..######$####\"#$########\n", "output": ["##.#####.################\n+L.......................\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n#.##.##########################\n", "output": ["#..############################\n.....++++++++++++++++++++++++L+\n#.##.##########################\n"]}, {"input": "1\n2 25\n######################..#\n......................L..\n#..###$##################\n", "output": ["######################++#\n++++++++++++++++++++++L++\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n.#...\n.....\n1 1\nL\n1 9\n....L..#.\n", "output": ["...\n.L.\n...\n#++++\n++##L\n+#...\n++...\nL\n++++L++#.\n"]}, {"input": "1\n2 25\n#####################..##\n.......................L.\n#..######################\n", "output": ["#####################..##\n.......................L+\n"]}, {"input": "1\n2 25\n########.#############.##\n.L.......................\n#..###$###########$######\n", "output": ["########.#############.##\n+L++++++.................\n"]}, {"input": "1\n2 25\n###########.##########.##\n.L.......................\n####\"#################..#\n", "output": ["###########.##########.##\n+L+++++++++..............\n"]}, {"input": "1\n3 31\n#..############################\n.............................L.\n################.############.#\n", "output": ["#..############################\n.................++++++++++++L+\n################.############+#\n"]}, {"input": "1\n2 25\n##########.############.#\n......................L..\n#..###$##################\n", "output": ["##########.############.#\n...........+++++++++++L..\n"]}, {"input": "1\n2 31\n#..############################\n...............L...............\n#/.##########\"######\"##########\n", "output": ["#..############################\n...++++++++++++L+++++++++++++++\n"]}, {"input": "4\n3 3\n...\n.L.\n...\n4 5\n#....\nL.##.\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n", "output": ["...\n.L.\n...\n#....\nL.##.\n...#.\n.....\nL\n++++L++#.\n"]}, {"input": "1\n2 31\n#############################..\n.............................L.\n############################..#\n", "output": ["#############################++\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "4\n3 3\n...\n..L\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n.#..L....\n", "output": ["..+\n..L\n..+\n#++++\n..##L\n...#+\n...++\nL\n.#++L++++\n"]}, {"input": "1\n2 25\n#..######################\n....................L....\n#..######################\n", "output": ["#..######################\n...+++++++++++++++++L++++\n"]}, {"input": "1\n2 25\n##..#####################\n.L.......................\n#..######################\n", "output": ["##..#####################\n+L.......................\n"]}, {"input": "1\n2 31\n..#############################\n.............................L.\n############################..#\n", "output": ["..#############################\n..+++++++++++++++++++++++++++L+\n"]}, {"input": "1\n3 25\n##..#####################\n.L.......................\n######################..#\n", "output": ["##..#####################\n+L.......................\n######################..#\n"]}, {"input": "1\n3 31\n#############################..\n...................L...........\n#..############################\n", "output": ["#############################..\n...++++++++++++++++L+++++++++..\n#..############################\n"]}, {"input": "1\n2 25\n######.###############.##\n.......................L.\n#..###$##################\n", "output": ["######.###############.##\n.......................L+\n"]}, {"input": "1\n3 31\n############################..#\n.............................L.\n#..############################\n", "output": ["############################++#\n...++++++++++++++++++++++++++L+\n#..############################\n"]}, {"input": "1\n2 31\n#..############################\n.L.............................\n#################\"##########-.#\n", "output": ["#++############################\n+L+++++++++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..######################\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n######################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###########\"##########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n######################..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n######################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..###$##################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"#################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..###$###########$######\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$###########$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..#################\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n###########\"##########..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###########\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n#################\"##########..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"##############$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#################\"####\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..##########\"###########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###########\"#$####$###\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"###########$##$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#.#############.#########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###$##################\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..####$############\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..######$####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#####$####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###############\"######\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$########$##$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"#######\"######$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"###########$##$##..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n##################$###..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n##########\"######\"##########..#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#####$#\"##\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#######\"######$##..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n##################$###..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n##########\"######\"##########./#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..$#####$#\"##\"#$########\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n##############\"#######..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n####\"#################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..#####$#####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..##$##$###########\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..####$############\"####\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###############!######\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n##################$###..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#######\"######$$#..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#######\"##\"#$#####$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n####\"#################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"#####$#####..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n$#######$#\"#####$#####..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###################$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#./######################\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#############\"########..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"###########..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"##########\"##########..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#################\"##########-.#\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$#####$####\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###$########$##$######\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"####\"#########$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n##$#\"###########$##$##..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n##########\"######\"##########..#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$#####$#\"##\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"###\"#################..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..####$############\"\"###\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n######!###############..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###$##################\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#################..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###########\"#######$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#############\"########..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#.-##########\"#################\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n######$##$########$###..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"####\"#########$##..\"\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#################\"###\"\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#\"#########\"#######$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"####\"##$######$##..\"\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"###\"#########$#######..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#\"#########\"###\"###$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n#############\"##$#####..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#######$#########\"###\"\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n######\"######\"##$#####..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..#######$#####\"###\"###\"\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"###\"###\"#####$#######..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n################.#####.##\n.L.......................\n######\"######\"##$#####..#\n", "output": ["################.#####.##\n+L++++++++++++++.........\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###########\"##########\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"###########$#####..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$######\"####$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..#######\"#########\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#.#############.#########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###$########%##$######\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"###########$##$##..$\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n#..##########\"######\"##########\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#####$$\"##\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..$#####$#\"##\"#######$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n##############\"#######..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n##.#############.########\n.L.......................\n#/.###$###########$######\n", "output": ["##.#############.########\n+L.......................\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$#######\"##\"#$####\"$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..###################$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#./######################\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####$########\"########..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n###$####$#\"###########..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 31\n############################..#\n.L.............................\n#################\"##########-.#\n", "output": ["############################..#\n+L++++++++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$##\"##$####\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#./$#####$#\"##\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..####$############\"\"###\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"..##$#########\"####\"####\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.##########.###########\n.L.......................\n####\"############\"####..#\n", "output": ["##.##########.###########\n+L.......................\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"###\"#########$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n##.#####.################\n.......................L.\n#############\"##%#####..#\n", "output": ["##.#####.################\n.........++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"###\"###\"#####$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..#######\"#########\"####\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"##\"$$#####$..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n######\"#######\"#######..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..$###\"###\"##\"#$####\"$##\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#./$#####$#\"##\"#$#####$##\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"###\"#$#######$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..$###\"###\"##\"#$####\"$##\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n###\"\"#################..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$#\"####$######..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n####\"#########\"####$##..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n##################$##\"..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"#######\"######$#$..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n####\"#################..$\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..#####$$####\"#$########\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n.#################$####.#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n################.#####.##\n.L.......................\n########$#\"####$######..#\n", "output": ["################.#####.##\n+L++++++++++++++.........\n"]}, {"input": "1\n2 31\n#..############################\n.............................L.\n#/.##########\"######\"##########\n", "output": ["#..############################\n...++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n\"###\"#################..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..###$######$###########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"######\"##########..#\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#############\"$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 31\n############################..#\n.............................L.\n#.-######\"#####################\n", "output": ["############################++#\n+++++++++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..#################\"###\"\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n\"#############$#######..#\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n#..#######$#########\"###\"\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n######################..#\n.......................L.\n#..###########!##########\n", "output": ["######################++#\n+++++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#.############$.#########\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n######$##%########$###..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n####\"###########$#$###..$\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n#..$\"#\"##$####\"#$########\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n#..####$###$########\"\"###\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.......................L.\n\"#$#\"#########$#######..#\n", "output": ["#..######################\n...++++++++++++++++++++L+\n"]}, {"input": "1\n2 25\n#..######################\n.L.......................\n$..#######\"#########\"####\n", "output": ["#++######################\n+L+++++++++++++++++++++++\n"]}, {"input": "1\n2 25\n######################..#\n.L.......................\n########$###\"\"$$#####$..#\n", "output": ["######################..#\n+L++++++++++++++++++++...\n"]}], "task_id": "codecontest/117", "prompt": "There exists a grid made up of n rows and m columns. Each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab. The cells that lie beyond the borders of the grid are all blocked. These cells that are blocked act as barriers. These blocked cells prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "repair_prompt": ["There exists a grid made up of n rows and m columns. Each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab. The cells that lie beyond the borders of the grid are all blocked. These cells that are blocked act as barriers. These blocked cells prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "There exists a grid made up of n rows and m columns. Each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab. The cells that lie beyond the borders of the grid are all blocked. These are the cells that are blocked. They act as barriers. These blocked cells prevent any movement beyond the grid.\n\nA crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\". Each command means moving to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "There exists a grid made up of n rows and m columns, and each individual cell within the grid is either unoccupied or unavailable. One of the available cells holds a lab, while the cells that lie beyond the borders of the grid are all blocked and act as barriers, preventing any movement beyond the grid.\n\nA crazy robot has escaped from this lab, currently residing in some free cell of the grid. You can send one of the following commands to the robot: \"move right\", \"move down\", \"move left\" or \"move up\", with each command implying movement to a neighbouring cell in the corresponding direction.\n\nHowever, as the robot is crazy, it will do anything except following the command, choosing a direction different from the command as long as the cell in that direction is not blocked. If there is such a direction, it will move to a neighbouring cell in that direction; otherwise, it will do nothing.\n\nWe want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell such that, after each step of the robot, a command can be sent so no matter what different directions the robot chooses, it will end up in a lab.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[List[str]]) -> List[List[str]]:\n    \"\"\"Finds free cells that can force the robot to reach the lab in each test case grid.\n\n    Args:\n        t: Number of test cases.\n        test_cases: List of test case grids, each represented as a list of strings.\n\n    Returns:\n        A list of modified grids where reachable free cells are marked with '+'.\n    \"\"\"\n    results = []\n\n    for grid in test_cases:\n        n = len(grid)\n        m = len(grid[0])\n        lab_position = None\n\n        # Find the lab position\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS\n        queue = deque([lab_position])\n        reachable = [[False] * m for _ in range(n)]\n        reachable[lab_position[0]][lab_position[1]] = True\n\n        # Directions for BFS: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and not reachable[nx][ny] and grid[nx][ny] == '.':\n                    # Check if the cell is reachable\n                    free_neighbors = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                            free_neighbors += 1\n\n                    # If the cell has at most one free neighbor, it is reachable\n                    if free_neighbors <= 1:\n                        reachable[nx][ny] = True\n                        queue.append((nx, ny))\n\n        # Modify the grid based on reachable cells\n        modified_grid = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if grid[i][j] == '.' and reachable[i][j]:\n                    row.append('+')\n                else:\n                    row.append(grid[i][j])\n            modified_grid.append(''.join(row))\n\n        results.append(modified_grid)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append(grid)\n\n    # Call the function and print the result\n    results = find_reachable_cells(t, test_cases)\n    for result in results:\n        for line in result:\n            print(line)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds free cells that can force the robot to reach the lab in each test case grid.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of rows in the grid.\n            - m: Number of columns in the grid.\n            - grid: List of strings representing the grid.\n\n    Returns:\n        A list of modified grids where reachable free cells are marked with '+'.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for easier manipulation\n        grid = [list(row) for row in grid]\n\n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        # Directions for moving in the grid: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        grid[nx][ny] = '+'\n                        queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Call the function and print the result\n    results = find_reachable_cells(t, test_cases)\n    for result in results:\n        for line in result:\n            print(line)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[List[str]]) -> List[List[str]]:\n    \"\"\"Finds and marks the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[str]]): List of grids for each test case.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable cells marked with '+'.\n    \"\"\"\n    results = []\n\n    for grid in test_cases:\n        n = len(grid)\n        m = len(grid[0])\n        lab_position = None\n\n        # Find the lab position\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS\n        queue = deque([lab_position])\n        visited = [[False] * m for _ in range(n)]\n        visited[lab_position[0]][lab_position[1]] = True\n\n        # Directions for BFS: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        # Perform BFS to mark reachable cells\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] != '#':\n                                free_directions += 1\n\n                        if free_directions <= 1:\n                            grid[nx] = grid[nx][:ny] + '+' + grid[nx][ny+1:]\n                            queue.append((nx, ny))\n\n                    visited[nx][ny] = True\n\n        results.append(grid)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append(grid)\n\n    # Output interface\n    result = find_reachable_cells(t, test_cases)\n    for grid in result:\n        for row in grid:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid.\n\n    Returns:\n        List[List[str]]: List of modified grids for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for moving in the grid: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # BFS to find all reachable cells\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                                free_directions += 1\n                        if free_directions <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Output interface\n    results = find_reachable_cells(t, test_cases)\n    for result in results:\n        for line in result:\n            print(line)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid itself.\n\n    Returns:\n        List[List[str]]: List of modified grids for each test case with reachable free cells marked.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for BFS: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        # BFS to find all reachable free cells\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be reached from any direction other than the one commanded\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            if (ddx, ddy) != (-dx, -dy):\n                                nnx, nny = nx + ddx, ny + ddy\n                                if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] != '#':\n                                    free_directions += 1\n                        if free_directions > 0:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                            visited.add((nx, ny))\n                    elif grid[nx][ny] == 'L':\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n    test_cases.append((n, m, grid))\n\n# Call the function\nresults = find_reachable_cells(t, test_cases)\n\n# Output interface\nfor result in results:\n    for line in result:\n        print(line)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds and marks the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and the grid itself.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable free cells marked with '+'.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for moving in the grid: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        # BFS to find all reachable free cells from the lab\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if this free cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                                free_directions += 1\n                        if free_directions <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                    elif grid[nx][ny] == 'L':\n                        queue.append((nx, ny))\n                    \n                    visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Call the function\n    result = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for grid in result:\n        for row in grid:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[List[str]]) -> List[List[str]]:\n    \"\"\"Finds the free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of test cases, each containing a grid represented as a list of strings.\n\n    Returns:\n        A list of modified grids where reachable free cells are marked with '+'.\n    \"\"\"\n    results = []\n\n    for grid in test_cases:\n        n = len(grid)\n        m = len(grid[0])\n        lab_position = None\n\n        # Find the lab position\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS\n        queue = deque([lab_position])\n        visited = set([lab_position])\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # Perform BFS to find all reachable free cells\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                                free_directions += 1\n\n                        if free_directions <= 1:\n                            queue.append((nx, ny))\n                            visited.add((nx, ny))\n\n        # Create the result grid\n        result_grid = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if (i, j) in visited and grid[i][j] == '.':\n                    row.append('+')\n                else:\n                    row.append(grid[i][j])\n            result_grid.append(''.join(row))\n\n        results.append(result_grid)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append(grid)\n\n    # Call the function\n    result = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for grid in result:\n        for row in grid:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Determine which free cells can guide the robot to the lab using BFS.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and grid.\n\n    Returns:\n        List[List[str]]: Modified grids with reachable free cells marked with '+'.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for easier manipulation\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n        \n        # Directions for movement: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        # BFS setup\n        queue = deque([lab_position])\n        visited = set([lab_position])\n        \n        while queue:\n            x, y = queue.popleft()\n            \n            # Check all possible directions\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                \n                # Check if the new position is within bounds and is a free cell\n                if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.':\n                    # Count the number of free neighboring cells\n                    free_neighbors = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                            free_neighbors += 1\n                    \n                    # If the free cell has only one free neighbor, it can be forced to reach the lab\n                    if free_neighbors <= 1:\n                        grid[nx][ny] = '+'\n                        queue.append((nx, ny))\n                        visited.add((nx, ny))\n        \n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n    \n    # Call the function\n    results = find_reachable_cells(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        for row in result:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds free cells that can force the robot to reach the lab in each test case grid.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and grid data.\n\n    Returns:\n        List[List[str]]: List of modified grids with reachable cells marked.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Find the lab position\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Initialize BFS\n        queue = deque([lab_position])\n        visited = [[False] * m for _ in range(n)]\n        visited[lab_position[0]][lab_position[1]] = True\n\n        # Directions for BFS: up, down, left, right\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n        # Perform BFS to mark reachable cells\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == '.':\n                    # Check if the cell can be forced to reach the lab\n                    free_neighbors = 0\n                    for ddx, ddy in directions:\n                        nnx, nny = nx + ddx, ny + ddy\n                        if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] == '.':\n                            free_neighbors += 1\n\n                    # If the cell has only one free neighbor, it can be forced to reach the lab\n                    if free_neighbors <= 1:\n                        grid[nx] = grid[nx][:ny] + '+' + grid[nx][ny+1:]\n                        queue.append((nx, ny))\n                        visited[nx][ny] = True\n\n        results.append(grid)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Call the function\n    results = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for result in results:\n        for line in result:\n            print(line)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef find_reachable_cells(t: int, test_cases: List[Tuple[int, int, List[str]]]) -> List[List[str]]:\n    \"\"\"Finds and marks all free cells from which the robot can be forced to reach the lab.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[str]]]): List of test cases, each containing grid dimensions and grid data.\n\n    Returns:\n        List[List[str]]: List of modified grids with reachable cells marked.\n    \"\"\"\n    results = []\n\n    for n, m, grid in test_cases:\n        # Convert grid to a list of lists for mutability\n        grid = [list(row) for row in grid]\n        \n        # Find the position of the lab\n        lab_position = None\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'L':\n                    lab_position = (i, j)\n                    break\n            if lab_position:\n                break\n\n        # Directions for moving in the grid: right, down, left, up\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n        # BFS to find all reachable free cells\n        queue = deque([lab_position])\n        visited = set([lab_position])\n\n        while queue:\n            x, y = queue.popleft()\n\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n\n                if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited:\n                    if grid[nx][ny] == '.':\n                        # Check if the cell can be forced to reach the lab\n                        free_directions = 0\n                        for ddx, ddy in directions:\n                            nnx, nny = nx + ddx, ny + ddy\n                            if 0 <= nnx < n and 0 <= nny < m and grid[nnx][nny] != '#':\n                                free_directions += 1\n                        if free_directions <= 1:\n                            grid[nx][ny] = '+'\n                            queue.append((nx, ny))\n                            visited.add((nx, ny))\n                    elif grid[nx][ny] == 'L':\n                        visited.add((nx, ny))\n\n        # Convert grid back to list of strings\n        results.append([''.join(row) for row in grid])\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().strip().split())\n        grid = [input().strip() for _ in range(n)]\n        test_cases.append((n, m, grid))\n\n    # Call the function\n    result = find_reachable_cells(t, test_cases)\n\n    # Output interface\n    for grid in result:\n        for row in grid:\n            print(row)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe main requirement is to determine which free cells can guide the robot to the lab. The solution must efficiently handle large grids and provide clear output for each test case. The algorithm should ensure that the robot can be forced to reach the lab from any free cell that is marked with a '+'.\nrequirement pool:\n- Develop an efficient algorithm to determine reachable cells\n- Ensure the solution handles large grid sizes within constraints\n- Optimize the code for performance and clarity\n- Provide detailed documentation for the solution\n- Implement additional features for user interaction\nWe will use a breadth-first search (BFS) algorithm starting from the lab cell to determine which free cells can guide the robot to the lab. The BFS will propagate through free cells, marking them as reachable if they can eventually lead to the lab. This approach ensures that we efficiently explore all possible paths from the lab to free cells, and it is well-suited for large grids due to its linear time complexity relative to the number of cells.\nPlease read and understand the following inteperation before coding\n\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are potential paths for the robot, while blocked cells act as barriers. The robot is the entity that needs to be guided to the lab.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Implement a breadth-first search (BFS) starting from the lab position:\n        - Use a queue to explore each free cell ('.') that can lead to the lab.\n        - Mark cells as reachable ('+') if they can eventually lead to the lab.\n        - Ensure that BFS only propagates through free cells and stops at blocked cells ('#').\n    4. Output the modified grid for each test case, replacing reachable free cells with '+'.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to be marked.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: All surrounding cells are blocked, so no free cells can be marked.\n\n    Test case with a grid where all free cells are directly connected to the lab:\n    Input: 3 3 .L. ...\n    Output: +L+\n            +++\n    Explanation: All free cells can be marked as they are directly connected to the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by only marking free cells that can reach the lab.\n", "requirement analysis:\nThe task requires determining which free cells can force the robot to reach the lab. The robot's movement is unpredictable, but it will always move to a non-blocked cell. The solution must efficiently handle large grids and multiple test cases.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells.\n- Optimize for large grid sizes and multiple test cases.\n- Ensure clear and correct output format.\n- Handle edge cases where the lab is surrounded by blocked cells.\n- Provide documentation for understanding the solution approach.\nWe will use a breadth-first search (BFS) algorithm starting from the lab cell to determine which free cells can force the robot to reach the lab. The BFS will propagate from the lab to all reachable free cells, marking them as reachable. This approach ensures that we efficiently explore all possible paths from the lab to free cells, even in large grids.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'free cell', 'blocked cell', 'lab', 'robot'\n    Explanation: \n    - 'grid': A matrix of cells with n rows and m columns.\n    - 'free cell': A cell marked with '.', where the robot can move.\n    - 'blocked cell': A cell marked with '#', which acts as a barrier.\n    - 'lab': A cell marked with 'L', the target location for the robot.\n    - 'robot': The entity that moves within the grid, starting from a free cell.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationships in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab ('L') in the grid.\n4. Use a breadth-first search (BFS) starting from the lab to explore all reachable free cells:\n   - Initialize a queue with the lab's position.\n   - Mark all visited cells to avoid revisiting.\n   - For each cell, check its neighbors (up, down, left, right).\n   - If a neighbor is a free cell and not visited, mark it as reachable and add it to the queue.\n5. After BFS completes, replace all reachable free cells with '+'.\n6. Output the modified grid for each test case.\n\n# [edge case] \n    1. Test case with only one cell being the lab:\n       Input: 1 1 L\n       Output: L\n       Explanation: The grid consists only of the lab, so no free cells to mark.\n\n    2. Test case with all cells blocked except the lab:\n       Input: 3 3\n              ###\n              #L#\n              ###\n       Output: ###\n               #L#\n               ###\n       Explanation: No free cells are available for the robot to move.\n\n    3. Test case with a single row or column:\n       Input: 1 5\n              .L...\n       Output: +L+++\n       Explanation: The robot can be forced to reach the lab from any free cell by sending commands opposite to the direction of the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by marking only reachable free cells from the lab.\n", "requirement analysis:\nThe problem requires determining which free cells in a grid can lead a robot to a lab cell, given the robot's erratic movement behavior. The solution must efficiently handle large grids and provide clear output for each test case.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells.\n- Optimize the solution for large grid sizes.\n- Ensure the output format is clear and concise.\n- Handle edge cases where the grid is minimal or fully blocked.\n- Provide detailed comments and documentation for the code.\nWe will use a Breadth-First Search (BFS) algorithm starting from the lab cell to determine which free cells can lead the robot to the lab. This approach is efficient for grid-based problems and will help us explore all possible paths from the lab to other cells. We will mark cells that can reach the lab with a '+'. The BFS will ensure that we only explore valid paths, considering the robot's erratic movement behavior.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are potential starting points for the robot, while blocked cells act as barriers. The robot's movement is erratic, meaning it will not follow direct commands but will move to a different direction if possible.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Implement a Breadth-First Search (BFS) starting from the lab to explore all reachable free cells ('.').\n    4. For each free cell, check if it can be forced to reach the lab by considering all possible movements.\n    5. Mark the free cells that can reach the lab with a '+'.\n    6. Output the modified grid for each test case.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to mark.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: All cells are blocked except the lab, so no free cells can be marked.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    Input: 3 3 .#. #L# .#.\n    Output: .#. #L# .#.\n    Explanation: Free cells are isolated by blocked cells, so none can reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by not marking isolated or blocked paths.\n", "requirement analysis:\nThe problem requires determining which free cells in a grid can be forced to reach a lab cell, given a robot that moves unpredictably. The solution must efficiently handle large grids and multiple test cases, ensuring correct output format.\nrequirement pool:\n- Implement a function to determine reachable cells from the lab.\n- Optimize the algorithm to handle large grid sizes efficiently.\n- Ensure the solution adheres to the input and output format strictly.\n- Test the solution against edge cases and large inputs.\n- Document the solution approach and edge case handling.\nWe will use a Breadth-First Search (BFS) algorithm starting from the lab cell to determine which free cells can be forced to reach the lab. BFS is suitable for this problem as it explores all possible paths from the lab to other cells, ensuring that we can identify all reachable cells efficiently. We will mark cells that can be reached by the robot with a '+' sign. The BFS will be implemented using a queue to explore each cell's neighbors, and we will ensure that the robot can be forced to reach the lab by checking if all neighboring cells are either blocked or lead back to the lab.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid': A matrix-like structure with rows and columns where each cell can be free, blocked, or contain a lab.\n    'lab': A specific cell in the grid that the robot needs to reach.\n    'crazy robot': A robot that moves in any direction except the one commanded, provided the direction is not blocked.\n\n# [phrase showing quantity relationship]\n    'one of the available cells': Indicates that there is exactly one lab cell in the grid.\n    'exactly one lab': Confirms that there is a single lab cell in the grid.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab ('L') in the grid.\n4. Use Breadth-First Search (BFS) starting from the lab to explore all reachable free cells:\n   - Initialize a queue with the lab's position.\n   - While the queue is not empty, dequeue a cell and check its neighbors.\n   - For each free neighbor, check if it can be forced to move towards the lab by ensuring all other directions are blocked or lead back to the lab.\n   - If a free cell can be forced to reach the lab, mark it with a '+'.\n5. Output the modified grid for each test case.\n\n# [edge case]\n    1. A grid with only one cell which is a lab:\n       Input: 1 1\n              L\n       Output: L\n       Explanation: The grid has only one cell which is already a lab, so no free cells to mark.\n\n    2. A grid where all cells are blocked except for the lab:\n       Input: 3 3\n              ###\n              #L#\n              ###\n       Output: ###\n               #L#\n               ###\n       Explanation: No free cells exist, so no changes are made.\n\n    3. A grid where all cells are free except for one blocked cell:\n       Input: 3 3\n              ...\n              .L.\n              ...\n       Output: ...\n               .L.\n               ...\n       Explanation: The robot can move freely without being forced to reach the lab, so no cells are marked.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The BFS logic inherently handles grids with no free cells or grids where free cells cannot be forced to reach the lab.\n", "requirement analysis:\nThe requirements focus on determining which free cells can guide the robot to the lab. The challenge lies in the robot's unpredictable movement, necessitating a strategy that ensures it reaches the lab regardless of its choices. The solution must efficiently handle large grids and multiple test cases.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize for large grid sizes\n- Ensure clear and correct output format\n- Handle edge cases and blocked cells\n- Provide documentation and examples\nWe will use a Breadth-First Search (BFS) algorithm to determine which free cells can guide the robot to the lab. The BFS will start from the lab and explore all reachable free cells. If a free cell can be reached by the robot from any direction other than the one commanded, it will be marked as reachable. This approach ensures that we efficiently handle large grids by exploring only necessary paths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are those where the robot can move, while blocked cells act as barriers. The robot is the entity that needs to be guided to the lab.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Implement a Breadth-First Search (BFS) starting from the lab to explore all reachable free cells ('.').\n    4. For each free cell, check if it can be reached by the robot from any direction other than the one commanded.\n    5. Mark reachable free cells with a '+'.\n    6. Output the modified grid for each test case.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to mark.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: All cells are blocked except the lab, so no free cells exist to mark.\n\n    Test case with a grid where all free cells are directly connected to the lab:\n    Input: 3 3 .L. ...\n    Output: +L+ +++\n    Explanation: All free cells can be reached by the robot from any direction other than the one commanded.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by exploring only reachable paths from the lab.\n", "requirement analysis:\nThe task requires determining which free cells in a grid can lead a robot to a lab cell, given the robot's erratic movement behavior. The solution must efficiently handle large grids and multiple test cases, ensuring that the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells.\n- Optimize the solution for large grid sizes.\n- Ensure the solution handles edge cases correctly.\n- Provide clear and formatted output for each test case.\n- Include comments and documentation for code clarity.\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can lead the robot to the lab. BFS is suitable for this problem as it efficiently explores all possible paths from the lab to the free cells, ensuring that we can identify all reachable cells. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The algorithm will start from the lab cell and explore all possible paths, marking cells that can be forced to reach the lab.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'free cell', 'blocked cell', 'lab', 'robot'\n    Explanation: \n    - 'grid': A matrix of cells with n rows and m columns.\n    - 'free cell': A cell marked with '.', where the robot can move.\n    - 'blocked cell': A cell marked with '#', which acts as a barrier.\n    - 'lab': A cell marked with 'L', the target location for the robot.\n    - 'robot': An entity that moves in the grid, starting from a free cell.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationships in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab ('L') in the grid.\n4. Use a breadth-first search (BFS) starting from the lab to explore all reachable free cells.\n5. For each free cell, check if it can be forced to reach the lab by ensuring that all alternative moves lead closer to the lab.\n6. Mark such free cells with '+'.\n7. Output the modified grid for each test case.\n\n# [edge case] \n    1. A grid with only one cell which is a lab:\n       Input: 1 1 L\n       Output: L\n       Explanation: The grid is already at the lab, no free cells to mark.\n\n    2. A grid where all cells are blocked except for the lab:\n       Input: 3 3 ### #L# ###\n       Output: ### #L# ###\n       Explanation: No free cells to mark as reachable.\n\n    3. A grid where all cells are free and the lab is at a corner:\n       Input: 3 3 L.. ... ...\n       Output: L.. ... ...\n       Explanation: The robot can be forced to reach the lab from any free cell by sending commands opposite to the direction of the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by exploring all possible paths from the lab and marking reachable cells accordingly.\n", "requirement analysis:\nThe requirements focus on determining which free cells can force the robot to reach the lab. The solution must efficiently handle large grids and provide accurate outputs for each test case. The algorithm should consider all possible movements of the robot and ensure it can be directed to the lab from any free cell.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize the solution for large grid sizes\n- Ensure the output format matches the requirements\n- Test the solution against multiple test cases\n- Document the solution and provide clear instructions\nWe will use a Breadth-First Search (BFS) algorithm to determine which free cells can force the robot to reach the lab. BFS is suitable for this problem as it efficiently explores all possible paths from the lab to the free cells, ensuring that we can identify all reachable cells. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The algorithm will start from the lab and explore all free cells, marking those that can be reached by the robot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'commands'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are those where the robot can move, while blocked cells act as barriers. Commands are instructions sent to the robot to move in a specific direction.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Use Breadth-First Search (BFS) starting from the lab to explore all reachable free cells ('.').\n    4. For each free cell, check if it can be forced to reach the lab by considering all possible movements.\n    5. Mark the free cells that can force the robot to reach the lab with a '+'.\n    6. Output the modified grid for each test case.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist.\n\n    Test case with all cells blocked except for one free cell:\n    Input: 3 3 ### #.# ###\n    Output: ### #.# ###\n    Explanation: The single free cell is surrounded by blocked cells, so it cannot reach the lab.\n\n    Test case with multiple paths to the lab:\n    Input: 3 3 .L. ...\n    Output: +L+ +++\n    Explanation: All free cells can be forced to reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS algorithm inherently handles these scenarios by exploring all possible paths from the lab and marking reachable free cells.\n", "requirement analysis:\nThe requirement is to determine which free cells can guide the robot to the lab, regardless of the robot's unpredictable movements. The solution must efficiently handle large grids and multiple test cases, ensuring accurate results.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize for large grid sizes\n- Ensure output format matches requirements\n- Handle edge cases and blocked cells\n- Provide clear documentation and comments\nWe will use a Breadth-First Search (BFS) algorithm to determine which free cells can guide the robot to the lab. BFS is suitable for this problem as it efficiently explores all possible paths from the lab to reachable cells, ensuring that we can handle large grids within the constraints. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The algorithm will start from the lab and mark all reachable free cells with a '+'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'command'\n    Explanation: \n    - 'grid': A structure consisting of rows and columns where each cell can be free, blocked, or contain a lab.\n    - 'lab': A specific cell in the grid where the robot needs to reach.\n    - 'free cell': A cell marked with '.', indicating it is unoccupied and can be moved into.\n    - 'blocked cell': A cell marked with '#', indicating it is unavailable for movement.\n    - 'command': Instructions sent to the robot to move in a specific direction, which the robot will ignore and move in a different direction if possible.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship\n\n# [degree adverb] \n    No explicit degree adverb\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') in the grid.\n    3. Implement a Breadth-First Search (BFS) starting from the lab to explore all reachable free cells.\n    4. Use a queue to manage cells to be explored and a set to track visited cells.\n    5. For each free cell, check if it can be reached from the lab by considering all possible movements (right, down, left, up).\n    6. Mark reachable free cells with '+'.\n    7. Output the modified grid for each test case.\n\n# [edge case] \n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to mark.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: All cells are blocked except the lab, so no free cells exist to mark.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    Input: 3 3 .#. #L# .#.\n    Output: .#. #L# .#.\n    Explanation: Free cells are isolated by blocked cells, preventing any movement towards the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by marking only reachable free cells starting from the lab.\n", "requirement analysis:\nThe problem requires determining which free cells in a grid can force a robot to reach a lab cell, given the robot's unpredictable movement. The solution must efficiently handle large grids and multiple test cases, ensuring correct output format. The challenge lies in optimizing the algorithm to handle the maximum constraints while considering edge cases where the robot cannot be guided to the lab.\nrequirement pool:\n- Implement an efficient algorithm to determine reachable cells.\n- Ensure the solution handles the maximum input constraints.\n- Optimize the algorithm for performance.\n- Test the solution with various edge cases.\n- Provide clear documentation and comments in the code.\nWe will use a breadth-first search (BFS) approach starting from the lab cell to determine which free cells can force the robot to reach the lab. This approach is efficient for grid-based problems and will help us explore all possible paths the robot can take. We will mark cells that can reach the lab with a '+' and leave others as '.' or '#'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid'\n    Explanation: A grid is a two-dimensional array of cells, where each cell can be free, blocked, or contain a lab.\n\n    'lab'\n    Explanation: The lab is a specific cell in the grid that the robot needs to reach.\n\n    'free cell'\n    Explanation: A cell that is not blocked and can be occupied by the robot.\n\n    'blocked cell'\n    Explanation: A cell that acts as a barrier and cannot be occupied by the robot.\n\n    'crazy robot'\n    Explanation: A robot that does not follow commands directly but moves in any other available direction.\n\n# [phrase showing quantity relationship]\n    'one of the following commands': Implies that there are four possible movement commands for the robot.\n    \n    'exactly one lab': Implies that there is only one lab cell in the grid.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the grid dimensions and the grid itself.\n3. Identify the position of the lab in the grid.\n4. Use a breadth-first search (BFS) starting from the lab to explore all reachable free cells.\n5. For each free cell, check if it can be forced to reach the lab by considering all possible movements of the robot.\n6. Mark cells that can reach the lab with a '+'.\n7. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing only a lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells to mark.\n\n    Test case with all cells blocked except for the lab:\n    Input: 3 3\n           ###\n           #L#\n           ###\n    Output: ###\n            #L#\n            ###\n    Explanation: No free cells are available to reach the lab.\n\n    Test case with a free path directly to the lab:\n    Input: 3 3\n           ...\n           .L.\n           ...\n    Output: ...\n            .L.\n            ...\n    Explanation: No free cells can be forced to reach the lab due to the robot's behavior.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS approach inherently handles these scenarios by exploring all possible paths from the lab and marking reachable cells.\n", "requirement analysis:\nThe requirements focus on determining which free cells can lead the robot to the lab regardless of its erratic behavior. The solution must efficiently process large grids and provide clear output for each test case. The algorithm should handle edge cases where the robot might not be able to reach the lab.\nrequirement pool:\n- Implement the main algorithm to determine reachable cells\n- Optimize the solution for large grid sizes\n- Ensure the output format matches the requirements\n- Handle edge cases where the robot cannot reach the lab\n- Test the solution with diverse test cases\nWe will use a breadth-first search (BFS) algorithm to determine which free cells can lead the robot to the lab. BFS is suitable for this problem as it explores all possible paths from the lab to the free cells, ensuring that we can identify all reachable cells efficiently. We will utilize a queue to manage the exploration of cells and a set to track visited cells. The grid will be processed for each test case, and the output will be formatted according to the requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'grid', 'lab', 'free cell', 'blocked cell', 'robot'\n    Explanation: The grid is a matrix of cells, where each cell can be free, blocked, or contain a lab. The lab is the target location for the robot. Free cells are those where the robot can move, while blocked cells act as barriers. The robot is the entity that needs to be guided to the lab.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in terms of numerical values.\n\n# [degree adverb]\n    No degree adverb present in the requirement.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and the grid dimensions for each test case.\n    2. For each test case, identify the position of the lab ('L') and initialize a queue for BFS starting from this position.\n    3. Use BFS to explore all free cells ('.') that can reach the lab. For each free cell, check if moving in any direction can eventually lead to the lab.\n    4. Mark all reachable free cells with '+'.\n    5. Output the modified grid for each test case.\n\n# [edge case]\n    Test case with a single cell grid containing only the lab:\n    Input: 1 1 L\n    Output: L\n    Explanation: The grid contains only the lab, so no free cells exist to be marked.\n\n    Test case with all cells blocked except the lab:\n    Input: 3 3 ### #L# ###\n    Output: ### #L# ###\n    Explanation: All cells are blocked except the lab, so no free cells can be marked.\n\n    Test case with a grid where all free cells are isolated by blocked cells:\n    Input: 3 3 .#. #L# .#.\n    Output: .#. #L# .#.\n    Explanation: Free cells are isolated by blocked cells, so no path exists to reach the lab.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The BFS logic inherently handles these scenarios by not marking unreachable free cells.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 159, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers n and m (1 \u2264 n, m \u2264 10^6; n \u22c5 m \u2264 10^6) \u2014 the number of rows and the number of columns in the grid.\n\nThe i-th of the next n lines provides a description of the i-th row of the grid. It consists of m elements of one of three types: \n\n  * '.' \u2014 the cell is free; \n  * '#' \u2014 the cell is blocked; \n  * 'L' \u2014 the cell contains a lab. \n\n\n\nThe grid contains exactly one lab. The sum of n \u22c5 m over all testcases doesn't exceed 10^6.\n\nOutput\n\nFor each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells (marked with a dot) with a plus sign ('+') for the cells that the robot can be forced to reach the lab from. Print the resulting grid.\n\nExample\n\nInput\n\n\n4\n3 3\n...\n.L.\n...\n4 5\n#....\n..##L\n...#.\n.....\n1 1\nL\n1 9\n....L..#.\n\n\nOutput\n\n\n...\n.L.\n...\n#++++\n..##L\n...#+\n...++\nL\n++++L++#.\n\nNote\n\nIn the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that's not a corner. Now consider a non-corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner.\n\nIn the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.", "mutate_method": "expand_one2two", "parent_index": 90}
