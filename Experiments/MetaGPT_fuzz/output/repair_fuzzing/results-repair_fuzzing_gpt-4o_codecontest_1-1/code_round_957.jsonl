{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations. Your task is to find the three integers that make up the original array a given the sorted list b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations. Your task is to find the three integers that make up the original array a given the sorted list b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, and 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations. Your task is to find the three integers that make up the original array a given the sorted list b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations. Your task is to find the three integers that make up the original array a given the sorted list b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a1\n        a1 = b[0]\n        # The second smallest element in b is a2\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements a1, a2, and a3\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is the smallest number in the original array\n    a1 = b[0]\n    # The largest element in b is the sum of all three numbers in the original array\n    sum_all = b[6]\n    # The second number in the original array is found by subtracting the smallest number from the second smallest sum\n    a2 = b[1] - a1\n    # The third number in the original array is found by subtracting the first two numbers from the largest sum\n    a3 = sum_all - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restore the original array of 3 integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, each containing the restored original array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The largest element in b is the sum of all three original integers\n        sum_a = b[-1]\n        # Deduce the other two integers using the second smallest and second largest elements\n        a2 = b[1]\n        a3 = sum_a - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a of 3 integers from the sorted array b of 7 integers.\n\n    Args:\n        b: A list of 7 integers sorted in non-decreasing order.\n\n    Returns:\n        A list of 3 integers representing the original array a.\n    \"\"\"\n    # The largest number in b is the sum of all three numbers in a.\n    largest_sum = b[-1]\n    \n    # The smallest number in b is one of the original numbers in a.\n    smallest_number = b[0]\n    \n    # The second smallest number in b is another original number in a.\n    second_smallest_number = b[1]\n    \n    # Deduce the third number by subtracting the smallest and second smallest numbers from the largest number.\n    third_number = largest_sum - smallest_number - second_smallest_number\n    \n    # Return the original array a.\n    return [smallest_number, second_smallest_number, third_number]\n\ndef main():\n    \"\"\"Main function to handle multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from the properties of b\n        a1 = b[0]  # The smallest element in b is the smallest element in a\n        a3 = b[-1] - a1  # The largest element in b minus a1 gives the largest element in a\n        a2 = b[-2] - a3  # The second largest element in b minus a3 gives the second largest element in a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a of 3 integers from the sorted array b of 7 integers.\n\n    Args:\n        b: A list of 7 integers sorted in non-decreasing order.\n\n    Returns:\n        A list of 3 integers representing the original array a.\n    \"\"\"\n    # The largest number in b is the sum of all three numbers in a\n    sum_all = b[-1]\n    \n    # The smallest number in b is one of the original numbers in a\n    smallest = b[0]\n    \n    # The other two numbers can be deduced from the largest number and the next two largest numbers\n    # Since b is sorted, the second largest number is the sum of two of the numbers in a\n    second_largest = b[-2]\n    \n    # The third largest number is the sum of the other two numbers in a\n    third_largest = b[-3]\n    \n    # Deduce the original numbers\n    a1 = smallest\n    a2 = third_largest - smallest\n    a3 = second_largest - smallest\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing the restored original array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The second smallest element in b is another original integer\n        a2 = b[1]\n        # The largest element in b is the sum of all three original integers\n        sum_all = b[-1]\n        # Deduce the third integer by subtracting the two smallest integers from the largest sum\n        a3 = sum_all - (a1 + a2)\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of 7 integers.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The second smallest element in b is another original integer\n        a2 = b[1]\n        # The largest element in b is the sum of all three original integers\n        sum_all = b[6]\n        # Deduce the third integer\n        a3 = sum_all - (a1 + a2)\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted array b.\n\n    Returns:\n        A list of lists, where each inner list contains the three integers of the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The largest element in b is the sum of all three original integers\n        sum_all = b[-1]\n        # Deduce the other two integers\n        a2 = b[1]  # The second smallest element in b\n        a3 = sum_all - a1 - a2  # Calculate the third integer\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the three integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements\n        a1 = b[0]\n        # The second smallest element in b is another original element\n        a2 = b[1]\n        # The largest element in b is the sum of all three original elements\n        a1_a2_a3 = b[6]\n        \n        # Deduce the third original element\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires reconstructing an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly, and any valid solution for a test case is acceptable.\nrequirement pool:\n- Efficiently reconstruct the original array from the given sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the output is correctly formatted for each test case.\n- Provide a solution that is easy to understand and maintain.\n- Consider edge cases and ensure robustness of the solution.\nWe will leverage the fact that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three original elements. By using these two facts, we can deduce the original array a. Specifically, the three elements of a can be found as follows: a1 is the smallest element in b, a2 is the second smallest element in b, and a3 can be found by subtracting a1 and a2 from the largest element in b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all three original elements'\n    Explanation: The largest element in b is the sum of all three elements in a. This can be implemented in code by identifying the last element of the sorted array b.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in b is one of the original elements in a. This can be implemented by selecting the first element of the sorted array b.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify a1 as the first element of b (smallest).\n3. Identify a2 as the second element of b (second smallest).\n4. Identify a3 by subtracting a1 and a2 from the last element of b (sum of all three elements).\n5. Output a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: The smallest and second smallest elements are both 1, and the sum of all three is 3, so a = [1, 1, 1].\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the sum of all three is 5, so a = [1, 2, 2].\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: The smallest and second smallest elements are both 1000000000, and the sum of all three is 3000000000, so a = [1000000000, 1000000000, 1000000000].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted array b and its relationship to array a.\n", "requirement analysis:\nThe task requires reconstructing an original array of three integers from a given sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Develop an algorithm to restore the original array from the given sums.\n- Ensure the solution can handle up to 5000 test cases efficiently.\n- Optimize the algorithm for large integer values.\n- Provide clear and correct output formatting.\n- Consider edge cases and ensure robustness.\nWe will use a simple mathematical approach to deduce the original array from the given sorted list of sums. The smallest element in the list is the smallest number in the original array. The largest element is the sum of all three numbers. By subtracting the smallest element from the second smallest sum, we can find the second number. The third number can be found by subtracting the first two numbers from the largest sum. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The sums of the subsequences are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': refers to the smallest number in the original array a, which is the first element in the sorted array b.\n    \n    'largest': refers to the sum of all three numbers in the original array a, which is the last element in the sorted array b.\n\n# [code logic]\n    1. Identify the smallest number in array a as the first element of array b.\n    2. Identify the sum of all three numbers in array a as the last element of array b.\n    3. Calculate the second number in array a by subtracting the smallest number from the second smallest sum in array b.\n    4. Calculate the third number in array a by subtracting the first two numbers from the largest sum.\n\n# [edge case] \n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest number is 1, and the largest sum is 1000000000. The second number is found by subtracting the smallest number from the second smallest sum (2 - 1 = 1). The third number is found by subtracting the first two numbers from the largest sum (1000000000 - 999999998 - 1 = 1).\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each number in array a is equal to the smallest number in array b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest number is 1, and the largest sum is 5. The second number is found by subtracting the smallest number from the second smallest sum (2 - 1 = 1). The third number is found by subtracting the first two numbers from the largest sum (5 - 1 - 2 = 2).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases correctly by using mathematical deductions based on sorted sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must handle multiple test cases efficiently and ensure the output format is consistent with the requirements. Performance optimization is crucial due to the potential size of input data.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Ensure the solution handles large numbers and multiple test cases efficiently.\n- Optimize the code for performance to handle the upper limit of input constraints.\n- Design the output format to be clear and concise.\n- Test the solution against edge cases to ensure robustness.\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can deduce the original integers efficiently. We will use Python's built-in capabilities to handle large integers and ensure the solution is optimized for multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb]\n    'smallest': Refers to the smallest integer in the array b, which is one of the original integers in array a.\n    'largest': Refers to the largest integer in the array b, which is the sum of all three integers in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the integers in array a.\n2. Identify the largest element in array b, which is the sum of all three integers in array a.\n3. Use the second smallest and second largest elements in array b to deduce the other two integers in array a.\n4. Return the three integers as the original array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums are consistent with the pattern described.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers are handled correctly, and their sums match the pattern.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is one of the original integers, and the largest element is the sum of all three integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying the smallest and largest elements and deducing the other integers based on their sums.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure the output is correctly formatted for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums\n- Ensure the solution handles large numbers efficiently\n- Optimize the solution for scalability across multiple test cases\n- Provide clear and accurate output formatting\n- Include error handling for edge cases\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the largest number in b is the sum of all three numbers in a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third number can be deduced by subtracting the smallest and second smallest numbers from the largest number. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationships are present in the requirement.\n\n# [degree adverb] \n    No degree adverbs are present in the requirement.\n\n# [code logic]\n1. Identify the largest number in array b, which is the sum of all three numbers in array a.\n2. Identify the smallest number in array b, which is one of the original numbers in array a.\n3. Identify the second smallest number in array b, which is another original number in array a.\n4. Deduce the third number by subtracting the smallest and second smallest numbers from the largest number.\n5. Return these three numbers as the original array a.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: The smallest and second smallest numbers are both 1, and the largest number is 3. The third number is deduced as 3 - 1 - 1 = 1.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: The smallest and second smallest numbers are both 1000000000, and the largest number is 3000000000. The third number is deduced as 3000000000 - 1000000000 - 1000000000 = 1000000000.\n    \n    b = [5, 5, 5, 10, 10, 10, 15] = 5 5 5\n    Explanation: The smallest and second smallest numbers are both 5, and the largest number is 15. The third number is deduced as 15 - 5 - 5 = 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest numbers and deducing the third number will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed. The constraints on input values and the guarantee of at least one valid solution simplify the problem scope.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure output format is correct\n- Optimize for large input values\n- Handle multiple test cases efficiently\n- Provide clear documentation for the solution\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently. We will use basic list operations and arithmetic to achieve this, ensuring the solution is both simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next, meaning it is in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of elements and summing them.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified values to deduce the original elements of a:\n   - Let a1 be the smallest element in b.\n   - Let a3 be the largest element in b minus a1.\n   - Let a2 be the second largest element in b minus a3.\n5. Return the values a1, a2, and a3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so each element of a is equal to the smallest element in b.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the largest sum is 7, and the second largest sum is 6. Thus, a can be deduced as 1, 2, and 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each element of a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using properties of sorted array b to deduce array a.\n", "requirement analysis:\nThe task requires restoring the original array from the given sums of its subsequences. The solution must efficiently handle multiple test cases and large numbers, ensuring clarity and accuracy in the output.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Ensure scalability for up to 5000 test cases\n- Handle large numbers up to 10^9 efficiently\n- Provide clear and accurate output for each test case\n- Optimize resource usage for large inputs\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the largest number in b is the sum of all three numbers in a. The smallest number in b is one of the original numbers. By using these observations, we can efficiently compute the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'largest': The largest number in array b is the sum of all three numbers in array a.\n\n# [code logic]\n1. Identify the largest number in array b, which represents the sum of all three numbers in array a.\n2. Identify the smallest number in array b, which is one of the original numbers in array a.\n3. Use the largest number and the next two largest numbers to deduce the other two numbers in array a.\n4. Return the three numbers as the original array a.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: The smallest number is 1, and the largest number is 3, which is the sum of all three numbers (1+1+1).\n\n    Input: 2 2 2 4 4 4 6\n    Output: 2 2 2\n    Explanation: The smallest number is 2, and the largest number is 6, which is the sum of all three numbers (2+2+2).\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: The smallest number is 1000000000, and the largest number is 3000000000, which is the sum of all three numbers (1000000000+1000000000+1000000000).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by identifying the smallest and largest numbers and deducing the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array for each test case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Optimize the solution for large integer values\n- Provide clear and formatted output for each test case\n- Consider edge cases and validate input constraints\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences of an array of three integers and restores the original array. The key observation is that the smallest element in the sorted list is one of the original integers, the second smallest is another, and the largest element is the sum of all three original integers. Using these observations, we can deduce the original integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the original array a. In code, this can be implemented by calculating all possible sums of combinations of the elements in a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in the sorted list b is the sum of all three integers in the original array a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the integers in a.\n    2. Identify the second smallest element in b, which corresponds to another integer in a.\n    3. Identify the largest element in b, which is the sum of all three integers in a.\n    4. Deduce the third integer by subtracting the two smallest integers from the largest sum.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest two numbers are 1 and 1, and the largest number is 1000000000, which is the sum of all three numbers. Therefore, the third number is 1000000000 - (1 + 1) = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each number in a is 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 5, which is the sum of all three numbers. Therefore, the third number is 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest two numbers and subtracting them from the largest sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration and optimal performance.\nrequirement pool:\n- Implement the main algorithm to restore the original array\n- Optimize the solution for handling large input sizes\n- Ensure the output format is clear and concise\n- Test the solution against edge cases\n- Provide documentation for the solution\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can deduce the original integers efficiently without needing complex data structures. We will use basic list operations to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the original integers in a.\n2. Identify the largest element in b, which is the sum of all three integers in a.\n3. Use the smallest and largest elements to deduce the other two integers by considering the properties of sums of subsequences:\n   - The second smallest element in b is another integer from a.\n   - The third smallest element in b is the sum of the two smallest integers from a.\n4. Deduce the three integers by solving these equations:\n   - Let a1 be the smallest element in b.\n   - Let a2 be the second smallest element in b.\n   - Let a3 be the largest element minus (a1 + a2).\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is one of the original integers. The largest element is 8, which is the sum of all three integers. The second smallest element is 3, and the third smallest is 4, which helps deduce the other integers.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest is 2, and the third smallest is 3, which helps deduce the other integers.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, indicating that all original integers are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using properties of sums and sorted order.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Implement the main algorithm to reconstruct the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate the input to ensure it meets the problem constraints.\n- Format the output correctly for each test case.\n- Optimize the solution for speed and memory usage.\nWe will use the property that the smallest element in the sorted array b is one of the original integers, and the largest element is the sum of all three original integers. By using these properties, we can deduce the original array a by considering the combinations of sums in b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of every possible combination of elements from the array a, excluding the empty set. In code, this can be implemented by iterating over all possible combinations of the elements in a and calculating their sums.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b is one of the original integers from a, and the largest element in b is the sum of all three integers in a. In code, this can be implemented by accessing the first and last elements of the sorted array b.\n\n# [code logic]\n1. Identify the smallest element in b, which is one of the original integers in a.\n2. Identify the largest element in b, which is the sum of all three integers in a.\n3. Use these two identified values to deduce the other two integers by considering the combinations of sums in b.\n4. Return the three integers as the original array a.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest element is 8. The other two integers can be deduced by considering the sums that include 1 and result in 8.\n    \n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, and the largest element is 5. The other two integers can be deduced by considering the sums that include 1 and result in 5.\n    \n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each integer in a is equal to the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest and largest elements and deducing the other integers based on their sums inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Ensure the solution is scalable for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide clear and accurate output for each test case\n- Allow for multiple valid outputs if applicable\nWe will solve this problem by recognizing that the smallest element in the sorted array b is one of the original elements a1, a2, or a3. The largest element in b is the sum of all three original elements. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a. We will iterate over each test case, extract the necessary elements from b, and compute the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum of each possible combination of elements from the array a. In code, this involves iterating over combinations and summing their elements.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in b is the sum of all three elements in a. In code, this is simply the last element in the sorted array b.\n\n# [code logic]\n    - For each test case:\n      - Identify the smallest element in b as one of the original elements (a1, a2, or a3).\n      - Identify the largest element in b as the sum of all three original elements.\n      - Identify the second largest element in b as the sum of the two largest elements.\n      - Deduce the original array a using these observations.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, leading to repeated sums. The smallest element is one of the original elements, and the largest is the sum of all three identical elements.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is one of the original elements, and the largest is the sum of all three. The second largest is the sum of two largest elements.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are identical, leading to repeated sums. The smallest element is one of the original elements, and the largest is the sum of all three identical elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted subsequence sums.\n"], "scores": [], "pass_results": [true, true, true, true, false, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 957, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 597}
