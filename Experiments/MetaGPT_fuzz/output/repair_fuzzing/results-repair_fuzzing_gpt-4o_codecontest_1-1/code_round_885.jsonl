{"name": "1615_A. Closing The Gap", "description": "There are n block towers in a row, where tower i has a height of a_i. You're part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation:\n\n  * Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "tags": ["greedy", "math"], "difficulty": 7, "id": 1615, "sample_io": [{"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}], "test_list": [{"input": "3\n3\n10 10 10\n4\n3 2 0 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 0 2 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n4 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 2 1 4\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 -1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 0 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n6 2 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n4 2 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n4 0 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 0 2 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n2 0 2 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 3 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n3 2 0 2\n5\n1 4 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 2 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n2 0 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n1 0 2 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n2 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 0 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 20 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 2 0 2\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n17 9 10\n4\n4 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 0 2 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 2 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 2\n5\n1 3 3 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 2\n5\n1 1 3 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n17 9 10\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 3 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 2 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 1 2\n5\n1 2 3 -1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n9 20 10\n4\n3 0 1 2\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 2\n5\n1 3 6 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 2\n5\n1 1 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n24 9 10\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 1 2\n5\n1 2 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 0 1 2\n5\n0 3 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 2\n5\n0 3 6 1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 4\n5\n1 1 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n24 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 3 1 2\n5\n1 2 1 -1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 0 4\n5\n1 1 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n40 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 3 1 0\n5\n1 2 1 -1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 10\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 3\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 10 9\n4\n2 0 0 4\n5\n1 1 4 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n40 9 18\n4\n3 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 5\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 10 9\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n16 5 4\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 4\n4\n3 3 1 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n2 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n16 7 4\n4\n3 3 1 3\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n1 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 1 9\n4\n1 0 0 6\n5\n1 1 4 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 6\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 11\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 1 11\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 1 11\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 11\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 6\n5\n0 3 10 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 6\n5\n0 3 2 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 5 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 4 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 16 10\n4\n3 2 0 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n6 2 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 2 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 0 4 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n2 0 0 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 1 10\n4\n3 2 0 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 13 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n6 2 1 0\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n4 2 1 4\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n2 0 2 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 4\n5\n2 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 2 0 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 0 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 3 3 0 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 20 10\n4\n3 2 1 2\n5\n0 2 3 1 0\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n7 5 10\n4\n6 1 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 1 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n17 9 8\n4\n4 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 0\n5\n2 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 20\n4\n4 1 1 2\n5\n2 1 3 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n1 3 2 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 -1 9\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 2 1 0\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 3\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 2 3 0 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 10 7\n4\n2 0 1 2\n5\n1 1 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n17 9 10\n4\n1 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 14 10\n4\n4 1 1 2\n5\n2 1 3 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 2 2\n5\n1 8 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 0 1 2\n5\n0 2 3 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 3 0 2\n5\n1 3 6 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 3\n5\n1 4 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n24 9 7\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 1 2\n5\n2 2 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 -1 1 2\n5\n0 3 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 5 0\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 4\n5\n1 1 4 0 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n24 9 15\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n2 3 1 2\n5\n1 2 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 8 10\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 2\n5\n0 4 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 0 4\n5\n1 2 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n36 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n16 5 10\n4\n3 3 0 1\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 3\n5\n0 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 10 9\n4\n2 0 0 1\n5\n1 1 4 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n41 9 18\n4\n3 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 6 5\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n11 10 13\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 4\n4\n3 3 0 5\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n2 0 0 4\n5\n1 1 4 0 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 2 9\n4\n4 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 7 4\n4\n6 3 1 3\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n11 1 10\n4\n1 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 7 7\n4\n3 3 1 6\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 13\n5\n0 3 6 1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 0 11\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n3 6 4\n4\n6 3 1 11\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 9\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n4 7 4\n4\n6 3 1 6\n5\n0 3 2 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 4 1 2\n5\n1 2 5 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n3 10 10\n4\n3 2 1 2\n5\n1 2 4 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 16 10\n4\n1 2 0 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n6 2 2 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 2 1 2\n5\n1 2 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 4\n5\n1 0 4 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 9 10\n4\n0 0 1 2\n5\n2 0 0 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 1 10\n4\n3 4 0 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 13 0\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n15 10 10\n4\n2 0 2 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 0 4\n5\n2 0 2 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 0 1 2\n5\n1 2 3 2 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n13 0 10\n4\n3 2 0 2\n5\n1 3 3 0 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 20 10\n4\n3 0 1 2\n5\n0 2 3 1 0\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n7 5 10\n4\n6 1 1 2\n5\n1 2 3 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 1 1 2\n5\n1 2 3 2 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n17 9 8\n4\n4 0 1 3\n5\n1 0 5 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 0\n5\n4 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 17 20\n4\n4 1 1 2\n5\n2 1 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n1 2 2 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n13 0 10\n4\n3 2 0 2\n5\n1 2 3 -1 9\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 2 0 0\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n4 5 10\n4\n3 3 0 3\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 2 3 -1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 10 7\n4\n2 0 1 2\n5\n1 1 3 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 14 10\n4\n4 1 1 2\n5\n2 1 3 1 10\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n13 10 10\n4\n0 3 2 2\n5\n1 8 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 31 10\n4\n3 0 1 2\n5\n0 2 3 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 1 3\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n15 9 7\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 0 1 2\n5\n2 2 1 -1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n6 5 0\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 9\n4\n2 0 1 4\n5\n1 1 4 0 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 0 10\n4\n2 3 1 2\n5\n1 0 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 8 10\n4\n3 3 0 3\n5\n1 3 6 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 15\n4\n2 0 0 4\n5\n1 2 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 10\n4\n3 3 0 1\n5\n0 3 2 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 16\n4\n7 1 2 3\n5\n0 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 6 5\n4\n3 3 -1 3\n5\n0 3 6 1 5\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n11 12 13\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n11 2 4\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 2 9\n4\n4 0 0 2\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 7 4\n4\n6 3 1 3\n5\n0 0 6 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n11 1 10\n4\n1 0 0 1\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 14 7\n4\n3 3 1 6\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 13\n5\n0 2 6 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 0 14\n5\n0 3 6 1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n3 6 4\n4\n6 3 1 11\n5\n1 3 10 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n3 4 1 2\n5\n1 2 5 0 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 19\n4\n6 2 2 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 2 1 2\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 4\n5\n0 0 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n-1 0 1 2\n5\n2 0 0 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 1 10\n4\n3 4 0 2\n5\n1 2 3 0 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 13 0\n4\n3 2 1 1\n5\n0 2 3 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n9 10 10\n4\n2 0 2 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 0 0 4\n5\n2 0 2 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 0 1 2\n5\n1 2 3 2 7\n", "output": ["0\n1\n0\n"]}], "task_id": "codecontest/119", "prompt": "There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew wanting to make the buildings look as nice as possible. In a single day, you can perform the following operation: Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j, which essentially decreases a_i by 1 and increases a_j by 1. You think the ugliness of the buildings is the height difference between the tallest and shortest buildings, and formally, the ugliness is defined as max(a)-min(a). What's the minimum possible ugliness you can achieve, after any number of days? Explain how your approach minimizes the ugliness effectively.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "repair_prompt": ["There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew wanting to make the buildings look as nice as possible. In a single day, you can perform the following operation: Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j, which essentially decreases a_i by 1 and increases a_j by 1. You think the ugliness of the buildings is the height difference between the tallest and shortest buildings, and formally, the ugliness is defined as max(a)-min(a). What's the minimum possible ugliness you can achieve, after any number of days? Explain how your approach minimizes the ugliness effectively.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew wanting to make the buildings look as nice as possible. In a single day, you can perform the following operation: Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j). You can move a block from tower i to tower j; this operation essentially decreases a_i by 1 and increases a_j by 1. You think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). What's the minimum possible ugliness you can achieve, after any number of days? Explain how your approach minimizes the ugliness effectively.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew wanting to make the buildings look as nice as possible. In a single day, you can perform the following operation: Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j, which essentially decreases a_i by 1 and increases a_j by 1. You think the ugliness of the buildings is the height difference between the tallest and shortest buildings, formally defined as max(a)-min(a). What's the minimum possible ugliness you can achieve, after any number of days? Explain how your approach minimizes the ugliness effectively.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        total_blocks = sum(heights)\n        num_towers = len(heights)\n        average_height = total_blocks // num_towers\n        remainder = total_blocks % num_towers\n        \n        # If remainder is 0, all towers can be perfectly balanced\n        # If remainder is not 0, the minimum ugliness is 1\n        min_ugliness = 0 if remainder == 0 else 1\n        results.append(min_ugliness)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input and output the results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    # Calculate and print results\n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of the buildings.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    \n    for heights in test_cases:\n        # Sort the heights to easily find the min and max\n        heights.sort()\n        \n        # Calculate the initial ugliness\n        min_height = heights[0]\n        max_height = heights[-1]\n        ugliness = max_height - min_height\n        \n        # If the difference is already 0 or 1, it's the minimum possible ugliness\n        if ugliness <= 1:\n            results.append(ugliness)\n            continue\n        \n        # Calculate the minimum possible ugliness\n        # Since we can always redistribute to make the difference at most 1\n        results.append(1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of building heights.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        # Calculate the total number of blocks\n        total_blocks = sum(heights)\n        # Number of buildings\n        n = len(heights)\n        # Calculate the average height\n        average_height = total_blocks // n\n        # Calculate the remainder\n        remainder = total_blocks % n\n        # Minimum possible ugliness is 1 if there is a remainder, otherwise 0\n        min_ugliness = 1 if remainder > 0 else 0\n        results.append(min_ugliness)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        heights = list(map(int, input().strip().split()))\n        test_cases.append(heights)\n    \n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing the heights of the towers.\n\n    Returns:\n        List[int]: A list of minimum possible ugliness values for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_height = sum(heights)\n        \n        # Check if the total height is divisible by the number of towers\n        if total_height % n == 0:\n            # If divisible, all towers can be made equal\n            results.append(0)\n        else:\n            # If not divisible, the best we can achieve is a difference of 1\n            results.append(1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_height = sum(heights)\n        \n        # Determine if the total height is divisible by the number of towers\n        if total_height % n == 0:\n            results.append(0)  # Ugliness can be reduced to 0\n        else:\n            results.append(1)  # Ugliness can be reduced to 1\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing the heights of the towers.\n\n    Returns:\n        List[int]: A list of minimum possible ugliness values for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        total_blocks = sum(heights)\n        num_towers = len(heights)\n        \n        # Calculate the average height\n        average_height = total_blocks // num_towers\n        \n        # Calculate the remainder\n        remainder = total_blocks % num_towers\n        \n        # If remainder is 0, all towers can be made equal, ugliness is 0\n        # If remainder is not 0, the minimum ugliness is 1\n        if remainder == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        cases.append(heights)\n\n    # Call the function\n    results = minimum_ugliness(t, cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of buildings.\n\n    Returns:\n        List[int]: List of minimized ugliness values for each test case.\n    \"\"\"\n    results = []\n    \n    for heights in test_cases:\n        # Sort the heights to easily access the tallest and shortest buildings\n        heights.sort()\n        \n        # Calculate the initial ugliness\n        initial_ugliness = heights[-1] - heights[0]\n        \n        # Since we can redistribute blocks freely, the minimum possible ugliness is 0 or 1\n        # If all buildings have the same height, ugliness is 0\n        # If there are at least two different heights, the minimum ugliness is 1\n        if initial_ugliness == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        remainder = total_blocks % n\n\n        # Calculate the minimum possible ugliness\n        # If remainder is 0, all towers can be made equal\n        # If remainder is not 0, the difference will be 1\n        min_ugliness = 1 if remainder != 0 else 0\n        results.append(min_ugliness)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        total_blocks = sum(heights)\n        n = len(heights)\n        average_height = total_blocks // n\n        # Calculate the number of towers that need to be one block taller than the average\n        extra_blocks = total_blocks % n\n        # The minimum ugliness is determined by the difference between the tallest and shortest towers\n        # after redistribution, which is either 0 or 1.\n        min_ugliness = 1 if extra_blocks > 0 else 0\n        results.append(min_ugliness)\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    # Output interface\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum ugliness values for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        total_blocks = sum(heights)\n        num_towers = len(heights)\n        \n        # Calculate average height and remainder\n        average_height = total_blocks // num_towers\n        remainder = total_blocks % num_towers\n        \n        # Determine minimum ugliness\n        if remainder == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    # Call the function and print results\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe main requirement is to minimize the ugliness of the building heights by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases, each with up to 100 buildings. The approach should ensure that the difference between the tallest and shortest buildings is minimized, ideally to zero if possible.\nrequirement pool:\n- Implement an algorithm to minimize the height difference between the tallest and shortest buildings.\n- Ensure the solution can handle up to 1000 test cases efficiently.\n- Provide a clear explanation of how the solution works.\n- Optimize the algorithm for large input sizes.\n- Consider edge cases where all buildings are already of equal height.\nWe will use a simple approach to minimize the ugliness by redistributing blocks between towers. The key idea is to balance the heights by moving blocks from the tallest tower to the shortest tower until the difference is minimized. This can be efficiently achieved by calculating the average height and adjusting the towers accordingly. We will use basic Python operations and avoid complex data structures to ensure the solution is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to balance their heights.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': This means we need to find the smallest value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb] \n    'minimum': This indicates that we need to achieve the smallest possible difference between the tallest and shortest towers.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Compute the average height by dividing the total number of blocks by the number of towers.\n4. Determine the minimum possible ugliness by checking if all towers can be adjusted to have heights close to the average.\n5. The minimum ugliness is either 0 (if all towers can be perfectly balanced) or 1 (if there is a remainder when dividing blocks).\n\n# [edge case] \n    Case 1: All towers have the same height initially.\n    Input: [5, 5, 5, 5]\n    Expected Output: 0\n    Explanation: No redistribution is needed as all towers are already balanced.\n\n    Case 2: Towers have heights that can be perfectly balanced.\n    Input: [3, 3, 3, 3, 3]\n    Expected Output: 0\n    Explanation: All towers are already balanced.\n\n    Case 3: Towers have heights that cannot be perfectly balanced.\n    Input: [1, 2, 3]\n    Expected Output: 1\n    Explanation: The average height is not an integer, so the minimum possible ugliness is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the average and checking for perfect balance inherently handles these cases.\n", "requirement analysis:\nThe problem requires determining the minimum possible ugliness of building heights after redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases, with each test case having up to 100 buildings. The key is to balance the heights by moving blocks from taller to shorter towers until the difference between the tallest and shortest is minimized.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the algorithm for large input sizes.\n- Provide detailed comments and explanations in the code.\n- Include edge case handling and validation.\nWe will use a greedy approach to minimize the ugliness by redistributing blocks from the tallest tower to the shortest tower until the difference between the tallest and shortest is minimized. The key observation is that the minimum possible ugliness is achieved when the difference between the maximum and minimum heights is at most 1, which can be done by redistributing blocks to balance the heights as evenly as possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to minimize the height difference.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness'\n    Explanation: This means achieving the smallest possible value for max(a) - min(a) through redistribution of blocks.\n\n# [degree adverb]\n    'minimum'\n    Explanation: The goal is to reduce the ugliness to the smallest possible value, ideally 0 or 1.\n\n# [code logic]\n    1. For each test case, read the number of buildings and their heights.\n    2. Calculate the initial ugliness as max(a) - min(a).\n    3. While the difference between the tallest and shortest building is greater than 1:\n        - Identify the tallest and shortest buildings.\n        - Move a block from the tallest to the shortest building.\n        - Update the heights and recalculate max(a) and min(a).\n    4. Once the difference is at most 1, record the ugliness.\n    5. Output the minimum possible ugliness for each test case.\n\n# [edge case]\n    Case 1: n = 2, heights = [1, 1] = 0\n    Explanation: Both buildings have the same height, so the ugliness is already minimized to 0.\n\n    Case 2: n = 3, heights = [1, 1, 10] = 1\n    Explanation: Redistribute blocks from the tallest building to others until the difference is at most 1.\n\n    Case 3: n = 4, heights = [5, 5, 5, 5] = 0\n    Explanation: All buildings have equal height, so no redistribution is needed, and ugliness is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks until the difference is at most 1 will handle all cases effectively.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest towers by redistributing blocks between them. The solution should efficiently handle up to 1000 test cases, each with up to 100 towers, and provide the minimum possible ugliness for each test case.\nrequirement pool:\n- Implement an algorithm to minimize the height difference between towers.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for large input sizes.\n- Document the approach and operations used to achieve the solution.\nWe will use a greedy approach to minimize the height difference between the tallest and shortest towers. By redistributing blocks from the tallest tower to the shortest tower iteratively, we can achieve the minimum possible ugliness. The approach will efficiently handle multiple test cases using simple list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving a block from one tower to another to minimize the height difference.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness'\n    Explanation: This means achieving the smallest possible value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb] \n    'tallest', 'shortest'\n    Explanation: These refer to the maximum and minimum values in the list of building heights, respectively. In code, this can be implemented using the `max()` and `min()` functions.\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Calculate the total number of blocks by summing up all building heights.\n3. Determine the average height by dividing the total number of blocks by the number of buildings.\n4. Calculate the minimum possible ugliness as the difference between the ceiling of the average height and the floor of the average height.\n5. Output this minimum possible ugliness for each test case.\n\n# [edge case] \n    Case 1: All buildings have the same height.\n    Input: [10, 10, 10]\n    Expected Output: 0\n    Explanation: No redistribution is needed as all buildings are already of equal height.\n\n    Case 2: Only two buildings with different heights.\n    Input: [1, 10000000]\n    Expected Output: 0\n    Explanation: Blocks can be moved from the taller to the shorter building until they are equal.\n\n    Case 3: Heights are already in a balanced state.\n    Input: [2, 2, 2, 2]\n    Expected Output: 0\n    Explanation: All buildings are already balanced with equal heights.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks based on average height will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest towers by redistributing blocks between them. The solution should efficiently handle up to 1000 test cases with up to 100 towers each, ensuring the output is clear and concise.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Optimize the solution for large inputs.\n- Ensure the code is easy to understand and maintain.\n- Provide clear and concise output for each test case.\n- Test the solution against edge cases.\nWe will calculate the minimum possible ugliness by redistributing blocks such that the difference between the maximum and minimum heights is minimized. The key observation is that the minimum possible ugliness is either 0 or 1. If the sum of the heights is divisible by the number of towers, we can make all towers equal, resulting in an ugliness of 0. Otherwise, the best we can achieve is to have the maximum and minimum heights differ by 1, resulting in an ugliness of 1.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to minimize the height difference between towers.\n\n# [phrase showing quantity relationship]\n    'difference between the maximum and minimum heights'\n    Explanation: This refers to the calculation of max(a) - min(a) to determine the ugliness. In code, this can be implemented using `max(heights) - min(heights)`.\n\n# [degree adverb]\n    'minimum possible ugliness'\n    Explanation: This means achieving the smallest possible value for the ugliness, ideally 0 or 1. In code, this involves checking if the sum of heights is divisible by the number of towers.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the total sum of heights.\n3. Check if the sum of heights is divisible by the number of towers:\n   - If divisible, set ugliness to 0 (all towers can be made equal).\n   - If not divisible, set ugliness to 1 (the best achievable difference between max and min heights).\n4. Output the calculated ugliness for each test case.\n\n# [edge case]\n    Test case with all towers having equal height:\n    Input: 3\n           5\n           7 7 7 7 7\n    Expected output: 0\n    Explanation: All towers are already equal, so ugliness is 0.\n\n    Test case with two towers having maximum and minimum heights:\n    Input: 2\n           2\n           1 10\n    Expected output: 1\n    Explanation: The best achievable ugliness is 1 by redistributing blocks.\n\n    Test case with a single tower:\n    Input: 1\n           1\n           5\n    Expected output: 0\n    Explanation: With only one tower, there is no height difference, so ugliness is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking divisibility and handling single tower cases naturally.\n", "requirement analysis:\nThe main requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks. The solution should efficiently handle up to 1000 test cases with building heights up to 10^7. The output must be a single integer representing the minimum possible ugliness for each test case.\nrequirement pool:\n- Implement an efficient algorithm to minimize ugliness.\n- Ensure the solution handles up to 1000 test cases.\n- Provide a clear explanation of the approach used.\n- Optimize for large input sizes.\n- Include detailed comments in the code for clarity.\nWe will use a simple approach to minimize the ugliness by redistributing the blocks such that the difference between the maximum and minimum heights is minimized. The key observation is that the minimum possible ugliness is either 0 or 1. If the sum of the heights is divisible by the number of towers, we can make all towers equal, resulting in an ugliness of 0. Otherwise, the best we can achieve is to have the maximum and minimum differ by 1, resulting in an ugliness of 1. This approach is efficient and handles the constraints well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing the blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to minimize the height difference.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness'\n    Explanation: This refers to achieving the smallest possible value for max(a) - min(a) after redistributing blocks. In code, this can be implemented by checking if the sum of heights is divisible by the number of towers.\n\n# [degree adverb]\n    'minimum'\n    Explanation: The smallest value that can be achieved for ugliness, which is either 0 or 1. In code, this is determined by checking divisibility and adjusting heights accordingly.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the total sum of all tower heights.\n3. Determine if the total sum is divisible by the number of towers:\n   - If divisible, all towers can be made equal, resulting in an ugliness of 0.\n   - If not divisible, the best achievable ugliness is 1.\n4. Output the minimum possible ugliness for each test case.\n\n# [edge case]\n    Case 1: n = 2, heights = [1, 1] = 0\n    Explanation: Both towers are already equal, so the ugliness is 0.\n\n    Case 2: n = 3, heights = [1, 1, 2] = 1\n    Explanation: The sum of heights is 4, which is not divisible by 3. The best achievable ugliness is 1.\n\n    Case 3: n = 4, heights = [1, 1, 1, 4] = 1\n    Explanation: The sum of heights is 7, which is not divisible by 4. The best achievable ugliness is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking divisibility and adjusting heights accordingly will handle these cases effectively.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases with up to 100 buildings each, ensuring the output is clear and concise.\nrequirement pool:\n- Implement algorithm to minimize ugliness efficiently.\n- Ensure solution scalability for large inputs.\n- Provide clear and concise output format.\n- Optimize for quick processing of multiple test cases.\n- Enhance user interface for better understanding.\nWe will implement a function that calculates the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights of the towers. By redistributing blocks, we can make all towers as equal in height as possible, thus minimizing the difference. The approach involves sorting the heights and calculating the difference between the maximum and minimum heights after potential redistribution.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to minimize the height difference between towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': This means finding the smallest value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb] \n    'minimum': This indicates that we need to achieve the smallest possible value for ugliness, which is the difference between the tallest and shortest towers.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Determine the average height by dividing the total number of blocks by the number of towers.\n4. Calculate the minimum possible ugliness by considering the remainder when dividing the total blocks by the number of towers. If there is no remainder, all towers can be made equal, resulting in an ugliness of 0. If there is a remainder, the minimum ugliness will be 1.\n5. Output the minimum possible ugliness for each test case.\n\n# [edge case] \n    Case 1: All towers have the same height initially.\n    Input: [10, 10, 10]\n    Expected Output: 0\n    Explanation: No redistribution is needed as all towers are already equal.\n\n    Case 2: Towers with heights that can be made equal with redistribution.\n    Input: [3, 2, 1, 2]\n    Expected Output: 0\n    Explanation: By redistributing blocks, all towers can be made equal in height.\n\n    Case 3: Towers with heights that cannot be made completely equal.\n    Input: [1, 2, 3, 1, 5]\n    Expected Output: 1\n    Explanation: After redistribution, the minimum possible difference between tallest and shortest is 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the remainder when dividing total blocks by number of towers inherently handles these cases.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases, each with up to 100 buildings, and heights as large as 10^7. The approach should ensure the minimum possible ugliness is achieved and output the result in the specified format.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Ensure the solution handles large inputs efficiently.\n- Provide clear and formatted output for each test case.\n- Optimize the code for scalability across multiple test cases.\n- Include comments and documentation for better understanding.\nWe will use a greedy approach to minimize the ugliness by redistributing blocks between towers. The key idea is to balance the heights by moving blocks from the tallest tower to the shortest tower until the difference is minimized. This can be efficiently achieved by sorting the heights and redistributing blocks accordingly. The approach will handle up to 1000 test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the context of this problem, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to balance their heights and minimize ugliness.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness'\n    Explanation: This means finding the smallest value of max(a) - min(a) that can be achieved by redistributing blocks.\n\n# [degree adverb] \n    'tallest'\n    Explanation: Refers to the building with the maximum height in the list.\n    \n    'shortest'\n    Explanation: Refers to the building with the minimum height in the list.\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Sort the list of building heights.\n3. Calculate the initial ugliness as the difference between the maximum and minimum heights.\n4. Redistribute blocks by moving from the tallest to the shortest until no further reduction in ugliness is possible.\n5. After redistribution, calculate the new ugliness and check if it is minimized.\n6. Output the minimized ugliness for each test case.\n\n# [edge case] \n    Case 1: All buildings have the same height initially.\n    Input: [10, 10, 10]\n    Expected Output: 0\n    Explanation: The ugliness is already 0 since all buildings are of equal height.\n\n    Case 2: Only two buildings with different heights.\n    Input: [1, 10000000]\n    Expected Output: 0\n    Explanation: You can move blocks from the taller building to the shorter one until both are equal.\n\n    Case 3: Buildings with alternating heights.\n    Input: [1, 3, 1, 3, 1]\n    Expected Output: 0\n    Explanation: You can redistribute blocks to make all buildings have a height of 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and redistributing blocks will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks between towers. The solution should efficiently handle multiple test cases and large input sizes, ensuring the output is clear and concise.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Ensure the solution is efficient for large inputs.\n- Provide clear output format for each test case.\n- Optimize the code for scalability.\n- Include detailed comments and documentation.\nWe will use a simple approach to minimize the ugliness by redistributing blocks between towers. The key observation is that the minimum possible ugliness is determined by the difference between the maximum and minimum heights after redistributing blocks. The optimal strategy is to make the heights as equal as possible, which can be achieved by calculating the difference between the maximum and minimum heights and redistributing blocks accordingly. This approach is efficient and works well within the given constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n# [phrase showing quantity relationship]\n    'height difference': This refers to the difference between the maximum and minimum heights of the towers. In code, this can be implemented using `max(a) - min(a)`.\n\n# [degree adverb]\n    'minimum': This indicates that we need to find the smallest possible value of ugliness after redistributing blocks. In code, this involves redistributing blocks to make the heights as equal as possible.\n\n# [code logic]\n    1. For each test case, read the number of towers and their respective heights.\n    2. Calculate the total number of blocks across all towers.\n    3. Determine the average height by dividing the total number of blocks by the number of towers.\n    4. Redistribute blocks to make all tower heights as close to the average height as possible.\n    5. Calculate the ugliness as the difference between the maximum and minimum heights after redistribution.\n    6. Output the minimum possible ugliness for each test case.\n\n# [edge case]\n    Case 1: Input: 2 towers with heights [1, 1] = Expected output: 0\n    Explanation: Both towers are already equal in height, so no redistribution is needed, resulting in an ugliness of 0.\n\n    Case 2: Input: 3 towers with heights [1, 1, 10] = Expected output: 0\n    Explanation: Redistribute blocks from the tallest tower to the shortest ones until all are equal, resulting in an ugliness of 0.\n\n    Case 3: Input: 4 towers with heights [1, 2, 3, 4] = Expected output: 0\n    Explanation: Redistribute blocks to make all tower heights equal, resulting in an ugliness of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks to achieve equal heights inherently handles these cases.\n", "requirement analysis:\nThe problem requires finding the minimum possible difference between the tallest and shortest towers after any number of operations. The operations allow moving blocks between towers, which means redistributing the total height among the towers. The key is to balance the heights as evenly as possible, which can be achieved by calculating the average height and adjusting the towers accordingly.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Optimize the solution for performance with large inputs.\n- Ensure the solution handles edge cases correctly.\n- Provide detailed comments and documentation.\n- Include test cases to validate the solution.\nWe will calculate the minimum possible ugliness by redistributing the blocks among the towers to make their heights as even as possible. The minimum ugliness is determined by the difference between the maximum and minimum heights after redistribution. This can be achieved by finding the maximum and minimum heights in the list and calculating their difference, as the redistribution can make the heights as close as possible to each other.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to minimize the height difference between towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': \n    Explanation: This means finding the smallest possible value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb] \n    'minimum': \n    Explanation: The goal is to achieve the smallest possible difference between the tallest and shortest towers.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Compute the average height by dividing the total number of blocks by the number of towers.\n4. Determine the minimum possible ugliness by considering that the heights can be made as close as possible to the average height.\n5. The minimum ugliness is determined by the difference between the maximum and minimum heights after redistribution, which can be calculated as max(a) - min(a).\n\n# [edge case] \n    Case 1: All towers have the same height initially.\n    Input: [10, 10, 10]\n    Expected Output: 0\n    Explanation: No redistribution is needed as all towers are already of equal height.\n\n    Case 2: Towers with alternating heights.\n    Input: [1, 3, 1, 3]\n    Expected Output: 0\n    Explanation: By redistributing blocks, all towers can be made to have a height of 2.\n\n    Case 3: Towers with a single very tall tower.\n    Input: [1, 1, 1, 10]\n    Expected Output: 0\n    Explanation: Blocks from the tallest tower can be redistributed to make all towers equal in height.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks to achieve equal heights inherently handles these cases.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest towers by redistributing blocks. The solution should efficiently handle up to 1000 test cases with up to 100 towers each, ensuring the output is the minimum possible ugliness for each test case.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Optimize the solution for large inputs.\n- Ensure the code is easy to understand and maintain.\n- Provide clear output for each test case.\n- Include comments and documentation for clarity.\nWe will calculate the minimum possible ugliness by redistributing blocks such that the difference between the maximum and minimum heights is minimized. The key observation is that the minimum ugliness is achieved when the difference between the maximum and minimum heights is at most 1. This can be achieved by calculating the total number of blocks and distributing them evenly across all towers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the operation of moving blocks from one tower to another to minimize the height difference.\n\n# [phrase showing quantity relationship]\n    'at most 1': \n    Explanation: The goal is to make the difference between the maximum and minimum heights as small as possible, ideally 0 or 1. This means redistributing blocks so that the heights are as equal as possible.\n\n# [degree adverb] \n    'minimum': \n    Explanation: The requirement is to achieve the smallest possible ugliness, which means minimizing the height difference between the tallest and shortest towers.\n\n# [code logic]\n1. For each test case, calculate the total number of blocks across all towers.\n2. Determine the average height by dividing the total number of blocks by the number of towers.\n3. Calculate the remainder when dividing the total number of blocks by the number of towers.\n4. If the remainder is 0, the minimum ugliness is 0 (all towers can be made equal).\n5. If the remainder is not 0, the minimum ugliness is 1 (some towers will be one block taller than others).\n\n# [edge case] \n    Case 1: n = 2, heights = [1, 10000000] = 9999999\n    Explanation: With only two towers and a large height difference, it's impossible to make them equal, so the minimum ugliness is 9999999.\n\n    Case 2: n = 3, heights = [1, 1, 1] = 0\n    Explanation: All towers are already equal, so no operations are needed, and the ugliness is 0.\n\n    Case 3: n = 4, heights = [1, 1, 1, 10] = 1\n    Explanation: By redistributing blocks, we can make three towers of height 3 and one of height 2, resulting in a minimum ugliness of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating total blocks and distributing them evenly will handle these cases effectively.\n"], "scores": [], "pass_results": [true, true, true, true, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 885, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "mutate_method": "condense_two2one", "parent_index": 409}
