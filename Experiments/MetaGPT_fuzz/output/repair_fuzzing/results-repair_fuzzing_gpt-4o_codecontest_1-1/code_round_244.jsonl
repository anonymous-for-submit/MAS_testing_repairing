{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed a list of three positive integers named a. He listed the totals of every non-empty subsequence from this array, arranged them in ascending order, and ended up with a series b of seven numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed a list of three positive integers named a. He listed the totals of every non-empty subsequence from this array, arranged them in ascending order, and ended up with a series b of seven numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed a list of three positive integers named a. He listed the totals of every non-empty subsequence from this array, arranged them in ascending order, and ended up with a series b of seven numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4. He then wrote 4 + 3 = 7, and 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed a list of three positive integers named a and listed the totals of every non-empty subsequence from this array, arranged them in ascending order, ending up with a series b of seven numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array 'b'.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second smallest element in b is a_2\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the sum of all elements\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is a_1 + a_2 + a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Call the function to restore arrays\n    results = restore_array(n, test_cases)\n    \n    # Print the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted list of non-empty subsequences 'b'.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list containing 't' test cases, each with 7 integers.\n\n    Returns:\n        List[List[int]]: A list containing 't' restored arrays 'a', each with 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # Append the restored array to results\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Call the function to restore arrays\n    results = restore_array(n, test_cases)\n    # Print the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is one of the integers in a\n        a1 = b[0]\n        # The second smallest number in b is another integer in a\n        a2 = b[1]\n        # The largest number in b is the sum of all three integers in a\n        sum_all = b[6]\n        # The third integer can be found by subtracting the smallest and second smallest numbers from the largest number\n        a3 = sum_all - a1 - a2\n        # Append the result as a sorted list\n        results.append(sorted([a1, a2, a3]))\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the sum of all elements\n        a_3 = sum_a - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\n# Input interface\nnumber_of_test_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n\n# Call the function and print the results\nresults = restore_original_array(number_of_test_cases, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted list of non-empty subsequence sums 'b'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers representing array 'b'.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum a_1 + a_2 + a_3\n        largest_sum = b[-1]\n        # Calculate a_3 using the formula: a_3 = (largest element) - (a_1 + a_2)\n        a_3 = largest_sum - (a_1 + a_2)\n        # Append the result for this test case\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all elements in a\n        sum_a = b[6]\n        # We can deduce a3 as sum_a - a1 - a2\n        a3 = sum_a - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a = b[-1]\n        # Deduce a_3 by subtracting a_1 and a_2 from the largest element in b\n        a_3 = sum_a - a_1 - a_2\n        # Append the restored array a to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is a_1, the second smallest is a_2,\n        # and the largest element is the sum of a_1, a_2, and a_3.\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[-1] - a_1 - a_2\n        results.append([a_1, a_2, a_3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n\n    # Call the function and print the results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is a_1\n        a1 = case[0]\n        # The second smallest element in b is a_2\n        a2 = case[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a1_a2_a3 = case[6]\n        # Calculate a_3\n        a3 = sum_a1_a2_a3 - a1 - a2\n        # Append the restored array [a_1, a_2, a_3] to results\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Output interface\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and formatted as specified. The constraints on the input values and the guarantee of at least one valid array a simplify the problem, allowing for a straightforward approach to deducing the values of a from b.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution handles up to 5000 test cases\n- Optimize for large input values\n- Provide clear output formatting\n- Consider edge cases and multiple valid solutions\nWe will use a straightforward approach to deduce the original array 'a' from the given array 'b'. Since 'b' contains the sums of all non-empty subsequences of 'a', we can leverage the properties of these sums. The smallest element in 'b' is 'a_1', the second smallest is 'a_2', and the largest element is the sum of all three elements 'a_1 + a_2 + a_3'. By subtracting the smallest and second smallest elements from the largest, we can find 'a_3'. This approach is efficient and works well within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    No phrase showing quantity relationship\n\n# [degree adverb] \n    'smallest': refers to the smallest element in array 'b', which corresponds to 'a_1'.\n    'largest': refers to the largest element in array 'b', which corresponds to the sum of all elements in array 'a'.\n\n# [code logic]\n    1. For each test case, identify the smallest element in array 'b' as 'a_1'.\n    2. Identify the second smallest element in array 'b' as 'a_2'.\n    3. Identify the largest element in array 'b' as the sum of all elements in array 'a'.\n    4. Calculate 'a_3' by subtracting 'a_1' and 'a_2' from the largest element.\n    5. Return the elements 'a_1', 'a_2', and 'a_3'.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array is [1, 1, 1].\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and equal, so the original array is [1000000000, 1000000000, 1000000000].\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, second smallest is 2, and largest is 7. Thus, a_3 = 7 - (1 + 2) = 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by correctly identifying and calculating the elements of array 'a'.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and formatted as specified. The constraints on the input guarantee that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution handles up to 5000 test cases\n- Format output correctly for each test case\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve this problem by leveraging the properties of the array b. Since b contains all possible sums of non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. By using these properties, we can efficiently restore the array a for each test case. We will use Python's built-in sorting and list operations to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element must be present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'every': means all possible non-empty subsequences are considered.\n    'three': indicates the number of integers in array a.\n    'seven': indicates the number of integers in array b, which corresponds to all possible sums of non-empty subsequences of a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which is a_1.\n    'largest': refers to the largest element in array b, which is a_1 + a_2 + a_3.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Since b is sorted, identify a_1 as the smallest element (b[0]).\n    3. Identify a_2 as the second smallest element (b[1]).\n    4. Identify a_3 by using the largest element (b[6]) and subtracting a_1 and a_2 from it.\n    5. Return the array a = [a_1, a_2, a_3].\n\n# [edge case]\n    Input: 1 3 4 4 5 7 8\n    Output: 1 4 3\n    Explanation: The smallest element is 1 (a_1), second smallest is 3 (a_2), and largest is 8 (a_1 + a_2 + a_3). Thus, a_3 = 8 - 1 - 3 = 4.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1 (a_1), second smallest is 2 (a_2), and largest is 5 (a_1 + a_2 + a_3). Thus, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by leveraging the sorted nature of array b and its properties.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide clear output for each case. The constraints ensure that the solution is feasible within the given limits.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output clarity and correctness\n- Optimize for large integer values\n- Provide flexibility in output format if multiple solutions exist\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest three numbers in b are the elements of a. This is because the smallest element in b is the smallest element in a, the second smallest element in b is the second smallest element in a, and the third smallest element in b is the third smallest element in a. The largest element in b is the sum of all elements in a. We will use this property to efficiently restore the array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that array a consists of exactly three elements, all greater than zero.\n    \n    'seven numbers': indicates that array b consists of exactly seven elements.\n\n# [degree adverb]\n    'smallest': refers to the smallest elements in array b, which correspond to the individual elements of array a.\n    \n    'largest': refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest three numbers in b; these correspond to the individual elements of array a.\n3. The largest number in b is the sum of all elements in a.\n4. Return the three smallest numbers as array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and the sum matches the largest number in b.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 3\n    Explanation: The smallest three numbers are distinct and match the individual elements of a.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are identical, and the sum matches the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using them as array a will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide clear and accurate output formatting\n- Optimize for performance and memory usage\nWe will implement a function that takes the sorted array b and deduces the original array a. Since the array a consists of three distinct integers, the largest number in b is the sum of all three integers. The smallest number in b is one of the integers in a. The second smallest number in b is another integer in a. The third integer can be found by subtracting the smallest and second smallest numbers from the largest number. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, all greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest number in b, which is one of the integers in a.\n2. Identify the second smallest number in b, which is another integer in a.\n3. The largest number in b is the sum of all three integers in a.\n4. Subtract the smallest and second smallest numbers from the largest number to find the third integer in a.\n5. Return the three integers as the array a.\n\n# [edge case] \n    b = [1, 1, 2, 3, 3, 4, 5] = 1 1 2\n    Explanation: The smallest two numbers are 1 and 1, and the largest number is 5. Subtracting gives us 2 as the third number.\n    \n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 5. Subtracting gives us 2 as the third number.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All numbers are equal, so each element of a is the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted array b to deduce array a.\n", "requirement analysis:\nThe task requires determining the original array a from the sorted array b of subsequence sums. Given the constraints, the solution must efficiently handle up to 5000 test cases and large integer values. The approach should ensure that the output is accurate and formatted correctly.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the properties of the sorted array b to deduce the original array a. Since b contains all possible sums of non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. By subtracting the smallest elements from the largest, we can deduce the third element a_3. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a_1.\n2. Identify the second smallest element in b, which corresponds to a_2.\n3. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in b.\n5. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    Edge Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array a consists of three identical numbers.\n\n    Edge Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest numbers are used to form the original array a.\n\n    Edge Case 3: b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Large numbers with identical values are used to form the original array a.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and calculating the third element will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array a from the sorted array b of subsequence sums. Given the constraints, the solution must efficiently handle up to 5000 test cases and large integer values. The output must be formatted correctly, and the solution should be robust enough to handle all valid inputs.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values accurately\n- Provide correct output format\n- Optimize for edge cases\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequence sums of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. By using these properties, we can efficiently reconstruct the array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'every': means all possible non-empty subsequences are considered.\n    'three': indicates the number of integers in array a.\n\n# [degree adverb]\n    'largest': refers to the largest sum in array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to a_1.\n2. Identify the second smallest element in array b, which corresponds to a_2.\n3. Identify the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n4. Calculate a_3 using the formula: a_3 = (largest element) - (a_1 + a_2).\n5. Return the array [a_1, a_2, a_3].\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest element is 1000000000. Thus, a_3 = 1000000000 - (1 + 1) = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest element is 5. Thus, a_3 = 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by correctly identifying a_1, a_2, and calculating a_3 based on the properties of array b.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent with the requirements.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for multiple test cases\n- Handle large integer values accurately\n- Provide output in the specified format\n- Optimize for performance\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest three numbers in b are the elements of a, and the largest number in b is the sum of all elements in a. This approach is efficient and handles large numbers well. We will use basic Python operations without any additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n    'seven numbers'\n    Explanation: The array b contains exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest three numbers in the sorted array b. These correspond to the individual elements of array a.\n2. The largest number in b is the sum of all elements in a.\n3. Use these observations to deduce the original array a:\n   - Let a1, a2, a3 be the smallest three numbers in b.\n   - The largest number in b is a1 + a2 + a3.\n4. Return the three numbers as the original array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of a = {1, 1, 1}. The largest number is 3, which is the sum of all elements in a.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is 5, which is the sum of all elements in a.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of a = {1000000000, 1000000000, 1000000000}. The largest number is 3000000000, which is the sum of all elements in a.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of the sorted array b to deduce array a.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently and ensure the output is correctly formatted. The constraints guarantee that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for up to 5000 test cases\n- Handle large numbers efficiently\n- Provide accurate results for all valid inputs\n- Format output correctly for easy interpretation\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these properties, we can efficiently restore a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element must be present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest number in array b is the sum of all elements in array a. This helps us identify the total sum of the original array.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b corresponds to the smallest element in array a.\n\n    'largest'\n    Explanation: The largest element in array b is the sum of all elements in array a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to a_1.\n    2. Identify the second smallest element in b, which corresponds to a_2.\n    3. Identify the largest element in b, which is the sum of a_1, a_2, and a_3.\n    4. Deduce a_3 by subtracting a_1 and a_2 from the largest element in b.\n    5. Return the array a as [a_1, a_2, a_3].\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, second smallest is also 1, and the largest is 1000000000. Deduce a_3 as 1000000000 - 1 - 1 = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so a_1 = a_2 = a_3 = 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, second smallest is 2, and the largest is 5. Deduce a_3 as 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by using the properties of sorted array b to deduce array a.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide the correct output format. The constraints ensure that the solution is feasible within the given limits.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all elements in a, which is a_1 + a_2 + a_3. By using these properties, we can efficiently determine the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n    'seven numbers'\n    Explanation: The array b contains exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, which is a_1.\n\n    'largest'\n    Explanation: The largest element in b corresponds to the sum of all elements in a, which is a_1 + a_2 + a_3.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify a_1 as the smallest element in b.\n3. Identify a_2 as the second smallest element in b.\n4. Identify a_3 by using the largest element in b, which is a_1 + a_2 + a_3.\n5. Calculate a_3 as the largest element minus (a_1 + a_2).\n6. Return the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, and the sum of all three is the largest number.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 7, so a_3 = 7 - (1 + 2) = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, and the sum of all three is the largest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the smallest, second smallest, and largest elements to reconstruct array a.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is correctly formatted. The constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will implement a function that takes the sorted array b and deduces the original array a. The key observation is that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these properties, we can efficiently restore the array a. We will use Python's built-in list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. A non-empty subsequence means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers'\n    Explanation: The array a consists of exactly three integers, each greater than zero.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a_1.\n2. Identify the second smallest element in b, which corresponds to a_2.\n3. Identify the largest element in b, which is the sum of a_1, a_2, and a_3.\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n5. Return the array [a_1, a_2, a_3].\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1 (a_1), the second smallest is 3 (a_2), and the largest is 8 (sum of all elements). Thus, a_3 = 8 - 1 - 3 = 4.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1 (a_1), the second smallest is 2 (a_2), and the largest is 7 (sum of all elements). Thus, a_3 = 7 - 1 - 2 = 4.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is the same as the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible scenarios by using the properties of sorted array b to deduce array a.\n"], "scores": [], "pass_results": [false, true, true, true, false, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 244, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 91}
