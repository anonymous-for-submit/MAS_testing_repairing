{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Remember, the problem statement assumes all elements are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Remember, the problem statement assumes all elements are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these sums and got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. This array b accurately represents the ordered sums. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Remember, the problem statement assumes all elements are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers, listed the sums of all non-empty subsequences of this array, and got an array b containing 7 integers arranged in ascending order. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Remember, the problem statement assumes all elements are positive integers.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        A tuple of three integers representing the original array a.\n    \"\"\"\n    # The smallest element in b is one of the elements of a\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements of a\n    sum_a = b[-1]\n    # The second largest element in b is the sum of the two largest elements of a\n    sum_a2_a3 = b[-2]\n    \n    # Deduce the individual elements of array a\n    a2 = sum_a - sum_a2_a3\n    a3 = sum_a2_a3 - a1\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive integers from the given sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in the original array a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in the original array a\n        a3 = b[-1] - a1\n        # The second smallest element in b minus a1 gives the second element in the original array a\n        a2 = b[1] - a1\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a using the properties of the sorted array b\n        a1 = b[0]  # The smallest element in b is one of the original elements\n        a2 = b[1]  # The second smallest element in b is another original element\n        a3 = b[6] - a1 - a2  # The largest element in b is the sum of all three original elements\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n\n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences\n           of a three-element array a.\n\n    Returns:\n        A list of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a1_a2_a3 = b[6]\n    # The second largest element in b is the sum of the two largest elements in a\n    a2_a3 = b[5]\n    \n    # Deduce the original array a\n    a3 = a1_a2_a3 - a2_a3\n    a2 = a2_a3 - a3\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        List[int]: The original array a consisting of three positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element of a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements of a\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of sums of non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # The largest element in b is the sum of all three original integers\n    a3 = b[-1] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sums of all non-empty subsequences of array a.\n\n    Returns:\n        A tuple of three integers representing the original array a.\n    \"\"\"\n    # The smallest element in b is the smallest element of a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements of a\n    a3 = b[-1] - a1\n    # The second largest element in b is the sum of the two largest elements of a\n    a2 = b[-2] - a3\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the given subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty subsequences\n                       of an array of three positive integers.\n\n    Returns:\n        List[int]: The original array of three positive integers.\n    \"\"\"\n    # Sort the array b to ensure the smallest three numbers are the individual elements of a\n    b.sort()\n    \n    # The smallest three numbers in b are the individual elements of a\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The largest number in the sorted array b is the sum of all three numbers in the original array a.\n        a1_plus_a2_plus_a3 = case[6]\n        \n        # The smallest number in b is one of the original numbers.\n        a1 = case[0]\n        \n        # The second smallest number in b helps identify another number.\n        a2 = case[1]\n        \n        # Deduce the third integer by subtracting the identified integers from the largest number.\n        a3 = a1_plus_a2_plus_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and get results\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array of three integers from the sorted array of sums of subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three positive integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # The largest element in b is the sum of all three original integers\n    sum_all = b[-1]\n    # Deduce the third integer using the sum of all three integers minus the two smallest\n    a3 = sum_all - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure output format is correct for all test cases\n- Optimize for large integer values\n- Handle multiple test cases efficiently\n- Provide clear documentation for the solution\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b. This approach is efficient and works well within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of three positive integers'\n    Explanation: The original array a contains exactly three positive integers, which are the basis for generating the sums in array b.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to all possible sums that can be formed by adding one or more elements from array a. Since a has three elements, there are 7 such sums.\n\n# [phrase showing quantity relationship]\n    'three positive integers': This indicates that array a has exactly three elements, each greater than zero.\n\n    '7 integers': This indicates that array b contains exactly 7 elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n2. Identify the largest element in array b, which is the sum of all three elements of array a.\n3. Identify the second largest element in array b, which is the sum of the two largest elements of array a.\n4. Use these observations to deduce the individual elements of array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a2` and `a3` be such that `a2 + a3` is the second largest element in b.\n   - The largest element in b is `a1 + a2 + a3`.\n5. Return the three elements as the restored array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest element is 1, and the largest is 3 (1+1+1).\n\n    1 2 3 3 4 5 6 = 1 2 3\n    Explanation: The smallest element is 1, and the largest is 6 (1+2+3). The second largest is 5 (2+3).\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest element is 1000000000, and the largest is 3000000000 (1000000000+1000000000+1000000000).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sums and subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and correct.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for multiple test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output format\n- Optimize for performance\nWe will solve the problem by recognizing that the smallest element in the array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these two facts, we can deduce the original array a by simple arithmetic operations. We will use Python's built-in capabilities to handle large integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that all elements in the array are positive integers, which means they are greater than zero.\n\n    'non-empty subsequences'\n    Explanation: A subsequence is derived from the original array by removing zero or more elements, but it must contain at least one element.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in array b is the sum of all elements in array a. This can be implemented by identifying the largest number in b.\n\n# [degree adverb] \n    'smallest'\n    Explanation: The smallest element in array b corresponds to the smallest element in array a. This can be implemented by identifying the smallest number in b.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n    2. Identify the largest element in array b, which is the sum of all elements in array a.\n    3. Use these two facts to deduce the original array a by simple arithmetic operations:\n       - Let a1 be the smallest element in b.\n       - Let a3 be the largest element in b minus a1.\n       - Let a2 be the second smallest element in b minus a1.\n    4. Return the three elements a1, a2, and a3.\n\n# [edge case] \n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, and the largest element is 1000000000. Using arithmetic operations, we deduce that the original array is [999999998, 1, 1].\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array is [300000000, 300000000, 300000000].\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, and the largest element is 5. Using arithmetic operations, we deduce that the original array is [1, 2, 2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles them correctly by using arithmetic operations based on the smallest and largest elements in array b.\n", "requirement analysis:\nThe problem requires restoring an array of three positive integers from a given sorted array of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the constraints are respected and the output format is strictly followed.\nrequirement pool:\n- Restore the original array a from the given array b.\n- Handle multiple test cases efficiently.\n- Optimize the solution for performance.\n- Ensure the solution is easy to understand and maintain.\n- Consider edge cases and ensure robustness.\nWe will solve the problem by leveraging the properties of the sums of non-empty subsequences of a three-element array. Given the sorted array b, the smallest element b[0] is one of the original elements of array a. The largest element b[6] is the sum of all three elements of a. By using these properties, we can deduce the original array a efficiently without needing complex algorithms or data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'positive integers'\n    Explanation: All elements in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Identify the smallest element in array b, which is b[0]. This is one of the original elements of array a.\n2. Identify the largest element in array b, which is b[6]. This is the sum of all three elements of array a.\n3. The second largest element, b[5], is the sum of two of the elements of array a.\n4. Use these properties to deduce the original elements of array a:\n   - Let a1 = b[0] (smallest element)\n   - Let a2 = b[1] (second smallest element)\n   - Let a3 = b[6] - a1 - a2 (since b[6] is the sum of all three elements)\n5. Return a1, a2, and a3 as the original array.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is one of the original elements. The largest element is 8, which is the sum of all three original elements. The second largest element is 7, which is the sum of two of the original elements. Using these, we deduce that the original array is 1, 4, and 3.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The second largest is 6. Using these, we deduce that the original array is 4, 1, and 2.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in the original array must be equal to the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided will handle all cases as it directly uses properties of sums and sorted order to deduce the original array.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and prompt output for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the output format is clear and adheres to the problem statement.\n- Provide detailed comments and documentation for the code.\n- Include test cases to verify the solution's correctness and performance.\nWe will leverage the fact that the array b is sorted and represents the sums of all non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted sums'\n    Explanation: The array b is sorted and contains the sums of all non-empty subsequences of the array a.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three integers, all greater than zero.\n\n# [degree adverb] \n    'smallest': Refers to the smallest element in the array b, which corresponds to the smallest element in the array a.\n    \n    'largest': Refers to the largest element in the array b, which is the sum of all elements in the array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these observations to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 8, which is `a1 + a2 + a3`. The second largest element is 7, which is `a2 + a3`. Solving these gives `a1 = 1`, `a2 = 4`, and `a3 = 3`.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n\n    1 1 2 999999998 999999999 999999999 1000000000 = 999999998 1 1\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 1000000000, which is `a1 + a2 + a3`. The second largest element is 999999999, which is `a2 + a3`. Solving these gives `a1 = 999999998`, `a2 = 1`, and `a3 = 1`.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for all possible configurations of array a based on the properties of array b.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The key is to identify the smallest, second smallest, and largest values in the sorted list to reconstruct the original array.\nrequirement pool:\n- Efficiently handle up to 5000 test cases\n- Correctly restore the original array from the given sums\n- Ensure the solution is easy to understand and maintain\n- Handle edge cases and large integer values\n- Provide clear documentation and comments in the code\nWe will leverage the fact that the array b is sorted and represents the sums of all non-empty subsequences of a three-element array a. The smallest element in b is the smallest element of a, the second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all three elements of a. Using these observations, we can reconstruct the original array a by selecting the smallest, second smallest, and the difference between the largest and the sum of the smallest two elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted sums'\n    Explanation: The array b is sorted and contains the sums of all non-empty subsequences of the array a.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'smallest': Refers to the smallest element in the sorted array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in the sorted array b, which is the sum of all three elements of array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the second smallest element in b, which corresponds to another element in a.\n3. The largest element in b is the sum of all three elements of a.\n4. Calculate the third element of a by subtracting the sum of the first two identified elements from the largest element in b.\n5. Return these three elements as array a.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest two elements are 1 and 3, and the largest element is 8. The third element is calculated as 8 - (1 + 3) = 4.\n    \n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest two elements are 1 and 2, and the largest element is 7. The third element is calculated as 7 - (1 + 2) = 4.\n    \n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to one of these values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted sums and subsequences.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from a given sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The key is to identify the smallest, second smallest, and largest values in the sorted list to reconstruct the original array.\nrequirement pool:\n- Develop a function to restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and maintainable code.\n- Include comments and documentation for better understanding.\nWe will implement a function that takes the sorted list of sums of non-empty subsequences and restores the original array of three integers. The key observation is that the smallest element in the list is one of the original integers, the second smallest is another, and the largest element is the sum of all three integers. By subtracting the smallest and second smallest from the largest, we can find the third integer. This approach is efficient and straightforward, leveraging simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted list of sums'\n    Explanation: This refers to the list of sums of all possible non-empty subsequences of the array, arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Identify the smallest element in the array `b`, which is one of the original integers `a_1`.\n    2. Identify the second smallest element in the array `b`, which is another original integer `a_2`.\n    3. The largest element in `b` is the sum of all three original integers, i.e., `a_1 + a_2 + a_3`.\n    4. Calculate `a_3` by subtracting `a_1` and `a_2` from the largest element.\n    5. Return the three integers `a_1`, `a_2`, and `a_3`.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each integer in `a` is equal to the smallest element.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest two elements are `1` and `2`, and the largest element is `7`. Thus, `a_3` is `7 - 1 - 2 = 4`.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each integer in `a` is equal to the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases correctly by leveraging the properties of sorted sums and simple arithmetic operations.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be consistent with the example provided.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution handles up to 5000 test cases efficiently\n- Maintain consistent output format\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of a. The largest element in b is the sum of all elements of a. The second largest element in b is the sum of the two largest elements of a. Using these observations, we can deduce the original array a by simple arithmetic operations. This approach is efficient and works well within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'positive integers'\n    Explanation: All elements in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three elements.\n    \n    '7 integers': The array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in the sorted array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which is the smallest element of a.\n2. Identify the largest element in b, which is the sum of all elements of a.\n3. Identify the second largest element in b, which is the sum of the two largest elements of a.\n4. Use these observations to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 8, which is `a1 + a2 + a3`. The second largest element is 7, which is `a2 + a3`. Solving these gives `a1 = 1`, `a2 = 4`, and `a3 = 3`.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 5, which is `a1 + a2 + a3`. The second largest element is 4, which is `a2 + a3`. Solving these gives `a1 = 1`, `a2 = 2`, and `a3 = 2`.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using arithmetic operations to deduce the values of a1, a2, and a3 from b.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these observations, we can efficiently determine the original array for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'positive integers'\n    Explanation: All elements in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three elements.\n    \n    '7 integers': The array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    'largest': Refers to the largest number in array b, which is the sum of all three elements of array a.\n\n# [code logic]\n1. Identify the smallest three numbers in the sorted array b. These represent the individual elements of the original array a.\n2. The largest number in b is the sum of all three elements of a.\n3. Use these observations to reconstruct the original array a for each test case.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: The smallest three numbers are 1, 1, and 1, which are the elements of array a. The largest number is 3, which is the sum of all three elements.\n    \n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2, which are the elements of array a. The largest number is 5, which is the sum of all three elements.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: The smallest three numbers are all equal to 1000000000, which are the elements of array a. The largest number is 3000000000, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using the largest number as their sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must handle multiple test cases efficiently and produce correct outputs for large integer values. The output format must be strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle multiple test cases efficiently\n- Ensure the solution works for large integer values\n- Follow the specified output format\n- Provide a simple and understandable implementation\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By using these observations, we can efficiently deduce the original array a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. In this problem, we are dealing with sums of all non-empty subsequences of an array of three positive integers.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': This means we need to consider all possible combinations of the three integers in the array, including individual elements, pairs, and the full set of three elements. The largest number in the sorted array b is the sum of all three numbers in the original array a.\n\n# [degree adverb]\n    'largest': In this context, the largest number in array b represents the sum of all three integers in array a.\n\n# [code logic]\n    1. Identify the largest number in array b, which is the sum of all three integers in array a.\n    2. Identify the smallest number in array b, which is one of the integers in array a.\n    3. Use the second smallest number in array b to find another integer in array a.\n    4. Deduce the third integer by subtracting the identified integers from the largest number.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The largest number is 8, which is the sum of all three numbers. The smallest number is 1, one of the original numbers. The second smallest number is 3, which helps identify another number. The third number can be deduced as 8 - (1 + 3) = 4.\n    \n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The largest number is 7, which is the sum of all three numbers. The smallest number is 1, one of the original numbers. The second smallest number is 2, which helps identify another number. The third number can be deduced as 7 - (1 + 2) = 4.\n    \n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each element in a is equal to the smallest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using mathematical deduction based on sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring the original array of three positive integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure output format is correct\n- Handle large numbers efficiently\n- Optimize for multiple test cases\n- Provide clear documentation\nWe will implement a function that takes the sorted array of sums of subsequences and deduces the original array of three integers. The approach is based on the observation that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array. We will use Python's built-in capabilities to handle large numbers and multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that the array consists of positive integers, which means all elements are greater than zero.\n\n    'non-empty subsequences'\n    Explanation: A subsequence is derived from the array by removing zero or more elements, but it must contain at least one element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array, excluding the empty set. In code, this involves iterating through combinations of the array elements and summing them.\n\n# [degree adverb]\n    'smallest' and 'largest'\n    Explanation: The smallest element in the sorted array b is one of the original integers, and the largest element is the sum of all three integers. In code, this can be implemented by accessing the first and last elements of the sorted array b.\n\n# [code logic]\n    1. For each test case, read the sorted array b.\n    2. Identify the smallest element in b as one of the original integers.\n    3. Identify the largest element in b as the sum of all three original integers.\n    4. Use the properties of sums to deduce the other two integers:\n       - The second smallest element in b is another original integer.\n       - The third smallest element in b is the sum of the two smallest original integers.\n    5. Deduce the third integer using these observations.\n    6. Print the three integers for each test case.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest element is 1, and the largest element is 1000000000. The second smallest element is also 1, indicating two of the original integers are 1. The third integer is deduced from the largest sum minus these two.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, indicating all original integers are equal.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, and the largest element is 5. The second smallest element is 2, indicating one of the original integers is 2. The third integer is deduced from the largest sum minus these two.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using properties of sums and sorted order.\n"], "scores": [], "pass_results": [true, false, false, true, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 435, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 296}
