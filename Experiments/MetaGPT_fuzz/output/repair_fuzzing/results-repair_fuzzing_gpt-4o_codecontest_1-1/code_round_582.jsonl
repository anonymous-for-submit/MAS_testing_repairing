{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. In n days from Petya's life, you have to determine the flower's end condition: if the flower isn't watered for two consecutive days, it dies, and if watered on the i-th day, it grows by 1 centimeter, but if watered on both the i-th and (i-1)-th day (i > 1), it grows by 5 centimeters instead. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. In n days from Petya's life, you have to determine the flower's end condition: if the flower isn't watered for two consecutive days, it dies, and if watered on the i-th day, it grows by 1 centimeter, but if watered on both the i-th and (i-1)-th day (i > 1), it grows by 5 centimeters instead. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. In n days from Petya's life, you have to determine the flower's end condition: if the flower isn't watered for two consecutive days, it dies, and if watered on the i-th day, it grows by 1 centimeter. However, if watered on both the i-th and (i-1)-th day (i > 1), it grows by 5 centimeters instead. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. In n days from Petya's life, you have to determine the flower's end condition: if the flower isn't watered for two consecutive days, it dies, and if watered on the i-th and (i-1)-th day (i > 1), it grows by 5 centimeters instead of just 1 centimeter which it grows by when watered on the i-th day only. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the height of the flower after n days based on watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the flower's height after n days for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    for days in test_cases:\n        height = 1\n        consecutive_days = 0\n        for i in range(len(days)):\n            if days[i] == 0:\n                consecutive_days += 1\n                if consecutive_days == 2:\n                    height = -1\n                    break\n            else:\n                if i > 0 and days[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_days = 0\n        results.append(height)\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the number of days\n                                      and the watering pattern for those days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = case[0]\n        watering_pattern = case[1:]\n        \n        # Initialize the flower's height\n        height = 1\n        flower_dies = False\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    # If watered on both the i-th and (i-1)-th day, it grows by 5 cm\n                    height += 5\n                else:\n                    # If watered on a single day, it grows by 1 cm\n                    height += 1\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    # If not watered for two consecutive days, the flower dies\n                    flower_dies = True\n                    break\n        \n        if flower_dies:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append([n] + watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering schedule for n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        n = len(days)\n        height = 1\n        died = False\n        \n        for i in range(n):\n            if i > 0 and days[i] == 0 and days[i-1] == 0:\n                height = -1\n                died = True\n                break\n            elif i > 0 and days[i] == 1 and days[i-1] == 1:\n                height += 4\n            elif days[i] == 1:\n                height += 1\n        \n        results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        test_cases.append(a)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing whether the flower is watered on each day.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i, watered in enumerate(case):\n            if watered == 1:\n                if i > 0 and case[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the flower's height after n days for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days = 0  # Track consecutive days of watering\n        flower_died = False\n        \n        for i in range(len(days)):\n            if days[i] == 1:\n                if i > 0 and days[i-1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days = 0  # Reset consecutive days of no watering\n            else:\n                consecutive_days += 1\n                if consecutive_days == 2:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Track if the flower dies\n\n        for day, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1\n                    flower_died = True\n                    break\n\n        results.append(height)\n\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process each test case, and print the results.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append(watering_pattern)\n\n    # Calculate results\n    results = calculate_flower_height(t, test_cases)\n\n    # Print results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days based on watering patterns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_ones = 0  # Counter for consecutive days of watering\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    # If watered on consecutive days, grow by 5 cm\n                    height += 5\n                else:\n                    # If watered on a single day, grow by 1 cm\n                    height += 1\n                consecutive_ones = 0  # Reset consecutive zeros counter\n            else:\n                consecutive_ones += 1\n                if consecutive_ones == 2:\n                    # If not watered for two consecutive days, the flower dies\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        previous_day_watered = False\n        \n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                previous_day_watered = False\n                if consecutive_days_without_water == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_pattern: List[int]) -> int:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        n (int): The number of days.\n        watering_pattern (List[int]): A list indicating whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        int: The final height of the flower or -1 if the flower dies.\n    \"\"\"\n    height = 1  # Initial height of the flower\n    consecutive_watered_days = 0  # Counter for consecutive watered days\n\n    for day in range(n):\n        if watering_pattern[day] == 1:\n            consecutive_watered_days += 1\n            if consecutive_watered_days == 2:\n                height += 5  # Grow by 5 cm on the second consecutive watered day\n                consecutive_watered_days = 1  # Reset to 1 to account for the current day\n            else:\n                height += 1  # Grow by 1 cm on a single watered day\n        else:\n            consecutive_watered_days = 0\n            if day > 0 and watering_pattern[day - 1] == 0:\n                return -1  # Flower dies if not watered for two consecutive days\n\n    return height\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        result = calculate_flower_height(n, watering_pattern)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(t: int, test_cases: list) -> list:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of days (n)\n                           and the watering pattern (list of integers).\n\n    Returns:\n        list: List of integers representing the flower's height after n days\n              for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for n, watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = 0  # Track consecutive days watered\n        \n        for day in range(n):\n            if watering_pattern[day] == 1:\n                consecutive_days_watered += 1\n                if consecutive_days_watered == 1:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                elif consecutive_days_watered == 2:\n                    height += 4  # Grow by 5 cm in total on the second consecutive day\n            else:\n                consecutive_days_watered = 0\n                if day > 0 and watering_pattern[day - 1] == 0:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The key challenge is handling consecutive days without watering, which results in the flower's death. The solution must efficiently process multiple test cases and provide accurate results for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height\n- Ensure handling of edge cases where the flower dies\n- Optimize for performance with multiple test cases\n- Provide clear output format\n- Enhance user experience with detailed error messages\nWe will implement a function to calculate the flower's height based on the watering pattern over n days. The function will iterate through each test case, checking the watering status for each day. If the flower is not watered for two consecutive days, it will return -1 for that test case. Otherwise, it will calculate the height based on the watering rules provided. The function will handle edge cases such as no watering or daily watering efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final state of the flower after n days, which can either be its height or if it dies due to lack of watering.\n\n    'two consecutive days'\n    Explanation: This means that if the flower is not watered for two days in a row, it will die.\n\n    'grows by 1 centimeter'\n    Explanation: If watered on a single day, the flower grows by 1 cm.\n\n    'grows by 5 centimeters'\n    Explanation: If watered on two consecutive days, the flower grows by 5 cm on the second day.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a condition where the flower dies if not watered for two days in a row. In code, this can be checked using a loop to see if there are two consecutive zeros in the list of watering days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm.\n    - Iterate through each test case.\n    - For each test case, iterate through the list of watering days.\n    - Check if there are two consecutive days without watering (two consecutive zeros). If found, set the height to -1 and break out of the loop.\n    - If watered on a single day, increase height by 1 cm.\n    - If watered on two consecutive days, increase height by 5 cm on the second day.\n    - After processing all days, store the result for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, so it remains at its initial height of 1 cm.\n\n    Test case: [1, 1, 1] = 16\n    Explanation: The flower is watered every day, growing by 1 cm on the first day and 5 cm on each subsequent day.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def calculate_flower_height(test_cases):\n            results = []\n            for n, days in test_cases:\n                height = 1\n                consecutive_days = 0\n                for i in range(n):\n                    if days[i] == 0:\n                        consecutive_days += 1\n                        if consecutive_days == 2:\n                            height = -1\n                            break\n                    else:\n                        if i > 0 and days[i-1] == 1:\n                            height += 5\n                        else:\n                            height += 1\n                        consecutive_days = 0\n                results.append(height)\n            return results\n", "requirement analysis:\nThe main requirement is to simulate the growth of a flower over n days based on watering patterns. The program must handle multiple test cases and edge cases such as consecutive days without watering leading to the flower's death. The output should be the final height of the flower or -1 if it dies.\nrequirement pool:\n- Implement the flower growth calculation logic.\n- Ensure the program handles multiple test cases.\n- Optimize for performance with large input sizes.\n- Include comprehensive error handling for invalid inputs.\n- Provide a user-friendly interface for input and output.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided. The function will iterate through each day, updating the flower's height according to the rules specified. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final state of the flower after n days, which can either be its height or if it dies due to lack of watering.\n\n    'consecutive days'\n    Explanation: This means two days in a row without watering, which results in the flower dying.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking pairs of days in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height for each day watered.\n    'grows by 5 centimeters': If watered on both the i-th and (i-1)-th day, it grows by 5 cm. Implemented by adding 5 to the height when two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - If the flower is watered (a_i = 1):\n          - Check if the previous day was also watered (a_(i-1) = 1), if so, add 5 cm to height.\n          - Otherwise, add 1 cm to height.\n        - If the flower is not watered (a_i = 0):\n          - Check if the previous day was also not watered (a_(i-1) = 0), if so, set height to -1 (flower dies).\n      - Output the final height or -1 if the flower dies.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die. The height remains 1 cm.\n\n    Test case: [1, 1, 1] = 11\n    Explanation: The flower is watered every day. It grows by 5 cm on the second and third days due to consecutive watering.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days without watering and adjusting growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately calculate the flower's height while considering the possibility of it dying if not watered for two consecutive days. The solution must handle multiple test cases and edge cases efficiently.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the program handles cases where the flower dies.\n- Optimize the solution for handling multiple test cases.\n- Include comprehensive test coverage for edge cases.\n- Enhance user experience with clear output formatting.\nWe will implement a function that iterates over the watering schedule for each test case, updating the flower's height based on the rules provided. We will use a simple loop to check each day's watering status and adjust the height accordingly. If the flower is not watered for two consecutive days, we will return -1 for that test case. The function will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final height of the flower after n days, considering the rules for growth and death based on watering.\n\n    'two consecutive days'\n    Explanation: This means if there are two days in a row where the flower is not watered, it will die.\n\n    'grows by 1 centimeter' and 'grows by 5 centimeters'\n    Explanation: The flower grows by 1 cm if watered on a single day, and by 5 cm if watered on two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower is not watered for two consecutive days, it dies. This can be implemented by checking pairs of days in the list.\n    \n    'grows by 1 centimeter': If watered on a single day, increase height by 1.\n    \n    'grows by 5 centimeters': If watered on two consecutive days, increase height by 5.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day's watering status:\n   - If the flower is not watered for two consecutive days, set height to -1 and break out of the loop.\n   - If watered on a single day, increase height by 1 cm.\n   - If watered on two consecutive days, increase height by 5 cm.\n3. After processing all days, store the result for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered at all but does not die because there are no two consecutive days without water.\n\n    Test case: 3\n    Input: 0 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 2\n    Input: 1 1\n    Output: 6\n    Explanation: The flower is watered on both days, so it grows by 5 cm on the second day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef flower_height(test_cases):\n    results = []\n    for n, days in test_cases:\n        height = 1\n        died = False\n        for i in range(n):\n            if i > 0 and days[i] == 0 and days[i-1] == 0:\n                height = -1\n                died = True\n                break\n            elif i > 0 and days[i] == 1 and days[i-1] == 1:\n                height += 4\n            elif days[i] == 1:\n                height += 1\n        results.append(height)\n    return results\n```\nThis code handles the edge cases by checking for two consecutive unwatered days and adjusting growth based on consecutive watering.\n", "requirement analysis:\nThe task requires determining the height of a flower after n days based on watering patterns. The flower grows differently based on consecutive watering days, and it dies if not watered for two consecutive days. The solution must handle multiple test cases and edge cases efficiently.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the solution handles multiple test cases.\n- Optimize the solution for performance with large inputs.\n- Include comprehensive edge case handling.\n- Provide clear and formatted output.\nWe will implement a function that iterates through the list of watering days, updating the flower's height based on the watering pattern. We will use simple conditional checks to determine if the flower grows or dies. The solution will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final state of the flower after n days, which can either be its height or if it dies due to not being watered for two consecutive days.\n\n    'watered for two consecutive days'\n    Explanation: This means that if the flower is watered on both the i-th and (i-1)-th day, it grows by 5 centimeters instead of 1 centimeter.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days in a row. In code, this can be checked by iterating through the list and checking if both a[i] and a[i-1] are 0.\n    \n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm.\n    2. Iterate through each test case.\n    3. For each test case, iterate through the list of watering days:\n        - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n        - If the flower is watered on both the i-th and (i-1)-th day, increase the height by 5 cm.\n        - If the flower is watered on a single day, increase the height by 1 cm.\n    4. After processing all days, store the result for each test case.\n    5. Print the results for all test cases.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die. The height remains 1 cm.\n\n    Test case: 2\n    Input: 1 1\n    Output: 6\n    Explanation: The flower is watered on both days, so it grows by 5 cm on the second day, resulting in a total height of 6 cm.\n\n    Test case: 3\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days and updating the height accordingly.\n", "requirement analysis:\nThe task requires calculating the height of a flower over a series of days based on watering patterns. The main challenge is to handle the growth rules correctly and determine if the flower dies due to consecutive days without water. The solution must efficiently process multiple test cases and provide accurate results for each.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the program handles edge cases such as no watering or continuous watering.\n- Optimize the solution for processing multiple test cases efficiently.\n- Provide clear and user-friendly output.\n- Include detailed comments and documentation for maintainability.\nWe will implement a function that iterates over the days, updating the flower's height based on the watering pattern. We will use a simple loop to check each day's watering status and apply the growth rules. If the flower is not watered for two consecutive days, we will return -1 to indicate the flower has died. The function will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final height of the flower after n days, considering the rules for growth and death based on watering patterns.\n\n    'two consecutive days'\n    Explanation: This means that if the flower is not watered for two days in a row, it will die.\n\n    'grows by 1 centimeter' and 'grows by 5 centimeters'\n    Explanation: These are the growth increments based on whether the flower is watered on a single day or on consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days where the flower is not watered. In code, this can be checked using a loop to see if two consecutive elements in the list are 0.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate over each test case.\n3. For each test case, iterate over the days:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If watered on a single day, increase height by 1 cm.\n   - If watered on consecutive days, increase height by 5 cm.\n4. After processing all days, store the result for each test case.\n5. Output the results for all test cases.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die. The height remains 1 cm.\n\n    Test case: 2\n    Input: 1 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days after being watered once, so it dies.\n\n    Test case: 3\n    Input: 1 1 1\n    Output: 11\n    Explanation: The flower is watered every day. It grows by 5 cm on the second and third days due to consecutive watering.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days of no watering and handles single-day scenarios appropriately.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The solution must handle multiple test cases and edge cases, such as consecutive days without watering leading to the flower's death. The output should be clear and follow the specified format.\nrequirement pool:\n- Calculate flower height accurately based on watering pattern.\n- Handle edge cases where the flower dies due to consecutive days without watering.\n- Ensure the solution efficiently processes multiple test cases.\n- Provide clear and concise output following the specified format.\n- Optimize for performance with large input sizes.\nWe will implement a function that iterates through the watering pattern for each test case, updating the flower's height based on the rules provided. We will use simple list operations to track the watering days and calculate the height. The function will handle edge cases such as consecutive days without watering, which results in the flower's death.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final state of the flower after n days, which can either be its height or if it dies due to not being watered for two consecutive days.\n\n    'watered'\n    Explanation: Indicates whether the flower receives water on a given day, affecting its growth or survival.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on both the i-th and (i-1)-th day, the flower grows by 5 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - If the flower is watered (a_i = 1):\n          - Check if the previous day was also watered (a_(i-1) = 1), if so, increase height by 5 cm.\n          - Otherwise, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0):\n          - Check if the previous day was also not watered (a_(i-1) = 0), if so, set height to -1 (flower dies).\n      - Print the final height for each test case.\n\n# [edge case]\n    Test case: 4\n    Input: 3, 0, 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 4\n    Input: 1, 1, 1\n    Output: 16\n    Explanation: The flower is watered every day, growing by 5 cm each day after the first, resulting in a height of 16 cm.\n\n    Test case: 4\n    Input: 0, 0, 0\n    Output: -1\n    Explanation: The flower is not watered at all, dying after two consecutive days without water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without water. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the solution handles edge cases such as no watering or continuous watering.\n- Optimize the code for performance to handle up to 100 test cases efficiently.\n- Provide clear error messages or outputs when the flower dies.\n- Enhance user experience with detailed explanations of results.\nWe will implement a function to simulate the growth of the flower based on the watering pattern over n days. The function will iterate through the watering pattern, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final height of the flower after n days, considering the rules of growth and death based on watering patterns.\n\n    'consecutive days'\n    Explanation: This means two days in a row without watering, which results in the flower dying.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm. This can be implemented by checking if there are two consecutive ones in the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the height of the flower to 1 cm.\n    2. Iterate through each test case.\n    3. For each test case, iterate through the list of watering patterns.\n    4. Check for two consecutive zeros; if found, set height to -1 and break.\n    5. Check for two consecutive ones; if found, increase height by 5 cm.\n    6. If a single day is watered, increase height by 1 cm.\n    7. After processing each test case, store the result.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, so it remains at its initial height of 1 cm.\n\n    Test case: [1, 1, 1] = 16\n    Explanation: The flower is watered every day, growing by 5 cm on consecutive days. Initial height is 1 cm, grows by 5 cm twice (5+5), and grows by 1 cm on the first day (1+5+5).\n\n    Test case: [0, 0] = -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive zeros and ones.\n", "requirement analysis:\nThe program needs to accurately simulate the growth of a flower over a series of days based on watering patterns. It must handle multiple test cases and edge cases such as consecutive days without water leading to the flower's death. The output should be clear, indicating either the final height or that the flower has died.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the program handles consecutive days without water.\n- Optimize for processing multiple test cases efficiently.\n- Provide clear and concise output for each test case.\n- Include detailed comments and documentation for maintainability.\nWe will implement a function that simulates the growth of a flower over a series of days based on the watering pattern provided. The function will iterate through each day, updating the flower's height according to the rules specified. If the flower is not watered for two consecutive days, it will die, and the function will return -1 for that test case. We will use a simple loop and conditionals to handle the logic, ensuring efficient processing of multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final state of the flower after n days, which can either be its height or if it dies due to not being watered for two consecutive days.\n\n    'watered for two consecutive days'\n    Explanation: This means that on two successive days, the flower receives water, which affects its growth rate.\n\n    'grows by 5 centimeters instead of just 1 centimeter'\n    Explanation: If the flower is watered on two consecutive days, it grows by 5 cm on the second day instead of the usual 1 cm.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days in a row. In code, this can be checked by iterating through the list and checking if both current and previous day are watered.\n    \n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate through each test case.\n3. For each test case, iterate through the days:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If watered on consecutive days, increase the height by 5 cm.\n   - If watered on a single day, increase the height by 1 cm.\n4. Store the result for each test case.\n5. Output the results for all test cases.\n\n# [edge case] \n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered at all but does not die because there are no two consecutive days without water.\n\n    Test case: 2\n    Input: 1 0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Test case: 3\n    Input: 1 1 1\n    Output: 12\n    Explanation: The flower grows by 1 cm on the first day, then by 5 cm on the second and third days due to consecutive watering.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without water and adjusting growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without water. The solution must be efficient and handle up to 100 test cases with up to 100 days each.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles edge cases such as no watering or daily watering.\n- Optimize the solution for performance with large input sizes.\n- Provide clear and concise output for each test case.\n- Enhance user experience with informative error messages if input is invalid.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the days, checking if the flower is watered and updating its height accordingly. If the flower is not watered for two consecutive days, it will return -1 indicating the flower has died. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final height of the flower after n days, considering the watering pattern. If the flower is not watered for two consecutive days, it dies.\n\n    'growth by 5 centimeters'\n    Explanation: If the flower is watered on two consecutive days, it grows by 5 centimeters on the second day instead of the usual 1 centimeter.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days in which a specific condition (watering or not watering) occurs. In code, this can be implemented by checking pairs of consecutive elements in the list.\n    \n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 centimeter.\n    - Iterate through each test case:\n        - For each day in the test case, check if the flower is watered.\n        - If watered on two consecutive days, increase height by 5 centimeters.\n        - If watered on a single day, increase height by 1 centimeter.\n        - If not watered for two consecutive days, set height to -1 and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, so it remains at its initial height of 1 centimeter.\n\n    Test case: [1, 1, 1] = 16\n    Explanation: The flower is watered every day, growing by 5 centimeters on each consecutive day after the first. Initial height is 1, then grows by 5 on day 2 (total 6), then grows by another 5 on day 3 (total 11), and finally grows by another 5 on day 4 (total 16).\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the second and third days, leading to its death.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower is not watered at all or is watered every day.\n", "requirement analysis:\nThe task requires calculating the height of a flower over a series of days based on watering patterns. The flower grows differently depending on whether it is watered consecutively or not, and it dies if not watered for two consecutive days. The solution must handle multiple test cases and edge cases efficiently.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the program handles cases where the flower dies.\n- Optimize the solution for performance with multiple test cases.\n- Provide clear and concise output for each test case.\n- Include comprehensive error handling for invalid inputs.\nWe will implement a function that iterates through the watering pattern for each test case, updating the flower's height based on the rules provided. If the flower is not watered for two consecutive days, it will return -1 for that test case. The function will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower's end condition'\n    Explanation: This refers to the final height of the flower after n days, considering the rules for growth and death.\n\n    'two consecutive days'\n    Explanation: If the flower is not watered for two days in a row, it dies.\n\n    'grows by 1 centimeter'\n    Explanation: If watered on a single day, the flower grows by 1 cm.\n\n    'grows by 5 centimeters'\n    Explanation: If watered on two consecutive days, the flower grows by 5 cm on the second day.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days where a specific condition (not being watered) leads to the flower's death. In code, this can be checked using a loop to compare each day's watering status with the previous day.\n    \n    'grows by 1 centimeter': This means adding 1 to the flower's height for each day it is watered. Implemented as `height += 1` in code.\n    \n    'grows by 5 centimeters': This means adding 5 to the flower's height if it is watered on consecutive days. Implemented as `height += 5` when the current and previous day are both watered.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day's watering status:\n   - If the flower is not watered for two consecutive days, set height to -1 and break out of the loop.\n   - If watered on a single day, increase height by 1 cm.\n   - If watered on two consecutive days, increase height by 5 cm on the second day.\n3. After processing all days, store the result for each test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days after being watered once, so it dies.\n\n    Test case: [1, 1, 1] = 12\n    Explanation: The flower is watered every day. It grows by 1 cm on the first day, then by 5 cm on each of the next two days (total growth = 1 + 5 + 5 = 11 cm), starting from an initial height of 1 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive unwatered days and adjusting growth based on watering patterns.\n"], "scores": [], "pass_results": [false, true, false, true, true, true, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 582, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "condense_two2one", "parent_index": 363}
