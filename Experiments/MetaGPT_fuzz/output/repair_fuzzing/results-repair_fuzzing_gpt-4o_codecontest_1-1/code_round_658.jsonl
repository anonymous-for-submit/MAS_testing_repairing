{"name": "1579_D. Productive Meeting", "description": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "tags": ["constructive algorithms", "graphs", "greedy"], "difficulty": 10, "id": 1579, "sample_io": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}], "test_list": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 1\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 0\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n2\n2 3\n1 2\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n8 4 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 -1 0\n5\n5 0 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 5\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n0\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 1\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n6 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 2\n5 1\n2 4\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 0 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 1 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 2\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 3 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 2\n3 4\n2 3\n4 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 4 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n3 4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 1 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n1\n3 2\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 2 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["0\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 3 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 3\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 0\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n2 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 4 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n2 4\n2 4\n2 4\n1 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 0\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n0\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 2 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 1 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n0 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 1 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 2\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 1 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 3\n4 1\n4 2\n4 3\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 1 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n3\n4 2\n4 2\n4 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 5\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n0 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 0 0\n2\n12 0\n3\n-1 0 0\n5\n1 4 -1 1 4\n5\n1 0 1 0 10\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n5\n2 5\n2 5\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n0 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n3\n5 2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n6\n4 3\n4 2\n4 3\n4 1\n4 2\n4 3\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 0\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 0\n5\n8 3 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 1\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n1 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n0 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 8\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n9\n5 1\n5 1\n5 2\n5 1\n5 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 1 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n2\n3 1\n2 3\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 0 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n6 3\n3\n1 0 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 2\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 3\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 1\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 1\n3 2\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 2\n2\n12 4\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n4\n1 2\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 5\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n2 1\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 3\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 1 4\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n14 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 1\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 4 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n1 2 2 4\n3\n0 0 0\n2\n16 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 1\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n1\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n1 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 1\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n1\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 1\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n1 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n7\n1 5\n1 2\n1 5\n1 2\n4 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 0\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 3 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 2\n3 4\n2 3\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n1 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 0 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 5 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 0\n5\n12 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n2 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 5\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 2 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n1 2\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}], "task_id": "codecontest/16", "prompt": "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The same two people can talk several times per meeting. They can have as many conversations as they wish.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. A non-negative integer means that it can be zero, one, or any positive whole number. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "repair_prompt": ["An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The same two people can talk several times per meeting. They can have as many conversations as they wish.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. A non-negative integer means that it can be zero, one, or any positive whole number. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The same two people can talk several times per meeting. They can have as many conversations as they wish.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. A non-negative integer means that it can be zero, one, or any positive whole number. The value could represent the person's willingness or capacity to engage in conversations. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation, and the same two people can talk several times per meeting as they wish. Each person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts. A meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate a max-heap\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Pop the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrement their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum\n            number of talks and the pairs of people involved in those talks.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Pair people based on their sociability\n        indexed_sociability = [(sociability[i], i + 1) for i in range(n)]\n        indexed_sociability.sort(reverse=True, key=lambda x: x[0])\n\n        talks = []\n        while len(indexed_sociability) > 1:\n            # Get the two most sociable people\n            first = indexed_sociability[0]\n            second = indexed_sociability[1]\n\n            if first[0] > 0 and second[0] > 0:\n                # Record the talk\n                talks.append((first[1], second[1]))\n\n                # Decrement their sociability\n                indexed_sociability[0] = (first[0] - 1, first[1])\n                indexed_sociability[1] = (second[0] - 1, second[1])\n\n                # Re-sort the list to maintain order\n                indexed_sociability.sort(reverse=True, key=lambda x: x[0])\n            else:\n                break\n\n        results.append((len(talks), talks))\n\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Process and output results\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, each containing the maximum number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative sociability to simulate a max-heap using heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrement their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of conversations in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, each containing the number of conversations and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        conversations = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            conversations.append((i1, i2))\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(conversations), conversations))\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function and print the result\n    results = maximize_conversations(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of conversations in a meeting based on sociability values.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        total_talks = 0\n        talks = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record a conversation between them\n            talks.append((i1, i2))\n            total_talks += 1\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        results.append((total_talks, talks))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Call the function\nresults = maximize_conversations(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, talks = result\n    print(k)\n    for talk in talks:\n        print(talk[0], talk[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of conversations in a meeting given sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Initialize a max-heap with tuples of (-sociability, index)\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n        while len(heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(heap)\n            s2, i2 = heapq.heappop(heap)\n\n            # Record their conversation\n            talks.append((i1, i2))\n\n            # Decrease their sociability and reinsert them if they still have positive sociability\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Call the function\nresults = maximize_conversations(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, talks = result\n    print(k)\n    for talk in talks:\n        print(talk[0], talk[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because heapq is a min-heap by default\n        max_heap = [(-s, i) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        \n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record a talk between them\n            talks.append((i1 + 1, i2 + 1))  # Convert to 1-based index\n\n            # Decrease their sociability and reinsert if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t: Number of test cases.\n        test_cases: List of tuples, each containing (n, sociability_list).\n\n    Returns:\n        List of results for each test case, where each result is a tuple containing\n        the number of talks and a list of pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq\n        max_heap = []\n        for i, s in enumerate(sociability):\n            if s > 0:\n                heappush(max_heap, (-s, i + 1))  # Store negative sociability and 1-based index\n\n        talks = []\n        while len(max_heap) > 1:\n            # Pop two most sociable individuals\n            s1, i1 = heappop(max_heap)\n            s2, i2 = heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrease their sociability\n            if s1 + 1 < 0:\n                heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Function call\nresults = maximize_talks(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, talks = result\n    print(k)\n    for talk in talks:\n        print(talk[0], talk[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because heapq is a min-heap by default\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        total_talks = 0\n        pairs = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            pairs.append((i1, i2))\n            total_talks += 1\n\n            # Decrease their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        results.append((total_talks, pairs))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for pair in pairs:\n            print(pair[0], pair[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting given sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, each containing the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate max-heap behavior\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            talks.append((i1, i2))\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on maximizing the number of talks by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output.\nrequirement pool:\n- Maximize the number of talks in each meeting.\n- Efficiently pair individuals based on sociability.\n- Handle large input sizes and multiple test cases.\n- Ensure output format clarity and correctness.\n- Provide flexibility in pairing options.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two most sociable people available at any time until no more talks can be made. This ensures that we are maximizing the number of talks by utilizing the highest sociability values first. We will use a priority queue (max-heap) to efficiently get the most sociable people at any time. Python's heapq library can be used for this purpose, but since it is a min-heap, we will store negative values to simulate a max-heap.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, meaning it can be zero or any positive whole number.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the conversations such that the total number of talks is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the arrangement of conversations that results in the highest number of total talks.\n\n# [degree adverb]\n    'most productive': This means achieving the highest possible number of talks during the meeting.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and details for each test case.\n    2. For each test case, use a max-heap to keep track of the sociability of each person.\n    3. Continuously pair the two most sociable people until no more talks can be made.\n    4. Record each pair of people who talk and decrement their sociability.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test Case: 3\n    Input: 0 0 2\n    Expected Output: 0\n    Explanation: Two people have zero sociability, so no talks can occur.\n\n    Test Case: 5\n    Input: 8 2 0 1 1\n    Expected Output: 4\n    Explanation: The person with sociability 8 can have multiple talks with others, maximizing the number of talks.\n\n    Test Case: 2\n    Input: 6 2\n    Expected Output: 2\n    Explanation: The person with sociability 6 can have two talks with the person with sociability 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach using a max-heap inherently handles these scenarios by ensuring that only people with positive sociability are paired for talks.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output for each test case.\nrequirement pool:\n- Implement algorithm to maximize number of talks.\n- Ensure solution handles large input sizes efficiently.\n- Provide clear and correct output format for test cases.\n- Optimize pairing strategy for individuals based on sociability.\n- Consider edge cases where sociability is zero.\nWe will use a greedy algorithm to maximize the number of talks. The approach involves sorting the sociability array and pairing the most sociable individuals until their sociability is exhausted. This ensures that the maximum number of talks is achieved efficiently. We will use Python's built-in sorting and list manipulation capabilities to handle the input efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, meaning it can be zero or any positive whole number.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the conversations such that the total number of talks is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement of conversations that results in the highest number of total talks.\n    Implementation: Use a greedy approach to pair individuals with the highest sociability until their sociability is exhausted.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Sort individuals by sociability and pair them to maximize the number of talks.\n\n# [code logic]\n1. Parse the input to get the number of test cases and sociability data for each test case.\n2. For each test case, sort the sociability array in descending order.\n3. Use a greedy approach to pair individuals with the highest remaining sociability.\n4. Keep track of the pairs and decrement their sociability until no more talks can be made.\n5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3, 0 0 0\n    Expected output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2, 0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but no pair can be formed.\n\n    Test case with maximum sociability values:\n    Input: 2, 200000 200000\n    Expected output: 200000\n    Explanation: Both individuals can talk to each other 200000 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and pairing based on sociability will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to determine the maximum number of talks possible in a meeting given the sociability constraints of each participant. The solution must efficiently handle large input sizes and provide a valid pairing of participants for each talk.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks.\n- Ensure the solution can handle up to 200,000 participants efficiently.\n- Provide clear output format as specified in the requirements.\n- Optimize the algorithm for both time and space complexity.\n- Allow flexibility in choosing different valid pairings.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two most sociable individuals who have not yet reached their sociability limit. This approach ensures that we maximize the number of talks by utilizing the highest available sociability at each step. We will use a priority queue (heap) to efficiently manage and retrieve the individuals with the highest sociability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, meaning it can be zero or any positive whole number.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the conversations such that the total number of talks is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the arrangement of conversations that results in the highest number of total talks.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible during the meeting.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and details for each test case.\n    2. For each test case, use a priority queue (heap) to keep track of individuals based on their sociability.\n    3. Continuously pair the two individuals with the highest sociability until no more valid pairs can be made.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of talks and the pairs for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but they need a partner, so no talks can occur.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both individuals can talk three times, so they will pair up for all three talks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle these scenarios by not forming pairs when sociability is zero or when valid pairs cannot be formed.\n", "requirement analysis:\nThe requirement is to determine the maximum number of conversations possible given the sociability constraints of each participant. The solution should efficiently handle up to 200,000 participants and sociability values, ensuring that the maximum number of talks is achieved without exceeding the sociability limits of any individual.\nrequirement pool:\n- Develop an algorithm to maximize the number of conversations.\n- Ensure the solution can handle the maximum input constraints efficiently.\n- Provide flexibility in choosing different valid conversation pairings.\n- Optimize the algorithm for speed and scalability.\n- Include detailed logging for debugging and analysis.\nWe will use a greedy algorithm to maximize the number of conversations. The idea is to always pair the two most sociable people available until no more valid pairs can be formed. This approach ensures that we maximize the number of talks by utilizing the highest sociability values first. We will use a priority queue (max-heap) to efficiently retrieve the most sociable individuals. The heap operations will allow us to efficiently manage the sociability values as they decrease after each conversation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of conversations a person can have before they leave the meeting. It is represented by a non-negative integer for each person.\n\n    'maximum possible number of talks'\n    Explanation: This means we need to arrange the conversations such that the total number of talks is maximized.\n\n# [phrase showing quantity relationship]\n    'exactly n people'\n    Explanation: This indicates that the number of people in the meeting is fixed and equal to n.\n\n    'maximum possible number of talks'\n    Explanation: This implies that we need to find the highest number of conversations that can occur given the sociability constraints.\n\n# [degree adverb]\n    'most productive'\n    Explanation: This means achieving the highest possible number of conversations.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap to keep track of the sociability values and their corresponding indices.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two people with the highest sociability from the heap.\n   - Record a conversation between them.\n   - Decrease their sociability by one and push them back into the heap if they still have remaining sociability.\n5. Output the total number of conversations and the pairs involved.\n\n# [edge case]\n    Test case 1: 2 0 0 = 0\n    Explanation: Both individuals have zero sociability, so no conversations can occur.\n\n    Test case 2: 3 0 0 2 = 0\n    Explanation: Only one person has non-zero sociability, so no conversations can occur.\n\n    Test case 3: 2 1 1 = 1\n    Explanation: Both individuals can have exactly one conversation with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle cases where no valid pairs can be formed due to zero or insufficient sociability.\n", "requirement analysis:\nThe requirement is to determine the maximum number of conversations that can occur in a meeting given the sociability constraints of each participant. The solution should efficiently pair individuals to maximize the number of talks, considering the constraints on sociability and the number of participants.\nrequirement pool:\n- Implement the algorithm to maximize the number of conversations.\n- Ensure the solution handles the maximum input size efficiently.\n- Provide clear output format as specified in the requirements.\n- Consider edge cases such as participants with zero sociability.\n- Optimize for different possible valid outputs.\nWe will implement a greedy algorithm to maximize the number of conversations. The idea is to always pair the two most sociable people available until no more valid pairs can be formed. This approach ensures that we maximize the number of talks by utilizing the highest sociability values first. We will use a priority queue (max-heap) to efficiently manage and retrieve the most sociable individuals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of conversations a person can have before they leave the meeting. It is represented by a non-negative integer for each person.\n\n    'maximum possible number of talks'\n    Explanation: This means we need to arrange the conversations such that the total number of talks is maximized.\n\n# [phrase showing quantity relationship]\n    'exactly n people'\n    Explanation: This indicates that the number of people in the meeting is fixed and equal to n.\n\n    'maximum possible number of talks'\n    Explanation: This implies we need to find the highest number of conversations that can occur given the sociability constraints.\n\n# [degree adverb]\n    'most productive'\n    Explanation: This means achieving the highest possible number of conversations.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap to keep track of the sociability values and their corresponding indices.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two people with the highest sociability.\n   - Record a conversation between them.\n   - Decrease their sociability by one.\n   - If they still have sociability left, push them back into the heap.\n5. Output the total number of conversations and the pairs involved.\n\n# [edge case]\n    Test case with all zero sociability: \n    Input: 3 0 0 0\n    Output: 0\n    Explanation: No one can have a conversation, so the output is 0.\n\n    Test case with only one person having non-zero sociability:\n    Input: 3 0 0 2\n    Output: 0\n    Explanation: Only one person can talk, so no conversations can occur.\n\n    Test case with maximum sociability:\n    Input: 2 200000 200000\n    Output: 200000\n    Explanation: Both people can talk to each other 200000 times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap inherently handles cases where no valid pairs can be formed by checking if there are at least two people with non-zero sociability.\n", "requirement analysis:\nThe requirements focus on maximizing the number of conversations in a meeting by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and provide clear output for each case, ensuring that the maximum number of talks is achieved.\nrequirement pool:\n- Implement algorithm to maximize conversations based on sociability.\n- Ensure solution handles up to 1000 test cases efficiently.\n- Provide clear and correct output format for each test case.\n- Optimize pairing strategy for maximum engagement.\n- Consider edge cases where sociability is zero.\nWe will implement a greedy algorithm to maximize the number of conversations. The approach involves repeatedly pairing the two most sociable individuals until no more conversations can be made. This ensures that the maximum number of talks is achieved. We will use a priority queue (max-heap) to efficiently manage and retrieve the most sociable individuals. The heap will allow us to efficiently update and retrieve the individuals with the highest sociability after each conversation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the willingness or capacity of a person to engage in conversations. It is represented by a non-negative integer, where a higher value indicates more potential conversations.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of conversations that can occur during the meeting, given the sociability constraints of each individual.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur given the sociability constraints.\n    Implementation: Use a greedy approach to pair the two most sociable individuals repeatedly until no more conversations can be made.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of conversations possible.\n    Implementation: Use a priority queue (max-heap) to efficiently manage and retrieve the most sociable individuals for pairing.\n\n# [code logic]\n1. Initialize a priority queue (max-heap) with tuples of (-sociability, index) for each person, to keep track of the most sociable individuals.\n2. While there are at least two people with positive sociability in the heap:\n   - Extract the two individuals with the highest sociability.\n   - Record their conversation.\n   - Decrease their sociability by one and reinsert them into the heap if they still have positive sociability.\n3. Continue until no more conversations can be made.\n4. Output the total number of conversations and the pairs involved.\n\n# [edge case]\n    Input: 3\n           0 0 2\n    Output: 0\n    Explanation: Two individuals have zero sociability, so no conversations can occur.\n\n    Input: 2\n           6 2\n    Output: 2\n            1 2\n            1 2\n    Explanation: The first person can have six talks, and the second person can have two talks. They can talk twice.\n\n    Input: 5\n           0 1 0 0 6\n    Output: 1\n            5 2\n    Explanation: Only one conversation can occur between the fifth and second person.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle cases where individuals have zero sociability or when no more conversations can be made.\n", "requirement analysis:\nThe requirement is to determine the maximum number of talks possible in a meeting given the sociability constraints of each participant. The solution should efficiently handle multiple test cases and large input sizes, ensuring that the maximum number of interactions is achieved by pairing individuals optimally.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks based on sociability constraints.\n- Ensure the solution can handle up to 2 \u22c5 10^5 participants and sociability values efficiently.\n- Provide clear output format for the number of talks and the pairs involved.\n- Optimize the algorithm for speed and scalability.\n- Consider edge cases where some participants have zero sociability.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two most sociable individuals who can still participate in talks. This approach ensures that we maximize the number of interactions by utilizing the sociability of each participant efficiently. We will use a priority queue (heap) to keep track of the sociability of participants, which allows us to efficiently retrieve and update the most sociable individuals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can participate in before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can engage in a number of talks equal to their sociability.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the talks such that the total number of interactions is maximized, utilizing each person's sociability to its fullest.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to maximize the total number of interactions between individuals. In code, this can be implemented by always pairing the two most sociable individuals available for a talk.\n\n# [degree adverb] \n    'most productive': This implies achieving the highest number of talks possible, which is the main objective of the problem.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap (priority queue) to keep track of individuals based on their sociability.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two individuals with the highest sociability.\n   - Record a talk between them.\n   - Decrease their sociability by one and reinsert them into the heap if they can still talk.\n5. Continue until no more talks can be arranged.\n6. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case] \n    Test case 1: 2\n    0 0\n    = 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test case 2: 3\n    0 1 0\n    = 0\n    Explanation: Only one person has non-zero sociability, so no talks can occur.\n\n    Test case 3: 2\n    1 1\n    = 1\n    Explanation: Both individuals can talk exactly once, resulting in one talk.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue inherently handles cases where no talks can occur due to zero sociability or insufficient participants.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large inputs while providing clear output for each test case.\nrequirement pool:\n- Develop algorithm to maximize number of talks\n- Ensure solution handles large datasets efficiently\n- Provide clear and concise output format\n- Optimize pairing strategy for maximum productivity\n- Consider edge cases with zero sociability\nWe will implement a greedy algorithm to maximize the number of talks. The idea is to always pair the two most sociable people available at any time until no more talks can be made. This approach ensures that we are always making the most productive use of the available sociability. We will use a priority queue (max-heap) to efficiently manage and retrieve the most sociable individuals. The heap will allow us to efficiently pair individuals and update their sociability after each talk.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of talks during the meeting by strategically pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of talks that can occur given the sociability constraints. In code, this involves pairing individuals with the highest sociability until no more talks can be made.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible. In code, this involves using a greedy approach to ensure maximum utilization of sociability.\n\n# [code logic]\n    1. Initialize a priority queue (max-heap) to store individuals based on their sociability.\n    2. Continuously pair the two most sociable individuals until no more pairs can be made.\n    3. After each talk, decrease the sociability of the involved individuals and update the heap.\n    4. Record each pair of individuals who talk.\n    5. Output the total number of talks and the pairs involved.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but they need a partner, so no talks can occur.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both individuals can talk three times, maximizing the number of talks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle cases where no talks can occur or where individuals leave immediately.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting by efficiently pairing individuals based on their sociability constraints. The solution must handle multiple test cases and large input sizes while providing clear output for each test case.\nrequirement pool:\n- Maximize the number of talks in each meeting.\n- Efficiently pair individuals for conversations based on sociability.\n- Handle large input sizes and multiple test cases efficiently.\n- Provide clear and correct output format for each test case.\n- Allow flexibility in choosing pairs if multiple solutions exist.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two individuals with the highest remaining sociability until no more talks can be made. This ensures that the most sociable individuals are utilized efficiently. We will use a priority queue (heap) to keep track of the sociability of individuals, which allows us to efficiently retrieve and update the most sociable individuals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of talks during the meeting by pairing individuals optimally based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of talks that can occur given the sociability constraints.\n    Implementation: Use a greedy approach to pair individuals with the highest sociability until no more talks can be made.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Continuously pair the two individuals with the highest remaining sociability.\n\n# [code logic]\n1. Parse the input to get the number of test cases and details for each test case.\n2. For each test case, use a priority queue (max-heap) to keep track of individuals' sociability.\n3. Continuously extract the two individuals with the highest sociability from the heap.\n4. Pair them for a talk and decrease their sociability.\n5. If their sociability is still greater than zero, push them back into the heap.\n6. Repeat until no more pairs can be made.\n7. Output the total number of talks and the pairs involved.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Output: 0\n    Explanation: Only one person can talk, but no pair can be formed.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Output: 200000\n            1 2 (repeated 200000 times)\n    Explanation: Both individuals can talk to each other maximally.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy approach inherently handles these scenarios by checking sociability values and forming pairs accordingly.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output formatting.\nrequirement pool:\n- Maximize the number of talks in the meeting.\n- Efficiently pair individuals for conversations.\n- Handle large input sizes efficiently.\n- Provide clear output format for test cases.\n- Allow flexibility in pairing strategies.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two most sociable people available at any time. This ensures that we are utilizing the maximum potential of each participant's sociability. We will use a max-heap (priority queue) to efficiently retrieve the most sociable individuals. Python's `heapq` library can be used for this purpose, but since it provides a min-heap, we will store negative values to simulate a max-heap.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before they leave the meeting. A person with a sociability of 0 leaves immediately, while others can have a number of talks equal to their sociability value.\n\n    'most productive'\n    Explanation: The meeting is considered most productive when the maximum possible number of talks occurs. This means pairing individuals in such a way that maximizes the total number of conversations.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks'\n    Explanation: This means we need to find the largest number of conversations that can occur given the sociability constraints. In code, this can be implemented by continuously pairing the two most sociable individuals until no more valid pairs can be formed.\n\n# [degree adverb]\n    'maximum'\n    Explanation: Refers to achieving the highest possible number of talks. In code, this involves using a strategy that ensures no potential talk is wasted, such as always pairing the two most sociable people available.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap to keep track of the sociability of each person.\n4. Continuously extract the two most sociable people from the heap and record their conversation.\n5. Decrease their sociability by one and push them back into the heap if they can still talk.\n6. Repeat until no more valid pairs can be formed.\n7. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test Case 1: 2 0 0 = 0\n    Explanation: Both individuals have a sociability of 0, so no talks can occur.\n\n    Test Case 2: 3 1 1 1 = 1\n    Explanation: Each person can only talk once, so only one pair can be formed.\n\n    Test Case 3: 4 0 0 0 0 = 0\n    Explanation: All individuals have a sociability of 0, so no talks can occur.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where no talks can occur due to zero sociability or when all possible pairs have been exhausted.\n"], "scores": [], "pass_results": [true, true, true, true, true, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 658, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "mutate_method": "expand_one2two", "parent_index": 190}
