{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two consecutive days, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. At the beginning of the 1-st day, the height of the flower is exactly 1 centimeter. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two consecutive days, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. At the beginning of the 1-st day, the height of the flower is exactly 1 centimeter. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two consecutive days, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. On the first day, the height of the flower is 1 centimeter. At the beginning of the 1-st day, the height of the flower is exactly 1 centimeter. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two consecutive days, it dies, and if the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        n = len(watering_pattern)\n        flower_died = False\n        \n        for i in range(n):\n            if i > 0 and watering_pattern[i] == 0 and watering_pattern[i-1] == 0:\n                # Flower dies if not watered for two consecutive days\n                height = -1\n                flower_died = True\n                break\n            elif watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i-1] == 1:\n                    # Grows by 5 cm if watered on consecutive days\n                    height += 5\n                else:\n                    # Grows by 1 cm if watered on a single day\n                    height += 1\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False\n        flower_dead = False\n        \n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_dead = True\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and get results\n    results = calculate_flower_height(t, test_cases)\n    \n    # Output results for each test case\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sequence of days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        n = len(days)\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        \n        for i in range(n):\n            if days[i] == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    # Calculate results\n    results = calculate_flower_height(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case based on the watering pattern.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Track if the flower has died\n\n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break  # Flower dies if not watered for two consecutive days\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    results = calculate_flower_height(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case based on the watering pattern.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n        \n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if not previous_day_watered:\n                    flower_died = True  # Flower dies if not watered for two consecutive days\n                    break\n                previous_day_watered = False\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    number_of_test_cases = int(input())\n    test_cases = []\n    \n    for _ in range(number_of_test_cases):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm for consecutive watering\n                else:\n                    height += 1  # Grow by 1 cm for single day watering\n                consecutive_days_without_water = 0  # Reset the counter for consecutive days without water\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_pattern: List[int]) -> int:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        n (int): The number of days.\n        watering_pattern (List[int]): A list indicating whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        int: The final height of the flower, or -1 if the flower dies.\n    \"\"\"\n    # Initial height of the flower\n    height = 1\n    \n    # Track the previous day's watering status\n    previous_watered = False\n    \n    for i in range(n):\n        if watering_pattern[i] == 1:\n            if previous_watered:\n                # If watered on consecutive days, grow by 5 cm\n                height += 5\n            else:\n                # If watered on a single day, grow by 1 cm\n                height += 1\n            previous_watered = True\n        else:\n            if previous_watered:\n                # If not watered today but was watered yesterday, just continue\n                previous_watered = False\n            else:\n                # If not watered for two consecutive days, the flower dies\n                return -1\n    \n    return height\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        result = calculate_flower_height(n, watering_pattern)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_days: List[int]) -> int:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        n (int): Number of days.\n        watering_days (List[int]): List indicating watering pattern (1 for watered, 0 for not watered).\n\n    Returns:\n        int: Final height of the flower or -1 if the flower dies.\n    \"\"\"\n    # Initialize the flower's height to 1 cm\n    height = 1\n    \n    # Iterate through the sequence of days\n    for i in range(n):\n        if watering_days[i] == 1:\n            # If the flower is watered on consecutive days, increase height by 5 cm\n            if i > 0 and watering_days[i - 1] == 1:\n                height += 5\n            else:\n                # Otherwise, increase height by 1 cm\n                height += 1\n        else:\n            # If the flower is not watered for two consecutive days, it dies\n            if i > 0 and watering_days[i - 1] == 0:\n                return -1\n    \n    return height\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_days = list(map(int, input().split()))\n        result = calculate_flower_height(n, watering_days)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = 0\n        flower_died = False\n        \n        for day in watering_pattern:\n            if day == 1:\n                if consecutive_days_watered == 1:\n                    height += 5  # Grow by 5 cm for consecutive watering\n                else:\n                    height += 1  # Grow by 1 cm for single day watering\n                consecutive_days_watered = 1\n            else:\n                if consecutive_days_watered == 0:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    flower_died = True\n                    break\n                consecutive_days_watered = 0\n        \n        results.append(height if not flower_died else -1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n\n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Consecutive watering\n                else:\n                    height += 1  # Single day watering\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies\n                    flower_died = True\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling multiple test cases and ensuring the flower does not die due to consecutive days without watering.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid input scenarios.\nWe will implement a function to simulate the growth of a flower based on a sequence of watering days. The function will iterate through each test case, checking the watering pattern and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will die, and the function will return -1 for that test case. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days where the flower is not watered, leading to its death. In code, this can be implemented by checking if two consecutive elements in the list are both 0.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height variable when a 1 is encountered in the list.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on two consecutive days. In code, this can be implemented by adding 5 to the height variable when two consecutive 1s are encountered in the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start of each test case.\n    - Iterate through each day's watering pattern:\n        - If two consecutive days are not watered (two 0s in a row), set height to -1 and break out of the loop.\n        - If a day is watered (1), check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n    - After processing all days, store the final height for each test case.\n\n# [edge case]\n    Input: 2\n           2\n           0 0\n           3\n           1 0 0\n    Output: -1\n    Explanation: In both test cases, the flower is not watered for two consecutive days, leading to its death.\n\n    Input: 2\n           1\n           0\n           2\n           1 0\n    Output: 1\n    Explanation: In the first test case, the flower is not watered at all but does not die because there are no two consecutive days. In the second test case, it is watered once, growing to a height of 2 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        for each test case:\n            initialize height = 1\n            for i in range(n):\n                if i > 0 and a[i] == 0 and a[i-1] == 0:\n                    height = -1\n                    break\n                elif a[i] == 1:\n                    if i > 0 and a[i-1] == 1:\n                        height += 5\n                    else:\n                        height += 1\n            print(height)\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on daily watering patterns. The key challenge is to accurately track the flower's height and determine if it dies due to consecutive days without water. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's final height or if it dies.\n- Optimize the solution for performance with large input sizes.\n- Include error handling for invalid input scenarios.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the sequence of days, updating the flower's height according to the rules specified. If the flower is not watered for two consecutive days, it will be marked as dead. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a condition where the flower dies if not watered for two days in a row. In code, this can be implemented by checking pairs of consecutive days in the list.\n    'grows by 1 centimeter': This indicates the flower's height increases by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height when a day is marked as watered.\n    'grows by 5 centimeters': This indicates the flower's height increases by 5 cm when watered on consecutive days. In code, this can be implemented by adding 5 to the height when two consecutive days are marked as watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through the list of days:\n      - If a day is watered (a_i = 1), check if the previous day was also watered:\n        - If yes, increase the height by 5 cm.\n        - If no, increase the height by 1 cm.\n      - If a day is not watered (a_i = 0), check if the previous day was also not watered:\n        - If yes, mark the flower as dead and set height to -1.\n        - If no, continue without changing the height.\n    - Output the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days of no watering to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die. The output is -1.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day. Total height is 7 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days of no watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on specific watering rules over a given number of days. The solution must handle multiple test cases and provide accurate results for each scenario, including cases where the flower dies due to consecutive days without watering.\nrequirement pool:\n- Implement the flower growth algorithm based on watering rules.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or death.\n- Optimize performance for large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the given rules. The function will iterate over the sequence of watering days, updating the flower's height according to the conditions specified. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not, with specific rules for consecutive watering days and consecutive non-watering days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a condition where the flower dies if it is not watered for two days in a row. In code, this can be implemented by checking pairs of days in the sequence.\n    'grows by 1 centimeter': This means the flower increases its height by 1 cm if watered on a single day.\n    'grows by 5 centimeters': This means the flower increases its height by 5 cm if watered on two consecutive days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm.\n    - Iterate over the sequence of days:\n      - If the current day is watered (a_i = 1):\n        - Check if the previous day was also watered; if so, increase height by 5 cm.\n        - Otherwise, increase height by 1 cm.\n      - If the current day is not watered (a_i = 0):\n        - Check if the previous day was also not watered; if so, the flower dies, and return -1.\n    - Return the final height after processing all days.\n\n# [edge case]\n    Case 1: Input: 2, Sequence: [0, 0] = Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n    \n    Case 2: Input: 1, Sequence: [0] = Output: 1\n    Explanation: The flower is not watered on the first day, but it doesn't die because it's only one day.\n    \n    Case 3: Input: 4, Sequence: [1, 1, 0, 1] = Output: 7\n    Explanation: The flower grows by 5 cm on the first two days and then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and handles them appropriately.\n", "requirement analysis:\nThe task requires calculating the height of a flower over a series of days based on watering patterns. The flower grows by 1 cm if watered on a single day, 5 cm if watered on consecutive days, and dies if not watered for two consecutive days. The solution must handle multiple test cases efficiently and provide the correct height or indicate if the flower dies.\nrequirement pool:\n- Implement the flower growth calculation logic.\n- Support multiple test cases in a single run.\n- Optimize the solution for performance with large inputs.\n- Ensure the output format is clear and matches the requirements.\n- Add error handling for invalid inputs.\nWe will implement a function to calculate the flower's height based on the watering pattern over n days. The function will handle multiple test cases efficiently by iterating through each test case and applying the growth rules. We will use basic Python data structures like lists to store the watering pattern and calculate the height. The solution will be optimized for performance by minimizing unnecessary computations and using simple conditional checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern over n days. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates that if the flower is not watered for two days in a row, it dies. In code, this can be implemented by checking pairs of days in the watering pattern.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. Implemented by adding 1 to the height when a day is watered.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. Implemented by adding 5 to the height when two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through each day in the watering pattern:\n      - If the current day is watered (a_i = 1):\n        - Check if the previous day was also watered (i > 1 and a[i-1] = 1), then increase height by 5 cm.\n        - Otherwise, increase height by 1 cm.\n      - If the current day is not watered (a_i = 0):\n        - Check if the previous day was also not watered (i > 1 and a[i-1] = 0), then set height to -1 (flower dies).\n    - Print the final height for each test case.\n\n# [edge case]\n    Input: 1\n           0\n    Output: 1\n    Explanation: The flower starts at 1 cm and is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Input: 3\n           1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering) and does not grow on the third day, resulting in a total height of 6 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days leading to the flower's death and handles single-day watering correctly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without watering. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Handle multiple test cases efficiently.\n- Provide error handling for flower death.\n- Optimize performance for large input sizes.\n- Enhance user feedback with detailed explanations.\nWe will implement a function to simulate the growth of the flower based on the watering pattern over n days. The function will iterate through each test case, updating the flower's height according to the rules provided. We will use simple list operations to track the watering pattern and calculate the height efficiently. The function will handle multiple test cases and provide clear output for each scenario, including error handling for flower death.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern over n days. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates that if the flower is not watered for two days in a row, it dies. In code, this can be implemented by checking pairs of days for consecutive zeros.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm if watered on a single day. In code, this can be implemented by adding 1 to the height when a day is watered.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm if watered on consecutive days. In code, this can be implemented by adding 5 to the height when two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the height of the flower to 1 cm at the start of each test case.\n    2. Iterate through each day in the test case:\n       - If the current day is watered (a_i = 1):\n         - If the previous day was also watered, increase the height by 5 cm.\n         - Otherwise, increase the height by 1 cm.\n       - If the current day is not watered (a_i = 0):\n         - Check if the previous day was also not watered. If so, set the height to -1 (flower dies) and break out of the loop.\n    3. After processing all days, store the final height for each test case.\n    4. Output the results for all test cases.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without water and adjusting growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without watering. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Develop edge case handling for scenarios where the flower dies.\n- Optimize the code for fast execution.\n- Provide detailed error messages for invalid input.\nWe will implement a function to simulate the growth of the flower based on the watering pattern over n days. The function will iterate through each day's watering status, updating the flower's height accordingly. We will use simple conditional logic to handle the growth and death conditions. The solution will efficiently process multiple test cases using a loop and provide clear output for each scenario.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a condition where the flower dies if not watered for two days in a row. In code, this can be implemented by checking pairs of days for consecutive zeros.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. Implemented by adding 1 to the height when a day is watered.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. Implemented by adding 5 to the height when two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm.\n    - Iterate through each test case.\n    - For each test case, iterate through the sequence of days:\n        - If the current day is watered (1) and the previous day was also watered (1), increase height by 5 cm.\n        - If the current day is watered (1) and the previous day was not watered (0), increase height by 1 cm.\n        - If two consecutive days are not watered (0), set height to -1 and break the loop.\n    - Output the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the first day, but it doesn't die because it requires two consecutive days of no watering to die. The height remains at 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day, but then not watered for two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day. Total height is 7 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days and updating the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without watering. The solution must efficiently process multiple test cases and provide clear outputs.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Develop a clear output format for each test case result.\n- Optimize the algorithm for performance with maximum input constraints.\n- Consider edge cases such as consecutive days without watering.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the sequence of days, updating the flower's height according to the rules specified. We will use simple list operations to handle the input and output efficiently. The function will check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n    'initial height'\n    Explanation: The flower starts with an initial height of 1 cm on the first day.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the input list.\n    \n    'grows by 1 centimeter': If watered on a single day, increase height by 1.\n    \n    'grows by 5 centimeters': If watered on consecutive days, increase height by 5.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm.\n    2. Iterate through each test case:\n       - For each day in the test case, check the watering pattern.\n       - If the flower is watered (a_i = 1), check if the previous day was also watered:\n         - If yes, increase height by 5 cm.\n         - If no, increase height by 1 cm.\n       - If the flower is not watered (a_i = 0), check if the previous day was also not watered:\n         - If yes, set height to -1 (flower dies) and break out of the loop.\n    3. Output the final height for each test case.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die. The initial height remains.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without watering and handles initial conditions appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately calculate the height of the flower while handling multiple test cases efficiently. The solution must also account for scenarios where the flower dies due to consecutive days without watering.\nrequirement pool:\n- Implement the main algorithm to calculate flower height.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating flower height or death.\n- Optimize for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the sequence of days, updating the flower's height according to the rules specified. We will use simple list operations to handle the input and output efficiently. The solution will be implemented in a single file, 'main.py', and will use basic Python data structures without any external libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates that if the flower is not watered for two days in a row, it dies. In code, this can be implemented by checking pairs of days in the sequence.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm.\n    - Iterate through each test case:\n      - For each day in the sequence:\n        - If the flower is watered (a_i = 1):\n          - Check if the previous day was also watered (a_(i-1) = 1), and increase height by 5 cm.\n          - Otherwise, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0):\n          - Check if the previous day was also not watered (a_(i-1) = 0), and set height to -1 (flower dies).\n      - Print the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day, but then not watered for two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day after a day without water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days of watering or non-watering.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The solution must handle multiple test cases and edge cases where the flower might die due to consecutive days without watering. The output format must be clear and adhere to the specified format.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Develop edge case handling for scenarios where the flower dies.\n- Provide clear and correct output format as specified.\n- Optimize the algorithm for performance with large input sizes.\nWe will implement a function that iterates over the sequence of days for each test case, updating the flower's height based on the watering pattern. If the flower is not watered for two consecutive days, it will die, and we will return -1 for that test case. We will use a simple loop to handle the logic and ensure the output format is correct. The function will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates that if the flower is not watered for two days in a row, it dies. In code, this can be checked by iterating through the list and checking pairs of days.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm if watered on a single day.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm if watered on consecutive days.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm.\n    2. Iterate over each test case.\n    3. For each test case, iterate over the sequence of days:\n       - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n       - If the flower is watered on a single day, increase the height by 1 cm.\n       - If the flower is watered on consecutive days, increase the height by 5 cm.\n    4. Print the final height for each test case.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days and updating the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on daily watering patterns. The key challenge is to accurately calculate the flower's height while handling cases where the flower dies due to consecutive days without watering. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid input scenarios.\nWe will implement a function to simulate the growth of the flower based on the given watering pattern for each test case. The function will iterate through the days, updating the flower's height according to the rules provided. If the flower is not watered for two consecutive days, it will die, and the function will return -1 for that test case. We will use basic list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower is not watered for two consecutive days, it dies. This can be implemented by checking if two consecutive elements in the list are 0.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. This can be implemented by adding 1 to the height when a 1 is encountered in the list.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm. This can be implemented by checking if two consecutive elements in the list are 1 and adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - If the current day and the previous day are both watered (both are 1), increase height by 5 cm.\n        - If only the current day is watered, increase height by 1 cm.\n        - If two consecutive days are not watered (both are 0), set height to -1 and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the first day, but it doesn't die because it requires two consecutive days of no watering to die. The height remains at 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days of watering or non-watering.\n"], "scores": [], "pass_results": [true, true, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 398, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "expand_one2two", "parent_index": 222}
