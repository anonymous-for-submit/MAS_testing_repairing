{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, then it dies completely. The flower can die if it doesn't receive water. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies, and if the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. The initial height of the flower is set at 1 centimeter on the first day. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Assume that the sequence of watering (or not watering) is known for all n days.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Calculate results\n    results = calculate_flower_height(test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the height of the flower after a sequence of watering days.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering sequence for each day.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False\n        flower_died = False\n        \n        for i, watered in enumerate(days):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5  # Grows by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grows by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if i > 0 and days[i-1] == 0:\n                    flower_died = True\n                    break\n                previous_day_watered = False\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n\n    # Output interface\n    results = calculate_flower_height(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case based on the watering pattern.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n\n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break  # Flower dies if not watered for two consecutive days\n\n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Calculate results\n    results = calculate_flower_height(test_cases)\n\n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the height of the flower after n days based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False\n        flower_died = False\n        \n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   Returns -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False\n        flower_died = False\n        \n        for i, watered in enumerate(days):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    # Two consecutive days without water\n                    flower_died = True\n                    break\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = False  # Flag to track consecutive watering\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if consecutive_days_watered:\n                    height += 5  # Increase height by 5 cm for consecutive watering\n                else:\n                    height += 1  # Increase height by 1 cm for single day watering\n                consecutive_days_watered = True\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    height = -1  # Flower dies due to two consecutive days without water\n                    break\n                consecutive_days_watered = False\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a sequence of watering days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i, watered in enumerate(days):\n            if watered == 1:\n                if i > 0 and days[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Track if the flower has died\n\n        for day in days:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    flower_died = True\n                    break\n\n        results.append(height)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n\n    # Call the function\n    results = calculate_flower_height(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing n followed by n integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = case[0]\n        watering_pattern = case[1:]\n        \n        # Initialize the flower's height to 1 cm\n        height = 1\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                consecutive_days_without_water = 0\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\n# Read number of test cases\nt = int(input())\n\n# Read each test case\n# Each test case consists of an integer n followed by n integers\n# Collect all test cases in a list\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    watering_pattern = list(map(int, input().split()))\n    test_cases.append([n] + watering_pattern)\n\n# Output interface\n# Call the function and print results\nresults = calculate_flower_height(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing watering days (1 for watered, 0 for not watered).\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False\n        flower_died = False\n        \n        for i, watered in enumerate(days):\n            if watered == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1\n                    flower_died = True\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately track the growth and determine if the flower dies due to consecutive days without watering. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the flower growth logic based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the solution for edge cases like consecutive days without watering.\n- Enhance user experience with intuitive input and output format.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use simple list operations to track the watering pattern and calculate the height. The function will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. If watered consecutively, it grows more.\n\n    'flower death'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This means the flower dies if there are two consecutive days without watering. In code, this can be checked by iterating through the list and checking for two consecutive zeros.\n\n    'grows by 1 centimeter': This means if the flower is watered on a single day, its height increases by 1. In code, this can be implemented by adding 1 to the height when a 1 is encountered in the list.\n\n    'grows by 5 centimeters': This means if the flower is watered on two consecutive days, its height increases by 5 instead of 1. In code, this can be implemented by checking for two consecutive ones and adding 5 to the height.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 at the start of each test case.\n2. Iterate through each day in the sequence:\n   - If the current day and the previous day are both watered (1), increase the height by 5.\n   - If only the current day is watered, increase the height by 1.\n   - If two consecutive days are not watered (0), set the height to -1 and break out of the loop.\n3. After processing all days, store the result for each test case.\n4. Print the results for all test cases.\n\n# [edge case] \n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but it doesn't die because it's only one day.\n\n    Test case: 2\n    Input: 0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Test case: 3\n    Input: 1 1 0 0\n    Output: -1\n    Explanation: The flower grows to 6 cm after the first two days but dies on the last two days due to lack of water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive zeros and adjusting the height accordingly.\n", "requirement analysis:\nThe requirements focus on calculating the height of a flower based on a sequence of watering days. The main challenge is to handle multiple test cases efficiently and ensure the flower's growth or death is accurately determined based on the watering pattern.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering sequence.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large inputs.\n- Include error handling for invalid inputs.\nWe will implement a function to calculate the height of the flower based on the given sequence of watering days. The function will iterate through each test case, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not. If watered on consecutive days, it grows more significantly.\n\n    'flower death'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a sequence of two consecutive days. In code, this can be checked using a loop to see if two consecutive elements in the list are both 0.\n\n    'grows by 1 centimeter': This means the flower's height increases by 1 if watered on a single day. In code, this can be implemented by adding 1 to the height variable.\n\n    'grows by 5 centimeters': This means the flower's height increases by 5 if watered on two consecutive days. In code, this can be implemented by adding 5 to the height variable when two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm.\n2. Iterate through each test case.\n3. For each test case, iterate through the sequence of watering days.\n4. Check if the flower dies by looking for two consecutive 0s.\n5. If the flower dies, set the height to -1 and break out of the loop.\n6. If the flower is watered on a single day, increase the height by 1.\n7. If the flower is watered on two consecutive days, increase the height by 5.\n8. Output the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered on the only day, but it does not die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 1\n    Output: 2\n    Explanation: The flower is watered on the only day, so it grows by 1 cm from its initial height.\n\n    Test case: 3\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without water and adjusting growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately track the growth or death of the flower based on consecutive days without watering. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating flower height or death.\n- Optimize for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use simple list operations to track the watering pattern and calculate the height or determine if the flower dies. The solution will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern over n days. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that if the flower is not watered for two consecutive days, it dies. In code, this can be implemented by checking pairs of consecutive days for zeros.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. Implemented by adding 1 to the height when a day is marked as watered.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. Implemented by adding 5 to the height when two consecutive days are marked as watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through each day's watering pattern:\n        - If the current day is watered (a_i = 1):\n            - Check if the previous day was also watered (a_(i-1) = 1), and if so, increase height by 5 cm.\n            - Otherwise, increase height by 1 cm.\n        - If the current day is not watered (a_i = 0):\n            - Check if the previous day was also not watered (a_(i-1) = 0), and if so, set height to -1 (flower dies) and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days of no watering to die. The height remains at the initial value of 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day after a single day of no watering.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days for watering patterns and adjusting height or determining death accordingly.\n", "requirement analysis:\nThe task requires calculating the height of a flower over a series of days based on watering patterns. The flower grows by 1 cm if watered on a single day, and by 5 cm if watered consecutively. If not watered for two consecutive days, the flower dies. The solution must handle multiple test cases and provide the final height or indicate if the flower dies.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering pattern.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the solution for performance with large input sizes.\n- Provide clear error messages for invalid inputs.\n- Enhance user interface for better user experience.\nWe will implement a function to calculate the height of the flower based on the watering pattern over n days. The function will iterate through each test case, checking the watering pattern and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will return -1 indicating the flower has died. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a condition where the flower dies if not watered for two consecutive days. In code, this can be implemented by checking pairs of consecutive days for zeros.\n    'grows by 1 centimeter': This indicates the flower's height increases by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height when a day is marked as watered.\n    'grows by 5 centimeters': This indicates the flower's height increases by 5 cm when watered on consecutive days. In code, this can be implemented by adding 5 to the height when two consecutive days are marked as watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through each day's watering pattern:\n        - If the current day is watered (a_i = 1):\n            - If the previous day was also watered, increase height by 5 cm.\n            - Otherwise, increase height by 1 cm.\n        - If the current day is not watered (a_i = 0):\n            - Check if the previous day was also not watered. If true, set height to -1 and break the loop (flower dies).\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The initial height remains unchanged.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without water and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without water. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Develop error handling for scenarios where the flower dies.\n- Optimize the code for performance with large input sizes.\n- Enhance user interface for better clarity and usability.\nWe will implement a function to simulate the growth of a flower based on a sequence of watering days. The function will iterate through each test case, checking the watering pattern and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1 for that test case. We will use simple list operations and conditionals to achieve this, ensuring the solution is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a condition where the flower dies if not watered for two consecutive days. In code, this can be implemented by checking pairs of consecutive days for zeros.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. In code, this is implemented by adding 1 to the height when a day is marked as watered.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. In code, this is implemented by adding 5 to the height when two consecutive days are marked as watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through the sequence of watering days.\n    - If a day is watered (a_i = 1), check if the previous day was also watered:\n        - If yes, increase height by 5 cm.\n        - If no, increase height by 1 cm.\n    - If two consecutive days are not watered (a_i = 0 and a_(i-1) = 0), set height to -1 and break the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die. The initial height remains unchanged.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering, then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days for watering and non-watering patterns.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The solution must handle multiple test cases efficiently and provide clear output indicating the flower's height or if it dies. Edge cases such as consecutive days without water must be addressed to ensure accurate results.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear and concise output for each test case.\n- Address edge cases such as consecutive days without water.\n- Optimize performance for large input sizes.\nWe will implement a function to calculate the flower's height based on the given watering pattern over n days. The function will iterate through each test case, checking the watering pattern and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be considered dead, and the function will return -1 for that test case. We will use simple list operations and conditionals to achieve this, ensuring the solution is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that the flower dies if it is not watered for two consecutive days. In code, this can be implemented by checking if two consecutive elements in the list are 0.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height when a 1 is encountered.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. In code, this can be implemented by adding 5 to the height when two consecutive 1s are encountered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through the list of watering patterns for each test case.\n    - If two consecutive days are not watered (two 0s in a row), set the height to -1 and break out of the loop.\n    - If a day is watered (1), check if the previous day was also watered. If so, increase the height by 5 cm; otherwise, increase it by 1 cm.\n    - After processing all days, store the final height for each test case.\n\n# [edge case]\n    Test case with no watering: \n    Input: 1\n           0\n    Output: 1\n    Explanation: The flower starts at 1 cm and does not die because it is only one day without water.\n\n    Test case with consecutive watering:\n    Input: 3\n           1 1 1\n    Output: 16\n    Explanation: The flower grows by 5 cm on the second day and another 5 cm on the third day, totaling 16 cm.\n\n    Test case with immediate death:\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower dies after two consecutive days without water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive watering and non-watering patterns.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The solution must handle multiple test cases efficiently and provide accurate results, including scenarios where the flower dies due to consecutive days without watering.\nrequirement pool:\n- Accurate calculation of flower height based on watering pattern\n- Efficient handling of multiple test cases\n- Clear output indicating flower height or death\n- Edge case handling for consecutive days without watering\n- User-friendly input and output format\nWe will implement a function that iterates through the sequence of watering days, updating the flower's height according to the rules provided. We will use simple list operations and conditionals to handle the growth and death scenarios efficiently. The function will handle multiple test cases by iterating over each test case and applying the logic independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. If watered consecutively, it grows more.\n\n    'flower death'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This means the flower dies if it is not watered for two consecutive days. In code, this can be checked using a loop to see if there are two consecutive zeros in the watering sequence.\n\n    'grows by 1 centimeter': This means if the flower is watered on a single day, it grows by 1 cm. In code, this can be implemented by adding 1 to the height when a 1 is encountered in the sequence.\n\n    'grows by 5 centimeters': This means if the flower is watered on two consecutive days, it grows by 5 cm instead of 1 cm. In code, this can be implemented by checking if both the current and previous day are 1, and then adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm.\n2. Iterate over each test case.\n3. For each test case, iterate over the sequence of days:\n   - If the flower is not watered for two consecutive days, set height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase height by 1 cm.\n   - If the flower is watered on two consecutive days, increase height by 5 cm.\n4. Print the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0\n    Expected output: 7\n    Explanation: The flower is watered on the first two days (grows by 5 cm) and not watered on the third day (grows by 1 cm), so total height is 7 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive zeros and adjusting growth based on watering patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while handling multiple test cases and ensuring the flower does not die due to consecutive days without watering.\nrequirement pool:\n- Implement the flower growth calculation based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the algorithm for edge cases like consecutive days without watering.\n- Enhance user experience with intuitive input and output handling.\nWe will implement a function to simulate the growth of the flower based on the watering pattern over n days. The function will iterate through the sequence of days, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The function will check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': means the flower dies if not watered for two consecutive days.\n    'grows by 1 centimeter': means the flower's height increases by 1 cm when watered on a single day.\n    'grows by 5 centimeters': means the flower's height increases by 5 cm when watered on consecutive days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm.\n    - Iterate through the sequence of days:\n        - If the current day is watered (a_i = 1):\n            - Check if the previous day was also watered (a_(i-1) = 1), and increase height by 5 cm.\n            - Otherwise, increase height by 1 cm.\n        - If the current day is not watered (a_i = 0):\n            - Check if the previous day was also not watered (a_(i-1) = 0), and set height to -1 (flower dies).\n            - If the flower dies, break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered on the first day, but it doesn't die because it needs two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: 2\n    Input: 1\n    Output: 2\n    Explanation: The flower is watered on the first day, so it grows by 1 cm, resulting in a height of 2 cm.\n\n    Test case: 3\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies, resulting in a height of -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and handles the flower's death appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the flower's height while handling multiple test cases efficiently. The program must also determine if the flower dies due to consecutive days without watering and provide the correct output format.\nrequirement pool:\n- Accurate calculation of flower height based on watering pattern\n- Efficient handling of multiple test cases\n- Determine if the flower dies due to lack of watering\n- Provide clear and correct output format\n- Handle edge cases like consecutive days without watering\nWe will implement a function that simulates the growth of the flower based on the watering pattern over n days. The function will iterate through each day's watering status, updating the flower's height accordingly. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': means the flower dies if not watered for two consecutive days.\n    'grows by 1 centimeter': means the flower's height increases by 1 cm if watered on a single day.\n    'grows by 5 centimeters': means the flower's height increases by 5 cm if watered on consecutive days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm.\n    - Iterate through each day's watering status:\n      - If the flower is watered (a_i = 1), check if the previous day was also watered:\n        - If yes, increase height by 5 cm.\n        - If no, increase height by 1 cm.\n      - If the flower is not watered (a_i = 0), check if the previous day was also not watered:\n        - If yes, return -1 as the flower dies.\n    - Return the final height after n days.\n\n# [edge case]\n    Case 1: Input: 1, Output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it requires two consecutive days without water to die.\n\n    Case 2: Input: 1 0 0, Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Case 3: Input: 1 1, Output: 6\n    Explanation: The flower is watered on both days, so it grows by 5 cm on the second day, resulting in a total height of 6 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe task requires determining the final height of a flower based on a sequence of watering days. The flower grows by specific rules, and it can die if not watered for two consecutive days. The solution must handle multiple test cases and provide the correct height or indicate if the flower dies.\nrequirement pool:\n- Implement the logic to calculate flower height based on watering rules.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the solution for performance with large input sizes.\n- Provide clear error messages for invalid inputs.\n- Include detailed comments and documentation in the code.\nWe will implement a function to calculate the flower's height based on the given rules. The function will iterate through each test case, process the sequence of watering days, and apply the growth rules. We will use simple list operations to track the height and check for consecutive days without watering. The solution will handle multiple test cases efficiently by iterating over each one and outputting the result immediately.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the sequence of watering days. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that the flower dies if it is not watered for two consecutive days. In code, this can be implemented by checking if there are two consecutive zeros in the sequence.\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height when a 1 is encountered in the sequence.\n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. In code, this can be implemented by adding 5 to the height when two consecutive 1s are encountered in the sequence.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start of each test case.\n    - Iterate through each day's watering status:\n      - If the current day is watered (1) and the previous day was also watered (1), increase height by 5 cm.\n      - If the current day is watered (1) and the previous day was not watered (0), increase height by 1 cm.\n      - If two consecutive days are not watered (0), set height to -1 and break out of the loop.\n    - Output the final height for each test case.\n\n# [edge case]\n    Input: 2\n           2\n           0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Input: 3\n           3\n           1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days and does not grow on the third day.\n\n    Input: 4\n           4\n           1 0 1 0\n    Output: 3\n    Explanation: The flower grows by 1 cm on the first day, does not grow on the second day, grows by 1 cm on the third day, and does not grow on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n"], "scores": [], "pass_results": [true, false, false, false, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 302, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "add_1_sentence_at_end", "parent_index": 145}
