{"name": "1591_B. Array Eversion", "description": "You are given an array a of length n.\n\nLet's define the eversion operation. Let x = a_n. Then array a is partitioned into two parts: left and right. The left part contains the elements of a that are not greater than x (\u2264 x). The right part contains the elements of a that are strictly greater than x (> x). The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts.\n\nFor example, if the array a is [2, 4, 1, 5, 3], the eversion goes like this: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe start with the array a and perform eversions on this array. We can prove that after several eversions the array a stops changing. Output the minimum number k such that the array stops changing after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. ", "tags": ["greedy"], "difficulty": 8, "id": 1591, "sample_io": [{"input": "3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}], "test_list": [{"input": "2\n1\n998244353\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 4 1 5 3\n5\n5 3 2 0 1\n4\n1 1 1 1\n", "output": ["1\n3\n0\n"]}, {"input": "3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n313193651\n4\n4 1 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n313193651\n4\n4 2 2 1\n", "output": ["0\n2\n"]}, {"input": "3\n5\n2 4 1 2 3\n5\n5 3 2 8 2\n2\n1 1 1 1\n", "output": ["1\n1\n0\n"]}, {"input": "3\n5\n2 8 1 4 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["2\n2\n0\n"]}, {"input": "3\n5\n2 1 1 5 6\n5\n5 3 4 4 1\n2\n0 1 1 1\n", "output": ["0\n2\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 1 2 4\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 1 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 1 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 4 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n998244353\n4\n1 0 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 2 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n23458602\n4\n2 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 4 2 4\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 4 1 5 3\n5\n5 3 2 4 2\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n4 2 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n2 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n27909634\n4\n2 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 2 3 5\n", "output": ["0\n0\n"]}, {"input": "3\n5\n3 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n556389862\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1746739171\n4\n2 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n624918540\n4\n2 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n551353738\n4\n2 1 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 2 2 2\n", "output": ["0\n0\n"]}, {"input": "3\n5\n0 4 1 5 3\n5\n5 3 2 4 1\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n144612869\n4\n1 2 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n23458602\n4\n4 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 4 2 7\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n23458602\n4\n2 2 0 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 2 2 4\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 2 0 5\n", "output": ["0\n0\n"]}, {"input": "3\n5\n3 4 1 5 3\n5\n5 3 2 4 1\n3\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n556389862\n4\n1 1 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1746739171\n4\n2 1 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n802364611\n4\n2 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n551353738\n4\n2 1 4 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n4 2 2 2\n", "output": ["0\n1\n"]}, {"input": "3\n5\n0 4 1 5 3\n5\n5 3 2 4 1\n3\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n144612869\n4\n1 3 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n23458602\n4\n4 3 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n3 2 2 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n23458602\n4\n2 2 1 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n0 2 0 5\n", "output": ["0\n0\n"]}, {"input": "3\n5\n4 4 1 5 3\n5\n5 3 2 4 1\n3\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n556389862\n4\n1 1 6 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n1746739171\n4\n2 1 4 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n94783419\n4\n4 2 1 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n144612869\n4\n1 3 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n41454457\n4\n4 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n381715760\n4\n3 2 2 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n23458602\n4\n2 2 2 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n68829976\n4\n0 2 0 5\n", "output": ["0\n0\n"]}, {"input": "3\n5\n4 4 1 5 3\n5\n5 3 2 3 1\n3\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n556389862\n4\n2 1 6 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n41454457\n4\n4 2 2 10\n", "output": ["0\n0\n"]}, {"input": "2\n1\n381715760\n4\n5 2 2 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n23458602\n4\n2 4 0 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n93788297\n4\n0 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n556389862\n4\n2 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n381715760\n4\n0 2 2 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n2 3 0 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n93788297\n4\n0 2 0 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n556389862\n4\n2 2 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n381715760\n4\n0 1 2 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n4 3 0 2\n", "output": ["0\n2\n"]}, {"input": "2\n1\n998244353\n4\n1 1 0 3\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 4 2 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 1 2 2\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 4 1 5 3\n5\n5 3 2 0 1\n4\n1 1 0 1\n", "output": ["1\n3\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 1 1 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 0 2 4\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 1 1 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n2 1 2 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n94783419\n4\n0 1 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n56749180\n4\n2 4 2 4\n", "output": ["0\n0\n"]}, {"input": "2\n1\n998244353\n4\n1 0 2 6\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 1 1 5 3\n5\n5 3 2 4 1\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n1528037704\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 1 4 3\n", "output": ["0\n1\n"]}, {"input": "3\n5\n2 4 1 2 3\n5\n5 3 2 4 2\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n925217660\n4\n0 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n494500097\n4\n4 2 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n627592454\n4\n2 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n27909634\n4\n2 1 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 2 3 6\n", "output": ["0\n0\n"]}, {"input": "3\n5\n3 4 1 1 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n1746739171\n4\n0 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n624918540\n4\n2 1 1 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n551353738\n4\n2 1 2 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n37862951\n4\n2 2 2 2\n", "output": ["0\n0\n"]}, {"input": "3\n5\n0 4 1 5 3\n5\n5 3 0 4 1\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n144612869\n4\n1 4 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n1 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n134212618\n4\n2 4 2 7\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 2 0 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n13173955\n4\n2 2 0 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 1 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n314070686\n4\n1 1 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1746739171\n4\n2 1 6 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n802364611\n4\n2 1 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n551353738\n4\n4 1 4 5\n", "output": ["0\n0\n"]}, {"input": "3\n5\n0 4 1 5 3\n5\n7 3 2 4 1\n3\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n23458602\n4\n4 3 1 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n3 2 1 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n94783419\n4\n7 2 1 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n144612869\n4\n1 6 3 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n53238141\n4\n4 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n517602066\n4\n3 2 2 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n41454457\n4\n4 0 2 10\n", "output": ["0\n0\n"]}, {"input": "2\n1\n381715760\n4\n5 2 0 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n23458602\n4\n4 4 0 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n176445854\n4\n0 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n556389862\n4\n4 1 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n381715760\n4\n0 2 1 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n2 3 -1 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n323915514\n4\n0 1 2 1\n", "output": ["0\n1\n"]}, {"input": "3\n5\n2 4 2 5 4\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n925217660\n4\n1 1 4 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n993551853\n4\n2 1 1 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n3 0 2 4\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 1 0 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n3 1 2 1\n", "output": ["0\n2\n"]}, {"input": "2\n1\n94783419\n4\n0 1 2 10\n", "output": ["0\n0\n"]}, {"input": "2\n1\n998244353\n4\n2 0 2 6\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 1 1 5 3\n5\n5 3 2 4 1\n2\n0 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n1981447801\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 2 4 3\n", "output": ["0\n1\n"]}, {"input": "3\n5\n2 8 1 2 3\n5\n5 3 2 4 2\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n925217660\n4\n0 4 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n494500097\n4\n4 0 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n627592454\n4\n3 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n27909634\n4\n2 1 0 10\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 2 6 6\n", "output": ["0\n0\n"]}, {"input": "3\n5\n3 4 1 1 3\n5\n5 5 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n1746739171\n4\n-1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n624918540\n4\n2 0 1 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n29355313\n4\n2 2 2 2\n", "output": ["0\n0\n"]}, {"input": "3\n5\n0 4 1 5 3\n5\n10 3 0 4 1\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n144612869\n4\n1 7 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n134212618\n4\n4 4 2 7\n", "output": ["0\n0\n"]}, {"input": "2\n1\n626625781\n4\n1 2 0 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n6643808\n4\n2 2 0 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n535334137\n4\n1 1 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1746739171\n4\n2 2 6 3\n", "output": ["0\n1\n"]}, {"input": "3\n5\n0 4 0 5 3\n5\n7 3 2 4 1\n3\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n313193651\n4\n3 3 1 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n94783419\n4\n7 2 2 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n144612869\n4\n1 6 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n53238141\n4\n4 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n517602066\n4\n3 2 4 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n41454457\n4\n5 0 2 10\n", "output": ["0\n0\n"]}, {"input": "2\n1\n381715760\n4\n5 1 0 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n4 7 0 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n316067198\n4\n0 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n556389862\n4\n4 2 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n23458602\n4\n2 4 -1 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n323915514\n4\n1 1 2 1\n", "output": ["0\n1\n"]}, {"input": "3\n5\n2 4 2 5 2\n5\n5 3 2 4 1\n4\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n993551853\n4\n3 1 1 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1258355607\n4\n3 0 2 4\n", "output": ["0\n0\n"]}, {"input": "2\n1\n94783419\n4\n3 1 2 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n1961051652\n4\n1 0 2 6\n", "output": ["0\n0\n"]}, {"input": "3\n5\n2 1 1 5 3\n5\n5 5 2 4 1\n2\n0 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n75994590\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 0 4 3\n", "output": ["0\n1\n"]}, {"input": "3\n5\n2 8 0 2 3\n5\n5 3 2 4 2\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n533265820\n4\n0 4 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n494500097\n4\n4 0 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n627592454\n4\n1 2 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n27909634\n4\n4 1 0 10\n", "output": ["0\n0\n"]}, {"input": "2\n1\n925217660\n4\n2 4 6 6\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1746739171\n4\n-1 1 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n29355313\n4\n1 2 2 2\n", "output": ["0\n0\n"]}, {"input": "3\n5\n0 4 1 5 3\n5\n10 3 0 5 1\n2\n1 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n134212618\n4\n1 4 2 7\n", "output": ["0\n0\n"]}, {"input": "2\n1\n7874846\n4\n2 2 0 2\n", "output": ["0\n0\n"]}, {"input": "2\n1\n535334137\n3\n1 1 3 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n1746739171\n4\n2 2 12 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n313193651\n4\n3 3 1 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n7680692\n4\n7 2 2 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n3713787\n4\n4 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n41454457\n4\n5 0 2 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n316067198\n4\n-1 2 0 5\n", "output": ["0\n0\n"]}, {"input": "2\n1\n711911604\n4\n4 2 2 3\n", "output": ["0\n1\n"]}, {"input": "2\n1\n39720822\n4\n2 4 -1 2\n", "output": ["0\n1\n"]}, {"input": "2\n1\n323915514\n4\n1 0 2 1\n", "output": ["0\n1\n"]}, {"input": "2\n1\n1258355607\n4\n6 0 2 4\n", "output": ["0\n1\n"]}, {"input": "2\n1\n94783419\n4\n6 1 2 2\n", "output": ["0\n1\n"]}, {"input": "3\n5\n2 1 1 5 3\n5\n5 0 2 4 1\n2\n0 1 1 1\n", "output": ["1\n2\n0\n"]}, {"input": "2\n1\n112473576\n4\n1 1 2 3\n", "output": ["0\n0\n"]}, {"input": "2\n1\n313193651\n4\n2 0 0 3\n", "output": ["0\n0\n"]}], "task_id": "codecontest/46", "prompt": "You have an array a with n elements. \n\nLet's define the eversion process. Let x = a_n. This operation divides array a into two parts: left and right. The left side contains elements from a that are not larger than x (\u2264 x). Meanwhile, the right side has elements from a that are greater than x (> x). The order of elements in each side remains unchanged from before the operation, meaning the partition is stable. Afterward, the array is substituted with the joining of left and right sides.\n\nFor instance, if array a is [2, 4, 1, 5, 3], the eversion unfolds as follows: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe begin with array a and execute eversions on this array. It's provable that following a certain number of eversions, array a ceases to undergo changes. Output the smallest number k such that the array ceases to change after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. ", "repair_prompt": ["You have an array a with n elements. \n\nLet's define the eversion process. Let x = a_n. This operation divides array a into two parts: left and right. The left side contains elements from a that are not larger than x (\u2264 x). Meanwhile, the right side has elements from a that are greater than x (> x). The order of elements in each side remains unchanged from before the operation, meaning the partition is stable. Afterward, the array is substituted with the joining of left and right sides.\n\nFor instance, if array a is [2, 4, 1, 5, 3], the eversion unfolds as follows: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe begin with array a and execute eversions on this array. It's provable that following a certain number of eversions, array a ceases to undergo changes. Output the smallest number k such that the array ceases to change after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. ", "You have an array a with n elements.\n\nLet's define the eversion process. Let x = a_n. This operation divides array a into two parts: left and right. The left side contains elements from a that are not larger than x (\u2264 x). These are the elements that are smaller or equal to x in value. Meanwhile, the right side has elements from a that are greater than x (> x). The order of elements in each side remains unchanged from before the operation, meaning the partition is stable. Afterward, the array is substituted with the joining of left and right sides.\n\nFor instance, if array a is [2, 4, 1, 5, 3], the eversion unfolds as follows: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5].\n\nWe begin with array a and execute eversions on this array. It's provable that following a certain number of eversions, array a ceases to undergo changes. Output the smallest number k such that the array ceases to change after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. ", "You have an array a with n elements. Let's define the eversion process, with x = a_n, and this operation divides array a into two parts: left and right, where the left side contains elements from a that are not larger than x (\u2264 x), and the right side has elements from a that are greater than x (> x). The order of elements in each side remains unchanged from before the operation, meaning the partition is stable. Afterward, the array is substituted with the joining of left and right sides. For instance, if array a is [2, 4, 1, 5, 3], the eversion unfolds as follows: [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. We begin with array a and execute eversions on this array. It's provable that following a certain number of eversions, array a ceases to undergo changes. Output the smallest number k such that the array ceases to change after k eversions.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef eversion_count(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of eversions required for each test case to stabilize the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        eversion_count = 0\n        current_array = case[:]\n        \n        while True:\n            x = current_array[-1]\n            left = [element for element in current_array if element <= x]\n            right = [element for element in current_array if element > x]\n            new_array = left + right\n            \n            if new_array == current_array:\n                break\n            \n            current_array = new_array\n            eversion_count += 1\n        \n        results.append(eversion_count)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Get results from eversion_count function\n    results = eversion_count(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_minimum_eversions(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Find the minimum number of eversions required for each test case to stabilize the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        n = len(a)\n        k = 0\n        while True:\n            x = a[-1]\n            left = [num for num in a if num <= x]\n            right = [num for num in a if num > x]\n            new_a = left + right\n            \n            if new_a == a:\n                break\n            \n            a = new_a\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        test_cases.append(a)\n    \n    # Call the function and print the results\n    results = find_minimum_eversions(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef eversion_process(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of eversions required for each test case to stabilize.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        k = 0\n        previous_array = a[:]\n        \n        while True:\n            x = previous_array[-1]\n            left = [element for element in previous_array if element <= x]\n            right = [element for element in previous_array if element > x]\n            new_array = left + right\n            \n            if new_array == previous_array:\n                break\n            \n            previous_array = new_array\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Get results from eversion_process\n    results = eversion_process(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_minimum_eversions(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Find the minimum number of eversions required for each test case to stabilize the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        k = 0\n        previous_array = None\n        \n        while True:\n            x = a[-1]\n            left = [element for element in a if element <= x]\n            right = [element for element in a if element > x]\n            current_array = left + right\n            \n            if current_array == previous_array:\n                break\n            \n            previous_array = current_array\n            a = current_array\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Call the function and print the results\n    results = find_minimum_eversions(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_minimum_eversions(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Find the minimum number of eversions required for each test case to stabilize the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        k = 0\n        current_array = case[:]\n        \n        while True:\n            x = current_array[-1]\n            left = [element for element in current_array if element <= x]\n            right = [element for element in current_array if element > x]\n            new_array = left + right\n            \n            if new_array == current_array:\n                break\n            \n            current_array = new_array\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    results = find_minimum_eversions(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_min_eversions(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Find the minimum number of eversions required for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        x = case[-1]\n        left = [a for a in case if a <= x]\n        right = [a for a in case if a > x]\n        eversion_count = 0\n        \n        while True:\n            new_array = left + right\n            if new_array == case:\n                break\n            case = new_array\n            x = case[-1]\n            left = [a for a in case if a <= x]\n            right = [a for a in case if a > x]\n            eversion_count += 1\n        \n        results.append(eversion_count)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Output interface\n    results = find_min_eversions(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_minimum_eversions(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Find the minimum number of eversions required for each test case to stabilize the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the minimum number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        n = len(a)\n        k = 0\n        while True:\n            x = a[-1]\n            left = [element for element in a if element <= x]\n            right = [element for element in a if element > x]\n            new_a = left + right\n            \n            if new_a == a:\n                break\n            \n            a = new_a\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    results = find_minimum_eversions(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef eversion_process(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum number of eversions required for each test case\n    such that the array stops changing.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        n = len(a)\n        k = 0\n        while True:\n            x = a[-1]\n            left = [num for num in a if num <= x]\n            right = [num for num in a if num > x]\n            new_a = left + right\n            \n            if new_a == a:\n                break\n            \n            a = new_a\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input, process each test case, and print results.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        a = list(map(int, input().strip().split()))\n        test_cases.append(a)\n    \n    # Call the function and print the results\n    results = eversion_process(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_eversion_count(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of eversions required for each test case until the array stops changing.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        k = 0\n        while True:\n            x = a[-1]  # Last element of the array\n            left = [num for num in a if num <= x]\n            right = [num for num in a if num > x]\n            new_a = left + right\n            \n            if new_a == a:\n                break\n            \n            a = new_a\n            k += 1\n        \n        results.append(k)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Output interface\n    results = find_eversion_count(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef eversion_count(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of eversions required for each test case to stabilize the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of eversions for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        eversion_count = 0\n        current_array = case\n        \n        while True:\n            x = current_array[-1]\n            left = [element for element in current_array if element <= x]\n            right = [element for element in current_array if element > x]\n            new_array = left + right\n            \n            if new_array == current_array:\n                break\n            \n            current_array = new_array\n            eversion_count += 1\n        \n        results.append(eversion_count)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    results = eversion_count(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to determine the number of eversions needed for an array to stabilize. The process involves partitioning the array based on the last element and rearranging it until no further changes occur. The solution must efficiently handle multiple test cases and large input sizes.\nrequirement pool:\n- Implement the eversion algorithm to handle multiple test cases\n- Optimize the algorithm for performance with large inputs\n- Ensure the output format matches the requirements\n- Provide clear documentation for the code\n- Include error handling for edge cases\nWe will implement a function to perform the eversion process on an array. The function will repeatedly partition the array based on the last element until no further changes occur. We will use efficient list operations to handle large input sizes and multiple test cases. The algorithm will be optimized for performance by minimizing unnecessary operations and using stable partitioning.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves partitioning the array into two parts based on the last element, x. Elements less than or equal to x form the left part, and elements greater than x form the right part. The array is then reconstructed by joining these two parts.\n\n# [phrase showing quantity relationship]\n    'not larger than': means elements \u2264 x\n    'greater than': means elements > x\n\n# [degree adverb]\n    'smallest': means finding the minimum number of eversions required for the array to stop changing\n\n# [code logic]\n    1. For each test case, read the number of elements n and the array a.\n    2. Initialize a counter for the number of eversions.\n    3. Perform the eversion process:\n       - Set x as the last element of the array.\n       - Partition the array into left (elements \u2264 x) and right (elements > x).\n       - Reconstruct the array by joining left and right.\n       - Increment the eversion counter.\n    4. Repeat until the array stops changing.\n    5. Output the eversion counter for each test case.\n\n# [edge case]\n    Test case with all elements equal: [1, 1, 1, 1] = 0\n    Explanation: Since all elements are equal, no eversion changes the array, so k = 0.\n\n    Test case with descending order: [5, 4, 3, 2, 1] = 4\n    Explanation: Each eversion will move one element to the left side until all elements are in ascending order.\n\n    Test case with alternating high and low values: [1, 3, 1, 3, 1] = 2\n    Explanation: The first eversion will move all 1s to the left, and the second will stabilize the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles them by iterating until no changes occur in the array.\n", "requirement analysis:\nThe task requires implementing an algorithm to perform eversions on an array until it stabilizes. The key challenge is to efficiently partition the array and determine the number of eversions needed. The solution must handle up to 200,000 elements across multiple test cases, ensuring performance and correctness.\nrequirement pool:\n- Implement the eversion algorithm efficiently\n- Ensure the solution handles the maximum input size within constraints\n- Optimize the code for readability and maintainability\n- Provide detailed comments and documentation\n- Include edge case handling and testing\nWe will implement the eversion algorithm using a simple loop to partition the array based on the last element. The algorithm will repeatedly perform eversions until the array stabilizes. We will use efficient list operations to ensure the solution handles large input sizes within constraints. The approach will focus on performance and readability, leveraging Python's built-in list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves dividing the array into two parts based on the last element, x. Elements less than or equal to x go to the left, and elements greater than x go to the right. The array is then reformed by joining the left and right parts.\n\n    'stabilizes'\n    Explanation: The array stabilizes when further eversions do not change its order.\n\n# [phrase showing quantity relationship]\n    'not larger than (\u2264 x)': Elements that are less than or equal to the last element of the array.\n    'greater than (> x)': Elements that are greater than the last element of the array.\n\n# [degree adverb]\n    'smallest': Refers to the minimum number of eversions required for the array to stabilize.\n\n# [code logic]\n1. For each test case, read the number of elements n and the array a.\n2. Initialize a counter for eversions, k = 0.\n3. While the array is not stable:\n   - Set x as the last element of the array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Reform the array by concatenating left and right.\n   - Increment k.\n4. Check if the array has stabilized (i.e., no change after an eversion).\n5. Output k for each test case.\n\n# [edge case]\n    Test case: [1, 1, 1, 1] = 0\n    Explanation: All elements are equal, so no eversion changes the array.\n\n    Test case: [5, 5, 5, 5, 5] = 0\n    Explanation: All elements are equal and greater than any possible partition point, so no eversion changes the array.\n\n    Test case: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already sorted in increasing order, so no eversion changes the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where no change occurs after an eversion.\n", "requirement analysis:\nThe requirements focus on implementing an eversion process for arrays, ensuring the solution is efficient and handles large inputs. The key challenge is optimizing the algorithm to minimize the number of eversions needed for the array to stabilize.\nrequirement pool:\n- Implement the eversion process correctly\n- Optimize the algorithm for large input sizes\n- Ensure the solution handles multiple test cases efficiently\n- Provide clear documentation for the eversion process\n- Test the solution against edge cases\nWe will implement the eversion process using a simple loop to partition the array based on the last element. The process will be repeated until the array stabilizes. We will use Python's built-in list operations to efficiently handle the partitioning and joining of arrays. Given the constraints, the solution will be optimized to handle large input sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves partitioning the array into two parts based on the last element, x. Elements less than or equal to x form the left side, and elements greater than x form the right side. The array is then reformed by joining these two sides.\n\n    'stabilizes'\n    Explanation: The array stabilizes when further eversions do not change its order, meaning the partitioning results in the same array.\n\n# [phrase showing quantity relationship]\n    'smallest number k'\n    Explanation: We need to find the minimum number of eversions required for the array to stabilize, i.e., stop changing.\n\n# [degree adverb]\n    'smallest'\n    Explanation: We are looking for the least number of eversions needed for the array to stabilize.\n\n# [code logic]\n1. For each test case, read the number of elements n and the array a.\n2. Initialize a counter for eversions.\n3. Perform the eversion process:\n   - Set x as the last element of the array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Join left and right to form the new array.\n4. Check if the new array is identical to the previous one. If so, stop; otherwise, increment the counter and repeat.\n5. Output the counter value as k for each test case.\n\n# [edge case]\n    Test case with all identical elements:\n    Input: [1, 1, 1, 1]\n    Expected output: 0\n    Explanation: Since all elements are identical, no eversion changes the array.\n\n    Test case with descending order:\n    Input: [5, 4, 3, 2, 1]\n    Expected output: 4\n    Explanation: Each eversion will move one element to the left side until all elements are sorted in ascending order.\n\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Expected output: 0\n    Explanation: The array is already sorted; no eversion changes it.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by checking if the array changes after each eversion.\n", "requirement analysis:\nThe problem requires determining the number of eversions needed for an array to stabilize. The key is to efficiently partition the array based on the last element and repeat until no changes occur. The challenge lies in handling large input sizes within the given constraints.\nrequirement pool:\n- Implement the eversion algorithm efficiently\n- Ensure the solution handles the maximum input size\n- Optimize for readability and maintainability\n- Provide detailed comments and documentation\n- Include edge case testing\nWe will implement the eversion algorithm by iteratively partitioning the array based on the last element and checking if the array stabilizes. The approach will use simple list operations to ensure efficiency and readability. We will use Python's built-in list functionalities to handle the partitioning and joining of arrays.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves dividing the array into two parts based on the last element, x. Elements less than or equal to x form the left part, and elements greater than x form the right part. The array is then reformed by joining the left and right parts.\n\n    'stabilizes'\n    Explanation: The array stabilizes when further eversions do not change its order.\n\n# [phrase showing quantity relationship]\n    'not larger than (\u2264 x)': This means elements that are less than or equal to x.\n    'greater than (> x)': This means elements that are strictly greater than x.\n\n# [degree adverb]\n    'smallest': This refers to finding the minimum number of eversions required for the array to stabilize.\n\n# [code logic]\n1. For each test case, read the number of elements n and the array a.\n2. Initialize a counter for eversions, k = 0.\n3. While the array is not stable:\n   - Set x as the last element of the array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Reform the array by joining left and right.\n   - Increment k.\n4. Check if the current array is equal to the previous array. If so, break the loop.\n5. Output k for each test case.\n\n# [edge case]\n    Test case: [1, 1, 1, 1] = 0\n    Explanation: All elements are equal, so no eversion is needed as the array is already stable.\n\n    Test case: [5, 4, 3, 2, 1] = 4\n    Explanation: Each eversion will move one element to the right side until all elements are sorted in ascending order.\n\n    Test case: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already sorted in ascending order, so no eversion is needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by checking if the array stabilizes after each eversion.\n", "requirement analysis:\nThe problem requires determining the number of eversions needed for an array to stabilize. The key is to efficiently partition the array based on the last element and repeat until no changes occur. The solution must handle up to 200,000 elements across multiple test cases, ensuring performance and correctness.\nrequirement pool:\n- Implement the eversion algorithm efficiently\n- Ensure the solution handles edge cases\n- Optimize for performance with large inputs\n- Maintain code readability\n- Provide detailed comments and documentation\nWe will implement an efficient algorithm to perform the eversion process on the array. The key is to partition the array based on the last element and repeat this process until the array stabilizes. We will use a simple loop to count the number of eversions required for stabilization. The algorithm will handle multiple test cases and ensure performance by minimizing unnecessary operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves dividing the array into two parts based on the last element, x. Elements less than or equal to x form the left part, and elements greater than x form the right part. The array is then reformed by concatenating the left and right parts.\n\n    'stabilizes'\n    Explanation: The array stabilizes when further eversions do not change its order.\n\n# [phrase showing quantity relationship]\n    'not larger than (\u2264 x)': means elements that are less than or equal to x.\n    'greater than (> x)': means elements that are strictly greater than x.\n\n# [degree adverb] \n    'smallest number k': means the minimum number of eversions required for the array to stabilize.\n\n# [code logic]\n1. For each test case, read the number of elements n and the array a.\n2. Initialize a counter for eversions, k = 0.\n3. While the array is not stable:\n   - Set x as the last element of the array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Concatenate left and right to form the new array.\n   - Increment k.\n4. Check if the new array is the same as the previous one. If so, break the loop.\n5. Output k for each test case.\n\n# [edge case] \n    Test case 1: [1, 1, 1, 1] = 0\n    Explanation: All elements are equal, so no eversion is needed as the array is already stable.\n\n    Test case 2: [5, 4, 3, 2, 1] = 1\n    Explanation: The first eversion will sort the array into [1, 2, 3, 4, 5], which is stable.\n\n    Test case 3: [1] = 0\n    Explanation: A single-element array is inherently stable.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by checking if further eversions change the array.\n", "requirement analysis:\nThe requirement is to determine the number of eversions needed for an array to stabilize. The process involves partitioning the array based on the last element and rearranging it. The challenge is to efficiently handle up to 200,000 elements across multiple test cases.\nrequirement pool:\n- Implement the eversion process as described.\n- Ensure the solution is optimized for large inputs.\n- Provide detailed comments and documentation.\n- Include test cases to validate the solution.\n- Optimize for readability and maintainability.\nWe will implement the eversion process using a simple loop to partition the array based on the last element and count the number of eversions until the array stabilizes. The approach will be efficient enough to handle the maximum constraints smoothly. We will use Python's built-in list operations to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves partitioning the array into two parts based on the last element, x. Elements less than or equal to x form the left side, and elements greater than x form the right side. The array is then reformed by joining these two sides.\n\n# [phrase showing quantity relationship]\n    'not larger than x (\u2264 x)': This indicates that elements on the left side of the partition are less than or equal to the last element of the array.\n    'greater than x (> x)': This indicates that elements on the right side of the partition are greater than the last element of the array.\n\n# [degree adverb]\n    'smallest': We need to find the minimum number of eversions required for the array to stop changing.\n\n# [code logic]\n    1. For each test case, initialize a counter for eversions.\n    2. Perform the eversion process:\n       - Identify the last element of the array as x.\n       - Partition the array into left and right based on x.\n       - Reform the array by joining left and right.\n    3. Check if the array changes after each eversion.\n    4. Increment the counter until no changes occur.\n    5. Return the counter as the result for each test case.\n\n# [edge case]\n    Test case with all elements equal: [1, 1, 1, 1] = 0\n    Explanation: Since all elements are equal, no partitioning will change the array, so no eversions are needed.\n    \n    Test case with descending order: [5, 4, 3, 2, 1] = 1\n    Explanation: The first eversion will move all elements except the last one to the right side, stabilizing after one eversion.\n    \n    Test case with ascending order: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already stable as no elements are greater than the last element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by checking if the array changes after each eversion.\n", "requirement analysis:\nThe task requires implementing an algorithm that performs a stable partitioning of an array based on the last element, repeatedly, until no further changes occur. The challenge is to determine the minimum number of such operations required for the array to stabilize. The solution must handle multiple test cases efficiently, with constraints on the total number of elements across all test cases.\nrequirement pool:\n- Implement the eversion process as described\n- Ensure the solution handles up to 100 test cases efficiently\n- Optimize the algorithm for large input sizes\n- Provide clear and correct output for each test case\n- Maintain code readability and simplicity\nWe will implement a function that performs the eversion process on an array. The function will repeatedly partition the array based on the last element until no further changes occur. The key challenge is to efficiently determine the number of eversions required for stabilization. We will use a simple loop to simulate the eversion process and track changes to the array. The solution will handle multiple test cases by iterating over each test case and applying the eversion logic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves partitioning the array into two parts based on the last element, x. Elements less than or equal to x go to the left, and elements greater than x go to the right. The array is then reformed by joining these two parts.\n\n    'stabilization'\n    Explanation: Stabilization occurs when further eversions do not change the array, meaning the partitioning results in the same array as before.\n\n# [phrase showing quantity relationship]\n    'smallest number k'\n    Explanation: This refers to the minimum number of eversions required for the array to stabilize, i.e., stop changing.\n\n# [degree adverb] \n    'smallest'\n    Explanation: We need to find the minimum number of eversions after which the array stops changing.\n\n# [code logic]\n1. For each test case, read the number of elements n and the array a.\n2. Initialize a counter for eversions, k = 0.\n3. While the array changes:\n   - Set x as the last element of the current array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Reform the array by joining left and right.\n   - Increment k.\n4. Stop when the array no longer changes and return k.\n\n# [edge case] \n    Test case 1: [1, 1, 1, 1] = 0\n    Explanation: All elements are equal, so no eversion is needed as the array is already stable.\n\n    Test case 2: [5, 4, 3, 2, 1] = 4\n    Explanation: Each eversion will move one element to the right side until all elements are sorted in ascending order.\n\n    Test case 3: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already sorted in ascending order, so no eversion is needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array changes after each eversion will naturally handle these cases.\n", "requirement analysis:\nThe requirements focus on implementing an eversion process that stabilizes the array after a certain number of operations. The challenge lies in efficiently partitioning the array and determining the number of eversions needed for stabilization. The solution must handle multiple test cases and large input sizes while ensuring performance and clarity.\nrequirement pool:\n- Implement the eversion process correctly\n- Ensure the solution handles multiple test cases efficiently\n- Optimize the algorithm for large input sizes\n- Provide clear and concise output\n- Minimize execution time\nWe will implement the eversion process using a simple loop to partition the array based on the last element. The process will be repeated until the array stabilizes, i.e., no further changes occur. We will use Python's built-in list operations to efficiently handle the partitioning and joining of arrays. The solution will be optimized to handle multiple test cases and large input sizes by iterating through the array and checking for changes after each eversion.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves dividing the array into two parts based on the last element, x. Elements less than or equal to x go to the left, and elements greater than x go to the right. The array is then reformed by joining the left and right parts.\n\n# [phrase showing quantity relationship]\n    'not larger than (\u2264)': Elements that are less than or equal to x are placed on the left side.\n    'greater than (>)': Elements that are greater than x are placed on the right side.\n\n# [degree adverb]\n    'smallest': We need to find the minimum number of eversions required for the array to stop changing.\n\n# [code logic]\n1. For each test case, read the number of elements n and the array a.\n2. Initialize a counter k to track the number of eversions.\n3. Perform the eversion process:\n   - Set x as the last element of the array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Reform the array by joining left and right.\n   - Increment k.\n4. Repeat the process until the array stops changing.\n5. Output k for each test case.\n\n# [edge case]\n    Test case: [1, 1, 1, 1] = 0\n    Explanation: All elements are equal, so no eversion is needed as the array is already stable.\n\n    Test case: [5, 5, 5, 5, 5] = 0\n    Explanation: All elements are equal and greater than any possible x, so no eversion is needed.\n\n    Test case: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already sorted in non-decreasing order, so no eversion is needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by checking if the array changes after each eversion. If no change occurs, it stops further processing.\n", "requirement analysis:\nThe task requires implementing an algorithm to perform the eversion process on an array and determine the number of times this process needs to be repeated until the array stops changing. The solution must efficiently handle multiple test cases and large input sizes, ensuring stability in partitioning and correctness in output.\nrequirement pool:\n- Implement the eversion process algorithm.\n- Optimize the algorithm for large input sizes.\n- Ensure the algorithm is easy to understand and maintain.\n- Test the algorithm with various edge cases.\n- Document the code and provide usage examples.\nWe will implement a function to perform the eversion process on an array and determine the number of times this process needs to be repeated until the array stops changing. The approach will involve iterating over the array, partitioning it based on the last element, and checking for stability. We will use Python's built-in list operations to efficiently handle the partitioning and joining of arrays.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves dividing the array into two parts based on the last element, x. Elements less than or equal to x form the left part, and elements greater than x form the right part. The array is then reformed by joining the left and right parts.\n\n    'stability'\n    Explanation: The order of elements in each partition remains unchanged from their original order in the array.\n\n# [phrase showing quantity relationship]\n    'not larger than (\u2264 x)': Elements that are less than or equal to the last element of the array.\n    'greater than (> x)': Elements that are greater than the last element of the array.\n\n# [degree adverb]\n    'smallest': We need to find the minimum number of eversions required for the array to stop changing.\n\n# [code logic]\n1. For each test case, read the number of elements, n, and the array, a.\n2. Initialize a counter for eversions, k = 0.\n3. While the array changes:\n   - Set x as the last element of the array.\n   - Partition the array into left (elements \u2264 x) and right (elements > x).\n   - Reform the array by joining left and right.\n   - Increment k.\n4. Stop when the array no longer changes and output k.\n\n# [edge case]\n    Test case: [1, 1, 1, 1] = 0\n    Explanation: All elements are equal, so no eversion is needed as the array is already stable.\n\n    Test case: [5, 5, 5, 5, 5] = 0\n    Explanation: All elements are equal and greater than any possible partition point, so no eversion is needed.\n\n    Test case: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already sorted in increasing order, so no eversion is needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where no eversion is needed by checking if the array changes after an eversion attempt.\n", "requirement analysis:\nThe task requires implementing an algorithm that performs a series of eversions on an array until it stabilizes. The key challenge is to efficiently determine the number of eversions needed for the array to stop changing, especially given the constraints on input size.\nrequirement pool:\n- Implement the eversion algorithm to handle up to 100 test cases efficiently.\n- Ensure the solution can process arrays with up to 200,000 elements.\n- Optimize the algorithm to minimize time complexity.\n- Provide clear and concise output for each test case.\n- Document the code for maintainability and readability.\nWe will implement a function that performs the eversion process on an array until it stabilizes. The function will iterate over the array, partitioning it into left and right parts based on the last element, and then combine these parts. We will use a loop to continue this process until the array no longer changes. The solution will be efficient enough to handle the maximum constraints using simple list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'eversion process'\n    Explanation: The eversion process involves partitioning an array into two parts based on the last element, x. Elements less than or equal to x form the left part, and elements greater than x form the right part. The array is then reformed by joining these two parts.\n\n# [phrase showing quantity relationship]\n    'not larger than (\u2264 x)': means elements in the left part are less than or equal to the last element.\n    'greater than (> x)': means elements in the right part are greater than the last element.\n\n# [degree adverb]\n    'smallest': means we need to find the minimum number of eversions required for the array to stabilize.\n\n# [code logic]\n    1. Initialize a counter for the number of eversions.\n    2. While the array changes:\n        - Set x as the last element of the array.\n        - Partition the array into left and right based on x.\n        - Join left and right to form a new array.\n        - Increment the eversion counter.\n    3. Return the eversion counter when the array no longer changes.\n\n# [edge case]\n    Test case: [1, 1, 1, 1] = 0\n    Explanation: Since all elements are equal, no eversion is needed as the array is already stable.\n\n    Test case: [5, 5, 5, 5, 5] = 0\n    Explanation: Similar to the previous case, all elements are equal, so no eversion is needed.\n\n    Test case: [1, 2, 3, 4, 5] = 1\n    Explanation: After one eversion with x = 5, the array becomes [1, 2, 3, 4, 5], which is already stable.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where no eversion is needed by checking if the array changes after an eversion.\n"], "scores": [], "pass_results": [true, true, true, false, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 369, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case print a single integer k \u2014 the number of eversions after which the array stops changing.\n\nExample\n\nInput\n\n\n3\n5\n2 4 1 5 3\n5\n5 3 2 4 1\n4\n1 1 1 1\n\n\nOutput\n\n\n1\n2\n0\n\nNote\n\nConsider the fist example.\n\n  * The first eversion: a = [1, 4, 2, 5, 3], x = 3. [2, 4, 1, 5, 3] \u2192 [2, 1, 3], [4, 5] \u2192 [2, 1, 3, 4, 5]. \n  * The second and following eversions: a = [2, 1, 3, 4, 5], x = 5. [2, 1, 3, 4, 5] \u2192 [2, 1, 3, 4, 5], [] \u2192 [2, 1, 3, 4, 5]. This eversion does not change the array, so the answer is 1. \n\n\n\nConsider the second example. \n\n  * The first eversion: a = [5, 3, 2, 4, 1], x = 1. [5, 3, 2, 4, 1] \u2192 [1], [5, 3, 2, 4] \u2192 [1, 5, 3, 2, 4]. \n  * The second eversion: a = [1, 5, 3, 2, 4], x = 4. [1, 5, 3, 2, 4] \u2192 [1, 3, 2, 4], [5] \u2192 [1, 3, 2, 4, 5]. \n  * The third and following eversions: a = [1, 3, 2, 4, 5], x = 5. [1, 3, 2, 4, 5] \u2192 [1, 3, 2, 4, 5], [] \u2192 [1, 3, 2, 4, 5]. This eversion does not change the array, so the answer is 2. ", "mutate_method": "rephrase_one", "parent_index": 18}
