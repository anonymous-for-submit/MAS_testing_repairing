{"name": "1579_D. Productive Meeting", "description": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "tags": ["constructive algorithms", "graphs", "greedy"], "difficulty": 10, "id": 1579, "sample_io": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}], "test_list": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 1\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 0\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n2\n2 3\n1 2\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n8 4 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 -1 0\n5\n5 0 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 5\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n0\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 1\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n6 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 2\n5 1\n2 4\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 0 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 1 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 2\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 3 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 2\n3 4\n2 3\n4 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 4 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n3 4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 1 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n1\n3 2\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 2 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["0\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 3 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 3\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 0\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n2 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 4 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n2 4\n2 4\n2 4\n1 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 0\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n0\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 2 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 1 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n0 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 1 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 2\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 1 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 3\n4 1\n4 2\n4 3\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 1 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n3\n4 2\n4 2\n4 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 5\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n0 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 0 0\n2\n12 0\n3\n-1 0 0\n5\n1 4 -1 1 4\n5\n1 0 1 0 10\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n5\n2 5\n2 5\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n0 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n3\n5 2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n6\n4 3\n4 2\n4 3\n4 1\n4 2\n4 3\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 0\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 0\n5\n8 3 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 1\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n1 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n0 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 8\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n9\n5 1\n5 1\n5 2\n5 1\n5 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 1 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n2\n3 1\n2 3\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 0 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n6 3\n3\n1 0 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 2\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 3\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 1\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 1\n3 2\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 2\n2\n12 4\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n4\n1 2\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 5\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n2 1\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 3\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 1 4\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n14 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 1\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 4 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n1 2 2 4\n3\n0 0 0\n2\n16 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 1\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n1\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n1 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 1\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n1\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 1\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n1 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n7\n1 5\n1 2\n1 5\n1 2\n4 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 0\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 3 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 2\n3 4\n2 3\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n1 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 0 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 5 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 0\n5\n12 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n2 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 5\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 2 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n1 2\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}], "task_id": "codecontest/16", "prompt": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several times per meeting. They are allowed to converse multiple times with each other during the course of the meeting. They can talk as many times as they want.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "repair_prompt": ["An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several times per meeting. They are allowed to converse multiple times with each other during the course of the meeting. They can talk as many times as they want.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several times during the meeting, engaging in private conversations whenever they wish. They are allowed to converse multiple times with each other during the course of the meeting. They can talk as many times as they want.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private, conversing multiple times with each other during the course of the meeting. They can talk as many times as they want.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2"], "completions": ["from typing import List\n## main.py\n\nfrom heapq import heappush, heappop\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting by pairing the most sociable individuals.\n\n    Args:\n        t: Number of test cases.\n        test_cases: List of tuples, each containing (n, sociability_list).\n\n    Returns:\n        List of results, each containing the number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n    for n, sociability in test_cases:\n        # Use a max-heap to store sociability with negative values for max-heap behavior\n        heap = []\n        for i in range(n):\n            if sociability[i] > 0:\n                heappush(heap, (-sociability[i], i + 1))\n        \n        talks = []\n        while len(heap) > 1:\n            s1, p1 = heappop(heap)\n            s2, p2 = heappop(heap)\n            talks.append((p1, p2))\n            if s1 + 1 < 0:\n                heappush(heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heappush(heap, (s2 + 1, p2))\n        \n        results.append((len(talks), talks))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n    \n    results = maximize_talks(t, test_cases)\n    for k, talks in results:\n        print(k)\n        for i, j in talks:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n        while len(heap) > 1:\n            # Extract the two most sociable people\n            s1, p1 = heapq.heappop(heap)\n            s2, p2 = heapq.heappop(heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and push them back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, p2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for k, talks in results:\n        print(k)\n        for i, j in talks:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability values.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            talks.append((i1, i2))\n\n            # Decrease their sociability and reinsert them if they still have remaining sociability\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of private talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum\n            number of talks and the pairs of people involved in each talk.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because heapq is a min-heap by default\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            talks.append((i1, i2))\n\n            # Decrease their sociability\n            s1 += 1\n            s2 += 1\n\n            # If they still have sociability left, push them back into the heap\n            if s1 < 0:\n                heapq.heappush(max_heap, (s1, i1))\n            if s2 < 0:\n                heapq.heappush(max_heap, (s2, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        sociability = list(map(int, input().strip().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of private talks in a meeting based on sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrement their sociability and reinsert them into the heap if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Output interface\nresults = maximize_talks(t, test_cases)\nfor result in results:\n    k, talks = result\n    print(k)\n    for talk in talks:\n        print(talk[0], talk[1])\n", "from typing import List\n## main.py\n\nfrom heapq import heappush, heappop\n\ndef maximize_talks(t: int, test_cases: list) -> list:\n    \"\"\"Maximize the number of private talks in a meeting.\n\n    Args:\n        t: Number of test cases.\n        test_cases: List of tuples, each containing (n, sociability_list).\n\n    Returns:\n        List of results, each containing the number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq\n        max_heap = []\n        for i, s in enumerate(sociability):\n            if s > 0:\n                heappush(max_heap, (-s, i + 1))  # Store negative sociability and 1-based index\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, p1 = heappop(max_heap)\n            s2, p2 = heappop(max_heap)\n\n            # Record the talk\n            talks.append((p1, p2))\n\n            # Decrease their sociability and push back if still positive\n            if s1 + 1 < 0:\n                heappush(max_heap, (s1 + 1, p1))\n            if s2 + 1 < 0:\n                heappush(max_heap, (s2 + 1, p2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        sociability = list(map(int, input().strip().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result[0])  # Number of talks\n        for talk in result[1]:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a list of tuples (sociability, index) to keep track of original indices\n        people = [(sociability[i], i + 1) for i in range(n)]\n        \n        # Sort people by sociability in descending order\n        people.sort(reverse=True, key=lambda x: x[0])\n        \n        talks = []\n        \n        # Use a greedy approach to pair the most sociable individuals first\n        while len(people) > 1 and people[0][0] > 0 and people[1][0] > 0:\n            # Pair the two most sociable people\n            first = people[0]\n            second = people[1]\n            \n            # Record the pair of indices for each talk\n            talks.append((first[1], second[1]))\n            \n            # Decrease their sociability by one after each talk\n            people[0] = (first[0] - 1, first[1])\n            people[1] = (second[0] - 1, second[1])\n            \n            # Re-sort the list to maintain order\n            people.sort(reverse=True, key=lambda x: x[0])\n        \n        # Append the result for this test case\n        results.append((len(talks), talks))\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        sociability = list(map(int, input().strip().split()))\n        test_cases.append((n, sociability))\n    \n    # Call the function\n    results = maximize_talks(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum number of talks and the pairs of people who talked.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative sociability values to simulate a max-heap using heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Pop the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrement their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        print(result[0])  # number of talks\n        for talk in result[1]:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrease their sociability and reinsert them if they still have positive sociability\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Call the function\nresults = maximize_talks(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, talks = result\n    print(k)\n    for talk in talks:\n        print(talk[0], talk[1])\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, containing the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        talks = []\n        while len(heap) > 1:\n            # Extract the two people with the highest sociability\n            s1, i1 = heapq.heappop(heap)\n            s2, i2 = heapq.heappop(heap)\n\n            # Record a talk between them\n            talks.append((i1, i2))\n\n            # Decrease their sociability by 1\n            s1 += 1\n            s2 += 1\n\n            # If they still have positive sociability, push them back into the heap\n            if s1 < 0:\n                heapq.heappush(heap, (s1, i1))\n            if s2 < 0:\n                heapq.heappush(heap, (s2, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe main requirement is to maximize the number of talks in a meeting by efficiently pairing participants based on their sociability. The solution must handle large input sizes and provide results quickly. The challenge lies in optimizing the pairing process to ensure maximum productivity.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks.\n- Ensure the solution can handle up to 200,000 participants efficiently.\n- Provide flexibility in pairing participants with varying sociability.\n- Optimize the solution for both time and space complexity.\n- Consider edge cases where some participants have zero sociability.\nWe will implement a greedy algorithm to maximize the number of talks. The approach involves repeatedly pairing the two most sociable people until no more talks can be made. This ensures that the most sociable individuals are utilized to their full potential, maximizing the total number of talks. We will use a priority queue (max-heap) to efficiently manage and retrieve the most sociable individuals. The heap will allow us to efficiently update and retrieve the top sociable individuals after each talk.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of talks during the meeting by pairing individuals with the highest sociability until no more talks can be made.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of talks that can occur during the meeting by optimally pairing individuals based on their sociability.\n\n# [degree adverb]\n    'most productive': This refers to achieving the highest number of talks possible during the meeting.\n\n# [code logic]\n    1. For each test case, read the number of people and their sociability.\n    2. Use a max-heap to keep track of the sociability of each person.\n    3. Continuously pair the two most sociable individuals until no more pairs can be made.\n    4. After each pair, decrease their sociability and update the heap.\n    5. Record each pair and count the total number of talks.\n    6. Output the total number of talks and the pairs for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3, 0 0 0\n    Expected output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2, 0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but they need a partner, so no talks occur.\n\n    Test case with two people having equal sociability:\n    Input: 2, 3 3\n    Expected output: 3\n    Explanation: Both individuals can talk three times with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle these scenarios by not pairing individuals when no valid pairs exist.\n", "requirement analysis:\nThe main requirement is to determine the maximum number of talks possible in a meeting given the sociability constraints of each participant. The solution should efficiently handle multiple test cases and large input sizes, ensuring that the output format is clear and adheres to the specified requirements.\nrequirement pool:\n- Implement the algorithm to maximize the number of talks.\n- Ensure the solution handles up to 2 \u22c5 10^5 participants efficiently.\n- Provide a user-friendly output format.\n- Optimize the solution for large datasets.\n- Consider edge cases where some participants have zero sociability.\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two most sociable people who can still talk, as this will maximize the number of talks. We will use a priority queue (heap) to efficiently manage and retrieve the most sociable participants. The heapq library in Python is suitable for this task as it provides efficient operations for maintaining a heap structure.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: In the requirement, sociability refers to the number of talks a person can participate in before leaving the meeting. A person with a sociability of 0 leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: This refers to arranging the talks in such a way that the total number of conversations is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement that results in the highest number of conversations. In code, this can be implemented by always pairing the two most sociable people available.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible. In code, this is achieved by using a greedy approach to pair the most sociable people.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability.\n3. Use a max-heap (priority queue) to keep track of people based on their sociability.\n4. While there are at least two people who can still talk:\n   - Extract the two people with the highest sociability.\n   - Record a talk between them.\n   - Decrease their sociability and push them back into the heap if they can still talk.\n5. Output the total number of talks and the pairs involved.\n\n# [edge case]\n    Test case with all sociability values as 0:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: No one can talk, so no talks occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 3\n           0 0 2\n    Expected output: 0\n    Explanation: Only one person can talk, but they need a partner, so no talks occur.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           2 2\n    Expected output: 2\n                     1 2\n                     1 2\n    Explanation: Both can talk twice, so they can have two conversations.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue naturally handles cases where no talks are possible or when only one person can talk.\n", "requirement analysis:\nThe requirement is to maximize the number of talks in a meeting by efficiently pairing participants based on their sociability limits. The solution must handle multiple test cases and large input sizes effectively, ensuring that the maximum number of interactions is achieved without exceeding any participant's sociability limit.\nrequirement pool:\n- Develop an algorithm to maximize the number of talks.\n- Ensure the solution handles up to 2 \u22c5 10^5 participants efficiently.\n- Optimize the pairing process to minimize computational time.\n- Provide flexibility in output format for multiple valid solutions.\n- Implement a user-friendly interface for input and output.\nWe will implement a greedy algorithm to maximize the number of talks. The approach involves repeatedly pairing the two most sociable people until no more talks can be made. This ensures that the maximum number of interactions is achieved efficiently. We will use a priority queue (max-heap) to keep track of the sociability of each participant, which allows us to efficiently find and update the most sociable participants.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can have a number of talks equal to their sociability value.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of conversations that can occur during the meeting by strategically pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur. In code, this involves iterating and pairing individuals until no more valid pairs can be formed.\n\n# [degree adverb]\n    'most productive': This implies achieving the highest possible number of talks, which is the main objective of the problem.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap (priority queue) to keep track of the sociability values.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two people with the highest sociability.\n   - Record a conversation between them.\n   - Decrease their sociability by one and reinsert them into the heap if they still have remaining sociability.\n5. Output the total number of conversations and the pairs involved for each test case.\n\n# [edge case]\n    Test case 1: 2 0 0 = 0\n    Explanation: Both people have a sociability of 0, so no talks can occur.\n\n    Test case 2: 3 0 0 2 = 0\n    Explanation: Only one person has non-zero sociability, so no pairs can be formed.\n\n    Test case 3: 2 1 1 = 1\n    Explanation: Both people can talk exactly once, resulting in one conversation.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle cases where no valid pairs can be formed or when all sociability values are zero.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks during a meeting by efficiently utilizing the sociability parameters of each participant. The solution must handle multiple test cases and large input sizes, ensuring optimal productivity.\nrequirement pool:\n- Maximize the number of private talks\n- Efficiently manage sociability parameters\n- Handle large input sizes effectively\n- Provide clear and correct output for each test case\n- Ensure solution scalability\nWe will use a greedy approach to maximize the number of private talks. The idea is to always pair the two most sociable people available until no more talks can be made. This ensures that the sociability parameters are utilized efficiently. We will use a priority queue (heap) to keep track of the sociability of each participant, allowing us to efficiently retrieve and update the most sociable individuals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of private conversations that can occur during the meeting by pairing individuals optimally based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur. In code, this involves iterating through the sociability values and pairing individuals until no more talks can be made.\n\n# [degree adverb]\n    'most productive': This implies achieving the highest number of talks possible. In code, this is achieved by always pairing the two most sociable people available.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap (priority queue) to keep track of the sociability values.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two people with the highest sociability.\n   - Record a conversation between them.\n   - Decrease their sociability by one.\n   - If they still have sociability left, push them back into the heap.\n5. Output the total number of conversations and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all zero sociability: \n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: No one can talk as all have zero sociability.\n\n    Test case with one person having high sociability and others zero:\n    Input: 3\n           5 0 0\n    Expected output: 0\n    Explanation: The person with high sociability cannot talk alone.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both can talk to each other three times.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue naturally handles cases where no talks can occur or when only certain pairs can talk.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks during a meeting by efficiently utilizing each participant's sociability. The solution must handle multiple test cases and large input sizes, ensuring optimal performance and clear output.\nrequirement pool:\n- Maximize the number of private talks in each meeting.\n- Efficiently manage sociability constraints for all participants.\n- Ensure the solution handles large input sizes effectively.\n- Provide clear and concise output for each test case.\n- Allow flexibility in choosing pairs for private talks.\nWe will use a greedy approach to maximize the number of private talks. By sorting the sociability array in descending order, we can pair the most sociable people first, ensuring that the maximum number of talks occur. We will use a priority queue to efficiently manage and update the sociability of participants after each talk.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of private talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person reaches their sociability limit, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the private talks in such a way that the total number of talks is maximized before any person reaches their sociability limit.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the arrangement of talks that results in the highest total number of conversations.\n    Implementation: Use a greedy approach to pair people with the highest sociability first, ensuring maximum utilization of their sociability.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Sort the sociability array in descending order and pair people with the highest sociability first.\n\n# [code logic]\n1. Parse the input to get the number of test cases and sociability parameters for each test case.\n2. For each test case, sort the sociability array in descending order.\n3. Use a priority queue to manage and update the sociability of participants after each talk.\n4. Pair the most sociable people first and decrement their sociability after each talk.\n5. Continue pairing until no more productive talks can be arranged.\n6. Output the maximum number of talks and the pairs involved.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: No talks can occur as all participants leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but they need a partner, so no talks can occur.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both can talk to each other three times, maximizing their sociability.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and pairing based on sociability will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and provide clear output for each case.\nrequirement pool:\n- Maximize the number of private talks during the meeting.\n- Efficiently pair individuals based on sociability.\n- Handle multiple test cases efficiently.\n- Provide clear output format for test cases.\n- Ensure solution scalability for large datasets.\nWe will use a greedy approach to maximize the number of private talks. The idea is to always pair the two most sociable people available at any given time. This ensures that we are utilizing the highest possible sociability at each step, thus maximizing the total number of talks. We will use a max-heap (priority queue) to efficiently retrieve the most sociable individuals. The heap will allow us to efficiently manage and update the sociability of individuals as they engage in talks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can participate in a number of talks equal to their sociability.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the talks such that the total number of conversations is maximized. This involves pairing individuals in a way that utilizes their sociability to the fullest.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement of talks that results in the highest total number of conversations. In code, this can be implemented by always pairing the two most sociable people available.\n\n# [degree adverb]\n    'most productive': This refers to achieving the maximum number of talks possible. In code, this involves using a strategy that maximizes the utilization of each person's sociability.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap to keep track of the sociability of each person.\n4. While there are at least two people with positive sociability:\n   - Extract the two people with the highest sociability from the heap.\n   - Record a talk between them.\n   - Decrease their sociability by 1 and push them back into the heap if they still have positive sociability.\n5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test Case 1: \n    Input: 2\n           0 0\n    Expected Output: 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test Case 2:\n    Input: 3\n           1 0 1\n    Expected Output: 1\n                     1 3\n    Explanation: Only individuals 1 and 3 can talk once as individual 2 has zero sociability.\n\n    Test Case 3:\n    Input: 4\n           0 0 0 0\n    Expected Output: 0\n    Explanation: All individuals have zero sociability, so no talks can occur.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap naturally handles cases where individuals have zero sociability by not allowing them to participate in any talks.\n", "requirement analysis:\nThe requirement is to maximize the number of talks during a meeting by efficiently pairing individuals based on their sociability constraints. The solution should handle multiple test cases and large input sizes, ensuring the output format is clear and adheres to the specified format.\nrequirement pool:\n- Implement the main algorithm to maximize talks based on sociability.\n- Ensure the solution handles multiple test cases efficiently.\n- Optimize the pairing strategy for maximum productivity.\n- Provide clear and concise output format.\n- Test the solution against edge cases and large datasets.\nWe will implement a greedy algorithm to maximize the number of talks. The approach involves sorting the people based on their sociability and pairing the most sociable individuals first. This ensures that the maximum number of talks can occur before any individual reaches their sociability limit. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle the input data.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of conversations between people before they reach their sociability limit.\n\n# [phrase showing quantity relationship]\n    'exactly n people'\n    Explanation: There are a fixed number of people in each test case, which is important for setting up the problem constraints.\n\n    'maximum possible number of talks'\n    Explanation: This indicates that we need to find the highest number of conversations that can occur given the sociability constraints.\n\n# [degree adverb]\n    'most productive'\n    Explanation: This refers to achieving the maximum number of talks possible, which is the primary goal of the problem.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Sort the people based on their sociability in descending order.\n4. Use a greedy approach to pair the most sociable individuals first:\n   - While there are at least two people with non-zero sociability, pair them for a talk.\n   - Decrease their sociability by one after each talk.\n   - Record the pair of indices for each talk.\n5. Continue until no more valid pairs can be formed.\n6. Output the total number of talks and the pairs for each test case.\n\n# [edge case]\n    Test Case 1: \n    Input: 2\n           0 0\n    Output: 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test Case 2:\n    Input: 3\n           1 0 1\n    Output: 1\n            1 3\n    Explanation: Only one talk can occur between the two individuals with non-zero sociability.\n\n    Test Case 3:\n    Input: 4\n           0 0 0 0\n    Output: 0\n    Explanation: All individuals have zero sociability, so no talks can occur.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where no talks can occur due to zero sociability by checking for non-zero sociability before pairing.\n", "requirement analysis:\nThe requirement is to determine the optimal pairing of participants in a meeting to maximize the number of talks. Each participant has a sociability limit, and the goal is to ensure that the maximum number of interactions occur before participants leave the meeting. The solution should handle multiple test cases efficiently and provide clear output for each case.\nrequirement pool:\n- Implement the algorithm to maximize the number of talks.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the algorithm for large input sizes.\n- Consider edge cases where some participants have zero sociability.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two most sociable people who can still talk, as this will maximize the number of interactions. We will use a priority queue (heap) to efficiently manage and retrieve the most sociable participants. The heapq library in Python is suitable for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can engage in talks up to their sociability limit.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of talks by pairing people optimally based on their sociability.\n\n# [phrase showing quantity relationship]\n    'exactly n people': This indicates that the number of people is fixed and must be considered in the solution.\n    \n    'maximum possible number of talks': This means we need to find the highest number of pairings possible given the sociability constraints.\n\n# [degree adverb]\n    'most productive': This implies achieving the highest number of talks possible.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap (priority queue) to keep track of people based on their sociability.\n4. Continuously pair the two most sociable people until no more valid pairs can be made.\n5. Record each pair and decrement their sociability.\n6. Output the total number of talks and the pairs for each test case.\n\n# [edge case]\n    Test case with all sociability values as 0:\n    Input: 3\n           0 0 0\n    Output: 0\n    Explanation: No one can talk, so the maximum number of talks is 0.\n\n    Test case with only one person having non-zero sociability:\n    Input: 3\n           0 0 2\n    Output: 0\n    Explanation: Only one person can talk, but there is no one to pair with, so no talks occur.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           2 2\n    Output: 2\n            1 2\n            1 2\n    Explanation: Both can talk twice, so they can be paired twice.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle cases where no valid pairs can be made or when only one person has non-zero sociability.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks during a meeting by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing a clear output format.\nrequirement pool:\n- Implement algorithm to maximize talks based on sociability.\n- Ensure solution handles large input sizes efficiently.\n- Provide clear and concise output format for test cases.\n- Optimize pairing strategy for maximum productivity.\n- Consider edge cases where sociability is zero.\nWe will implement a greedy algorithm to maximize the number of talks. The approach involves repeatedly pairing the two most sociable people until no more talks can be made. This ensures that the maximum number of talks is achieved efficiently. We will use a priority queue (max-heap) to keep track of the sociability of each person, allowing us to efficiently find and update the most sociable individuals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can engage in talks up to their sociability limit.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of talks by pairing individuals optimally based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of pairings possible given the sociability constraints.\n    Implementation: Use a greedy approach to always pair the two most sociable people available.\n\n# [degree adverb] \n    'most productive': This implies achieving the highest number of talks possible.\n    Implementation: Continuously select the two individuals with the highest remaining sociability for each talk.\n\n# [code logic]\n1. For each test case, read the number of people and their sociability values.\n2. Use a max-heap to keep track of the sociability values and their corresponding indices.\n3. While there are at least two people with positive sociability:\n   - Extract the two people with the highest sociability from the heap.\n   - Record a talk between them.\n   - Decrease their sociability by 1 and reinsert them into the heap if they still have positive sociability.\n4. Output the total number of talks and the pairs involved.\n\n# [edge case] \n    Test case 1: n = 2, a = [0, 0] => 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test case 2: n = 3, a = [0, 1, 0] => 0\n    Explanation: Only one person has non-zero sociability, so no pairs can be formed.\n\n    Test case 3: n = 4, a = [1, 1, 1, 1] => 2\n    Explanation: Each person can talk once, so two pairs can be formed (e.g., (1,2) and (3,4)).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle cases where no talks can occur due to zero or insufficient sociability.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output. The sociability constraints and the need for multiple interactions between the same individuals are key considerations.\nrequirement pool:\n- Maximize the number of talks in each meeting.\n- Efficiently pair individuals based on sociability.\n- Handle large input sizes and multiple test cases.\n- Provide clear and correct output format.\n- Allow flexibility in choosing pairs for talks.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two people with the highest remaining sociability until no more talks can be made. This ensures that the most sociable individuals are utilized effectively. We will use a priority queue (heap) to efficiently manage and retrieve the individuals with the highest sociability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can have before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can have a number of talks equal to their sociability value.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of talks by pairing individuals optimally based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of talks that can occur by pairing individuals optimally.\n    Implementation: Use a greedy approach to always pair the two people with the highest remaining sociability.\n\n# [degree adverb]\n    'most productive': This refers to achieving the maximum number of talks possible.\n    Implementation: Use a priority queue to ensure that the most sociable individuals are paired first.\n\n# [code logic]\n1. For each test case, read the number of people and their sociability values.\n2. Use a max-heap (priority queue) to keep track of people based on their sociability.\n3. While there are at least two people with positive sociability:\n   - Extract the two people with the highest sociability.\n   - Record a talk between them.\n   - Decrease their sociability by 1.\n   - If they still have positive sociability, push them back into the heap.\n4. Continue until no more talks can be made.\n5. Output the total number of talks and the pairs involved.\n\n# [edge case]\n    Test case: 3\n    Input: 0 0 2\n    Output: 0\n    Explanation: Two people have zero sociability, so no talks can occur.\n\n    Test case: 2\n    Input: 6 2\n    Output: 2\n    Explanation: The first person can talk six times, and the second person can talk twice. They can have two talks before the second person leaves.\n\n    Test case: 5\n    Input: 0 1 0 0 6\n    Output: 1\n    Explanation: Only one person has non-zero sociability, so only one talk can occur with the second person.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue naturally handles cases where no talks can occur or when only limited talks are possible due to sociability constraints.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 78, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "mutate_method": "expand_one2two", "parent_index": 57}
