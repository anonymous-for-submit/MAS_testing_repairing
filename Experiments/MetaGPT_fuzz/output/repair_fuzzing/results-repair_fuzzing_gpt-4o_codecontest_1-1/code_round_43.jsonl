{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these numbers. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. \n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a by determining the correct array a using the properties of the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        sum_a = b[-1]\n        # The second element of a can be found by subtracting a1 from the second smallest sum\n        a2 = b[1] - a1\n        # The third element of a can be found by subtracting a1 and a2 from the total sum\n        a3 = sum_a - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three elements in a\n        sum_all = b[-1]\n        \n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = sum_all - a1 - a2\n        \n        # Append the restored array a to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        sum_a = b[-1]\n        # Calculate the third element of a\n        a3 = sum_a - (a1 + a2)\n        # Append the restored array to the result list\n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases and restore the arrays\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[-2]\n        \n        # Deduce the values of a2 and a3\n        a2 = sum_two_largest - a1\n        a3 = sum_a - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print the results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted subsequence sums array b.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted sums of all non-empty subsequences of the original array a.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored\n        original array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - (a1 + a2)  # The largest number in b is the sum of all elements in a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a3 = b[-1] - a1\n    # The second smallest unique sum in b is a1 + a2\n    a2 = b[1] - a1\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2 = b[5]\n        \n        # Deduce the other two elements\n        a2 = sum_a2 - a1\n        a3 = sum_a - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # Since b is sorted, the smallest three elements are the individual elements of a.\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest element in b is the sum of all three elements of a.\n        \n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a of 3 integers from the sorted array b of 7 integers.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 sorted integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all three elements of a\n        sum_a = b[6]\n        # Verify the sum to ensure correctness\n        if a1 + a2 + a3 == sum_a:\n            results.append([a1, a2, a3])\n        else:\n            # If the sum doesn't match, adjust the elements\n            # This is a fallback in case of multiple valid solutions\n            results.append([a1, a2, sum_a - a1 - a2])\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n\n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences of array a.\n\n    Returns:\n        A list of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a.\n    a1 = b[0]\n    a2 = b[1]\n    # The largest number in b is the sum of all three numbers in a.\n    a3 = b[-1] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires determining the original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Develop an algorithm to restore array a from array b\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize for large integer values in the input\n- Maintain clear and correct output formatting\n- Consider edge cases and ensure robustness\nWe will use a simple mathematical approach to restore the original array a from the given array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. By using these properties, we can efficiently determine the values of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means that each element in b is the sum of one or more elements from a. The largest element in b is the sum of all elements in a.\n\n# [degree adverb] \n    'smallest'\n    Explanation: The smallest element in b is one of the elements of a.\n    \n    'largest'\n    Explanation: The largest element in b is the sum of all elements of a.\n\n# [code logic]\n1. Identify the smallest element in b, which will be one of the elements of a.\n2. Identify the largest element in b, which will be the sum of all elements of a.\n3. Use the properties of sums to deduce the other two elements:\n   - The second smallest element in b is another element of a.\n   - The third smallest element in b is the third element of a.\n4. Return these three elements as the array a.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array a consists of three identical numbers.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are used to form the original array a.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array a consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by selecting the smallest and largest values appropriately.\n", "requirement analysis:\nThe task requires determining the original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Implement the algorithm to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and formatted output for each test case.\n- Consider edge cases and validate input constraints.\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the largest number in b is the sum of all three numbers in a, and the smallest three numbers in b are the individual elements of a. We can use these properties to efficiently restore the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this can be implemented by calculating all possible sums of combinations of elements in a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b represents the sum of all elements in array a. This helps in deducing the original array a.\n\n# [code logic]\n    1. Identify the largest number in array b, which is the sum of all three elements in array a.\n    2. The smallest three numbers in array b are the individual elements of array a.\n    3. Use these properties to deduce the original array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array a consists of three identical numbers.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are the individual elements of a, and the largest number is their sum.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and identical, indicating that a consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using the properties of sorted array b and its largest element.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently and provide accurate results for each test case. The input constraints ensure that a valid array a exists for each test case.\nrequirement pool:\n- Develop an efficient algorithm to restore array a from array b\n- Ensure the solution handles large numbers and multiple test cases\n- Optimize the solution for scalability\n- Format the output correctly for easy reading\n- Provide documentation for understanding the solution\nWe will use a simple mathematical approach to restore the original array a from the given array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is one of the elements of a, the second smallest element is another, and the largest element in b is the sum of all three elements of a. This approach is efficient and scalable, suitable for handling up to 5000 test cases with large numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n    2. Identify the second smallest element in array b, which corresponds to another element in array a.\n    3. The largest element in array b is the sum of all three elements of array a.\n    4. Subtract the sum of the two smallest elements from the largest element to find the third element of array a.\n    5. Return these three elements as array a.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array a consists of three identical elements.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the largest element is 7. The third element is calculated as 7 - (1 + 2) = 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical in groups, so the original array a consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the smallest and largest elements and calculating the third element accordingly.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide the correct output format.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide documentation for the solution\nWe will leverage the properties of the array b, which is the sorted list of all non-empty subsequences of array a. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty combination of the array a. In code, this means calculating sums for all combinations of elements in a.\n\n# [degree adverb]\n    'smallest': The smallest element in b corresponds to the smallest element in a.\n    'largest': The largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the elements in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these properties to deduce the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical elements.\n\n    Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, the largest is 7 (sum of all), and second largest is 6 (sum of two largest).\n\n    Case 3: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the values of a based on the properties of b.\n", "requirement analysis:\nThe task requires determining the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output should be clear and concise, providing the original array for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and concise output\n- Optimize memory usage\nWe will leverage the properties of the sorted subsequence sums to deduce the original array. The largest number in the array b is the sum of all elements in a. The smallest three numbers in b are the individual elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence': A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements.\n    'sorted in non-decreasing order': The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': This means we need to consider all possible combinations of the elements in array a, including individual elements and sums of combinations.\n    'sorted': The array b is sorted in non-decreasing order, which helps in identifying the smallest and largest sums.\n\n# [degree adverb]\n    'largest': The largest number in array b represents the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest three numbers in array b. These represent the individual elements of array a.\n    2. The largest number in array b is the sum of all three elements of array a.\n    3. Use these properties to reconstruct array a by selecting the smallest three numbers and verifying their sum matches the largest number.\n\n# [edge case]\n    Edge cases are inherently handled by the constraints given (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}).\n    However, consider:\n    1. b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n       Explanation: All elements are the same, and their sum matches the largest number.\n    2. b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n       Explanation: Large numbers with identical values.\n    3. b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n       Explanation: The smallest three numbers are individual elements; their sum matches the largest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers and verifying their sum against the largest number inherently handles edge cases.\n", "requirement analysis:\nThe task requires determining the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for multiple test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for performance\nWe will leverage the properties of the sorted sums of subsequences to deduce the original array. Given the sorted array b of 7 elements, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the three numbers in a. This approach is efficient and straightforward, making it suitable for handling up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any combination of the array's elements, and the task involves calculating the sum of each possible non-empty subsequence.\n\n    'sorted them in non-decreasing order'\n    Explanation: The sums of the subsequences are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the array a consists of exactly three elements, each greater than zero.\n    \n    '7 integers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which is the smallest element in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to the smallest element in a.\n3. Identify the largest element in b, which is the sum of all elements in a.\n4. Use these properties to deduce the three numbers in a:\n   - Let a1 be the smallest element in b.\n   - Let a3 be the largest element in b minus a1.\n   - Let a2 be calculated by subtracting a1 from the second smallest unique sum in b (which is a1 + a2).\n5. Return the three numbers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest number is 1, and the largest sum is 8. The second smallest unique sum is 4, which gives us a2 = 4 - 1 = 3.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest number is 1, and the largest sum is 7. The second smallest unique sum is 3, which gives us a2 = 3 - 1 = 2.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by leveraging the properties of sorted sums and unique sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will leverage the properties of the sorted array b to deduce the original array a. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can efficiently reconstruct a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of elements.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in b corresponds to the smallest element in a.\n    \n    'largest'\n    Explanation: The largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified values to deduce the original array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so the original array a consists of three identical numbers.\n    \n    1 2 3 3 4 5 6 = 1 2 3\n    Explanation: The smallest number is 1, and the largest number is 6 (sum of all elements), with intermediate sums confirming the sequence.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so the original array a consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing array a from b inherently handles these cases by leveraging the properties of sorted subsequences.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently and ensure the output format is strictly followed. The constraints guarantee that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide output in the correct format\n- Optimize for edge cases and ensure accuracy\nWe will use a simple mathematical approach to restore the array a from the given array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest three elements of b are the individual elements of a. The largest element in b is the sum of all three elements of a. Using these properties, we can efficiently determine the values of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n# [phrase showing quantity relationship]\n    'sum': The sum of elements in a subsequence is the total obtained by adding all the elements together. In code, this can be implemented using the `sum()` function in Python.\n\n# [degree adverb] \n    'sorted': The array b is sorted in non-decreasing order, meaning each element is greater than or equal to the previous one. This can be implemented using the `sorted()` function in Python.\n\n# [code logic]\n    1. Identify the smallest three elements in array b, which correspond to the individual elements of array a.\n    2. Identify the largest element in array b, which is the sum of all three elements of array a.\n    3. Use these properties to deduce the values of a_1, a_2, and a_3.\n    4. Return the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest three elements are 1, and the largest sum is 3.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers with repeated sums. The smallest three elements are 1000000000, and the largest sum is 3000000000.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three elements are individual elements of array a, and the largest element is the sum of all three.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three elements and the largest sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for multiple test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for performance\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. Using these properties, we can efficiently restore the array a for each test case. We will use Python's built-in capabilities to handle large integers and ensure the solution is scalable for multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this can be implemented by calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the array b of 7 integers.\n    2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n    3. Identify the largest number in b, which is the sum of all three elements of a.\n    4. Use these properties to deduce the original array a:\n       - Let a1, a2, a3 be the smallest three numbers in b.\n       - The largest number in b is a1 + a2 + a3.\n    5. Return the array a for each test case.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums are consistent with the properties described.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3, and their sum is the largest number, which is 7.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sums are consistent with the properties described.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted array b and deducing array a accordingly.\n", "requirement analysis:\nThe task requires determining the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output is correct and formatted as specified. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the algorithm to restore the original array from the subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for large input values.\n- Provide documentation and comments for the code.\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the largest number in b is the sum of all three numbers in a, and the smallest three numbers in b are the individual elements of a. We can use this observation to reconstruct a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all combinations of elements and summing them.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the largest number in array b, which is the sum of all three numbers in array a.\n2. The smallest three numbers in array b are the individual elements of array a.\n3. Use these observations to reconstruct array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a2` be the second smallest element in b.\n   - Let `a3` be the largest element in b minus `a1` and `a2`.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array a consists of three identical numbers.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three numbers in a. Thus, a = [1, 2, 4].\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array a consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest three numbers and using the largest number as the sum of all three elements inherently handles these cases.\n"], "scores": [], "pass_results": [true, false, true, true, true, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 43, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 43}
