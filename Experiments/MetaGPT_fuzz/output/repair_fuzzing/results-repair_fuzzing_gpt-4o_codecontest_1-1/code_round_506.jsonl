{"name": "1620_B. Triangles on a Rectangle", "description": "A rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "tags": ["geometry", "greedy", "math"], "difficulty": 8, "id": 1620, "sample_io": [{"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}], "test_list": [{"input": "1\n99 99\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["99\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n70\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "1\n99 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["164\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n42\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n66\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["25\n42\n66\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n91\n42\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n70\n"]}, {"input": "1\n198 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["198\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n48\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n70\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n42\n77\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n33\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n117\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n22 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n132\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n42\n66\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n63\n66\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n182\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n51\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 7\n", "output": ["25\n70\n55\n"]}, {"input": "3\n4 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 4 4\n", "output": ["24\n117\n77\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["25\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 1 5 6\n11 5\n3 1 2 8\n3 2 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n50\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n56\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n84\n60\n"]}, {"input": "3\n2 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["24\n56\n210\n"]}, {"input": "1\n99 99\n2 1 2\n2 0 4\n2 5 6\n2 7 8\n", "output": ["396\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 7\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["40\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n20 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n60\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["75\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 13\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n156\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["24\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 9\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n54\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 16\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n60\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 6\n", "output": ["32\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 2\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n33\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 1 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n56\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["50\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 2\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["24\n42\n77\n"]}, {"input": "3\n5 24\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["48\n42\n210\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n49\n66\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 7\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n33\n"]}, {"input": "3\n5 8\n2 1 5\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["32\n91\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 0 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["30\n42\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["24\n70\n44\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n18 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n54\n35\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n21 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n63\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 8\n2 2 4\n", "output": ["45\n42\n77\n"]}, {"input": "3\n10 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 2 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["50\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 3\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n33\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n84\n77\n"]}, {"input": "3\n5 8\n2 1 7\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["48\n42\n35\n"]}, {"input": "3\n5 9\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["27\n42\n75\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 2\n3 7 5 6\n9 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n90\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 10\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n60\n182\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 8\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["35\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 16\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["20\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 6\n3 1 4 6\n2 4 5\n0 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["32\n42\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n42\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 12\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n72\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 0 4\n", "output": ["20\n70\n77\n"]}, {"input": "3\n5 8\n2 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n78\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n70\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 8\n2 4 2\n10 7\n2 0 4\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["35\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n84\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 4\n2 2 4\n", "output": ["24\n70\n55\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n35\n77\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n84\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 5\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 2 4\n", "output": ["20\n70\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n1 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n16 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n112\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 10\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["30\n70\n182\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 2 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 1 3 3\n2 2 4\n", "output": ["25\n35\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 1\n", "output": ["60\n42\n112\n"]}, {"input": "3\n3 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 20\n2 2 3\n", "output": ["24\n56\n420\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 0 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 2 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n84\n60\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n80\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["75\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 17\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 10 8\n3 1 3 4\n2 2 4\n", "output": ["75\n98\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n33\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n84\n72\n"]}, {"input": "3\n9 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n35\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n70\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 6\n3 1 6 8\n3 3 6 8\n3 2 2 2\n2 2 4\n", "output": ["32\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 1 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 7 8\n3 1 3 4\n2 2 7\n", "output": ["25\n63\n55\n"]}, {"input": "1\n53 164\n2 1 2\n2 0 4\n2 5 6\n2 9 8\n", "output": ["656\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n1 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 3 5\n3 0 3 3\n2 2 4\n", "output": ["24\n48\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n54\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n30\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n39\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 28\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n175\n72\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n98\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 0 3 4\n3 1 4 3\n2 4 7\n10 7\n2 3 4\n2 1 7\n3 1 0 4\n3 1 5 6\n11 5\n3 1 6 8\n3 3 2 8\n3 0 3 3\n2 2 5\n", "output": ["32\n50\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 1\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 13\n2 2 1\n", "output": ["60\n42\n208\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n76\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["32\n42\n65\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 0\n3 1 4 6\n2 4 1\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n8 4\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 0 4\n", "output": ["25\n42\n32\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 15\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n84\n121\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 7\n3 4 5 6\n11 5\n3 1 6 0\n3 3 10 8\n3 2 5 4\n2 2 6\n", "output": ["32\n60\n44\n"]}, {"input": "3\n10 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["50\n56\n39\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 0 3 8\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 5\n3 1 3 7\n2 2 4\n", "output": ["25\n80\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["50\n98\n35\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 -1 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n95\n70\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n20 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 1\n", "output": ["40\n80\n80\n"]}, {"input": "1\n53 202\n2 1 2\n2 0 4\n2 3 6\n2 9 8\n", "output": ["808\n"]}, {"input": "3\n5 4\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n65\n"]}, {"input": "3\n5 13\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n4 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["39\n108\n30\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 1 4\n3 7 5 6\n16 6\n3 2 6 0\n3 3 11 8\n3 0 3 6\n2 2 1\n", "output": ["36\n42\n96\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 8\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n2 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 3\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 0 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 5\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n12 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 0 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 0 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n42\n70\n"]}], "task_id": "codecontest/148", "prompt": "A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Ensure your implemented solution is efficient for large values of w and h.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "repair_prompt": ["A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Ensure your implemented solution is efficient for large values of w and h.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Lattice points are points with integer coordinates. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle;\n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Ensure your implemented solution is efficient for large values of w and h.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner, and there are at least two points on every side of a rectangle. Your task is to choose three points in such a way that exactly two of them belong to the same side of a rectangle; the area of a triangle formed by them is maximum possible. Print the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Ensure your implemented solution is efficient for large values of w and h.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6)."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Lattice points on the bottom side (y=0).\n            - x2 (List[int]): Lattice points on the top side (y=h).\n            - y1 (List[int]): Lattice points on the left side (x=0).\n            - y2 (List[int]): Lattice points on the right side (x=w).\n\n    Returns:\n        List[int]: List of maximum doubled areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area using horizontal sides\n        max_area_horizontal = max(\n            (x1[-1] - x1[0]) * h,  # Bottom side\n            (x2[-1] - x2[0]) * h   # Top side\n        )\n\n        # Calculate maximum doubled area using vertical sides\n        max_area_vertical = max(\n            (y1[-1] - y1[0]) * w,  # Left side\n            (y2[-1] - y2[0]) * w   # Right side\n        )\n\n        # Determine the maximum doubled area for the current test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_horizontal = max(x1[-1] - x1[0], x2[-1] - x2[0])\n        # Calculate maximum base for vertical sides\n        max_base_vertical = max(y1[-1] - y1[0], y2[-1] - y2[0])\n        \n        # Calculate doubled area for horizontal and vertical configurations\n        max_area_horizontal = max_base_horizontal * h\n        max_area_vertical = max_base_vertical * w\n        \n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        # Append the result for the current test case\n        results.append(max_doubled_area)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples where each tuple contains:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of integers representing the maximum doubled area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area for horizontal sides\n        max_area_horizontal = max(\n            (x1[-1] - x1[0]) * h,  # Bottom side\n            (x2[-1] - x2[0]) * h   # Top side\n        )\n\n        # Calculate maximum doubled area for vertical sides\n        max_area_vertical = max(\n            (y1[-1] - y1[0]) * w,  # Left side\n            (y2[-1] - y2[0]) * w   # Right side\n        )\n\n        # The maximum doubled area for the current test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum distances on horizontal sides\n        max_dist_x1 = x1[-1] - x1[0]\n        max_dist_x2 = x2[-1] - x2[0]\n\n        # Calculate maximum distances on vertical sides\n        max_dist_y1 = y1[-1] - y1[0]\n        max_dist_y2 = y2[-1] - y2[0]\n\n        # Calculate potential maximum doubled areas\n        max_area_horizontal = max(max_dist_x1 * h, max_dist_x2 * h)\n        max_area_vertical = max(max_dist_y1 * w, max_dist_y2 * w)\n\n        # Determine the maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n\n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n\n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Call the function and print results\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            Each test case contains:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Lattice points on the bottom side (y=0).\n            - x2 (List[int]): Lattice points on the top side (y=h).\n            - y1 (List[int]): Lattice points on the left side (x=0).\n            - y2 (List[int]): Lattice points on the right side (x=w).\n\n    Returns:\n        List[int]: List of maximum doubled areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area for horizontal sides\n        max_area_horizontal = max(\n            (x2[-1] - x2[0]) * h,  # Top side\n            (x1[-1] - x1[0]) * h   # Bottom side\n        )\n\n        # Calculate maximum doubled area for vertical sides\n        max_area_vertical = max(\n            (y2[-1] - y2[0]) * w,  # Right side\n            (y1[-1] - y1[0]) * w   # Left side\n        )\n\n        # The maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Lattice points on the bottom side.\n            - x2 (List[int]): Lattice points on the top side.\n            - y1 (List[int]): Lattice points on the left side.\n            - y2 (List[int]): Lattice points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base lengths for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n\n        # Calculate maximum base lengths for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n\n        # Calculate potential maximum areas using these base lengths\n        max_area_horizontal = max(max_base_bottom, max_base_top) * h\n        max_area_vertical = max(max_base_left, max_base_right) * w\n\n        # The maximum area will be the largest value obtained from these calculations\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n\n        # Append the result for this test case\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n\n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n\n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n\n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n\n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the doubled maximum area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side (y=0).\n            - x2 (List[int]): x-coordinates of points on the top side (y=h).\n            - y1 (List[int]): y-coordinates of points on the left side (x=0).\n            - y2 (List[int]): y-coordinates of points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum area for horizontal sides\n        max_area_horizontal = max(x1[-1] - x1[0], x2[-1] - x2[0]) * h\n\n        # Calculate maximum area for vertical sides\n        max_area_vertical = max(y1[-1] - y1[0], y2[-1] - y2[0]) * w\n\n        # The doubled maximum area is the maximum of the two calculated areas\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        w = int(data[index])\n        h = int(data[index + 1])\n        index += 2\n        \n        k1 = int(data[index])\n        x1 = list(map(int, data[index + 1:index + 1 + k1]))\n        index += 1 + k1\n        \n        k2 = int(data[index])\n        x2 = list(map(int, data[index + 1:index + 1 + k2]))\n        index += 1 + k2\n        \n        k3 = int(data[index])\n        y1 = list(map(int, data[index + 1:index + 1 + k3]))\n        index += 1 + k3\n        \n        k4 = int(data[index])\n        y2 = list(map(int, data[index + 1:index + 1 + k4]))\n        index += 1 + k4\n        \n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum distance on each side\n        max_x1_distance = x1[-1] - x1[0]\n        max_x2_distance = x2[-1] - x2[0]\n        max_y1_distance = y1[-1] - y1[0]\n        max_y2_distance = y2[-1] - y2[0]\n\n        # Calculate potential maximum doubled areas\n        max_area_x1 = max_x1_distance * h\n        max_area_x2 = max_x2_distance * h\n        max_area_y1 = max_y1_distance * w\n        max_area_y2 = max_y2_distance * w\n\n        # Determine the maximum doubled area for this test case\n        max_doubled_area = max(max_area_x1, max_area_x2, max_area_y1, max_area_y2)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum distance on horizontal sides\n        max_horizontal_distance = max(x1[-1] - x1[0], x2[-1] - x2[0])\n        # Calculate maximum distance on vertical sides\n        max_vertical_distance = max(y1[-1] - y1[0], y2[-1] - y2[0])\n        \n        # Calculate the maximum doubled area\n        max_area = max(max_horizontal_distance * h, max_vertical_distance * w)\n        \n        # Append the result for this test case\n        results.append(max_area)\n\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the doubled maximum area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: List of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base lengths for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n\n        # Calculate maximum base lengths for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n\n        # Calculate maximum possible areas using the longest base and maximum height\n        max_area_bottom = max_base_bottom * h\n        max_area_top = max_base_top * h\n        max_area_left = max_base_left * w\n        max_area_right = max_base_right * w\n\n        # Find the maximum area among all possible triangles\n        max_doubled_area = max(max_area_bottom, max_area_top, max_area_left, max_area_right)\n\n        # Append the result for the current test case\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Calculate results\n    results = max_doubled_area(t, test_cases)\n\n    # Output results\n    for result in results:\n        print(result)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure the output is the doubled area of the triangle.\nrequirement pool:\n- Efficiently compute the maximum doubled area of the triangle.\n- Handle multiple test cases within the given constraints.\n- Optimize the solution for large values of w and h.\n- Ensure the solution is memory efficient.\n- Provide clear and concise output for each test case.\nWe will iterate over each test case and for each side of the rectangle, calculate the maximum possible area of a triangle by selecting two points from one side and one point from the opposite side. The doubled area of the triangle can be calculated using the formula for the area of a triangle formed by lattice points. We will use the properties of the rectangle and the given constraints to ensure the solution is efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of the rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the area of a triangle formed by lattice points is always an integer when doubled.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that for each side of the rectangle, there are a minimum of two lattice points available to choose from.\n\n    'maximum possible'\n    Explanation: We need to find the configuration of points that results in the largest possible area for the triangle.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The goal is to maximize the area of the triangle formed by the selected points.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the list of lattice points on each side.\n2. For each side, calculate the potential maximum area by selecting two points from one side and one point from the opposite side.\n3. Use the formula for the area of a triangle formed by lattice points to calculate the doubled area.\n4. Compare areas from different configurations and keep track of the maximum doubled area found.\n5. Output the maximum doubled area for each test case.\n\n# [edge case]\n    Test case with minimum dimensions and points:\n    Input: \n    1\n    3 3\n    2 1 2\n    2 1 2\n    2 1 2\n    2 1 2\n    Expected Output: 6\n    Explanation: The largest triangle can be formed by selecting two points from one side and one from an opposite side, resulting in a doubled area of 6.\n\n    Test case with maximum dimensions but minimum points:\n    Input:\n    1\n    1000000 1000000\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    Expected Output: 1999998\n    Explanation: The largest triangle is formed by selecting two points at extreme ends of one side and one from an opposite side.\n\n    Test case with all points on one side:\n    Input:\n    1\n    5 5\n    3 1 2 3\n    2 1 4\n    2 1 4\n    2 1 4\n    Expected Output: 12\n    Explanation: The largest triangle can be formed by selecting two points from one side and one from an opposite side, resulting in a doubled area of 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible configurations to find the maximum doubled area.\n", "requirement analysis:\nThe problem requires selecting three points from a rectangle's sides such that two points are on the same side, and the area of the triangle formed is maximized. The solution must efficiently handle large values of w and h, and the total number of points across all test cases should not exceed 2 \u22c5 10^5.\nrequirement pool:\n- Efficiently compute the maximum area of the triangle\n- Ensure the solution handles large input sizes\n- Optimize for performance and memory usage\n- Provide accurate results for all test cases\n- Implement a user-friendly output format\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by three points on the sides of the rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is on the opposite side, forming a large base and height. We will iterate over each side and calculate the potential maximum area using the given points. The solution will be efficient by leveraging the properties of lattice points and using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that for each side of the rectangle, there are a minimum of two points available to choose from.\n\n    'maximum possible'\n    Explanation: The task is to find the configuration of points that results in the largest possible area for the triangle.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We need to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle (w, h).\n2. For each side of the rectangle, read the number of points and their coordinates.\n3. Calculate the potential maximum area for triangles formed by:\n   - Two points on one horizontal side and one point on the opposite horizontal side.\n   - Two points on one vertical side and one point on the opposite vertical side.\n4. For horizontal sides, calculate the area using the formula: (x_k - x_1) * h, where x_k and x_1 are the farthest apart x-coordinates on the same side.\n5. For vertical sides, calculate the area using the formula: (y_k - y_1) * w, where y_k and y_1 are the farthest apart y-coordinates on the same side.\n6. Compare all calculated areas and select the maximum.\n7. Output the doubled maximum area for each test case.\n\n# [edge case]\n    Test case with minimum values:\n    3 3\n    2 1 2\n    2 1 2\n    2 1 2\n    2 1 2\n    = 6\n    Explanation: The smallest rectangle with minimum points on each side results in a triangle with doubled area 6.\n\n    Test case with maximum width:\n    1000000 3\n    2 1 999999\n    2 1 999999\n    2 1 2\n    2 1 2\n    = 2999994\n    Explanation: The maximum width results in a large base for triangles formed on horizontal sides.\n\n    Test case with maximum height:\n    3 1000000\n    2 1 2\n    2 1 2\n    2 1 999999\n    2 1 999999\n    = 2999994\n    Explanation: The maximum height results in a large base for triangles formed on vertical sides.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible configurations to find the maximum area.\n", "requirement analysis:\nThe problem requires selecting three points on the sides of a rectangle such that two points are on the same side and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure the output is in the correct format.\nrequirement pool:\n- Efficiently compute the maximum area of the triangle\n- Ensure the solution handles large input sizes\n- Optimize memory usage\n- Provide clear and concise output\n- Handle edge cases effectively\nWe will iterate over each test case and for each side of the rectangle, calculate the maximum possible area of a triangle by selecting two points from one side and one point from the opposite side. The area of the triangle can be calculated using the formula for the area of a triangle given its vertices. We will ensure the solution is efficient by leveraging the sorted nature of the input points and using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'doubled area'\n    Explanation: The problem involves a rectangle defined by its corners and sides parallel to the axes. Lattice points are integer-coordinate points lying on the sides of the rectangle. The task is to form a triangle using these points and calculate its doubled area, which is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side': Ensures that there are enough points to form a triangle.\n    'maximum possible': Indicates the need to find the largest area of a triangle that can be formed.\n    Implementation: Iterate through possible combinations of points to find the maximum area.\n\n# [degree adverb]\n    'maximum': Refers to finding the largest possible area of a triangle.\n    Implementation: Use comparisons to keep track of the largest area found during iteration.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the points on each side.\n2. For each side, select two points and calculate the area of a triangle formed with a point from the opposite side.\n3. Use the formula for the area of a triangle given its vertices: Area = 0.5 * |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|.\n4. Double the calculated area and keep track of the maximum doubled area found.\n5. Output the maximum doubled area for each test case.\n\n# [edge case]\n    Test case with minimum w and h:\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected output: 6\n    Explanation: The largest triangle is formed by points (0, 1), (0, 2), and (3, 2) with doubled area = 6.\n\n    Test case with maximum k:\n    Input: 10^6 10^6\n           200000 <points>\n           200000 <points>\n           200000 <points>\n           200000 <points>\n    Expected output: Depends on specific point values but should handle efficiently.\n    Explanation: Ensure code handles large input sizes efficiently.\n\n    Test case with all points on one side:\n    Input: 5 5\n           2 1 4\n           2 1 4\n           2 1 4\n           2 1 4\n    Expected output: Depends on specific point values but should handle efficiently.\n    Explanation: Ensure code handles cases where all points are concentrated on one side.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should efficiently handle all edge cases by iterating through possible combinations and calculating areas.\n", "requirement analysis:\nThe task requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must handle large input sizes efficiently, ensuring that the computation of the maximum area is optimal in terms of both time and space complexity.\nrequirement pool:\n- Efficiently compute the maximum area of the triangle for each test case.\n- Ensure the solution handles the maximum constraints of w, h, and number of points.\n- Optimize the algorithm for both time and space complexity.\n- Provide clear and concise output for each test case.\n- Consider edge cases where points are very close to each other.\nWe will use a mathematical approach to calculate the maximum area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the maximum area is achieved by choosing two points on the same side that are farthest apart and one point on the opposite side. This can be efficiently computed by considering the maximum distance between points on each side and using the rectangle's dimensions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at its corners.\n\n    'maximum possible area'\n    Explanation: The task is to find the maximum area of a triangle formed by three points, where two points are on the same side of the rectangle.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two lattice points, ensuring that a triangle can be formed.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We need to find the triangle with the largest possible area given the constraints.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the lattice points on each side.\n2. Calculate the maximum distance between points on each horizontal side (top and bottom) and each vertical side (left and right).\n3. Use these maximum distances to calculate potential triangle areas by considering:\n   - Two points on one horizontal side and one point on the opposite vertical side.\n   - Two points on one vertical side and one point on the opposite horizontal side.\n4. Calculate the area using the formula for a triangle's area and double it as required.\n5. Return the maximum doubled area for each test case.\n\n# [edge case]\n    Case 1: When all points are very close to each other, e.g., (0, 1), (0, 2), (5, 1)\n    Expected output: The doubled area is small because the points are close.\n    Explanation: The area is minimal due to proximity.\n\n    Case 2: When all points lie on one side, e.g., (0, 1), (0, 2), (0, 3)\n    Expected output: The doubled area is zero because no triangle can be formed.\n    Explanation: A triangle requires points from different sides.\n\n    Case 3: When points are at maximum distance apart, e.g., (0, 1), (0, h-1), (w, h-1)\n    Expected output: The doubled area is large because the points are far apart.\n    Explanation: The maximum distance yields a large area.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by calculating maximum distances and using them to determine the largest possible triangle area.\n", "requirement analysis:\nThe task requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and provide the doubled area of the triangle as output. The constraints on input sizes necessitate an optimized approach to ensure performance.\nrequirement pool:\n- Efficiently compute the maximum doubled area of a triangle.\n- Handle large input sizes up to the maximum constraints.\n- Ensure output format is consistent with requirements.\n- Optimize for both time and space complexity.\n- Provide detailed comments and documentation in the code.\nWe will use a mathematical approach to calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the maximum area triangle will have its base on one of the sides of the rectangle and the third point on the opposite side. We will iterate over each side, calculate potential maximum areas, and choose the largest one. This approach ensures efficiency even for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two lattice points. In code, this ensures that there are enough points to form a triangle.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the triangle with the largest possible area given the constraints. In code, this involves iterating through possible combinations and selecting the one with the largest area.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the lattice points on each side.\n2. For each side, calculate the potential maximum area of triangles formed by choosing two points from that side and one point from the opposite side.\n3. Use the formula for the area of a triangle to calculate the doubled area.\n4. Keep track of the maximum doubled area found for each test case.\n5. Output the maximum doubled area for each test case.\n\n# [edge case]\n    Edge Case 1: When all points on one side are very close to each other, e.g., (1, 0), (2, 0) and (0, 1), (0, 6), (5, 4)\n    Expected Output: 25\n    Explanation: The largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25.\n\n    Edge Case 2: When all points are evenly distributed across sides, e.g., (3, 9), (1, 7) and (1, 3), (4, 5)\n    Expected Output: 42\n    Explanation: The largest triangle is formed by points (3, 9), (1, 7) and (4, 5) \u2014 its area is 21. Thus, the doubled area is 42.\n\n    Edge Case 3: When there are only two points on one side, e.g., (1, 6), (8, 8) and (1, 3), (2, 4)\n    Expected Output: 35\n    Explanation: The largest triangle is formed by points (1, 6), (8, 8) and (2, 4) \u2014 its area is 17.5. Thus, the doubled area is 35.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through possible combinations and selecting the maximum area will naturally handle these cases.\n", "requirement analysis:\nThe task requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and provide the doubled area of the triangle as output.\nrequirement pool:\n- Efficiently calculate the maximum area of a triangle formed by lattice points.\n- Ensure the solution handles large input sizes up to the given constraints.\n- Provide clear and concise output for each test case.\n- Maintain accuracy in calculations for maximum area.\n- Optimize the algorithm for performance and clarity.\nWe will use a mathematical approach to calculate the maximum area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the maximum area triangle will have its base on one of the rectangle's sides and its height on the opposite side. We will iterate over the points on each side, calculate potential triangle areas, and keep track of the maximum area found. The solution will be efficient by leveraging the sorted nature of the input points and using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that for each side of the rectangle, there are a minimum of two lattice points. This ensures that we can always form a triangle with two points on one side and one on another.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: We need to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle (w, h).\n2. For each side of the rectangle, read the list of lattice points.\n3. Calculate the maximum possible base length for triangles on horizontal sides (bottom and top) and vertical sides (left and right).\n4. For horizontal sides, calculate the maximum base length as the difference between the largest and smallest x-coordinates.\n5. For vertical sides, calculate the maximum base length as the difference between the largest and smallest y-coordinates.\n6. Calculate potential maximum areas using these base lengths and the height/width of the rectangle.\n7. The maximum area will be the largest value obtained from these calculations.\n8. Output the doubled maximum area for each test case.\n\n# [edge case]\n    Case 1: w = 3, h = 3, points on bottom = [1, 2], points on top = [1, 2], points on left = [1, 2], points on right = [1, 2]\n    Expected output: 4\n    Explanation: The largest triangle can be formed using points (0, 1), (0, 2), and (3, 2) with a doubled area of 4.\n\n    Case 2: w = 10, h = 10, points on bottom = [1, 9], points on top = [1, 9], points on left = [1, 9], points on right = [1, 9]\n    Expected output: 80\n    Explanation: The largest triangle can be formed using points (0, 1), (0, 9), and (10, 9) with a doubled area of 80.\n\n    Case 3: w = 5, h = 5, points on bottom = [2, 3], points on top = [2, 3], points on left = [2, 3], points on right = [2, 3]\n    Expected output: 10\n    Explanation: The largest triangle can be formed using points (0, 2), (0, 3), and (5, 3) with a doubled area of 10.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible configurations for forming triangles with maximum area by leveraging the sorted nature of input points and calculating potential areas efficiently.\n", "requirement analysis:\nThe task requires selecting three points such that two are on the same side of the rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large values of w and h, and the number of test cases can be up to 10,000. The doubled area of the triangle must be calculated and returned as an integer.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Accurately compute the maximum doubled area of a triangle.\n- Optimize performance for large values of w and h.\n- Ensure the solution is scalable for large input sizes.\n- Provide clear and concise output format.\nWe will use a mathematical approach to calculate the maximum area of a triangle formed by three points on the sides of the rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is on the opposite side. We will iterate over each side, calculate the potential maximum area using the farthest points on that side, and compare it with the areas formed by points on the opposite side. This approach ensures efficiency even for large values of w and h.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'maximum area'\n    Explanation: The problem involves a rectangle defined by its corners and sides parallel to the axes. Lattice points are integer-coordinate points lying on the sides of the rectangle. The task is to form a triangle using three points such that two are on the same side, and the area of this triangle is maximized.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side': Ensures that there are enough points to form a triangle with two points on the same side.\n    'maximum possible': Indicates the need to find the largest area achievable by such a triangle.\n    Implementation: Iterate over each side, calculate potential maximum areas using farthest points, and compare.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible area of the triangle formed by the points.\n    Implementation: Use mathematical calculations to determine the largest area by considering farthest points on each side.\n\n# [code logic]\n    1. For each test case, read w and h.\n    2. For each side, read the number of points and their coordinates.\n    3. Calculate potential maximum areas using farthest points on each side.\n    4. Compare areas to find the maximum possible area for a triangle.\n    5. Output the doubled maximum area for each test case.\n\n# [edge case]\n    Case 1: Minimum number of points on each side\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 6\n    Explanation: The largest triangle is formed by (0,1), (0,2), and (3,2) with an area of 3, doubled to 6.\n\n    Case 2: All points on one side are at maximum distance\n    Input: 5 5\n           2 1 4\n           2 1 4\n           2 1 4\n           2 1 4\n    Expected Output: 20\n    Explanation: The largest triangle is formed by (0,1), (0,4), and (5,4) with an area of 10, doubled to 20.\n\n    Case 3: Points evenly distributed on all sides\n    Input: 6 6\n           3 1 3 5\n           3 1 3 5\n           3 1 3 5\n           3 1 3 5\n    Expected Output: 30\n    Explanation: The largest triangle is formed by (0,1), (0,5), and (6,5) with an area of 15, doubled to 30.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over each side and calculating maximum areas using farthest points will naturally handle these cases.\n", "requirement analysis:\nThe problem requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure the output is in the correct format.\nrequirement pool:\n- Efficiently compute the maximum doubled area of the triangle.\n- Ensure the solution handles the maximum constraints.\n- Optimize the solution for both speed and memory usage.\n- Provide clear and concise output.\n- Handle edge cases effectively.\nWe will use a mathematical approach to calculate the maximum doubled area of a triangle formed by three points on the sides of the rectangle. The key observation is that the maximum area is formed by choosing two points on the same side with the maximum distance between them and one point on the opposite side. We will iterate over each side and calculate the potential maximum area using this strategy. The solution will be efficient by leveraging the sorted nature of the input points and using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The area of a triangle formed by three points is calculated, and then this area is doubled. This is a common technique in computational geometry to avoid dealing with fractions.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can always be formed.\n\n    'maximum possible'\n    Explanation: We need to find the configuration of points that results in the largest possible area for the triangle.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the largest possible area of a triangle that can be formed by the given points.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the points on each side.\n2. For each side, calculate the maximum distance between any two points.\n3. Use these maximum distances to calculate potential maximum areas by considering one point from an opposite side.\n4. The doubled area of the triangle is given by the formula: `max_distance * opposite_side_length`.\n5. Compare all possible configurations to find the maximum doubled area for each test case.\n\n# [edge case]\n    Case 1: w = 3, h = 3, points on sides are minimal\n    Explanation: With minimal points, the configuration is straightforward, and the maximum area is determined by the longest side.\n    \n    Case 2: All points are equidistant\n    Explanation: If all points are equidistant, the maximum area is still determined by the longest span on one side.\n    \n    Case 3: Points form a perfect square\n    Explanation: In this case, the maximum area is determined by the diagonal of the square.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating maximum distances and using them to determine the maximum area will naturally handle these cases.\n", "requirement analysis:\nThe problem requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large input sizes and ensure the output is in the correct format.\nrequirement pool:\n- Efficiently handle large input sizes\n- Maximize the area of the triangle\n- Ensure correct output format\n- Optimize for performance\n- Provide clear documentation\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by three points on the sides of the rectangle. The key observation is that the maximum area is formed by choosing two points on the same side with the maximum distance between them and a third point on the opposite side. This can be efficiently calculated using the given constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'maximum area'\n    Explanation: The problem involves a rectangle defined by its corners and sides, lattice points on the sides of the rectangle, and forming a triangle with maximum area using these points. The lattice points are integer coordinates on the sides of the rectangle, and the task is to find a triangle with the largest possible area using these points.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side': This means each side of the rectangle has a minimum of two lattice points.\n    'maximum possible': This indicates the need to find the largest area of a triangle that can be formed.\n    Implementation: Use mathematical calculations to determine the maximum area by considering the largest distance between two points on the same side and a point on the opposite side.\n\n# [degree adverb]\n    'maximum': Refers to finding the largest possible area of a triangle.\n    Implementation: Calculate areas for different combinations of points and select the largest one.\n\n# [code logic]\n    1. Parse input to extract dimensions of the rectangle and coordinates of lattice points.\n    2. For each test case, identify two points on the same side with maximum distance between them.\n    3. Choose a third point from the opposite side to form a triangle.\n    4. Calculate the area of the triangle using the formula for area based on coordinates.\n    5. Double the calculated area as required by the problem statement.\n    6. Return the doubled maximum area for each test case.\n\n# [edge case]\n    Case 1: Minimum number of points on each side\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 6\n    Explanation: The maximum area is formed by choosing two points on one side (e.g., (1,0) and (2,0)) and one point on an opposite side (e.g., (1,3)), resulting in an area of 3, doubled to 6.\n\n    Case 2: All points are equidistant\n    Input: 4 4\n           2 1 3\n           2 1 3\n           2 1 3\n           2 1 3\n    Expected Output: 8\n    Explanation: The maximum area is formed by choosing two points on one side (e.g., (1,0) and (3,0)) and one point on an opposite side (e.g., (1,4)), resulting in an area of 4, doubled to 8.\n\n    Case 3: Large rectangle with few points\n    Input: 10^6 10^6\n           2 1 (10^6-1)\n           2 1 (10^6-1)\n           2 1 (10^6-1)\n           2 1 (10^6-1)\n    Expected Output: (10^6-1)*10^6\n    Explanation: The maximum area is formed by choosing two points on one side with maximum distance ((1,0) and (10^6-1,0)) and one point on an opposite side ((1,10^6)), resulting in an area of (10^6-1)*10^6/2, doubled to (10^6-1)*10^6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers maximum distances and combinations to find the largest possible area.\n", "requirement analysis:\nThe problem requires selecting three points such that two are on the same side of the rectangle and the area of the triangle formed is maximized. The solution must efficiently handle large values of w and h, ensuring performance and accuracy across multiple test cases.\nrequirement pool:\n- Efficiently compute the maximum area of a triangle formed by lattice points.\n- Ensure the solution handles large inputs without performance degradation.\n- Verify the solution against multiple test cases for accuracy.\n- Optimize the algorithm for scalability.\n- Provide clear documentation for the implemented solution.\nWe will use a mathematical approach to determine the maximum possible area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area triangle will have its base as the longest possible segment on one side of the rectangle and its height as the maximum possible distance from this base to a point on the opposite side. This approach ensures efficient computation even for large values of w and h.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'maximum area'\n    Explanation: The problem involves a rectangle defined by its corners and sides parallel to the axes. Lattice points are integer-coordinate points on the sides of the rectangle. The task is to form a triangle using three points such that two are on the same side, and the area of this triangle is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible': The goal is to find the triangle with the largest area possible given the constraints.\n    Implementation: Calculate the area using the formula for a triangle and maximize it by choosing appropriate points.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible area of a triangle that can be formed under the given conditions.\n    Implementation: Use mathematical calculations to determine the largest area by considering the longest base and maximum height.\n\n# [code logic]\n    1. For each test case, read w and h.\n    2. For each side of the rectangle, read the number of points and their coordinates.\n    3. Calculate the maximum possible base length for each side.\n    4. Calculate the maximum possible height using points from opposite sides.\n    5. Compute the area of triangles formed by these bases and heights.\n    6. Return the doubled maximum area for each test case.\n\n# [edge case]\n    Case 1: Minimum number of points on each side\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 6\n    Explanation: The smallest rectangle with minimum points, forming a triangle with maximum area.\n\n    Case 2: All points on one side are at maximum distance\n    Input: 10 10\n           2 1 9\n           2 1 9\n           2 1 9\n           2 1 9\n    Expected Output: 80\n    Explanation: Points are at maximum distance, forming a large triangle.\n\n    Case 3: Points are evenly distributed\n    Input: 5 5\n           3 1 3 4\n           3 1 3 4\n           3 1 3 4\n           3 1 3 4\n    Expected Output: 20\n    Explanation: Even distribution allows for a balanced triangle with significant area.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating maximum base and height will naturally handle these scenarios efficiently.\n"], "scores": [], "pass_results": [true, false, false, false, false, false, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 506, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "mutate_method": "add_1_sentence_at_end", "parent_index": 109}
