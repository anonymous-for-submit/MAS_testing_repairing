{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of three positive integers. Each integer in the array is distinct, ensuring no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of three positive integers. Each integer in the array is distinct, ensuring no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers. Each integer in the array is distinct. This ensures that there are no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers. Each integer in the array is distinct, ensuring no repeated values, and he listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"\n    Restore the original array a from the given array b for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples, each containing the restored array a.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        largest = b[-1]\n        \n        # The smallest and second smallest numbers in b are two of the numbers in a\n        smallest = b[0]\n        second_smallest = b[1]\n        \n        # Calculate the third number\n        third_number = largest - smallest - second_smallest\n        \n        # Append the result as a tuple\n        results.append((smallest, second_smallest, third_number))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array a consisting of three distinct positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    sum_all = b[6]\n    # The second largest element in b is the sum of the two largest elements in a\n    sum_two_largest = b[5]\n    \n    # Calculate the elements of array a\n    a3 = sum_all - sum_two_largest\n    a2 = sum_all - a1 - a3\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the elements of array a\n        a1 = b[0]  # The smallest element in a\n        a2 = b[-1] - b[-2]  # The second largest element in a\n        a3 = b[-2] - b[0]  # The third element in a\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a1\n        a1 = b[0]\n        # The second smallest element in b is a2\n        a2 = b[1]\n        # The largest element in b is the sum of a1, a2, and a3\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Call the function to restore the original arrays\n    results = restore_original_array(test_cases)\n    \n    # Print the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three distinct integers from the given subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        largest = b[-1]\n        # The smallest and second smallest numbers in b are two of the numbers in a\n        smallest = b[0]\n        second_smallest = b[1]\n        # Calculate the third number in a\n        third_number = largest - smallest - second_smallest\n        # Append the result as a tuple\n        results.append((smallest, second_smallest, third_number))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [list(map(int, input().strip().split())) for _ in range(t)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three distinct integers from the sorted array of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The largest element in b is the sum of all three original integers\n        sum_a = b[-1]\n        # The second smallest element in b is the sum of two of the original integers\n        a2_plus_a3 = b[1]\n        # The second largest element in b is the sum of two of the original integers\n        a1_plus_a2 = b[-2]\n        \n        # Deduce the remaining integers\n        a2 = a1_plus_a2 - a1\n        a3 = sum_a - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: int, b_values: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: The number of test cases.\n        b_values: A list of lists, where each list contains 7 integers representing the array b.\n\n    Returns:\n        A list of tuples, where each tuple contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in b_values:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    b_values = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, b_values)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three distinct integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The smallest element in b is the smallest integer in a\n        a1 = b[0]\n        # The largest element in b is the sum of all three integers in a\n        sum_all = b[-1]\n        # The second largest element in b is the sum of the two largest integers in a\n        sum_two_largest = b[-2]\n        \n        # Calculate the second and third integers\n        a2 = sum_all - sum_two_largest\n        a3 = sum_two_largest - a1\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function and print the results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second and third smallest elements in b are the other two elements in a\n        # We can deduce a2 and a3 by using the properties of the sorted array b\n        a2 = b[1]\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Function call\n    results = restore_array_from_sums(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given array b which contains\n    the sums of all non-empty subsequences of a three-element array a.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty\n                       subsequences of a three-element array a.\n\n    Returns:\n        List[int]: The original array a consisting of three distinct positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements in a\n    a3 = b[6] - a1\n    # The second largest element in b is the sum of the two largest elements in a\n    a2 = b[5] - a3\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be precise and follow the specified format.\nrequirement pool:\n- Efficiently reconstruct array a from array b\n- Handle up to 5000 test cases\n- Ensure the solution is robust against edge cases\n- Provide clear and concise output\n- Optimize for large integer values\nWe will solve the problem by identifying the three distinct integers from the sorted array of sums of non-empty subsequences. The key observation is that the largest number in the array b is the sum of all three numbers in array a. The smallest number in array b is one of the numbers in array a. The second smallest number in array b is another number in array a. The third number can be found by subtracting the smallest and second smallest numbers from the largest number in array b. This approach is efficient and handles large numbers well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct integers'\n    Explanation: Each integer in the array a is unique, meaning no repeated values.\n\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means at least one element is present.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this is represented by iterating over all combinations of elements and summing them.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the largest number in array b, which is the sum of all three numbers in array a.\n2. Identify the smallest and second smallest numbers in array b, which are two of the numbers in array a.\n3. Calculate the third number by subtracting the smallest and second smallest numbers from the largest number.\n4. Return these three numbers as array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All numbers are the same, so each number in a is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest numbers are 1 and 2, and the largest is 7. The third number is calculated as 7 - 1 - 2 = 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All numbers are large but identical in pairs; thus each number in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the three distinct integers from the sorted array b.\n", "requirement analysis:\nThe problem requires restoring an original array of three distinct integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correctness and performance.\nrequirement pool:\n- Restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Maintain code simplicity and readability.\n- Include comprehensive test coverage for edge cases.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of elements from the array a, excluding the empty set.\n    'sorted': means the array b is arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    'three': indicates the number of integers in the array a.\n    '7': indicates the number of integers in the array b, which corresponds to all possible sums of non-empty subsequences of a three-element array.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to the smallest element in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these insights to reconstruct the original array a:\n       - Let a1 be the smallest element in b.\n       - Let a3 be the largest element in b minus the second largest element in b.\n       - Let a2 be the largest element in b minus a1 minus a3.\n\n# [edge case]\n    b = [1, 3, 4, 4, 5, 7, 8] = a = [1, 4, 3]\n    Explanation: The smallest element is 1 (a1), the largest element is 8 (sum of all elements), and the second largest is 7 (sum of two largest elements). Thus, a = [1, 4, 3].\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = a = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, so each element in a is 300000000.\n\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = a = [999999998, 1, 1]\n    Explanation: The smallest element is 1 (a1), the largest element is 1000000000 (sum of all elements), and the second largest is 999999999 (sum of two largest elements). Thus, a = [999999998, 1, 1].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by leveraging the sorted nature and specific properties of array b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Implement the main logic to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide clear and concise output formatting.\n- Include comments and documentation for code clarity.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the elements of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that all integers in array a are unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of elements from array a, excluding the empty set.\n    'sorted': array b is arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all elements': refers to the total sum of all integers in array a.\n    'sum of the two largest elements': refers to the sum of the two largest integers in array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest integer in array a, which is the first element of array b.\n    'largest': refers to the sum of all elements in array a, which is the last element of array b.\n    'second largest': refers to the sum of the two largest elements in array a, which is the second last element of array b.\n\n# [code logic]\n    1. Identify the smallest element in array a as the first element of array b.\n    2. Identify the sum of all elements in array a as the last element of array b.\n    3. Identify the sum of the two largest elements in array a as the second last element of array b.\n    4. Deduce the three elements of array a using these observations:\n       - a_1 = b[0] (smallest element)\n       - a_2 = b[-1] - b[-2] (second largest element)\n       - a_3 = b[-2] - b[0] (third element)\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the sum of all elements is 1000000000, and the sum of two largest elements is 999999999. Deduce a_2 and a_3 accordingly.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, hence deduced directly from b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the sum of all elements is 5, and the sum of two largest elements is 4. Deduce a_2 and a_3 accordingly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic deduces the elements correctly based on sorted properties and sum relationships.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. By using these properties, we can efficiently determine the original array a. Specifically, the three elements of a can be found as follows: a1 is the smallest element in b, a2 is the second smallest element in b, and a3 can be calculated as the largest element in b minus the sum of a1 and a2. This approach ensures that we handle up to 5000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': Each integer in the array a is unique, meaning no repeated values.\n    'non-empty subsequences': These are subsets of the array a that contain at least one element.\n    'sorted array b': The array b is the result of sorting all possible sums of non-empty subsequences of a.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three integers, all greater than zero.\n    '7 integers': The array b contains exactly seven integers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to one of the elements in a (let's call it a1).\n3. Identify the second smallest element in b, which corresponds to another element in a (let's call it a2).\n4. Calculate the third element a3 as the largest element in b minus the sum of a1 and a2.\n5. Output the three elements a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest element is 1, and the largest is 3 (sum of all elements).\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, second smallest is 2, and the largest is 7. The third element is calculated as 7 - (1 + 2) = 4.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest element is 1000000000, and the largest is 3000000000 (sum of all elements).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the elements of a from b.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and correct output for each test case.\n- Optimize for performance and memory usage.\nWe will solve the problem by recognizing that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the numbers in a. The second smallest number in b is another number in a. The third number in a can be found by subtracting the first two numbers from the largest number in b. This approach ensures that we efficiently restore the original array a from the given subsequence sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, no repeated values.\n\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': means calculating the sum of each possible combination of elements in array a.\n\n# [degree adverb] \n    'largest': refers to the maximum value in array b, which is the sum of all three integers in array a.\n\n    'smallest': refers to the minimum value in array b, which is one of the integers in array a.\n\n# [code logic]\n    1. Identify the largest number in array b, which represents the sum of all three integers in array a.\n    2. Identify the smallest and second smallest numbers in array b, which are two of the integers in array a.\n    3. Calculate the third integer in array a by subtracting the smallest and second smallest numbers from the largest number in array b.\n    4. Return the three integers as the restored array a.\n\n# [edge case] \n    Input: 1 3 4 4 5 7 8\n    Output: 1 4 3\n    Explanation: The largest number is 8 (sum of all three numbers), smallest is 1, second smallest is 3. The third number is calculated as 8 - 1 - 3 = 4.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The largest number is 5 (sum of all three numbers), smallest is 1, second smallest is 2. The third number is calculated as 5 - 1 - 2 = 2.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each number in array a is equal to the smallest number in array b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Output the result in the specified format.\n- Handle large integer values up to 10^9.\n- Provide multiple valid outputs if possible.\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 distinct integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can efficiently restore the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means each integer in the array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of elements from array a, excluding the empty set.\n    'sorted array': array b is arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    'three': indicates the number of integers in array a.\n    'seven': indicates the number of integers in array b, derived from all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the integers in array a.\n    2. Identify the largest element in array b, which is the sum of all three integers in array a.\n    3. Use the second smallest and second largest elements in array b to deduce the remaining integers in array a.\n    4. Return the three integers as array a.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, and the largest element is 1000000000. The second smallest and second largest elements help deduce the remaining integers.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, indicating that all integers in array a are the same.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, and the largest element is 5. The second smallest and second largest elements help deduce the remaining integers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying smallest and largest elements and using them to deduce the original integers will handle these cases correctly.\n", "requirement analysis:\nThe task requires reconstructing an array of three distinct integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists, and the solution must handle up to 5000 test cases efficiently. The output should be flexible to allow any valid reconstruction of the original array.\nrequirement pool:\n- Efficiently process up to 5000 test cases.\n- Correctly reconstruct the original array from the given subsequence sums.\n- Handle large integer values up to 10^9.\n- Provide any valid solution when multiple solutions exist.\n- Optimize for performance and memory usage.\nWe will leverage the fact that the array b contains all possible sums of the non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, and the largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a. Specifically, the three elements of a can be found as follows: a_1 is the smallest element in b, a_2 is the second smallest element in b, and a_3 can be found by subtracting a_1 and a_2 from the largest element in b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that array a consists of exactly three elements, all greater than zero.\n    '7 integers': indicates that array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    'largest': refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest element in array b, which will be a_1.\n    2. Identify the second smallest element in array b, which will be a_2.\n    3. Calculate a_3 by subtracting a_1 and a_2 from the largest element in array b.\n    4. Return the three elements a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, second smallest is also 1, and the largest element is 1000000000. Subtracting the two smallest from the largest gives 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, second smallest is 2, and the largest element is 5. Subtracting the two smallest from the largest gives another 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and second smallest elements and calculating the third element using subtraction from the largest element in b will handle these cases correctly.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring that the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b\n- Ensure the solution handles the maximum constraints efficiently\n- Optimize the solution for speed and clarity\n- Test the solution against edge cases and large inputs\n- Document the solution and provide examples\nWe will solve the problem by identifying the three distinct integers from the sorted list of sums of all non-empty subsequences. Given the sorted array b, the smallest element is the smallest integer in a. The largest element in b is the sum of all three integers. The second largest element in b is the sum of the two largest integers in a. Using these observations, we can deduce the three integers in a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct integers'\n    Explanation: Each integer in the array a is unique, meaning no repeated values.\n\n    'non-empty subsequences'\n    Explanation: Subsequence refers to any sequence derived from the array by removing zero or more elements, but not all. Non-empty means at least one element is present.\n\n# [phrase showing quantity relationship]\n    'three positive integers': Indicates that the array a consists of exactly three integers.\n    \n    '7 integers': Refers to the number of elements in array b, which are derived from the sums of non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest integer in array a, which is the smallest element in array b.\n    \n    'largest': Refers to the largest sum in array b, which is the sum of all three integers in array a.\n\n# [code logic]\n1. Identify the smallest integer in array a as the smallest element in array b.\n2. Identify the sum of all three integers in array a as the largest element in array b.\n3. Identify the sum of the two largest integers in array a as the second largest element in array b.\n4. Deduce the three integers using these observations:\n   - Let `a1` be the smallest element in b.\n   - Let `a2` and `a3` be deduced from the largest and second largest sums in b.\n   - Calculate `a2` as `b[-1] - b[-2]`.\n   - Calculate `a3` as `b[-2] - a1`.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, leading to identical sums for subsequences.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest sum is 7, leading to deduced values.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, leading to identical sums for subsequences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by deducing values based on sorted sums.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains the sums of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a. The largest element in b is the sum of all elements in a. By using these properties, we can efficiently determine the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of elements from array a, excluding the empty set.\n    'sorted': means the array b is arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that array a consists of exactly three elements, all greater than zero.\n    '7 integers': indicates that array b consists of exactly seven elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n    2. Identify the largest element in array b, which is the sum of all elements in array a.\n    3. Use the properties of sorted array b to deduce the remaining elements of array a:\n       - The second smallest element in b is the second smallest element in a.\n       - The third smallest element in b is the third smallest element in a.\n    4. Return the three elements of array a.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, and the largest element is 1000000000 (sum of all elements). The remaining element can be deduced from the sorted order.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sum is the largest element in b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, and the largest element is 5 (sum of all elements). The remaining element can be deduced from the sorted order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the remaining elements from sorted order will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must handle up to 5000 test cases efficiently and ensure the output format is strictly followed. The integers in the original array are distinct, and the subsequence sums are provided in ascending order.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure output format is correct\n- Handle large numbers efficiently\n- Optimize for scalability with up to 5000 test cases\n- Provide clear documentation for the solution\nWe will leverage the fact that the array b contains all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct integers'\n    Explanation: Each integer in the array a is unique, meaning no two integers are the same.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three integers, all greater than zero.\n    \n    '7 integers': The array b contains exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all three elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these insights to reconstruct the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 8, which is the sum of all elements. The second largest is 7, which is the sum of the two largest elements. Thus, `a2` and `a3` can be derived as 4 and 3 respectively.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 7, which is the sum of all elements. The second largest is 6, which is the sum of the two largest elements. Thus, `a2` and `a3` can be derived as 2 and 4 respectively.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a must be equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sums and distinct integers.\n"], "scores": [], "pass_results": [true, true, false, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 614, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 364}
