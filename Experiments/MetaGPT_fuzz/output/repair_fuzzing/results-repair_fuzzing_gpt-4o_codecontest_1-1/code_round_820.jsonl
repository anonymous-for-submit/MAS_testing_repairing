{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, documented the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Assist him in restoring the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, documented the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Assist him in restoring the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, documented the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. He sorted them from the smallest to the largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Assist him in restoring the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, documented the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, which he then sorted from smallest to largest to get an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Assist him in restoring the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive integers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # The smallest three numbers in b correspond to the individual elements of array a.\n        a1, a2, a3 = b[0], b[1], b[2]\n        \n        # The largest number in b is the sum of all three elements of a.\n        # We can verify this by checking if a1 + a2 + a3 equals the largest number in b.\n        if a1 + a2 + a3 == b[-1]:\n            restored_arrays.append([a1, a2, a3])\n        else:\n            # If the sum doesn't match, we need to adjust the selection of a1, a2, a3.\n            # This is a rare case and usually the first three numbers are correct.\n            # However, we can use the second smallest number as a potential candidate.\n            a1, a2, a3 = b[0], b[1], b[3]\n            restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the original array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        \n        # Deduce the original array elements\n        a2 = sum_two_largest - a1\n        a3 = sum_a - a1 - a2\n        \n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of two largest elements in a\n        sum_two_largest = b[-2]\n        # Deduce the second and third elements of a\n        a2 = sum_two_largest - a1\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the given sorted sums of all non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the original array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        \n        # Deduce the elements of a\n        a2 = sum_two_largest - a1\n        a3 = sum_a - sum_two_largest\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process and output results\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three elements of a\n        total_sum = b[-1]\n        \n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = total_sum - a1 - a2\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # The smallest element in b is the smallest number in the original array a\n        a0 = b[0]\n        \n        # The largest element in b is the sum of all elements in a\n        total_sum = b[6]\n        \n        # Calculate the sum of the other two elements\n        sum_of_two = total_sum - a0\n        \n        # Use the next two smallest sums in b to deduce the other two elements of a\n        a1 = b[1] - a0\n        a2 = sum_of_two - a1\n        \n        # Append the restored array to the result list\n        restored_arrays.append([a0, a1, a2])\n    \n    return restored_arrays\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\ndef restore_array_from_sums(test_cases: int, b_values: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases (int): The number of test cases.\n        b_values (list[list[int]]): A list containing 'b' arrays for each test case.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the restored array 'a' for each test case.\n    \"\"\"\n    results = []\n    for b in b_values:\n        # The smallest three numbers in b are the elements of the original array a.\n        a_1 = b[0]\n        a_2 = b[1]\n        # The largest number in b is the sum of all three elements of a.\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    number_of_test_cases = int(input())\n    b_values = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n    \n    # Call the function and print the results\n    results = restore_array_from_sums(number_of_test_cases, b_values)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in the sorted array are the individual elements of the original array.\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[6] - a1 - a2  # The largest number is the sum of all three elements.\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples representing the original array a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a.\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a.\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted subsequence sums array b.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array a of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The second smallest element in b is the second smallest element in a\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # Deduce the third element using the sum property\n        a3 = sum_a - a1 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case, allowing for multiple correct outputs.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Provide clear and accurate output for each test case\n- Optimize the solution for large numbers\n- Explain the logic behind the restoration process\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a. Therefore, we can deduce the elements of a by using these observations. This approach is efficient and handles large numbers well, as it only involves basic arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers.\n\n# [degree adverb]\n    'smallest': Refers to the minimum value in the array b, which corresponds to one of the elements in array a.\n    \n    'largest': Refers to the maximum value in the array b, which is the sum of all three elements in array a.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n3. Identify the largest number in b, which is the sum of all three elements of a.\n4. Use these observations to deduce the elements of a:\n   - Let a1, a2, a3 be the smallest three numbers in b.\n   - The largest number in b is a1 + a2 + a3.\n5. Return a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so the original array can be deduced as [1, 1, 1].\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal to a large number, so the original array can be deduced as [1000000000, 1000000000, 1000000000].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of subsequences and sorted order.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each test case.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums.\n- Ensure the solution is efficient for the maximum input constraints.\n- Provide clear and concise output for each test case.\n- Optimize the solution for speed and clarity.\n- Handle potential edge cases and large numbers gracefully.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a by selecting the appropriate elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these observations to deduce the original array a by selecting appropriate elements from b.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, the largest sum is 7 (4+1+2), and the second largest sum is 6 (4+2).\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal and large numbers, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing array a from b inherently handles these cases by selecting appropriate elements based on their sorted order and sum relationships.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each case.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input values.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness.\n- Maintain readability and simplicity in the code.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum of each possible combination of elements from the array a. In code, this involves iterating through combinations and summing their values.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which is the smallest element in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Use these two values to deduce the remaining elements of a by considering the properties of subsequences.\n    4. For each test case, print the deduced values of a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The remaining elements can be deduced from these values.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the remaining values will suffice.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and quick output for each case.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input values.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness of the solution.\n- Maintain simplicity in the implementation for ease of understanding.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest', 'largest', 'second largest'\n    Explanation: These terms refer to specific positions in the sorted array b. The smallest element in b corresponds to the smallest element in a, the largest element in b corresponds to the sum of all elements in a, and the second largest element in b corresponds to the sum of the two largest elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the elements in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these insights to deduce the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, the largest is 7 (sum of all), and second largest is 6 (sum of two largest).\n\n    Case 3: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can deduce the values of a correctly by leveraging the sorted nature and specific positions of elements in b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each case.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Optimize for large integer values.\n- Provide detailed comments and documentation.\nWe will solve the problem by recognizing that the largest number in the sorted array b is the sum of all three elements of the original array a. The smallest three numbers in b are the individual elements of a. By using these observations, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from array a, excluding the empty set. In code, this can be implemented by calculating all possible sums of combinations of the elements in array a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b represents the sum of all three elements in array a. This helps us identify the total sum of the original array.\n\n# [code logic]\n    1. For each test case, identify the largest number in array b, which is the sum of all three elements in array a.\n    2. The smallest three numbers in array b are the individual elements of array a.\n    3. Use these observations to reconstruct array a by selecting the smallest three numbers from b and verifying their sum matches the largest number in b.\n\n# [edge case]\n    Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sum matches the largest number in b.\n    \n    Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. Their sum (6) matches the largest number (7) when considering different combinations.\n    \n    Case 3: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and their sum matches the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers and verifying their sum against the largest number in b will suffice.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide a clear and concise output format.\n- Consider edge cases and ensure robustness.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is the smallest number in the original array a. The largest element b[6] is the sum of all elements in a. By subtracting b[0] from b[6], we get the sum of the other two elements. Using b[1] and b[2], which are the smallest sums of two elements, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in array b (b[6]) represents the sum of all elements in the original array a. In code, this can be represented as `a[0] + a[1] + a[2] = b[6]`.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b (b[0]) is the smallest number in the original array a. In code, this can be represented as `a[0] = b[0]`.\n\n# [code logic]\n1. Identify the smallest element in b, which is `a[0]`.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Calculate the sum of the other two elements by subtracting `a[0]` from the largest element.\n4. Use the next two smallest sums in b to deduce the other two elements of a.\n5. Return the three elements of a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so the original array consists of three identical numbers.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest number is 1, and using the logic, we deduce the other numbers.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so the original array consists of three identical numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by using the sorted properties and mathematical deductions.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The input format is strict, and the output must match the expected format exactly. The solution should be optimized for both performance and usability, providing clear instructions and examples to users.\nrequirement pool:\n- Efficiently compute the original array from the subsequence sums\n- Handle up to 5000 test cases in a single run\n- Provide clear input and output instructions\n- Include example inputs and outputs for user reference\n- Optimize the solution for large integer values\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b are the elements of the original array a. The largest number in b is the sum of all three elements of a. Therefore, the three elements of a can be derived as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - a_1 - a_2. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty means that at least one element must be present in the subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of each possible non-empty subsequence of the array a. In code, this means identifying all combinations of elements and summing them.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b as a_1, a_2, and a_3.\n    3. Calculate a_3 using the formula: a_3 = b[6] - a_1 - a_2.\n    4. Output the values of a_1, a_2, and a_3.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and the largest number minus these two gives 4.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical; hence the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the smallest and largest values from b to reconstruct a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values. The output should be formatted correctly for each test case, and multiple valid solutions are acceptable.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Handle up to 5000 test cases with large integer values.\n- Ensure the output is correctly formatted for each test case.\n- Allow for multiple valid solutions if applicable.\n- Optimize for both speed and simplicity.\nWe will use a simple mathematical approach to restore the original array from the given sorted array of subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these observations, we can efficiently compute the original array for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the elements in array a.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order': means that the array b is sorted from smallest to largest.\n    'sum of all non-empty subsequences': means that we need to consider all possible combinations of elements in array a and their sums.\n\n# [degree adverb] \n    'smallest': refers to the smallest individual element in array a.\n    'largest': refers to the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest three numbers in array b. These correspond to the individual elements of array a.\n    2. The largest number in array b is the sum of all three elements of array a.\n    3. Use these observations to reconstruct array a.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: The smallest three numbers are 1, 1, and 1, which are the elements of array a. The largest number is 3, which is the sum of all three elements.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: The smallest three numbers are 1000000000, 1000000000, and 1000000000, which are the elements of array a. The largest number is 3000000000, which is the sum of all three elements.\n\n    Input: 5 5 5 10 10 10 15\n    Output: 5 5 5\n    Explanation: The smallest three numbers are 5, 5, and 5, which are the elements of array a. The largest number is 15, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the smallest three numbers and the largest number in array b to reconstruct array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each test case.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for handling large numbers and multiple test cases.\n- Provide clear and concise output for each test case.\n- Maintain code readability and simplicity.\n- Include comments and documentation for better understanding.\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Thus, we can deduce the original array a by selecting the smallest, second smallest, and the difference between the largest and the sum of the smallest two numbers in b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest value in the sorted array b, which corresponds to one of the elements in array a.\n    \n    'largest': Refers to the largest value in the sorted array b, which is the sum of all three elements of array a.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest three numbers in b, which are the individual elements of a.\n3. The largest number in b is the sum of all three elements of a.\n4. Deduce the original array a by selecting:\n   - The smallest number as a_1.\n   - The second smallest number as a_2.\n   - The difference between the largest number and the sum of a_1 and a_2 as a_3.\n5. Print the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest numbers are 1, 3, and 4. The largest number is 8. Thus, a = {1, 4, 3}.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest numbers are 1, 2, and 2. The largest number is 5. Thus, a = {1, 2, 2}.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so a = {300000000, 300000000, 300000000}.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for all possible configurations of array b that can be derived from array a.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle multiple test cases efficiently\n- Ensure output format compliance\n- Optimize for large integer values\n- Provide clear documentation\nWe will solve the problem by leveraging the properties of the sorted subsequence sums. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a. The largest element is the sum of all three numbers in a. The second smallest element is the second smallest number in a. By using these properties, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence': A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements.\n    'sorted in non-decreasing order': The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': This means we need to consider all possible combinations of the elements in array a, including individual elements and sums of pairs and triples.\n    'sorted': The array b is sorted, which helps in identifying the smallest and largest sums.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array b, which corresponds to the smallest element in array a.\n    'largest': Refers to the largest element in the sorted array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest element in b, which corresponds to one of the elements in a.\n    3. Identify the largest element in b, which is the sum of all elements in a.\n    4. Use the second smallest element in b to identify another element in a.\n    5. Deduce the third element using the properties of sums and sorted order.\n    6. Print the deduced array a for each test case.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest is 1000000000. The sum of all three elements is 1000000000, so we deduce a = [999999998, 1, 1].\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, so a consists of three identical elements.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest element is 1, and the second smallest is 2. The largest sum is 5. We deduce a = [1, 2, 2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying elements based on sorted order and sum properties will suffice.\n"], "scores": [], "pass_results": [false, false, false, true, true, false, false, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 820, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 491}
