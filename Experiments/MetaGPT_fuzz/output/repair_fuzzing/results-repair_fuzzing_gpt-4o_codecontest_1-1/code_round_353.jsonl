{"name": "1579_A. Casimir's String Solitaire", "description": "Casimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions:\n\n  * he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); \n  * or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string (these letters don't have to be adjacent). \n\n\n\nTherefore, each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "tags": ["math", "strings"], "difficulty": 7, "id": 1579, "sample_io": [{"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}], "test_list": [{"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nABBB\nAC\nABA\nCABCBB\nCCCBCBBBBBCBCCCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nBACABA\nABBB\nAC\nABA\nCABCBA\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nCBAA\nCA\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBABABA\nACBB\nAC\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABAA\nCB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nCABABA\nABAA\nBB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABBA\nBC\nABC\nBACCBB\nBBBCACCCBCACBCBC\n", "output": ["YES\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nACBA\nAC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["YES\nNO\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nBABCAB\nABBA\nAC\nABC\nCACCBB\nCBCBCACBCCCACBBB\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAB\nABBA\nBC\nABC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["YES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nBAACBA\nABBB\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nCABABA\nABBB\nAB\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBBAACB\nABAA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["YES\nNO\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nCBBABA\nABAA\nCB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["YES\nNO\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABCA\nBC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["YES\nNO\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nBACABA\nABBB\nBC\nABA\nCABCBB\nCBCBBBCCCCCBBBCC\n", "output": ["NO\nNO\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nBBACAB\nAABA\nAC\nABC\nCABCBA\nBCBCACBCBCBCBCBC\n", "output": ["YES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABAB\nBC\nCCB\nBACCAB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBAABAB\nABBB\nCA\nABB\nCBBCBB\nBCBCBCBCBCBCBCBC\n", "output": ["YES\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABBCAB\nABAA\nBC\nCCB\nBACCAB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBCBCBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBBBCBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nBACABA\nABBA\nAC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBBBCACCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCCCACBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACA\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCCCBCBBBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nABC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBBCBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBABCAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCCCACBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACA\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABCBB\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBB\nAC\nABA\nCABCBB\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBBCBAC\nCBCBCACBCBCBCBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCACBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nBBAA\nAC\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBABA\nAC\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBCAABA\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAA\nABBA\nAC\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nBAA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBCBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBABCAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCACCCBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nAAC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABCBB\nBCCCBCBBBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABBBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nCBA\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBBAA\nAC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nBBAA\nCA\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABAACB\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nCACABA\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nAAB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABBB\nAC\nABA\nCABCBA\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABBAB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nBCA\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBBAA\nAC\nCAC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBBACAC\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nBCB\nCACCBB\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nAABB\nCA\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nCABABA\nABBB\nAC\nABA\nCABCBA\nBCCCBCCBBBBCBCCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nCBA\nCABBAB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nAABB\nAC\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nBAACBA\nABBA\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABABAC\nABBA\nCB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABBB\nAC\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nAABB\nCA\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nABCBAC\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nCABABA\nABBA\nCB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nACBB\nAC\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nAABB\nCA\nBAB\nBBCBAC\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nABCBAC\nCBCBCACBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nCABABA\nABBA\nCB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nABCBAC\nCBCBCACCCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nBABABA\nACBB\nAC\nABA\nBACCBA\nBCCBCBBBBCCBCCCB\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABAA\nBC\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABABAB\nACBB\nAC\nABA\nBACCBA\nBCCBCBBBBCCBCCCB\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABABAC\nABAA\nBB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACA\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACA\nCABBBB\nACCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACA\nBBBBAC\nACCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACB\nBBBBAC\nACCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACB\nBBBBAC\nACBBCBCBCBCCCBCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nAC\nAAC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABB\nCABCBB\nCBCBCBCBCBCACBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nAABB\nAC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nBACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABB\nCACBBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nABC\nCABCBC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABA\nCAACBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nABBBAC\nABBA\nAC\nABC\nBACCBB\nBCBCBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nBBCBAC\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nACC\nBACCBB\nBBBCBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nBA\nACB\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nABBA\nCA\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABABAC\nABBA\nCA\nACA\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nBABCBB\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABCBB\nCCCBCBBBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nAAC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBB\nABC\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBB\nCA\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nCB\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nACABAC\nABBA\nAC\nABC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nBAC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAB\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nACBCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABAB\nAC\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBABA\nAC\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBBBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nBAAABC\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACA\nCABCBC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABBBC\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBB\nAC\nBBA\nCABCBB\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nCBA\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABB\nBABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABAB\nBC\nABC\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nCBA\nBBCBAC\nCBCBCACBCBCBCBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nBC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nABA\nCABCBB\nCBCBBBCBCBCACBCC\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nBBAA\nAC\nABC\nBBCCAB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBACA\nAC\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAA\nABBA\nAB\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABCCAA\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nBBCCAC\nBCBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACBAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCACCCBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nAAC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBBCAAA\nAABB\nCA\nABA\nCABCBB\nBCCCBCBBBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABBBB\nBCACBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nCA\nBBA\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nCBB\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nCAA\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBABA\nAC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nBBAA\nCA\nABC\nBACCBB\nCBCBCACBCBCBBBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBBAACB\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["YES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nAAB\nCABCBC\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCACCBB\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nAAC\nBBBBAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABABAC\nABBB\nAC\nABA\nCABCBA\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nBCA\nCABBAB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nBAB\nCCBABB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nCC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBBAA\nBC\nCAC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nCABA\nCA\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nBCB\nCACCBC\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nAAACAB\nAABB\nCA\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nBB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nCBA\nCABBBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBAACAB\nAABB\nAC\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCB\nACB\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABBA\nCB\nAAC\nCAABBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nACB\nABCBAC\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}], "task_id": "codecontest/13", "prompt": "Casimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions: he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string, so each turn the length of the string is decreased exactly by 2, and all turns are independent so for each turn, Casimir can choose any of two possible actions. For example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A\"), with many other options for a turn aside from this particular example. For a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "repair_prompt": ["Casimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions: he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string, so each turn the length of the string is decreased exactly by 2, and all turns are independent so for each turn, Casimir can choose any of two possible actions. For example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A\"), with many other options for a turn aside from this particular example. For a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "Casimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions: he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent). He also has the option to choose another pair of letters to erase. Or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string, so each turn the length of the string is decreased exactly by 2, and all turns are independent so for each turn, Casimir can choose any of two possible actions. For example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A\"), with many other options for a turn aside from this particular example. For a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "Casimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only, and each turn he can choose to do one of the two following actions: either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string or erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string, so each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions; for example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A\"), with many other options for a turn aside from this particular example. For a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being \"YES\" or \"NO\" indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    results = can_be_erased(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each test case string can be fully erased by a sequence of actions.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    \n    results = can_be_erased(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases: A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being \"YES\" or \"NO\" indicating whether the\n        corresponding string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases: A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being 'YES' or 'NO' indicating if the corresponding\n        string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    results = can_be_erased(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    # Process and output results\n    results = can_be_erased(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    # Function call\n    results = can_erase_strings(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    # Process and output results\n    results = can_be_erased(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string can be fully erased by a sequence of actions.\n\n    Args:\n        test_cases: A list of strings, each consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being \"YES\" if the corresponding string can be fully erased,\n        and \"NO\" otherwise.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    \n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires determining if a string can be completely erased using specific operations. The key is to ensure the number of 'B's matches the sum of 'A's and 'C's, as each operation involves removing one 'B' with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased\n- Optimize the solution for large number of test cases\n- Ensure the solution handles edge cases like minimum and maximum string lengths\n- Maintain code readability and simplicity\n- Provide detailed comments and documentation\nWe will implement a function that checks if the string can be fully erased by ensuring the number of 'B's matches the sum of 'A's and 'C's. This is because each operation involves removing one 'B' with either an 'A' or a 'C'. We will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and apply the logic to determine if the string can be erased completely.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': The process of removing specific letters from the string.\n    'sequence of actions': A series of operations that can be performed to achieve a goal.\n    'fully erased': The string becomes empty after performing the operations.\n\n# [phrase showing quantity relationship]\n    'exactly one': This means that in each operation, one letter 'A' and one letter 'B', or one letter 'B' and one letter 'C' must be removed. This can be implemented by ensuring the count of 'B's equals the sum of 'A's and 'C's.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If they are equal, print \"YES\" (the string can be fully erased); otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: s = \"A\" = NO\n    Explanation: There is no 'B' to pair with 'A', so the string cannot be fully erased.\n    \n    Case 2: s = \"BC\" = NO\n    Explanation: There is no 'A' to pair with 'B', so the string cannot be fully erased.\n    \n    Case 3: s = \"ABCCBA\" = YES\n    Explanation: The string can be fully erased by performing operations: (AB, BC, AB).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle these cases correctly.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by repeatedly removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' must be paired with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Provide comprehensive test cases to validate the solution.\n- Document the code for better readability.\nWe will implement a function that checks if the number of 'B's in the string is equal to the sum of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C' to be removed. If this condition is met, the string can be fully erased; otherwise, it cannot. The solution will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and apply the logic to determine the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': means removing letters from the string\n    'sequence of actions': refers to the process of repeatedly applying the allowed operations until the string is empty\n\n# [phrase showing quantity relationship]\n    'exactly one': means that each operation removes one 'A' and one 'B', or one 'B' and one 'C'\n    'sum of': implies that the number of 'B's should be equal to the combined total of 'A's and 'C's for the string to be fully erased\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n    2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string \"AB\" has 1 'A' and 1 'B', but no 'C'. The condition is not met as there are not enough letters to pair with 'B'.\n    \n    s = \"BC\" = NO\n    Explanation: The string \"BC\" has 1 'B' and 1 'C', but no 'A'. The condition is not met as there are not enough letters to pair with 'B'.\n    \n    s = \"ABC\" = NO\n    Explanation: The string \"ABC\" has 1 'A', 1 'B', and 1 'C'. The condition is not met because there is only one 'B', which cannot be paired with both an 'A' and a 'C'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking if the number of 'B's equals the sum of 'A's and 'C's.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be fully erased by performing specific operations. The operations involve removing pairs of 'A' and 'B' or 'B' and 'C'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main algorithm to check if the string can be fully erased.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the output format is correct and matches the requirements.\n- Test the solution with edge cases and large inputs.\n- Document the solution and provide explanations for the logic used.\nWe will determine if a string can be fully erased by checking if the number of 'B's is equal to the sum of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C'. If this condition is met, the string can be fully erased; otherwise, it cannot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': means removing specific letters from the string according to the rules provided.\n    'sequence of actions': refers to the process of repeatedly applying the given operations until the string is empty.\n\n# [phrase showing quantity relationship]\n    'exactly one': indicates that each operation removes precisely one 'A' and one 'B', or one 'B' and one 'C'.\n    'sum of': implies that the total number of 'A's and 'C's should match the number of 'B's for complete erasure.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If they are equal, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string \"AB\" cannot be fully erased because there is no 'C' to pair with a 'B'.\n    \n    s = \"BC\" = NO\n    Explanation: The string \"BC\" cannot be fully erased because there is no 'A' to pair with a 'B'.\n    \n    s = \"ABC\" = NO\n    Explanation: The string \"ABC\" cannot be fully erased because after one operation, a letter remains unpaired.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking if the number of 'B's equals the sum of 'A's and 'C's.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by repeatedly removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the code for readability and maintainability.\n- Provide detailed comments and documentation.\n- Consider edge cases and validate input constraints.\nWe will implement a function that checks if the number of 'B's in the string is equal to the sum of the number of 'A's and 'C's. This is because each 'B' can pair with either an 'A' or a 'C' to be removed, and the string can only be fully erased if this condition is met. We will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and apply the condition to determine the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': means removing specific pairs of letters from the string\n    'sequence of actions': refers to the process of repeatedly applying the erasing rules until the string is empty\n\n# [phrase showing quantity relationship]\n    'exactly one': means that each erasing action involves removing one 'A' and one 'B', or one 'B' and one 'C'\n    'sum of': implies that the number of 'B's should be equal to the combined count of 'A's and 'C's for complete erasure\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: s = \"AB\" = NO\n    Explanation: The string \"AB\" cannot be fully erased because there is no 'C' to pair with a 'B'.\n    \n    Case 2: s = \"BC\" = NO\n    Explanation: The string \"BC\" cannot be fully erased because there is no 'A' to pair with a 'B'.\n    \n    Case 3: s = \"ABCABCABC\" = YES\n    Explanation: The string can be fully erased by pairing each 'B' with an 'A' and a 'C'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the balance between the counts of 'A', 'B', and 'C'.\n", "requirement analysis:\nThe problem requires determining if a string can be fully erased by removing pairs of letters ('A' and 'B' or 'B' and 'C'). The key is to ensure the number of 'B's matches the sum of 'A's and 'C's, as each 'B' can pair with either 'A' or 'C'.\nrequirement pool:\n- Implement the main algorithm to check if the string can be fully erased.\n- Optimize the solution for handling up to 1000 test cases efficiently.\n- Ensure the output format is clear and consistent.\n- Handle edge cases where the string length is minimal or maximal.\n- Provide documentation for understanding the solution approach.\nWe will implement a function that checks if the string can be fully erased by ensuring the number of 'B's matches the sum of 'A's and 'C's. This is because each 'B' can pair with either 'A' or 'C'. We will iterate through each test case, count the occurrences of 'A', 'B', and 'C', and determine if the condition is met. The solution will be efficient enough to handle up to 1000 test cases using simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': means removing letters from the string in pairs\n    'sequence of actions': refers to the process of repeatedly applying the allowed operations until the string is empty\n\n# [phrase showing quantity relationship]\n    'exactly one': means that each operation removes one 'A' and one 'B', or one 'B' and one 'C'\n    'decreased exactly by 2': means that each operation reduces the string length by two characters\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string \"AB\" can be erased in one turn, but it doesn't meet the condition for full erasure as there are no 'C's to pair with remaining 'B's.\n    \n    s = \"BC\" = NO\n    Explanation: The string \"BC\" can be erased in one turn, but it doesn't meet the condition for full erasure as there are no 'A's to pair with remaining 'B's.\n    \n    s = \"ABCABC\" = YES\n    Explanation: The string \"ABCABC\" can be fully erased by pairing each 'B' with an 'A' and a 'C'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking if the number of 'B's matches the sum of 'A's and 'C's.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be completely erased by performing specific operations. The operations involve removing pairs of letters ('A' and 'B' or 'B' and 'C') in each turn. The solution must efficiently handle up to 1000 test cases, ensuring that each string can be processed to determine if it can be fully erased.\nrequirement pool:\n- Implement the main algorithm to check if the string can be fully erased.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the algorithm for quick execution.\n- Provide clear and accurate output for each test case.\n- Handle edge cases such as strings with minimum and maximum lengths.\nWe will iterate through each test case and count the occurrences of 'A', 'B', and 'C'. The string can be fully erased if and only if the number of 'B's is equal to the sum of the number of 'A's and 'C's. This is because each operation removes one 'B' and one of the other letters ('A' or 'C'). This approach is efficient and handles up to 1000 test cases quickly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': means to remove specific pairs of letters from the string\n    'sequence of actions': refers to the process of repeatedly applying the allowed operations until the string is empty\n\n# [phrase showing quantity relationship]\n    'exactly one': means that each operation removes one 'A' and one 'B', or one 'B' and one 'C'\n    'decreased exactly by 2': means that each operation reduces the string length by two characters\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's.\n    3. If they are equal, print \"YES\", otherwise print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string \"AB\" can be erased in one turn, but since there are no 'C's, it cannot be fully erased.\n    \n    s = \"BC\" = NO\n    Explanation: The string \"BC\" can be erased in one turn, but since there are no 'A's, it cannot be fully erased.\n    \n    s = \"ABCABC\" = YES\n    Explanation: The string can be erased completely by removing pairs of 'AB' and 'BC' in multiple turns.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the relationship between counts of 'A', 'B', and 'C'.\n", "requirement analysis:\nThe problem requires determining if a string can be completely erased using specified operations. The key is to ensure the number of 'B's matches the sum of 'A's and 'C's, as each operation involves removing a 'B'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution for handling up to 1000 test cases efficiently.\n- Ensure the output format is clear and adheres to the requirements.\n- Handle edge cases such as strings with minimal length.\n- Test the solution with various input scenarios to ensure robustness.\nWe will determine if a string can be fully erased by checking if the number of 'B's is equal to the sum of 'A's and 'C's. This is because each operation involves removing one 'B' and either one 'A' or one 'C'. If this condition is met, the string can be fully erased; otherwise, it cannot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': means to remove letters from the string according to specified rules.\n    'sequence of actions': refers to the process of repeatedly applying the given operations until the string is empty.\n\n# [phrase showing quantity relationship]\n    'exactly one': indicates that each operation removes precisely one 'A' and one 'B', or one 'B' and one 'C'.\n    'sum of': implies that the number of 'B's should be equal to the combined count of 'A's and 'C's for the string to be fully erased.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string \"AB\" cannot be fully erased because it lacks a 'C' to pair with a 'B' for removal.\n    \n    s = \"BC\" = NO\n    Explanation: The string \"BC\" cannot be fully erased because it lacks an 'A' to pair with a 'B' for removal.\n    \n    s = \"ABCABCABC\" = YES\n    Explanation: The string \"ABCABCABC\" can be fully erased because the number of 'B's equals the sum of 'A's and 'C's.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle all cases correctly.\n", "requirement analysis:\nThe requirement is to determine if a string consisting of 'A', 'B', and 'C' can be fully erased using specific rules. The solution must efficiently handle up to 1000 test cases, ensuring each string is evaluated correctly. The output should be clear, indicating whether complete erasure is possible for each test case.\nrequirement pool:\n- Implement the main algorithm to check string erasure possibility\n- Optimize the solution for performance with large input sizes\n- Ensure output format is user-friendly and adheres to requirements\n- Test the solution with edge cases and varying string lengths\n- Document the solution for maintainability and future updates\nWe will implement a function that checks if a string can be fully erased by counting the occurrences of 'A', 'B', and 'C'. The key observation is that for the string to be fully erased, the number of 'B's must be equal to the sum of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C'. We will use simple arithmetic checks to determine the possibility of erasure for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': The requirement involves removing specific pairs of letters from the string until it is empty.\n    'sequence of actions': Refers to the process of repeatedly applying the allowed operations to achieve the goal.\n\n# [phrase showing quantity relationship]\n    'exactly one': Indicates that each operation removes one 'A' and one 'B', or one 'B' and one 'C'.\n    'decreased exactly by 2': Each operation reduces the string length by two characters.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string can be reduced to an empty string by removing one 'A' and one 'B', but since there are no 'C's, it cannot be fully erased.\n    \n    s = \"BC\" = NO\n    Explanation: The string can be reduced to an empty string by removing one 'B' and one 'C', but since there are no 'A's, it cannot be fully erased.\n    \n    s = \"ABC\" = YES\n    Explanation: The string can be reduced to an empty string by removing one 'A', one 'B', and one 'C'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle all cases correctly.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by repeatedly removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can be paired with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the code for readability and maintainability.\n- Provide detailed comments and documentation.\n- Consider edge cases and provide unit tests.\nWe will iterate over each test case and count the occurrences of 'A', 'B', and 'C'. The string can be fully erased if the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can be paired with either an 'A' or a 'C'. This approach ensures that we efficiently determine the possibility of erasing the string in O(n) time for each test case, where n is the length of the string.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': The requirement involves removing specific pairs of letters from the string to eventually make it empty.\n    'sequence of actions': Refers to the process of repeatedly applying the allowed operations until the string is empty.\n\n# [phrase showing quantity relationship]\n    'exactly one': Indicates that each operation removes one 'A' and one 'B', or one 'B' and one 'C'.\n    'sum of': The number of 'B's must equal the sum of 'A's and 'C's for the string to be fully erased.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If they are equal, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string \"AB\" cannot be fully erased because it lacks a 'C' to pair with a 'B'.\n    \n    s = \"ABC\" = NO\n    Explanation: The string \"ABC\" cannot be fully erased because after removing one pair, one letter will remain.\n    \n    s = \"BBB\" = NO\n    Explanation: The string \"BBB\" cannot be fully erased because there are no 'A's or 'C's to pair with the 'B's.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking the relationship between counts of 'A', 'B', and 'C'.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be fully erased by performing specific operations. The operations allow removing pairs of 'A' and 'B' or 'B' and 'C'. The key is to check if the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to determine if the string can be fully erased.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Provide clear and concise output for each test case.\n- Maintain code readability and simplicity.\n- Optimize the solution for edge cases and large inputs.\nWe will iterate over each test case and count the occurrences of 'A', 'B', and 'C'. The string can be fully erased if the number of 'B's is equal to the sum of 'A's and 'C's. This is because each 'B' can pair with either an 'A' or a 'C'. We will use a simple loop and basic arithmetic to determine the result for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'erase': The process of removing specific letters from the string.\n    'sequence of actions': A series of steps that can be taken to achieve a goal, in this case, erasing the string.\n    'fully erased': The string is empty after all possible actions are taken.\n\n# [phrase showing quantity relationship]\n    'exactly one': This means that in each action, precisely one 'A' and one 'B', or one 'B' and one 'C' must be removed.\n    'sum of': This refers to the total count of 'A's and 'C's being equal to the count of 'B's for the string to be fully erased.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n3. If they are equal, print \"YES\" (the string can be fully erased); otherwise, print \"NO\".\n\n# [edge case]\n    Test case: \"A\" = NO\n    Explanation: There is only one letter 'A', and no 'B' or 'C' to pair with, so it cannot be fully erased.\n\n    Test case: \"BC\" = NO\n    Explanation: There is one 'B' and one 'C', but no 'A' to pair with the 'B', so it cannot be fully erased.\n\n    Test case: \"ABCCBA\" = YES\n    Explanation: The string can be fully erased by pairing each 'A' with a 'B' and each 'C' with a 'B'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will naturally handle these cases.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 353, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "mutate_method": "condense_two2one", "parent_index": 227}
