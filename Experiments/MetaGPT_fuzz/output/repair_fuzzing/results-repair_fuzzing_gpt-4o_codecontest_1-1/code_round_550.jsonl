{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies, and if the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies, and if the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies. If the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has got an interesting flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life, and you have to determine what happened with his flower in the end. The flower grows as follows: if the flower isn't watered for two days in a row, it dies, while if the flower is watered in the i-th day, it grows by 1 centimeter. If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. At the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days? Consider edge cases such as the flower not being watered at all or being watered every day.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days based on watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List containing test cases, each with n followed by n integers representing watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = case[0]\n        watering_pattern = case[1:]\n        \n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                consecutive_days_without_water = 0  # Reset counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append([n] + watering_pattern)\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef calculate_flower_height(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of tuples where each tuple contains\n            the number of days (n) and the watering pattern (list of integers).\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for n, watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_watered_days = 0  # Track consecutive days the flower is watered\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                consecutive_watered_days += 1\n                if consecutive_watered_days == 1:\n                    height += 1\n                elif consecutive_watered_days == 2:\n                    height += 4  # Additional 4 cm for the second consecutive day\n            else:\n                consecutive_watered_days = 0\n                if i > 0 and watering_pattern[i-1] == 0:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_watered_days = 0\n        flower_died = False\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    # If watered on consecutive days, grow by 5 cm\n                    height += 5\n                else:\n                    # If watered on a single day, grow by 1 cm\n                    height += 1\n                consecutive_watered_days = 0\n            else:\n                consecutive_watered_days += 1\n                if consecutive_watered_days == 2:\n                    # If not watered for two consecutive days, the flower dies\n                    height = -1\n                    flower_died = True\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing watering status for each day.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(case)):\n            if case[i] == 1:\n                if i > 0 and case[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = 0\n        flower_died = False\n        \n        for day in watering_pattern:\n            if day == 1:\n                if consecutive_days_watered == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_watered += 1\n            else:\n                if consecutive_days_watered == 0:\n                    flower_died = True\n                    break\n                consecutive_days_watered = 0\n        \n        if flower_died:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(n: int, watering_pattern: List[int]) -> int:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        n (int): Number of days.\n        watering_pattern (List[int]): List indicating whether the flower is watered (1) or not (0) each day.\n\n    Returns:\n        int: The final height of the flower or -1 if the flower dies.\n    \"\"\"\n    # Initialize the flower's height to 1 cm at the start\n    height = 1\n    \n    # Iterate through each day's watering status\n    for i in range(n):\n        if watering_pattern[i] == 1:\n            # Check if the previous day was also watered\n            if i > 0 and watering_pattern[i - 1] == 1:\n                height += 5\n            else:\n                height += 1\n        else:\n            # Check if the flower dies due to two consecutive days without water\n            if i > 0 and watering_pattern[i - 1] == 0:\n                return -1\n    \n    return height\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        result = calculate_flower_height(n, watering_pattern)\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef calculate_flower_height(t: int, test_cases: list[tuple[int, list[int]]]) -> list[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[tuple[int, list[int]]]): List of test cases, each containing\n            the number of days and the watering pattern.\n\n    Returns:\n        list[int]: List of final heights of the flower for each test case or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for n, a in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_alive = True  # Track if the flower is alive\n        \n        for i in range(n):\n            if a[i] == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_alive = False\n                    break  # Flower dies if not watered for two consecutive days\n        \n        if flower_alive:\n            results.append(height)\n        else:\n            results.append(-1)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        \n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Calculate results\n    results = calculate_flower_height(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_flower_height(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[int]:\n    \"\"\"Calculate the height of the flower after n days based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of tuples where each tuple contains\n            the number of days (n) and the watering pattern (list of integers).\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for n, watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        \n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately calculate the flower's height or determine if it dies, considering the specific growth rules. Handling multiple test cases efficiently is crucial, as is ensuring the program can manage edge cases like no watering or continuous watering.\nrequirement pool:\n- Implement the flower growth calculation based on watering patterns.\n- Ensure the program can handle multiple test cases.\n- Optimize the code for performance with large input sizes.\n- Provide clear error messages for invalid inputs.\n- Include a user-friendly interface for input and output.\nWe will implement a function to simulate the growth of the flower based on the given watering pattern over n days. The function will iterate through each day's watering status, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns. The flower's height changes depending on whether it is watered or not, and it can die if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that if the flower is not watered for two consecutive days, it dies. In code, this can be implemented by checking if there are two consecutive zeros in the watering pattern.\n    'grows by 1 centimeter': This means that if the flower is watered on a given day, its height increases by 1 cm.\n    'grows by 5 centimeters': This means that if the flower is watered on two consecutive days, its height increases by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm at the start.\n    2. Iterate through each day's watering status:\n       - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n       - If the flower is watered on a given day:\n         - Check if it was also watered the previous day. If so, increase the height by 5 cm.\n         - Otherwise, increase the height by 1 cm.\n    3. Return the final height of the flower after processing all days.\n\n# [edge case]\n    Case 1: Input: 1 0; Output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Case 2: Input: 2 0 0; Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Case 3: Input: 3 1 1 0; Output: 6\n    Explanation: The flower is watered on the first two days (grows by 5 cm) and not watered on the third day (no additional growth), so the final height is 6 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately calculate the height of the flower while handling cases where the flower dies due to consecutive days without watering. The solution must efficiently process multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the solution handles edge cases such as no watering or continuous watering.\n- Optimize the code for performance given the constraints.\n- Provide detailed error messages for invalid input.\n- Enhance user interface for better input and output visualization.\nWe will implement a function to simulate the growth of a flower based on the watering pattern over a series of days. The function will iterate through each test case, updating the flower's height according to the rules provided. We will handle edge cases such as the flower not being watered at all or being watered every day. The function will return the final height of the flower or -1 if the flower dies. We will use basic Python data structures and no additional libraries are required.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower grows based on the watering pattern. It grows by 1 cm if watered on a single day, and by 5 cm if watered on consecutive days.\n\n    'flower death'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that the flower dies if it is not watered for two consecutive days. In code, this can be implemented by checking if two consecutive elements in the list are 0.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start of each test case.\n    - Iterate through the list of watering patterns for each test case.\n    - If the current day is watered (a_i = 1), check if the previous day was also watered:\n        - If yes, increase the height by 5 cm.\n        - If no, increase the height by 1 cm.\n    - If the current day is not watered (a_i = 0), check if the previous day was also not watered:\n        - If yes, set the height to -1 (flower dies) and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 1, 1] = 21\n    Explanation: The flower is watered every day, growing by 5 cm each day after the first, resulting in a total height of 21 cm.\n\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all but does not die because there is only one day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days of watering or non-watering.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The main challenge is handling edge cases where the flower might die due to consecutive days without watering. The solution must efficiently process multiple test cases and provide accurate results.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles edge cases where the flower dies due to lack of watering.\n- Optimize the solution for performance with multiple test cases.\n- Provide clear and concise output for each test case.\n- Enhance user interface for better user experience.\nWe will implement a function to calculate the flower's height based on the watering pattern over n days. The function will handle edge cases where the flower might die due to consecutive days without watering. We will use simple list operations to track the growth and death conditions efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. If watered, it grows; if not watered for two consecutive days, it dies.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (1) or not watered (0) determines its growth or death.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. This can be implemented by adding 1 to the height for each day with a 1.\n    \n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm. This can be implemented by adding 5 to the height for each pair of consecutive days with a 1.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate over each test case:\n   - For each day in the test case, check if the flower is watered (1) or not (0).\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on two consecutive days, increase the height by 5 cm.\n3. Print the final height for each test case.\n\n# [edge case] \n    Case 1: n = 3, watering pattern = [0, 0, 0] => Output: -1\n    Explanation: The flower is not watered for three consecutive days, so it dies.\n\n    Case 2: n = 4, watering pattern = [1, 1, 1, 1] => Output: 16\n    Explanation: The flower is watered every day. It grows by 5 cm on each pair of consecutive days (3 pairs), starting from a height of 1 cm.\n\n    Case 3: n = 2, watering pattern = [0, 1] => Output: 2\n    Explanation: The flower is watered on the second day only, so it grows by 1 cm from its initial height of 1 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts growth accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while considering scenarios where the flower may die due to neglect. The solution must handle multiple test cases and provide clear output for each case.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering patterns.\n- Ensure the program handles edge cases such as consecutive days without watering.\n- Optimize the solution for performance given the constraints.\n- Provide clear and concise output for each test case.\n- Enhance user experience with detailed error messages for invalid inputs.\nWe will implement a function to simulate the growth of a flower based on watering patterns over n days. The function will iterate through the watering pattern, updating the flower's height according to the rules provided. We will use simple list operations and conditionals to handle the growth logic and edge cases. The solution will be optimized for performance given the constraints, and will provide clear output for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not. If watered consecutively, it grows more.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (1) or not watered (0).\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies.\n    Implementation: Check for two consecutive zeros in the watering pattern.\n\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    Implementation: Increment height by 1 when a 1 is encountered.\n\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm.\n    Implementation: Increment height by 5 if two consecutive 1s are found.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start.\n2. Iterate through each test case:\n   - For each day in the watering pattern:\n     - If the flower is not watered for two consecutive days, set height to -1 and break.\n     - If watered on a single day, increase height by 1.\n     - If watered on consecutive days, increase height by 5.\n3. Output the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die.\n\n    Test case: 3\n    Input: 1 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 4\n    Input: 1 1 0 1\n    Output: 12\n    Explanation: The flower grows by 5 cm on the first two days, then by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on specific watering rules over a series of days. The main challenge is to accurately calculate the flower's height while handling cases where the flower dies due to lack of water. The solution must efficiently process multiple test cases and provide clear output for each.\nrequirement pool:\n- Implement the growth calculation logic based on watering rules.\n- Handle cases where the flower dies due to consecutive days without water.\n- Optimize the solution to handle the maximum number of test cases efficiently.\n- Ensure the output format is clear and matches the specified requirements.\n- Consider edge cases such as no watering or watering every day.\nWe will implement a function that simulates the growth of a flower based on the given watering rules. The function will iterate through each test case, track the height of the flower, and check for consecutive days without watering to determine if the flower dies. We will use simple list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not, with specific rules for consecutive watering days and consecutive non-watering days.\n\n    'dies'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a condition where the flower dies if it is not watered for two consecutive days. In code, this can be implemented by checking if two consecutive elements in the list are 0.\n    \n    'grows by 1 centimeter': This indicates the flower grows by 1 cm if watered on a single day. In code, this can be implemented by incrementing the height by 1 when a 1 is encountered in the list.\n    \n    'grows by 5 centimeters': This indicates the flower grows by 5 cm if watered on two consecutive days. In code, this can be implemented by incrementing the height by 5 when two consecutive 1s are encountered in the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start of each test case.\n    - Iterate through each day's watering status:\n      - If the current day and the previous day are both watered (both are 1), increase the height by 5 cm.\n      - If only the current day is watered, increase the height by 1 cm.\n      - If two consecutive days are not watered (both are 0), set the height to -1 and break out of the loop as the flower dies.\n    - Return the final height for each test case.\n\n# [edge case]\n    Case 1: Input: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Case 2: Input: [1, 1, 1, 1] = 21\n    Explanation: The flower is watered every day, growing by 5 cm each day after the first, resulting in a total height of 21 cm.\n\n    Case 3: Input: [0] = 1\n    Explanation: The flower is not watered on the only day, but it does not die because it requires two consecutive days without water to die.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive watering and non-watering days.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately calculate the flower's height while considering the possibility of it dying if not watered for two consecutive days. The solution must handle multiple test cases and provide results efficiently.\nrequirement pool:\n- Implement the flower growth calculation logic\n- Handle the case where the flower dies due to lack of water\n- Optimize the solution for performance with multiple test cases\n- Ensure the solution handles edge cases correctly\n- Provide detailed error messages for invalid inputs\nWe will implement a function to simulate the growth of a flower over a series of days based on the watering pattern provided. The function will iterate through each test case, checking the watering pattern for consecutive days without water, which results in the flower dying. If the flower is watered, it will grow according to the rules specified. The function will handle multiple test cases efficiently and return the final height of the flower or -1 if it dies. We will use basic Python data structures and control flow to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, by 5 cm if watered on consecutive days, and dies if not watered for two consecutive days.\n\n    'test cases'\n    Explanation: The requirement involves multiple test cases, each with its own sequence of watering days, and the solution must handle all test cases in one execution.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates a sequence of two consecutive days. In code, this can be checked using a loop to compare the current day and the previous day.\n    \n    'grows by 1 centimeter': This means the flower's height increases by 1 cm when watered on a single day. In code, this can be implemented by incrementing the height variable by 1.\n    \n    'grows by 5 centimeters': This means the flower's height increases by 5 cm when watered on consecutive days. In code, this can be implemented by incrementing the height variable by 5 when two consecutive days are watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on consecutive days, increase the height by 5 cm.\n3. After processing all days in a test case, store the final height or -1 if the flower died.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case with no watering at all: \n    Input: 1\n           0\n    Output: 1\n    Explanation: The flower starts at 1 cm and does not die because it is not unwatered for two consecutive days.\n\n    Test case with watering every day:\n    Input: 3\n           1 1 1\n    Output: 16\n    Explanation: The flower grows by 5 cm on each consecutive day after the first, resulting in a total height of 16 cm after three days.\n\n    Test case with exactly two consecutive unwatered days:\n    Input: 4\n           1 0 0 1\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for two consecutive unwatered days and adjusting growth based on watering patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the flower's height while handling edge cases such as consecutive days without watering leading to the flower's death. The solution must be efficient to handle up to 100 test cases with up to 100 days each.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering patterns.\n- Ensure the program handles edge cases where the flower dies due to lack of watering.\n- Optimize the solution to handle multiple test cases efficiently.\n- Provide clear output format as specified in the requirements.\n- Enhance user experience with informative error messages for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the watering pattern over n days. The function will iterate through each day's watering status and update the flower's height accordingly. We will use simple conditional checks to determine if the flower grows or dies. The solution will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. If watered consecutively, it grows more.\n\n    'flower death'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the watering pattern.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height when a 1 is encountered.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1. Implemented by adding 5 to the height when two consecutive 1s are encountered.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm at the start of each test case.\n    2. Iterate through each day's watering status:\n        - If the current day and the previous day are both watered (1), increase height by 5 cm.\n        - If only the current day is watered, increase height by 1 cm.\n        - If two consecutive days are not watered (0), set height to -1 and break out of the loop.\n    3. Return the final height for each test case.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die. The height remains 1 cm.\n\n    Test case: [1, 1, 1, 1] = 16\n    Explanation: The flower is watered every day, growing by 5 cm each day after the first, resulting in a total height of 16 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies, resulting in a height of -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower is not watered at all or is watered every day.\n", "requirement analysis:\nThe task requires simulating the growth of a flower based on watering patterns over a series of days. The main challenge is to accurately calculate the flower's height while considering the rules for growth and death. Edge cases such as no watering or continuous watering need to be handled effectively. The output must be formatted correctly to ensure clarity and correctness.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering patterns.\n- Ensure the program handles edge cases like no watering or continuous watering.\n- Optimize the code for performance given the constraints.\n- Provide clear and concise output following the specified format.\n- Include comments and documentation for better understanding and maintenance.\nWe will implement a function to simulate the growth of a flower based on the given watering pattern over a series of days. The function will iterate through each day's watering status, updating the flower's height according to the rules provided. We will handle edge cases such as no watering or continuous watering by checking the conditions for the flower's death or accelerated growth. The function will return the final height of the flower or -1 if the flower dies. We will use basic Python data structures and control flow to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. If watered consecutively, it grows more; if not watered for two consecutive days, it dies.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (1) or not watered (0), which determines the growth or death of the flower.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive 0s in the watering pattern.\n    \n    'grows by 1 centimeter': On a day when the flower is watered, it grows by 1 cm. This can be implemented by adding 1 to the height for each day with a 1.\n    \n    'grows by 5 centimeters': If watered on consecutive days, it grows by 5 cm instead of 1 cm. This can be implemented by checking if both the current and previous day are 1, then adding 5 to the height.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize the flower's height to 1 cm at the start.\n    2. Iterate through each test case:\n       a. For each day in the test case, check if the flower is watered.\n       b. If watered (1), check if the previous day was also watered:\n          - If yes, increase height by 5 cm.\n          - If no, increase height by 1 cm.\n       c. If not watered (0), check if the previous day was also not watered:\n          - If yes, set height to -1 (flower dies) and break out of the loop.\n    3. After processing all days, store the final height or -1 for each test case.\n    4. Output the results for all test cases.\n\n# [edge case] \n    Case 1: n = 1, a = [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Case 2: n = 2, a = [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Case 3: n = 3, a = [1, 1, 0] = 6\n    Explanation: The flower is watered on the first two days (grows by 5 cm), and not watered on the third day, so it remains alive with a height of 6 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower is not watered at all or is continuously watered.\n", "requirement analysis:\nThe task requires implementing a function to simulate the growth of a flower over a series of days based on watering patterns. The function must handle multiple test cases, correctly calculate the flower's height, and determine if the flower dies due to consecutive days without water. Edge cases such as no watering or watering every day must be considered.\nrequirement pool:\n- Implement the main logic to calculate flower height.\n- Handle edge cases where the flower is not watered at all or watered every day.\n- Optimize the solution for performance with up to 100 test cases.\n- Ensure the solution is easy to understand and maintain.\n- Provide detailed comments and documentation.\nWe will implement a function to simulate the growth of a flower over a series of days based on watering patterns. The function will iterate through each test case, track the flower's height, and check for consecutive days without watering to determine if the flower dies. We will use simple list operations and conditionals to achieve this, ensuring the solution is efficient and easy to understand.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. If watered consecutively, it grows more.\n\n    'consecutive days'\n    Explanation: The flower's growth or death depends on consecutive days of watering or not watering.\n\n# [phrase showing quantity relationship]\n    'two days in a row': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if two consecutive elements in the list are 0.\n\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height when a 1 is encountered.\n\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm. Implemented by adding 5 to the height when two consecutive 1s are encountered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is watered (a_i = 1):\n     - Check if the previous day was also watered (a_(i-1) = 1), if so, increase height by 5 cm.\n     - Otherwise, increase height by 1 cm.\n   - If the flower is not watered (a_i = 0):\n     - Check if the previous day was also not watered (a_(i-1) = 0), if so, set height to -1 (flower dies) and break out of the loop.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die and remains at its initial height of 1 cm.\n\n    Test case: [1, 1, 1, 1] = 16\n    Explanation: The flower is watered every day, growing by 5 cm each day after the first, resulting in a total height of 16 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies and the output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and handles single-day scenarios correctly.\n", "requirement analysis:\nThe requirements focus on calculating the flower's height based on watering patterns over n days. The key challenge is handling edge cases where the flower dies due to consecutive days without watering. The solution must efficiently process multiple test cases and provide accurate results.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program handles edge cases where the flower dies due to lack of watering.\n- Optimize the solution for large inputs to maintain efficiency.\n- Provide clear and concise output for each test case.\n- Enhance user experience with intuitive input and output handling.\nWe will implement a function to calculate the flower's height based on the watering pattern over n days. The function will handle edge cases where the flower dies due to consecutive days without watering. We will use simple list operations to efficiently process multiple test cases and provide accurate results.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern. It grows by 1 cm if watered on a single day, and by 5 cm if watered on consecutive days. If not watered for two consecutive days, it dies.\n\n# [phrase showing quantity relationship]\n    'two days in a row': This indicates that if the flower is not watered for two consecutive days, it dies. In code, this can be implemented by checking if there are two consecutive zeros in the list.\n    'grows by 1 centimeter': This means the flower increases its height by 1 cm when watered on a single day. In code, this can be implemented by adding 1 to the height when a 1 is encountered.\n    'grows by 5 centimeters': This means the flower increases its height by 5 cm when watered on consecutive days. In code, this can be implemented by adding 5 to the height when two consecutive 1s are encountered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - If the flower is watered (a_i = 1), check if it was also watered the previous day:\n          - If yes, increase height by 5 cm.\n          - If no, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0), check if it was also not watered the previous day:\n          - If yes, set height to -1 (flower dies) and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die. The height remains 1 cm.\n    \n    Test case: [1, 1, 1] = 16\n    Explanation: The flower is watered every day, growing by 5 cm each consecutive day after the first. Height = 1 + 5 + 5 + 5 = 16 cm.\n    \n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies. The output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower dies or grows based on watering patterns.\n"], "scores": [], "pass_results": [true, true, false, true, false, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 550, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "add_1_sentence_at_end", "parent_index": 120}
