{"name": "1598_B. Groups", "description": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "tags": ["brute force", "implementation"], "difficulty": 8, "id": 1598, "sample_io": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}], "test_list": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 1 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n-1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 0 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 1 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 0 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n-1 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 1\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 1 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n1 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 1 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 0 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 1 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 1 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 1\n0 0 1 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 0 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 1 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}], "task_id": "codecontest/59", "prompt": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday). The days chosen for the groups must be different, they cannot overlap. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "repair_prompt": ["n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday). The days chosen for the groups must be different, they cannot overlap. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday). It is important that the days chosen for the groups are different from each other. They cannot overlap, so the same day cannot be chosen for both groups. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups, each attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday) on different days without overlap. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days."], "completions": ["from typing import List\n## main.py\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with different convenient days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students and their convenient days.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for n, preferences in test_cases:\n        # Iterate over all pairs of days\n        possible = False\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                # Count students who can attend on day1 and day2\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                for student in preferences:\n                    if student[day1] == 1:\n                        count_day1 += 1\n                    if student[day2] == 1:\n                        count_day2 += 1\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                \n                # Check if we can form two groups of equal size\n                if count_day1 >= n // 2 and count_day2 >= n // 2 and (count_day1 + count_day2 - both_days) >= n:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Interface using input() and print()\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        preferences = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, preferences))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport itertools\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with non-overlapping lesson days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for preferences in test_cases:\n        n = len(preferences)\n        half_n = n // 2\n        possible = False\n        \n        # Generate all pairs of days\n        for day1, day2 in itertools.combinations(range(5), 2):\n            count_day1 = sum(student[day1] for student in preferences)\n            count_day2 = sum(student[day2] for student in preferences)\n            \n            # Check if both days have at least half_n students available\n            if count_day1 >= half_n and count_day2 >= half_n:\n                group1 = []\n                group2 = []\n                \n                # Try to form two groups\n                for student in preferences:\n                    if student[day1] and len(group1) < half_n:\n                        group1.append(student)\n                    elif student[day2] and len(group2) < half_n:\n                        group2.append(student)\n                \n                # Check if both groups are formed successfully\n                if len(group1) == half_n and len(group2) == half_n:\n                    possible = True\n                    break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        preferences = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(preferences)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two equal groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing a list of student availability.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1:\n                        count_day1 += 1\n                    if student[day2] == 1:\n                        count_day2 += 1\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                \n                # Check if we can split students into two groups of size n/2\n                if count_day1 >= half_n and count_day2 >= half_n and (count_day1 + count_day2 - both_days) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in case:\n                    if student[day1] == 1:\n                        count_day1 += 1\n                    if student[day2] == 1:\n                        count_day2 += 1\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                \n                # Check if it's possible to divide students into two groups\n                if count_day1 >= half_n and count_day2 >= half_n and (count_day1 + count_day2 - both_days) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        preferences = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(preferences)\n    \n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                count_both = 0\n                \n                # Count students available on day1, day2, and both\n                for student in availability:\n                    if student[day1] == 1:\n                        count_day1 += 1\n                    if student[day2] == 1:\n                        count_day2 += 1\n                    if student[day1] == 1 and student[day2] == 1:\n                        count_both += 1\n                \n                # Check if a valid split is possible\n                if count_day1 >= half_n and count_day2 >= half_n and (count_day1 + count_day2 - count_both) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing\n            a list of student availability for each day.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                # Count students available on day1 and day2\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                for student in availability:\n                    if student[day1] == 1:\n                        count_day1 += 1\n                    if student[day2] == 1:\n                        count_day2 += 1\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                \n                # Check if we can form two groups of equal size\n                if count_day1 >= half_n and count_day2 >= half_n and (count_day1 + count_day2 - both_days) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print the results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing a list of students' availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if division is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in case:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can form two groups of equal size\n                if count_day1 + both_days >= half_n and count_day2 + both_days >= half_n:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students available on each day and both days\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can split students into two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes\n    attending lessons on different convenient days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing\n            a list of students' availability for five days.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if the\n        division is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        possible = False\n        \n        # Iterate over all pairs of days (i, j) where i != j\n        for i in range(5):\n            for j in range(i + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                both_days_count = 0\n                \n                # Check each student's availability\n                for student in case:\n                    if student[i] == 1 and student[j] == 1:\n                        both_days_count += 1\n                    elif student[i] == 1:\n                        group1_count += 1\n                    elif student[j] == 1:\n                        group2_count += 1\n                \n                # Calculate the number of students that can be assigned to each group\n                if group1_count + both_days_count >= n // 2 and group2_count + both_days_count >= n // 2:\n                    if group1_count + group2_count + both_days_count == n:\n                        possible = True\n                        break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two equal groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student preferences.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    for preferences in test_cases:\n        n = len(preferences)\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in preferences:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can form two equal groups\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        preferences = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(preferences)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe requirements focus on dividing students into two equal groups with different lesson days, ensuring each student can attend on their convenient days. The solution must handle multiple test cases efficiently and provide a clear 'YES' or 'NO' output based on feasibility.\nrequirement pool:\n- Efficiently divide students into two equal groups.\n- Select two different days for lessons without overlap.\n- Ensure each student can attend on their convenient day.\n- Handle multiple test cases efficiently.\n- Provide clear output for each test case.\nWe will iterate over all possible pairs of days and check if it's possible to divide the students into two groups such that each group can attend on one of the chosen days. We will use a greedy approach to count the number of students who can attend on each day and check if we can form two equal groups. The solution will efficiently handle multiple test cases by iterating over the days and using simple counting operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which implies that they can be divided into two equal groups.\n    'different': The days chosen for the groups must be different, meaning no overlap in the days.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Both groups should contain the same number of students, meaning n/2 students per group.\n    'at least one': Each student has at least one convenient day, ensuring that every student can attend on at least one day.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible pairs of days (Monday to Friday).\n    2. For each pair, count the number of students who can attend on each day.\n    3. Check if it's possible to divide the students into two groups of equal size such that each group can attend on one of the chosen days.\n    4. If a valid configuration is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: \n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, each having a different convenient day, it's impossible to form two groups with different days.\n\n    Case 2:\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: Two groups can be formed with the first two students attending on Monday and the last two on Wednesday.\n\n    Case 3:\n    Input: 6\n           1 0 0 0 0\n           1 0 0 0 0\n           0 1 0 0 0\n           0 1 0 0 0\n           0 0 1 0 0\n           0 0 1 0 0\n    Output: YES\n    Explanation: Three pairs can be formed with different days for each pair.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs of days and checking for possible group formations inherently handles these scenarios.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups with non-overlapping lesson days based on their convenience. The solution must efficiently handle multiple test cases and ensure that each student can attend lessons on their preferred days. The challenge lies in optimizing the grouping and scheduling process while adhering to constraints.\nrequirement pool:\n- Efficiently divide students into two equal groups.\n- Ensure non-overlapping lesson days for groups.\n- Handle multiple test cases efficiently.\n- Optimize scheduling based on student convenience.\n- Provide prompt notification of lesson schedules.\nWe will use a combinatorial approach to check all possible pairs of days and see if students can be divided into two equal groups with non-overlapping lesson days. We will utilize Python's itertools library to generate combinations of days and check the feasibility of each combination.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': means the number of students is divisible by 2, allowing for equal division into two groups.\n    'convenient': means the days a student can attend, indicated by 1 in the input.\n\n# [phrase showing quantity relationship]\n    'two groups': means dividing students into exactly two groups.\n    'equal sizes': means each group must have the same number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Use combinations to generate all possible pairs of days.\n    3. For each pair of days, check if students can be divided into two groups with equal sizes.\n    4. Ensure that the chosen days for the groups are different and convenient for all students in their respective groups.\n    5. If a valid configuration is found, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: Only one student can attend on each day, making it impossible to form two groups.\n\n    Test case with all students available on the same day:\n    Input: 4\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n    Output: YES\n    Explanation: Any two different days can be chosen since all students are available every day.\n\n    Test case with no possible division:\n    Input: 4\n           1 0 0 0 0\n           0 0 0 0 1\n           0 0 0 0 1\n           0 0 0 0 1\n    Output: NO\n    Explanation: The first student can only attend on Monday, while others can only attend on Friday, making division impossible.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if any day has at least n/2 students available.\n        - Ensure that two different days can be chosen for the groups.\n        - Use combinations to explore all possible pairs of days and validate group formation.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for different days of the week. The solution must ensure that the chosen days for each group do not overlap and that all students can attend on their group's designated day. The constraints include handling multiple test cases efficiently and ensuring the total number of students does not exceed 100,000.\nrequirement pool:\n- Efficiently divide students into two equal groups based on availability.\n- Ensure chosen days for groups do not overlap.\n- Handle multiple test cases efficiently.\n- Provide clear output for each test case.\n- Consider edge cases where distribution is not possible.\nWe will use a combinatorial approach to check if it's possible to divide students into two equal groups based on their availability for different days of the week. We will iterate over all pairs of days and check if we can split the students into two groups such that each group can attend on one of the chosen days. The solution will leverage efficient data structures to handle multiple test cases and ensure scalability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number of students'\n    Explanation: This means that the number of students can be evenly divided into two groups without any remainder.\n\n    'two different week days'\n    Explanation: The two groups must attend classes on different days, meaning no overlap in the chosen days for each group.\n\n    'convenient day'\n    Explanation: A day is convenient for a student if they have marked it as 1 in their availability list.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This means each group must have exactly n/2 students.\n    Implementation: Ensure that when dividing students into two groups, each group contains exactly n/2 students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students `n` and their availability matrix.\n2. Iterate over all pairs of days (i, j) where i != j.\n3. For each pair of days, count how many students can attend on day i and how many can attend on day j.\n4. Check if it's possible to split the students into two groups of size n/2 such that one group can attend on day i and the other on day j.\n5. If such a split is possible for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    1. Input: 2\n       1 0 0 0 0\n       0 1 0 0 0\n       Expected Output: NO\n       Explanation: There are only two students, and they have no common convenient days to form two groups.\n\n    2. Input: 4\n       1 1 0 0 0\n       1 1 0 0 0\n       0 0 1 1 1\n       0 0 1 1 1\n       Expected Output: YES\n       Explanation: The first two students can attend on either Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday.\n\n    3. Input: 6\n       1 0 0 0 0\n       1 0 0 0 0\n       1 0 0 0 0\n       0 1 0 0 0\n       0 1 0 0 0\n       0 1 0 0 0\n       Expected Output: YES\n       Explanation: The first three students can attend on Monday, and the last three can attend on Tuesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking for possible splits inherently handles these cases.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups with non-overlapping lesson days. Each student must be able to attend lessons on their convenient days. The solution should efficiently handle multiple test cases and ensure optimal scheduling.\nrequirement pool:\n- Efficiently divide students into two equal groups.\n- Ensure lesson days do not overlap between groups.\n- Optimize scheduling based on student convenience.\n- Handle multiple test cases efficiently.\n- Provide clear output for each test case.\nWe will use a combinatorial approach to check all possible pairs of days and see if we can divide the students into two equal groups such that each group can attend on one of the chosen days. We will iterate over all pairs of days and for each pair, count the number of students who can attend on each day. If we can find a pair of days where the number of students who can attend on each day is at least half of the total number of students, then it is possible to divide the students into two groups. This approach is efficient given the constraints and ensures that we handle multiple test cases effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which implies they can be divided into two equal groups.\n    'different': The days chosen for the groups must be different, meaning no overlap in days.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Each group must have the same number of students, which is n/2.\n    'at least half': For a pair of days to be valid, each day must have at least n/2 students who can attend.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Iterate over all pairs of days (Monday to Friday).\n    3. For each pair, count the number of students who can attend on each day.\n    4. Check if both days have at least n/2 students who can attend.\n    5. If such a pair is found, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: There are only two students, and they cannot attend on the same day.\n\n    Test case with all students available on different days:\n    4\n    1 0 0 0 0\n    0 1 0 0 0\n    0 0 1 0 0\n    0 0 0 1 0\n    = NO\n    Explanation: Each student is available on a different day, making it impossible to form two equal groups.\n\n    Test case with all students available on the same day:\n    4\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    = YES\n    Explanation: All students can attend on any day, so any two different days can be chosen.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking pairs of days and counting students will naturally handle these scenarios.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different days of the week. The solution must ensure that no two groups attend on the same day and that each student is available on the chosen day for their group. The constraints are significant, with up to 10,000 test cases and a total of 100,000 students, necessitating an efficient algorithm.\nrequirement pool:\n- Develop an efficient algorithm to handle up to 10,000 test cases.\n- Ensure the solution can process up to 100,000 students in total.\n- Optimize the solution for quick execution and minimal resource usage.\n- Provide clear and concise output for each test case.\n- Consider edge cases where multiple distributions are possible.\nWe will use a combinatorial approach to check if it's possible to divide students into two groups with equal sizes based on their availability. We will iterate over all pairs of days and check if we can split the students into two groups such that each group can attend on one of the chosen days. This involves checking the intersection of students available on each pair of days and ensuring that the intersection size is at least half of the total number of students. We will use efficient data structures to handle the constraints and ensure quick execution.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which is crucial for dividing them into two equal groups.\n    'different days': The two groups must attend lessons on different days, meaning no overlap in chosen days.\n    'convenient': Each student must be able to attend the lesson on the day chosen for their group.\n\n# [phrase showing quantity relationship]\n    'two groups': The students need to be divided into exactly two groups.\n    'equal sizes': Each group must have the same number of students, which is n/2 since n is even.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five days.\n3. Iterate over all pairs of days (i, j) where i \u2260 j.\n4. For each pair of days, count how many students can attend on day i and how many can attend on day j.\n5. Check if it's possible to split the students into two groups of size n/2 such that one group can attend on day i and the other on day j.\n6. If such a split is possible for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    2\n    1 0 0 0 1\n    0 1 0 0 1\n    = NO\n    Explanation: With only two students and their availability, it's impossible to find two different days that satisfy the conditions.\n\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    = YES\n    Explanation: The first two students can attend on either Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. A valid split is possible.\n\n    6\n    1 0 0 0 1\n    1 0 0 0 1\n    0 1 0 0 1\n    0 1 0 0 1\n    0 0 1 1 0\n    0 0 1 1 0\n    = NO\n    Explanation: Although there are multiple students with overlapping availability, no valid split into two groups with different days is possible.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking for a valid split inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different days of the week. The solution must ensure that no two groups attend on the same day and that each student is available on the chosen day for their group. The constraints involve handling up to 10,000 test cases efficiently, with a total of up to 100,000 students across all test cases.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each group attends on different days.\n- Divide students into two equal groups.\n- Optimize for large input sizes.\n- Provide clear output for each test case.\nWe will iterate over each test case and for each test case, we will check all possible pairs of days to see if we can divide the students into two groups such that each group can attend on one of the chosen days. We will use a combination of set operations and counting to efficiently determine if a valid division is possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which means they can be divided into two equal groups.\n    'different days': The days chosen for the groups must be different, meaning no overlap in the days selected for each group.\n    'convenient': Each student must be able to attend the lesson on the day chosen for their group.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Both groups must have the same number of students, which is n/2 for each group.\n    'at least one': Each student has at least one day they can attend, ensuring that there is always a possibility for scheduling.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over each test case.\n    2. For each test case, iterate over all possible pairs of days (Monday to Friday).\n    3. For each pair of days, check if it's possible to divide the students into two groups such that:\n        - Each group has n/2 students.\n        - Each student in a group can attend on the chosen day for their group.\n    4. Use set operations to efficiently check the distribution of students across the days.\n    5. If a valid division is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected output: NO\n    Explanation: There are only two students, and they cannot attend on different days.\n\n    Test case with all students available on all days:\n    4\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    Expected output: YES\n    Explanation: Any two different days can be chosen since all students are available every day.\n\n    Test case with overlapping availability:\n    4\n    1 0 0 0 0\n    0 1 0 0 0\n    0 0 1 0 0\n    0 0 0 1 0\n    Expected output: NO\n    Explanation: Each student is only available on one unique day, making it impossible to form two groups with different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all pairs of days and using set operations will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for lessons on different days of the week. The solution must ensure that each student can attend lessons on a convenient day, and the groups must be balanced in size. The constraints include handling multiple test cases efficiently and ensuring the total number of students does not exceed 100,000.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure equal group distribution for each test case.\n- Optimize scheduling to maximize student convenience.\n- Provide clear output indicating if the division is possible.\n- Handle edge cases where no valid scheduling is possible.\nWe will use a combinatorial approach to check all possible pairs of days and see if we can divide the students into two equal groups such that each group can attend on one of the chosen days. We will iterate over all pairs of days and for each pair, count the number of students who can attend on each day. If we can find a pair of days where the number of students who can attend on each day is at least half of the total number of students, then it is possible to divide the students into two groups. This approach is efficient given the constraints and ensures that we handle up to 10,000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be divided into two equal groups.\n    'convenient': Each student has specified which days are convenient for them to attend lessons.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Both groups must have the same number of students, which is half of the total number of students.\n    'at least half': For a pair of days to be valid, the number of students who can attend on each day must be at least half of the total number of students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all pairs of days (Monday to Friday).\n    2. For each pair, count the number of students who can attend on each day.\n    3. Check if both counts are at least half of the total number of students.\n    4. If such a pair is found, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: Each student can only attend on one specific day, making it impossible to divide them into two groups attending on different days.\n\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: The first two students can attend on Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. We can divide them into two groups attending on different days.\n\n    Input: 6\n           1 0 0 0 1\n           1 0 0 0 1\n           0 1 1 0 0\n           0 1 1 0 0\n           1 0 0 1 0\n           1 0 0 1 0\n    Output: YES\n    Explanation: We can divide the students into two groups where one group attends on Monday and the other on Wednesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible pairs of days and checks if they meet the requirements.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for lessons on different days of the week. The solution must efficiently handle multiple test cases and ensure that each student can attend lessons on convenient days. The constraints include ensuring equal group sizes and selecting different days for each group without overlap.\nrequirement pool:\n- Efficiently divide students into two equal groups based on availability.\n- Select two different days for lessons without overlap.\n- Ensure each student can attend lessons on convenient days.\n- Handle up to 10,000 test cases efficiently.\n- Provide clear output indicating if a valid schedule is possible.\nWe will use a combinatorial approach to check all possible pairs of days and attempt to divide students into two groups based on their availability. The key challenge is ensuring that each group has equal size and that the chosen days are convenient for all students in their respective groups. We will leverage Python's built-in data structures like lists and sets to efficiently manage and check student availability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which implies that they can be divided into two equal groups.\n    'convenient': Each student has specific days they can attend, marked by 1 in their survey.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Both groups must have the same number of students, which is n/2 for each group.\n    'different days': The two groups must attend lessons on different days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Iterate over all pairs of days (Monday to Friday) to check if it's possible to divide students into two groups.\n    3. For each pair of days, count how many students can attend on each day.\n    4. Check if it's possible to split the students into two groups of equal size such that each group attends on one of the chosen days.\n    5. If a valid configuration is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: It's impossible to divide two students into two groups attending different days.\n\n    Test case with all students available on the same day:\n    Input: 4\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n    Output: YES\n    Explanation: Any two different days can be chosen since all students are available every day.\n\n    Test case with no possible division:\n    Input: 4\n           1 0 0 0 0\n           0 0 0 0 1\n           0 0 0 0 1\n           0 0 0 0 1\n    Output: NO\n    Explanation: The first student can only attend Monday, while others can only attend Friday, making it impossible to divide them into two groups attending different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all pairs of days and attempting to divide students will naturally handle these scenarios.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for lessons on different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend lessons on their convenient days. The challenge lies in finding two distinct days where students can be evenly split into two groups.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student can attend lessons on their convenient days.\n- Optimize the solution for large input sizes.\n- Provide clear and concise output for each test case.\n- Consider multiple possible distributions of students.\nWe will use a combinatorial approach to check all possible pairs of days and attempt to divide students into two groups based on their availability. The key is to ensure that each group can attend lessons on different days without overlap and that each student finds the chosen day convenient. We will leverage efficient data structures to handle the constraints and optimize for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be perfectly divided into two equal groups.\n    'convenient': A day is convenient for a student if they have marked it as 1 in their availability list.\n    'different days': The two groups must attend lessons on different days of the week.\n\n# [phrase showing quantity relationship]\n    'two groups': The students need to be divided into exactly two groups.\n    'equal sizes': Each group must have the same number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five days.\n3. Iterate over all pairs of days (i, j) where i != j.\n4. For each pair of days, try to divide the students into two groups:\n   - Group 1 attends on day i.\n   - Group 2 attends on day j.\n5. Check if it's possible to assign exactly n/2 students to each group such that each student in a group finds the group's day convenient.\n6. If such a division is possible for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: \n    Input: \n    2\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected Output: NO\n    Explanation: There is no way to divide the students into two groups with different convenient days.\n\n    Case 2:\n    Input:\n    2\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 0\n    0 0 1 1 0\n    Expected Output: YES\n    Explanation: The first two students can attend on Monday, and the last two on Wednesday.\n\n    Case 3:\n    Input:\n    2\n    6\n    1 0 1 0 1\n    1 0 1 0 1\n    0 1 0 1 0\n    0 1 0 1 0\n    1 0 1 0 1\n    0 1 0 1 0\n    Expected Output: YES\n    Explanation: Three students can attend on Monday and three on Tuesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking for possible group divisions inherently handles edge cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups with different lesson days, ensuring each student can attend on their group's chosen day. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. The algorithm should consider all possible day combinations and student distributions to determine feasibility.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student can attend on their group's chosen day.\n- Optimize the algorithm for quick execution.\n- Provide clear output for each test case.\n- Consider multiple possible distributions of students.\nWe will iterate over all possible pairs of days and check if it's possible to divide the students into two groups such that each group can attend on one of the chosen days. We will use a greedy approach to count the number of students who can attend on each day and check if we can form two equal groups. The solution will be efficient enough to handle the constraints using simple counting and logical checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for equal division into two groups.\n    'convenient': Each student has specific days they can attend, which must be considered when forming groups.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Both groups must have the same number of students, meaning n/2 students per group.\n    'different': The days chosen for the groups must be distinct, meaning no overlap in days.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible pairs of days (Monday to Friday).\n    2. For each pair, count the number of students who can attend on each day.\n    3. Check if it's possible to divide the students into two equal groups such that each group can attend on one of the chosen days.\n    4. If a valid configuration is found, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: \n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, it's impossible to find two different days that both students can attend.\n\n    Case 2:\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: Two groups can be formed with the first two students attending on Monday and the last two on Wednesday.\n\n    Case 3:\n    Input: 6\n           1 0 0 0 1\n           1 0 0 0 1\n           0 1 1 0 0\n           0 1 1 0 0\n           1 0 0 1 0\n           1 0 0 1 0\n    Output: YES\n    Explanation: Groups can be formed with the first four students attending on Monday and the last two on Wednesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs of days and checking for possible group formations inherently handles edge cases.\n"], "scores": [], "pass_results": [false, true, false, true, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 555, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "mutate_method": "expand_one2two", "parent_index": 291}
