{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order. He then ended up with an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order. He then ended up with an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array and sorted them in non-decreasing order. He then ended up with an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order and then ended up with an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the restored original array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        \n        # Calculate the other two elements\n        a2 = sum_a - sum_two_largest\n        a3 = sum_two_largest - a1\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        sum_all = b[-1]\n        # The smallest number in b is one of the original numbers in a\n        smallest = b[0]\n        # Deduce the other two numbers using the properties of sums\n        # b[1] is the sum of the smallest and one other number\n        # b[2] is the sum of the smallest and the other remaining number\n        second = b[1] - smallest\n        third = b[2] - smallest\n        results.append((smallest, second, third))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array.\n    # The largest number in b is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing the three integers of the original array for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The largest element in b is the sum of all three integers\n        sum_all = b[-1]\n        # Deduce the other two integers\n        a2 = b[1]  # The second smallest element is another integer\n        a3 = sum_all - a1 - a2  # Calculate the third integer\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem statement, the smallest element in b is a1,\n        # the second smallest is a2, and the largest element is a1 + a2 + a3.\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[-1] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a using the properties of sorted subsequences\n        a1 = b[0]  # The smallest element in b corresponds to the smallest element in a\n        a3 = b[-1] - a1  # The largest element in b minus a1 gives the largest element in a\n        a2 = b[-2] - a3  # The second largest element in b minus a3 gives the second element in a\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_array(num_cases, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in the sorted array b are the individual elements of the original array a.\n    a1 = b[0]\n    a2 = b[1]\n    # The largest number in array b is the sum of all three elements of array a.\n    a3 = b[6] - (a1 + a2)\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in the sorted array are the individual elements of the original array.\n        a1, a2, a3 = case[0], case[1], case[2]\n        # The largest number in the sorted array is the sum of all three elements of the original array.\n        sum_all = case[6]\n        \n        # We can deduce the original array by checking the sum of the smallest three numbers.\n        # If a1 + a2 + a3 equals the largest number, then a1, a2, a3 are the original numbers.\n        # Otherwise, we need to adjust one of the numbers to match the sum.\n        if a1 + a2 + a3 == sum_all:\n            results.append([a1, a2, a3])\n        else:\n            # If the sum doesn't match, it means one of the numbers is repeated in the smallest three.\n            # We can deduce the correct numbers by using the largest number and the smallest two.\n            # The correct numbers are sum_all - a2 - a3, a2, a3\n            results.append([sum_all - a2 - a3, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a_1 = b[0]\n        a_2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a_3 = b[6] - a_1 - a_2\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Restore arrays for each test case\n    results = restore_array(n, test_cases)\n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        sum_a = b[-1]\n        # Deduce the third element of a\n        a3 = sum_a - a1 - a2\n        # Append the restored array to the result list\n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the restore_array function\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the algorithm for speed and efficiency.\n- Provide clear documentation and comments within the code.\n- Consider edge cases and validate the input thoroughly.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of three elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum of each possible combination of elements from the array a. In code, this involves iterating through combinations and summing their elements.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to the smallest element in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these insights to reconstruct the original array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = [1, 1, 1]\n    Explanation: All elements are identical, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = [4, 1, 2]\n    Explanation: The smallest element is 1, the largest is 7 (sum of all), and second largest is 6 (sum of two largest).\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using sorted properties and sum relationships.\n", "requirement analysis:\nThe task requires reconstructing an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output format.\nrequirement pool:\n- Implement the algorithm to restore the original array from the subsequence sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the solution for performance with large inputs.\n- Consider edge cases and validate input constraints.\nWe will leverage the fact that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. By using these properties, we can deduce the original numbers by simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means we need to calculate the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over combinations of elements and summing them.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b represents the sum of all three numbers in array a. This helps us identify one of the key values needed to reconstruct array a.\n\n# [code logic]\n    1. Identify the largest number in array b, which is the sum of all three numbers in array a.\n    2. Identify the smallest number in array b, which is one of the original numbers in array a.\n    3. Use arithmetic operations to deduce the other two numbers in array a by leveraging the properties of sums and sorted order.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each number in array a is 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The largest number is 7 (sum of all three numbers), smallest is 1 (one of the original numbers), and other numbers can be deduced.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical large numbers, so each number in array a is 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing the original numbers from the sorted sums inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and prompt output for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the output format is clear and adheres to the specified requirements.\n- Consider edge cases and validate the solution against them.\n- Document the solution approach for better understanding and maintenance.\nWe will implement a function that takes the sorted array of sums of subsequences and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb]\n    'smallest': refers to the smallest individual element in the original array.\n    'largest': refers to the sum of all three elements in the original array.\n\n# [code logic]\n    1. Identify the smallest three numbers in the sorted array `b`, which correspond to the individual elements of the original array `a`.\n    2. Identify the largest number in the sorted array `b`, which corresponds to the sum of all three elements of `a`.\n    3. Use these observations to deduce the original array `a`.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: The smallest three numbers are all 1, and the largest number is 3, which is the sum of three ones.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of these three numbers.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: The smallest three numbers are all 300000000, and the largest number is 900000000, which is the sum of three times 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for identifying the smallest three numbers and the largest number will naturally handle these cases.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and prompt output for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Optimize the solution for handling large numbers and multiple test cases efficiently.\n- Ensure the output format is clear and adheres to the specified requirements.\n- Test the solution against edge cases and maximum constraints.\n- Document the solution approach and any assumptions made.\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array. We will use Python's built-in capabilities to handle large integers and multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in the sorted array b is one of the original integers in a.\n    \n    'largest'\n    Explanation: The largest element in the sorted array b is the sum of all three integers in a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b, which corresponds to one of the original integers in a.\n3. Identify the largest element in b, which is the sum of all three integers in a.\n4. Use these observations to deduce the other two integers by considering the properties of sums of subsequences.\n5. Output the three integers for each test case.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each integer in a is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The other two integers can be deduced as 2 and 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so each integer in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the other integers will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles multiple test cases efficiently.\n- Output the result in the specified format.\n- Handle large integer values without performance issues.\n- Provide a user-friendly interface for input and output.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequences of a, the smallest element in b is a1, the second smallest is a2, and the largest element is a1 + a2 + a3. We can deduce a3 by subtracting a1 and a2 from the largest element. This approach is efficient and works well within the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating the sum for each combination of elements in a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a1.\n2. Identify the second smallest element in b, which corresponds to a2.\n3. Identify the largest element in b, which corresponds to a1 + a2 + a3.\n4. Calculate a3 by subtracting a1 and a2 from the largest element.\n5. Return the values of a1, a2, and a3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each subsequence sum is straightforward.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers test the handling of maximum constraints.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The sequence is strictly increasing, testing basic functionality.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying a1, a2, and calculating a3 using the largest element in b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must handle multiple test cases efficiently and produce the correct output format.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values up to 10^9.\n- Validate the input to ensure it meets the problem constraints.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by leveraging the properties of the sorted array b. Since b contains the sums of all non-empty subsequences of a, the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can deduce the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers.\n\n# [degree adverb]\n    'smallest': Refers to the minimum value in the array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the maximum value in the array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified values to deduce the original array a:\n   - Let a1 be the smallest element in b.\n   - Let a3 be the largest element in b minus a1.\n   - Let a2 be the second largest element in b minus a3.\n5. Return a1, a2, and a3 as the restored array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so each element of a is equal to the smallest element of b.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second largest is 6, so a2 = 6 - 4 = 2.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical, so each element of a is equal to the smallest element of b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted subsequences.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output should be concise and adhere to the specified format.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Optimize the algorithm for performance with large inputs.\n- Provide clear and concise output formatting.\n- Include detailed comments and documentation for the code.\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to deduce the original array efficiently without complex calculations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the array elements.\n\n# [phrase showing quantity relationship]\n    'non-empty': means that we consider all subsequences that contain at least one element.\n    'sorted in non-decreasing order': means the array b is sorted from smallest to largest.\n\n# [degree adverb]\n    'largest': refers to the largest number in the sorted array b, which is the sum of all three elements of array a.\n\n# [code logic]\n    1. The smallest three numbers in the sorted array b are the individual elements of the original array a.\n    2. The largest number in array b is the sum of all three elements of array a.\n    3. Deduce the original array a using these observations:\n       - a_1 = b[0]\n       - a_2 = b[1]\n       - a_3 = b[6] - (a_1 + a_2)\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest numbers are 1, 1, and 2. The largest number is 1000000000, which is the sum of all three elements. Thus, a_3 = 1000000000 - (1 + 1) = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sum is the largest number in b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest numbers are 1, 2, and another 2. The largest number is 5, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted array of seven integers, which represents the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases and ensure the output format is consistent with the requirements.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b.\n- Ensure the solution handles large integer values efficiently.\n- Optimize the code for performance with multiple test cases.\n- Validate the output format for consistency.\n- Provide documentation for understanding the solution approach.\nWe will implement a function that takes the sorted array b of 7 integers and restores the original array a of 3 integers. The key observation is that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. Using these observations, we can deduce the values of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element must be present in the subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest numbers in b correspond to individual elements of a, and the largest number in b corresponds to the sum of all elements in a.\n\n# [code logic]\n    1. Identify the smallest three numbers in b, which correspond to the individual elements of a.\n    2. Identify the largest number in b, which is the sum of all three elements of a.\n    3. Use these observations to deduce the values of a:\n       - Let a1, a2, a3 be the smallest three numbers in b.\n       - The largest number in b is a1 + a2 + a3.\n    4. Return a1, a2, and a3 as the restored array.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest three numbers are 1, 1, and 2. The largest number is 1000000000, which is the sum of 999999998 + 1 + 1.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so the smallest three numbers are all 300000000, and their sum is the largest number, 900000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is their sum, which is 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number will correctly deduce the values of a for all test cases.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate the input to ensure it meets the problem constraints.\n- Optimize the solution for performance and memory usage.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Therefore, the three elements of a can be derived as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - a_1 - a_2.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': This means we need to calculate the sum of each possible non-empty subsequence of the array a. In code, this involves iterating through combinations of elements and summing them.\n\n# [degree adverb]\n    'sorted in non-decreasing order': This means the array b is sorted such that each element is greater than or equal to the previous one. In code, this implies that b is already sorted, and we can rely on this order to deduce the elements of a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b as the individual elements of a: a_1 = b[0], a_2 = b[1].\n    3. Calculate a_3 using the largest number in b: a_3 = b[6] - a_1 - a_2.\n    4. Output the values of a_1, a_2, and a_3.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: The smallest three numbers are all 1, and the largest number is 3, which is the sum of three ones.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: The smallest three numbers are all 1000000000, and the largest number is 3000000000, which is the sum of three times 1000000000.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest numbers are 1 and 2, and the largest number is 7. Therefore, a_3 = 7 - 1 - 2 = 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these cases by correctly identifying the elements of a from b.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted list, which correspond to the individual elements and their combinations in the original array.\nrequirement pool:\n- Develop a function to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Write clear and maintainable code.\n- Include comments and documentation for better understanding.\nWe will implement a function that takes the sorted array b of sums of non-empty subsequences and deduces the original array a. The key observation is that the smallest element in b is one of the elements of a, the second smallest is another, and the largest element in b is the sum of all three elements of a. Using these observations, we can efficiently reconstruct a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrases showing quantity relationships are present in the requirement.\n\n# [degree adverb]\n    No degree adverbs are present in the requirement.\n\n# [code logic]\n1. Identify the smallest element in b, which is one of the elements of a.\n2. Identify the second smallest element in b, which is another element of a.\n3. The largest element in b is the sum of all three elements of a.\n4. Use these observations to deduce the third element of a by subtracting the first two identified elements from the largest element.\n5. Return the three elements as the array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each element of a is 1.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the largest sum is 7, so the third element is 4 (7 - 1 - 2).\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and equal, so each element of a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements in b and using them to deduce a will handle these cases correctly.\n"], "scores": [], "pass_results": [false, false, true, true, false, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 786, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 491}
