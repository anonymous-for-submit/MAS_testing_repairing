{"name": "1579_D. Productive Meeting", "description": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "tags": ["constructive algorithms", "graphs", "greedy"], "difficulty": 10, "id": 1579, "sample_io": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}], "test_list": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 1\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 0\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n2\n2 3\n1 2\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n8 4 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 -1 0\n5\n5 0 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 5\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n0\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 1\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n6 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 2\n5 1\n2 4\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 0 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 1 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 2\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 3 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 2\n3 4\n2 3\n4 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 4 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n3 4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 1 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n1\n3 2\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 2 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["0\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 3 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 3\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 0\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n2 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 4 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n2 4\n2 4\n2 4\n1 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 0\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n0\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 2 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 1 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n0 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 1 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 2\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 1 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 3\n4 1\n4 2\n4 3\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 1 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n3\n4 2\n4 2\n4 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 5\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n0 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 0 0\n2\n12 0\n3\n-1 0 0\n5\n1 4 -1 1 4\n5\n1 0 1 0 10\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n5\n2 5\n2 5\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n0 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n3\n5 2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n6\n4 3\n4 2\n4 3\n4 1\n4 2\n4 3\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 0\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 0\n5\n8 3 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 1\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n1 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n0 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 8\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n9\n5 1\n5 1\n5 2\n5 1\n5 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 1 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n2\n3 1\n2 3\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 0 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n6 3\n3\n1 0 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 2\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 3\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 1\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 1\n3 2\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 2\n2\n12 4\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n4\n1 2\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 5\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n2 1\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 3\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 1 4\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n14 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 1\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 4 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n1 2 2 4\n3\n0 0 0\n2\n16 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 1\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n1\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n1 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 1\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n1\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 1\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n1 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n7\n1 5\n1 2\n1 5\n1 2\n4 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 0\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 3 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 2\n3 4\n2 3\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n1 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 0 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 5 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 0\n5\n12 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n2 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 5\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 2 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n1 2\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}], "task_id": "codecontest/16", "prompt": "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "repair_prompt": ["An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The identical pair of people can converse multiple times in one meeting. They are able to have conversations any number of times. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited, where at any given time, any two individuals can step aside for a private conversation, and the identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks. Each person has limited sociability, and the sociability of the i-th person is a non-negative integer a_i, which means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore); if a_i = 0, the i-th person leaves the meeting immediately after it starts. A meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because heapq is a min-heap by default\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n        \n        talks = []\n        \n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n            \n            # Record the conversation\n            talks.append((i1, i2))\n            \n            # Decrease their sociability\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n        \n        results.append((len(talks), talks))\n    \n    return results\n\n# Interface using input() and print()\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n    \n    results = maximize_conversations(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of conversations in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        pairs = []\n        total_talks = 0\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            pairs.append((i1, i2))\n            total_talks += 1\n\n            # Decrement their sociability and reinsert them into the heap if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        results.append((total_talks, pairs))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Call the function\nresults = maximize_conversations(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, pairs = result\n    print(k)\n    for i, j in pairs:\n        print(i, j)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting given sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Pair people based on their sociability\n        pairs = []\n        sociability_with_index = sorted([(s, i + 1) for i, s in enumerate(sociability)], reverse=True)\n        \n        while len(sociability_with_index) > 1:\n            # Get the two most sociable individuals\n            first = sociability_with_index[0]\n            second = sociability_with_index[1]\n            \n            if first[0] > 0 and second[0] > 0:\n                # Pair them for a talk\n                pairs.append((first[1], second[1]))\n                \n                # Decrease their sociability\n                sociability_with_index[0] = (first[0] - 1, first[1])\n                sociability_with_index[1] = (second[0] - 1, second[1])\n                \n                # Re-sort to maintain order\n                sociability_with_index.sort(reverse=True)\n            else:\n                break\n        \n        results.append((len(pairs), pairs))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n    \n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a list of tuples (sociability, index) and sort it in descending order of sociability\n        people = sorted([(s, i + 1) for i, s in enumerate(sociability)], reverse=True)\n        \n        talks = []\n        while len(people) > 1 and people[0][0] > 0 and people[1][0] > 0:\n            # Pair the two most sociable individuals\n            first = people[0]\n            second = people[1]\n            \n            # Record the talk\n            talks.append((first[1], second[1]))\n            \n            # Decrease their sociability\n            people[0] = (first[0] - 1, first[1])\n            people[1] = (second[0] - 1, second[1])\n            \n            # Re-sort the list to maintain order\n            people.sort(reverse=True)\n        \n        # Append the result for this test case\n        results.append((len(talks), talks))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n    \n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n", "from typing import List\n## main.py\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of private conversations in a meeting.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate a priority queue\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        total_talks = 0\n        pairs = []\n\n        while len(heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(heap)\n            s2, i2 = heapq.heappop(heap)\n\n            # Record the conversation\n            pairs.append((i1, i2))\n            total_talks += 1\n\n            # Decrease their sociability and reinsert them if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, i2))\n\n        results.append((total_talks, pairs))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_conversations(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of conversations in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum\n            number of conversations and the pairs of people involved in each conversation.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate max-heap behavior\n        max_heap = []\n        for i, s in enumerate(sociability):\n            if s > 0:\n                heapq.heappush(max_heap, (-s, i + 1))  # Store negative sociability and 1-based index\n\n        conversations = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            conversations.append((i1, i2))\n\n            # Decrease their sociability and push back if they still have remaining sociability\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(conversations), conversations))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_conversations(t, test_cases)\n    for result in results:\n        print(result[0])  # number of talks\n        for talk in result[1]:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nimport heapq\nimport typing\n\ndef maximize_talks(t: int, test_cases: typing.List[typing.Tuple[int, typing.List[int]]]) -> typing.List[typing.Tuple[int, typing.List[typing.Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq (which is a min-heap by default)\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n        \n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n            \n            # Record the conversation\n            talks.append((i1, i2))\n            \n            # Decrease their sociability and reinsert them if they still have positive sociability\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n        \n        # Append the result for this test case\n        results.append((len(talks), talks))\n    \n    return results\n\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n    \n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values to simulate a max-heap using heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrement their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a list of tuples (sociability, index) and sort it in descending order of sociability\n        people = sorted([(s, i + 1) for i, s in enumerate(sociability)], reverse=True, key=lambda x: x[0])\n        \n        pairs = []\n        while len(people) > 1 and people[0][0] > 0 and people[1][0] > 0:\n            # Pair the two most sociable people\n            first = people[0]\n            second = people[1]\n            \n            # Record the pair\n            pairs.append((first[1], second[1]))\n            \n            # Decrement their sociability\n            people[0] = (first[0] - 1, first[1])\n            people[1] = (second[0] - 1, second[1])\n            \n            # Re-sort the list to maintain order\n            people.sort(reverse=True, key=lambda x: x[0])\n        \n        # Append the result for this test case\n        results.append((len(pairs), pairs))\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Output interface\nresults = maximize_talks(t, test_cases)\nfor result in results:\n    k, pairs = result\n    print(k)\n    for i, j in pairs:\n        print(i, j)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of private conversations in a meeting based on sociability constraints.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, each containing the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because Python's heapq is a min-heap by default\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        pairs = []\n\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            pairs.append((i1, i2))\n\n            # Decrement their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(pairs), pairs))\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_conversations(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n"], "plans": ["requirement analysis:\nThe requirement is to determine the maximum number of conversations that can occur in a meeting given the sociability constraints of each participant. The solution must efficiently handle up to 200,000 participants and sociability interactions across multiple test cases. The output should clearly indicate the number of conversations and the pairs involved.\nrequirement pool:\n- Develop an algorithm to maximize the number of conversations based on sociability constraints.\n- Ensure the solution is efficient for large input sizes.\n- Provide a clear and concise output format for the results.\n- Handle multiple test cases in a single execution.\n- Allow flexibility in choosing conversation pairs if multiple solutions exist.\nWe will implement a greedy algorithm to maximize the number of conversations. The idea is to always pair the two most sociable people available, as this will maximize the number of conversations before any participant's sociability is exhausted. We will use a max-heap to efficiently retrieve the most sociable participants. This approach ensures that we handle large input sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person reaches their sociability limit, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of private conversations between individuals before any participant's sociability is exhausted.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement of conversations that results in the highest number of talks possible given the sociability constraints.\n\n# [degree adverb]\n    'most productive': This refers to achieving the maximum number of talks possible during the meeting.\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and the sociability parameters for each test case.\n    2. For each test case, use a max-heap to keep track of the sociability of each participant.\n    3. Continuously pair the two most sociable individuals until no more productive talks can be made.\n    4. Record each pair of individuals who engage in a conversation.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but there is no one else to converse with.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both individuals can engage in three talks with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle these scenarios by exhausting all possible conversations based on sociability constraints.\n", "requirement analysis:\nThe requirement is to determine the maximum number of conversations possible in a meeting given the sociability constraints of each participant. The solution must efficiently handle large inputs and provide the correct output format for multiple test cases.\nrequirement pool:\n- Implement the algorithm to maximize the number of conversations.\n- Ensure the solution handles up to 2 \u22c5 10^5 participants efficiently.\n- Output the results in the specified format for each test case.\n- Optimize the algorithm for edge cases with zero sociability.\n- Provide multiple valid outputs if possible.\nWe will implement a greedy algorithm to maximize the number of conversations. The approach involves pairing the most sociable individuals first, as they can engage in more conversations. We will use a priority queue (max-heap) to efficiently manage and select the individuals with the highest sociability. This ensures that we can handle large inputs efficiently. The solution will iterate through each test case, process the sociability list, and output the maximum number of conversations along with the pairs involved.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person reaches their sociability limit, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of private conversations between individuals before they exhaust their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the arrangement of conversations that results in the highest number of talks. In code, this can be implemented by prioritizing individuals with higher sociability for pairing.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible. In code, this involves using a strategy to ensure the maximum utilization of sociability.\n\n# [code logic]\n    1. For each test case, read the number of people and their sociability.\n    2. Use a max-heap (priority queue) to keep track of individuals based on their sociability.\n    3. Continuously pair the two most sociable individuals until no more productive pairs can be made.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all zero sociability: \n    Input: 3\n           0 0 0\n    Output: 0\n    Explanation: No one can engage in any talks, so the output is 0.\n\n    Test case with one person having zero sociability:\n    Input: 3\n           0 2 3\n    Output: 2\n            2 3\n            2 3\n    Explanation: The person with zero sociability leaves immediately, and the remaining two can talk twice.\n\n    Test case with maximum sociability:\n    Input: 2\n           200000 200000\n    Output: 200000\n            (1 2 repeated 200000 times)\n    Explanation: Both individuals can talk to each other until their sociability is exhausted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle cases where individuals have zero sociability or when all possible pairs are exhausted.\n", "requirement analysis:\nThe requirements focus on maximizing the number of talks by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output formatting.\nrequirement pool:\n- Maximize the number of talks in the meeting.\n- Efficiently pair individuals for conversations.\n- Handle large input sizes efficiently.\n- Provide clear output format for test cases.\n- Ensure solution scalability for future enhancements.\nWe will use a greedy approach to maximize the number of talks. By sorting the sociability array in descending order, we can pair the most sociable individuals first, ensuring that the maximum number of talks occur. We will use a simple loop to iterate through the sorted list and pair individuals until their sociability is exhausted. This approach is efficient and handles large input sizes well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can participate in a number of talks equal to their sociability.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the talks such that the total number of conversations is maximized before any individual exhausts their sociability.\n\n# [phrase showing quantity relationship]\n    'exactly n people'\n    Explanation: This indicates that the number of people in each test case is fixed and must be considered when planning the talks.\n\n    'maximum possible number of talks'\n    Explanation: This means we need to find the highest number of conversations that can occur given the sociability constraints.\n\n# [degree adverb]\n    'most productive'\n    Explanation: This refers to achieving the maximum number of talks possible, utilizing each person's sociability to its fullest extent.\n\n# [code logic]\n1. For each test case, read the number of people and their sociability values.\n2. Sort the people based on their sociability in descending order.\n3. Use a greedy approach to pair the most sociable individuals first.\n4. Keep track of the number of talks and the pairs involved.\n5. Continue pairing until no more valid pairs can be formed (i.e., when all individuals have exhausted their sociability).\n6. Output the total number of talks and the pairs for each test case.\n\n# [edge case]\n    Test Case 1: \n    Input: 2\n           0 0\n    Output: 0\n    Explanation: Both individuals have a sociability of 0, so no talks can occur.\n\n    Test Case 2:\n    Input: 3\n           1 0 1\n    Output: 1\n            1 3\n    Explanation: Only individuals 1 and 3 can talk once as individual 2 has a sociability of 0.\n\n    Test Case 3:\n    Input: 4\n           0 0 0 0\n    Output: 0\n    Explanation: All individuals have a sociability of 0, so no talks can occur.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where individuals have zero sociability by not pairing them for talks.\n", "requirement analysis:\nThe requirement is to maximize the number of talks in a meeting by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output.\nrequirement pool:\n- Maximize the number of conversations\n- Efficiently pair individuals based on sociability\n- Handle large input sizes efficiently\n- Provide clear and correct output format\n- Allow flexibility in pairing choices\nWe will use a greedy approach to maximize the number of talks. By sorting the sociability array in descending order, we can pair the most sociable individuals first, ensuring that the maximum number of talks occur. We will iterate through the sorted list and pair individuals until their sociability is exhausted.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is represented by a non-negative integer for each person.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of conversations that can occur during the meeting by pairing individuals optimally based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur by pairing individuals until their sociability is exhausted.\n\n# [degree adverb] \n    'most productive': This refers to achieving the highest number of talks possible, which is the main objective of the problem.\n\n# [code logic]\n1. For each test case, read the number of people and their sociability values.\n2. Sort the sociability values in descending order.\n3. Use a greedy approach to pair the most sociable individuals first:\n   - While there are at least two people with non-zero sociability, pair the two most sociable individuals.\n   - Decrease their sociability by one after each talk.\n   - Record the pair of individuals who talked.\n4. Continue this process until no more pairs can be formed.\n5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case] \n    Test case 1: 2\n    0 0\n    = 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test case 2: 3\n    1 0 0\n    = 0\n    Explanation: Only one person has sociability, but they cannot talk alone, so no talks can occur.\n\n    Test case 3: 4\n    1 1 1 1\n    = 2\n    Explanation: Each person can talk once, so two pairs can be formed (e.g., (1,2) and (3,4)).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of pairing individuals with non-zero sociability will naturally handle cases where no pairs can be formed.\n", "requirement analysis:\nThe requirement is to determine the maximum number of conversations possible in a meeting given the sociability constraints of each participant. The solution must efficiently handle up to 200,000 participants and sociability interactions in total across all test cases. The output must be formatted correctly to ensure it meets the specified requirements.\nrequirement pool:\n- Implement the algorithm to maximize the number of conversations.\n- Ensure the solution handles large input sizes efficiently.\n- Provide a clear and correct output format.\n- Consider edge cases where some participants have zero sociability.\n- Optimize for readability and maintainability of the code.\nWe will use a greedy approach to maximize the number of conversations. The idea is to always pair the two most sociable individuals available until their sociability is exhausted. This ensures that the maximum number of talks is achieved. We will use a priority queue (heap) to efficiently manage and retrieve the most sociable individuals.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person reaches their sociability limit, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of private conversations between individuals during the meeting. This means arranging the talks in such a way that the total number of conversations is as large as possible.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the arrangement of conversations that results in the highest total number of talks.\n    Implementation: Use a greedy approach to pair individuals with the highest sociability until their sociability is exhausted.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible during the meeting.\n    Implementation: Continuously pair the two individuals with the highest remaining sociability until no more talks can be arranged.\n\n# [code logic]\n1. Parse the input to retrieve the number of test cases and details for each test case.\n2. For each test case, use a priority queue (max-heap) to keep track of individuals based on their sociability.\n3. Continuously extract the two individuals with the highest sociability from the heap and arrange a talk between them.\n4. Decrease their sociability by one after each talk and reinsert them into the heap if they still have remaining sociability.\n5. Repeat until no more talks can be arranged.\n6. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 3\n           0 0 2\n    Expected output: 0\n    Explanation: Only one person can engage in talks, but no pair can be formed.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: 200000\n    Explanation: Both individuals can engage in talks with each other until their sociability is exhausted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle these scenarios by not arranging any talks if no valid pairs can be formed.\n", "requirement analysis:\nThe requirement is to maximize the number of conversations in a meeting by efficiently pairing individuals based on their sociability. The solution must handle multiple test cases and large input sizes while providing clear output.\nrequirement pool:\n- Maximize the number of conversations in the meeting.\n- Efficiently pair individuals based on sociability.\n- Handle large input sizes efficiently.\n- Provide clear output format for easy understanding.\n- Ensure solution is scalable for future requirements.\nWe will use a greedy approach to maximize the number of conversations. The idea is to always pair the two most sociable individuals available at any given time. This ensures that we are utilizing the highest possible sociability at each step, which will lead to the maximum number of conversations. We will use a priority queue (max-heap) to efficiently retrieve and update the most sociable individuals. The heapq library in Python can be used for this purpose, with some modifications to simulate a max-heap.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of conversations that can occur during the meeting by optimally pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur. In code, this involves iterating through the sociability values and pairing individuals to maximize the total number of talks.\n\n# [degree adverb]\n    'most productive': This implies achieving the highest number of talks possible, which is the main objective of the problem.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap to keep track of the most sociable individuals.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two most sociable individuals from the heap.\n   - Record a conversation between them.\n   - Decrease their sociability by one and push them back into the heap if they still have remaining sociability.\n5. Continue this process until no more conversations can be made.\n6. Output the total number of conversations and the pairs involved for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: 2\n           0 0\n    Expected output: 0\n    Explanation: Both individuals have zero sociability, so no conversations can occur.\n\n    Test case 2:\n    Input: 3\n           1 0 1\n    Expected output: 1\n                     1 3\n    Explanation: Only individuals 1 and 3 can have a conversation as individual 2 has zero sociability.\n\n    Test case 3:\n    Input: 4\n           0 0 0 0\n    Expected output: 0\n    Explanation: All individuals have zero sociability, so no conversations can occur.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of using a max-heap and checking for non-zero sociability will naturally handle these cases by not allowing any conversations when sociability is zero.\n", "requirement analysis:\nThe requirement is to determine the maximum number of private conversations that can occur in a meeting given the sociability constraints of each participant. The solution must efficiently handle multiple test cases and large input sizes, ensuring that the output format is strictly followed.\nrequirement pool:\n- Implement the algorithm to maximize the number of talks.\n- Ensure the solution handles up to 200,000 participants efficiently.\n- Provide clear documentation and examples for understanding the solution.\n- Optimize the algorithm for edge cases with zero sociability.\n- Consider user interface elements for visualizing the solution.\nWe will implement a greedy algorithm to maximize the number of private conversations. The idea is to always pair the two most sociable people available, as this will ensure that the maximum number of talks can occur. We will use a max-heap (priority queue) to efficiently retrieve the most sociable individuals. This approach will handle the constraints efficiently, given the large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can participate in a number of talks equal to their sociability.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of private conversations that can occur during the meeting by strategically pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur given the sociability constraints.\n    Implementation: Use a greedy approach to always pair the two most sociable people available.\n\n# [degree adverb]\n    'most productive': This refers to achieving the highest number of talks possible.\n    Implementation: Use a max-heap to efficiently manage and pair individuals based on their sociability.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap to keep track of the sociability of each person.\n4. While there are at least two people with positive sociability:\n   - Extract the two people with the highest sociability.\n   - Record a conversation between them.\n   - Decrease their sociability by one and reinsert them into the heap if they still have positive sociability.\n5. Output the total number of conversations and the pairs involved.\n\n# [edge case]\n    Test case with all zero sociability: \n    Input: 3 0 0 0\n    Output: 0\n    Explanation: No one can talk, so no conversations occur.\n\n    Test case with one person having high sociability and others zero:\n    Input: 3 5 0 0\n    Output: 0\n    Explanation: The person with high sociability cannot converse alone, so no conversations occur.\n\n    Test case with two people having equal sociability:\n    Input: 2 3 3\n    Output: 3\n    Explanation: They can converse three times, as both have equal sociability.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle cases where no conversations can occur or where only specific pairs can converse.\n", "requirement analysis:\nThe requirement is to determine the maximum number of private talks that can occur in a meeting given the sociability constraints of each participant. The solution must efficiently handle multiple test cases and large input sizes, ensuring that the output format is strictly followed.\nrequirement pool:\n- Implement the algorithm to maximize the number of talks.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the solution for large input sizes.\n- Provide clear and correct output format for each test case.\n- Consider edge cases where sociability is zero for all participants.\nWe will implement a greedy algorithm to maximize the number of talks. The approach involves pairing the most sociable individuals first, ensuring that each person engages in the maximum number of talks before their sociability is exhausted. We will use a priority queue to efficiently manage and select the individuals with the highest sociability for pairing. This approach ensures that the solution is efficient even for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of private conversations that occur during the meeting.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the arrangement of conversations that results in the highest number of total talks.\n    Implementation: Use a greedy algorithm to pair individuals with the highest sociability first.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Prioritize pairing individuals with higher sociability to maximize productivity.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and details for each test case.\n    2. For each test case, use a priority queue (max-heap) to manage individuals based on their sociability.\n    3. Continuously pair the two individuals with the highest sociability until no more productive pairs can be made.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but no pair can be formed.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: 200000\n    Explanation: The two individuals can engage in 200000 talks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these scenarios by checking if productive pairs can be formed based on sociability values.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private conversations while efficiently utilizing each participant's sociability. The solution must handle large input sizes and provide clear output for each test case.\nrequirement pool:\n- Maximize the number of private conversations.\n- Efficiently utilize sociability of participants.\n- Handle large input sizes effectively.\n- Provide clear and correct output format.\n- Allow flexibility in conversation pairing.\nWe will use a greedy approach to maximize the number of private conversations. By sorting the participants based on their sociability, we can pair the most sociable individuals first, ensuring that the maximum number of talks occur. This approach efficiently utilizes each participant's sociability and handles large input sizes effectively. We will use Python's built-in sorting and list manipulation capabilities to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can participate in a number of talks equal to their sociability.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange the talks such that the total number of conversations is maximized before any participant's sociability is exhausted.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement that allows for the greatest number of conversations. In code, this involves iterating through the sorted list of sociability values and pairing the highest available values first.\n\n# [degree adverb]\n    'most productive': This indicates that the meeting should have the highest number of talks possible, which is achieved by maximizing the use of each person's sociability.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Sort the people based on their sociability in descending order.\n4. Use a greedy approach to pair the most sociable individuals first:\n   - While there are at least two people with non-zero sociability, pair them and decrement their sociability.\n   - Record each pair as a conversation.\n5. Continue until no more pairs can be made.\n6. Output the total number of conversations and the pairs for each test case.\n\n# [edge case]\n    Test case 1: 2 0 0 = 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test case 2: 3 1 1 1 = 1\n    Explanation: Each person can only talk once, so only one pair can be formed.\n\n    Test case 3: 4 0 0 0 0 = 0\n    Explanation: All individuals have zero sociability, so no talks can occur.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases where no talks can occur due to zero sociability by checking if there are at least two people with non-zero sociability before attempting to pair them.\n", "requirement analysis:\nThe problem requires determining the maximum number of private conversations possible given the sociability constraints of each participant. The solution must efficiently handle up to 200,000 participants and sociability interactions, ensuring the output format is adhered to for each test case.\nrequirement pool:\n- Develop an algorithm to maximize the number of conversations.\n- Ensure the solution is efficient for large input sizes.\n- Provide a clear and correct output format for each test case.\n- Handle edge cases where some participants have zero sociability.\n- Optimize the solution for readability and maintainability.\nWe will use a greedy algorithm to maximize the number of conversations. The idea is to always pair the two people with the highest remaining sociability until no more conversations can be made. This approach ensures that we maximize the number of talks efficiently. We will use a priority queue (heap) to keep track of the sociability of each participant, allowing us to efficiently retrieve and update the highest sociability values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person has participated in a number of talks equal to their sociability, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the total number of private conversations that can occur during the meeting, given the sociability constraints of each participant.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to find the largest number of conversations that can occur given the sociability constraints.\n    Implementation: Use a greedy approach to pair individuals with the highest remaining sociability.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Continuously pair individuals with the highest sociability until no more talks can be made.\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and sociability values for each test case.\n    2. For each test case, use a priority queue (max-heap) to keep track of individuals' sociability.\n    3. Continuously pair the two individuals with the highest sociability until no more pairs can be formed.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of pairs and the pairs themselves for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can engage in talks, but no pairs can be formed.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: A large number of pairs, up to the sum of sociabilities divided by two.\n    Explanation: Both individuals can engage in a large number of talks.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm naturally handles cases where no pairs can be formed by checking if there are at least two individuals with non-zero sociability before forming a pair.\n"], "scores": [], "pass_results": [true, true, false, true, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 930, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "mutate_method": "add_1_sentence_at_end", "parent_index": 569}
