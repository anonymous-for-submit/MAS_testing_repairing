{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array. He then arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a and he only has the array b left; help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive integers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        # The largest number in b is the sum of all three elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the given subsequence sums array b.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty subsequences\n                       of an array a consisting of 3 positive integers.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a\n    a1 = b[0]\n    a2 = b[1]\n    # The largest number in b is the sum of all three elements of a\n    a3 = b[6] - (a1 + a2)\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive integers from the given sorted list of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A list of lists, where each inner list contains the 3 integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_plus_a2_plus_a3 = b[6]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # Deduce the third element using the sum of all elements\n        a3 = a1_plus_a2_plus_a3 - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = restore_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the three integers of the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the elements of array a from the sorted array b\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    number_of_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(number_of_test_cases)]\n    \n    # Call the function and print the results\n    results = restore_array(number_of_test_cases, test_cases)\n    for result in results:\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive integers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to ensure the smallest elements are at the beginning\n        b.sort()\n        \n        # Deduce the original array a\n        a1 = b[0]  # The smallest element in b\n        a2 = b[1]  # The second smallest element in b\n        a3 = b[6] - a1 - a2  # The largest element in b minus the sum of a1 and a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Output interface\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is a_1\n    a_1 = b[0]\n    # The second smallest element in b is a_2\n    a_2 = b[1]\n    # The largest element in b is the sum of a_1, a_2, and a_3\n    sum_all = b[6]\n    # Calculate a_3 using the formula: a_3 = sum_all - (a_1 + a_2)\n    a_3 = sum_all - (a_1 + a_2)\n    \n    return [a_1, a_2, a_3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a.\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a.\n        a3 = b[-1] - (a1 + a2)\n        \n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three positive integers from the given sorted array of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three positive integers.\n\n    Returns:\n        List[int]: The original array of three positive integers.\n    \"\"\"\n    # The smallest element in b is one of the original elements\n    a1 = b[0]\n    # The second smallest element in b is another original element\n    a2 = b[1]\n    # The largest element in b is the sum of all three original elements\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    for _ in range(t):\n        b = list(map(int, input().strip().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three positive integers from the sorted list of sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of the original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    # The largest number in b is the sum of all three elements of a.\n    # We can deduce the original array a by selecting the smallest three numbers.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number is the sum of all three elements.\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from the sorted subsequence sums b\n        a1 = b[0]  # The smallest element in b is the smallest element in a\n        a3 = b[-1] - a1  # The largest element in b minus a1 gives the largest element in a\n        a2 = b[-2] - a3  # The second largest element in b minus a3 gives the second element in a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array from the sorted sums of its non-empty subsequences. Given the constraints, the solution must efficiently handle up to 5000 test cases and large integer values. The approach should focus on identifying the three integers from the sorted list of sums, ensuring the output is correct and consistent across all test cases.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution is efficient for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide clear and accurate output for each test case\n- Optimize the solution for edge cases\nWe will use a straightforward approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently deduce the values of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array of 3 positive integers'\n    Explanation: The original array consists of exactly three integers, each greater than zero.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': indicates that the array a consists of exactly three elements, each greater than zero.\n\n    '7 numbers': indicates that the array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    'largest': refers to the largest number in array b, which is the sum of all three elements of array a.\n\n# [code logic]\n1. Identify the smallest three numbers in array b. These correspond to the individual elements of array a.\n2. The largest number in array b is the sum of all three elements of array a.\n3. Use these observations to deduce the values of a:\n   - Let the smallest three numbers be x, y, z.\n   - The largest number is x + y + z.\n   - The original array a can be deduced as (x, y, z).\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest three numbers are 1, 3, and 4. The largest number is 8, which is the sum of 1, 4, and 3.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is 5, which is the sum of 1, 2, and 2.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All numbers are equal, indicating that each element in a is the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest three numbers and using the largest number as their sum inherently handles all cases.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring that the output is correct and adheres to the input-output format specified.\nrequirement pool:\n- Efficiently compute the original array from the subsequence sums.\n- Ensure the solution handles the maximum constraints smoothly.\n- Provide clear and concise output for each test case.\n- Optimize for both speed and simplicity.\n- Include comprehensive test coverage for edge cases.\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently compute the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'positive integers'\n    Explanation: The integers in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the array, excluding the empty set. In code, this can be implemented by calculating all possible sums of combinations of the array elements.\n\n# [degree adverb]\n    'ascending order'\n    Explanation: The array b is sorted from the smallest to the largest value. In code, this means ensuring that the array b is sorted before processing.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to individual elements of a.\n    3. The largest number in b is the sum of all three elements of a.\n    4. Use these observations to compute the original array a:\n       - a_1 = b[0]\n       - a_2 = b[1]\n       - a_3 = b[6] - (a_1 + a_2)\n    5. Print the result for each test case.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, and their sums are consistent with the given array b.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers with equal values, ensuring that calculations handle large integers correctly.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three numbers are individual elements, and the largest number is their sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints smoothly.\n- Optimize the solution for speed and memory usage.\n- Provide clear and correct output for each test case.\n- Document the code for better understanding and maintenance.\nWe will use a simple mathematical approach to deduce the original array from the given sorted list of sums. Since the array a consists of 3 positive integers, the smallest element in b is the smallest element in a. The largest element in b is the sum of all elements in a. By using these properties, we can efficiently determine the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty means that the subsequence must contain at least one element.\n\n    'positive integers'\n    Explanation: The integers in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array, excluding the empty set. In code, this can be implemented by iterating through all combinations of the array elements and calculating their sums.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in the sorted array b is the smallest element in the original array a.\n\n    'largest'\n    Explanation: The largest element in the sorted array b is the sum of all elements in the original array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Use the properties of sums to deduce the remaining elements:\n   - The second smallest element in b is another element of a.\n   - The third smallest element in b is the third element of a.\n4. Return these three elements as the original array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each element in a is 1.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest sum is 7. The remaining elements can be deduced from the sequence.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the array a from b by considering the properties of sums and sorted order.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly, and any valid solution is acceptable if multiple exist.\nrequirement pool:\n- Implement the main algorithm to restore array a from array b\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the algorithm for large integer values\n- Provide clear and concise output formatting\n- Consider edge cases and validate input constraints\nWe will use a straightforward approach to solve the problem. Given the sorted array b of sums of all non-empty subsequences of array a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. Therefore, the three elements of array a can be found as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - a_1 - a_2. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'smallest': Refers to the first element in the sorted array b, which is the smallest sum of a non-empty subsequence.\n    \n    'largest': Refers to the last element in the sorted array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a_1.\n2. Identify the second smallest element in b, which corresponds to a_2.\n3. Calculate a_3 as the difference between the largest element in b and the sum of a_1 and a_2.\n4. Return a_1, a_2, and a_3 for each test case.\n\n# [edge case] \n    Edge Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so a_1 = a_2 = a_3 = 1.\n\n    Edge Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The sequence is strictly increasing with no repeated sums.\n\n    Edge Case 3: b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and equal, so a_1 = a_2 = a_3 = 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying a_1 as b[0], a_2 as b[1], and calculating a_3 as b[6] - a_1 - a_2 will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution is efficient for the maximum constraints.\n- Provide a clear and concise output format.\n- Handle edge cases and large numbers effectively.\n- Optimize for speed and simplicity.\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can deduce the values of a_1, a_2, and a_3 efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of 3 positive integers'\n    Explanation: The original array a has exactly three positive integers.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': This indicates that the array a has exactly three elements, each of which is a positive integer.\n\n    '7 numbers': This indicates that the array b, which contains the sums of all non-empty subsequences of a, has exactly seven elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n3. The largest number in b is the sum of all three elements of a.\n4. Use these observations to deduce the values of a_1, a_2, and a_3:\n   - Let a_1 be the smallest element in b.\n   - Let a_2 be the second smallest element in b.\n   - Let a_3 be the largest element in b minus the sum of a_1 and a_2.\n5. Output the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest three numbers are 1, 1, and 1, and the largest number is 3, which is the sum of all three elements.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest three numbers are 1000000000, 1000000000, and 1000000000, and the largest number is 3000000000, which is the sum of all three elements.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements. However, since we need to find a valid combination that satisfies all conditions, we deduce that a possible solution is [1, 2, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for identifying the smallest three numbers and using them to deduce the original array a.\n", "requirement analysis:\nThe task requires restoring the original array from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output formatting.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Ensure correct output formatting for multiple test cases\n- Optimize for performance with up to 5000 test cases\n- Provide clear documentation and comments in the code\nWe will use a simple mathematical approach to restore the original array from the sorted sums of its non-empty subsequences. Given the sorted array b, the smallest element is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these properties, we can efficiently compute the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element must be present in the subsequence.\n\n    'sorted sums'\n    Explanation: The sums of all non-empty subsequences are arranged in ascending order to form array b.\n\n# [phrase showing quantity relationship]\n    'sum of all three elements': This indicates that the largest number in array b is the sum of all three elements in array a. In code, this can be implemented by identifying the largest number in array b.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to one of the original elements in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all three elements in array a.\n\n# [code logic]\n1. For each test case, identify the smallest element in array b, which corresponds to a_1.\n2. Identify the second smallest element in array b, which corresponds to a_2.\n3. Identify the largest element in array b, which is the sum of a_1, a_2, and a_3.\n4. Calculate a_3 using the formula: a_3 = largest element - (a_1 + a_2).\n5. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so the original array consists of three identical numbers.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest and second smallest numbers are used directly, and the largest number is used to calculate the third element.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array consists of three identical numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by using the properties of sorted sums and simple arithmetic operations.\n", "requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output formatting.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will use a straightforward approach to restore the original array from the given sorted sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. This is because the smallest sums are the individual elements themselves, and the largest sum is the sum of all three elements. We will use this observation to efficiently reconstruct the array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted sums'\n    Explanation: The sums of all non-empty subsequences are arranged in ascending order to form the array b.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the array b of 7 integers.\n    2. The smallest three numbers in b are the individual elements of a.\n    3. The largest number in b is the sum of all three elements of a.\n    4. Use these observations to reconstruct the array a:\n       - Let a1 be the smallest number in b.\n       - Let a2 be the second smallest number in b.\n       - Let a3 be the largest number minus (a1 + a2).\n    5. Output the reconstructed array a for each test case.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest three numbers are all 1, and the largest is 3, which is the sum of all three elements.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements (1 + 2 + 4).\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest three numbers are all 1000000000, and the largest is 3000000000, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted sums and subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output must be consistent with the input format and provide accurate results for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums.\n- Ensure the solution handles up to 5000 test cases.\n- Optimize for large integer values up to 10^9.\n- Maintain consistent output format.\n- Provide clear documentation and examples.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a_1, a_2, or a_3. The largest element in b is the sum of all three original elements. By using these observations, we can deduce the original array a by selecting the smallest, second smallest, and the largest element minus the smallest two elements from b. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the first element in the sorted array b, which is the smallest number.\n    \n    'largest': Refers to the last element in the sorted array b, which is the largest number.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to one of the original elements a_1, a_2, or a_3.\n3. Identify the largest element in b, which is the sum of all three original elements (a_1 + a_2 + a_3).\n4. The second smallest element in b is another original element.\n5. Calculate the third original element by subtracting the two smallest elements from the largest element.\n6. Output the three original elements.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so each original element is 1.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, second smallest is 2, and largest is 7. The third element is calculated as 7 - (1 + 2) = 4.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal to a large number, so each original element is that number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted arrays and subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and formatted output for each test case.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints smoothly.\n- Provide clear and correct output for each test case.\n- Optimize for both time and space complexity.\n- Consider edge cases and ensure robustness.\nWe will use a straightforward approach to restore the original array from the given sorted list of sums. The key observation is that the smallest three numbers in the sorted list are the individual elements of the original array. The largest number is the sum of all three elements. This allows us to deduce the original array efficiently without complex computations. We will use Python's built-in list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted list of sums'\n    Explanation: This refers to the array `b` which contains the sums of all non-empty subsequences of the original array `a`, sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The original array `a` consists of exactly three integers, each greater than zero.\n\n# [degree adverb]\n    'smallest': Refers to the smallest three numbers in the sorted list `b`, which correspond to the individual elements of the original array `a`.\n\n    'largest': Refers to the largest number in the sorted list `b`, which is the sum of all three elements of the original array `a`.\n\n# [code logic]\n1. For each test case, read the sorted list `b` of 7 integers.\n2. Identify the smallest three numbers in `b` as they represent the individual elements of `a`.\n3. The largest number in `b` is the sum of all three elements of `a`.\n4. Return the three smallest numbers as the original array `a`.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element in `a` is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7 which is the sum of all three elements.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and equal, so each element in `a` is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of selecting the smallest three numbers and using them as the original array `a` inherently handles these cases.\n", "requirement analysis:\nThe task is to restore the original array of three integers from the given sorted list of subsequence sums. The constraints ensure that there is always a valid solution. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Implement the main algorithm to restore the array from subsequence sums\n- Ensure the solution is optimized for large inputs and multiple test cases\n- Design a user-friendly interface for input and output\n- Provide clear documentation and instructions for users\n- Consider edge cases and validate input data\nWe will solve the problem by leveraging the properties of the sorted subsequence sums. Given the sorted array b of 7 elements, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all three numbers in a. The second largest element in b is the sum of the two largest numbers in a. Using these properties, we can deduce the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of 3 positive integers'\n    Explanation: The original array a has exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from array a, excluding the empty set.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the array a has exactly three elements, all of which are positive.\n\n    '7 numbers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all three elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these properties to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return the array [a1, a2, a3].\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest number is 1, the largest is 8 (sum of all three), and the second largest is 7 (sum of two largest numbers).\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest number is 1, the largest is 7 (sum of all three), and the second largest is 6 (sum of two largest numbers).\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each element in a is equal to the smallest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these cases by leveraging the properties of sorted subsequence sums.\n"], "scores": [], "pass_results": [true, false, true, true, true, true, true, false, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 377, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 245}
