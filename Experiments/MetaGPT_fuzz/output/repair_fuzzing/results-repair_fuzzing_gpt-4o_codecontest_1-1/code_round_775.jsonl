{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He computed these sums step by step using the elements in the array. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order to get an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        A list of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest element in b corresponds to the smallest element in a\n    a_1 = b[0]\n    \n    # The second largest element in b represents the sum of the two largest elements in a\n    sum_two_largest = b[5]\n    \n    # The largest element in b represents the sum of all elements in a\n    sum_all_elements = b[6]\n    \n    # Calculate the second element in a\n    a_2 = sum_all_elements - sum_two_largest\n    \n    # Calculate the third element in a\n    a_3 = sum_all_elements - a_1 - a_2\n    \n    return [a_1, a_2, a_3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # The second smallest element in b is the sum of the smallest integer and another integer\n    a1_a2 = b[1]\n    # The third smallest element in b is the sum of the smallest integer and the third integer\n    a1_a3 = b[2]\n    \n    # Calculate the other two integers\n    a2 = a1_a2 - a1\n    a3 = a1_a3 - a1\n    \n    # Return the original array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements\n        a1 = b[0]\n        # The largest element in b is the sum of all three original elements\n        sum_all = b[6]\n        # The sum of the other two elements\n        sum_two = sum_all - a1\n        # The second and third elements can be found in the remaining elements\n        # We know that b[1] and b[2] are the other two elements or their sums\n        a2 = b[1]\n        a3 = sum_two - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 positive integers from the given sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2_a3 = b[5]\n        \n        # Calculate a3 as the largest element minus a1\n        a3 = sum_a - a1\n        # Calculate a2 as the second largest element minus a3\n        a2 = sum_a2_a3 - a3\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences\n           of the original array.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    # The largest number in b is the sum of all three elements of a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of 3 positive integers from the sorted sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is one of the elements in a\n    a1 = b[0]\n    # The largest element in b is the sum of all three elements in a\n    a1_a2_a3 = b[6]\n    # The second smallest element in b helps deduce another element of a\n    a1_a2 = b[1]\n    \n    # Calculate the second element of a\n    a2 = a1_a2 - a1\n    # Calculate the third element of a\n    a3 = a1_a2_a3 - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences\n                       of an original array of three positive integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # The second smallest element in b is the sum of the smallest integer and one other integer\n    a1_a2 = b[1]\n    # Deduce the second integer\n    a2 = a1_a2 - a1\n    # Deduce the third integer\n    a3 = a1_a2_a3 - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[Tuple[int, int, int]]: List of tuples, each containing the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = b[0]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[-1]\n        # The second largest element in 'b' minus the smallest element gives the second element of 'a'\n        a2 = b[1] - a1\n        # Subtract the first two elements of 'a' from the largest element in 'b' to get the third element of 'a'\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the script\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The second smallest element in b is the second element in a\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # Calculate the third element of a\n        a3 = sum_a - (a1 + a2)\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        total_sum = b[-1]\n        # The smallest number in b is one of the original numbers in a\n        a1 = b[0]\n        # The second smallest number in b is another original number in a\n        a2 = b[1]\n        # Calculate the third number by subtracting the first two identified numbers from the largest number\n        a3 = total_sum - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Ensure the solution is scalable for up to 5000 test cases\n- Provide clear and concise output for each test case\n- Consider multiple valid solutions for ambiguous cases\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequence sums of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in b represents the sum of all elements in a. This can be implemented by identifying the last element in the sorted array b.\n\n    'sum of the two largest elements'\n    Explanation: The second largest element in b represents the sum of the two largest elements in a. This can be implemented by identifying the second last element in the sorted array b.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in b corresponds to the smallest element in a. This can be implemented by identifying the first element in the sorted array b.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify a_1 as the smallest element in b (b[0]).\n    3. Identify a_2 as the difference between the sum of all elements (b[6]) and the sum of the two largest elements (b[5]).\n    4. Identify a_3 as the difference between the sum of all elements (b[6]) and a_1 and a_2.\n    5. Print a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest element is 1, the sum of all elements is 1000000000, and the sum of two largest elements is 999999999. Thus, a_1 = 999999998, a_2 = 1, a_3 = 1.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, the sum of all elements is 5, and the sum of two largest elements is 4. Thus, a_1 = 1, a_2 = 2, a_3 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all possible configurations of array b correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases, ensuring scalability and accuracy. The output format must be strictly followed to pass all test cases.\nrequirement pool:\n- Develop the main algorithm to restore the original array from subsequence sums.\n- Ensure the solution can handle large numbers efficiently.\n- Optimize the code for scalability to handle up to 5000 test cases.\n- Implement a clear and consistent output format.\n- Provide documentation for understanding the solution approach.\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently reconstruct the original array. We will use basic list operations to achieve this, ensuring the solution is scalable and efficient for up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence sums'\n    Explanation: The requirement involves calculating sums of all non-empty subsequences of an array of three integers. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order': means the array b is sorted from smallest to largest.\n    'sum of all three integers': means the largest number in array b is the sum of all elements in array a.\n\n# [degree adverb] \n    'smallest': refers to the smallest element in the sorted array b, which is one of the original integers in array a.\n    'largest': refers to the largest element in the sorted array b, which is the sum of all three integers in array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the integers in array a.\n    2. Identify the largest element in array b, which is the sum of all three integers in array a.\n    3. Use these two identified values to deduce the remaining two integers by considering other sums present in array b.\n    4. Return the three integers as the reconstructed array a.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, and their sums are consistent with the subsequence sums.\n    \n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest number is 1, and the largest number is 7 (sum of all three numbers). The other numbers can be deduced from these values.\n    \n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sums are consistent with the subsequence sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the array a from array b for all given test cases.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases, each with 7 integers, and produce the correct original array for each test case.\nrequirement pool:\n- Develop an efficient algorithm to restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the code for readability and maintainability.\n- Include edge case handling to ensure robustness.\n- Provide detailed comments and documentation for the code.\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b, the smallest element b[0] is one of the original elements. The largest element b[6] is the sum of all three original elements. By subtracting b[0] from b[6], we get the sum of the other two elements. Using these insights, we can efficiently determine the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from array a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in array b corresponds to one of the original elements in array a, and the largest element corresponds to the sum of all elements in array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which is one of the original elements.\n    2. Identify the largest element in array b, which is the sum of all three original elements.\n    3. Subtract the smallest element from the largest element to find the sum of the other two elements.\n    4. Use these sums to deduce the original three elements.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so the original array consists of three identical elements.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The sum of the other two elements is 6 (7 - 1), which can be split into 4 and 2.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using mathematical deduction based on sorted properties and sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Handle large integer values without performance issues\n- Provide output in the correct format\n- Optimize for clarity and simplicity in implementation\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is derived from the sums of all non-empty subsequences of a three-element array, the smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sums obtained by adding up all possible combinations of the elements in array a, excluding the empty set.\n\n    'sorted them in non-decreasing order'\n    Explanation: The resulting sums are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the array a consists of exactly three elements, each greater than zero.\n    \n    '7 integers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the sorted array b of 7 integers.\n2. Identify the smallest element in b as it corresponds to the smallest element in array a.\n3. Identify the largest element in b as it corresponds to the sum of all elements in array a.\n4. Identify the second largest element in b as it corresponds to the sum of the two largest elements in array a.\n5. Use these identified values to reconstruct array a:\n   - Let a1 be the smallest element in b.\n   - Let a3 be the largest element in b minus a1.\n   - Let a2 be the second largest element in b minus a3.\n6. Output the reconstructed array a for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so each element of a is 1.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, the largest is 7, and the second largest is 6. Thus, a = [4, 1, 2].\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so each element of a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by correctly identifying and reconstructing array a based on the properties of array b.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. This allows us to directly deduce the original array from the given sorted sums.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest three numbers in the sorted array b are the individual elements of the original array a, and the largest number is the sum of all three elements of a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest three numbers in b as they represent the individual elements of a.\n3. Identify the largest number in b as it represents the sum of all three elements of a.\n4. Use these observations to deduce and print the original array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each element of a is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7 which is the sum of all three elements.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each element of a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number in b will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Provide clear and formatted output for each test case.\n- Optimize for speed without sacrificing clarity.\nWe will use a straightforward approach to restore the original array from the given sorted sums. The smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these two values and the second smallest value in b, we can deduce the original array a. This approach is efficient and easy to understand, making it suitable for handling up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For an array of three elements, there are 7 non-empty subsequences.\n\n    'sorted them in non-decreasing order'\n    Explanation: The sums of the subsequences are sorted in increasing order, meaning each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the original array consists of exactly three elements, each greater than zero.\n    \n    '7 integers': Indicates that the resulting array from the sums of subsequences will always have seven elements.\n\n# [degree adverb]\n    'smallest': Refers to the first element in the sorted array b, which is the smallest sum and corresponds to one of the original elements in array a.\n    \n    'largest': Refers to the last element in the sorted array b, which is the sum of all three elements in array a.\n\n# [code logic]\n1. For each test case, read the sorted array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to one of the elements in a.\n3. Identify the largest element in b, which is the sum of all three elements in a.\n4. Use the second smallest element in b to deduce another element of a.\n5. Calculate the third element of a using the largest element and the two identified elements.\n6. Output the three elements of a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each element in a is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest is 2, which helps deduce the second element.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical; hence each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and easy to verify.\nrequirement pool:\n- Develop the main algorithm to restore the original array from the given sums.\n- Ensure the solution handles large numbers efficiently.\n- Optimize the solution for scalability across multiple test cases.\n- Provide clear and accurate output for each test case.\n- Implement error handling for invalid inputs.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. Using these observations, we can efficiently restore the original array. We will use Python's built-in capabilities to handle large integers and ensure the solution is scalable for multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array of sums is sorted such that each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'largest': Refers to the sum of all three integers in array a, which is the largest element in array b.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the original integers in array a.\n2. Identify the largest element in array b, which is the sum of all three integers in array a.\n3. Use the smallest and largest elements to deduce the other two integers by considering the properties of sums of subsequences.\n4. Return the three integers as the restored array a.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest is 8. The other two numbers can be deduced as 4 and 3.\n    \n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, and the largest is 5. The other two numbers can be deduced as 2 and 2.\n    \n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, indicating that all three original numbers are the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest and largest elements and deducing the other two numbers will naturally handle these cases.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values up to 10^9. The output must be correctly formatted and handle multiple possible solutions.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output is correctly formatted\n- Support large integer values up to 10^9\n- Provide multiple possible solutions if applicable\nWe will use a simple mathematical approach to restore the original array 'a' from the given sorted array 'b'. The smallest element in 'b' is the smallest element in 'a'. The largest element in 'b' is the sum of all elements in 'a'. By subtracting the smallest element from the second largest element in 'b', we can find the second element of 'a'. The third element of 'a' can be found by subtracting the first two elements from the largest element in 'b'. This approach is efficient and handles the constraints well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array 'a' consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sum of every possible combination of elements from the array 'a', excluding the empty set. For an array of three elements, there are 7 such sums.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is greater than or equal to the previous one.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in 'b', which corresponds to the smallest element in 'a'.\n2. Identify the largest element in 'b', which is the sum of all elements in 'a'.\n3. The second largest element in 'b' minus the smallest element gives the second element of 'a'.\n4. Subtract the first two elements of 'a' from the largest element in 'b' to get the third element of 'a'.\n5. Return the three elements of 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in 'b' are sums of subsequences of [1, 1, 1]. The smallest element is 1, and the largest is 3 (sum of all elements).\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second largest minus the smallest gives the second element as 2.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in 'b' are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest element is 1000000000, and the largest is 3000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all possible configurations of array 'b' as described in the requirement.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for speed and clarity\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b. Specifically, the first element of a is the smallest element of b, the second element is the second smallest element of b, and the third element can be deduced by subtracting the sum of the first two elements from the largest element in b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in the sorted array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to the smallest element in a.\n3. Identify the largest element in b, which is the sum of all elements in a.\n4. The second element of a can be deduced by taking the second smallest element in b.\n5. Calculate the third element of a by subtracting the sum of the first two elements from the largest element in b.\n6. Output the three elements of a for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so each element in a is 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest is 2, and the third element is calculated as 7 - (1 + 2) = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying and calculating elements based on their positions and sums in array b.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The constraints ensure that a valid solution exists for each test case. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Develop a function to restore the original array from subsequence sums\n- Ensure the solution is optimized for large input sizes\n- Implement input and output handling for multiple test cases\n- Validate the input constraints and handle edge cases\n- Provide documentation and examples for understanding the solution\nWe will solve the problem by recognizing that the largest number in the sorted array b is the sum of all three numbers in the original array a. The smallest number in b is one of the original numbers. The second smallest number in b is another original number. The third number can be found by subtracting the first two from the largest number. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in the sorted array b is the sum of all three numbers in the original array a. This helps in identifying the total sum of the original array.\n\n# [code logic]\n1. Identify the largest number in array b, which represents the sum of all three numbers in array a.\n2. The smallest number in b is one of the original numbers in a.\n3. The second smallest number in b is another original number in a.\n4. Calculate the third number by subtracting the first two identified numbers from the largest number.\n5. Return these three numbers as the restored array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are the original numbers.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two numbers are part of the original array, and the third is calculated by subtracting these from the largest number.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are the original numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest two numbers and calculating the third from the largest number inherently handles these cases.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, true, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 775, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 468}
