{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to deduce the original array a from the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to deduce the original array a from the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out the numbers 1, 4, and 3. He also calculated the sums 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to deduce the original array a from the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. Unfortunately, Polycarp lost the array a; he only has the array b left, so help him to restore the array a. Your task is to deduce the original array a from the given array b.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef deduce_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Deduces the original array of three integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the deduced original array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = deduce_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef deduce_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Deduce the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = b[0]\n        # The second smallest element in 'b' is the second smallest element in 'a'\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[-1]\n        # Deduce the third element of 'a' by subtracting the first two elements from the sum\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = deduce_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef deduce_original_array(b: List[int]) -> List[int]:\n    \"\"\"Deduces the original array of three positive integers from the given sorted subsequence sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A list of 3 integers representing the original array.\n    \"\"\"\n    # The smallest element in b is the smallest element in the original array.\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element in the original array.\n    a2 = b[1]\n    # The largest element in b is the sum of all elements in the original array.\n    sum_all = b[-1]\n    # Calculate the third element of the original array.\n    a3 = sum_all - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = deduce_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef deduce_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Deduce the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = b[0]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[6]\n        # The second largest element in 'b' is the sum of the two largest elements in 'a'\n        sum_two_largest = b[5]\n        \n        # Deduce the elements of 'a'\n        a3 = sum_a - a1\n        a2 = sum_two_largest - a3\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = deduce_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef deduce_original_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Deduce the original array a from the given array b for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of deduced arrays a for each test case.\n    \"\"\"\n    result = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[-1]\n        # Deduce the third element of a by subtracting the first two identified elements from the largest element\n        a3 = sum_all - a1 - a2\n        # Append the deduced array to the result list\n        result.append([a1, a2, a3])\n    return result\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = deduce_original_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restore the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a', each containing 3 integers.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The smallest element in b is one of the elements in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The third element can be deduced by subtracting the first two elements from the largest element\n        a3 = sum_a - a1 - a2\n        \n        # Append the deduced array a to the results\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef deduce_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Deduces the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, where each test case is a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the deduced array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The smallest element in b is one of the elements in a\n        smallest = b[0]\n        # The second largest element in b is the sum of two elements in a\n        sum_two = b[5]\n        \n        # Deduce the elements of a\n        a1 = smallest\n        a2 = sum_two - smallest\n        a3 = sum_all - sum_two\n        \n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Output interface\n    results = deduce_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef deduce_original_array(t: int, test_cases: list[list[int]]) -> list[list[int]]:\n    \"\"\"Deduces the original array 'a' from the given sorted array 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of 7 integers representing array 'b'.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the deduced array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in 'b' is the smallest element in 'a'\n        a1 = b[0]\n        # The second smallest element in 'b' is the second smallest element in 'a'\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all elements in 'a'\n        sum_a = b[6]\n        # Deduce the third element of 'a' by subtracting the first two identified elements from the largest element\n        a3 = sum_a - a1 - a2\n        # Append the deduced array 'a' to the results\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = deduce_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef deduce_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Deduces the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing 3 integers representing the original array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[6]\n        # The second smallest element in b is the second smallest element in a\n        a2 = b[1]\n        # Deduce the third element of a using the properties of sums\n        a3 = a1_a2_a3 - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\n# Input interface\nnum_cases = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n\n# Output interface\nresults = deduce_original_array(test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef deduce_original_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Deduce the original array a from the given sorted sums array b.\n\n    Args:\n        b (list[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        tuple[int, int, int]: A tuple containing the three integers of the original array a.\n    \"\"\"\n    # The smallest element in b is one of the elements in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    sum_a = b[-1]\n    # The second smallest element in b helps deduce another element of a\n    a2 = b[1]\n    # Calculate the third element using the sum and the identified elements\n    a3 = sum_a - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = deduce_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires deducing the original array from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Efficiently deduce the original array from the given array\n- Ensure the solution is scalable for multiple test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output for each test case\n- Optimize memory usage\nWe will use a simple mathematical approach to deduce the original array from the given sorted array of sums. Since the array b contains sums of all non-empty subsequences of a, we can deduce that the smallest three numbers in b are the elements of a. This is because the smallest number is a_1, the second smallest is a_2, and the third smallest is a_3. The largest number in b is the sum of all three elements of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means that each element in array b is the sum of one or more elements from array a. The largest element in b is the sum of all elements in a.\n\n# [degree adverb]\n    'smallest': means that we need to identify the smallest three numbers in b to deduce the original array a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to the elements of array a.\n    3. The largest number in b is the sum of all three elements of a.\n    4. Return the three smallest numbers as the original array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and the sum of all three identical elements is the largest number.\n\n    Input: 1 1 2 2 3 3 4\n    Output: 1 2 1\n    Explanation: The smallest three numbers are 1, 1, and 2, which can form the original array.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are identical, and the sum of all three identical elements is the largest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers in b will suffice to deduce array a correctly.\n", "requirement analysis:\nThe task requires deducing the original array from a sorted array of sums of its non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring the output format is consistent and correct.\nrequirement pool:\n- Efficiently deduce the original array from the given array b.\n- Ensure the solution is scalable for up to 5000 test cases.\n- Provide clear and accurate output for each test case.\n- Handle large numbers efficiently within the constraints.\n- Optimize the solution for speed and performance.\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of the sums of non-empty subsequences. The smallest element in 'b' is the smallest element in 'a'. The second smallest element in 'b' is the second smallest element in 'a'. The largest element in 'b' is the sum of all elements in 'a'. Using these properties, we can efficiently reconstruct 'a'. We will use Python's built-in capabilities to handle input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array 'a' consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sums obtained by adding up all possible combinations of the elements in array 'a', excluding the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the array 'a' consists of exactly three elements, each greater than zero.\n    \n    '7 integers': Indicates that the array 'b' consists of exactly seven elements.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to the smallest element in array 'a'.\n2. Identify the second smallest element in array 'b', which corresponds to the second smallest element in array 'a'.\n3. Identify the largest element in array 'b', which is the sum of all elements in array 'a'.\n4. Deduce the third element of array 'a' by subtracting the first two elements from the largest element.\n5. Return the three elements as the reconstructed array 'a'.\n\n# [edge case] \n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = a = [999999998, 1, 1]\n    Explanation: The smallest two elements are both 1, and the largest element is 1000000000. Subtracting the two smallest from the largest gives 999999998.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = a = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, so each element in 'a' is 300000000.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = a = [1, 2, 2]\n    Explanation: The smallest element is 1, the second smallest is 2, and subtracting these from the largest (5) gives another 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying elements based on their positions in the sorted list handles these cases effectively.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a sorted list of their subsequence sums. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly to ensure it passes all test cases.\nrequirement pool:\n- Implement the main algorithm to deduce the original array from subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the algorithm for large integer values.\n- Format the output correctly for each test case.\n- Consider edge cases and ensure robustness.\nWe will implement a simple function to deduce the original array from the given subsequence sums. The approach involves using the properties of the sorted subsequence sums to directly extract the original array elements. The smallest element in the sorted list is the smallest element of the original array, and the largest element is the sum of all three original elements. The second smallest element is the second smallest element of the original array. This approach is efficient and handles large numbers well without requiring complex data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any combination of elements from the array, including individual elements and combinations of two or all three elements. The task involves calculating the sum of each possible subsequence.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next. This implies that the smallest element in b is the smallest element in a, and the largest element in b is the sum of all elements in a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. The second smallest element in b corresponds to the second smallest element in a.\n4. Calculate the third element of a by subtracting the first two identified elements from the largest element (sum of all elements).\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical numbers.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, the second smallest is 2, and the sum of all elements is 7. The third element is calculated as 7 - (1 + 2) = 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and identical, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given array.\n- Ensure the solution handles multiple test cases efficiently.\n- Optimize the solution for large integer values.\n- Validate the output format for each test case.\n- Provide documentation for the solution.\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of the sums of non-empty subsequences. The smallest element in 'b' is the smallest element in 'a'. The largest element in 'b' is the sum of all elements in 'a'. The second largest element in 'b' is the sum of the two largest elements in 'a'. Using these properties, we can efficiently reconstruct 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array 'a' consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array 'b' consists of exactly seven integers.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the array 'b', which corresponds to the smallest element in 'a'.\n    \n    'largest': Refers to the largest element in the array 'b', which is the sum of all elements in 'a'.\n\n# [code logic]\n1. Identify the smallest element in 'b', which corresponds to one of the elements in 'a'.\n2. Identify the largest element in 'b', which is the sum of all elements in 'a'.\n3. Identify the second largest element in 'b', which is the sum of the two largest elements in 'a'.\n4. Deduce the three elements of 'a' using these properties:\n   - Let a1 be the smallest element in 'b'.\n   - Let a3 be the largest element in 'b' minus a1.\n   - Let a2 be the second largest element in 'b' minus a3.\n5. Return a1, a2, and a3.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each element of 'a' is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second largest is 6, so a2 = 6 - 4 = 2.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each element of 'a' is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by leveraging the properties of subsequences and sorted order.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists, allowing for straightforward deduction of the original array.\nrequirement pool:\n- Develop a function to deduce the original array a from the given array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values up to 10^9.\n- Implement robust error handling for edge cases.\n- Provide clear documentation and comments in the code.\nWe will use a straightforward approach to deduce the original array a from the given array b. Since b is sorted and contains sums of all non-empty subsequences of a, we can directly deduce a by using the properties of these sums. Specifically, the smallest element in b is one of the elements of a, the second smallest is another, and the largest element in b is the sum of all three elements of a. This allows us to efficiently reconstruct a without complex calculations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Identify the smallest element in b, which is one of the elements of a.\n2. Identify the second smallest element in b, which is another element of a.\n3. Identify the largest element in b, which is the sum of all three elements of a.\n4. Deduce the third element of a by subtracting the first two identified elements from the largest element.\n5. Return the three elements as the original array a.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: The smallest three elements are all 1, and their sum is 3, which matches the largest element in b.\n    \n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest two elements are 1 and 2, and their sum with another 2 gives the largest element, which is 5.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: The smallest three elements are all 1000000000, and their sum is 3000000000, which matches the largest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest two elements and using them to deduce the third element from the largest sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and clear output for each test case.\nrequirement pool:\n- Efficiently deduce the original array from the given array\n- Ensure the solution is scalable for multiple test cases\n- Handle large numbers efficiently\n- Provide clear and accurate output for each test case\n- Optimize resource usage\nWe will use a simple mathematical deduction to restore the original array 'a' from the given array 'b'. Since 'b' is sorted and contains sums of all non-empty subsequences of 'a', we can deduce that the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements of 'a'. By using these properties, we can efficiently deduce the original array 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array 'a' consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sums of all possible combinations of the elements in array 'a', excluding the empty set. For an array of three elements, there are 7 such sums.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order'\n    Explanation: The array 'b' is sorted in a way that each subsequent element is greater than or equal to the previous one.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to one of the elements in array 'a'.\n2. Identify the largest element in array 'b', which is the sum of all elements in array 'a'.\n3. Deduce the other two elements of array 'a' by using the properties of subsequence sums:\n   - The second smallest element in 'b' is another element of 'a'.\n   - The third element can be deduced by subtracting the first two elements from the largest element.\n4. Return the three deduced elements as array 'a'.\n\n# [edge case]\n    b = [1, 3, 4, 4, 5, 7, 8] = a = [1, 4, 3]\n    Explanation: The smallest element is 1, which is one of the elements in 'a'. The largest element is 8, which is the sum of all elements in 'a'. The second smallest element is 3, and by deduction, the third element is 4.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = a = [4, 1, 2]\n    Explanation: The smallest element is 1. The largest element is 7. The second smallest element is 2. By deduction, the third element is 4.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = a = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal and sum up to the largest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible scenarios by using mathematical deduction based on properties of subsequences and sorted order.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and clear output for each test case.\nrequirement pool:\n- Efficiently deduce the original array from the given sorted sums.\n- Ensure the solution is scalable for up to 5000 test cases.\n- Handle large integer values up to 10^9.\n- Provide clear and accurate output for each test case.\n- Allow flexibility in output format if multiple solutions exist.\nWe will use a simple mathematical approach to deduce the original array a from the given array b. Since b contains the sums of all non-empty subsequences of a, we can identify the largest element in a as the largest element in b, and the smallest element in a as the smallest element in b. The third element can be deduced by subtracting the smallest element from the second largest element in b. This approach is efficient and handles large numbers well without requiring complex computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n# [phrase showing quantity relationship]\n    'sorted in non-decreasing order': means that the array b is sorted such that each subsequent element is greater than or equal to the previous one.\n\n# [degree adverb] \n    'largest': refers to the largest element in array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n    1. Identify the largest element in b, which is the sum of all elements in a.\n    2. Identify the smallest element in b, which corresponds to one of the elements in a.\n    3. Deduce the second element of a by subtracting the smallest element from the second largest element in b.\n    4. The third element can be deduced by subtracting the smallest element from the largest element in b.\n    5. Return the three deduced elements as array a.\n\n# [edge case] \n    Input: 1 1 1 3 3 3 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so the original array a consists of three identical elements.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, and the largest is 5. The second element can be deduced from the second largest sum (4) minus the smallest element (1).\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array a consists of three identical elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying and deducing elements based on sorted sums.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a sorted array of sums of all non-empty subsequences. The solution must handle up to 5000 test cases efficiently, ensuring that the deduced array is accurate and meets the constraints provided.\nrequirement pool:\n- Accurately deduce the original array from the given sorted sums.\n- Handle up to 5000 test cases efficiently.\n- Optimize the solution for large input sizes.\n- Ensure the solution is robust against edge cases.\n- Provide clear and concise output for each test case.\nWe will deduce the original array 'a' from the given sorted array 'b' by leveraging the properties of subsequences. Since 'b' is sorted and represents all non-empty subsequences of 'a', the smallest element in 'b' is the smallest element in 'a', the second smallest element in 'b' is the second smallest element in 'a', and the largest element in 'b' is the sum of all elements in 'a'. This allows us to deduce 'a' by selecting the first, second, and last elements of 'b'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For an array of 3 elements, there are 7 non-empty subsequences.\n\n# [phrase showing quantity relationship]\n    'sorted in non-decreasing order': This indicates that the array 'b' is sorted from smallest to largest, which helps in identifying the smallest and largest sums.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array 'b', which corresponds to the smallest element in array 'a'.\n    'largest': Refers to the largest element in the sorted array 'b', which corresponds to the sum of all elements in array 'a'.\n\n# [code logic]\n    1. For each test case, read the array 'b'.\n    2. Identify the smallest element in 'b' as one of the elements of 'a'.\n    3. Identify the second smallest element in 'b' as another element of 'a'.\n    4. Identify the largest element in 'b' as the sum of all elements in 'a'.\n    5. Deduce the third element of 'a' by subtracting the first two identified elements from the largest element.\n    6. Output the three deduced elements of 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = a = [1, 1, 1]\n    Explanation: All elements are equal, so each element is deduced as 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = a = [1, 2, 4]\n    Explanation: The smallest element is 1, second smallest is 2, and largest is 7 (sum of all elements).\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = a = [1000000000, 1000000000, 1000000000]\n    Explanation: All elements are equal and large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles them correctly by leveraging the properties of sorted subsequences.\n", "requirement analysis:\nThe task requires deducing the original array from a sorted array of sums of its non-empty subsequences. The solution must handle multiple test cases efficiently and ensure the output format is consistent. Given constraints ensure that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main algorithm to deduce array a from array b\n- Ensure the solution handles large numbers efficiently\n- Optimize the algorithm for performance across multiple test cases\n- Maintain consistent output format\n- Provide clear documentation and examples\nWe will deduce the original array 'a' from the given array 'b' by leveraging the properties of sums of non-empty subsequences. Since 'b' is sorted, the smallest element in 'b' is the smallest element in 'a'. The largest element in 'b' is the sum of all elements in 'a'. The second smallest element in 'b' is the second smallest element in 'a'. By using these properties, we can efficiently reconstruct 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array 'a' consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array 'b' consists of exactly seven integers, which are the sums of all non-empty subsequences of array 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in 'b', which corresponds to the smallest element in 'a'.\n    2. Identify the largest element in 'b', which is the sum of all elements in 'a'.\n    3. Use the second smallest element in 'b' to identify the second smallest element in 'a'.\n    4. Deduce the third element of 'a' using the properties of sums and the identified elements.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = a = [1, 1, 1]\n    Explanation: All elements are equal, so each subsequence sum is straightforward.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = a = [1, 2, 4]\n    Explanation: The smallest element is 1, and the largest sum is 7. The second smallest element helps identify the second element of 'a'.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = a = [1000000000, 1000000000, 1000000000]\n    Explanation: All elements are equal and large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing array 'a' from array 'b' inherently handles these scenarios.\n", "requirement analysis:\nThe task requires deducing the original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and clear output for each case.\nrequirement pool:\n- Efficiently deduce the original array from the given sums.\n- Ensure the solution handles the maximum constraints smoothly.\n- Provide clear and concise output for each test case.\n- Optimize for both speed and clarity.\n- Handle edge cases and large numbers effectively.\nWe will use a simple mathematical approach to deduce the original array from the given sorted sums. The smallest element in the array b is the smallest element in the original array a. The largest element in b is the sum of all elements in a. By using these two values and the second smallest value in b, we can deduce the original array efficiently. This approach ensures clarity and speed, handling up to 5000 test cases smoothly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in array b represents the sum of all elements in array a. This can be implemented by identifying the last element in the sorted array b.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b corresponds to one of the original elements in array a. This can be implemented by identifying the first element in the sorted array b.\n\n# [code logic]\n    1. For each test case, identify the smallest element in array b, which corresponds to one of the elements in array a.\n    2. Identify the largest element in array b, which is the sum of all elements in array a.\n    3. Use the second smallest element in array b to deduce another element of array a.\n    4. Calculate the third element using the sum and the identified elements.\n    5. Return the three deduced elements as array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums are consistent with the given array b.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest sum is 7. Using these, we deduce the original array.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sums are consistent with the given array b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by deducing elements based on sorted sums.\n"], "scores": [], "pass_results": [false, true, false, true, true, true, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 996, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 619}
