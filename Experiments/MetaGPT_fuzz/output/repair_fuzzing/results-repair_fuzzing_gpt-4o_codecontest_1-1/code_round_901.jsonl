{"name": "1598_B. Groups", "description": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "tags": ["brute force", "implementation"], "difficulty": 8, "id": 1598, "sample_io": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}], "test_list": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 1 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n-1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 0 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 1 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 0 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n-1 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 1\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 1 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n1 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 1 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 0 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 1 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 1 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 1\n0 0 1 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 0 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 1 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}], "task_id": "codecontest/59", "prompt": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will attend one session weekly on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), ensuring the two groups have different days. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nConsider every possible combination of days and student groupings to guarantee that each student's availability is met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "repair_prompt": ["n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will attend one session weekly on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), ensuring the two groups have different days. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nConsider every possible combination of days and student groupings to guarantee that each student's availability is met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will attend one session weekly on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), ensuring the two groups have different days. Furthermore, both groups should contain the same number of students. \n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson. They also specified which days are not convenient for them.\n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nConsider every possible combination of days and student groupings to guarantee that each student's availability is met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups, and each group will attend one session weekly on one of the five weekdays (Monday, Tuesday, Wednesday, Thursday, and Friday), ensuring the two groups have different days, and both groups should contain the same number of students. Each student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. Your task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider every possible combination of days and student groupings to guarantee that each student's availability is met.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing a list of student availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if a valid division is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                both_days_count = 0\n                \n                for student in case:\n                    if student[day1] and student[day2]:\n                        both_days_count += 1\n                    elif student[day1]:\n                        group1_count += 1\n                    elif student[day2]:\n                        group2_count += 1\n                \n                # Calculate the number of students that can be assigned to each group\n                max_group1 = group1_count + both_days_count\n                max_group2 = group2_count + both_days_count\n                \n                # Check if we can form two groups of equal size\n                if (max_group1 >= n // 2) and (max_group2 >= n // 2) and (group1_count + group2_count + both_days_count == n):\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport itertools\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if the division is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        possible = False\n        \n        # Iterate over all pairs of different weekdays\n        for day1, day2 in itertools.combinations(range(5), 2):\n            group1 = []\n            group2 = []\n            \n            # Try to divide students into two groups based on their availability\n            for student in case:\n                if student[day1] == 1 and len(group1) < n // 2:\n                    group1.append(student)\n                elif student[day2] == 1 and len(group2) < n // 2:\n                    group2.append(student)\n            \n            # Check if both groups have exactly n/2 students\n            if len(group1) == n // 2 and len(group2) == n // 2:\n                possible = True\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input().strip())\n        availability = [list(map(int, input().strip().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    results = can_divide_students(t, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups of equal size with different available days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing a list of student availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if a valid division is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students available on each day and both days\n                for student in case:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can form two groups of n/2 students\n                if count_day1 + both_days >= n // 2 and count_day2 + both_days >= n // 2:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom itertools import combinations\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with different convenient days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, either 'YES' or 'NO'.\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1, day2 in combinations(range(5), 2):\n            group1_count = 0\n            group2_count = 0\n            \n            # Count students who can attend on day1 and day2\n            for student in availability:\n                if student[day1] == 1:\n                    group1_count += 1\n                if student[day2] == 1:\n                    group2_count += 1\n            \n            # Check if both groups can have exactly half_n students\n            if group1_count >= half_n and group2_count >= half_n:\n                # Check if we can form two groups with different days\n                group1 = set()\n                group2 = set()\n                \n                for student_index, student in enumerate(availability):\n                    if student[day1] == 1:\n                        group1.add(student_index)\n                    if student[day2] == 1:\n                        group2.add(student_index)\n                \n                # Check if intersection of group1 and group2 is empty\n                if len(group1.intersection(group2)) == 0:\n                    possible = True\n                    break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing a list of student availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case indicating if a valid division is possible.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        possible = False\n        \n        # Iterate over all pairs of days\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students available on each day and both days\n                for student in case:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can form two groups of equal size\n                if (count_day1 + both_days >= n // 2) and (count_day2 + both_days >= n // 2):\n                    if (count_day1 + count_day2 + both_days) >= n:\n                        possible = True\n                        break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport itertools\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"\n    Determines if it is possible to divide students into two groups of equal sizes\n    such that each group attends on different weekdays and all students in a group\n    can attend on their group's day.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, where each test case\n            is a list of student availability for the weekdays.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" if a valid division is\n        possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n\n        # Iterate over all pairs of different weekdays\n        for day1, day2 in itertools.combinations(range(5), 2):\n            group1_count = 0\n            group2_count = 0\n            both_days_count = 0\n\n            for student in availability:\n                can_attend_day1 = student[day1]\n                can_attend_day2 = student[day2]\n\n                if can_attend_day1 and can_attend_day2:\n                    both_days_count += 1\n                elif can_attend_day1:\n                    group1_count += 1\n                elif can_attend_day2:\n                    group2_count += 1\n\n            # Check if we can form two groups of equal size\n            if group1_count <= half_n and group2_count <= half_n and (group1_count + group2_count + both_days_count) >= n:\n                possible = True\n                break\n\n        results.append(\"YES\" if possible else \"NO\")\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Call the function and print the results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        possible = False\n        \n        # Iterate over all pairs of different weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                \n                # Check each student's availability for the pair of days\n                for student in availability:\n                    if student[day1] == 1:\n                        group1_count += 1\n                    if student[day2] == 1:\n                        group2_count += 1\n                \n                # Check if both groups can have n/2 students\n                if group1_count >= n // 2 and group2_count >= n // 2:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom itertools import combinations\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students and their availability.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for n, availability in test_cases:\n        # Check all combinations of two different weekdays\n        possible = False\n        for day1, day2 in combinations(range(5), 2):\n            group1 = []\n            group2 = []\n            \n            for student in availability:\n                if student[day1] == 1:\n                    group1.append(student)\n                if student[day2] == 1:\n                    group2.append(student)\n            \n            # Check if both groups can have n/2 students\n            if len(group1) >= n // 2 and len(group2) >= n // 2:\n                possible = True\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    weekdays = 5  # Number of weekdays\n\n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n\n        # Iterate over all pairs of weekdays\n        for day1 in range(weekdays):\n            for day2 in range(day1 + 1, weekdays):\n                # Count students available on day1 and day2\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n\n                for student in availability:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n\n                # Check if we can form two groups of equal size\n                if count_day1 + both_days >= half_n and count_day2 + both_days >= half_n:\n                    possible = True\n                    break\n\n            if possible:\n                break\n\n        results.append(\"YES\" if possible else \"NO\")\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with equal sizes\n    attending on different convenient days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students\n                           and a list of their availability for each day.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for n, availability in test_cases:\n        # Check all pairs of days\n        possible = False\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                both_days_count = 0\n                \n                for student in availability:\n                    if student[day1] and student[day2]:\n                        both_days_count += 1\n                    elif student[day1]:\n                        group1_count += 1\n                    elif student[day2]:\n                        group2_count += 1\n                \n                # Calculate the number of students that can be in each group\n                if group1_count + both_days_count >= n // 2 and group2_count + both_days_count >= n // 2:\n                    if group1_count + group2_count + both_days_count >= n:\n                        possible = True\n                        break\n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Interface using input() and print()\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. The key challenge is to ensure that each group can attend classes on different days while meeting all students' availability constraints.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each group attends classes on different days.\n- Optimize the algorithm for edge cases.\n- Provide clear output for each test case.\n- Consider user feedback for further improvements.\nWe will use a combinatorial approach to check all possible pairs of days and attempt to divide students into two groups based on their availability. The solution will leverage efficient data structures to handle the constraints and ensure scalability for large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for equal division into two groups.\n    'different days': The two groups must attend lessons on different weekdays.\n    'equal sizes': Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This means each group must contain exactly half of the total number of students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Iterate over all pairs of days (Monday to Friday) to check if they can be used for scheduling.\n    3. For each pair of days, attempt to divide students into two groups based on their availability for those days.\n    4. Ensure both groups have equal sizes and each student can attend the lesson on their group's chosen day.\n    5. If a valid division is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: \n    1\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Output: NO\n    Explanation: It's impossible to divide two students into two groups with different days since each student is only available on one specific day.\n\n    Test case with all students available on the same days:\n    Input:\n    1\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    1 1 0 0 0\n    1 1 0 0 0\n    Output: YES\n    Explanation: All students can attend lessons on Monday and Tuesday, allowing for equal division.\n\n    Test case with no possible division:\n    Input:\n    1\n    4\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    Output: NO\n    Explanation: Students are split between two days, but cannot be divided into two equal groups attending different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all pairs of days and attempting to divide students based on availability inherently handles these scenarios.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle multiple test cases and ensure that each student can attend lessons on their preferred days. The output should clearly indicate whether a valid grouping is possible for each test case.\nrequirement pool:\n- Efficiently process up to 10,000 test cases.\n- Ensure equal group sizes with different weekdays.\n- Maximize student satisfaction by meeting availability.\n- Provide clear output for each test case.\n- Optimize for large input sizes up to 100,000 students.\nWe will use a brute-force approach to check all possible combinations of two different weekdays and student groupings. For each pair of days, we will attempt to divide the students into two equal groups such that each student can attend the lesson on their group's assigned day. We will utilize the itertools library to generate combinations of days and student groupings efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be divided into two equal groups.\n    'different days': The two groups must attend lessons on different weekdays.\n    'equal sizes': Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This means that each group must contain exactly half of the total number of students. In code, this can be implemented by ensuring that each group has n/2 students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Use combinations to select two different weekdays.\n    3. For each pair of weekdays, try to divide the students into two groups such that:\n       - Each group has n/2 students.\n       - Each student in a group can attend the lesson on the group's assigned day.\n    4. If a valid grouping is found for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, they cannot attend lessons on different days as required.\n\n    Test case with all students available on the same day:\n    Input: 4\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n    Output: YES\n    Explanation: Any two different days can be chosen since all students are available every day.\n\n    Test case with no possible grouping:\n    Input: 4\n           1 0 0 0 0\n           0 1 0 0 0\n           0 0 1 0 0\n           0 0 0 1 0\n    Output: NO\n    Explanation: No two different days can be chosen to satisfy all students' availability.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The brute-force approach inherently checks all possible combinations and ensures that constraints are met.\n", "requirement analysis:\nThe problem requires dividing students into two groups of equal size, each attending lessons on different days, based on their availability. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. The algorithm should explore all possible combinations of days and groupings to ensure each student's availability is met.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases\n- Ensure each group has equal number of students\n- Choose different days for each group\n- Optimize for minimal computational complexity\n- Provide clear output for each test case\nWe will use a combinatorial approach to check all possible pairs of days and see if we can divide the students into two groups of equal size such that each group can attend on one of the chosen days. We will iterate over all pairs of days and for each pair, count the number of students who can attend on each day. If we find a valid division, we will return 'YES', otherwise 'NO'. This approach ensures that we explore all possible combinations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'equal sizes'\n    Explanation: This means that the two groups formed must have the same number of students, which is half of the total number of students since n is even.\n\n    'different days'\n    Explanation: The two groups must attend lessons on different weekdays, ensuring no overlap in their schedules.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This indicates that each group should have n/2 students. In code, this can be implemented by checking if the number of students in each group equals n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all pairs of days (Monday to Friday).\n    2. For each pair, check if it's possible to divide students into two groups such that:\n       - Each group has n/2 students.\n       - Each student in a group can attend on the chosen day for that group.\n    3. If a valid division is found for any pair, return 'YES'.\n    4. If no valid division is found after checking all pairs, return 'NO'.\n\n# [edge case]\n    Case 1: \n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, it's impossible to divide them into two groups of equal size (1 student each) with different days.\n\n    Case 2:\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: The first two students can attend on Monday or Tuesday, and the last two on Wednesday, Thursday, or Friday.\n\n    Case 3:\n    Input: 6\n           1 0 0 0 0\n           1 0 0 0 0\n           0 1 0 0 0\n           0 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: The first two students can attend on Monday, the next two on Tuesday, and the last two on any of Wednesday, Thursday, or Friday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking for valid groupings will naturally handle these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently check all possible combinations of days and groupings to ensure each student's availability is met. The constraints ensure that the problem is computationally feasible within the given limits.\nrequirement pool:\n- Implement the main algorithm to divide students into two groups based on availability.\n- Ensure the solution handles up to 10,000 test cases efficiently.\n- Optimize the algorithm for edge cases where student availability is limited.\n- Provide detailed comments and documentation for code readability.\n- Implement additional test cases to ensure robustness.\nWe will iterate over all possible pairs of days and check if it's possible to divide the students into two groups such that each group can attend on one of the chosen days. We will use a combination of set operations and counting to efficiently determine if a valid grouping exists. The solution will leverage Python's itertools library to generate combinations of days.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be perfectly divided into two equal groups.\n    'two groups': Students need to be divided into two groups of equal size.\n    'different days': Each group must attend on a different weekday.\n    'convenient': A student can only attend on days they marked as convenient.\n\n# [phrase showing quantity relationship]\n    'two groups': This indicates that the students must be split into exactly two groups.\n    'equal sizes': Each group must have the same number of students, which is n/2 for n students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all possible pairs of weekdays (using combinations from itertools).\n4. For each pair of days, try to divide the students into two groups:\n   - Group 1 attends on the first day of the pair.\n   - Group 2 attends on the second day of the pair.\n5. Check if it's possible to divide the students such that each group has n/2 students and all students in a group can attend on their group's day.\n6. If a valid division is found for any pair of days, print \"YES\". If no valid division is found after checking all pairs, print \"NO\".\n\n# [edge case]\n    1. Input: 2\n       1 0 0 0 0\n       0 1 0 0 0\n       Expected Output: NO\n       Explanation: There are only two students, and they have no common convenient day to form two groups with different days.\n       \n    2. Input: 4\n       1 1 0 0 0\n       1 1 0 0 0\n       0 0 1 1 1\n       0 0 1 1 1\n       Expected Output: YES\n       Explanation: The first two students can attend on Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. They can be split into two groups with different days.\n\n    3. Input: 6\n       1 0 0 0 1\n       1 0 0 0 1\n       0 1 0 1 0\n       0 1 0 1 0\n       1 0 0 0 1\n       0 1 0 1 0\n       Expected Output: YES\n       Explanation: The first and last three students can be grouped separately with different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all possible pairs of days and checking for valid groupings will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to divide students into two equal groups based on their availability for different weekdays. The solution must ensure that each group attends classes on different days and that the chosen days are convenient for all students in the respective group. The algorithm should efficiently handle up to 10,000 test cases and a total of 100,000 students.\nrequirement pool:\n- Develop an algorithm to divide students into two equal groups based on availability.\n- Ensure the chosen days for each group are different and convenient for all students.\n- Optimize the solution to handle large input sizes efficiently.\n- Provide clear output indicating whether the division is possible.\n- Consider edge cases where division may not be possible.\nWe will implement a function that iterates over all possible pairs of days and checks if it's possible to divide the students into two groups such that each group can attend on one of the chosen days. The function will use a combination of set operations and counting to efficiently determine if a valid grouping is possible. Given the constraints, the solution will be optimized to handle up to 10,000 test cases and a total of 100,000 students using efficient data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number of students'\n    Explanation: This means that the number of students can be evenly divided into two groups.\n\n    'different days'\n    Explanation: The two groups must attend lessons on different weekdays.\n\n    'equal sizes'\n    Explanation: Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This means that the number of students in each group must be the same, which can be implemented by ensuring the division of students results in two groups of size n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible pairs of days (Monday to Friday).\n    2. For each pair, check if it's possible to divide the students into two groups such that each group can attend on one of the chosen days.\n    3. Use set operations to determine if a valid grouping is possible for each pair.\n    4. If a valid grouping is found for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, it's impossible to divide them into two groups with different days since each student is only available on one day.\n\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: The first two students can attend on Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. Thus, a valid division is possible.\n\n    Input: 6\n           1 0 0 0 0\n           1 0 0 0 0\n           0 1 0 0 0\n           0 1 0 0 0\n           0 0 1 0 0\n           0 0 1 0 0\n    Output: NO\n    Explanation: Each pair of students is only available on one specific day, making it impossible to divide them into two groups with different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all possible pairs of days and checking for valid groupings will naturally handle these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. The key challenge is to ensure that each student can attend on their preferred day while maintaining equal group sizes and different days for each group.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student is grouped based on their availability.\n- Optimize the algorithm for edge cases.\n- Provide clear and concise output for each test case.\n- Consider scalability for future extensions.\nWe will iterate over all possible pairs of days and try to divide the students into two groups such that each group can attend on one of the chosen days. We will use a combination of set operations and counting to efficiently determine if a valid grouping is possible. The solution will leverage the itertools library to generate combinations of days and will ensure that the solution is efficient enough to handle the maximum constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be perfectly divided into two equal groups.\n    'different days': The two groups must attend on different weekdays.\n    'convenient': Each student has specified which days are convenient for them to attend.\n\n# [phrase showing quantity relationship]\n    'two groups': The students need to be divided into exactly two groups.\n    'equal sizes': Each group must have the same number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all possible pairs of different weekdays (using combinations from itertools).\n4. For each pair of days, try to divide the students into two groups:\n   - Group 1 attends on the first day of the pair.\n   - Group 2 attends on the second day of the pair.\n5. Check if it's possible to divide the students such that each group has n/2 students and all students in a group can attend on their group's day.\n6. If a valid division is found for any pair of days, print \"YES\". If no valid division is found after checking all pairs, print \"NO\".\n\n# [edge case]\n    2\n    4\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    = YES\n    Explanation: All students are available on all days, so any two different days can be chosen for the groups.\n\n    2\n    4\n    1 0 0 0 0\n    0 1 0 0 0\n    0 0 1 0 0\n    0 0 0 1 0\n    = NO\n    Explanation: Each student is only available on a different day, making it impossible to form two groups with different days.\n\n    2\n    6\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    0 0 1 0 0\n    0 0 1 0 0\n    = YES\n    Explanation: Students can be divided into three pairs, each pair attending on a different day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all possible pairs of days and checking for valid groupings will naturally handle these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases with a total of 100,000 students. Each student has a binary availability for five days, and the goal is to find two distinct days where students can be divided into two groups with equal numbers, ensuring each student can attend on their group's chosen day.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student is grouped according to their availability.\n- Optimize the algorithm for edge cases.\n- Provide clear and concise output for each test case.\n- Consider user experience in terms of input and output format.\nWe will iterate over all possible pairs of days and try to divide the students into two groups such that each group can attend on one of the chosen days. We will use a combination of set operations and counting to efficiently determine if a valid grouping is possible for each pair of days.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be perfectly divided into two equal groups.\n    'different days': The two groups must attend on different weekdays.\n    'convenient': A student can only attend on days they marked as convenient (1 in the input).\n\n# [phrase showing quantity relationship]\n    'two groups': The students need to be divided into exactly two groups.\n    'equal sizes': Each group must have the same number of students, which is n/2.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all possible pairs of different weekdays (e.g., Monday-Tuesday, Monday-Wednesday, etc.).\n4. For each pair of days, try to divide the students into two groups:\n   - Group 1 attends on the first day of the pair.\n   - Group 2 attends on the second day of the pair.\n5. Check if it's possible to assign students to these groups such that:\n   - Each group has n/2 students.\n   - All students in a group can attend on their group's assigned day.\n6. If a valid division is found for any pair of days, print \"YES\" for that test case; otherwise, print \"NO\".\n\n# [edge case]\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: With only two students and each having a different available day, it's impossible to form two groups with different days.\n\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    = YES\n    Explanation: The first two students can form one group attending on either Monday or Tuesday, and the last two can form another group attending on Wednesday, Thursday, or Friday.\n\n    6\n    1 0 0 0 0\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: All students are only available on one specific day, making it impossible to form two groups with different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking for valid groupings will naturally handle these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must consider all possible combinations of days and groupings to ensure each student's availability is met. The constraints require an efficient algorithm due to the potential large number of test cases and students.\nrequirement pool:\n- Develop an efficient algorithm to handle up to 10^4 test cases.\n- Ensure the solution can handle up to 10^5 students in total.\n- Optimize the solution for edge cases where student availability is limited.\n- Provide clear and concise output for each test case.\n- Implement a user-friendly interface for input and output handling.\nWe will use a combinatorial approach to check all possible pairs of weekdays and attempt to divide students into two groups based on their availability. The solution will leverage efficient data structures to handle the constraints and ensure scalability. We will use Python's itertools library to generate combinations of weekdays and numpy for efficient array operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is even, which means they can be perfectly divided into two equal groups.\n    'different days': Each group must attend on a different weekday.\n    'convenient': A student can only attend on days marked as 1 in their availability.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Both groups must have the same number of students, which is n/2 for each group.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students and their availability.\n2. Use combinations to generate all possible pairs of different weekdays.\n3. For each pair of weekdays, try to divide the students into two groups:\n   - Group 1 attends on the first day of the pair.\n   - Group 2 attends on the second day of the pair.\n4. Check if it's possible to divide the students such that each group has n/2 students and all students in a group can attend on their assigned day.\n5. If a valid division is found for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: \n    Input: \n    2\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected Output: NO\n    Explanation: There are only two students, and they cannot attend on the same day, making it impossible to form two groups with different days.\n\n    Case 2:\n    Input:\n    1\n    4\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    Expected Output: YES\n    Explanation: All students can attend on any day, so it's easy to divide them into two groups with different days.\n\n    Case 3:\n    Input:\n    3\n    6\n    1 0 0 0 0\n    0 1 0 0 0\n    0 0 1 0 0\n    0 0 0 1 0\n    0 0 0 0 1\n    1 0 0 0 0\n    Expected Output: NO\n    Explanation: The distribution of availability makes it impossible to form two equal groups with different days.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no valid division is possible. This involves checking all combinations of days and ensuring that the division criteria are met for each combination. If no valid division is found after checking all possibilities, return \"NO\".\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must consider all possible combinations of days and groupings to ensure each student's availability is met. The constraints are significant, with up to 10,000 test cases and a total of 100,000 students, necessitating an efficient algorithm.\nrequirement pool:\n- Develop an efficient algorithm to handle up to 10,000 test cases.\n- Ensure the solution meets all constraints and edge cases.\n- Optimize the algorithm for scalability and performance.\n- Provide clear and concise output for each test case.\n- Document the solution for ease of understanding and maintenance.\nWe will use a combinatorial approach to check all possible pairs of weekdays and attempt to divide students into two groups based on their availability. The algorithm will iterate over all pairs of days and check if it's possible to split the students into two equal groups where each student can attend on their group's assigned day. We will utilize efficient data structures to keep track of student availability and ensure the solution is scalable for large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even': The number of students is always even, which allows for equal division into two groups.\n    'different days': The two groups must attend lessons on different weekdays.\n    'equal sizes': Both groups must have the same number of students.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This means each group must contain exactly half of the total number of students.\n    'different days': This means the two groups must attend lessons on two distinct weekdays.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Iterate over all pairs of weekdays (Monday to Friday).\n    3. For each pair, attempt to divide the students into two groups based on their availability for the chosen days.\n    4. Check if both groups can be formed with equal sizes and attend lessons on different days.\n    5. If a valid division is found for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: \n    2\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Output: NO\n    Explanation: It's impossible to divide two students into two groups with different days since each student is only available on one distinct day.\n\n    Test case with all students available on the same day:\n    Input:\n    2\n    4\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    Output: YES\n    Explanation: All students are available every day, so any two different days can be chosen.\n\n    Test case with no possible division:\n    Input:\n    2\n    4\n    1 0 0 0 0\n    0 1 0 0 0\n    0 0 1 0 0\n    0 0 0 1 0\n    Output: NO\n    Explanation: Each student is only available on a unique day, making it impossible to form two groups with different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for valid group division inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle multiple test cases and ensure that each student can attend on their preferred day. The challenge lies in finding two distinct days where students can be evenly split.\nrequirement pool:\n- Efficiently handle up to 10^5 students across all test cases.\n- Ensure each student is grouped based on their availability.\n- Optimize the algorithm to handle edge cases.\n- Provide clear and concise output for each test case.\n- Consider future scalability for more complex scheduling.\nWe will iterate over all possible pairs of days and check if it's possible to divide the students into two groups such that each group can attend on one of the chosen days. This involves checking if there are enough students available on each day to form two equal groups. We will use a combination of nested loops and set operations to efficiently determine the feasibility of each pair of days.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number of students'\n    Explanation: This ensures that students can be divided into two equal groups.\n\n    'different days for groups'\n    Explanation: Each group must attend on a different weekday, ensuring no overlap in scheduling.\n\n    'convenient days'\n    Explanation: Each student has specific days they can attend, which must be considered when forming groups.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is n/2 for each group.\n    Implementation: Ensure that each group formed has exactly n/2 students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all possible pairs of weekdays.\n    2. For each pair, check if it's possible to divide students into two groups such that:\n       - Each group can attend on one of the chosen days.\n       - Both groups have equal sizes.\n    3. Use set operations to efficiently check student availability for each day.\n    4. If a valid configuration is found for any pair of days, return \"YES\". Otherwise, return \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, it's impossible to form two groups with different days.\n\n    Test case with all students available on the same day:\n    Input: 4\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n    Output: YES\n    Explanation: Any two days can be chosen since all students are available every day.\n\n    Test case with no possible division:\n    Input: 4\n           1 0 0 0 0\n           0 1 0 0 0\n           0 0 1 0 0\n           0 0 0 1 0\n    Output: NO\n    Explanation: No two days can be chosen to satisfy all students' availability.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs of days and checking feasibility will naturally handle these scenarios.\n"], "scores": [], "pass_results": [true, false, false, true, true, false, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 901, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "mutate_method": "rephrase_one", "parent_index": 407}
