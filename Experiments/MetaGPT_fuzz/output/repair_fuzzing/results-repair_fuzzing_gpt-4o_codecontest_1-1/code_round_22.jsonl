{"name": "1594_D. The Number of Imposters", "description": "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus).\n\nIn each game, Theofanis plays with n other players. Since they all have the same name, they are numbered from 1 to n.\n\nThe players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c.\n\nAn imposter always lies, and a crewmate always tells the truth. \n\nHelp Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation).\n\nNote that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "tags": ["constructive algorithms", "dfs and similar", "dp", "dsu", "graphs"], "difficulty": 10, "id": 1594, "sample_io": [{"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}], "test_list": [{"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n2\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["4\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n-1\n2\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n4\n1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n4\n-1\n2\n9\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n9\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n10 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n9\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n3\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n1 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n4\n2\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n5\n1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["2\n4\n-1\n2\n13\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n4 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n3\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 3 crewmate\n1 3 imposter\n10 0\n", "output": ["4\n3\n-1\n2\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n4 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n4 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n3\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n8 0\n", "output": ["2\n4\n1\n-1\n8\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n-1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n2\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n2 0\n", "output": ["2\n4\n-1\n5\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n2\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["4\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n-1\n-1\n2\n9\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n-1\n1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 3 crewmate\n2 3 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["-1\n4\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n15 0\n", "output": ["2\n4\n1\n-1\n15\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n4\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n6 0\n", "output": ["2\n3\n1\n-1\n6\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n3\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n7 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n6\n-1\n2\n7\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n4\n2\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n5 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n4\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n3\n-1\n2\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["2\n4\n1\n2\n13\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n4 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n4 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n-1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n7 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 4 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n6\n3\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n4 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n2 0\n", "output": ["2\n4\n-1\n2\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n10 0\n", "output": ["2\n4\n2\n2\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n-1\n1\n-1\n9\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n10 0\n", "output": ["2\n4\n1\n-1\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n-1\n-1\n-1\n4\n"]}, {"input": "5\n6 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 1 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["5\n4\n-1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["4\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 4 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n-1\n1\n-1\n7\n"]}, {"input": "5\n4 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["3\n3\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n-1\n1\n-1\n5\n"]}, {"input": "5\n8 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["7\n4\n2\n-1\n2\n"]}, {"input": "5\n6 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["5\n4\n1\n2\n13\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 4 imposter\n2 1 crewmate\n6 5\n1 1 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n4\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n4 5 crewmate\n1 4 imposter\n2 1 imposter\n4 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n3\n-1\n5\n"]}, {"input": "5\n4 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["3\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n10 0\n", "output": ["2\n4\n2\n-1\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 3 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n5\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n2 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n2 0\n", "output": ["2\n4\n-1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n1 3 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n2 2 crewmate\n1 2 imposter\n2 0\n", "output": ["2\n4\n1\n2\n2\n"]}, {"input": "5\n5 2\n1 2 imposter\n4 2 crewmate\n10 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n8\n-1\n2\n5\n"]}, {"input": "5\n10 2\n1 2 imposter\n4 2 crewmate\n10 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["9\n8\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n3\n2\n5\n"]}, {"input": "5\n6 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["5\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n4\n-1\n2\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n3\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 1 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n-1\n-1\n2\n4\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n-1\n1\n-1\n2\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 4 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 2 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n-1\n5\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n4 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n-1\n1\n2\n5\n"]}, {"input": "5\n4 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["3\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n8 0\n", "output": ["2\n4\n1\n2\n8\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n2\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n3 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n-1\n2\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 3 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n4\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 3 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 3 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 3 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 3 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n1 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n3 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 4 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 1 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n5\n1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n2 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n3 5 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 4 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n3\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 3 imposter\n3 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 1 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n8 0\n", "output": ["2\n4\n1\n-1\n8\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n1 4 imposter\n2 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n3 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n3 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 4 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n4\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n2\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n4 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 3 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n4\n-1\n2\n9\n"]}, {"input": "5\n3 2\n1 2 imposter\n3 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n4\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 1 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n4 2\n1 4 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n3\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n3 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n7 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 1 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 2 crewmate\n2 5 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["4\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 1 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n4 5 crewmate\n1 4 imposter\n2 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n2 3 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n2\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 2 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 3 imposter\n2 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 1 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 5 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 1 crewmate\n2 4 imposter\n1 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 5 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 3 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 1 crewmate\n2 5 crewmate\n2 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 3 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n2 3 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n4\n1\n-1\n2\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 3 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["2\n4\n-1\n2\n13\n"]}], "task_id": "codecontest/54", "prompt": "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "repair_prompt": ["Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies. A crewmate, on the other hand, always tells the truth about other players. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n, and the players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple, Dict\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    def dfs(player: int, role: int, graph: Dict[int, List[Tuple[int, str]]], roles: List[int]) -> bool:\n        \"\"\"Perform DFS to assign roles and check for contradictions.\"\"\"\n        stack = [(player, role)]\n        while stack:\n            current, current_role = stack.pop()\n            if roles[current] != -1:\n                if roles[current] != current_role:\n                    return False\n                continue\n            roles[current] = current_role\n            for neighbor, comment in graph[current]:\n                expected_role = 1 - current_role if comment == 'imposter' else current_role\n                stack.append((neighbor, expected_role))\n        return True\n\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n\n        graph = {i: [] for i in range(1, n + 1)}\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, c))\n\n        roles = [-1] * (n + 1)\n        max_imposters_count = 0\n        contradiction_found = False\n\n        for player in range(1, n + 1):\n            if roles[player] == -1:\n                imposters_count = 0\n                crewmates_count = 0\n                if not dfs(player, 0, graph, roles):\n                    contradiction_found = True\n                    break\n                for p in range(1, n + 1):\n                    if roles[p] == 0:\n                        crewmates_count += 1\n                    elif roles[p] == 1:\n                        imposters_count += 1\n                max_imposters_count += max(imposters_count, crewmates_count)\n\n        if contradiction_found:\n            results.append(-1)\n        else:\n            results.append(max_imposters_count)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    # Output interface\n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Dict\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    def dfs(player: int, role: int, roles: Dict[int, int], graph: Dict[int, List[Tuple[int, str]]]) -> bool:\n        \"\"\"Perform DFS to assign roles and check for contradictions.\"\"\"\n        stack = [(player, role)]\n        while stack:\n            current, current_role = stack.pop()\n            if current in roles:\n                if roles[current] != current_role:\n                    return False\n                continue\n            roles[current] = current_role\n            for neighbor, comment in graph[current]:\n                if comment == 'imposter':\n                    stack.append((neighbor, 1 - current_role))\n                else:  # comment == 'crewmate'\n                    stack.append((neighbor, current_role))\n        return True\n\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n\n        graph = {i: [] for i in range(1, n + 1)}\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, c))\n\n        roles = {}\n        max_imposters_count = 0\n        is_possible = True\n\n        for player in range(1, n + 1):\n            if player not in roles:\n                roles1, roles2 = {}, {}\n                if dfs(player, 0, roles1, graph):\n                    imposters1 = sum(1 for role in roles1.values() if role == 1)\n                else:\n                    imposters1 = -1\n\n                if dfs(player, 1, roles2, graph):\n                    imposters2 = sum(1 for role in roles2.values() if role == 1)\n                else:\n                    imposters2 = -1\n\n                if imposters1 == -1 and imposters2 == -1:\n                    is_possible = False\n                    break\n\n                if imposters1 > imposters2:\n                    roles.update(roles1)\n                    max_imposters_count += imposters1\n                else:\n                    roles.update(roles2)\n                    max_imposters_count += imposters2\n\n        if is_possible:\n            results.append(max_imposters_count)\n        else:\n            results.append(-1)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        index += 1\n        comments = []\n        for _ in range(m):\n            i, j, c = data[index].split()\n            comments.append((int(i), int(j), c))\n            index += 1\n        test_cases.append((n, m, comments))\n    \n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nimport networkx as nx\n\ndef determine_roles(t: int, test_cases: list) -> list:\n    \"\"\"Determine the maximum number of imposters or detect contradictions.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing number of players, number of comments, and the comments.\n\n    Returns:\n        list: List of integers representing the maximum number of imposters or -1 for contradictions.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        # Initialize graph using networkx\n        graph = nx.Graph()\n\n        # Add nodes for each player\n        graph.add_nodes_from(range(1, n + 1))\n\n        # Add edges based on comments\n        for comment in comments:\n            i, j, c = comment.split()\n            i, j = int(i), int(j)\n            graph.add_edge(i, j, role=c)\n\n        # Function to perform DFS and check for contradictions\n        def dfs(node, role, roles):\n            if node in roles:\n                return roles[node] == role\n            roles[node] = role\n            for neighbor in graph.neighbors(node):\n                edge_role = graph[node][neighbor]['role']\n                expected_role = 'imposter' if edge_role == 'crewmate' else 'crewmate'\n                if not dfs(neighbor, expected_role, roles):\n                    return False\n            return True\n\n        contradiction_found = False\n        max_imposters = 0\n        roles = {}\n\n        # Traverse each player and determine roles\n        for player in range(1, n + 1):\n            if player not in roles:\n                if not dfs(player, 'imposter', roles):\n                    contradiction_found = True\n                    break\n                # Count imposters\n                max_imposters += sum(1 for r in roles.values() if r == 'imposter')\n\n        results.append(-1 if contradiction_found else max_imposters)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [input().strip() for _ in range(m)]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = determine_roles(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nimport networkx as nx\n\nclass ContradictionError(Exception):\n    \"\"\"Custom exception to handle contradictions in comments.\"\"\"\n    pass\n\ndef determine_roles(t: int, test_cases: list) -> list:\n    \"\"\"Determine the maximum number of imposters or detect contradictions.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples containing number of players, number of comments, and comments.\n\n    Returns:\n        list: List of integers representing the maximum number of imposters or -1 for contradictions.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        graph = nx.DiGraph()\n        for i in range(1, n + 1):\n            graph.add_node(i)\n\n        for comment in comments:\n            i, j, c = comment.split()\n            i, j = int(i), int(j)\n            if c == 'imposter':\n                graph.add_edge(i, j, role='imposter')\n            else:\n                graph.add_edge(i, j, role='crewmate')\n\n        try:\n            max_imposters = calculate_max_imposters(graph, n)\n            results.append(max_imposters)\n        except ContradictionError:\n            results.append(-1)\n\n    return results\n\ndef calculate_max_imposters(graph: nx.DiGraph, n: int) -> int:\n    \"\"\"Calculate the maximum number of imposters using DFS.\n\n    Args:\n        graph (nx.DiGraph): Graph representing players and comments.\n        n (int): Number of players.\n\n    Returns:\n        int: Maximum number of imposters.\n\n    Raises:\n        ContradictionError: If a contradiction is found in comments.\n    \"\"\"\n    roles = {}\n    max_imposters = 0\n\n    def dfs(node, role):\n        if node in roles:\n            if roles[node] != role:\n                raise ContradictionError\n            return\n        roles[node] = role\n        if role == 'imposter':\n            nonlocal max_imposters\n            max_imposters += 1\n\n        for neighbor in graph.successors(node):\n            edge_role = graph[node][neighbor]['role']\n            if role == 'imposter':\n                next_role = 'crewmate' if edge_role == 'imposter' else 'imposter'\n            else:\n                next_role = edge_role\n            dfs(neighbor, next_role)\n\n    for node in graph.nodes:\n        if node not in roles:\n            dfs(node, 'imposter')\n\n    return max_imposters\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [input().strip() for _ in range(m)]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = determine_roles(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    def find(x: int) -> int:\n        \"\"\"Find the root of the node x with path compression.\"\"\"\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x: int, y: int) -> None:\n        \"\"\"Union two nodes x and y.\"\"\"\n        rootX = find(x)\n        rootY = find(y)\n        if rootX != rootY:\n            parent[rootY] = rootX\n\n    results = []\n    for n, m, comments in test_cases:\n        parent = {i: i for i in range(1, n + 1)}\n        role = {i: None for i in range(1, n + 1)}\n        contradiction = False\n\n        for i, j, c in comments:\n            if c == 'imposter':\n                if role[i] is None:\n                    role[i] = 'crewmate'\n                if role[j] is None:\n                    role[j] = 'imposter'\n                if role[i] == 'imposter' or role[j] == 'crewmate':\n                    contradiction = True\n                    break\n                union(i, j)\n            elif c == 'crewmate':\n                if role[i] is None:\n                    role[i] = 'imposter'\n                if role[j] is None:\n                    role[j] = 'crewmate'\n                if role[i] == 'crewmate' or role[j] == 'imposter':\n                    contradiction = True\n                    break\n                union(i, j)\n\n        if contradiction:\n            results.append(-1)\n        else:\n            # Calculate the maximum number of imposters\n            imposter_count = sum(1 for i in range(1, n + 1) if role[i] == 'imposter')\n            results.append(imposter_count)\n\n    return results\n\n# Input interface\n# Read number of test cases\nt = int(input())\n# Read each test case\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Call the function and print results\nresults = find_max_imposters(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass UnionFind:\n    \"\"\"A class to represent a union-find data structure with path compression and union by rank.\"\"\"\n    \n    def __init__(self, size: int):\n        \"\"\"Initialize the union-find structure.\"\"\"\n        self.parent = list(range(size))\n        self.rank = [0] * size\n        self.size = [1] * size\n        self.component_size = [0] * size\n\n    def find(self, node: int) -> int:\n        \"\"\"Find the root of the node with path compression.\"\"\"\n        if self.parent[node] != node:\n            self.parent[node] = self.find(self.parent[node])\n        return self.parent[node]\n\n    def union(self, node1: int, node2: int) -> bool:\n        \"\"\"Union two nodes and return if they were already connected.\"\"\"\n        root1 = self.find(node1)\n        root2 = self.find(node2)\n\n        if root1 == root2:\n            return False\n\n        if self.rank[root1] > self.rank[root2]:\n            self.parent[root2] = root1\n            self.size[root1] += self.size[root2]\n        elif self.rank[root1] < self.rank[root2]:\n            self.parent[root1] = root2\n            self.size[root2] += self.size[root1]\n        else:\n            self.parent[root2] = root1\n            self.rank[root1] += 1\n            self.size[root1] += self.size[root2]\n\n        return True\n\n    def connected(self, node1: int, node2: int) -> bool:\n        \"\"\"Check if two nodes are connected.\"\"\"\n        return self.find(node1) == self.find(node2)\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum number of imposters or detect contradictions for each test case.\"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        uf = UnionFind(2 * n)  # We use 2*n to handle both roles for each player\n\n        contradiction = False\n\n        for i, j, c in comments:\n            i -= 1\n            j -= 1\n\n            if c == \"imposter\":\n                if uf.connected(i, j + n) or uf.connected(i + n, j):\n                    contradiction = True\n                    break\n                uf.union(i, j)\n                uf.union(i + n, j + n)\n            elif c == \"crewmate\":\n                if uf.connected(i, j) or uf.connected(i + n, j + n):\n                    contradiction = True\n                    break\n                uf.union(i, j + n)\n                uf.union(i + n, j)\n\n        if contradiction:\n            results.append(-1)\n        else:\n            max_imposters = 0\n            visited = [False] * (2 * n)\n\n            for player in range(n):\n                if not visited[player]:\n                    root1 = uf.find(player)\n                    root2 = uf.find(player + n)\n                    size1 = uf.size[root1]\n                    size2 = uf.size[root2]\n                    max_imposters += max(size1, size2)\n                    visited[root1] = visited[root2] = True\n\n            results.append(max_imposters)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    # Call the function and print results\n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass UnionFind:\n    \"\"\"A class to represent a union-find (disjoint set union) data structure.\"\"\"\n    \n    def __init__(self, size: int):\n        \"\"\"Initialize the union-find structure with a given size.\"\"\"\n        self.parent = list(range(size))\n        self.rank = [0] * size\n        self.size = [1] * size\n        self.role = [-1] * size  # -1 means unassigned, 0 means crewmate, 1 means imposter\n\n    def find(self, u: int) -> int:\n        \"\"\"Find the root of the node u with path compression.\"\"\"\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u: int, v: int, same_role: bool) -> bool:\n        \"\"\"Union two nodes u and v. If same_role is True, they should have the same role.\"\"\"\n        root_u = self.find(u)\n        root_v = self.find(v)\n\n        if root_u == root_v:\n            # Check for contradiction\n            if same_role and self.role[root_u] != -1 and self.role[root_u] != self.role[root_v]:\n                return False\n            return True\n\n        # Union by rank\n        if self.rank[root_u] > self.rank[root_v]:\n            self.parent[root_v] = root_u\n            self.size[root_u] += self.size[root_v]\n            if same_role:\n                self.role[root_v] = self.role[root_u]\n            else:\n                self.role[root_v] = 1 - self.role[root_u] if self.role[root_u] != -1 else -1\n        elif self.rank[root_u] < self.rank[root_v]:\n            self.parent[root_u] = root_v\n            self.size[root_v] += self.size[root_u]\n            if same_role:\n                self.role[root_u] = self.role[root_v]\n            else:\n                self.role[root_u] = 1 - self.role[root_v] if self.role[root_v] != -1 else -1\n        else:\n            self.parent[root_v] = root_u\n            self.rank[root_u] += 1\n            self.size[root_u] += self.size[root_v]\n            if same_role:\n                self.role[root_v] = self.role[root_u]\n            else:\n                self.role[root_v] = 1 - self.role[root_u] if self.role[root_u] != -1 else -1\n\n        return True\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum number of imposters or detect contradictions for each test case.\"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        uf = UnionFind(n + 1)  # Players are 1-indexed\n\n        contradiction = False\n        for i, j, c in comments:\n            if c == 'imposter':\n                if not uf.union(i, j, False):\n                    contradiction = True\n                    break\n            elif c == 'crewmate':\n                if not uf.union(i, j, True):\n                    contradiction = True\n                    break\n\n        if contradiction:\n            results.append(-1)\n        else:\n            max_imposters = 0\n            visited = [False] * (n + 1)\n            for player in range(1, n + 1):\n                root = uf.find(player)\n                if not visited[root]:\n                    visited[root] = True\n                    # Calculate the maximum imposters in this component\n                    if uf.role[root] == -1:\n                        # If role is unassigned, assume the larger group can be imposters\n                        max_imposters += max(uf.size[root] // 2, uf.size[root] - uf.size[root] // 2)\n                    else:\n                        # If role is assigned, count imposters based on role\n                        imposters_count = sum(1 for p in range(1, n + 1) if uf.find(p) == root and uf.role[p] == 1)\n                        max_imposters += imposters_count\n\n            results.append(max_imposters)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    t = int(data[0])\n    index = 1\n    test_cases = []\n    \n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        index += 1\n        comments = []\n        for _ in range(m):\n            i, j, c = data[index].split()\n            comments.append((int(i), int(j), c))\n            index += 1\n        test_cases.append((n, m, comments))\n    \n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple, Dict\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    def dfs(player: int, role: int, graph: Dict[int, List[Tuple[int, str]]], roles: List[int]) -> bool:\n        \"\"\"Perform DFS to assign roles and check for contradictions.\"\"\"\n        stack = [(player, role)]\n        while stack:\n            current, current_role = stack.pop()\n            if roles[current] != -1:\n                if roles[current] != current_role:\n                    return False\n                continue\n            roles[current] = current_role\n            for neighbor, comment in graph[current]:\n                expected_role = 1 - current_role if comment == 'imposter' else current_role\n                stack.append((neighbor, expected_role))\n        return True\n\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n\n        graph = {i: [] for i in range(1, n + 1)}\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        roles = [-1] * (n + 1)\n        max_imposters_count = 0\n        for player in range(1, n + 1):\n            if roles[player] == -1:\n                imposters_count = 0\n                crewmates_count = 0\n                if not dfs(player, 0, graph, roles):\n                    results.append(-1)\n                    break\n                for p in range(1, n + 1):\n                    if roles[p] == 0:\n                        imposters_count += 1\n                    elif roles[p] == 1:\n                        crewmates_count += 1\n                max_imposters_count += max(imposters_count, crewmates_count)\n        else:\n            results.append(max_imposters_count)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    # Output interface\n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Calculate the maximum number of imposters or detect contradictions in player comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments, each containing:\n                - i (int): Player making the comment.\n                - j (int): Player being commented on.\n                - c (str): Role stated in the comment ('imposter' or 'crewmate').\n\n    Returns:\n        List[int]: List of results for each test case, either the maximum number of imposters or -1 if contradictions are found.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        graph = {i: [] for i in range(1, n + 1)}\n        roles = {}\n        contradiction = False\n\n        def dfs(player: int, role: bool) -> None:\n            \"\"\"Perform depth-first search to assign roles and detect contradictions.\n\n            Args:\n                player (int): Current player being processed.\n                role (bool): Role assigned to the player (True for crewmate, False for imposter).\n            \"\"\"\n            nonlocal contradiction\n            if player in roles:\n                if roles[player] != role:\n                    contradiction = True\n                return\n            roles[player] = role\n            for neighbor, comment in graph[player]:\n                if comment == 'imposter':\n                    dfs(neighbor, not role)\n                else:\n                    dfs(neighbor, role)\n\n        # Build the graph based on comments\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        max_imposters = 0\n\n        # Process each player using DFS\n        for player in range(1, n + 1):\n            if player not in roles:\n                roles.clear()\n                contradiction = False\n                dfs(player, True)\n                if contradiction:\n                    max_imposters = -1\n                    break\n                imposters_count = sum(1 for role in roles.values() if not role)\n                max_imposters += max(imposters_count, len(roles) - imposters_count)\n\n        results.append(max_imposters)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = max_imposters(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass UnionFind:\n    \"\"\"Union-Find data structure to manage connected components.\"\"\"\n    \n    def __init__(self, size: int):\n        self.parent = list(range(size))\n        self.rank = [0] * size\n        self.role = [-1] * size  # -1: unknown, 0: crewmate, 1: imposter\n\n    def find(self, node: int) -> int:\n        \"\"\"Find the root of the node with path compression.\"\"\"\n        if self.parent[node] != node:\n            self.parent[node] = self.find(self.parent[node])\n        return self.parent[node]\n\n    def union(self, node1: int, node2: int) -> bool:\n        \"\"\"Union two nodes and return if they were already connected.\"\"\"\n        root1 = self.find(node1)\n        root2 = self.find(node2)\n        \n        if root1 == root2:\n            return False\n        \n        if self.rank[root1] > self.rank[root2]:\n            self.parent[root2] = root1\n        elif self.rank[root1] < self.rank[root2]:\n            self.parent[root1] = root2\n        else:\n            self.parent[root2] = root1\n            self.rank[root1] += 1\n        \n        return True\n\n    def set_role(self, node: int, role: int) -> bool:\n        \"\"\"Set the role of a node and check for contradictions.\"\"\"\n        root = self.find(node)\n        if self.role[root] == -1:\n            self.role[root] = role\n            return True\n        return self.role[root] == role\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    results = []\n    \n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        uf = UnionFind(n + 1)  # +1 because players are 1-indexed\n        \n        contradiction = False\n        for i, j, c in comments:\n            if c == \"imposter\":\n                if not uf.set_role(i, 1) or not uf.set_role(j, 0):\n                    contradiction = True\n                    break\n            elif c == \"crewmate\":\n                if not uf.set_role(i, 0) or not uf.set_role(j, 1):\n                    contradiction = True\n                    break\n        \n        if contradiction:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for role in uf.role if role == 1)\n            results.append(imposters_count)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = max_imposters(t, test_cases)\nfor result in results:\n    print(result)\n"], "plans": ["requirement analysis:\nThe problem requires determining the maximum number of imposters based on the comments made by players. Each comment is a statement about another player's role, and the challenge is to deduce the roles while considering that imposters lie and crewmates tell the truth. The solution must handle multiple test cases efficiently due to the large input size constraints.\nrequirement pool:\n- Implement the main algorithm to determine the maximum number of imposters.\n- Ensure the solution handles contradictions in comments and outputs -1 when necessary.\n- Optimize the algorithm to handle the upper limits of input size efficiently.\n- Design the input/output handling to match the specified format exactly.\n- Consider edge cases such as no comments or all players being imposters.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and each comment will be an edge with a label indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to attempt to assign roles to players, checking for contradictions. If a contradiction is found, we will return -1 for that test case. Otherwise, we will count the maximum number of imposters possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, and crewmates always tell the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': This indicates that we need to find the highest count of imposters that can be logically deduced from the comments without contradictions.\n\n# [degree adverb] \n    'maximum': This means we need to find the largest possible number of imposters that can exist without any contradictions in the comments.\n\n# [code logic]\n    1. Model the players and comments as a graph where each player is a node and each comment is an edge with a label (imposter or crewmate).\n    2. Use DFS to traverse the graph and attempt to assign roles to players.\n    3. During traversal, check for contradictions in role assignments.\n    4. If a contradiction is found, return -1 for that test case.\n    5. If no contradiction is found, count the maximum number of imposters possible and return that count.\n\n# [edge case] \n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can be imposters, so the maximum number is equal to n.\n    \n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, so it's impossible to assign roles without conflict.\n    \n    Test case with multiple comments for the same pair (e.g., 3 5 with comments \"1 2 imposter\", \"1 2 imposter\", \"3 2 crewmate\", \"3 2 crewmate\", \"1 3 imposter\") = 2\n    Explanation: Despite multiple comments, consistent role assignment is possible without contradiction.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement logic to handle cases with no comments by defaulting all players as imposters.\n        - Implement logic to detect contradictions during DFS traversal.\n        - Ensure multiple comments for the same pair are handled consistently without causing contradictions.\n", "requirement analysis:\nThe requirements focus on determining the roles of players based on comments, ensuring that contradictions are identified, and handling large input sizes efficiently. The solution must provide clear output for each test case, indicating either the maximum number of imposters or a contradiction.\nrequirement pool:\n- Implement role determination logic based on comments.\n- Detect contradictions in player comments.\n- Optimize for large input sizes.\n- Ensure output format consistency.\n- Provide detailed error messages for contradictions.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and each comment will be an edge with a label indicating the role accusation. We will use a depth-first search (DFS) to traverse the graph and determine the roles, checking for contradictions. The use of graph traversal ensures efficient handling of large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, meaning their comments about other players' roles are false. Crewmates always tell the truth, meaning their comments are accurate. The task is to determine the maximum number of imposters based on these comments or identify contradictions.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': This indicates that we need to find the largest count of imposters that can be deduced from the comments without contradictions.\n    'distinct integers': This means that each comment involves two different players, ensuring no self-commenting.\n\n# [degree adverb]\n    'maximum': We need to find the largest possible number of imposters that can be deduced from the comments.\n\n# [code logic]\n    1. Model the players and comments as a graph where each player is a node and each comment is an edge with a label (imposter or crewmate).\n    2. Use DFS to traverse the graph, assigning roles to players based on comments.\n    3. Check for contradictions during traversal. If a contradiction is found, return -1 for that test case.\n    4. Count the number of imposters for each valid configuration and keep track of the maximum count.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, there are no contradictions, so all players can be imposters.\n    \n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles without conflict.\n    \n    Test case with multiple comments for the same pair (e.g., 3 5 with repeated comments) = 2\n    Explanation: Repeated consistent comments do not introduce contradictions, allowing for maximum imposter count.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if m == 0:\n            print(n)\n            continue\n        # Implement DFS with contradiction checking\n        def dfs(player, role):\n            # Traverse and assign roles, checking for contradictions\n            pass\n        # Other code logic for handling graph traversal and role assignment\n", "requirement analysis:\nThe game requires a mechanism to determine the roles of players based on comments, ensuring that imposters are identified correctly and contradictions are flagged. The solution must handle large inputs efficiently and provide clear outputs.\nrequirement pool:\n- Implement role determination logic based on comments.\n- Develop efficient algorithms to handle large input sizes.\n- Create a system to detect contradictions in comments.\n- Ensure the output format is clear and consistent.\n- Optimize performance for real-time gameplay.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form directed edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the roles, checking for contradictions. The networkx library can be used to efficiently handle graph operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, and crewmates always tell the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the statements made by players cannot logically coexist, meaning that the roles assigned based on these statements lead to an inconsistency.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This means we need to find the highest count of imposters that can be logically deduced from the comments without causing contradictions.\n\n# [degree adverb] \n    'maximum'\n    Explanation: We are looking for the largest possible number of imposters that can be identified without contradictions.\n\n# [code logic]\n1. Parse the input to extract the number of test cases.\n2. For each test case, initialize a graph where each player is a node.\n3. For each comment, add a directed edge between nodes with a label indicating whether the role is 'imposter' or 'crewmate'.\n4. Use DFS to traverse the graph:\n   - Assign roles to players based on comments.\n   - Check for contradictions during traversal.\n5. If a contradiction is found, return -1 for that test case.\n6. Otherwise, calculate and return the maximum number of imposters possible.\n\n# [edge case] \n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, there are no constraints, so all players can be imposters.\n\n    Test case with contradictory comments (e.g., 2 2 with \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments directly contradict each other, making it impossible to assign roles without inconsistency.\n\n    Test case with all players claiming others are crewmates (e.g., 3 2 with \"1 2 crewmate\" and \"2 3 crewmate\") = 0\n    Explanation: If all players claim others are crewmates, then all must be telling the truth, meaning no imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement a check for contradictions during DFS traversal.\n    - Handle cases with no comments by defaulting to all players being imposters.\n    \n```python\ndef find_max_imposters(test_cases):\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        # Initialize graph and role assignment\n        graph = {}\n        roles = {}\n        \n        # Build graph\n        for i, j, c in comments:\n            if i not in graph:\n                graph[i] = []\n            if j not in graph:\n                graph[j] = []\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n        \n        def dfs(node, role):\n            if node in roles:\n                return roles[node] == role\n            roles[node] = role\n            for neighbor, comment_role in graph.get(node, []):\n                if not dfs(neighbor, 'imposter' if comment_role == 'crewmate' else 'crewmate'):\n                    return False\n            return True\n        \n        contradiction_found = False\n        max_imposters = 0\n        \n        for player in range(1, n + 1):\n            if player not in roles:\n                if not dfs(player, 'imposter'):\n                    contradiction_found = True\n                    break\n                max_imposters += sum(1 for r in roles.values() if r == 'imposter')\n        \n        results.append(-1 if contradiction_found else max_imposters)\n    \n    return results\n```\n", "requirement analysis:\nThe game requires a mechanism to determine the roles of players based on comments, ensuring that imposters are identified correctly and contradictions are flagged. The solution must handle large datasets efficiently and provide clear outputs.\nrequirement pool:\n- Implement role determination logic based on comments.\n- Develop efficient algorithms to handle large input sizes.\n- Create a system to detect contradictions in comments.\n- Ensure the output format is clear and consistent.\n- Optimize performance for real-time processing.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form directed edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the roles, while checking for contradictions. The networkx library will be used for efficient graph operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, an imposter always lies, while a crewmate always tells the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments made by players cannot logically coexist, meaning that the statements about roles conflict with each other.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This means we need to find the highest count of imposters that can be logically deduced from the comments without contradictions.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the largest possible number of imposters that can be identified without any contradictions in the comments.\n\n# [code logic]\n1. Model the problem as a graph where each player is a node.\n2. Use edges to represent comments, with labels indicating whether the comment is about an 'imposter' or 'crewmate'.\n3. Use a depth-first search (DFS) to traverse the graph:\n   - Assign roles to players based on comments.\n   - Check for contradictions during traversal.\n4. If a contradiction is found, return -1 for that test case.\n5. Otherwise, calculate and return the maximum number of imposters possible.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can be imposters, so the maximum number is equal to the number of players.\n\n    Test case with contradictory comments (e.g., 2 2 with \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, so it's impossible to determine roles without conflict.\n\n    Test case with all players claiming others are imposters (e.g., 3 3 with \"1 2 imposter\", \"2 3 imposter\", \"3 1 imposter\") = 3\n    Explanation: All players can be imposters since each claims another is an imposter, which is consistent.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Initialize all players as potential imposters if there are no comments.\n    - Implement logic to detect contradictions during DFS traversal.\n    \n```python\nimport networkx as nx\n\ndef find_max_imposters(test_cases):\n    results = []\n    \n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        graph = nx.DiGraph()\n        for i in range(1, n + 1):\n            graph.add_node(i)\n        \n        for i, j, c in comments:\n            if c == 'imposter':\n                graph.add_edge(i, j, role='imposter')\n            else:\n                graph.add_edge(i, j, role='crewmate')\n        \n        try:\n            max_imposters = calculate_max_imposters(graph)\n            results.append(max_imposters)\n        except ContradictionError:\n            results.append(-1)\n    \n    return results\n\ndef calculate_max_imposters(graph):\n    # Implement DFS with role assignment and contradiction checking\n    # Raise ContradictionError if a contradiction is found\n    pass\n\nclass ContradictionError(Exception):\n    pass\n```\n\nThis code provides a framework for handling edge cases and implementing the logic needed to solve the problem.\n", "requirement analysis:\nThe game requires a mechanism to determine the roles of players based on comments. Imposters lie, while crewmates tell the truth. The challenge is to identify the maximum number of imposters or detect contradictions in comments. The solution must efficiently handle large input sizes and provide clear output for each test case.\nrequirement pool:\n- Implement the core logic to determine player roles based on comments.\n- Ensure the solution can handle the maximum input constraints efficiently.\n- Develop a user-friendly interface for inputting game data.\n- Provide clear output and error messages for contradictions.\n- Optimize the algorithm for performance improvements.\nWe will use a graph-based approach to solve this problem. Each player can be represented as a node, and each comment as an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a union-find (disjoint set) data structure to efficiently manage and query connected components, which will help us determine the maximum number of imposters or detect contradictions. This approach is efficient and suitable for handling the large input sizes specified in the requirements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, each player is either an imposter or a crewmate. Imposters always lie, while crewmates always tell the truth about other players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments made by players cannot logically coexist, meaning that the roles assigned based on the comments lead to an impossible situation.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: We need to find the largest number of players that can be imposters without causing contradictions in the comments. This involves maximizing the count of imposters while ensuring all comments are consistent.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the highest number of imposters possible given the constraints of the comments.\n\n# [code logic]\n1. Parse the input to extract the number of test cases, and for each test case, extract the number of players and comments.\n2. Represent each player as a node in a graph, and each comment as an edge with a label ('imposter' or 'crewmate').\n3. Use a union-find data structure to manage connected components and track role assignments.\n4. For each comment, update the union-find structure:\n   - If a player claims another is an imposter, they must be a crewmate if they are telling the truth.\n   - If a player claims another is a crewmate, they must be an imposter if they are lying.\n5. Check for contradictions by ensuring no two connected nodes have conflicting roles.\n6. Calculate the maximum number of imposters by counting nodes that can be imposters without contradictions.\n7. Output the result for each test case.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can potentially be imposters since there are no constraints.\n\n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles consistently.\n\n    Test case with multiple comments for the same pair (e.g., 3 5 with repeated comments) = 2\n    Explanation: Repeated consistent comments do not affect the outcome; only contradictions matter.\n\n# [extra code for edge case]\n    We need extra code to handle contradictions and ensure consistent role assignments.\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootY] = rootX\n\n        # Initialize union-find structure\n        parent = {i: i for i in range(1, n+1)}\n        role = {i: None for i in range(1, n+1)}\n\n        # Process each comment\n        for i, j, c in comments:\n            if c == 'imposter':\n                # Logic for imposter comment\n            elif c == 'crewmate':\n                # Logic for crewmate comment\n\n        # Check for contradictions and calculate maximum imposters\n        # Output results\n", "requirement analysis:\nThe game requires a logical deduction algorithm to determine the maximum number of imposters based on player comments. The solution must handle large input sizes efficiently, ensuring that the sum of all players and comments does not exceed the given constraints. The output must be accurate and handle contradictions in player statements.\nrequirement pool:\n- Implement the main algorithm to determine the maximum number of imposters.\n- Ensure the solution handles contradictions in player comments.\n- Optimize the algorithm for large input sizes.\n- Design a user-friendly interface for input and output.\n- Add features for different difficulty levels.\nWe will use a graph-based approach to solve this problem. Each player can be represented as a node, and each comment as an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a union-find data structure to manage connected components and detect contradictions. The algorithm will iterate over each test case, process the comments, and determine the maximum number of imposters or detect contradictions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, while crewmates always tell the truth. Each player has exactly one role, either imposter or crewmate.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments from players lead to an impossible scenario, such as a crewmate claiming another player is an imposter, but that player claims the crewmate is lying.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: We need to find the largest number of players that can be imposters without causing contradictions in the comments. This can be implemented by maximizing the count of imposters in the graph while ensuring no contradictions arise.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We need to find the largest possible number of imposters that can exist given the comments. This involves checking all possible configurations and selecting the one with the highest count of imposters.\n\n# [code logic]\n    1. Initialize a union-find data structure to manage player roles and detect contradictions.\n    2. For each test case, iterate through the comments and update the union-find structure based on the comment type ('imposter' or 'crewmate').\n    3. If a contradiction is detected during processing, mark the test case as invalid and return -1.\n    4. Otherwise, calculate the maximum number of imposters by analyzing the connected components in the union-find structure.\n    5. Return the result for each test case.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can potentially be imposters since there are no contradictions.\n\n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles without conflict.\n\n    Test case with multiple comments for same pair (e.g., 3 5 with comments \"1 2 imposter\", \"1 2 imposter\", \"3 2 crewmate\", \"3 2 crewmate\", \"1 3 imposter\") = 2\n    Explanation: Despite multiple comments, we can resolve roles without contradiction, maximizing imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        Initialize union-find structure for each test case.\n        Process each comment and update union-find structure.\n        Check for contradictions after processing all comments.\n        If no contradictions, calculate maximum imposters based on connected components.\n        Return -1 if contradictions are found, otherwise return maximum imposters count.\n", "requirement analysis:\nThe problem requires determining the maximum number of imposters based on player comments, where imposters lie and crewmates tell the truth. The solution must efficiently handle up to 200,000 players and 500,000 comments, ensuring that contradictions are detected and reported.\nrequirement pool:\n- Efficiently determine the maximum number of imposters.\n- Detect and report contradictions in player comments.\n- Optimize for large input sizes.\n- Provide clear and concise output.\n- Consider edge cases with no comments.\nWe will use a graph-based approach to solve this problem. Each player can be represented as a node, and each comment as an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a union-find (disjoint set union) data structure to efficiently manage and query connected components, which will help us determine the maximum number of imposters or detect contradictions. The union-find structure will be enhanced to handle bipartite graph checking, which is essential for determining contradictions in the comments.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, and crewmates always tell the truth. This distinction is crucial for determining the roles of players based on their comments.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments lead to an impossible scenario, such as a player being both an imposter and a crewmate based on the comments.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: We need to find the largest number of players that can be imposters without causing contradictions in the comments. This involves maximizing the count of imposters while ensuring the comments are consistent.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the highest number of imposters possible given the constraints of the comments.\n\n# [code logic]\n    1. Initialize a union-find data structure to manage player groups and their roles.\n    2. For each test case, iterate through the comments and update the union-find structure:\n        - If a comment indicates 'imposter', connect the players with opposite roles.\n        - If a comment indicates 'crewmate', connect the players with the same role.\n    3. Check for contradictions using bipartite graph properties:\n        - If a contradiction is found, return -1 for that test case.\n    4. Calculate the maximum number of imposters by evaluating the size of connected components and their role assignments.\n    5. Return the result for each test case.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can be imposters without contradiction.\n\n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles consistently.\n\n    Test case with multiple comments for same pair (e.g., 3 5 with comments \"1 2 imposter\", \"1 2 imposter\", \"3 2 crewmate\", \"3 2 crewmate\", \"1 3 imposter\") = 2\n    Explanation: Despite multiple comments, consistent role assignment is possible without contradiction.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement checks for contradictions using bipartite graph properties in the union-find structure.\n        - Ensure that multiple comments for the same pair are handled consistently without causing contradictions.\n        - Initialize role assignments carefully when no comments are present to maximize imposters.\n", "requirement analysis:\nThe requirement is to determine the maximum number of imposters possible based on player comments, or identify contradictions. The solution must efficiently handle large input sizes and provide accurate results for each test case.\nrequirement pool:\n- Implement the algorithm to determine the maximum number of imposters.\n- Ensure the solution can handle up to 10,000 test cases efficiently.\n- Provide clear error messages for contradictory comments.\n- Optimize the algorithm for performance with large datasets.\n- Include detailed comments and documentation in the code.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form directed edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to attempt to assign roles to players, checking for contradictions. If a contradiction is found, we will return -1 for that test case. Otherwise, we will calculate the maximum number of imposters possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter', 'crewmate'\n    Explanation: In the game, an imposter always lies, while a crewmate always tells the truth. Each player has exactly one role: either imposter or crewmate.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: We need to find the highest number of players that can be imposters without contradictions in the comments.\n\n# [degree adverb] \n    'maximum'\n    Explanation: We are looking for the largest possible count of imposters that can be assigned based on the comments without causing contradictions.\n\n# [code logic]\n    1. Model the players and comments as a graph where each player is a node and each comment is a directed edge with a label (imposter or crewmate).\n    2. Use DFS to attempt to assign roles to players, starting from any unvisited node.\n    3. During DFS, if a player is assigned as an imposter, all players they claim are imposters must be assigned as crewmates, and vice versa.\n    4. If a contradiction is found during role assignment (e.g., a player is assigned both roles), return -1 for that test case.\n    5. If no contradiction is found, count the number of imposters assigned and update the maximum possible number.\n    6. Repeat for each test case.\n\n# [edge case] \n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can be imposters since there are no contradictions.\n    \n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles without conflict.\n    \n    Test case with multiple comments for the same pair (e.g., 3 5 with comments \"1 2 imposter\", \"1 2 imposter\", \"3 2 crewmate\", \"3 2 crewmate\", \"1 3 imposter\") = 2\n    Explanation: Despite multiple comments, roles can be assigned without contradiction, allowing for maximum imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement logic to handle cases with no comments by defaulting all players to imposters.\n        - Implement checks during DFS to detect contradictions and return -1 when found.\n        - Ensure handling of multiple comments for the same pair by maintaining consistent role assignments.\n", "requirement analysis:\nThe game requires a robust algorithm to determine the maximum number of imposters based on player comments. It must efficiently handle large datasets and identify contradictions in statements. The user interface should clearly communicate results and contradictions to the player.\nrequirement pool:\n- Implement the core algorithm to determine the maximum number of imposters.\n- Develop a system to detect and handle contradictions in player comments.\n- Optimize the algorithm for performance with large numbers of players and comments.\n- Design a user-friendly interface to display results and contradictions.\n- Incorporate feedback mechanisms for player understanding and engagement.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form directed edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to attempt to assign roles to players, checking for contradictions as we go. If a contradiction is found, we will return -1 for that test case. Otherwise, we will calculate the maximum number of imposters possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, an imposter always lies, and a crewmate always tells the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the statements made by players cannot logically coexist, meaning that the roles assigned based on these statements lead to an inconsistency.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This means we need to find the highest count of imposters that can be logically assigned without causing contradictions.\n\n# [degree adverb] \n    'maximum'\n    Explanation: We need to find the largest possible number of imposters that can be assigned without contradictions.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, initialize a graph where each player is a node.\n3. Use DFS to attempt to assign roles (imposter or crewmate) to each player based on comments.\n4. If a contradiction is detected during DFS, mark the test case as having a contradiction and return -1.\n5. If no contradiction is found, calculate the maximum number of imposters by considering all possible valid role assignments.\n6. Output the result for each test case.\n\n# [edge case] \n    Test Case 1: \n    Input: 2 1\n           1 2 imposter\n    Expected Output: 1\n    Explanation: Player 1 can be an imposter, making player 2 a crewmate, which is consistent.\n\n    Test Case 2:\n    Input: 3 3\n           1 2 imposter\n           2 3 imposter\n           3 1 crewmate\n    Expected Output: -1\n    Explanation: The comments create a cycle of contradictions.\n\n    Test Case 3:\n    Input: 4 0\n    Expected Output: 4\n    Explanation: With no comments, all players can be imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef solve_among_them(test_cases):\n    results = []\n    \n    for n, m, comments in test_cases:\n        graph = {}\n        roles = {}\n        contradiction = False\n        \n        def dfs(player, role):\n            nonlocal contradiction\n            if player in roles:\n                if roles[player] != role:\n                    contradiction = True\n                return\n            roles[player] = role\n            for neighbor, comment in graph.get(player, []):\n                if comment == 'imposter':\n                    dfs(neighbor, not role)\n                else:\n                    dfs(neighbor, role)\n        \n        for i in range(1, n + 1):\n            graph[i] = []\n        \n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n        \n        max_imposters = 0\n        \n        for player in range(1, n + 1):\n            if player not in roles:\n                roles.clear()\n                contradiction = False\n                dfs(player, True)\n                if contradiction:\n                    max_imposters = -1\n                    break\n                imposters_count = sum(1 for role in roles.values() if not role)\n                max_imposters += max(imposters_count, len(roles) - imposters_count)\n        \n        results.append(max_imposters)\n    \n    return results\n```\n\nThis code handles edge cases by using DFS to explore possible role assignments and checking for contradictions. If no comments are present, it assumes all players can be imposters.\n", "requirement analysis:\nThe requirements focus on determining the maximum number of imposters based on player comments, ensuring that contradictions are identified. The solution must efficiently handle large inputs and provide clear outputs.\nrequirement pool:\n- Implement the main algorithm to determine imposters.\n- Ensure contradiction detection in comments.\n- Optimize for large input sizes.\n- Provide clear and concise output formatting.\n- Enhance user experience with intuitive feedback.\nWe will use a graph-based approach to model the problem. Each player is a node, and each comment is an edge with a label indicating the role (imposter or crewmate). We will use a union-find data structure to efficiently manage connected components and detect contradictions. The problem can be reduced to a 2-SAT problem, where we need to check if a valid assignment of roles exists that satisfies all comments.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, and crewmates always tell the truth. Each player has exactly one role.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments cannot logically coexist, meaning the roles assigned based on the comments lead to an impossible situation.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: We need to find the largest number of players that can be imposters without causing contradictions in the comments.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the highest number of imposters possible given the constraints of the comments.\n\n# [code logic]\n    1. Model the problem using a graph where each player is a node and each comment is an edge with a label (imposter or crewmate).\n    2. Use a union-find data structure to manage connected components and detect contradictions.\n    3. Reduce the problem to a 2-SAT problem to check if a valid assignment of roles exists.\n    4. For each test case, iterate through the comments and update the union-find structure.\n    5. If a contradiction is detected, return -1 for that test case.\n    6. Otherwise, calculate the maximum number of imposters possible.\n\n# [edge case]\n    Test case with no comments (e.g., n = 5, m = 0) = 5\n    Explanation: With no comments, all players can be imposters since there are no constraints.\n\n    Test case with contradictory comments (e.g., 1 2 imposter, 2 1 crewmate) = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles without conflict.\n\n    Test case with all players claiming others are crewmates (e.g., n = 3, m = 3, all comments are crewmate) = 0\n    Explanation: If all players claim others are crewmates, then no player can be an imposter.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if m == 0:\n            return n\n        # Implement union-find logic to detect contradictions\n        # Implement logic to calculate maximum imposters based on valid role assignments\n        # Handle contradictions by returning -1\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 22, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "mutate_method": "condense_two2one", "parent_index": 22}
