{"name": "1594_D. The Number of Imposters", "description": "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus).\n\nIn each game, Theofanis plays with n other players. Since they all have the same name, they are numbered from 1 to n.\n\nThe players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c.\n\nAn imposter always lies, and a crewmate always tells the truth. \n\nHelp Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation).\n\nNote that each player has exactly one role: either imposter or crewmate.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "tags": ["constructive algorithms", "dfs and similar", "dp", "dsu", "graphs"], "difficulty": 10, "id": 1594, "sample_io": [{"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}], "test_list": [{"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n2\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["4\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n-1\n2\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n4\n1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n4\n-1\n2\n9\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n9\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n10 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n9\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n3\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n1 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n4\n2\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n5\n1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["2\n4\n-1\n2\n13\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n4 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n3\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 3 crewmate\n1 3 imposter\n10 0\n", "output": ["4\n3\n-1\n2\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n4 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n4 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n3\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n8 0\n", "output": ["2\n4\n1\n-1\n8\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n-1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n2\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n2 0\n", "output": ["2\n4\n-1\n5\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n2\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["4\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n-1\n-1\n2\n9\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n-1\n1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 3 crewmate\n2 3 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["-1\n4\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n15 0\n", "output": ["2\n4\n1\n-1\n15\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n4\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n6 0\n", "output": ["2\n3\n1\n-1\n6\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n3\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n7 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n6\n-1\n2\n7\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n4\n2\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n5 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n4\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n3\n-1\n2\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["2\n4\n1\n2\n13\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n4 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n4 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n-1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n7 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 4 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n6\n3\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n4 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n2 0\n", "output": ["2\n4\n-1\n2\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n10 0\n", "output": ["2\n4\n2\n2\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n-1\n1\n-1\n9\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n10 0\n", "output": ["2\n4\n1\n-1\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n-1\n-1\n-1\n4\n"]}, {"input": "5\n6 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 1 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["5\n4\n-1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["4\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 4 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n-1\n1\n-1\n7\n"]}, {"input": "5\n4 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["3\n3\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n-1\n1\n-1\n5\n"]}, {"input": "5\n8 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["7\n4\n2\n-1\n2\n"]}, {"input": "5\n6 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["5\n4\n1\n2\n13\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 4 imposter\n2 1 crewmate\n6 5\n1 1 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n4\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n4 5 crewmate\n1 4 imposter\n2 1 imposter\n4 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n3\n-1\n5\n"]}, {"input": "5\n4 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["3\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n10 0\n", "output": ["2\n4\n2\n-1\n10\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 3 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n5\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n2 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n2 0\n", "output": ["2\n4\n-1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n1 3 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n2 2 crewmate\n1 2 imposter\n2 0\n", "output": ["2\n4\n1\n2\n2\n"]}, {"input": "5\n5 2\n1 2 imposter\n4 2 crewmate\n10 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n8\n-1\n2\n5\n"]}, {"input": "5\n10 2\n1 2 imposter\n4 2 crewmate\n10 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["9\n8\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n3\n2\n5\n"]}, {"input": "5\n6 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["5\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n4\n-1\n2\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n3\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 1 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n-1\n-1\n2\n4\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n-1\n1\n-1\n2\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 4 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 2 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n-1\n5\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n4 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n-1\n1\n2\n5\n"]}, {"input": "5\n4 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["3\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n8 0\n", "output": ["2\n4\n1\n2\n8\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n2\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 5 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n3 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n-1\n2\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 3 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n4\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 3 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 3 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 3 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 3 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n1 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n1 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n3 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 4 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 1 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n5\n1\n-1\n2\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n2 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n3 4 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n4 5 crewmate\n3 5 imposter\n3 1 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 4 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n3\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 3 imposter\n3 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 1 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 1 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n8 0\n", "output": ["2\n4\n1\n-1\n8\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n1 4 imposter\n2 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n3 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n2 5 crewmate\n2 5 crewmate\n3 4 imposter\n3 1 imposter\n3 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n5\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 4 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n4\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n2\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n3 4 imposter\n4 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 3 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n9 0\n", "output": ["2\n4\n-1\n2\n9\n"]}, {"input": "5\n3 2\n1 2 imposter\n3 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n4\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 1 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n4 2\n1 4 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 1 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n3\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 4 crewmate\n3 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n7 2\n1 2 imposter\n2 1 crewmate\n10 5\n1 2 imposter\n1 1 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["-1\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 2 crewmate\n2 5 crewmate\n2 1 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n1 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n7 0\n", "output": ["4\n-1\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 5 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 1 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 1 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n4 5 crewmate\n1 4 imposter\n2 1 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n2 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n5 0\n", "output": ["2\n3\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n4 3 crewmate\n2 3 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 1 imposter\n1 2 imposter\n1 2 crewmate\n1 2 crewmate\n1 3 imposter\n3 0\n", "output": ["2\n-1\n1\n-1\n3\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n3 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n2 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n2\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 1 crewmate\n5 4\n1 2 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["-1\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 3 imposter\n2 2 imposter\n3 1 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n-1\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 1 crewmate\n2 4 imposter\n3 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 5 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n1 1 crewmate\n2 4 imposter\n1 4 imposter\n5 2\n1 2 imposter\n2 1 crewmate\n6 5\n1 2 imposter\n1 2 imposter\n3 1 crewmate\n3 2 crewmate\n1 5 imposter\n5 0\n", "output": ["2\n4\n-1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n3 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n6 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 3 imposter\n7 0\n", "output": ["2\n4\n1\n-1\n7\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n2 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 3 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n2 2 crewmate\n3 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 1 crewmate\n2 5 crewmate\n2 5 imposter\n3 5 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n2 2 crewmate\n1 2 imposter\n5 0\n", "output": ["2\n4\n1\n-1\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 3 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 2 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n1 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 2 imposter\n4 0\n", "output": ["2\n4\n-1\n2\n4\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n2 2 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n4 5\n1 3 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n", "output": ["2\n-1\n1\n-1\n5\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n6 4\n1 3 crewmate\n2 5 crewmate\n2 3 imposter\n1 4 imposter\n2 2\n1 2 imposter\n2 2 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n1 2 crewmate\n3 2 crewmate\n2 3 imposter\n2 0\n", "output": ["4\n4\n1\n-1\n2\n"]}, {"input": "5\n5 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 4 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n4 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 3 crewmate\n1 3 imposter\n5 0\n", "output": ["4\n3\n-1\n2\n5\n"]}, {"input": "5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 5 crewmate\n2 5 crewmate\n1 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n2 2 crewmate\n1 3 imposter\n13 0\n", "output": ["2\n4\n-1\n2\n13\n"]}], "task_id": "codecontest/54", "prompt": "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate. Assume that the game always starts with at least two players.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "repair_prompt": ["Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate. Assume that the game always starts with at least two players.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players. Since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat. A comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate). The comment means that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate. Assume that the game always starts with at least two players.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "Theofanis started playing the new online game called \"Among them\". However, he always plays with Cypriot players, and they all have the same name: \"Andreas\" (the most common name in Cyprus). In each game, Theofanis plays with n other players, and since they all have the same name, they are numbered from 1 to n. The players write m comments in the chat: a comment has the structure of \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate), meaning that player i said that player j has the role c. An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other (see the notes for further explanation). Note that each player has exactly one role: either imposter or crewmate. Assume that the game always starts with at least two players.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass UnionFind:\n    \"\"\"A class to represent the Union-Find data structure with path compression and union by rank.\"\"\"\n    \n    def __init__(self, size: int):\n        self.parent = list(range(size))\n        self.rank = [0] * size\n        self.role = [-1] * size  # -1: unassigned, 0: crewmate, 1: imposter\n\n    def find(self, u: int) -> int:\n        \"\"\"Find the root of the node u with path compression.\"\"\"\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u: int, v: int) -> bool:\n        \"\"\"Union the sets that contain u and v.\"\"\"\n        root_u = self.find(u)\n        root_v = self.find(v)\n        \n        if root_u == root_v:\n            return False\n        \n        if self.rank[root_u] > self.rank[root_v]:\n            self.parent[root_v] = root_u\n        elif self.rank[root_u] < self.rank[root_v]:\n            self.parent[root_u] = root_v\n        else:\n            self.parent[root_v] = root_u\n            self.rank[root_u] += 1\n        \n        return True\n\n    def set_role(self, u: int, role: int) -> bool:\n        \"\"\"Set the role of node u and propagate the role to its connected component.\"\"\"\n        root_u = self.find(u)\n        if self.role[root_u] == -1:\n            self.role[root_u] = role\n            return True\n        return self.role[root_u] == role\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    results = []\n    \n    for n, m, comments in test_cases:\n        uf = UnionFind(n + 1)  # Players are 1-indexed, so we need n+1\n        \n        contradiction = False\n        \n        for i, j, c in comments:\n            if c == \"imposter\":\n                if not uf.union(i, j):\n                    # If i and j are already connected, check for contradiction\n                    if uf.role[uf.find(i)] == uf.role[uf.find(j)]:\n                        contradiction = True\n                        break\n                else:\n                    # Set roles if they are not set\n                    if not uf.set_role(i, 1) or not uf.set_role(j, 0):\n                        contradiction = True\n                        break\n            elif c == \"crewmate\":\n                if not uf.union(i, j):\n                    # If i and j are already connected, check for contradiction\n                    if uf.role[uf.find(i)] != uf.role[uf.find(j)]:\n                        contradiction = True\n                        break\n                else:\n                    # Set roles if they are not set\n                    if not uf.set_role(i, 0) or not uf.set_role(j, 1):\n                        contradiction = True\n                        break\n        \n        if contradiction:\n            results.append(-1)\n        else:\n            # Calculate the maximum number of imposters\n            max_imposters = 0\n            for player in range(1, n + 1):\n                root = uf.find(player)\n                if uf.role[root] == 1:\n                    max_imposters += 1\n            results.append(max_imposters)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = max_imposters(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef find_maximum_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Find the maximum possible number of imposters or determine contradictions in comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments in the form (i, j, c).\n\n    Returns:\n        List[int]: List of results for each test case, either the maximum number of imposters or -1 if contradictions exist.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        # Initialize graph and visited dictionary\n        graph = {i: [] for i in range(1, n + 1)}\n        visited = {}\n\n        # Build the graph based on comments\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        def dfs(node: int, role: str) -> bool:\n            \"\"\"Perform DFS to assign roles and check for contradictions.\n\n            Args:\n                node (int): Current node (player).\n                role (str): Role to assign ('imposter' or 'crewmate').\n\n            Returns:\n                bool: True if no contradictions are found, False otherwise.\n            \"\"\"\n            if node in visited:\n                return visited[node] == role\n\n            visited[node] = role\n            for neighbor, comment in graph[node]:\n                expected_role = 'imposter' if comment == 'crewmate' else 'crewmate'\n                if not dfs(neighbor, expected_role):\n                    return False\n            return True\n\n        max_imposters = 0\n        for player in range(1, n + 1):\n            if player not in visited:\n                if not dfs(player, 'imposter'):\n                    max_imposters = -1\n                    break\n                # Count imposters in the current connected component\n                max_imposters += sum(1 for v in visited.values() if v == 'imposter')\n\n        results.append(max_imposters if max_imposters != -1 else -1)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = find_maximum_imposters(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find(parent: List[int], x: int) -> int:\n    \"\"\"Find the root of the node x with path compression.\"\"\"\n    if parent[x] != x:\n        parent[x] = find(parent, parent[x])\n    return parent[x]\n\ndef union(parent: List[int], rank: List[int], x: int, y: int) -> None:\n    \"\"\"Union two nodes x and y based on their rank.\"\"\"\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum number of imposters or detect contradictions for each test case.\"\"\"\n    results = []\n    \n    for n, m, comments in test_cases:\n        parent = list(range(n + 1))\n        rank = [0] * (n + 1)\n        role = [-1] * (n + 1)  # -1 means unassigned, 0 means crewmate, 1 means imposter\n        \n        contradiction = False\n        \n        for i, j, c in comments:\n            if c == \"imposter\":\n                if role[i] == -1 and role[j] == -1:\n                    role[i], role[j] = 0, 1\n                elif role[i] == -1:\n                    role[i] = 1 - role[j]\n                elif role[j] == -1:\n                    role[j] = 1 - role[i]\n                elif role[i] == role[j]:\n                    contradiction = True\n                    break\n            else:  # c == \"crewmate\"\n                if role[i] == -1 and role[j] == -1:\n                    role[i], role[j] = 0, 0\n                elif role[i] == -1:\n                    role[i] = role[j]\n                elif role[j] == -1:\n                    role[j] = role[i]\n                elif role[i] != role[j]:\n                    contradiction = True\n                    break\n        \n        if contradiction:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for r in role if r == 1)\n            results.append(imposters_count)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n    \n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum number of imposters or detect contradictions in comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments, each containing:\n                - i (int): Player making the comment.\n                - j (int): Player being commented on.\n                - c (str): Role ('imposter' or 'crewmate').\n\n    Returns:\n        List[int]: Maximum number of imposters for each test case or -1 if contradictions are found.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        # Initialize graph and other structures\n        graph = {}\n        roles = {}\n        contradiction_found = False\n\n        # Build graph\n        for i, j, c in comments:\n            if i not in graph:\n                graph[i] = []\n            if j not in graph:\n                graph[j] = []\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        # DFS function to assign roles and check for contradictions\n        def dfs(player, role):\n            nonlocal contradiction_found\n            if player in roles:\n                if roles[player] != role:\n                    contradiction_found = True\n                return\n            roles[player] = role\n            for neighbor, comment in graph.get(player, []):\n                dfs(neighbor, 'imposter' if comment == 'crewmate' else 'crewmate')\n\n        # Check each component in the graph\n        for player in range(1, n + 1):\n            if player not in roles:\n                dfs(player, 'imposter')\n\n        if contradiction_found:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for role in roles.values() if role == 'imposter')\n            results.append(imposters_count)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    # Call the function and print results\n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum number of imposters or detect contradictions in player comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments, each containing:\n                - i (int): Player making the comment.\n                - j (int): Player being commented on.\n                - c (str): Role mentioned ('imposter' or 'crewmate').\n\n    Returns:\n        List[int]: Maximum number of imposters for each test case or -1 if contradictions are found.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        # Initialize graph and role assignment\n        graph = {}\n        roles = [-1] * (n + 1)  # -1 means unassigned\n\n        # Build graph from comments\n        for i, j, c in comments:\n            if i not in graph:\n                graph[i] = []\n            if j not in graph:\n                graph[j] = []\n            graph[i].append((j, c))\n            graph[j].append((i, c))\n\n        def dfs(node: int, role: int) -> bool:\n            \"\"\"Perform DFS to assign roles and check for contradictions.\n\n            Args:\n                node (int): Current node to process.\n                role (int): Role to assign (0 for imposter, 1 for crewmate).\n\n            Returns:\n                bool: True if no contradictions are found, False otherwise.\n            \"\"\"\n            stack = [(node, role)]\n            while stack:\n                current, current_role = stack.pop()\n                if roles[current] == -1:\n                    roles[current] = current_role\n                elif roles[current] != current_role:\n                    return False\n\n                for neighbor, comment in graph.get(current, []):\n                    expected_role = current_role if comment == 'crewmate' else 1 - current_role\n                    if roles[neighbor] == -1:\n                        stack.append((neighbor, expected_role))\n                    elif roles[neighbor] != expected_role:\n                        return False\n            return True\n\n        max_imposters = 0\n        contradiction_found = False\n\n        for player in range(1, n + 1):\n            if roles[player] == -1:\n                if not dfs(player, 0):\n                    contradiction_found = True\n                    break\n                max_imposters += sum(1 for r in roles if r == 0)\n\n        if contradiction_found:\n            results.append(-1)\n        else:\n            results.append(max_imposters)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Calculate the maximum number of imposters possible or detect contradictions in comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments, each containing:\n                - i (int): Player making the comment.\n                - j (int): Player being commented on.\n                - c (str): Role stated in the comment ('imposter' or 'crewmate').\n\n    Returns:\n        List[int]: List of results for each test case, either the maximum number of imposters or -1 if contradictions exist.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        # Initialize graph and roles\n        graph = {i: [] for i in range(1, n + 1)}\n        roles = [-1] * (n + 1)  # -1 means unassigned, 0 means crewmate, 1 means imposter\n\n        # Build graph from comments\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        def dfs(node: int, role: int) -> bool:\n            \"\"\"Perform DFS to assign roles and check for contradictions.\n\n            Args:\n                node (int): Current node to process.\n                role (int): Role to assign to the current node.\n\n            Returns:\n                bool: True if no contradictions are found, False otherwise.\n            \"\"\"\n            stack = [(node, role)]\n            while stack:\n                current, current_role = stack.pop()\n                if roles[current] == -1:\n                    roles[current] = current_role\n                elif roles[current] != current_role:\n                    return False\n\n                for neighbor, comment_role in graph[current]:\n                    expected_role = 0 if comment_role == 'crewmate' else 1\n                    if roles[neighbor] == -1:\n                        stack.append((neighbor, expected_role))\n                    elif roles[neighbor] != expected_role:\n                        return False\n            return True\n\n        max_imposters = 0\n        contradiction_found = False\n\n        for player in range(1, n + 1):\n            if roles[player] == -1:\n                if not dfs(player, 0):\n                    contradiction_found = True\n                    break\n                max_imposters += sum(1 for r in roles if r == 1)\n\n        results.append(-1 if contradiction_found else max_imposters)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = max_imposters(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_maximum_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum possible number of imposters or detect contradictions in comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments, each comment is a tuple (i, j, c).\n\n    Returns:\n        List[int]: List of results for each test case, either the maximum number of imposters or -1 if contradictions exist.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        # Initialize graph and roles\n        graph = {i: [] for i in range(1, n + 1)}\n        roles = {}\n        contradiction = False\n\n        # Build the graph\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        def dfs(player: int, role: str):\n            \"\"\"Perform DFS to assign roles and detect contradictions.\"\"\"\n            nonlocal contradiction\n            if player in roles:\n                if roles[player] != role:\n                    contradiction = True\n                return\n            roles[player] = role\n            for neighbor, comment in graph[player]:\n                dfs(neighbor, 'imposter' if comment == 'crewmate' else 'crewmate')\n\n        # Traverse each player using DFS\n        for player in range(1, n + 1):\n            if player not in roles:\n                dfs(player, 'crewmate')\n\n        if contradiction:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for role in roles.values() if role == 'imposter')\n            results.append(imposters_count)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    # Output interface\n    results = find_maximum_imposters(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_maximum_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Find the maximum possible number of imposters or determine contradictions in comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments in the form (i, j, c).\n\n    Returns:\n        List[int]: List of results for each test case, either the maximum number of imposters or -1 for contradictions.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # If there are no comments, all players can be imposters.\n            results.append(n)\n            continue\n\n        # Initialize graph representation\n        graph = {i: [] for i in range(1, n + 1)}\n\n        # Build the graph based on comments\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        visited = {}\n\n        def dfs(node: int, role: str) -> bool:\n            \"\"\"Perform DFS to assign roles and check for contradictions.\n\n            Args:\n                node (int): Current node (player).\n                role (str): Role to assign ('imposter' or 'crewmate').\n\n            Returns:\n                bool: True if no contradictions are found, False otherwise.\n            \"\"\"\n            if node in visited:\n                return visited[node] == role\n            visited[node] = role\n            for neighbor, comment_role in graph[node]:\n                if not dfs(neighbor, 'imposter' if comment_role == 'crewmate' else 'crewmate'):\n                    return False\n            return True\n\n        max_imposters = 0\n        for player in range(1, n + 1):\n            if player not in visited:\n                if not dfs(player, 'imposter'):\n                    max_imposters = -1\n                    break\n                # Count imposters in the current connected component\n                max_imposters += sum(1 for v in visited.values() if v == 'imposter')\n\n        results.append(max_imposters if max_imposters != -1 else -1)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n\n    t = int(data[0])\n    test_cases = []\n    index = 1\n\n    for _ in range(t):\n        n, m = map(int, data[index].split())\n        comments = [tuple(data[index + i + 1].split()) for i in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n        index += m + 1\n\n    results = find_maximum_imposters(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\nclass UnionFind:\n    \"\"\"A class to represent a union-find (disjoint set) data structure.\"\"\"\n    \n    def __init__(self, size: int):\n        \"\"\"Initialize the union-find structure.\"\"\"\n        self.parent = list(range(size))\n        self.rank = [0] * size\n        self.size = [1] * size\n        self.role = [-1] * size  # -1: unknown, 0: crewmate, 1: imposter\n\n    def find(self, u: int) -> int:\n        \"\"\"Find the root of the set containing u.\"\"\"\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u: int, v: int) -> bool:\n        \"\"\"Union the sets containing u and v.\"\"\"\n        root_u = self.find(u)\n        root_v = self.find(v)\n        if root_u == root_v:\n            return False\n        if self.rank[root_u] > self.rank[root_v]:\n            self.parent[root_v] = root_u\n            self.size[root_u] += self.size[root_v]\n        elif self.rank[root_u] < self.rank[root_v]:\n            self.parent[root_u] = root_v\n            self.size[root_v] += self.size[root_u]\n        else:\n            self.parent[root_v] = root_u\n            self.rank[root_u] += 1\n            self.size[root_u] += self.size[root_v]\n        return True\n\n    def set_role(self, u: int, role: int) -> bool:\n        \"\"\"Set the role of the player u.\"\"\"\n        root_u = self.find(u)\n        if self.role[root_u] == -1:\n            self.role[root_u] = role\n            return True\n        return self.role[root_u] == role\n\n    def get_role(self, u: int) -> int:\n        \"\"\"Get the role of the player u.\"\"\"\n        return self.role[self.find(u)]\n\n    def get_size(self, u: int) -> int:\n        \"\"\"Get the size of the set containing u.\"\"\"\n        return self.size[self.find(u)]\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Calculate the maximum number of imposters for each test case.\"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            # No comments, all players can be imposters\n            results.append(n)\n            continue\n\n        uf = UnionFind(n + 1)  # Players are 1-indexed\n\n        contradiction = False\n\n        for i, j, c in comments:\n            if c == 'imposter':\n                if not uf.union(i, j):\n                    # If already in the same set, check for contradiction\n                    if uf.get_role(i) == uf.get_role(j):\n                        contradiction = True\n                        break\n                else:\n                    # Set roles if not already set\n                    if uf.get_role(i) == -1 and uf.get_role(j) == -1:\n                        uf.set_role(i, 0)  # Assume i is crewmate\n                        uf.set_role(j, 1)  # j is imposter\n                    elif uf.get_role(i) != -1:\n                        uf.set_role(j, 1 - uf.get_role(i))\n                    elif uf.get_role(j) != -1:\n                        uf.set_role(i, 1 - uf.get_role(j))\n            elif c == 'crewmate':\n                if not uf.union(i, j):\n                    # If already in the same set, check for contradiction\n                    if uf.get_role(i) != uf.get_role(j):\n                        contradiction = True\n                        break\n                else:\n                    # Set roles if not already set\n                    if uf.get_role(i) == -1 and uf.get_role(j) == -1:\n                        uf.set_role(i, 0)  # Assume both are crewmates\n                        uf.set_role(j, 0)\n                    elif uf.get_role(i) != -1:\n                        uf.set_role(j, uf.get_role(i))\n                    elif uf.get_role(j) != -1:\n                        uf.set_role(i, uf.get_role(j))\n\n        if contradiction:\n            results.append(-1)\n        else:\n            max_imposters = 0\n            visited = set()\n            for player in range(1, n + 1):\n                root = uf.find(player)\n                if root not in visited:\n                    visited.add(root)\n                    # Calculate maximum imposters in this component\n                    crewmates = sum(1 for p in range(1, n + 1) if uf.find(p) == root and uf.get_role(p) == 0)\n                    imposters = uf.get_size(root) - crewmates\n                    max_imposters += max(crewmates, imposters)\n            results.append(max_imposters)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    comments = [tuple(input().split()) for _ in range(m)]\n    comments = [(int(i), int(j), c) for i, j, c in comments]\n    test_cases.append((n, m, comments))\n\n# Output interface\nresults = max_imposters(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_imposters(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, str]]]]) -> List[int]:\n    \"\"\"Determine the maximum number of imposters or detect contradictions in player comments.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[Tuple[int, int, str]]]]): List of test cases, each containing:\n            - n (int): Number of players.\n            - m (int): Number of comments.\n            - comments (List[Tuple[int, int, str]]): List of comments, each containing:\n                - i (int): Player making the comment.\n                - j (int): Player being commented on.\n                - c (str): Role stated ('imposter' or 'crewmate').\n\n    Returns:\n        List[int]: Maximum number of imposters for each test case, or -1 if contradictions are found.\n    \"\"\"\n    results = []\n\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n\n        # Initialize union-find structure\n        parent = list(range(n + 1))\n        rank = [0] * (n + 1)\n        role = [-1] * (n + 1)  # -1: unknown, 0: crewmate, 1: imposter\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y, same_role):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                if rank[rootX] > rank[rootY]:\n                    parent[rootY] = rootX\n                elif rank[rootX] < rank[rootY]:\n                    parent[rootX] = rootY\n                else:\n                    parent[rootY] = rootX\n                    rank[rootX] += 1\n                # Assign roles based on same_role flag\n                if same_role:\n                    role[rootY] = role[rootX]\n                else:\n                    role[rootY] = 1 - role[rootX]\n\n        contradiction = False\n        for i, j, c in comments:\n            if c == 'imposter':\n                if find(i) == find(j) and role[i] == role[j]:\n                    contradiction = True\n                    break\n                union(i, j, False)\n            else:  # c == 'crewmate'\n                if find(i) == find(j) and role[i] != role[j]:\n                    contradiction = True\n                    break\n                union(i, j, True)\n\n        if contradiction:\n            results.append(-1)\n        else:\n            # Calculate maximum imposters\n            max_imposters = sum(1 for r in role if r == 1)\n            results.append(max_imposters)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        comments = [tuple(input().split()) for _ in range(m)]\n        comments = [(int(i), int(j), c) for i, j, c in comments]\n        test_cases.append((n, m, comments))\n\n    # Call the function and print results\n    results = max_imposters(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe requirements focus on determining the roles of players based on comments, ensuring that contradictions are identified, and maximizing the number of imposters. The solution must handle large inputs efficiently and provide clear outputs.\nrequirement pool:\n- Implement logic to determine player roles based on comments.\n- Detect contradictions in comments.\n- Optimize for large input sizes.\n- Provide clear output format.\n- Enhance user experience with intuitive feedback.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the roles, checking for contradictions. The Union-Find data structure will help efficiently manage connected components and detect contradictions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, and crewmates always tell the truth. The task is to determine the maximum number of imposters based on the comments, or identify contradictions.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': means we need to find the largest count of imposters that can be deduced from the comments without contradictions.\n\n# [degree adverb] \n    'maximum': means we need to find the highest number of imposters possible given the comments.\n\n# [code logic]\n    1. Model the players and comments as a graph where each player is a node and each comment is an edge with a label (imposter or crewmate).\n    2. Use a Union-Find data structure to manage connected components and efficiently check for contradictions.\n    3. Perform a depth-first search (DFS) to traverse the graph and assign roles to players, checking for contradictions.\n    4. If a contradiction is found during DFS traversal, return -1 for that test case.\n    5. Otherwise, calculate the maximum number of imposters possible for each test case.\n\n# [edge case] \n    Test case with no comments: \n    Input: 5 0\n    Expected output: 5\n    Explanation: With no comments, all players can be imposters.\n\n    Test case with contradictory comments:\n    Input: 2 2\n           1 2 imposter\n           2 1 crewmate\n    Expected output: -1\n    Explanation: The comments contradict each other as explained in the prompt.\n\n    Test case with multiple comments for same pair:\n    Input: 3 5\n           1 2 imposter\n           1 2 imposter\n           3 2 crewmate\n           3 2 crewmate\n           1 3 imposter\n    Expected output: 2\n    Explanation: Despite multiple comments, no contradiction arises, allowing for maximum imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement Union-Find to efficiently manage connected components.\n        - Use DFS to traverse and assign roles while checking for contradictions.\n        - Handle cases with no comments by defaulting all players to imposters.\n        - Ensure multiple comments for the same pair do not cause unnecessary contradictions.\n", "requirement analysis:\nThe requirements focus on determining the maximum number of imposters based on player comments, ensuring that contradictions are identified. The solution must efficiently handle large inputs and multiple test cases.\nrequirement pool:\n- Implement efficient algorithm for role determination\n- Detect contradictions in player comments\n- Optimize for large input sizes\n- Provide clear output format\n- Enhance user experience with quick processing\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form directed edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to attempt to assign roles to players, checking for contradictions. If a contradiction is found, we will return -1 for that test case. Otherwise, we will calculate the maximum number of imposters possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter': A player who always lies about the role of other players.\n    'crewmate': A player who always tells the truth about the role of other players.\n    'contradict': A situation where the comments made by players cannot logically coexist, indicating an inconsistency in the statements.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': This means we need to find the highest count of imposters that can be logically deduced from the comments without contradiction.\n\n# [degree adverb] \n    'maximum': Refers to the largest possible number of imposters that can be identified without any contradictions in the comments.\n\n# [code logic]\n1. Model the problem as a graph where each player is a node.\n2. Use edges to represent comments, with labels indicating whether the comment is about an 'imposter' or 'crewmate'.\n3. Use a depth-first search (DFS) to attempt to assign roles to players:\n   - If a player is labeled as an imposter, their statements about others must be false.\n   - If a player is labeled as a crewmate, their statements about others must be true.\n4. Check for contradictions during DFS:\n   - If a contradiction is found (e.g., a player is both an imposter and a crewmate), return -1 for that test case.\n5. If no contradictions are found, calculate the maximum number of imposters by considering all possible valid role assignments.\n\n# [edge case] \n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, there are no constraints, so all players can be imposters.\n\n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, making it impossible to assign roles without inconsistency.\n\n    Test case with all players as crewmates (e.g., 3 2 with comments \"1 2 crewmate\" and \"2 3 crewmate\") = 0\n    Explanation: If all players are crewmates, no imposters can exist.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Initialize a visited set to keep track of visited nodes during DFS.\n    - Use a stack or recursion for DFS to explore each component of the graph.\n    - Implement logic to detect contradictions and handle cases with no comments efficiently.\n\n```python\ndef find_maximum_imposters(test_cases):\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        graph = {}\n        for i in range(1, n + 1):\n            graph[i] = []\n\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n\n        visited = {}\n        def dfs(node, role):\n            if node in visited:\n                return visited[node] == role\n            visited[node] = role\n            for neighbor, comment in graph[node]:\n                if not dfs(neighbor, 'imposter' if comment == 'crewmate' else 'crewmate'):\n                    return False\n            return True\n\n        max_imposters = 0\n        for player in range(1, n + 1):\n            if player not in visited:\n                if not dfs(player, 'imposter'):\n                    max_imposters = -1\n                    break\n                max_imposters += sum(1 for v in visited.values() if v == 'imposter')\n        \n        results.append(max_imposters if max_imposters != -1 else -1)\n    \n    return results\n```\n\n", "requirement analysis:\nThe game requires a mechanism to determine the maximum number of imposters based on player comments. It must efficiently handle contradictions and provide quick feedback. The solution should be scalable to accommodate large numbers of players and comments, ensuring logical consistency and optimal performance.\nrequirement pool:\n- Implement logic to determine maximum imposters based on comments.\n- Detect and handle contradictions in player comments.\n- Optimize performance for large input sizes.\n- Design a user-friendly interface for input and output.\n- Ensure seamless integration with existing game mechanics.\nWe will use a graph-based approach to solve this problem. Each player can be represented as a node, and each comment as an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a union-find (disjoint set) data structure to efficiently manage and query connected components, which will help us determine the maximum number of imposters or detect contradictions. This approach is efficient and suitable for handling large input sizes as required by the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, an imposter always lies, while a crewmate always tells the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments made by players cannot logically coexist, meaning that the statements about roles conflict with each other.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This means we need to find the highest count of imposters that can be logically deduced from the comments without contradiction.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We need to find the largest possible number of imposters that can be deduced from the comments.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, initialize a union-find data structure to manage player roles.\n3. For each comment, update the union-find structure:\n   - If player i says player j is an imposter, they must have opposite roles.\n   - If player i says player j is a crewmate, they must have the same role.\n4. Check for contradictions:\n   - If a contradiction is found (e.g., a player is both a crewmate and an imposter), return -1 for that test case.\n5. Calculate the maximum number of imposters by evaluating the connected components in the union-find structure.\n6. Output the result for each test case.\n\n# [edge case]\n    Test Case 1: 2 1\n    1 2 imposter\n    Expected Output: 1\n    Explanation: Player 1 says player 2 is an imposter, so one of them must be an imposter.\n\n    Test Case 2: 3 3\n    1 2 imposter\n    2 3 crewmate\n    3 1 crewmate\n    Expected Output: -1\n    Explanation: The comments create a cycle of contradictions.\n\n    Test Case 3: 4 0\n    Expected Output: 4\n    Explanation: With no comments, all players can be imposters.\n\n# [extra code for edge case]\n    We need extra code to handle contradictions and calculate connected components.\n    \n```python\ndef find(parent, x):\n    if parent[x] != x:\n        parent[x] = find(parent, parent[x])\n    return parent[x]\n\ndef union(parent, rank, x, y):\n    rootX = find(parent, x)\n    rootY = find(parent, y)\n    \n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef solve(test_cases):\n    results = []\n    \n    for n, m, comments in test_cases:\n        parent = list(range(n + 1))\n        rank = [0] * (n + 1)\n        role = [-1] * (n + 1) # -1 means unassigned, 0 means crewmate, 1 means imposter\n        \n        contradiction = False\n        \n        for i, j, c in comments:\n            if c == \"imposter\":\n                if role[i] == -1 and role[j] == -1:\n                    role[i], role[j] = 0, 1\n                elif role[i] == -1:\n                    role[i] = 1 - role[j]\n                elif role[j] == -1:\n                    role[j] = 1 - role[i]\n                elif role[i] == role[j]:\n                    contradiction = True\n                    break\n            else: # c == \"crewmate\"\n                if role[i] == -1 and role[j] == -1:\n                    role[i], role[j] = 0, 0\n                elif role[i] == -1:\n                    role[i] = role[j]\n                elif role[j] == -1:\n                    role[j] = role[i]\n                elif role[i] != role[j]:\n                    contradiction = True\n                    break\n        \n        if contradiction:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for r in role if r == 1)\n            results.append(imposters_count)\n    \n    return results\n```\n\n", "requirement analysis:\nThe game requires a robust algorithm to determine the maximum number of imposters based on player comments. It must efficiently handle contradictions and large datasets, ensuring accurate results and a smooth user experience.\nrequirement pool:\n- Implement the main algorithm to determine imposters and handle contradictions\n- Optimize performance for large numbers of players and comments\n- Create a user-friendly interface for displaying results\n- Ensure clear communication of game rules and mechanics\n- Develop engaging tutorials for new players\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and each comment will be an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a depth-first search (DFS) to traverse the graph and determine the roles of players, checking for contradictions. The networkx library can be used to handle graph operations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, an imposter always lies, and a crewmate always tells the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: If the comments made by players lead to a logical inconsistency, it means the comments contradict each other.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This means we need to find the highest count of imposters that can be logically deduced from the comments without contradiction.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We need to find the largest possible number of imposters that can exist without any contradictions in the comments.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, initialize a graph where each player is a node.\n3. For each comment, add an edge between two nodes with a label ('imposter' or 'crewmate').\n4. Use DFS to traverse the graph:\n   - Assign roles to players based on comments.\n   - Check for contradictions during traversal.\n5. If a contradiction is found, return -1 for that test case.\n6. Otherwise, calculate and return the maximum number of imposters.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, all players can be imposters.\n\n    Test case with contradictory comments (e.g., 2 2 with \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, so the output is -1.\n\n    Test case with all players as crewmates (e.g., 3 2 with \"1 2 crewmate\" and \"2 3 crewmate\") = 0\n    Explanation: If all players are crewmates, no imposters can exist.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, we need to handle cases where there are no comments by defaulting to all players being imposters.\n    - We also need logic to detect contradictions during DFS traversal.\n\n```python\ndef find_max_imposters(test_cases):\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        # Initialize graph and other structures\n        graph = {}\n        roles = {}\n        contradiction_found = False\n        \n        # Build graph\n        for i, j, c in comments:\n            if i not in graph:\n                graph[i] = []\n            if j not in graph:\n                graph[j] = []\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n        \n        # DFS function\n        def dfs(player, role):\n            nonlocal contradiction_found\n            if player in roles:\n                if roles[player] != role:\n                    contradiction_found = True\n                return\n            roles[player] = role\n            for neighbor, comment in graph.get(player, []):\n                dfs(neighbor, 'imposter' if comment == 'crewmate' else 'crewmate')\n        \n        # Check each component\n        for player in range(1, n + 1):\n            if player not in roles:\n                dfs(player, 'imposter')\n        \n        if contradiction_found:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for role in roles.values() if role == 'imposter')\n            results.append(imposters_count)\n    \n    return results\n```\n\n", "requirement analysis:\nThe requirements focus on determining the maximum number of imposters based on player comments, while ensuring that contradictions are identified. The solution must efficiently handle large inputs and multiple test cases.\nrequirement pool:\n- Efficiently process large input data.\n- Accurately determine player roles based on comments.\n- Identify contradictions in player comments.\n- Provide clear output for each test case.\n- Optimize for performance with high number of test cases.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player will be a node, and comments will form edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the roles, checking for contradictions. The networkx library can be used to efficiently handle graph operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, an imposter always lies, and a crewmate always tells the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments made by players cannot logically coexist, meaning that the roles assigned based on these comments lead to an inconsistency.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This means we need to find the highest count of imposters that can be logically deduced from the comments without causing contradictions.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the largest possible number of imposters that can be identified without contradictions.\n\n# [code logic]\n1. Parse the input to extract the number of test cases.\n2. For each test case, initialize a graph where each player is a node.\n3. For each comment, add an edge between two nodes with a label indicating whether the comment is about an 'imposter' or 'crewmate'.\n4. Use a depth-first search (DFS) to traverse the graph:\n   - Assign roles to players based on comments.\n   - Check for contradictions during traversal.\n5. If a contradiction is found, return -1 for that test case.\n6. Otherwise, calculate and return the maximum number of imposters possible.\n\n# [edge case]\n    Test Case 1: \n    2 1\n    1 2 imposter\n    Expected Output: 1\n    Explanation: Player 1 says player 2 is an imposter. If player 1 is a crewmate, then player 2 must be an imposter.\n\n    Test Case 2:\n    3 3\n    1 2 imposter\n    2 3 imposter\n    3 1 crewmate\n    Expected Output: -1\n    Explanation: The comments create a cycle of contradictions.\n\n    Test Case 3:\n    4 0\n    Expected Output: 4\n    Explanation: With no comments, all players can be imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef find_maximum_imposters(test_cases):\n    results = []\n    \n    for n, m, comments in test_cases:\n        # Initialize graph and role assignment\n        graph = {}\n        roles = [-1] * (n + 1)  # -1 means unassigned\n        \n        # Build graph from comments\n        for i, j, c in comments:\n            if i not in graph:\n                graph[i] = []\n            if j not in graph:\n                graph[j] = []\n            graph[i].append((j, c))\n            graph[j].append((i, c))\n        \n        def dfs(node, role):\n            stack = [(node, role)]\n            while stack:\n                current, current_role = stack.pop()\n                if roles[current] == -1:\n                    roles[current] = current_role\n                elif roles[current] != current_role:\n                    return False\n                \n                for neighbor, comment in graph.get(current, []):\n                    expected_role = current_role if comment == 'crewmate' else 1 - current_role\n                    if roles[neighbor] == -1:\n                        stack.append((neighbor, expected_role))\n                    elif roles[neighbor] != expected_role:\n                        return False\n            return True\n        \n        max_imposters = 0\n        contradiction_found = False\n        \n        for player in range(1, n + 1):\n            if roles[player] == -1:\n                if not dfs(player, 0):\n                    contradiction_found = True\n                    break\n                max_imposters += sum(1 for r in roles if r == 0)\n        \n        if contradiction_found:\n            results.append(-1)\n        else:\n            results.append(max_imposters)\n    \n    return results\n```\nThis code handles edge cases by using DFS to assign roles and check for contradictions. If no contradictions are found, it calculates the maximum number of imposters.\n", "requirement analysis:\nThe game requires a robust algorithm to determine the maximum number of imposters based on player comments. It must efficiently handle contradictions and provide quick feedback. The solution should be scalable to accommodate the upper limits of players and comments.\nrequirement pool:\n- Implement the core algorithm to determine imposters.\n- Ensure the game logic handles contradictions effectively.\n- Optimize performance for large datasets.\n- Provide clear user feedback on game outcomes.\n- Enhance user interface for better engagement.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player can be represented as a node, and comments as edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the maximum number of imposters while checking for contradictions. The networkx library can be used to efficiently handle graph operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter': A player who always lies about the role of other players.\n    'crewmate': A player who always tells the truth about the role of other players.\n    'contradict': A situation where the comments made by players cannot logically coexist, indicating an inconsistency in the statements.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': This means we need to find the highest count of imposters that can be logically deduced from the comments without contradiction.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible number of imposters that can be identified without any contradictions in the comments.\n\n# [code logic]\n1. Parse the input to extract the number of test cases.\n2. For each test case, initialize a graph where nodes represent players and edges represent comments.\n3. Use a DFS or BFS to traverse the graph:\n   - Assign roles to players based on comments.\n   - Check for contradictions during traversal.\n4. If a contradiction is found, return -1 for that test case.\n5. Otherwise, calculate and return the maximum number of imposters possible.\n\n# [edge case]\n    Test Case 1: \n    Input: 2 1\n           1 2 imposter\n    Expected Output: 1\n    Explanation: Player 1 can be an imposter, making player 2 a crewmate, which is consistent.\n\n    Test Case 2:\n    Input: 3 3\n           1 2 imposter\n           2 3 imposter\n           3 1 crewmate\n    Expected Output: -1\n    Explanation: The comments create a cycle of contradictions.\n\n    Test Case 3:\n    Input: 4 0\n    Expected Output: 4\n    Explanation: With no comments, all players can be imposters.\n\n# [extra code for edge case]\n    We need extra code to handle contradictions and cases with no comments.\n    \n```python\ndef find_max_imposters(test_cases):\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        # Initialize graph and visited status\n        graph = {i: [] for i in range(1, n + 1)}\n        roles = [-1] * (n + 1) # -1 means unassigned, 0 means crewmate, 1 means imposter\n        \n        # Build graph\n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n        \n        def dfs(node, role):\n            stack = [(node, role)]\n            while stack:\n                current, current_role = stack.pop()\n                if roles[current] == -1:\n                    roles[current] = current_role\n                elif roles[current] != current_role:\n                    return False\n                \n                for neighbor, comment_role in graph[current]:\n                    expected_role = 0 if comment_role == 'crewmate' else 1\n                    if roles[neighbor] == -1:\n                        stack.append((neighbor, expected_role))\n                    elif roles[neighbor] != expected_role:\n                        return False\n            return True\n        \n        max_imposters = 0\n        contradiction_found = False\n        \n        for player in range(1, n + 1):\n            if roles[player] == -1:\n                if not dfs(player, 0):\n                    contradiction_found = True\n                    break\n                max_imposters += sum(1 for r in roles if r == 1)\n        \n        results.append(-1 if contradiction_found else max_imposters)\n    \n    return results\n```\n\n", "requirement analysis:\nThe game needs to efficiently determine the maximum number of imposters based on player comments, while also identifying contradictions. The solution must handle large inputs and multiple test cases, providing clear and accurate outputs.\nrequirement pool:\n- Implement algorithm to determine maximum imposters.\n- Detect contradictions in player comments.\n- Optimize for large input sizes.\n- Ensure seamless handling of multiple test cases.\n- Provide detailed error messages for contradictions.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player can be represented as a node, and comments as edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the roles, checking for contradictions. The use of graph traversal ensures efficient handling of large inputs and multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter': A player who always lies about the role of other players.\n    'crewmate': A player who always tells the truth about the role of other players.\n    'contradict': When the statements made by players cannot logically coexist, indicating an inconsistency in the comments.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': This means we need to find the highest count of imposters that can be logically deduced from the comments without contradiction.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible number of imposters that can be identified without any contradictions in the comments.\n\n# [code logic]\n1. Parse the input to extract the number of test cases.\n2. For each test case, initialize a graph where each player is a node.\n3. Use edges to represent comments, with labels indicating whether the comment is about an 'imposter' or 'crewmate'.\n4. Perform a depth-first search (DFS) or breadth-first search (BFS) to assign roles to players, ensuring no contradictions arise:\n   - If a contradiction is found during traversal, mark the test case as invalid and return -1.\n   - Otherwise, count the maximum number of imposters possible based on consistent role assignments.\n5. Output the result for each test case.\n\n# [edge case]\n    Test Case 1: \n    Input: 2 1\n           1 2 imposter\n    Expected Output: 1\n    Explanation: Player 1 can be a crewmate, making player 2 an imposter.\n\n    Test Case 2:\n    Input: 3 3\n           1 2 imposter\n           2 3 imposter\n           3 1 crewmate\n    Expected Output: -1\n    Explanation: The comments form a cycle that leads to a contradiction.\n\n    Test Case 3:\n    Input: 4 0\n    Expected Output: 4\n    Explanation: With no comments, all players can be imposters.\n\n# [extra code for edge case]\n    We need extra code to handle contradictions and cases with no comments:\n    - Implement a check during graph traversal to detect contradictions.\n    - If no comments are present, assume all players can be imposters.\n\n```python\ndef find_max_imposters(test_cases):\n    results = []\n    \n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        graph = {}\n        for i in range(1, n + 1):\n            graph[i] = []\n        \n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n        \n        roles = {}\n        contradiction = False\n        \n        def dfs(player, role):\n            nonlocal contradiction\n            if player in roles:\n                if roles[player] != role:\n                    contradiction = True\n                return\n            roles[player] = role\n            for neighbor, comment in graph[player]:\n                dfs(neighbor, 'imposter' if comment == 'crewmate' else 'crewmate')\n        \n        for player in range(1, n + 1):\n            if player not in roles:\n                dfs(player, 'crewmate')\n        \n        if contradiction:\n            results.append(-1)\n        else:\n            imposters_count = sum(1 for role in roles.values() if role == 'imposter')\n            results.append(imposters_count)\n    \n    return results\n```\n\n", "requirement analysis:\nThe game requires a mechanism to determine the maximum number of imposters based on player comments, ensuring logical consistency and detecting contradictions. The solution must efficiently handle large inputs and provide clear outputs for each test case.\nrequirement pool:\n- Implement logic to determine maximum imposters.\n- Detect contradictions in player comments.\n- Optimize performance for handling large numbers of players and comments.\n- Provide clear output format for test cases.\n- Enhance user experience with intuitive feedback.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player can be represented as a node, and comments as edges with labels indicating the role (imposter or crewmate). We will use a depth-first search (DFS) to traverse the graph and determine the maximum number of imposters while checking for contradictions. The networkx library can be used to handle graph operations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter': A player who always lies about the role of other players.\n    'crewmate': A player who always tells the truth about the role of other players.\n    'contradict': A situation where the comments made by players cannot logically coexist, indicating an inconsistency in the statements.\n\n# [phrase showing quantity relationship]\n    'maximum possible number': This means we need to find the highest count of imposters that can be logically deduced from the comments without contradiction.\n\n# [degree adverb] \n    'maximum': This indicates that we are looking for the largest possible number of imposters that can be identified without any contradictions in the comments.\n\n# [code logic]\n1. Parse the input to extract the number of test cases and details for each test case.\n2. For each test case, create a graph where nodes represent players and edges represent comments.\n3. Use a DFS or BFS to traverse the graph:\n   - Assign roles to players based on comments, ensuring consistency.\n   - Track the number of imposters and crewmates.\n4. Check for contradictions during traversal:\n   - If a contradiction is found, mark the test case as invalid and return -1.\n5. If no contradictions are found, calculate the maximum number of imposters possible.\n6. Output the result for each test case.\n\n# [edge case] \n    1. Test case with no comments (e.g., 5 0) = 5\n       Explanation: With no comments, there are no contradictions, so all players can be imposters.\n    2. Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n       Explanation: The comments contradict each other, making it impossible to assign roles consistently.\n    3. Test case with all players claiming others as imposters (e.g., 3 3 with comments \"1 2 imposter\", \"2 3 imposter\", \"3 1 imposter\") = -1\n       Explanation: This creates a cycle of contradictions, as each player's claim cannot be true simultaneously.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases involving contradictions.\n    \n```python\ndef find_maximum_imposters(test_cases):\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        graph = {}\n        for i in range(1, n + 1):\n            graph[i] = []\n        \n        for i, j, c in comments:\n            graph[i].append((j, c))\n            graph[j].append((i, 'crewmate' if c == 'imposter' else 'imposter'))\n        \n        visited = {}\n        def dfs(node, role):\n            if node in visited:\n                return visited[node] == role\n            visited[node] = role\n            for neighbor, comment_role in graph[node]:\n                if not dfs(neighbor, 'imposter' if comment_role == 'crewmate' else 'crewmate'):\n                    return False\n            return True\n        \n        max_imposters = 0\n        for player in range(1, n + 1):\n            if player not in visited:\n                if not dfs(player, 'imposter'):\n                    max_imposters = -1\n                    break\n                max_imposters += sum(1 for v in visited.values() if v == 'imposter')\n        \n        results.append(max_imposters if max_imposters != -1 else -1)\n    \n    return results\n```\nThis code handles edge cases by using DFS to ensure consistent role assignment and checks for contradictions during traversal.\n", "requirement analysis:\nThe game requires a robust algorithm to determine the maximum number of imposters based on player comments. It must handle contradictions and provide clear feedback. The solution should be optimized for large inputs, given the constraints on the number of players and comments.\nrequirement pool:\n- Implement the core algorithm to determine the maximum number of imposters.\n- Ensure the algorithm can detect contradictions in player comments.\n- Optimize the solution for large numbers of players and comments.\n- Provide clear output for each test case, indicating the result.\n- Enhance user experience with intuitive feedback and interaction.\nWe will use a graph-based approach to model the problem. Each player is a node, and each comment is an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a union-find (disjoint set) data structure to efficiently manage and query connected components, which will help us determine the maximum number of imposters or detect contradictions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, imposters always lie, and crewmates always tell the truth. Each player has exactly one role, either imposter or crewmate.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments made by players cannot logically coexist, meaning that the roles assigned based on the comments lead to an inconsistency.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: We need to find the largest number of players that can be imposters without causing contradictions in the comments.\n\n# [degree adverb]\n    'maximum'\n    Explanation: We are looking for the highest number of imposters possible given the constraints of the comments.\n\n# [code logic]\n    1. Initialize a union-find data structure to manage player roles.\n    2. For each test case, iterate through the comments and build a graph where nodes represent players and edges represent comments.\n    3. Use union-find to group players into components based on their comments.\n    4. Check for contradictions within each component:\n        - If a contradiction is found, return -1 for that test case.\n        - Otherwise, calculate the maximum number of imposters possible in each component.\n    5. Return the sum of maximum imposters for all components in a test case.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, there are no constraints, so all players can be imposters.\n\n    Test case with contradictory comments (e.g., 2 2 with comments \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments contradict each other, so it's impossible to assign roles without inconsistency.\n\n    Test case with multiple comments for the same pair (e.g., 3 5 with comments \"1 2 imposter\", \"1 2 imposter\", \"3 2 crewmate\", \"3 2 crewmate\", \"1 3 imposter\") = 2\n    Explanation: Despite multiple comments, we can resolve roles without contradiction, allowing for maximum imposters.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Initialize all players as potential imposters when there are no comments.\n        - Implement logic to detect contradictions using union-find and graph traversal.\n        - Ensure that multiple comments for the same pair are handled correctly without causing false contradictions.\n", "requirement analysis:\nThe game requires a robust algorithm to determine the maximum number of imposters based on player comments. It must handle contradictions and provide clear feedback. The solution should be optimized for performance given the constraints on the number of players and comments.\nrequirement pool:\n- Implement the core logic to determine the maximum number of imposters.\n- Ensure the algorithm can detect contradictions in player comments.\n- Optimize the solution for large input sizes.\n- Provide clear output for each test case.\n- Enhance user experience with intuitive feedback.\nWe will use a graph-based approach to model the relationships between players and their comments. Each player can be represented as a node, and each comment as an edge with a label indicating whether the comment is 'imposter' or 'crewmate'. We will use a union-find (disjoint set) data structure to efficiently manage and query connected components, which will help in determining the maximum number of imposters and detecting contradictions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'imposter' and 'crewmate'\n    Explanation: In the game, an imposter always lies, while a crewmate always tells the truth. The task is to determine the maximum number of imposters based on the comments made by players.\n\n    'contradict'\n    Explanation: A contradiction occurs when the comments made by players cannot logically coexist, such as when one player's statement about another's role conflicts with the other's statement about their role.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This refers to finding the highest number of imposters that can be logically deduced from the comments without causing contradictions. In code, this involves maximizing a count while ensuring consistency in the statements.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The goal is to find the largest possible number of imposters that can be deduced from the given comments. This requires checking all possible configurations and selecting the one with the most imposters.\n\n# [code logic]\n1. Parse the input to extract the number of test cases.\n2. For each test case, initialize a union-find data structure to manage player relationships.\n3. Iterate over each comment and update the union-find structure:\n   - If a player i says player j is an imposter, link them with a 'lie' relationship.\n   - If a player i says player j is a crewmate, link them with a 'truth' relationship.\n4. After processing all comments, check for contradictions by verifying if any two players have conflicting roles.\n5. If no contradictions are found, calculate the maximum number of imposters by analyzing connected components in the union-find structure.\n6. Output the result for each test case.\n\n# [edge case]\n    Test case with no comments (e.g., 5 0) = 5\n    Explanation: With no comments, there are no constraints, so all players can be imposters.\n\n    Test case with contradictory comments (e.g., 2 2 with \"1 2 imposter\" and \"2 1 crewmate\") = -1\n    Explanation: The comments directly contradict each other, making it impossible to assign roles without conflict.\n\n    Test case with all players as crewmates (e.g., 3 2 with \"1 2 crewmate\" and \"2 3 crewmate\") = 0\n    Explanation: If all players are crewmates, then no imposters can exist.\n\n# [extra code for edge case]\n    We need extra code to handle contradictions and cases with no comments.\n    \n```python\ndef find_max_imposters(test_cases):\n    results = []\n    for n, m, comments in test_cases:\n        if m == 0:\n            results.append(n)\n            continue\n        \n        # Initialize union-find structure\n        parent = list(range(n + 1))\n        rank = [0] * (n + 1)\n        role = [-1] * (n + 1)  # -1: unknown, 0: crewmate, 1: imposter\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y, same_role):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                if rank[rootX] > rank[rootY]:\n                    parent[rootY] = rootX\n                elif rank[rootX] < rank[rootY]:\n                    parent[rootX] = rootY\n                else:\n                    parent[rootY] = rootX\n                    rank[rootX] += 1\n                # Assign roles based on same_role flag\n                if same_role:\n                    role[rootY] = role[rootX]\n                else:\n                    role[rootY] = 1 - role[rootX]\n\n        contradiction = False\n        for i, j, c in comments:\n            if c == 'imposter':\n                if find(i) == find(j) and role[i] == role[j]:\n                    contradiction = True\n                    break\n                union(i, j, False)\n            else:  # c == 'crewmate'\n                if find(i) == find(j) and role[i] != role[j]:\n                    contradiction = True\n                    break\n                union(i, j, True)\n\n        if contradiction:\n            results.append(-1)\n        else:\n            # Calculate maximum imposters\n            max_imposters = sum(1 for r in role if r == 1)\n            results.append(max_imposters)\n\n    return results\n```\n\n"], "scores": [], "pass_results": [false, false, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": false, "pass": false, "pass_num": 0, "round": 71, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of each test case follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5; 0 \u2264 m \u2264 5 \u22c5 10^5) \u2014 the number of players except Theofanis and the number of comments.\n\nEach of the next m lines contains a comment made by the players of the structure \"i j c\" where i and j are two distinct integers and c is a string (1 \u2264 i, j \u2264 n; i \u2260 j; c is either imposter or crewmate).\n\nThere can be multiple comments for the same pair of (i, j).\n\nIt is guaranteed that the sum of all n does not exceed 2 \u22c5 10^5 and the sum of all m does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print -1.\n\nExample\n\nInput\n\n\n5\n3 2\n1 2 imposter\n2 3 crewmate\n5 4\n1 3 crewmate\n2 5 crewmate\n2 4 imposter\n3 4 imposter\n2 2\n1 2 imposter\n2 1 crewmate\n3 5\n1 2 imposter\n1 2 imposter\n3 2 crewmate\n3 2 crewmate\n1 3 imposter\n5 0\n\n\nOutput\n\n\n2\n4\n-1\n2\n5\n\nNote\n\nIn the first test case, imposters can be Andreas 2 and 3.\n\nIn the second test case, imposters can be Andreas 1, 2, 3 and 5.\n\nIn the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can't be a crewmate. Contradiction.", "mutate_method": "add_1_sentence_at_end", "parent_index": 67}
