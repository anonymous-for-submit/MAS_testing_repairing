{"name": "1579_D. Productive Meeting", "description": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several (as many as they want) times per meeting.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "tags": ["constructive algorithms", "graphs", "greedy"], "difficulty": 10, "id": 1579, "sample_io": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}], "test_list": [{"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 1\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["0\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 0\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n2\n2 3\n1 2\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 2 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n8 4 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n7\n1 2\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 -1 0\n5\n5 0 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 5\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n0\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 1\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n6 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 5\n1 5\n1 2\n5 1\n2 4\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n1 0 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 1 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n1\n3 2\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 3 3 4\n3\n1 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 2\n3 4\n2 3\n4 1\n2 3\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 4 4\n3\n0 0 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n3 4\n3 4\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 2 2\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n6 2\n3\n0 1 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n1\n3 2\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 2 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n8 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n7\n1 5\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 2\n3\n0 2 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 1 1 1\n5\n0 1 0 0 6\n", "output": ["0\n2\n3 2\n3 2\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 3\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 3 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 3\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 1 4\n5\n1 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 0\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n2 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n2 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 1 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 1\n4\n1 4 0 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n2 4\n2 4\n2 4\n1 2\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n1 1 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n0 0 2\n2\n12 0\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n0\n0\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 0\n5\n5 2 0 2 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 1 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n0 2\n3\n0 0 2\n5\n10 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 2 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 1 4\n5\n13 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 2\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 1 2 5\n3\n1 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 3\n4 1\n4 2\n4 3\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 2 4\n3\n0 0 1\n2\n12 2\n3\n0 0 1\n5\n5 2 0 1 4\n5\n1 1 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 1 4\n3\n0 0 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -2 1 4\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n3\n4 2\n4 2\n4 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n1 5\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n10 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n0 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 0\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n0 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 2\n3\n0 0 4\n5\n13 4 0 1 1\n5\n0 1 0 1 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 1 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n6\n1 5\n1 2\n1 5\n1 2\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 9\n", "output": ["1\n2 1\n2\n2 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n2 0 0\n2\n12 0\n3\n-1 0 0\n5\n1 4 -1 1 4\n5\n1 0 1 0 10\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n5\n2 5\n2 5\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 3\n3\n0 0 2\n5\n4 2 1 1 4\n5\n0 2 1 0 4\n", "output": ["2\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n5 1\n2 3\n4 5\n3\n5 2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n6\n4 3\n4 2\n4 3\n4 1\n4 2\n4 3\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 3 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 5 4\n3\n0 0 2\n2\n6 0\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n0\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n2 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n1 0 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 0\n5\n8 3 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 3 0 1 1\n5\n1 1 0 0 1\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n1 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 3\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 2\n3\n0 0 0\n5\n5 2 -1 1 4\n5\n0 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 3\n3\n0 0 0\n5\n5 4 -1 1 8\n5\n1 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n9\n5 1\n5 1\n5 2\n5 1\n5 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n0 2 2 4\n3\n0 0 0\n2\n12 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 1 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 2\n3 4\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 4\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 4\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 3\n4 2\n3 4\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n1 3\n3\n1 1 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n1\n2 1\n2\n3 1\n2 3\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n0 3\n3\n1 2 3\n4\n1 2 0 4\n3\n0 0 2\n2\n10 2\n3\n0 0 2\n5\n0 2 0 1 1\n5\n0 0 0 0 6\n", "output": ["0\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n0\n"]}, {"input": "8\n2\n6 3\n3\n1 0 3\n4\n2 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 4\n4\n1 2 3 4\n3\n0 0 1\n2\n6 2\n3\n1 0 2\n5\n8 4 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n4\n2 3\n2 3\n2 3\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n1\n3 1\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 1 3\n4\n1 2 2 4\n3\n0 0 2\n2\n5 2\n3\n0 0 2\n5\n8 2 0 1 3\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 2\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 5 1\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n0 3 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n5\n3 1\n3 2\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 2 2 4\n3\n0 0 2\n2\n12 4\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 3\n4 2\n3 4\n0\n4\n1 2\n1 2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n3\n5 1\n5 2\n5 3\n"]}, {"input": "8\n2\n3 5\n3\n0 0 3\n4\n0 2 2 8\n3\n0 0 0\n2\n12 2\n3\n1 0 0\n5\n5 2 -1 1 4\n5\n1 0 0 0 6\n", "output": ["3\n2 1\n2 1\n2 1\n0\n4\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n0 2 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 3\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n3\n3 2\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n2 2 1 4\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n14 2 0 1 2\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n4 1\n4 2\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n5\n1 2\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 0\n5\n7 4 0 1 1\n5\n0 1 0 0 0\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n6\n1 2\n1 2\n1 2\n1 2\n1 4\n1 5\n0\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 1 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n14 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 1\n4 2\n3 4\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n0 0 5\n4\n1 2 2 4\n3\n0 0 0\n2\n16 0\n3\n0 0 0\n5\n5 4 -1 1 4\n5\n1 0 0 0 10\n", "output": ["1\n2 1\n0\n4\n4 2\n4 3\n4 1\n2 3\n0\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n1\n5 1\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 2\n3\n0 0 2\n2\n5 1\n3\n0 0 4\n5\n13 2 0 2 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n4\n3 2\n3 4\n1 2\n3 4\n0\n1\n1 2\n0\n5\n1 2\n1 4\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n1 3\n3\n1 2 4\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 1\n5\n0 2 0 1 1\n5\n1 1 0 0 9\n", "output": ["1\n2 1\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 4\n2 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 1\n3\n0 0 2\n5\n5 2 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n1\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 4\n5 1\n2 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 2\n4\n1 3 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n5 2 0 1 4\n5\n1 1 1 0 1\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 5\n1 5\n1 2\n1 5\n1 2\n4 5\n2\n1 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n1 2 3\n4\n1 4 3 1\n3\n0 0 2\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n2 3\n4\n2 3\n2 3\n2 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 4\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n1 2 2 5\n3\n1 0 2\n2\n9 2\n3\n0 1 2\n5\n5 3 0 2 4\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n5\n4 2\n4 3\n4 1\n4 2\n3 4\n1\n3 1\n2\n1 2\n1 2\n1\n3 2\n7\n1 5\n1 2\n1 5\n1 2\n4 5\n1 2\n4 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 2 4\n4\n1 1 3 1\n3\n1 0 0\n2\n7 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n3\n3 1\n3 2\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n3 3\n3\n1 0 2\n4\n1 2 2 4\n3\n0 0 2\n2\n12 2\n3\n0 0 2\n5\n4 2 0 1 5\n5\n1 2 1 0 4\n", "output": ["3\n1 2\n1 2\n1 2\n1\n3 1\n4\n4 2\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n6\n5 1\n5 1\n5 1\n2 5\n1 2\n4 5\n4\n5 2\n5 1\n5 2\n3 5\n"]}, {"input": "8\n2\n3 3\n3\n0 0 3\n4\n0 3 2 4\n3\n2 1 0\n2\n12 0\n3\n-1 0 0\n5\n5 4 -1 1 4\n5\n1 0 1 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n0\n4\n4 2\n4 2\n3 4\n2 3\n1\n1 2\n0\n0\n7\n1 2\n1 5\n1 2\n5 1\n2 5\n1 2\n4 5\n2\n5 1\n5 3\n"]}, {"input": "8\n2\n1 3\n3\n0 2 3\n4\n1 1 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["1\n2 1\n2\n3 2\n3 2\n4\n4 3\n4 3\n4 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 3\n4\n1 2 0 7\n3\n0 0 2\n2\n6 3\n3\n0 0 4\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n3 2\n3 1\n2 3\n3\n4 2\n4 1\n4 2\n0\n3\n1 2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 0 3\n4\n2 2 3 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 2 2\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n1\n3 1\n5\n3 4\n1 2\n3 4\n1 2\n3 4\n0\n2\n1 2\n1 2\n0\n6\n1 2\n1 4\n1 5\n1 2\n1 4\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 2 2\n4\n1 2 5 4\n3\n0 0 2\n2\n12 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n1 1 0 0 6\n", "output": ["2\n2 1\n2 1\n2\n2 3\n1 2\n6\n3 4\n3 4\n3 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n1 4 2\n4\n1 2 3 4\n3\n0 0 2\n2\n6 3\n3\n1 0 0\n5\n12 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 1\n2 3\n5\n4 3\n4 2\n3 4\n1 2\n3 4\n0\n3\n1 2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 0 3\n4\n1 2 3 0\n3\n0 0 2\n2\n6 2\n3\n0 0 4\n5\n8 2 0 0 1\n5\n0 1 0 0 6\n", "output": ["2\n2 1\n2 1\n0\n3\n3 2\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n3\n1 2\n1 2\n1 5\n1\n5 2\n"]}, {"input": "8\n2\n2 3\n3\n0 4 3\n4\n2 2 3 4\n3\n0 0 1\n2\n6 3\n3\n1 0 2\n5\n8 2 0 1 1\n5\n0 1 1 0 6\n", "output": ["2\n2 1\n2 1\n3\n2 3\n2 3\n2 3\n5\n4 3\n4 1\n2 3\n4 1\n2 3\n0\n3\n1 2\n1 2\n1 2\n1\n3 1\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 3\n"]}, {"input": "8\n2\n3 3\n3\n1 2 5\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 2\n5\n0 0 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n3\n3 2\n3 1\n3 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n2\n2 5\n2 4\n0\n"]}, {"input": "8\n2\n2 2\n3\n2 2 3\n4\n2 2 6 3\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 2 0 0 6\n", "output": ["2\n1 2\n1 2\n3\n3 1\n2 3\n1 2\n6\n3 4\n3 1\n3 2\n3 4\n3 1\n2 3\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 2\n1 4\n1 5\n2\n5 2\n5 2\n"]}, {"input": "8\n2\n5 3\n3\n2 2 1\n4\n0 2 3 7\n3\n0 1 0\n2\n6 2\n3\n0 0 2\n5\n0 2 0 1 0\n5\n0 1 0 0 6\n", "output": ["3\n1 2\n1 2\n1 2\n2\n1 2\n1 2\n5\n4 3\n4 2\n4 3\n4 2\n4 3\n0\n2\n1 2\n1 2\n0\n1\n2 4\n1\n5 2\n"]}], "task_id": "codecontest/16", "prompt": "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted. Carefully optimize the order of conversations to achieve the maximum number of talks.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "repair_prompt": ["An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore). If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted. Carefully optimize the order of conversations to achieve the maximum number of talks.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation. The identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability. The sociability of the i-th person is a non-negative integer a_i. This means that after exactly a_i talks this person leaves the meeting, which implies they will no longer participate in any further conversations. If a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it.\n\nYou are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted. Carefully optimize the order of conversations to achieve the maximum number of talks.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "An important meeting is to be held and there are exactly n people invited. At any given time, any two individuals can step aside for a private conversation, and the identical pair of people can converse multiple times in one meeting. They can engage in an unlimited number of private talks.\n\nEach person has limited sociability, and the sociability of the i-th person is a non-negative integer a_i, meaning that after exactly a_i talks this person leaves the meeting (and does not talk to anyone else anymore), and if a_i = 0, the i-th person leaves the meeting immediately after it starts.\n\nA meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a, determine which people should talk to each other so that the total number of talks is as large as possible. Assume all individuals are eager to engage in conversations until their sociability is exhausted. Carefully optimize the order of conversations to achieve the maximum number of talks.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of people and their sociability.\n\n    Returns:\n        A list of tuples, each containing the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate max-heap behavior\n        max_heap = []\n        for i, s in enumerate(sociability):\n            if s > 0:\n                heapq.heappush(max_heap, (-s, i + 1))  # Store negative sociability and 1-based index\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable people\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrement their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append((n, a))\n\n# Call the function\nresults = maximize_talks(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, talks = result\n    print(k)\n    for talk in talks:\n        print(talk[0], talk[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a list of tuples (sociability, index) and sort it in descending order\n        people = sorted([(s, i + 1) for i, s in enumerate(sociability)], reverse=True)\n        \n        talks = []\n        while len(people) > 1:\n            # Get the two most sociable people\n            first = people[0]\n            second = people[1]\n            \n            # If both have sociability > 0, they can talk\n            if first[0] > 0 and second[0] > 0:\n                talks.append((first[1], second[1]))\n                \n                # Decrease their sociability\n                people[0] = (first[0] - 1, first[1])\n                people[1] = (second[0] - 1, second[1])\n                \n                # Re-sort the list to maintain order\n                people.sort(reverse=True)\n            else:\n                break\n        \n        # Append the result for this test case\n        results.append((len(talks), talks))\n    \n    return results\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        sociability = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, sociability))\n    \n    results = maximize_talks(t, test_cases)\n    \n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative sociability values to simulate a max-heap using Python's min-heap\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        pairs = []\n        while len(heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(heap)\n            s2, i2 = heapq.heappop(heap)\n\n            # Record the pair\n            pairs.append((i1, i2))\n\n            # Decrement their sociability and reinsert if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(pairs), pairs))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of private conversations in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the number of talks and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate a priority queue\n        heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(heap)\n\n        pairs = []\n        total_talks = 0\n\n        while len(heap) > 1:\n            # Extract two individuals with the highest sociability\n            s1, i1 = heapq.heappop(heap)\n            s2, i2 = heapq.heappop(heap)\n\n            # Record the pair\n            pairs.append((i1, i2))\n            total_talks += 1\n\n            # Decrement their sociability and reinsert if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(heap, (s2 + 1, i2))\n\n        results.append((total_talks, pairs))\n\n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function\n    results = maximize_talks(t, test_cases)\n\n    # Output results\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nimport heapq\nfrom typing import List, Tuple\n\ndef maximize_conversations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of conversations based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, containing the number of conversations and the pairs involved.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate a max-heap with heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        conversations = []\n        while len(max_heap) > 1:\n            # Extract the two individuals with the highest sociability\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record a conversation between them\n            conversations.append((i1, i2))\n\n            # Decrease their sociability by one\n            s1 += 1\n            s2 += 1\n\n            # If they still have non-zero sociability, push them back into the heap\n            if s1 < 0:\n                heapq.heappush(max_heap, (s1, i1))\n            if s2 < 0:\n                heapq.heappush(max_heap, (s2, i2))\n\n        # Append the result for the current test case\n        results.append((len(conversations), conversations))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    sociability = list(map(int, input().split()))\n    test_cases.append((n, sociability))\n\n# Output interface\nresults = maximize_conversations(t, test_cases)\nfor result in results:\n    k, pairs = result\n    print(k)\n    for i, j in pairs:\n        print(i, j)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because heapq is a min-heap by default\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n        \n        talks = []\n        \n        while len(max_heap) > 1:\n            # Pop two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n            \n            # Record the talk\n            talks.append((i1, i2))\n            \n            # Decrement their sociability\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n        \n        # Append the result for this test case\n        results.append((len(talks), talks))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        sociability = list(map(int, input().strip().split()))\n        test_cases.append((n, sociability))\n    \n    # Process the test cases\n    results = maximize_talks(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    results = []\n    \n    for n, sociability in test_cases:\n        # Create a max-heap with negative sociability to simulate a max-heap using heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n        \n        talks = []\n        \n        while len(max_heap) > 1:\n            # Extract two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n            \n            # Record the talk\n            talks.append((i1, i2))\n            \n            # Decrease their sociability\n            s1 += 1\n            s2 += 1\n            \n            # If they can still talk, push them back into the heap\n            if s1 < 0:\n                heapq.heappush(max_heap, (s1, i1))\n            if s2 < 0:\n                heapq.heappush(max_heap, (s2, i2))\n        \n        # Append the result for this test case\n        results.append((len(talks), talks))\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n    \n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of people and their sociability.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: List of results for each test case, including the maximum number of talks and the pairs involved.\n    \"\"\"\n    results = []\n    \n    for n, sociability in test_cases:\n        # Pair individuals based on their sociability\n        indexed_sociability = [(i + 1, sociability[i]) for i in range(n)]\n        indexed_sociability.sort(key=lambda x: x[1], reverse=True)\n        \n        talks = []\n        total_talks = 0\n        \n        while len(indexed_sociability) > 1:\n            person1, sociability1 = indexed_sociability[0]\n            person2, sociability2 = indexed_sociability[1]\n            \n            if sociability1 > 0 and sociability2 > 0:\n                talks.append((person1, person2))\n                total_talks += 1\n                indexed_sociability[0] = (person1, sociability1 - 1)\n                indexed_sociability[1] = (person2, sociability2 - 1)\n                \n                # Re-sort to maintain the order based on updated sociability\n                indexed_sociability.sort(key=lambda x: x[1], reverse=True)\n            else:\n                break\n        \n        results.append((total_talks, talks))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n    \n    results = maximize_talks(t, test_cases)\n    \n    for result in results:\n        k, pairs = result\n        print(k)\n        for pair in pairs:\n            print(pair[0], pair[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport heapq\n\ndef maximize_talks(t: int, test_cases: list) -> list:\n    \"\"\"Maximize the number of private talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of people\n            and their sociability values.\n\n    Returns:\n        list: A list of results for each test case, where each result is a tuple\n            containing the maximum number of talks and a list of pairs of people\n            who will have a conversation.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap using negative values to simulate a max-heap with heapq\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two most sociable individuals\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the conversation\n            talks.append((i1, i2))\n\n            # Decrease their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for the current test case\n        results.append((len(talks), talks))\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        sociability = list(map(int, input().split()))\n        test_cases.append((n, sociability))\n\n    # Call the function to get results\n    results = maximize_talks(t, test_cases)\n\n    # Output the results\n    for result in results:\n        k, talks = result\n        print(k)\n        for talk in talks:\n            print(talk[0], talk[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nimport heapq\n\ndef maximize_talks(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int]]]]:\n    \"\"\"Maximize the number of talks in a meeting based on sociability.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of people and their sociability values.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int]]]]: For each test case, returns the maximum\n            number of talks and the pairs of people who will talk.\n    \"\"\"\n    results = []\n\n    for n, sociability in test_cases:\n        # Create a max-heap with negative values because heapq is a min-heap by default\n        max_heap = [(-s, i + 1) for i, s in enumerate(sociability) if s > 0]\n        heapq.heapify(max_heap)\n\n        talks = []\n        while len(max_heap) > 1:\n            # Extract the two individuals with the highest sociability\n            s1, i1 = heapq.heappop(max_heap)\n            s2, i2 = heapq.heappop(max_heap)\n\n            # Record the talk\n            talks.append((i1, i2))\n\n            # Decrease their sociability and push back if they can still talk\n            if s1 + 1 < 0:\n                heapq.heappush(max_heap, (s1 + 1, i1))\n            if s2 + 1 < 0:\n                heapq.heappush(max_heap, (s2 + 1, i2))\n\n        # Append the result for this test case\n        results.append((len(talks), talks))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        sociability = list(map(int, input().strip().split()))\n        test_cases.append((n, sociability))\n\n    # Output interface\n    results = maximize_talks(t, test_cases)\n    for result in results:\n        k, pairs = result\n        print(k)\n        for i, j in pairs:\n            print(i, j)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to maximize the number of talks in a meeting by efficiently pairing individuals based on their sociability levels. The solution should handle multiple test cases and ensure that the order of conversations is optimized for maximum productivity.\nrequirement pool:\n- Develop algorithm to maximize number of talks\n- Ensure efficient pairing of individuals\n- Handle multiple test cases efficiently\n- Optimize sociability exhaustion\n- Provide flexibility in conversation pairing\nWe will use a greedy algorithm to maximize the number of talks. The idea is to always pair the two most sociable people available at any time. This ensures that we are utilizing the highest available sociability at each step, which helps in maximizing the total number of talks. We will use a max-heap (priority queue) to efficiently get the two most sociable people at any time. Python's heapq library can be used for this purpose, but since it provides a min-heap, we will store negative values to simulate a max-heap.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person reaches their sociability limit, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized. This involves optimizing the order of conversations based on sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement of conversations that results in the highest total number of talks.\n    Implementation: Use a greedy approach to always pair the two most sociable people available at any time.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Optimize the order of conversations using a max-heap to ensure maximum productivity.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and sociability parameters for each test case.\n    2. For each test case, use a max-heap to keep track of the sociability of individuals.\n    3. Continuously pair the two most sociable individuals until no more productive pairs can be formed.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but there is no one else to converse with.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both individuals can talk three times with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle these scenarios by not forming pairs when sociability is zero or when only one person has non-zero sociability.\n", "requirement analysis:\nThe requirement focuses on maximizing the number of talks by efficiently pairing individuals based on their sociability. The solution should handle multiple test cases and ensure the maximum productivity of the meeting.\nrequirement pool:\n- Maximize the number of talks in each meeting.\n- Efficiently pair individuals for conversations.\n- Handle multiple test cases efficiently.\n- Ensure the solution is scalable for large numbers of participants.\n- Provide flexibility in pairing strategies.\nWe will use a greedy approach to maximize the number of talks. By sorting the sociability array in descending order, we can pair the most sociable individuals first, ensuring that the maximum number of talks occur before any individual leaves the meeting. This approach efficiently handles multiple test cases and scales well with large numbers of participants.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person reaches their sociability limit, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized before any individual leaves due to reaching their sociability limit.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to optimize the order of conversations to achieve the highest number of talks possible.\n    Implementation: Use a greedy approach by sorting individuals based on their sociability and pairing them accordingly.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Sort the sociability array in descending order and pair individuals with the highest sociability first.\n\n# [code logic]\n1. Parse the input to get the number of test cases and sociability data for each test case.\n2. For each test case, sort the sociability array in descending order.\n3. Pair individuals starting from the highest sociability values, ensuring that each pair maximizes the number of talks.\n4. Continue pairing until no more productive talks can be made.\n5. Output the total number of talks and the pairs involved.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3, 0 0 0\n    Expected output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2, 0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but they need a partner, so no talks can occur.\n\n    Test case with two people having equal sociability:\n    Input: 2, 3 3\n    Expected output: 3\n    Explanation: Both individuals can engage in three talks with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and pairing based on sociability will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to maximize the number of talks in a meeting by efficiently pairing individuals based on their sociability. The solution should handle multiple test cases and ensure the maximum number of conversations occur before individuals leave the meeting.\nrequirement pool:\n- Implement algorithm to maximize number of talks\n- Efficiently pair individuals for conversations\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Optimize performance for large input sizes\nWe will implement a greedy algorithm to maximize the number of talks. The approach involves sorting individuals by their sociability and pairing the most sociable individuals first. This ensures that the maximum number of talks occur before any individual leaves the meeting. We will use Python's built-in sorting and list manipulation capabilities to efficiently handle the input size constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. A person with a sociability of 0 leaves immediately, while others can participate in a number of talks equal to their sociability.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized before any individual exhausts their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement of conversations that results in the highest total number of talks.\n    Implementation: Use a greedy approach to pair individuals with the highest remaining sociability.\n\n# [degree adverb]\n    'most productive': This indicates that the meeting should have the highest number of talks possible.\n    Implementation: Sort individuals by sociability and pair them optimally to maximize talks.\n\n# [code logic]\n1. For each test case, read the number of people and their sociability.\n2. Sort the people based on their sociability in descending order.\n3. Use a priority queue or a max-heap to efficiently pair the most sociable individuals.\n4. Continuously pair the two most sociable individuals until no more valid pairs can be made.\n5. Record each pair and decrement their sociability.\n6. Output the total number of talks and the pairs involved.\n\n# [edge case]\n    Test case 1: n = 2, sociability = [0, 0] => 0\n    Explanation: Both individuals have zero sociability, so no talks can occur.\n\n    Test case 2: n = 3, sociability = [0, 0, 2] => 0\n    Explanation: Only one person has non-zero sociability, but they cannot talk alone.\n\n    Test case 3: n = 4, sociability = [1, 1, 1, 1] => 2\n    Explanation: Each person can talk once, so two pairs can be formed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of pairing based on sociability inherently handles these cases by not forming invalid pairs.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private conversations by efficiently utilizing each participant's sociability. The solution must handle multiple test cases and large input sizes while providing clear output formats.\nrequirement pool:\n- Maximize the number of private conversations\n- Efficiently utilize sociability\n- Handle large input sizes effectively\n- Provide clear output format for test cases\n- Allow multiple valid solutions\nWe will use a greedy algorithm to maximize the number of private conversations. The approach involves repeatedly pairing the two individuals with the highest remaining sociability until no more conversations can be made. This ensures efficient use of sociability and maximizes the number of talks. We will use a priority queue (heap) to efficiently manage and retrieve the individuals with the highest sociability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of conversations a person can engage in before leaving the meeting. It is a non-negative integer, and once a person has participated in a number of talks equal to their sociability, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized. This involves optimizing the order and pairing of individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that the solution should aim to achieve the highest number of conversations possible given the constraints of sociability.\n    Implementation: Use a greedy approach to pair individuals with the highest remaining sociability.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible.\n    Implementation: Prioritize pairing individuals with high sociability to maximize the number of talks.\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and sociability data for each test case.\n    2. For each test case, use a priority queue (heap) to manage individuals based on their sociability.\n    3. Continuously pair the two individuals with the highest sociability until no more pairs can be formed.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can engage in talks, but they need a partner, so no talks can occur.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: 200000\n    Explanation: Both individuals can engage in maximum talks with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle cases where no valid pairs can be formed, resulting in zero talks.\n", "requirement analysis:\nThe requirement is to determine the maximum number of conversations that can occur in a meeting given the sociability constraints of each participant. The solution must efficiently handle up to 200,000 participants and sociability interactions, ensuring that the output format is strictly followed for each test case.\nrequirement pool:\n- Develop an algorithm to maximize the number of conversations based on sociability constraints.\n- Ensure the solution is efficient and can handle the maximum input size.\n- Provide a clear and correct output format for each test case.\n- Handle edge cases where some participants have zero sociability.\n- Optimize the solution for readability and maintainability.\nWe will use a greedy algorithm to maximize the number of conversations. The approach involves repeatedly pairing the two individuals with the highest remaining sociability until no more conversations can occur. This ensures that the sociability is utilized efficiently. We will use a priority queue (heap) to keep track of the sociability of individuals, allowing us to efficiently select the top two individuals for conversation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of conversations a person can have before they leave the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to maximize the number of conversations that can occur during the meeting by optimally pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the largest number of conversations that can occur. In code, this involves repeatedly selecting the two individuals with the highest sociability until no more conversations can occur.\n\n# [degree adverb]\n    'most productive': This refers to achieving the maximum number of talks possible, which is the primary goal of the problem.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of people and their sociability values.\n3. Use a max-heap (priority queue) to keep track of individuals' sociability.\n4. While there are at least two people with non-zero sociability:\n   - Extract the two individuals with the highest sociability.\n   - Record a conversation between them.\n   - Decrease their sociability by one.\n   - If they still have non-zero sociability, push them back into the heap.\n5. Output the total number of conversations and the pairs involved for each test case.\n\n# [edge case]\n    Test case 1: 2\n    0 0\n    = 0\n    Explanation: Both individuals have zero sociability, so no conversations can occur.\n\n    Test case 2: 3\n    1 0 0\n    = 0\n    Explanation: Only one person has non-zero sociability, so no conversations can occur.\n\n    Test case 3: 4\n    1 1 1 1\n    = 2\n    Explanation: Each person can have one conversation, so two pairs can be formed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue naturally handles cases where individuals have zero or insufficient sociability for further conversations.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks during meetings by efficiently utilizing the sociability parameters of each participant. The solution must handle multiple test cases and large input sizes while providing clear output.\nrequirement pool:\n- Maximize the number of private talks in each meeting.\n- Efficiently utilize sociability parameters to ensure participants engage in maximum conversations.\n- Handle large input sizes and multiple test cases efficiently.\n- Provide clear and concise output for each test case.\n- Allow flexibility in conversation pairings to achieve maximum talks.\nWe will use a greedy approach to maximize the number of private talks. The idea is to always pair the two most sociable individuals available for a conversation until their sociability is exhausted. This ensures that the maximum number of talks is achieved. We will use a priority queue (heap) to efficiently manage and retrieve the individuals with the highest sociability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person has participated in a number of talks equal to their sociability, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized. This involves strategically pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This indicates that we need to find the arrangement of talks that results in the highest total number of conversations. In code, this can be implemented by continuously pairing the two individuals with the highest remaining sociability until no more talks can occur.\n\n# [degree adverb]\n    'most productive'\n    Explanation: This means achieving the highest number of talks possible during the meeting. In code, this involves optimizing the order and pairing of conversations.\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and sociability values for each test case.\n    2. For each test case, use a priority queue (max-heap) to keep track of individuals based on their sociability.\n    3. Continuously pair the two individuals with the highest sociability until no more pairs can be formed.\n    4. Record each pair and decrement their sociability.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: Since all individuals have zero sociability, no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can engage in talks, but there is no one else to pair with.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: 200000\n    Explanation: Both individuals can engage in talks with each other until their sociability is exhausted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle cases where no pairs can be formed due to zero or insufficient sociability values.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks during meetings by efficiently utilizing the sociability parameters of participants. The solution must handle multiple test cases and large input sizes while providing clear output.\nrequirement pool:\n- Optimize the number of private talks in meetings.\n- Efficiently manage sociability parameters.\n- Handle large input sizes effectively.\n- Provide clear and concise output for each test case.\n- Ensure the solution is scalable for future enhancements.\nWe will use a greedy approach to maximize the number of private talks. By sorting the sociability parameters in descending order, we can pair the most sociable individuals first, ensuring that the maximum number of talks occur. We will use a priority queue to efficiently manage and update the sociability of individuals as they engage in conversations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized before individuals exhaust their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to optimize the arrangement of conversations to achieve the highest number of talks possible.\n    Implementation: Use a greedy approach to pair individuals with the highest sociability first.\n\n# [degree adverb]\n    'most productive': This means achieving the maximum number of talks possible.\n    Implementation: Sort individuals by sociability and pair them accordingly to maximize talks.\n\n# [code logic]\n1. Parse the input to get the number of test cases and sociability parameters for each test case.\n2. For each test case, sort the sociability parameters in descending order.\n3. Use a priority queue to manage and update sociability as individuals engage in conversations.\n4. Pair individuals with the highest remaining sociability until no more productive talks can occur.\n5. Output the maximum number of talks and the pairs involved in each talk.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can engage in talks, but they need a partner, so no talks can occur.\n\n    Test case with two people having equal sociability:\n    Input: 2\n           3 3\n    Expected output: 3\n                     1 2\n                     1 2\n                     1 2\n    Explanation: Both individuals can engage in three talks with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and pairing based on sociability will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks by optimally pairing individuals based on their sociability. The solution must efficiently handle multiple test cases and large inputs while providing clear output.\nrequirement pool:\n- Optimize pairing of individuals to maximize talks\n- Efficiently handle large datasets and multiple test cases\n- Provide clear and concise output format\n- Ensure solution scalability\n- Allow flexibility in output for multiple valid solutions\nWe will use a greedy algorithm to maximize the number of talks. The approach involves sorting individuals based on their sociability and pairing the most sociable individuals first. This ensures that the maximum number of talks occur before any individual exhausts their sociability. We will use Python's built-in sorting capabilities to efficiently handle large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized before any individual exhausts their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This indicates that we need to optimize the order of conversations to achieve the highest number of talks possible.\n    Implementation: Use a greedy algorithm to pair individuals with the highest sociability first.\n\n# [degree adverb]\n    'most productive': This means achieving the maximum number of talks possible.\n    Implementation: Sort individuals by sociability and pair them accordingly to maximize talks.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and sociability data for each test case.\n    2. For each test case, sort the individuals by their sociability in descending order.\n    3. Pair the most sociable individuals first, ensuring that each pair can converse until one of them exhausts their sociability.\n    4. Keep track of the number of talks and output the pairs involved in each talk.\n    5. Continue pairing until no more productive talks can occur.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Output: 0\n    Explanation: No talks can occur as all individuals leave immediately.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Output: 0\n    Explanation: Only one person can talk, but no pair can be formed.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Output: 200000\n            1 2 (repeated 200000 times)\n    Explanation: Both individuals can engage in maximum talks with each other.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and pairing based on sociability will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on maximizing the number of private talks during meetings by efficiently utilizing the sociability parameters of each participant. The solution must handle multiple test cases and large input sizes while providing clear output.\nrequirement pool:\n- Maximize the number of private talks in each meeting.\n- Efficiently utilize sociability parameters.\n- Handle large input sizes effectively.\n- Provide clear and concise output for each test case.\n- Ensure the solution is scalable and robust.\nWe will use a greedy algorithm to maximize the number of private talks. The approach involves repeatedly pairing the two most sociable individuals until their sociability is exhausted. This ensures that the maximum number of talks is achieved. We will use a priority queue (max-heap) to efficiently select the most sociable individuals at each step. The heapq library in Python will be used to implement the max-heap by storing negative values of sociability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of private talks a person can engage in before leaving the meeting. It is a non-negative integer, and if it is zero, the person leaves immediately.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized, considering each person's sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number'\n    Explanation: This indicates that we need to find the arrangement of talks that results in the highest total number of conversations. In code, this can be implemented by continuously pairing the two most sociable individuals until their sociability is exhausted.\n\n# [degree adverb]\n    'most productive'\n    Explanation: This means achieving the highest number of talks possible during the meeting. In code, this involves optimizing the order of conversations to maximize the total number of talks.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and sociability values for each test case.\n    2. For each test case, use a max-heap to keep track of the sociability of individuals.\n    3. Continuously pair the two most sociable individuals until their sociability is exhausted.\n    4. Record each pair of individuals who have a conversation.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero:\n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: All individuals leave immediately, so no talks occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can talk, but there is no one else to converse with.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: 200000\n    Explanation: Both individuals can engage in talks until their sociability is exhausted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a max-heap will naturally handle these scenarios by not pairing individuals when their sociability is zero or when there are no valid pairs left.\n", "requirement analysis:\nThe requirement focuses on maximizing the number of talks by efficiently pairing individuals based on their sociability. The solution should handle multiple test cases and ensure optimal usage of sociability parameters.\nrequirement pool:\n- Maximize the number of talks in each meeting.\n- Efficiently pair individuals based on sociability.\n- Handle multiple test cases efficiently.\n- Ensure the solution is scalable.\n- Provide flexibility in pairing options.\nWe will use a greedy approach to maximize the number of talks. The idea is to always pair the two individuals with the highest remaining sociability until no more talks can be made. This ensures that the sociability is used optimally. We will use a priority queue (heap) to efficiently manage and retrieve the individuals with the highest sociability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'sociability'\n    Explanation: Sociability refers to the number of talks a person can engage in before leaving the meeting. It is a non-negative integer, and once a person has engaged in a number of talks equal to their sociability, they leave the meeting.\n\n    'maximum possible number of talks'\n    Explanation: The goal is to arrange conversations such that the total number of talks is maximized. This involves strategically pairing individuals based on their sociability.\n\n# [phrase showing quantity relationship]\n    'maximum possible number of talks': This means we need to find the arrangement of conversations that results in the highest total number of talks. In code, this can be implemented by continuously pairing the two individuals with the highest remaining sociability until no more talks can be made.\n\n# [degree adverb]\n    'most productive': This means achieving the highest number of talks possible during the meeting. In code, this involves optimizing the order of conversations to maximize the total number of talks.\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and sociability values for each test case.\n    2. For each test case, use a priority queue (heap) to manage individuals based on their sociability.\n    3. Continuously pair the two individuals with the highest sociability until no more talks can be made.\n    4. Record each pair of individuals who engage in a talk.\n    5. Output the total number of talks and the pairs involved for each test case.\n\n# [edge case]\n    Test case with all sociability values as zero: \n    Input: 3\n           0 0 0\n    Expected output: 0\n    Explanation: Since all individuals have zero sociability, no talks can occur.\n\n    Test case with only one person having non-zero sociability:\n    Input: 2\n           0 5\n    Expected output: 0\n    Explanation: Only one person can engage in talks, but there is no one else to pair with.\n\n    Test case with maximum sociability values:\n    Input: 2\n           200000 200000\n    Expected output: 200000\n    Explanation: Both individuals can engage in talks with each other until their sociability is exhausted.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using a priority queue will naturally handle these scenarios by not pairing individuals when no valid pairs exist (e.g., when all sociability values are zero or when only one person has non-zero sociability).\n"], "scores": [], "pass_results": [false, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 8, "round": 965, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014the number of people in the meeting. The second line consists of n space-separated integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the sociability parameters of all people. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5. It is also guaranteed that the sum of all a_i (over all test cases and all i) does not exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint t answers to all test cases.\n\nOn the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting.\n\nOn each of the next k lines print two integers i and j (1 \u2264 i, j \u2264 n and i \u2260 j) \u2014 the numbers of people who will have another talk.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n8\n2\n2 3\n3\n1 2 3\n4\n1 2 3 4\n3\n0 0 2\n2\n6 2\n3\n0 0 2\n5\n8 2 0 1 1\n5\n0 1 0 0 6\n\n\nOutput\n\n\n2\n1 2\n1 2\n3\n1 3\n2 3\n2 3\n5\n1 3\n2 4\n2 4\n3 4\n3 4\n0\n2\n1 2\n1 2\n0\n4\n1 2\n1 5\n1 4\n1 2\n1\n5 2", "mutate_method": "add_1_sentence_at_end", "parent_index": 582}
