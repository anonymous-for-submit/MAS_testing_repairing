{"name": "1615_A. Closing The Gap", "description": "There are n block towers in a row, where tower i has a height of a_i. You're part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation:\n\n  * Choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j), and move a block from tower i to tower j. This essentially decreases a_i by 1 and increases a_j by 1. \n\n\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "tags": ["greedy", "math"], "difficulty": 7, "id": 1615, "sample_io": [{"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}], "test_list": [{"input": "3\n3\n10 10 10\n4\n3 2 0 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 0 2 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n4 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 2 1 4\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 -1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 0 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n6 2 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n4 2 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n4 0 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 0 2 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n2 0 2 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 3 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n3 2 0 2\n5\n1 4 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 2 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n2 0 1 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n1 0 2 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n2 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 0 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 20 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 2 0 2\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n17 9 10\n4\n4 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 0 2 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 2 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 2\n5\n1 3 3 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 2\n5\n1 1 3 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n17 9 10\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 3 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 2 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 1 2\n5\n1 2 3 -1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n9 20 10\n4\n3 0 1 2\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 2\n5\n1 3 6 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 2\n5\n1 1 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n24 9 10\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 1 2\n5\n1 2 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 0 1 2\n5\n0 3 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 2\n5\n0 3 6 1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 4\n5\n1 1 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n24 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 3 1 2\n5\n1 2 1 -1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 0 4\n5\n1 1 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n40 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 3 1 0\n5\n1 2 1 -1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 10\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 3\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 10 9\n4\n2 0 0 4\n5\n1 1 4 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n40 9 18\n4\n3 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 5\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 10 9\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n16 5 4\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 4\n4\n3 3 1 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n2 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n16 7 4\n4\n3 3 1 3\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n1 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 1 9\n4\n1 0 0 6\n5\n1 1 4 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 6\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 11\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 1 11\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 1 11\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 11\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 6\n5\n0 3 10 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 6\n5\n0 3 2 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 5 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 4 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 16 10\n4\n3 2 0 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n6 2 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 2 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n1 0 4 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 2\n5\n2 0 0 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 1 10\n4\n3 2 0 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 13 10\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n6 2 1 0\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n4 2 1 4\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n2 0 2 2\n5\n1 2 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 4\n5\n2 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 2\n5\n2 1 2 0 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 0 1 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 3 3 0 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 20 10\n4\n3 2 1 2\n5\n0 2 3 1 0\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n7 5 10\n4\n6 1 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 1 1 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n17 9 8\n4\n4 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 0\n5\n2 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 20\n4\n4 1 1 2\n5\n2 1 3 1 4\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n1 3 2 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 0 2\n5\n1 2 3 -1 9\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 2 1 0\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 5 10\n4\n3 3 0 3\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 2 3 0 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 10 7\n4\n2 0 1 2\n5\n1 1 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n17 9 10\n4\n1 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 14 10\n4\n4 1 1 2\n5\n2 1 3 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 3 2 2\n5\n1 8 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 0 1 2\n5\n0 2 3 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 3 0 2\n5\n1 3 6 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 3\n5\n1 4 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n24 9 7\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 2 1 2\n5\n2 2 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 -1 1 2\n5\n0 3 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 5 0\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 1 4\n5\n1 1 4 0 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n24 9 15\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n2 3 1 2\n5\n1 2 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 8 10\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 2\n5\n0 4 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 0 0 4\n5\n1 2 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n36 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n16 5 10\n4\n3 3 0 1\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 5 13\n4\n7 1 2 3\n5\n0 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 10 9\n4\n2 0 0 1\n5\n1 1 4 1 4\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n41 9 18\n4\n3 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 6 5\n4\n3 3 0 3\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n11 10 13\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 4\n4\n3 3 0 5\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n11 2 9\n4\n2 0 0 4\n5\n1 1 4 0 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 2 9\n4\n4 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 7 4\n4\n6 3 1 3\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n11 1 10\n4\n1 0 0 6\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 7 7\n4\n3 3 1 6\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 13\n5\n0 3 6 1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 0 11\n5\n0 3 6 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n3 6 4\n4\n6 3 1 11\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n6 3 1 9\n5\n0 3 10 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n4 7 4\n4\n6 3 1 6\n5\n0 3 2 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n3 4 1 2\n5\n1 2 5 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n3 10 10\n4\n3 2 1 2\n5\n1 2 4 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 16 10\n4\n1 2 0 2\n5\n1 4 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n6 2 2 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 2 1 2\n5\n1 2 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 4\n5\n1 0 4 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 9 10\n4\n0 0 1 2\n5\n2 0 0 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 1 10\n4\n3 4 0 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 13 0\n4\n3 2 1 2\n5\n0 2 3 1 4\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n15 10 10\n4\n2 0 2 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 0 4\n5\n2 0 2 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 0 1 2\n5\n1 2 3 2 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n13 0 10\n4\n3 2 0 2\n5\n1 3 3 0 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 20 10\n4\n3 0 1 2\n5\n0 2 3 1 0\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n7 5 10\n4\n6 1 1 2\n5\n1 2 3 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 9\n4\n2 1 1 2\n5\n1 2 3 2 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n17 9 8\n4\n4 0 1 3\n5\n1 0 5 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 1 1 0\n5\n4 0 2 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 17 20\n4\n4 1 1 2\n5\n2 1 3 1 4\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n1 2 2 2\n5\n1 2 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n13 0 10\n4\n3 2 0 2\n5\n1 2 3 -1 9\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 20 10\n4\n3 2 0 0\n5\n0 2 3 1 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n4 5 10\n4\n3 3 0 3\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 2 2\n5\n1 2 3 -1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 10 7\n4\n2 0 1 2\n5\n1 1 3 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 14 10\n4\n4 1 1 2\n5\n2 1 3 1 10\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n13 10 10\n4\n0 3 2 2\n5\n1 8 3 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n9 31 10\n4\n3 0 1 2\n5\n0 2 3 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 10\n4\n6 1 1 3\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n15 9 7\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 0 10\n4\n3 0 1 2\n5\n2 2 1 -1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n6 5 0\n4\n6 1 2 2\n5\n1 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 9\n4\n2 0 1 4\n5\n1 1 4 0 4\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n10 0 10\n4\n2 3 1 2\n5\n1 0 1 -1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 8 10\n4\n3 3 0 3\n5\n1 3 6 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 10 15\n4\n2 0 0 4\n5\n1 2 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 9 18\n4\n2 0 1 3\n5\n1 0 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 5 10\n4\n3 3 0 1\n5\n0 3 2 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 5 16\n4\n7 1 2 3\n5\n0 4 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 6 5\n4\n3 3 -1 3\n5\n0 3 6 1 5\n", "output": ["0\n0\n0\n"]}, {"input": "3\n3\n11 12 13\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n11 2 4\n4\n2 0 0 4\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n11 2 9\n4\n4 0 0 2\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n16 7 4\n4\n6 3 1 3\n5\n0 0 6 1 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n11 1 10\n4\n1 0 0 1\n5\n1 1 4 1 1\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n9 14 7\n4\n3 3 1 6\n5\n0 3 6 1 5\n", "output": ["0\n1\n0\n"]}, {"input": "3\n3\n9 7 4\n4\n3 3 1 13\n5\n0 2 6 1 5\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n3 7 4\n4\n3 3 0 14\n5\n0 3 6 1 5\n", "output": ["1\n0\n0\n"]}, {"input": "3\n3\n3 6 4\n4\n6 3 1 11\n5\n1 3 10 1 5\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n10 10 10\n4\n3 4 1 2\n5\n1 2 5 0 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 10 19\n4\n6 2 2 2\n5\n1 2 3 1 5\n", "output": ["0\n0\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 2 1 2\n5\n1 3 3 1 5\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n4 0 1 4\n5\n0 0 4 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 9 10\n4\n-1 0 1 2\n5\n2 0 0 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 1 10\n4\n3 4 0 2\n5\n1 2 3 0 5\n", "output": ["0\n1\n1\n"]}, {"input": "3\n3\n10 13 0\n4\n3 2 1 1\n5\n0 2 3 1 4\n", "output": ["1\n1\n0\n"]}, {"input": "3\n3\n9 10 10\n4\n2 0 2 2\n5\n1 2 3 1 4\n", "output": ["1\n1\n1\n"]}, {"input": "3\n3\n10 12 10\n4\n4 0 0 4\n5\n2 0 2 1 1\n", "output": ["1\n0\n1\n"]}, {"input": "3\n3\n10 10 10\n4\n0 0 1 2\n5\n1 2 3 2 7\n", "output": ["0\n1\n0\n"]}], "task_id": "codecontest/119", "prompt": "There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew aiming to make the buildings look as nice as possible by arranging them in a straight line with each having a specific height denoted by a_i. In a single day, you can choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j) and move a block from tower i to tower j, which decreases a_i by 1 and increases a_j by 1. \n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "repair_prompt": ["There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew aiming to make the buildings look as nice as possible by arranging them in a straight line with each having a specific height denoted by a_i. In a single day, you can choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j) and move a block from tower i to tower j, which decreases a_i by 1 and increases a_j by 1. \n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "There are n block towers in a row, where tower i has a height of a_i. You're part of a building crew aiming to make the buildings look as nice as possible by arranging them in a straight line with each having a specific height denoted by a_i. In a single day, you can choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j) and move a block from tower i to tower j. This action decreases a_i by 1 and increases a_j by 1.\n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings. The ugliness is formally defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "There are n block towers in a row, where tower i has a height of a_i, and you're part of a building crew aiming to make the buildings look as nice as possible by arranging them in a straight line. In a single day, you can choose two indices i and j (1 \u2264 i, j \u2264 n; i \u2260 j) and move a block from tower i to tower j, which decreases a_i by 1 and increases a_j by 1. \n\nYou think the ugliness of the buildings is the height difference between the tallest and shortest buildings, formally defined as max(a)-min(a). \n\nWhat's the minimum possible ugliness you can achieve, after any number of days?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test."], "completions": ["from typing import List\n## main.py\n\nimport typing\n\ndef minimum_ugliness(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of lists, where each inner list contains the heights of the buildings.\n\n    Returns:\n        A list of integers representing the minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        remainder = total_blocks % n\n\n        # Calculate the minimum ugliness\n        # If remainder is 0, all buildings can be made equal, ugliness is 0\n        # If remainder is not 0, the difference will be 1\n        min_ugliness = 1 if remainder != 0 else 0\n        results.append(min_ugliness)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of the buildings.\n\n    Returns:\n        List[int]: List of minimum ugliness values for each test case.\n    \"\"\"\n    results = []\n    \n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        \n        # Calculate the number of blocks that need to be redistributed\n        # to make all towers as close to the average height as possible.\n        excess_blocks = total_blocks % n\n        \n        # The minimum ugliness is determined by how evenly we can distribute\n        # the blocks. If the total number of blocks is perfectly divisible by\n        # the number of towers, the ugliness is 0. Otherwise, it is 1.\n        if excess_blocks == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    # Output interface\n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        # Sort the heights to facilitate redistribution\n        heights.sort()\n        # Calculate the difference between the maximum and minimum heights\n        min_ugliness = heights[-1] - heights[0]\n        results.append(min_ugliness)\n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    # Call the function and print results\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of the towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        # If the total number of blocks is evenly divisible by the number of towers,\n        # the minimum ugliness is 0, otherwise it is 1.\n        if total_blocks % n == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    # Output interface\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness by redistributing blocks between towers.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of tower heights.\n\n    Returns:\n        List[int]: List of minimum ugliness values for each test case.\n    \"\"\"\n    results = []\n    \n    for heights in test_cases:\n        # Sort the heights to easily access the minimum and maximum\n        heights.sort()\n        \n        # Calculate the total number of blocks\n        total_blocks = sum(heights)\n        n = len(heights)\n        \n        # Calculate the average height\n        average_height = total_blocks // n\n        \n        # Calculate the remainder blocks after equal distribution\n        remainder_blocks = total_blocks % n\n        \n        # The minimum ugliness is determined by the distribution of remainder blocks\n        # If remainder_blocks is 0, all towers can be made exactly the same height\n        # Otherwise, the difference will be 1 between the tallest and shortest\n        min_ugliness = 1 if remainder_blocks > 0 else 0\n        \n        results.append(min_ugliness)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n\n    # Output interface\n    results = minimize_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness values for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        \n        # Sort the heights to facilitate redistribution\n        heights.sort()\n        \n        # Redistribute blocks to minimize the difference between tallest and shortest towers\n        # The goal is to make all towers as close to the average height as possible\n        excess_blocks = total_blocks % n\n        min_height = average_height\n        max_height = average_height + (1 if excess_blocks > 0 else 0)\n        \n        # Calculate the minimum possible ugliness\n        min_ugliness = max_height - min_height\n        results.append(min_ugliness)\n    \n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    # Call the function and print results\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        \n        # Calculate the target height if blocks can be evenly distributed\n        target_height = total_blocks // n\n        \n        # If total blocks are divisible by number of towers, ugliness is 0\n        if total_blocks % n == 0:\n            results.append(0)\n        else:\n            # If not divisible, the minimum ugliness will be 1\n            results.append(1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        remainder = total_blocks % n\n\n        # If remainder is 0, all towers can be made equal, ugliness is 0\n        # If remainder is not 0, some towers will be one block taller, ugliness is 1\n        if remainder == 0:\n            results.append(0)\n        else:\n            results.append(1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    t = int(input())\n    cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        cases.append(heights)\n\n    results = minimum_ugliness(t, cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimum_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the heights of buildings.\n\n    Returns:\n        List[int]: List of minimum ugliness values for each test case.\n    \"\"\"\n    results = []\n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        \n        # Sort the heights to facilitate redistribution\n        heights.sort()\n        \n        # Calculate the minimum possible ugliness\n        # Redistribute blocks to make all buildings as close to the average height as possible\n        min_ugliness = heights[-1] - heights[0]\n        \n        # Check if redistribution can make all buildings equal\n        if total_blocks % n == 0:\n            min_ugliness = 0\n        else:\n            # If not perfectly divisible, the minimum ugliness will be 1\n            min_ugliness = 1\n        \n        results.append(min_ugliness)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    # Output interface\n    results = minimum_ugliness(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef minimize_ugliness(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the minimum possible ugliness for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing heights of towers.\n\n    Returns:\n        List[int]: List of minimum possible ugliness values for each test case.\n    \"\"\"\n    results = []\n    \n    for heights in test_cases:\n        n = len(heights)\n        total_blocks = sum(heights)\n        average_height = total_blocks // n\n        \n        # Sort the heights to facilitate redistribution\n        heights.sort()\n        \n        # Redistribute blocks to make all towers as close to the average height as possible\n        # Calculate the minimum possible ugliness\n        min_ugliness = heights[-1] - heights[0]\n        \n        # Check if redistribution can reduce ugliness further\n        if total_blocks % n == 0:\n            min_ugliness = 0\n        else:\n            min_ugliness = 1\n        \n        results.append(min_ugliness)\n    \n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        heights = list(map(int, input().split()))\n        test_cases.append(heights)\n    \n    # Call the function\n    results = minimize_ugliness(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires calculating the minimum possible ugliness of building heights after redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases, each with up to 100 buildings, and building heights as large as 10^7.\nrequirement pool:\n- Implement the main algorithm to calculate minimum ugliness.\n- Optimize the solution for large input sizes.\n- Ensure the solution handles edge cases correctly.\n- Provide clear documentation and comments in the code.\n- Include test cases to validate the solution.\nWe will calculate the minimum possible ugliness by redistributing the blocks such that the difference between the maximum and minimum heights is minimized. The key observation is that the minimum ugliness is achieved when the difference between the maximum and minimum heights is at most 1. This can be done by sorting the heights and calculating the difference between the maximum and minimum heights after redistributing blocks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between the tallest and shortest towers.\n\n# [phrase showing quantity relationship]\n    'at most 1'\n    Explanation: This means that the difference between the maximum and minimum heights should be less than or equal to 1. In code, this can be implemented by ensuring that after redistribution, max(a) - min(a) <= 1.\n\n# [degree adverb]\n    'minimum'\n    Explanation: This indicates that we need to find the smallest possible value of ugliness, which is achieved when the height difference is minimized.\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Sort the list of building heights.\n3. Calculate the total number of blocks.\n4. Determine the average height by dividing the total number of blocks by the number of buildings.\n5. Redistribute blocks to make all buildings as close to the average height as possible.\n6. Calculate the minimum possible ugliness as the difference between the maximum and minimum heights after redistribution.\n7. Output the minimum ugliness for each test case.\n\n# [edge case]\n    Case 1: n = 2, heights = [1, 10000000] = 0\n    Explanation: With only two towers, you can move blocks from the taller to the shorter until both are equal.\n\n    Case 2: n = 3, heights = [1, 1, 10000000] = 0\n    Explanation: You can redistribute blocks from the tallest to the shortest until all are equal.\n\n    Case 3: n = 4, heights = [1, 1, 1, 10000000] = 0\n    Explanation: You can redistribute blocks from the tallest to the shortest until all are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of redistributing blocks to achieve a height difference of at most 1 will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases with up to 100 buildings each, where building heights can be as large as 10^7.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness\n- Optimize for large input sizes\n- Ensure output format is correct\n- Provide detailed comments and documentation\n- Test thoroughly with edge cases\nWe will implement a function that calculates the minimum possible ugliness by redistributing blocks between towers. The approach involves sorting the heights and calculating the difference between the maximum and minimum heights after redistribution. This can be achieved by ensuring the heights are as close to the average as possible, which minimizes the difference between the tallest and shortest buildings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between the tallest and shortest towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness'\n    Explanation: This means finding the smallest value of max(a) - min(a) after redistributing blocks. In code, this involves iterating through possible redistributions and calculating the resulting max and min values.\n\n# [degree adverb]\n    'minimum'\n    Explanation: The goal is to achieve the smallest possible value for ugliness, which is the difference between the tallest and shortest buildings. In code, this involves finding the configuration with the smallest max(a) - min(a).\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case:\n   - Read the number of buildings and their respective heights.\n   - Sort the heights to facilitate redistribution.\n   - Calculate the total number of blocks.\n   - Determine the average height by dividing the total number of blocks by the number of buildings.\n   - Redistribute blocks to make all heights as close to the average as possible.\n   - Calculate the minimum possible ugliness as max(a) - min(a) after redistribution.\n3. Output the minimum ugliness for each test case.\n\n# [edge case]\n    Case 1: n = 2, heights = [1, 10000000] = 0\n    Explanation: With only two towers, you can move blocks from the taller to the shorter until they are equal.\n\n    Case 2: n = 3, heights = [1, 1, 10000000] = 0\n    Explanation: You can redistribute blocks from the tallest to the others until all are equal.\n\n    Case 3: n = 4, heights = [1, 1, 1, 10000000] = 0\n    Explanation: Similar to previous cases, redistribute blocks to equalize all towers.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of redistributing blocks to achieve equal heights inherently handles these scenarios.\n", "requirement analysis:\nThe task requires calculating the minimum possible ugliness of building heights after redistributing blocks between towers. The solution must efficiently handle up to 1000 test cases with building heights up to 10^7, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Ensure the solution handles large inputs efficiently.\n- Develop a user-friendly interface for input and output.\n- Optimize the code for scalability.\n- Provide detailed documentation for the solution.\nWe will implement a function to calculate the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights after redistribution. The optimal strategy is to balance the heights as much as possible, which can be achieved by sorting the heights and calculating the difference between the maximum and minimum values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: The process of moving blocks from one tower to another to minimize the height difference.\n\n# [phrase showing quantity relationship]\n    'height difference'\n    Explanation: The difference between the maximum and minimum heights of the towers. In code, this can be implemented as `max(a) - min(a)`.\n\n# [degree adverb]\n    'minimum'\n    Explanation: The smallest possible value of ugliness that can be achieved after redistributing blocks. In code, this involves finding the smallest possible value of `max(a) - min(a)`.\n\n# [code logic]\n    1. Parse the number of test cases.\n    2. For each test case, read the number of buildings and their respective heights.\n    3. Sort the heights to facilitate redistribution.\n    4. Calculate the difference between the maximum and minimum heights after redistribution.\n    5. Output the minimum possible ugliness for each test case.\n\n# [edge case]\n    Case 1: All towers have the same height initially.\n    Input: 3\n           3\n           10 10 10\n    Expected Output: 0\n    Explanation: Since all towers are already of equal height, no redistribution is needed, and ugliness is 0.\n\n    Case 2: Towers with alternating heights.\n    Input: 3\n           5\n           1 2 3 1 5\n    Expected Output: 1\n    Explanation: After redistribution, the heights can be balanced to minimize ugliness to 1.\n\n    Case 3: Towers with maximum height difference.\n    Input: 3\n           2\n           1 10000000\n    Expected Output: 0\n    Explanation: With only two towers, blocks can be moved to equalize their heights completely.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and calculating `max(a) - min(a)` will handle these cases effectively.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks. The solution should efficiently handle up to 1000 test cases with building heights up to 10^7.\nrequirement pool:\n- Implement the main algorithm to calculate minimum ugliness.\n- Ensure the solution handles edge cases effectively.\n- Optimize for performance with large inputs.\n- Provide clear documentation and output format.\n- Enhance user experience with intuitive input handling.\nWe will implement a function to calculate the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights after redistributing blocks to make the heights as equal as possible. We will use the properties of integer division to determine the minimum and maximum possible heights after redistribution.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the ugliness.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': This means we need to find the smallest value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb]\n    'minimum': This indicates that we need to achieve the smallest possible difference between the tallest and shortest buildings.\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Determine the average height by dividing the total number of blocks by the number of towers.\n4. Calculate the minimum possible ugliness by considering the distribution of blocks around this average height.\n5. The minimum possible ugliness is either 0 or 1, depending on whether the total number of blocks can be evenly distributed among all towers.\n\n# [edge case]\n    Case 1: All towers have the same height initially.\n    Input: 3\n           3\n           10 10 10\n    Expected Output: 0\n    Explanation: No redistribution is needed as all towers are already equal.\n\n    Case 2: Towers can be made equal with redistribution.\n    Input: 4\n           3 2 1 2\n    Expected Output: 0\n    Explanation: By redistributing blocks, all towers can be made equal.\n\n    Case 3: Towers cannot be made completely equal.\n    Input: 5\n           1 2 3 1 5\n    Expected Output: 1\n    Explanation: The closest distribution results in a minimum ugliness of 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the average and checking for even distribution will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases with building heights up to 10^7, ensuring the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Ensure the solution handles multiple test cases efficiently.\n- Optimize the algorithm for large input sizes.\n- Validate the output format for each test case.\n- Provide detailed documentation for the solution.\nWe will implement a function that calculates the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is achieved when the difference between the maximum and minimum heights is minimized, which can be done by redistributing blocks to equalize the heights as much as possible. We will use Python's built-in functions to efficiently compute the maximum and minimum values and adjust the heights accordingly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between towers.\n\n# [phrase showing quantity relationship]\n    'height difference'\n    Explanation: This refers to the subtraction of the minimum height from the maximum height in the list of tower heights. In code, this can be implemented as `max(a) - min(a)`.\n\n# [degree adverb]\n    'minimum'\n    Explanation: The requirement asks for the smallest possible value of ugliness after redistributing blocks. This means we need to find a way to make the heights as equal as possible.\n\n# [code logic]\n    1. For each test case, read the number of towers and their respective heights.\n    2. Calculate the initial ugliness using `max(a) - min(a)`.\n    3. Redistribute blocks to minimize the height difference:\n        - Sort the list of heights.\n        - Move blocks from the tallest tower to the shortest tower iteratively until no further reduction in ugliness is possible.\n    4. Return the minimized ugliness for each test case.\n\n# [edge case]\n    Case 1: All towers have the same height initially.\n    Input: [10, 10, 10]\n    Expected Output: 0\n    Explanation: Since all towers are already equal in height, no redistribution is needed, and ugliness is 0.\n\n    Case 2: Towers with alternating heights.\n    Input: [1, 3, 1, 3]\n    Expected Output: 0\n    Explanation: Blocks can be moved from towers with height 3 to those with height 1 to equalize all towers to height 2.\n\n    Case 3: Towers with one significantly taller tower.\n    Input: [1, 1, 1, 10]\n    Expected Output: 1\n    Explanation: Blocks can be redistributed to make all towers have a height close to 3, but one tower will remain slightly taller or shorter.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks until no further reduction in ugliness is possible will handle these cases effectively.\n", "requirement analysis:\nThe problem requires determining the minimum possible ugliness of building heights after redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases with each having up to 100 buildings. The key is to balance the heights by moving blocks from taller to shorter towers until the difference between the tallest and shortest is minimized.\nrequirement pool:\n- Implement the main algorithm to calculate minimum ugliness.\n- Ensure the solution handles edge cases, such as all towers having the same height.\n- Optimize the algorithm for performance with large input sizes.\n- Provide clear and formatted output for each test case.\n- Include comments and documentation for code clarity.\nWe will implement a function that calculates the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights after redistribution. We can achieve this by calculating the average height and adjusting the towers to be as close to this average as possible. The approach will involve sorting the heights and redistributing blocks to minimize the difference between the tallest and shortest towers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between the tallest and shortest towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': \n    Explanation: This means finding the smallest possible value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb] \n    'minimum': \n    Explanation: The goal is to achieve the smallest possible difference between the tallest and shortest towers.\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Compute the average height by dividing the total number of blocks by the number of towers.\n4. Sort the list of tower heights.\n5. Redistribute blocks to make all towers as close to the average height as possible.\n6. Calculate the minimum possible ugliness as the difference between the maximum and minimum heights after redistribution.\n7. Output the result for each test case.\n\n# [edge case] \n    Case 1: n = 2, heights = [1, 10000000] = 0\n    Explanation: By redistributing blocks, both towers can be made equal, resulting in an ugliness of 0.\n\n    Case 2: n = 3, heights = [1, 1, 10000000] = 0\n    Explanation: Redistributing blocks can make all towers equal, resulting in an ugliness of 0.\n\n    Case 3: n = 4, heights = [1, 1, 1, 10000000] = 0\n    Explanation: Redistributing blocks can make all towers equal, resulting in an ugliness of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks to achieve equal heights will naturally handle these cases.\n", "requirement analysis:\nThe task requires developing an algorithm to minimize the height difference between the tallest and shortest buildings by redistributing blocks. The solution should efficiently handle up to 1000 test cases with up to 100 buildings each, where each building's height can be as large as 10^7.\nrequirement pool:\n- Develop an algorithm to minimize building ugliness\n- Ensure the solution is efficient for large inputs\n- Provide clear output for each test case\n- Optimize the algorithm for both time and space complexity\n- Include detailed comments and documentation\nWe will implement a function that calculates the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights after redistributing blocks to equalize the heights as much as possible. The approach involves calculating the difference between the maximum and minimum heights of the towers for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the height difference between the tallest and shortest buildings, formally expressed as max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between the tallest and shortest towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': This means finding the smallest value of max(a) - min(a) after redistributing blocks.\n\n# [degree adverb] \n    'minimum': This indicates that we need to achieve the smallest possible value for the ugliness, which is the difference between the maximum and minimum heights.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the initial maximum and minimum heights of the towers.\n3. The minimum possible ugliness is determined by redistributing blocks to make the heights as equal as possible.\n4. The minimum ugliness is achieved when all towers have the same height, which is possible if the total number of blocks is divisible by the number of towers.\n5. If not divisible, the minimum ugliness will be 1, as you can make all but one tower equal in height.\n6. Return the minimum ugliness for each test case.\n\n# [edge case] \n    Case 1: n = 2, heights = [1, 1] = 0\n    Explanation: Both towers are already of equal height, so the ugliness is 0.\n\n    Case 2: n = 3, heights = [1, 1, 10] = 0\n    Explanation: You can redistribute blocks to make all towers equal in height, resulting in an ugliness of 0.\n\n    Case 3: n = 4, heights = [1, 2, 3, 4] = 0\n    Explanation: You can redistribute blocks to make all towers equal in height, resulting in an ugliness of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks to equalize tower heights will naturally handle these cases.\n", "requirement analysis:\nThe task requires calculating the minimum possible ugliness by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases with up to 100 towers each, ensuring the algorithm can process large numbers quickly and accurately.\nrequirement pool:\n- Implement the main algorithm to calculate minimum ugliness\n- Optimize for performance with large inputs\n- Ensure output format matches requirements\n- Handle edge cases such as already equal heights\n- Provide detailed comments and documentation\nWe will implement a function to calculate the minimum possible ugliness by redistributing blocks between towers. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights of the towers. By redistributing blocks, we can make the heights as equal as possible, thus minimizing the difference. The approach involves finding the maximum and minimum heights and calculating their difference, which is the minimum ugliness achievable.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the context of this problem, ugliness is defined as the difference between the tallest and shortest buildings. The goal is to minimize this difference by redistributing blocks between towers.\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to equalize the heights as much as possible.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': This means finding the smallest difference between the maximum and minimum heights of the towers after redistributing blocks.\n\n# [degree adverb]\n    'minimum': This indicates that we need to achieve the smallest possible value for ugliness, which is the difference between the tallest and shortest towers.\n\n# [code logic]\n1. For each test case, read the number of towers and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Determine the average height by dividing the total number of blocks by the number of towers.\n4. Calculate the remainder when dividing the total number of blocks by the number of towers.\n5. The minimum possible ugliness is determined by whether all towers can be made to have the same height (remainder is 0) or if some towers will be one block taller (remainder is not 0).\n6. If the remainder is 0, the minimum ugliness is 0; otherwise, it is 1.\n\n# [edge case]\n    Case 1: n = 2, heights = [1, 10000000] = 0\n    Explanation: With two towers, you can always make them equal by redistributing blocks, resulting in an ugliness of 0.\n\n    Case 2: n = 3, heights = [1, 1, 10000000] = 1\n    Explanation: The total number of blocks cannot be evenly distributed among three towers, so the minimum ugliness is 1.\n\n    Case 3: n = 4, heights = [1, 1, 1, 10000000] = 0\n    Explanation: The total number of blocks can be evenly distributed among four towers, resulting in an ugliness of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating the average height and checking the remainder will naturally handle these cases.\n", "requirement analysis:\nThe problem requires determining the minimum possible difference between the tallest and shortest towers after redistributing blocks. The solution should efficiently handle up to 1000 test cases with up to 100 buildings each, where each building's height can be as large as 10^7.\nrequirement pool:\n- Implement the main algorithm to calculate minimum ugliness.\n- Optimize the algorithm for performance with large inputs.\n- Ensure the solution is robust and handles edge cases.\n- Provide clear documentation and comments in the code.\n- Include test cases to validate the solution.\nWe will calculate the minimum possible ugliness by redistributing the blocks such that the difference between the maximum and minimum heights is minimized. The key observation is that the minimum ugliness is determined by the difference between the maximum and minimum heights after redistributing the blocks evenly. This can be achieved by sorting the heights and calculating the difference between the maximum and minimum values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the height difference between the tallest and shortest buildings, formally expressed as max(a) - min(a).\n\n    'redistributing the blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between the tallest and shortest towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': \n    Explanation: This means finding the smallest possible value of max(a) - min(a) after redistributing the blocks. In code, this involves iterating through possible redistributions and calculating the resulting max and min values.\n\n# [degree adverb] \n    'minimum': \n    Explanation: This indicates that we need to find the smallest value of ugliness achievable through redistribution. In code, this can be implemented by iterating through possible configurations and keeping track of the smallest max(a) - min(a).\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Sort the list of building heights.\n3. Calculate the total number of blocks.\n4. Determine the average height by dividing the total number of blocks by the number of buildings.\n5. Redistribute blocks to make all buildings as close to the average height as possible.\n6. Calculate the minimum possible ugliness as max(a) - min(a) after redistribution.\n7. Output the minimum ugliness for each test case.\n\n# [edge case] \n    Case 1: n = 2, heights = [1, 10000000] = 0\n    Explanation: With only two towers, you can move blocks from the taller to the shorter until they are equal.\n\n    Case 2: n = 3, heights = [1, 1, 10000000] = 0\n    Explanation: You can redistribute blocks from the tallest tower to the other two until all are equal.\n\n    Case 3: n = 4, heights = [1, 1, 1, 10000000] = 0\n    Explanation: Similar to previous cases, redistribute blocks from the tallest to others until all are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic of redistributing blocks to achieve equal heights will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to minimize the height difference between the tallest and shortest buildings by redistributing blocks between towers. The solution should efficiently handle up to 1000 test cases with up to 100 buildings each, where building heights can be as large as 10^7.\nrequirement pool:\n- Implement the main algorithm to minimize ugliness.\n- Optimize for large input sizes and multiple test cases.\n- Ensure accurate and clear output format.\n- Provide user-friendly input handling.\n- Document the solution for maintainability.\nWe will implement a function that calculates the minimum possible ugliness by redistributing blocks between towers to balance their heights as evenly as possible. The approach involves sorting the heights and calculating the difference between the maximum and minimum heights after redistribution. This can be efficiently achieved using Python's built-in sorting and list manipulation capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'ugliness'\n    Explanation: In the requirement, ugliness is defined as the difference between the tallest and shortest buildings, i.e., max(a) - min(a).\n\n    'redistributing blocks'\n    Explanation: This refers to the process of moving blocks from one tower to another to minimize the height difference between the tallest and shortest towers.\n\n# [phrase showing quantity relationship]\n    'minimum possible ugliness': \n    Explanation: This means finding the smallest value of max(a) - min(a) that can be achieved by redistributing blocks.\n\n# [degree adverb] \n    'minimum': \n    Explanation: The smallest possible value of ugliness that can be achieved after redistributing blocks.\n\n# [code logic]\n1. For each test case, read the number of buildings and their respective heights.\n2. Calculate the total number of blocks across all towers.\n3. Determine the average height by dividing the total number of blocks by the number of towers.\n4. Sort the list of heights.\n5. Redistribute blocks to make all towers as close to the average height as possible.\n6. Calculate the minimum possible ugliness as the difference between the maximum and minimum heights after redistribution.\n7. Output the result for each test case.\n\n# [edge case] \n    Case 1: All towers have the same height initially.\n    Input: [10, 10, 10]\n    Expected Output: 0\n    Explanation: No redistribution is needed as all towers are already equal in height.\n\n    Case 2: Towers have alternating heights.\n    Input: [1, 3, 1, 3]\n    Expected Output: 0\n    Explanation: Redistribute blocks to make all towers height 2.\n\n    Case 3: Towers with a large difference in height.\n    Input: [1, 10, 1, 10]\n    Expected Output: 0\n    Explanation: Redistribute blocks to make all towers height 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of redistributing blocks to achieve an average height will naturally handle these cases.\n"], "scores": [], "pass_results": [true, true, false, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 580, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t cases follow.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of buildings.\n\nThe second line of each test case contains n space separated integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^7) \u2014 the heights of the buildings.\n\nOutput\n\nFor each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.\n\nExample\n\nInput\n\n\n3\n3\n10 10 10\n4\n3 2 1 2\n5\n1 2 3 1 5\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nIn the first test case, the ugliness is already 0.\n\nIn the second test case, you should do one operation, with i = 1 and j = 3. The new heights will now be [2, 2, 2, 2], with an ugliness of 0.\n\nIn the third test case, you may do three operations: \n\n  1. with i = 3 and j = 1. The new array will now be [2, 2, 2, 1, 5], \n  2. with i = 5 and j = 4. The new array will now be [2, 2, 2, 2, 4], \n  3. with i = 5 and j = 3. The new array will now be [2, 2, 3, 2, 3]. \n\nThe resulting ugliness is 1. It can be proven that this is the minimum possible ugliness for this test.", "mutate_method": "condense_two2one", "parent_index": 277}
