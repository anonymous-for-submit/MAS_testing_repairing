{"name": "1579_A. Casimir's String Solitaire", "description": "Casimir has a string s which consists of capital Latin letters 'A', 'B', and 'C' only. Each turn he can choose to do one of the two following actions:\n\n  * he can either erase exactly one letter 'A' and exactly one letter 'B' from arbitrary places of the string (these letters don't have to be adjacent); \n  * or he can erase exactly one letter 'B' and exactly one letter 'C' from arbitrary places in the string (these letters don't have to be adjacent). \n\n\n\nTherefore, each turn the length of the string is decreased exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by erasing the first occurrence of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "tags": ["math", "strings"], "difficulty": 7, "id": 1579, "sample_io": [{"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}], "test_list": [{"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nABBB\nAC\nABA\nCABCBB\nCCCBCBBBBBCBCCCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nBACABA\nABBB\nAC\nABA\nCABCBA\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nCBAA\nCA\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBABABA\nACBB\nAC\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABAA\nCB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nCABABA\nABAA\nBB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABBA\nBC\nABC\nBACCBB\nBBBCACCCBCACBCBC\n", "output": ["YES\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nACBA\nAC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["YES\nNO\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nBABCAB\nABBA\nAC\nABC\nCACCBB\nCBCBCACBCCCACBBB\n", "output": ["YES\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAB\nABBA\nBC\nABC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["YES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nNO\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nBAACBA\nABBB\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nCABABA\nABBB\nAB\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["NO\nNO\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBBAACB\nABAA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["YES\nNO\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nCBBABA\nABAA\nCB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["YES\nNO\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABCA\nBC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["YES\nNO\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nBACABA\nABBB\nBC\nABA\nCABCBB\nCBCBBBCCCCCBBBCC\n", "output": ["NO\nNO\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nBBACAB\nAABA\nAC\nABC\nCABCBA\nBCBCACBCBCBCBCBC\n", "output": ["YES\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABAB\nBC\nCCB\nBACCAB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBAABAB\nABBB\nCA\nABB\nCBBCBB\nBCBCBCBCBCBCBCBC\n", "output": ["YES\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABBCAB\nABAA\nBC\nCCB\nBACCAB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nNO\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBCBCBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBBBCBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nBACABA\nABBA\nAC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBBBCACCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCCCACBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACA\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCCCBCBBBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nABC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBBCBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBABCAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCCCACBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACA\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABCBB\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBB\nAC\nABA\nCABCBB\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nABC\nBBCBAC\nCBCBCACBCBCBCBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nABA\nCABCBB\nCBCBCBCBCBCACBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nBBAA\nAC\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBABA\nAC\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBCAABA\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAA\nABBA\nAC\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nBAA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBCBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBABCAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCACCCBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nAAC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABCBB\nBCCCBCBBBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABBBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nCBA\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBBAA\nAC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nBBAA\nCA\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABAACB\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nCACABA\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nAAB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABBB\nAC\nABA\nCABCBA\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABBAB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nBCA\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBBAA\nAC\nCAC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBBACAC\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nBCB\nCACCBB\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nAABB\nCA\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nCABABA\nABBB\nAC\nABA\nCABCBA\nBCCCBCCBBBBCBCCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nCBA\nCABBAB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nAABB\nAC\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nBAACBA\nABBA\nBC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABABAC\nABBA\nCB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABBB\nAC\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nAABB\nCA\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nABCBAC\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nCABABA\nABBA\nCB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nACBB\nAC\nABA\nCABCBA\nBCCBCBBBBCCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nAABB\nCA\nBAB\nBBCBAC\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nABCBAC\nCBCBCACBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nCABABA\nABBA\nCB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nABCBAC\nCBCBCACCCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nBABABA\nACBB\nAC\nABA\nBACCBA\nBCCBCBBBBCCBCCCB\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nCABABA\nABAA\nBC\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABABAB\nACBB\nAC\nABA\nBACCBA\nBCCBCBBBBCCBCCCB\n", "output": ["YES\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABABAC\nABAA\nBB\nAAC\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACA\nCABBBB\nABCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACA\nCABBBB\nACCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACA\nBBBBAC\nACCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACB\nBBBBAC\nACCBCBCBCBCCCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABAA\nBB\nACB\nBBBBAC\nACBBCBCBCBCCCBCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nAC\nAAC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nCABCBB\nCBCBCACBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABB\nCABCBB\nCBCBCBCBCBCACBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nAABB\nAC\nABC\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nAC\nABC\nBACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABB\nCACBBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nABC\nCABCBC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nABA\nCAACBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nABBBAC\nABBA\nAC\nABC\nBACCBB\nBCBCBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nBBCBAC\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nACC\nBACCBB\nBBBCBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nBA\nACB\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nABBA\nCA\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nBC\nABA\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABABAC\nABBA\nCA\nACA\nCACCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nBABCBB\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABCBB\nCCCBCBBBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nAAC\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBB\nABC\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBB\nCA\nABB\nCABCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nACB\nCABCBB\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABACAB\nABBA\nCB\nABC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nACABAC\nABBA\nAC\nABC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nBAC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAB\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nABA\nACBCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nABAB\nAC\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBABA\nAC\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nCACCBB\nBBBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nBAAABC\nAABB\nAC\nABA\nCABCBB\nCBCBBBCCCBCBCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACA\nCABCBC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nABA\nCABBBC\nCBCBCBCBBBCBCCCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBB\nAC\nBBA\nCABCBB\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nCBA\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nABB\nBABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABAB\nBC\nABC\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABBCAB\nABBA\nAC\nCBA\nBBCBAC\nCBCBCACBCBCBCBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nBC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nBC\nABA\nCABCBB\nCBCBBBCBCBCACBCC\n", "output": ["NO\nYES\nYES\nNO\nYES\nNO\n"]}, {"input": "6\nABBCAB\nBBAA\nAC\nABC\nBBCCAB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBACA\nAC\nACB\nCABCBB\nBCBCCCBCBCBCBCBB\n", "output": ["NO\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAA\nABBA\nAB\nABC\nBACCBB\nBBBBBCCCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABCCAA\nABBA\nCA\nACB\nBBCCAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nACB\nBBCCAC\nBCBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBACBAB\nABBA\nAC\nABC\nBACCBB\nCBCBCACBCACCCBBB\n", "output": ["YES\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nAC\nAAC\nCABCBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBBCAAA\nAABB\nCA\nABA\nCABCBB\nBCCCBCBBBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nCBA\nCABBBB\nBCACBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nCA\nBBA\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nBC\nCBB\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABACAB\nABBA\nBC\nCAA\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBABA\nAC\nACC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nBBAA\nCA\nABC\nBACCBB\nCBCBCACBCBCBBBCB\n", "output": ["YES\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBBAACB\nABBA\nBC\nABA\nACBCBB\nCBCBCBCBCBCBCBCB\n", "output": ["YES\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nACBA\nAC\nAAB\nCABCBC\nCBCBCBCBCBCBCBCB\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nAC\nACB\nCACCBB\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nABACAC\nABBA\nCA\nAAC\nBBBBAC\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABABAC\nABBB\nAC\nABA\nCABCBA\nBCCCBCBBBBBCBCCC\n", "output": ["NO\nNO\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCA\nBCA\nCABBAB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nAC\nBAB\nCCBABB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABCAAB\nABBA\nCC\nAAC\nCABBCB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nBBAA\nBC\nCAC\nCABCBB\nCBCBCBBBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nABBCAB\nCABA\nCA\nABC\nBACCBB\nBCBBBCBCBCACBCBC\n", "output": ["YES\nNO\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nBCB\nCACCBC\nACBBBCCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nNO\n"]}, {"input": "6\nAAACAB\nAABB\nCA\nABA\nCABCBB\nCBCBBBCCCBCBCBCC\n", "output": ["NO\nYES\nNO\nNO\nYES\nNO\n"]}, {"input": "6\nABACAC\nABBA\nBB\nAAC\nCABBBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nABACAC\nABBA\nCA\nCBA\nCABBBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nNO\nYES\n"]}, {"input": "6\nBAACAB\nAABB\nAC\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nABACAB\nABBA\nCB\nACB\nCABCBA\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}, {"input": "6\nABABAC\nABBA\nCB\nAAC\nCAABBB\nBBCBCBCBCBCCCBCB\n", "output": ["NO\nYES\nYES\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nAABB\nCA\nBAB\nCABCBB\nBCBCBCBCBCBCBCBC\n", "output": ["NO\nYES\nNO\nNO\nYES\nYES\n"]}, {"input": "6\nBACABA\nABBA\nBC\nACB\nABCBAC\nBCBCBCBCBCACBCBC\n", "output": ["NO\nYES\nYES\nNO\nNO\nNO\n"]}], "task_id": "codecontest/13", "prompt": "Casimir has a string s that only consists of the uppercase Latin letters 'A', 'B', and 'C'. Each turn he has the option to perform one of the following two actions:\n\n  * he can either remove exactly one letter 'A' and exactly one letter 'B' from any locations in the string (these letters don't have to be adjacent); \n  * or he can erase precisely one letter 'B' and one letter 'C' from any locations in the string. These letters don't need to be adjacent.\n\nTherefore, every turn, the string's length is reduced exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by removing the first appearance of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "repair_prompt": ["Casimir has a string s that only consists of the uppercase Latin letters 'A', 'B', and 'C'. Each turn he has the option to perform one of the following two actions:\n\n  * he can either remove exactly one letter 'A' and exactly one letter 'B' from any locations in the string (these letters don't have to be adjacent); \n  * or he can erase precisely one letter 'B' and one letter 'C' from any locations in the string. These letters don't need to be adjacent.\n\nTherefore, every turn, the string's length is reduced exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by removing the first appearance of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "Casimir has a string s that only consists of the uppercase Latin letters 'A', 'B', and 'C'. The string includes only these three distinct characters, each represented by a single uppercase letter. Each turn he has the option to perform one of the following two actions:\n\n  * he can either remove exactly one letter 'A' and exactly one letter 'B' from any locations in the string (these letters don't have to be adjacent); \n  * or he can erase precisely one letter 'B' and one letter 'C' from any locations in the string. These letters don't need to be adjacent.\n\nTherefore, every turn, the string's length is reduced exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions.\n\nFor example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by removing the first appearance of 'B' and the second occurrence of 'A'). There are also many other options for a turn aside from this particular example.\n\nFor a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "Casimir has a string s that only consists of the uppercase Latin letters 'A', 'B', and 'C'. Each turn he can either remove exactly one letter 'A' and exactly one letter 'B' from any locations in the string (these letters don't have to be adjacent) or erase precisely one letter 'B' and one letter 'C' from any locations in the string. Therefore, every turn, the string's length is reduced exactly by 2. All turns are independent so for each turn, Casimir can choose any of two possible actions. For example, with s = \"ABCABC\" he can obtain a string s = \"ACBC\" in one turn (by removing the first appearance of 'B' and the second occurrence of 'A'). For a given string s determine whether there is a sequence of actions leading to an empty string. In other words, Casimir's goal is to erase all letters from the string. Is there a way to do this?\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_reduce_to_empty(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be reduced to an empty string.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of results for each test case, \"YES\" if the string can be reduced to empty, otherwise \"NO\".\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    \n    # Process and output results\n    results = can_reduce_to_empty(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    # Call the function and get results\n    results = can_be_erased(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased by removing pairs of 'A' and 'B' or 'B' and 'C'.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of results for each test case, either \"YES\" if the string can be fully erased, or \"NO\" otherwise.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_A = s.count('A')\n        count_B = s.count('B')\n        count_C = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_B == count_A + count_C:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    # Function call\n    results = can_be_erased(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased by removing pairs of 'AB' or 'BC'.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of results for each test case, either \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_A = s.count('A')\n        count_B = s.count('B')\n        count_C = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_B == count_A + count_C:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    results = can_be_erased(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of strings consisting of the characters 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being \"YES\" or \"NO\" indicating whether the corresponding\n        string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    \n    results = can_be_erased(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of \"YES\" or \"NO\" for each test case indicating if the string can be fully erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    # Output interface\n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being \"YES\" if the corresponding test case can be fully erased,\n        otherwise \"NO\".\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    \n    results = can_be_erased(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_be_erased(t: int, test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be fully erased by removing pairs of letters.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[str]): A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of results for each test case, \"YES\" if the string can be fully erased, \"NO\" otherwise.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    \n    # Process and output results\n    results = can_be_erased(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determines if each string in the test cases can be completely erased\n    by removing pairs of 'A' and 'B' or 'B' and 'C'.\n\n    Args:\n        test_cases: A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        A list of strings, each being \"YES\" or \"NO\" indicating whether the\n        corresponding string can be completely erased.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = [input().strip() for _ in range(n)]\n    \n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_erase_strings(test_cases: List[str]) -> List[str]:\n    \"\"\"Determine if each string in the test cases can be fully erased by a sequence of operations.\n\n    Args:\n        test_cases (List[str]): A list of strings consisting of the letters 'A', 'B', and 'C'.\n\n    Returns:\n        List[str]: A list of results for each test case, \"YES\" if the string can be fully erased, \"NO\" otherwise.\n    \"\"\"\n    results = []\n    for s in test_cases:\n        count_a = s.count('A')\n        count_b = s.count('B')\n        count_c = s.count('C')\n        \n        # Check if the number of 'B's is equal to the sum of 'A's and 'C's\n        if count_b == count_a + count_c:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = [input().strip() for _ in range(t)]\n    results = can_erase_strings(test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by removing pairs of 'AB' or 'BC'. The key is to ensure the number of 'B's matches the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be reduced to empty\n- Optimize the solution for handling up to 1000 test cases efficiently\n- Ensure the output format is consistent with the requirements\n- Handle edge cases such as strings with no 'B's\n- Provide documentation for the solution\nWe will implement a function that checks if the number of 'B's in the string matches the sum of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C' to reduce the string length by 2. We will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and determine if the string can be reduced to empty based on the condition: count(B) == count(A) + count(C).\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters': The string consists only of the letters 'A', 'B', and 'C'.\n    'sequence of actions': Refers to the process of removing pairs of letters ('A' and 'B' or 'B' and 'C') to reduce the string to an empty state.\n\n# [phrase showing quantity relationship]\n    'exactly one': Indicates that each action involves removing one 'A' and one 'B', or one 'B' and one 'C'.\n    'length is reduced exactly by 2': Each action decreases the string length by two characters.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's.\n3. If the condition is met, print \"YES\" (the string can be fully erased); otherwise, print \"NO\".\n\n# [edge case]\n    Test case: \"AB\" = YES\n    Explanation: The string \"AB\" can be reduced to an empty string by removing one 'A' and one 'B'.\n\n    Test case: \"BC\" = YES\n    Explanation: The string \"BC\" can be reduced to an empty string by removing one 'B' and one 'C'.\n\n    Test case: \"AAABBBCCC\" = NO\n    Explanation: There are 3 'A's, 3 'B's, and 3 'C's. The number of 'B's (3) is not equal to the sum of the number of 'A's (3) and 'C's (3), so it cannot be fully erased.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking if count(B) == count(A) + count(C).\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution to handle the maximum input size efficiently.\n- Ensure the output format is consistent with the requirements.\n- Write test cases to validate the solution against edge cases.\n- Document the code for better understanding and maintenance.\nWe will iterate over each test case and count the occurrences of 'A', 'B', and 'C'. The string can be fully erased if the number of 'B's is equal to the sum of 'A's and 'C's. This is because each 'B' can pair with either an 'A' or a 'C'. We will use a simple loop and conditional checks to determine the result for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters': The string consists only of the letters 'A', 'B', and 'C'.\n    'sequence of actions': Refers to the process of removing pairs of letters ('A' and 'B' or 'B' and 'C') to reduce the string to an empty state.\n\n# [phrase showing quantity relationship]\n    'exactly one': Indicates that each action must remove one 'A' and one 'B', or one 'B' and one 'C'.\n    'length is reduced exactly by 2': Each action decreases the string length by two characters.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n2. Check if the number of 'B's is equal to the sum of 'A's and 'C's. This condition ensures that each 'B' can be paired with either an 'A' or a 'C'.\n3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Test case: \"AB\" = YES\n    Explanation: One 'A' and one 'B' can be removed in one action, leaving an empty string.\n\n    Test case: \"BC\" = YES\n    Explanation: One 'B' and one 'C' can be removed in one action, leaving an empty string.\n\n    Test case: \"AAABBBCCC\" = NO\n    Explanation: There are three 'A's, three 'B's, and three 'C's. The number of 'B's is not equal to the sum of 'A's and 'C's (3 != 3 + 3), so it's impossible to fully erase the string.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle all cases correctly.\n", "requirement analysis:\nThe problem requires determining if a string can be reduced to an empty string by removing pairs of letters according to specified rules. The solution must efficiently handle up to 1000 test cases, each with strings of up to 50 characters. The key is to ensure the number of 'B's matches the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main algorithm to check if the string can be fully erased.\n- Optimize the solution for handling maximum input size efficiently.\n- Ensure the output format is consistent and clear.\n- Test the solution against edge cases and large inputs.\n- Document the solution and provide usage instructions.\nWe will implement a function that checks if a given string can be reduced to an empty string by removing pairs of 'A' and 'B' or 'B' and 'C'. The key observation is that the number of 'B's must equal the sum of 'A's and 'C's for the string to be fully reducible. This is because each 'B' can pair with either an 'A' or a 'C'. We will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and check if the condition is satisfied.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'remove exactly one letter': This means that in each turn, exactly one 'A' and one 'B' or one 'B' and one 'C' must be removed.\n    'sequence of actions': This refers to the series of turns that can be taken to potentially reduce the string to an empty state.\n\n# [phrase showing quantity relationship]\n    'exactly by 2': This means that each turn reduces the string length by exactly two characters.\n    'number of test cases': This indicates the number of strings to be evaluated, which is given by the integer t.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's. This is because each 'B' can pair with either an 'A' or a 'C'.\n3. If the condition is satisfied, print \"YES\", indicating that the string can be fully erased. Otherwise, print \"NO\".\n\n# [edge case]\n    Test case: \"AB\" = YES\n    Explanation: The string \"AB\" can be reduced to an empty string by removing one 'A' and one 'B'.\n\n    Test case: \"BC\" = YES\n    Explanation: The string \"BC\" can be reduced to an empty string by removing one 'B' and one 'C'.\n\n    Test case: \"AAABBBCCC\" = NO\n    Explanation: There are 3 'A's, 3 'B's, and 3 'C's. The number of 'B's (3) is not equal to the sum of 'A's (3) and 'C's (3), which is 6.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle all cases correctly.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the output format is consistent with the requirements.\n- Write test cases to validate the solution against edge cases.\n- Document the code for better readability and maintenance.\nWe will implement a function that checks if a given string can be reduced to an empty string by removing pairs of 'AB' or 'BC'. The key observation is that the number of 'B's must be equal to the sum of 'A's and 'C's for the string to be fully erased. This is because each 'B' can pair with either an 'A' or a 'C'. We will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and then check if the condition is satisfied.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters': The string consists only of the letters 'A', 'B', and 'C'.\n    'sequence of actions': Refers to the process of removing pairs of letters ('AB' or 'BC') to reduce the string length.\n\n# [phrase showing quantity relationship]\n    'exactly one': Indicates that each action involves removing one 'A' and one 'B', or one 'B' and one 'C'.\n    'sum of': The number of 'B's must equal the sum of 'A's and 'C's for the string to be fully erased.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If the condition is satisfied, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = YES\n    Explanation: The string can be reduced to an empty string by removing one pair of 'AB'.\n    \n    s = \"BC\" = YES\n    Explanation: The string can be reduced to an empty string by removing one pair of 'BC'.\n    \n    s = \"AABBCC\" = YES\n    Explanation: The string can be reduced to an empty string by removing pairs of 'AB' and 'BC' alternately.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the condition that the number of 'B's equals the sum of 'A's and 'C's.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' can pair with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is easy to understand and maintain.\n- Test the solution with various edge cases.\n- Document the solution and provide examples.\nWe will implement a function that checks if the number of 'B's in the string is equal to the sum of the number of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C' to reduce the string length by 2. If this condition is met, the string can be fully erased; otherwise, it cannot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters A, B, C'\n    Explanation: The string consists only of the characters 'A', 'B', and 'C', and each character is represented by a single uppercase letter.\n\n    'sequence of actions leading to an empty string'\n    Explanation: The goal is to determine if it's possible to remove all characters from the string by performing the allowed actions.\n\n# [phrase showing quantity relationship]\n    'exactly one letter'\n    Explanation: Each action involves removing exactly one 'A' and one 'B', or one 'B' and one 'C'. This means the number of 'B's must be equal to the sum of the number of 'A's and 'C's for the string to be fully erased.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's.\n3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Test case: \"A\"\n    Expected output: NO\n    Explanation: There is no 'B' to pair with 'A', so the string cannot be fully erased.\n\n    Test case: \"BC\"\n    Expected output: YES\n    Explanation: One 'B' can be paired with one 'C', resulting in an empty string.\n\n    Test case: \"ABAC\"\n    Expected output: NO\n    Explanation: There are two 'A's, one 'B', and one 'C'. The number of 'B's is not equal to the sum of the number of 'A's and 'C's (1 != 2), so the string cannot be fully erased.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking if the number of 'B's equals the sum of the number of 'A's and 'C's.\n", "requirement analysis:\nThe requirement is to determine if a given string can be completely erased by performing a series of specified actions. The key is to ensure that the number of 'B's matches the sum of 'A's and 'C's, as each action involves removing one 'B' along with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased\n- Optimize the solution for large number of test cases\n- Ensure the solution handles edge cases like minimum and maximum string lengths\n- Maintain code readability and simplicity\n- Provide detailed comments and documentation\nWe will determine if a string can be fully erased by checking if the number of 'B's is equal to the sum of 'A's and 'C's. This is because each operation involves removing one 'B' along with either an 'A' or a 'C'. If this condition is met, the string can be fully erased; otherwise, it cannot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters A, B, C'\n    Explanation: The string consists only of the characters 'A', 'B', and 'C', and operations are based on these specific letters.\n\n    'sequence of actions leading to an empty string'\n    Explanation: The goal is to perform operations that remove all characters from the string, resulting in an empty string.\n\n# [phrase showing quantity relationship]\n    'exactly one letter'\n    Explanation: Each operation removes exactly one 'A' and one 'B', or one 'B' and one 'C'. This means the string's length is reduced by 2 per operation.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string has one 'A' and one 'B', but no 'C'. The condition for erasing the string is not met.\n\n    s = \"BC\" = NO\n    Explanation: The string has one 'B' and one 'C', but no 'A'. The condition for erasing the string is not met.\n\n    s = \"ABC\" = NO\n    Explanation: The string has one 'A', one 'B', and one 'C'. The number of 'B's is not equal to the sum of 'A's and 'C's.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the condition that the number of 'B's must equal the sum of 'A's and 'C's.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be fully erased by removing pairs of 'A' and 'B' or 'B' and 'C'. The solution must efficiently handle up to 1000 test cases, each with strings up to 50 characters long. The key is to ensure the number of 'B's matches the sum of 'A's and 'C's for complete erasure.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution for handling large numbers of test cases efficiently.\n- Ensure the output format is clear and matches the required specifications.\n- Handle edge cases such as strings with no 'B's or only 'A's and 'C's.\n- Test the solution with various input sizes and conditions.\nWe will implement a function that checks if the string can be fully erased by ensuring the number of 'B's matches the sum of 'A's and 'C's. This approach is efficient and straightforward, allowing us to handle up to 1000 test cases quickly. We will use basic string operations and arithmetic to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'remove exactly one letter': This means that each turn involves removing one 'A' and one 'B' or one 'B' and one 'C'.\n    'sequence of actions': Refers to the process of repeatedly applying the removal rules until the string is empty.\n\n# [phrase showing quantity relationship]\n    'exactly by 2': Each turn reduces the string length by 2, meaning two letters are removed per turn.\n    Implementation: Ensure that the number of 'B's equals the sum of 'A's and 'C's for complete removal.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, count the occurrences of 'A', 'B', and 'C'.\n    - Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    - If true, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string cannot be reduced to empty as it requires a 'C' to match the removal rules.\n    \n    s = \"ABC\" = YES\n    Explanation: The string can be reduced to empty in one turn by removing one 'A' and one 'B', then one 'B' and one 'C'.\n    \n    s = \"AABBCC\" = YES\n    Explanation: The string can be reduced to empty by removing pairs of 'AB' and 'BC' in sequence.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle all cases correctly.\n", "requirement analysis:\nThe problem requires determining if a string consisting of 'A', 'B', and 'C' can be reduced to an empty string by removing pairs of 'AB' or 'BC'. The key is to ensure that the number of 'B's is equal to the sum of 'A's and 'C's, as each 'B' must be paired with either an 'A' or a 'C'.\nrequirement pool:\n- Implement the main logic to check if the string can be fully erased.\n- Optimize the solution to handle the maximum input size efficiently.\n- Ensure the output format is consistent with the requirements.\n- Write test cases to validate the solution against edge cases.\n- Document the code for better understanding and maintenance.\nWe will implement a function that checks if the number of 'B's in the string is equal to the sum of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C' to reduce the string length by 2. If the condition is met, the string can be fully erased; otherwise, it cannot.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters': The string consists only of the letters 'A', 'B', and 'C'.\n    'remove exactly one letter': Each turn involves removing one 'A' and one 'B' or one 'B' and one 'C'.\n    Explanation: The requirement is to determine if the string can be completely erased by removing pairs of letters as specified.\n\n# [phrase showing quantity relationship]\n    'exactly': Indicates that each turn reduces the string length by precisely 2.\n    Explanation: This means that the number of turns needed to erase the string is half the length of the string, provided the pairing condition is met.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If the condition is met, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = YES\n    Explanation: The string can be erased in one turn by removing one 'A' and one 'B'.\n    \n    s = \"AC\" = NO\n    Explanation: There is no 'B' to pair with 'A' or 'C', so the string cannot be erased.\n    \n    s = \"BB\" = NO\n    Explanation: There are no 'A's or 'C's to pair with 'B's, so the string cannot be erased.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers these scenarios by checking the pairing condition.\n", "requirement analysis:\nThe requirement is to determine if a given string consisting of 'A', 'B', and 'C' can be completely erased by removing pairs of 'A' and 'B' or 'B' and 'C'. The solution must efficiently handle up to 1000 test cases, ensuring each string is processed to determine if it can be reduced to an empty string.\nrequirement pool:\n- Implement the main algorithm to check string erasure possibility.\n- Optimize the solution for handling up to 1000 test cases efficiently.\n- Ensure the output format is clear and matches the required specifications.\n- Handle edge cases such as strings with minimum and maximum lengths.\n- Provide documentation for understanding the solution approach.\nWe will implement a function that checks if a given string can be completely erased by removing pairs of 'A' and 'B' or 'B' and 'C'. The key observation is that for the string to be completely erased, the number of 'B's must be equal to the sum of the number of 'A's and 'C's. This is because each 'B' can pair with either an 'A' or a 'C'. We will use simple arithmetic to check this condition for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'remove exactly one letter': This means that in each turn, one 'A' and one 'B' or one 'B' and one 'C' must be removed.\n    'sequence of actions leading to an empty string': This means that the goal is to completely remove all characters from the string.\n\n# [phrase showing quantity relationship]\n    'exactly by 2': This means that each operation reduces the string length by 2.\n    'number of 'B's must be equal to the sum of the number of 'A's and 'C's': This is the condition that must be satisfied for the string to be completely erased.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, count the occurrences of 'A', 'B', and 'C' in the string.\n2. Check if the number of 'B's is equal to the sum of the number of 'A's and 'C's.\n3. If the condition is satisfied, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Test case: \"A\" = NO\n    Explanation: There is only one letter, so it cannot be paired and removed.\n\n    Test case: \"BB\" = NO\n    Explanation: There are two 'B's but no 'A' or 'C' to pair with, so they cannot be removed.\n\n    Test case: \"ABCABC\" = YES\n    Explanation: The string can be reduced to an empty string by removing pairs ('A', 'B') and ('B', 'C').\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will handle these cases correctly.\n", "requirement analysis:\nThe requirement is to determine if a given string can be completely erased by performing specific operations. The operations involve removing pairs of letters ('A' and 'B' or 'B' and 'C'). The solution must efficiently handle up to 1000 test cases, each with strings of up to 50 characters. The output should be a simple YES or NO for each test case, indicating whether the string can be fully erased.\nrequirement pool:\n- Implement the main logic to determine string erasure possibility.\n- Optimize the solution for handling up to 1000 test cases efficiently.\n- Ensure the solution handles edge cases, such as strings with minimal length.\n- Provide clear and concise output formatting.\n- Consider future scalability for longer strings or additional operations.\nWe will implement a function that checks if a given string can be completely erased by performing the allowed operations. The key observation is that for the string to be fully erased, the number of 'B's must be equal to the sum of 'A's and 'C's. This is because each 'B' can be paired with either an 'A' or a 'C'. We will iterate over each test case, count the occurrences of 'A', 'B', and 'C', and apply this logic to determine if the string can be erased.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'uppercase Latin letters': The string consists only of the letters 'A', 'B', and 'C'.\n    'sequence of actions': Refers to the ability to perform operations repeatedly until the string is empty.\n\n# [phrase showing quantity relationship]\n    'exactly one': Indicates that each operation removes precisely one 'A' and one 'B', or one 'B' and one 'C'.\n    'length is reduced exactly by 2': Each operation decreases the string length by two characters.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, count the occurrences of 'A', 'B', and 'C'.\n    2. Check if the number of 'B's is equal to the sum of 'A's and 'C's.\n    3. If they are equal, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    s = \"AB\" = NO\n    Explanation: The string cannot be reduced to an empty string because there is only one 'A' and one 'B', but no 'C' to pair with another 'B'.\n    \n    s = \"BC\" = NO\n    Explanation: The string cannot be reduced to an empty string because there is only one 'B' and one 'C', but no 'A' to pair with another 'B'.\n    \n    s = \"ABC\" = NO\n    Explanation: The string cannot be reduced to an empty string because there is one 'A', one 'B', and one 'C', but not enough pairs to remove all characters.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the number of 'B's equals the sum of 'A's and 'C's will naturally handle these cases.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 650, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case is described by one string s, for which you need to determine if it can be fully erased by some sequence of turns. The string s consists of capital letters 'A', 'B', 'C' and has a length from 1 to 50 letters, inclusive.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if there is a way to fully erase the corresponding string and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers).\n\nExample\n\nInput\n\n\n6\nABACAB\nABBA\nAC\nABC\nCABCBB\nBCBCBCBCBCBCBCBC\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES", "mutate_method": "expand_one2two", "parent_index": 400}
