{"name": "1613_A. Long Comparison", "description": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end.\n\nNow Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "tags": ["implementation", "math"], "difficulty": 7, "id": 1613, "sample_io": [{"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}], "test_list": [{"input": "1\n2000 0\n2 3\n", "output": ["=\n"]}, {"input": "1\n1 6\n1000000 0\n", "output": ["=\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n6 3\n600 1\n", "output": ["=\n=\n=\n"]}, {"input": "1\n1201 0\n12 2\n", "output": [">\n"]}, {"input": "1\n50 2\n500 1\n", "output": ["=\n"]}, {"input": "1\n21 4\n210010 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 0\n", "output": ["<\n"]}, {"input": "1\n12 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 0\n", "output": ["=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "1\n1000000 10\n1000000 10\n", "output": ["=\n"]}, {"input": "1\n1 5\n101 3\n", "output": ["<\n"]}, {"input": "1\n105 0\n1 2\n", "output": [">\n"]}, {"input": "1\n402 2\n4 4\n", "output": [">\n"]}, {"input": "1\n1011 2\n1023 2\n", "output": ["<\n"]}, {"input": "2\n4 0\n7 0\n5 0\n6 0\n", "output": ["<\n<\n"]}, {"input": "1\n12 2\n1201 0\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 62\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n=\n=\n=\n"]}, {"input": "1\n1 6\n10101 2\n", "output": ["<\n"]}, {"input": "1\n999999 0\n999999 0\n", "output": ["=\n"]}, {"input": "1\n999999 0\n1000000 0\n", "output": ["<\n"]}, {"input": "5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "1\n4 4\n402 2\n", "output": ["<\n"]}, {"input": "1\n12 5\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100000 1\n100 4\n", "output": ["=\n"]}, {"input": "1\n1562 0\n2 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n6 3\n600 1\n", "output": ["=\n>\n=\n"]}, {"input": "1\n21 4\n72620 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 0\n1 0\n", "output": ["<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["=\n>\n<\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n7 0\n5 -1\n1 0\n", "output": ["<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n=\n<\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n4 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n<\n=\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n=\n>\n>\n=\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n6 3\n300 1\n5 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n>\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "3\n1 3\n100 1\n2 3\n200 1\n11 3\n600 1\n", "output": ["=\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 0\n", "output": [">\n<\n"]}, {"input": "5\n3 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n=\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 2\n362 1\n6 3\n600 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n<\n=\n=\n"]}, {"input": "5\n2 1\n19 1\n3 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n<\n<\n=\n<\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": ["<\n>\n<\n=\n>\n"]}, {"input": "3\n1 3\n110 1\n4 3\n200 1\n5 3\n600 1\n", "output": ["<\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n>\n>\n>\n=\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n<\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 0\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 0\n", "output": [">\n>\n<\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1001000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 7\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n<\n=\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n=\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n=\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 1\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n>\n>\n"]}, {"input": "3\n2 3\n100 1\n8 0\n200 1\n5 0\n465 1\n", "output": [">\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "5\n2 1\n33 -1\n4 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n<\n>\n=\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 5\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n>\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1010000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 0\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n>\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n59 1\n3 3\n300 1\n4 3\n400 1\n5 3\n200 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "2\n4 0\n2 0\n5 0\n6 -1\n", "output": [">\n>\n"]}, {"input": "5\n3 1\n19 0\n10 2\n101 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": [">\n<\n<\n=\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 7\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 8\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n999999 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n>\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 0\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1010 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n>\n=\n>\n=\n=\n=\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 14\n1000010 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 9\n1000000 4\n100 0\n1000000 4\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 10\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n=\n<\n=\n<\n=\n=\n=\n=\n<\n=\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n362 1\n6 3\n316 1\n1 10\n1000000 8\n", "output": ["=\n=\n=\n>\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10001 6\n1000000 4\n1000 7\n1000000 3\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n<\n=\n<\n=\n=\n<\n>\n<\n>\n"]}, {"input": "21\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 0\n5 3\n500 1\n6 3\n600 1\n1 10\n1000000 4\n10 6\n1000000 4\n100 8\n1000000 6\n1000 7\n1000000 4\n10000 1\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 2\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n", "output": ["=\n=\n=\n>\n=\n=\n=\n<\n<\n=\n<\n=\n=\n=\n=\n=\n<\n=\n=\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n462 1\n4 3\n362 1\n6 3\n316 1\n1 2\n1000000 4\n", "output": ["=\n=\n=\n<\n>\n>\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n3 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n110 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "7\n1 3\n100 1\n2 5\n200 1\n3 3\n300 1\n4 2\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n>\n=\n<\n>\n>\n=\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 2\n1999 0\n2 0\n1 0\n1 1\n99 0\n1 0\n", "output": [">\n<\n>\n<\n>\n"]}, {"input": "3\n2 3\n100 1\n8 3\n200 1\n5 -1\n465 1\n", "output": [">\n>\n<\n"]}, {"input": "23\n1 3\n100 0\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 2\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": [">\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n<\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n121 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n839388 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n>\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n>\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 1\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1100 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n<\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1010011 1\n999999 1\n999998 1\n1793536 1\n45690 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n<\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 6\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 2\n1101 7\n1010000 4\n10000 2\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n>\n<\n=\n>\n>\n<\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1201 -1\n12 2\n", "output": ["<\n"]}, {"input": "1\n50 1\n500 1\n", "output": ["<\n"]}, {"input": "1\n12 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 2\n1204 0\n", "output": ["<\n"]}, {"input": "1\n100000 1\n1000000 -1\n", "output": [">\n"]}, {"input": "1\n1100000 10\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n101 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n1 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n4 4\n", "output": ["<\n"]}, {"input": "1\n1011 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n12 2\n", "output": [">\n"]}, {"input": "1\n1 6\n11101 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n999999 0\n", "output": [">\n"]}, {"input": "1\n999999 0\n1001000 0\n", "output": ["<\n"]}, {"input": "1\n4 3\n402 2\n", "output": ["<\n"]}, {"input": "1\n21 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n100 4\n", "output": [">\n"]}, {"input": "5\n2 1\n33 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n", "output": ["<\n=\n<\n=\n<\n"]}, {"input": "1\n1562 -1\n2 3\n", "output": ["<\n"]}, {"input": "1\n1201 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n500 1\n", "output": [">\n"]}, {"input": "1\n21 4\n114481 0\n", "output": [">\n"]}, {"input": "1\n2 2\n1205 1\n", "output": ["<\n"]}, {"input": "1\n5 4\n1204 0\n", "output": [">\n"]}, {"input": "1\n100100 1\n1000000 -1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000000 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n1100000 19\n1000000 10\n", "output": [">\n"]}, {"input": "1\n2 5\n111 3\n", "output": [">\n"]}, {"input": "1\n105 -1\n2 2\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 4\n", "output": ["<\n"]}, {"input": "1\n1111 2\n1023 3\n", "output": ["<\n"]}, {"input": "1\n12 2\n802 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 3\n", "output": [">\n"]}, {"input": "1\n1 6\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 0\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n999999 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n5 4\n402 2\n", "output": [">\n"]}, {"input": "1\n25 5\n1204 3\n", "output": [">\n"]}, {"input": "1\n100100 1\n110 4\n", "output": ["<\n"]}, {"input": "1\n1927 -1\n20 2\n", "output": ["<\n"]}, {"input": "1\n83 2\n952 1\n", "output": ["<\n"]}, {"input": "1\n21 4\n114481 -1\n", "output": [">\n"]}, {"input": "1\n2 2\n743 1\n", "output": ["<\n"]}, {"input": "1\n5 5\n1204 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000010 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n111 5\n", "output": ["<\n"]}, {"input": "1\n402 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 2\n1023 0\n", "output": [">\n"]}, {"input": "1\n12 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n12 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n362 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 2\n", "output": ["<\n"]}, {"input": "1\n1603908 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001010 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1204 3\n", "output": ["<\n"]}, {"input": "1\n100100 1\n010 4\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 3\n465 1\n", "output": ["=\n>\n>\n"]}, {"input": "1\n1927 -1\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n952 1\n", "output": [">\n"]}, {"input": "1\n21 4\n177954 -1\n", "output": [">\n"]}, {"input": "1\n2 4\n743 1\n", "output": [">\n"]}, {"input": "1\n5 5\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 7\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n011 5\n", "output": ["<\n"]}, {"input": "1\n468 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n1023 0\n", "output": [">\n"]}, {"input": "1\n7 2\n831 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n18 0\n", "output": [">\n"]}, {"input": "7\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n4 3\n352 1\n6 3\n316 1\n1 10\n1000000 4\n", "output": ["=\n=\n=\n=\n>\n>\n=\n"]}, {"input": "1\n1 1\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 -1\n1801851 0\n", "output": ["<\n"]}, {"input": "1\n362052 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 4\n1990 3\n", "output": ["<\n"]}, {"input": "3\n1 3\n100 1\n8 3\n200 1\n5 0\n465 1\n", "output": ["=\n>\n<\n"]}, {"input": "1\n1927 -2\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n1561 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 1\n", "output": [">\n"]}, {"input": "1\n5 9\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 5\n010 5\n", "output": ["<\n"]}, {"input": "1\n15 0\n1 1\n", "output": [">\n"]}, {"input": "1\n1111 3\n533 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 1\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 0\n", "output": [">\n"]}, {"input": "1\n1 1\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 0\n1801851 0\n", "output": [">\n"]}, {"input": "1\n122308 0\n1001011 0\n", "output": ["<\n"]}, {"input": "1\n25 5\n1990 3\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n1 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "1\n1927 -3\n16 2\n", "output": ["<\n"]}, {"input": "1\n132 2\n2693 1\n", "output": ["<\n"]}, {"input": "1\n2 4\n768 0\n", "output": [">\n"]}, {"input": "1\n5 14\n1216 0\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1000 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000001 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n2 2\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 1\n", "output": ["<\n"]}, {"input": "1\n1111 3\n950 0\n", "output": [">\n"]}, {"input": "1\n7 2\n1076 2\n", "output": ["<\n"]}, {"input": "1\n12001 59\n11 1\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n1801851 0\n", "output": [">\n"]}, {"input": "1\n25 4\n1990 0\n", "output": [">\n"]}, {"input": "5\n2 1\n33 -1\n10 2\n100 1\n1999 0\n2 0\n1 0\n1 0\n29 0\n2 0\n", "output": [">\n=\n>\n=\n>\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 1\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 2\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 0\n", "output": [">\n"]}, {"input": "1\n2 1\n011 5\n", "output": ["<\n"]}, {"input": "1\n7 0\n1 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n1246 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n11 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11100 0\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 0\n", "output": [">\n"]}, {"input": "1\n34 4\n1990 0\n", "output": [">\n"]}, {"input": "3\n1 3\n100 1\n8 0\n200 0\n5 0\n465 2\n", "output": ["=\n<\n<\n"]}, {"input": "1\n132 1\n73 1\n", "output": [">\n"]}, {"input": "1\n5 19\n1216 1\n", "output": [">\n"]}, {"input": "23\n1 3\n100 1\n2 3\n200 1\n3 3\n300 1\n4 3\n400 1\n5 3\n500 1\n6 3\n600 1\n1 9\n1000000 4\n10 9\n1000000 4\n100 8\n1000000 4\n1101 7\n1000000 4\n10000 6\n1000000 4\n100000 5\n1000000 4\n1000000 4\n1000000 4\n1000000 4\n100000 5\n1000000 4\n10000 6\n1000000 4\n1000 7\n1000000 4\n100 8\n1000000 4\n10 9\n1000000 4\n1 10\n999999 1\n1000000 1\n1000011 1\n999999 1\n999998 1\n1793536 1\n999999 1\n999998 1\n", "output": ["=\n=\n=\n=\n=\n=\n<\n=\n=\n>\n=\n=\n=\n=\n=\n=\n=\n=\n=\n<\n>\n<\n>\n"]}, {"input": "1\n7 0\n2 2\n", "output": ["<\n"]}, {"input": "1\n1111 3\n2222 0\n", "output": [">\n"]}, {"input": "1\n12001 59\n21 2\n", "output": [">\n"]}, {"input": "1\n1 0\n11000 1\n", "output": ["<\n"]}, {"input": "1\n2992743 1\n28222 1\n", "output": [">\n"]}, {"input": "1\n7 4\n1990 0\n", "output": [">\n"]}, {"input": "1\n229 1\n73 1\n", "output": [">\n"]}, {"input": "1\n2 19\n1216 1\n", "output": [">\n"]}], "task_id": "codecontest/113", "prompt": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end. The integer x is accompanied by zeros which are placed at its end. And now Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "repair_prompt": ["Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end. The integer x is accompanied by zeros which are placed at its end. And now Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end. The integer x is accompanied by zeros. These zeros are placed at its end. And now Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer x with p zeros appended to its end, where the integer x is accompanied by zeros placed at its end. And now Monocarp asks you to compare these two numbers. Can you help him?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number as x1 * 10^p1.\n                    x2 and p2 describe the second number as x2 * 10^p2.\n\n    Returns:\n        A list of strings where each string is one of '>', '<', or '=' indicating\n        the comparison result of the two numbers for each test case.\n    \"\"\"\n    results = []\n    \n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective lengths of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the numbers directly\n            # Normalize the numbers by appending zeros to make them the same length\n            if p1 > p2:\n                x1 *= 10 ** (p1 - p2)\n            elif p2 > p1:\n                x2 *= 10 ** (p2 - p1)\n            \n            # Compare the normalized numbers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    # Output interface\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of zeros appended to it.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number as x1 * 10^p1.\n                    x2 and p2 describe the second number as x2 * 10^p2.\n\n    Returns:\n        A list of strings where each string is '<', '>', or '=' indicating the comparison result\n        of the two numbers for each test case.\n    \"\"\"\n    results = []\n    \n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the numbers directly\n            # Adjust the numbers by appending zeros to make them comparable\n            if p1 > p2:\n                x2 *= 10 ** (p1 - p2)\n            elif p2 > p1:\n                x1 *= 10 ** (p2 - p1)\n            \n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    # Output interface\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number, x2 and p2 describe the second number.\n\n    Returns:\n        A list of strings where each string is the result of the comparison:\n        '<' if the first number is smaller, '>' if the first number is greater, '=' if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate effective lengths\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        # Compare effective lengths\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare base integers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number, x2 and p2 describe the second number.\n\n    Returns:\n        A list of strings, each representing the comparison result ('<', '>', or '=') for each test case.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate effective lengths\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        # Compare effective lengths\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base numbers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) + tuple(map(int, input().split())) for _ in range(n)]\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of trailing zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number, x2 and p2 describe the second number.\n\n    Returns:\n        A list of strings, each representing the result of the comparison for a test case.\n        '>' if the first number is greater, '<' if the first number is smaller, '=' if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate effective lengths\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        # Compare effective lengths\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # Effective lengths are equal, compare base integers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of zeros appended to it.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number, x2 and p2 describe the second number.\n\n    Returns:\n        A list of strings, each representing the result of the comparison for a test case.\n        '>' if the first number is greater, '<' if the first number is smaller, '=' if they are equal.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of each number\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        # Compare effective lengths\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base integers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) + tuple(map(int, input().split())) for _ in range(n)]\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of trailing zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number, x2 and p2 describe the second number.\n\n    Returns:\n        A list of strings where each string is one of '>', '<', or '=' indicating the comparison result.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of each number\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the base integers\n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by an integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 represent the first number as x1 * 10^p1.\n                    x2 and p2 represent the second number as x2 * 10^p2.\n\n    Returns:\n        A list of strings where each string is '<', '>', or '=' indicating the comparison result.\n    \"\"\"\n    results = []\n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective length of each number\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n\n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the actual values\n            # Adjust the numbers to have the same number of digits by appending zeros\n            # This avoids constructing large numbers directly\n            if x1 * (10 ** (p1 - p2)) > x2:\n                results.append('>')\n            elif x1 * (10 ** (p1 - p2)) < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) + tuple(map(int, input().split())) for _ in range(n)]\n\n    # Call the function and print results\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by integers with appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and x2 are the base numbers, p1 and p2 are the number of zeros appended.\n\n    Returns:\n        A list of strings where each string is '<', '>', or '=' indicating the comparison result.\n    \"\"\"\n    results = []\n    \n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective lengths of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If lengths are equal, compare the numbers directly\n            # Adjust the numbers to have the same length by appending zeros\n            num1 = str(x1) + '0' * p1\n            num2 = str(x2) + '0' * p2\n            \n            if num1 > num2:\n                results.append('>')\n            elif num1 < num2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input().strip())\n    test_cases = []\n    \n    for _ in range(n):\n        x1, p1 = map(int, input().strip().split())\n        x2, p2 = map(int, input().strip().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    results = compare_numbers(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef compare_numbers(test_cases: List[Tuple[int, int, int, int]]) -> List[str]:\n    \"\"\"Compares two numbers represented by a base integer and a number of appended zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing four integers (x1, p1, x2, p2).\n                    x1 and p1 describe the first number, x2 and p2 describe the second number.\n\n    Returns:\n        A list of strings where each string is one of '>', '<', or '=' indicating the comparison result.\n    \"\"\"\n    results = []\n    \n    for x1, p1, x2, p2 in test_cases:\n        # Calculate the effective lengths of the numbers\n        len1 = len(str(x1)) + p1\n        len2 = len(str(x2)) + p2\n        \n        if len1 > len2:\n            results.append('>')\n        elif len1 < len2:\n            results.append('<')\n        else:\n            # If effective lengths are equal, compare the actual numbers\n            # Normalize the numbers by appending zeros to make them the same length\n            # This avoids constructing large numbers directly\n            if p1 > p2:\n                x1 *= 10 ** (p1 - p2)\n            elif p2 > p1:\n                x2 *= 10 ** (p2 - p1)\n            \n            if x1 > x2:\n                results.append('>')\n            elif x1 < x2:\n                results.append('<')\n            else:\n                results.append('=')\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        x1, p1 = map(int, input().split())\n        x2, p2 = map(int, input().split())\n        test_cases.append((x1, p1, x2, p2))\n    \n    # Output interface\n    results = compare_numbers(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to compare two numbers represented by a base integer and appended zeros. The challenge lies in efficiently handling large numbers and ensuring accurate comparisons across multiple test cases.\nrequirement pool:\n- Implement efficient number comparison logic\n- Optimize for large input sizes\n- Ensure accurate output formatting\n- Handle edge cases for minimum and maximum values\n- Provide user-friendly error messages\nWe will implement a function to compare two numbers represented by a base integer and a number of appended zeros. The challenge is to handle large numbers efficiently without directly constructing them, which can be achieved by comparing the lengths and values of the numbers in a strategic manner. We will use Python's built-in capabilities for handling integers and comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both x and p are positive integers, meaning they are greater than zero.\n    'zeros appended': This means that the number is formed by appending p zeros to the integer x, effectively multiplying x by 10^p.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if one number is larger than another.\n    'smaller than': Used to compare if one number is less than another.\n    'equal': Used to determine if two numbers are the same.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the integers x_1, p_1, x_2, and p_2.\n2. Calculate the effective length of each number by adding the length of x_1 and p_1 for the first number, and x_2 and p_2 for the second number.\n3. Compare the effective lengths:\n   - If the first number's effective length is greater, print '>'.\n   - If the second number's effective length is greater, print '<'.\n4. If the effective lengths are equal, compare the numbers directly:\n   - Append zeros to x_1 and x_2 until they have the same length.\n   - Compare the resulting numbers:\n     - If x_1 is greater, print '>'.\n     - If x_2 is greater, print '<'.\n     - If they are equal, print '='.\n\n# [edge case] \n    (1, 0) vs (1, 0) = '='\n    Explanation: Both numbers are 1, so they are equal.\n    \n    (10^6, 0) vs (1, 6) = '='\n    Explanation: The first number is 10^6 and the second number is also 10^6 (1 with 6 zeros), so they are equal.\n    \n    (1, 10^6) vs (10^6, 0) = '>'\n    Explanation: The first number is much larger due to the large number of zeros appended.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and then values will handle these cases correctly.\n", "requirement analysis:\nThe task requires comparing two numbers represented by a base integer and a number of zeros appended to it. The challenge lies in efficiently handling large numbers due to the constraints, ensuring accurate comparisons without directly constructing the large numbers.\nrequirement pool:\n- Implement efficient number comparison without constructing large numbers.\n- Ensure the solution handles up to 10,000 test cases efficiently.\n- Optimize the algorithm for performance with large input sizes.\n- Provide clear and concise output for each test case.\n- Consider edge cases such as maximum constraints for x and p.\nWe will implement a function to compare two numbers represented by a base integer and a number of zeros appended to it. Instead of constructing the large numbers, we will compare their lengths first and then their values if necessary. This approach avoids handling excessively large numbers directly, ensuring efficiency even with maximum constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both x and p are positive integers, meaning they are greater than zero.\n    'zeros appended': This means that the number is formed by appending p zeros to the integer x, effectively multiplying x by 10^p.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if one number is larger than another.\n    'smaller than': Used to compare if one number is less than another.\n    'equal': Used to determine if two numbers are the same.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of the numbers by adding the number of digits in x to p.\n2. Compare the effective lengths of the two numbers:\n   - If the first number's effective length is greater, it is larger.\n   - If the second number's effective length is greater, it is larger.\n3. If the effective lengths are equal, compare the numbers directly:\n   - Compare x_1 and x_2 directly if p_1 equals p_2.\n   - If p_1 is not equal to p_2, adjust x_1 and x_2 by appending zeros to make them comparable.\n4. Output '<', '>', or '=' based on the comparison.\n\n# [edge case] \n    (1, 0) and (1, 0) = '='\n    Explanation: Both numbers are 1, so they are equal.\n\n    (1000000, 0) and (1, 6) = '='\n    Explanation: 1000000 is equal to 1 with six zeros appended (1000000).\n\n    (999999, 0) and (1, 6) = '<'\n    Explanation: 999999 is less than 1000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and then values will handle these cases correctly.\n", "requirement analysis:\nThe task requires comparing two numbers represented by a base integer and appended zeros. The challenge lies in efficiently handling large numbers and ensuring accurate comparisons across multiple test cases. The solution must be optimized for performance given the constraints on input size.\nrequirement pool:\n- Implement efficient number comparison logic\n- Optimize for large input sizes\n- Ensure clear output format\n- Handle edge cases for maximum input values\n- Provide user-friendly error messages\nWe will implement a function to compare two numbers represented by a base integer and appended zeros. The challenge is to handle large numbers efficiently without converting them to actual integers, which could be computationally expensive. Instead, we will compare the lengths of the numbers first and then compare the base integers if necessary. This approach ensures optimal performance even for the maximum input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both x and p are positive integers, meaning they are greater than zero.\n    'appended zeros': The number is formed by appending p zeros to the integer x, effectively multiplying x by 10^p.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if one number is larger than another.\n    'smaller than': Used to compare if one number is less than another.\n    'equal': Used to determine if two numbers are the same.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of the numbers by adding the length of x and p.\n2. Compare the effective lengths:\n   - If the first number's effective length is greater, it is larger.\n   - If the second number's effective length is greater, it is larger.\n3. If the effective lengths are equal, compare the base integers x_1 and x_2:\n   - If x_1 > x_2, the first number is larger.\n   - If x_1 < x_2, the second number is larger.\n   - If x_1 == x_2, the numbers are equal.\n\n# [edge case]\n    (1, 1000000) vs (1, 999999) = >\n    Explanation: The first number has more zeros appended, making it larger.\n    \n    (1000000, 0) vs (999999, 1) = =\n    Explanation: Both numbers are effectively 1000000 after appending zeros.\n\n    (123456, 1000000) vs (123456, 1000000) = =\n    Explanation: Both numbers have the same base and the same number of zeros appended.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and then base integers will handle all cases correctly.\n", "requirement analysis:\nThe requirement is to compare two numbers represented by a base integer and appended zeros. The challenge lies in efficiently handling large numbers and ensuring accurate comparisons across multiple test cases. The solution must be optimized for performance given the constraints.\nrequirement pool:\n- Implement efficient number comparison logic\n- Ensure accurate results for all test cases\n- Optimize performance for large inputs\n- Maintain consistent output format\n- Provide user-friendly input method\nWe will implement a function to compare two numbers represented by a base integer and appended zeros. The challenge is to efficiently handle large numbers by comparing their lengths first and then their values if necessary. We will use basic arithmetic operations to achieve this without converting numbers to strings or using large integer libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both x_1 and x_2 are positive integers, meaning they are greater than zero.\n    'zeros appended': The numbers are formed by appending p_1 or p_2 zeros to x_1 or x_2, respectively.\n\n# [phrase showing quantity relationship]\n    'smaller than': Indicates a comparison where one number is less than the other.\n    'greater than': Indicates a comparison where one number is more than the other.\n    'equal': Indicates a comparison where two numbers are the same.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of the numbers by adding the number of digits in x_1 and p_1 for the first number, and similarly for the second number.\n2. Compare the effective lengths:\n   - If the first number's effective length is greater, it is larger.\n   - If the second number's effective length is greater, it is larger.\n3. If the effective lengths are equal, compare x_1 and x_2 directly:\n   - If x_1 > x_2, the first number is larger.\n   - If x_1 < x_2, the second number is larger.\n   - If x_1 == x_2, they are equal.\n\n# [edge case] \n    (x_1=1, p_1=1000000), (x_2=1, p_2=999999) = >\n    Explanation: The first number has more zeros appended, making it larger.\n    \n    (x_1=1000000, p_1=0), (x_2=999999, p_2=0) = >\n    Explanation: The first number is directly larger without considering zeros.\n\n    (x_1=123456, p_1=5), (x_2=123456, p_2=5) = =\n    Explanation: Both numbers have the same base and the same number of zeros appended.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and then values will handle these cases correctly.\n", "requirement analysis:\nThe task requires comparing two numbers represented by a base integer and a number of trailing zeros. The challenge lies in efficiently handling large numbers due to the potential size of the trailing zeros. The solution must be optimized for both speed and accuracy, ensuring it can handle up to 10,000 test cases with numbers reaching up to 10^6 in base and zeros.\nrequirement pool:\n- Implement efficient number comparison logic.\n- Optimize for handling large numbers and multiple test cases.\n- Ensure output format is clear and concise.\n- Test extensively with edge cases.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to compare two numbers represented by a base integer and a number of trailing zeros. The approach will involve comparing the effective lengths of the numbers first, and if they are equal, comparing the numbers themselves. This ensures efficient handling of large numbers without directly constructing them, which is crucial for performance given the constraints. We will use Python's built-in capabilities for handling integers and comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both numbers are positive integers, meaning they are greater than zero.\n    'zeros appended': The numbers are formed by appending zeros to the end of a base integer.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if the first number is larger than the second.\n    'smaller than': Used to compare if the first number is smaller than the second.\n    'equal': Used to compare if both numbers are the same.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, calculate the effective length of each number by adding the number of zeros to the length of the base integer.\n    2. Compare the effective lengths:\n        - If the first number's effective length is greater, print '>'.\n        - If the second number's effective length is greater, print '<'.\n    3. If the effective lengths are equal, compare the base integers:\n        - If the first base integer is greater, print '>'.\n        - If the second base integer is greater, print '<'.\n        - If both base integers are equal, print '='.\n\n# [edge case]\n    Compare(1, 0, 1, 0) = '='\n    Explanation: Both numbers are 1 with no zeros appended, so they are equal.\n\n    Compare(1000000, 0, 999999, 1) = '='\n    Explanation: The first number is 1000000 and the second number is 9999990. Both have the same effective length and value.\n\n    Compare(1, 1000000, 2, 999999) = '<'\n    Explanation: The first number has more zeros appended, making it effectively larger than the second number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and then base integers will handle all cases correctly.\n", "requirement analysis:\nThe requirement is to compare two numbers represented by a base integer and a number of zeros appended to it. The challenge lies in efficiently handling large numbers due to the potential high value of appended zeros. The solution must be optimized for performance given the constraints of up to 10,000 test cases and large input sizes.\nrequirement pool:\n- Implement efficient number comparison logic for large inputs.\n- Ensure the solution handles up to 10,000 test cases efficiently.\n- Optimize the algorithm to minimize execution time.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to compare two numbers represented by a base integer and a number of zeros appended to it. The challenge is efficiently handling large numbers due to the potential high value of appended zeros. We will use basic arithmetic operations to compare the numbers without actually constructing them, which will optimize performance and handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both numbers are positive integers, meaning they are greater than zero.\n    'zeros appended': The numbers are formed by appending zeros to the base integer, which affects their magnitude.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if the first number is larger than the second.\n    'smaller than': Used to compare if the first number is smaller than the second.\n    'equal': Used to determine if both numbers are the same.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of each number by adding the number of zeros to the length of the base integer.\n2. Compare the effective lengths:\n   - If the effective length of the first number is greater, print '>'.\n   - If the effective length of the second number is greater, print '<'.\n   - If they are equal, compare the base integers:\n     - If the first base integer is greater, print '>'.\n     - If the second base integer is greater, print '<'.\n     - If they are equal, print '='.\n\n# [edge case]\n    Compare(1, 0, 1, 0) = '='\n    Explanation: Both numbers are 1, so they are equal.\n    \n    Compare(1000000, 0, 999999, 1) = '='\n    Explanation: The first number is 1000000 and the second number is 9999990. Both have the same magnitude when zeros are appended.\n    \n    Compare(1, 1000000, 2, 999999) = '>'\n    Explanation: The first number has more zeros appended than the second, making it larger.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and base integers will handle all cases efficiently.\n", "requirement analysis:\nThe task requires comparing two numbers represented by a base integer and a number of trailing zeros. The challenge lies in efficiently handling large numbers and ensuring accurate comparisons without directly constructing the full numbers due to potential size constraints.\nrequirement pool:\n- Implement efficient number comparison without constructing full numbers.\n- Handle up to 10^4 test cases in a single execution.\n- Optimize the algorithm for speed and performance.\n- Ensure clear and correct output formatting.\n- Provide user-friendly error messages for invalid inputs.\nWe will implement a function that compares two numbers represented by a base integer and a number of trailing zeros. Instead of constructing the full numbers, we will compare their lengths first and then compare the base integers if necessary. This approach avoids potential issues with very large numbers and ensures efficient performance. We will use basic Python operations without any additional libraries, as they are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both numbers are positive integers, meaning they are greater than zero.\n    'zeros appended': The numbers are formed by appending zeros to the end of a base integer.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if the first number is larger than the second.\n    'smaller than': Used to compare if the first number is smaller than the second.\n    'equal': Used to compare if both numbers are the same.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, calculate the effective length of each number by adding the number of zeros to the length of the base integer.\n    2. Compare the effective lengths:\n        - If the effective length of the first number is greater, print '>'.\n        - If the effective length of the second number is greater, print '<'.\n        - If they are equal, compare the base integers:\n            - If the first base integer is greater, print '>'.\n            - If the second base integer is greater, print '<'.\n            - If they are equal, print '='.\n\n# [edge case]\n    Compare(1, 0, 1, 0) = '='\n    Explanation: Both numbers are 1, so they are equal.\n\n    Compare(1000000, 0, 1, 6) = '='\n    Explanation: Both numbers are effectively 1000000, so they are equal.\n\n    Compare(999999, 1, 1000000, 0) = '<'\n    Explanation: The first number is 9999990 and the second is 1000000, so the first is smaller.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing lengths and then base integers will handle all cases correctly.\n", "requirement analysis:\nThe requirements focus on comparing two numbers efficiently by appending zeros to the end of integers. The solution must handle up to 10,000 test cases and ensure accurate comparisons even with large numbers. The output format must be consistent and easy to interpret.\nrequirement pool:\n- Implement efficient number comparison logic\n- Ensure correct handling of large numbers\n- Optimize for performance with large input sizes\n- Maintain clear and concise output format\n- Provide user-friendly input method\nWe will implement a function to compare two numbers represented by an integer and a number of appended zeros. The challenge is to handle large numbers efficiently without directly constructing them, which can be achieved by comparing the lengths and values of the numbers. We will use Python's built-in capabilities for handling integers and comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both numbers x_1 and x_2 are positive integers, meaning they are greater than zero.\n    'zeros appended': The numbers are represented by appending p_1 and p_2 zeros to x_1 and x_2 respectively, effectively multiplying the number by 10 raised to the power of p.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if one number is larger than the other.\n    'smaller than': Used to compare if one number is less than the other.\n    'equal': Used to determine if two numbers are the same.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of each number by adding the length of x and the number of zeros (p).\n2. Compare the effective lengths:\n   - If one number has a greater effective length, it is larger.\n   - If both have the same effective length, compare the actual values of x_1 and x_2.\n3. Print '<', '>', or '=' based on the comparison results.\n\n# [edge case]\n    Test case: (1, 1000000) and (1, 999999) = '>'\n    Explanation: The first number has more zeros appended, making it larger.\n    \n    Test case: (1000000, 0) and (999999, 1) = '='\n    Explanation: Both numbers effectively become 1000000 after appending zeros.\n\n    Test case: (1, 0) and (1, 0) = '='\n    Explanation: Both numbers are identical with no zeros appended.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and values will handle these cases correctly.\n", "requirement analysis:\nThe task requires comparing two numbers represented by integers with appended zeros. The challenge lies in efficiently handling large numbers and ensuring accurate comparisons across multiple test cases. The solution must be optimized for performance given the constraints on input size.\nrequirement pool:\n- Implement efficient number comparison logic\n- Optimize for large input sizes\n- Ensure clear output format\n- Handle edge cases for minimum and maximum values\n- Provide user-friendly input method\nWe will implement a function to compare two numbers represented by integers with appended zeros. The challenge is to handle large numbers efficiently without directly constructing them, which could lead to performance issues. Instead, we will compare the numbers based on their lengths and values. Python's native integer handling will be sufficient for this task, as it can manage large integers natively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both x_1 and x_2 are positive integers, meaning they are greater than zero.\n    'zeros appended': The numbers are represented by appending p_1 and p_2 zeros to x_1 and x_2, respectively.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if one number is larger than the other.\n    'smaller than': Used to compare if one number is less than the other.\n    'equal': Used to determine if two numbers are the same.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of the numbers by adding the number of zeros (p_1 and p_2) to the length of x_1 and x_2.\n2. Compare the effective lengths:\n   - If the effective length of the first number is greater, it is larger.\n   - If the effective length of the second number is greater, it is smaller.\n3. If the effective lengths are equal, compare the numbers themselves:\n   - Append zeros to x_1 and x_2 to make them of equal length if necessary.\n   - Compare the resulting numbers directly.\n4. Output '<', '>', or '=' based on the comparison.\n\n# [edge case] \n    Case 1: (x_1, p_1) = (1, 1000000), (x_2, p_2) = (1, 999999) = '>'\n    Explanation: The first number has one more zero appended than the second, making it larger.\n    \n    Case 2: (x_1, p_1) = (1000000, 0), (x_2, p_2) = (999999, 1) = '='\n    Explanation: Both numbers effectively become 1000000 after appending zeros.\n\n    Case 3: (x_1, p_1) = (123456, 5), (x_2, p_2) = (1234567, 4) = '<'\n    Explanation: The second number is larger after considering appended zeros.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and values will handle these cases correctly.\n", "requirement analysis:\nThe requirements focus on comparing two numbers with appended zeros efficiently. The solution must handle up to 10,000 test cases and numbers with up to 1,000,000 zeros, ensuring performance and accuracy.\nrequirement pool:\n- Implement efficient number comparison logic\n- Optimize for large input sizes\n- Ensure clear output format\n- Handle edge cases for maximum zeros\n- Provide user-friendly input method\nWe will implement a function to compare two numbers represented by a base integer and a number of appended zeros. The function will handle up to 10,000 test cases efficiently by comparing the effective lengths of the numbers first, and only comparing the actual values if necessary. This approach avoids constructing large numbers directly, which is crucial for performance and memory efficiency. We will use Python's built-in capabilities for handling integers and comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integer': Both x and the numbers formed by appending zeros are positive integers.\n    'appended zeros': The number of zeros added to the end of x to form the complete number.\n\n# [phrase showing quantity relationship]\n    'greater than': Used to compare if one number is larger than another.\n    'smaller than': Used to compare if one number is less than another.\n    'equal': Used to determine if two numbers are the same.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the effective length of both numbers by adding the length of x and p.\n2. Compare the effective lengths:\n   - If the effective length of the first number is greater, print '>'.\n   - If the effective length of the second number is greater, print '<'.\n3. If the effective lengths are equal, compare the actual values:\n   - Compare x_1 and x_2 directly.\n   - If x_1 > x_2, print '>'.\n   - If x_1 < x_2, print '<'.\n   - If x_1 == x_2, print '='.\n\n# [edge case] \n    (1, 1000000) vs (1, 999999) = >\n    Explanation: The first number has more zeros appended, making it larger.\n    \n    (1000000, 0) vs (999999, 0) = >\n    Explanation: The first number is larger because 1000000 > 999999.\n    \n    (1, 0) vs (1, 0) = =\n    Explanation: Both numbers are exactly the same.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of comparing effective lengths and then values will handle all cases correctly.\n"], "scores": [], "pass_results": [true, true, true, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 688, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers x_1 and p_1 (1 \u2264 x_1 \u2264 10^6; 0 \u2264 p_1 \u2264 10^6) \u2014 the description of the first number.\n\nThe second line of each testcase contains two integers x_2 and p_2 (1 \u2264 x_2 \u2264 10^6; 0 \u2264 p_2 \u2264 10^6) \u2014 the description of the second number.\n\nOutput\n\nFor each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.\n\nExample\n\nInput\n\n\n5\n2 1\n19 0\n10 2\n100 1\n1999 0\n2 3\n1 0\n1 0\n99 0\n1 2\n\n\nOutput\n\n\n&gt;\n=\n&lt;\n=\n&lt;\n\nNote\n\nThe comparisons in the example are: 20 > 19, 1000 = 1000, 1999 < 2000, 1 = 1, 99 < 100.", "mutate_method": "expand_one2two", "parent_index": 330}
