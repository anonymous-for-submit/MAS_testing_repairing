{"name": "1579_B. Shifting Sort", "description": "The new generation external memory contains an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. \n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\n\n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "tags": ["implementation", "sortings"], "difficulty": 8, "id": 1579, "sample_io": [{"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}], "test_list": [{"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 4 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 2 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 6 1 4 3\n", "output": ["0\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 2 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n2 3 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 6 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 0 5\n5\n2 10 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 4 1 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 6 0 5\n5\n2 10 2 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 1\n4\n1 4 0 3\n5\n0 5 1 4 0\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 2 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 4 0 5\n5\n2 3 1 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n4 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 4 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 3 1\n4\n2 13 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n2 13 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 0 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 0 -1 1 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 4\n5\n2 8 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 2 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n-1 2 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 4 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 1 8 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 2 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 0\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n4 3 0\n4\n0 6 1 3\n5\n2 3 1 4 3\n", "output": ["1\n1 2 1\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 0 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n0\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 0 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 0\n3\n2 4 0\n4\n0 15 1 0\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 4 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n0 5 1 4 11\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 1 0 5\n5\n2 3 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n2 3 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 8 -1 3\n5\n0 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n1 9 1 3\n5\n1 5 2 4 0\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 5 4\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n4 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n2 4 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n1 28 -1 4 5\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n0 2 -1 3\n5\n2 0 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n1 3 2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 4 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 4 0 3\n5\n0 10 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n4 1\n3\n1 5 0\n4\n0 6 1 3\n5\n2 5 1 7 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 8 1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 4 1\n4\n2 4 0 5\n5\n2 10 2 4 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 2 1 3\n5\n4 5 1 0 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n4 5 1 6 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 6 5\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n2 7 0 5\n5\n2 10 2 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n4 2\n3\n0 2 0\n4\n-1 2 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n2 3 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 7 0 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n0 4 0\n4\n0 9 0 3\n5\n1 6 2 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 1 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["0\n0\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 0\n4\n0 0 1 3\n5\n2 5 0 4 3\n", "output": ["0\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 8 1 3\n5\n4 5 1 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n0 1\n3\n1 4 0\n4\n0 2 1 3\n5\n4 5 1 0 3\n", "output": ["0\n1\n1 3 2\n1\n2 3 1\n3\n1 4 3\n2 4 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n1 5 1 6 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n0 4 -1\n4\n-1 6 1 3\n5\n0 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 1 -1 3\n5\n0 5 0 8 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 2 2 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n0\n0\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 1\n3\n1 2 0\n4\n0 0 1 3\n5\n2 5 0 6 3\n", "output": ["0\n1\n1 3 2\n0\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n3 1\n3\n1 2 2\n4\n0 8 1 3\n5\n4 5 1 8 3\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n2\n1 3 2\n2 5 3\n"]}, {"input": "4\n2\n2 1\n3\n-2 2 0\n4\n3 8 1 6\n5\n2 5 1 6 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 1 3\n5\n2 0 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 5 1 5 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 5 4\n2 4 2\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n2 4 -1 0\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n2 4 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 2 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 6\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 6 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 2 -1\n4\n2 4 1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n0 4 0\n4\n0 6 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 2 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 1 0\n4\n0 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n2\n1 3 2\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 9 2 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 0 3\n5\n1 8 2 4 1\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 1\n4\n4 18 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n2 4 2\n1\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 1 2\n4\n2 18 -1 3\n5\n0 -1 1 4 3\n", "output": ["1\n1 2 1\n0\n2\n1 3 2\n3 4 1\n2\n1 2 1\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 0\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 2 8 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 0 3\n5\n2 5 1 4 6\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n0 4 -1 4\n5\n2 5 1 8 3\n", "output": ["0\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 1\n3\n1 4 1\n4\n0 2 1 3\n5\n2 5 1 0 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n2 3 1\n3\n1 4 3\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 -1 3\n5\n2 5 1 8 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n2 3 1\n2\n1 3 2\n3 5 2\n"]}, {"input": "4\n2\n2 -1\n3\n2 1 3\n4\n1 18 -1 3\n5\n0 0 1 4 3\n", "output": ["1\n1 2 1\n1\n1 2 1\n2\n1 3 2\n3 4 1\n1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 2\n4\n2 4 2 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n0\n2\n2 3 1\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 2 0 3\n5\n0 10 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n3\n2 5 3\n3 4 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 0 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 1\n4\n1 4 2 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n2 4 0 3\n5\n2 10 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 3 0\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 0\n4\n0 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n1 4 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 1\n4\n1 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n4 1\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 4 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 8 1 6\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 1 1\n4\n2 4 -1 5\n5\n2 6 1 4 3\n", "output": ["1\n1 2 1\n0\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 0\n4\n2 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 1\n4\n0 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n0 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 0\n4\n1 4 -1 2\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 4 0\n4\n0 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 3 1\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n0 2 1\n4\n0 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 4 1\n4\n2 4 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 -1\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 4 -1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 4\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 6\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n0 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n1 2 1\n4\n1 7 0 3\n5\n2 5 1 4 0\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 5 4\n2 4 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 5 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n1 2\n3\n1 2 0\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 4 0\n4\n0 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n2 8 1 6\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 2\n3\n1 2 -1\n4\n1 4 -1 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 4 0\n4\n-1 6 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n2 4 0\n4\n-1 0 0 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n0\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n0 2 0\n4\n-1 11 1 3\n5\n2 5 1 4 3\n", "output": ["0\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 0\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 2\n3\n0 2 0\n4\n2 4 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 4 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 4\n3\n1 2 0\n4\n2 4 0 4\n5\n2 5 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n2 4 1 4\n5\n2 5 1 4 11\n", "output": ["1\n1 2 1\n1\n2 3 1\n1\n1 3 2\n2\n1 3 2\n3 4 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 4\n5\n2 9 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 0\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 9 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 0\n3\n2 3 0\n4\n0 6 1 3\n5\n1 5 1 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 1\n3\n1 2 1\n4\n0 7 1 3\n5\n2 0 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n1 2 1\n2 3 1\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n-1 2 0\n4\n-1 6 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -2\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 -1\n4\n0 15 1 3\n5\n1 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n2 8 -1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 2\n3\n1 2 -1\n4\n2 4 -1 6\n5\n2 9 1 4 3\n", "output": ["0\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 9 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 1\n3\n-1 2 0\n4\n-1 12 1 3\n5\n0 5 1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n1 9 1 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 -2\n3\n2 4 0\n4\n-1 8 1 3\n5\n2 5 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 4 -1\n4\n0 15 1 3\n5\n1 5 1 4 2\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n1 2 0\n4\n2 3 1 3\n5\n2 9 1 4 3\n", "output": ["1\n1 2 1\n1\n1 3 2\n1\n1 3 2\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n2 -1\n3\n1 2 1\n4\n1 4 -1 3\n5\n2 14 -1 4 3\n", "output": ["1\n1 2 1\n1\n2 3 1\n2\n1 3 2\n3 4 1\n3\n1 3 2\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n0 1\n3\n2 4 0\n4\n0 9 0 3\n5\n1 5 2 4 3\n", "output": ["0\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}, {"input": "4\n2\n3 0\n3\n2 6 -1\n4\n0 15 1 3\n5\n1 5 1 4 2\n", "output": ["1\n1 2 1\n1\n1 3 2\n2\n2 3 1\n3 4 1\n3\n2 3 1\n3 5 2\n4 5 1\n"]}], "task_id": "codecontest/14", "prompt": "The new generation external memory consists of an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. You have the freedom to choose any pair of indices for l and r within this constraint. This selection will define the segment you can work with.\n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted. Consider various strategies and optimizations that may help achieve the task efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "repair_prompt": ["The new generation external memory consists of an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. You have the freedom to choose any pair of indices for l and r within this constraint. This selection will define the segment you can work with.\n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted. Consider various strategies and optimizations that may help achieve the task efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "The new generation external memory consists of an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n].\n\nThis type of memory does not support changing the value of an arbitrary element. Instead, it allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment. You have the freedom to choose any pair of indices for l and r within this constraint. These indices are important because they define the segment you can work with.\n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted. Consider various strategies and optimizations that may help achieve the task efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "The new generation external memory consists of an array of integers a[1 \u2026 n] = [a_1, a_2, \u2026, a_n]. This type of memory does not support changing the value of an arbitrary element and instead allows you to cut out any segment of the given array, cyclically shift (rotate) it by any offset and insert it back into the same place.\n\nTechnically, each cyclic shift consists of two consecutive actions: \n\n  1. You may select arbitrary indices l and r (1 \u2264 l < r \u2264 n) as the boundaries of the segment, and this selection will define the segment you can work with.\n  2. Then you replace the segment a[l \u2026 r] with it's cyclic shift to the left by an arbitrary offset d. The concept of a cyclic shift can be also explained by following relations: the sequence [1, 4, 1, 3] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 1 and the sequence [4, 1, 3, 1] is a cyclic shift of the sequence [3, 1, 4, 1] to the left by the offset 2. \n\nFor example, if a = [1, \\color{blue}{3, 2, 8}, 5], then choosing l = 2, r = 4 and d = 2 yields a segment a[2 \u2026 4] = [3, 2, 8]. This segment is then shifted by the offset d = 2 to the left, and you get a segment [8, 3, 2] which then takes the place of of the original elements of the segment. In the end you get a = [1, \\color{blue}{8, 3, 2}, 5].\n\nSort the given array a using no more than n cyclic shifts of any of its segments. Note that you don't need to minimize the number of cyclic shifts. Any method that requires n or less cyclic shifts will be accepted. Consider various strategies and optimizations that may help achieve the task efficiently.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] "], "completions": ["from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sorts arrays using cyclic shifts and returns the number of shifts and their details.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the length of the array and the array itself.\n\n    Returns:\n        A list of tuples, each containing the number of shifts and a list of shift details.\n    \"\"\"\n    results = []\n\n    for n, a in test_cases:\n        actions = []\n        sorted_a = sorted(a)\n\n        if a == sorted_a:\n            results.append((0, actions))\n            continue\n\n        # Implement a simple strategy to sort the array using cyclic shifts\n        for i in range(n - 1):\n            if a[i] > a[i + 1]:\n                # Find the segment to shift\n                l = i + 1\n                r = n\n                d = 1\n\n                # Perform the cyclic shift\n                segment = a[l - 1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                a[l - 1:r] = shifted_segment\n\n                # Record the action\n                actions.append((l, r, d))\n\n                # Check if sorted\n                if a == sorted_a:\n                    break\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append((n, a))\n\n# Call the function\nresults = sort_with_cyclic_shifts(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, actions = result\n    print(k)\n    for action in actions:\n        print(' '.join(map(str, action)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sort arrays using cyclic shifts.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the length of the array and the array itself.\n\n    Returns:\n        A list of tuples, each containing the number of shifts and a list of shift operations.\n    \"\"\"\n    results = []\n\n    for n, array in test_cases:\n        if array == sorted(array):\n            # If the array is already sorted, no shifts are needed.\n            results.append((0, []))\n            continue\n\n        actions = []\n        # A simple strategy to sort the array using cyclic shifts\n        # This is not optimized for the minimum number of shifts but ensures it does not exceed n\n        for i in range(n - 1):\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            if min_index != i:\n                # Perform a cyclic shift to bring the minimum element to the correct position\n                # Shift the segment [i, min_index] to the left by 1\n                segment_length = min_index - i + 1\n                array[i:min_index + 1] = array[i + 1:min_index + 1] + [array[i]]\n                actions.append((i + 1, min_index + 1, 1))\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        array = list(map(int, input().split()))\n        test_cases.append((n, array))\n\n    # Output interface\n    results = sort_with_cyclic_shifts(t, test_cases)\n    for k, actions in results:\n        print(k)\n        for l, r, d in actions:\n            print(l, r, d)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    results = []\n    \n    for n, array in test_cases:\n        if array == sorted(array):\n            # If the array is already sorted, no shifts are needed\n            results.append((0, []))\n            continue\n        \n        actions = []\n        # We will perform at most n shifts\n        for i in range(n):\n            # Find the first unsorted position\n            for j in range(n - 1):\n                if array[j] > array[j + 1]:\n                    # Perform a cyclic shift to sort the segment\n                    l = j + 1\n                    r = n\n                    d = 1\n                    # Perform the cyclic shift\n                    segment = array[l-1:r]\n                    shifted_segment = segment[d:] + segment[:d]\n                    array[l-1:r] = shifted_segment\n                    actions.append((l, r, d))\n                    break\n            else:\n                # If no unsorted position is found, the array is sorted\n                break\n        \n        results.append((len(actions), actions))\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    test_cases.append((n, array))\n\n# Call the function\nresults = sort_with_cyclic_shifts(t, test_cases)\n\n# Output interface\nfor result in results:\n    k, actions = result\n    print(k)\n    for action in actions:\n        print(' '.join(map(str, action)))\n", "from typing import List\n## main.py\n\nimport typing\n\ndef cyclic_shift_sort(t: int, test_cases: typing.List[typing.Tuple[int, typing.List[int]]]) -> typing.List[typing.Tuple[int, typing.List[typing.Tuple[int, int, int]]]]:\n    results = []\n    \n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n        \n        # We will perform a simple strategy to sort the array using cyclic shifts\n        # This is not necessarily optimal but will satisfy the problem constraints\n        for i in range(n - 1):\n            # Find the minimum element in the unsorted part of the array\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            \n            # If the minimum element is not already in the correct position\n            if min_index != i:\n                # Perform a cyclic shift to bring the minimum element to the correct position\n                # We choose l = i + 1, r = min_index + 1, d = min_index - i\n                l = i + 1\n                r = min_index + 1\n                d = min_index - i\n                \n                # Perform the cyclic shift\n                segment = array[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l-1:r] = shifted_segment\n                \n                # Record the action\n                actions.append((l, r, d))\n        \n        # Append the result for this test case\n        results.append((len(actions), actions))\n    \n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    # Output interface\n    results = cyclic_shift_sort(t, test_cases)\n    for result in results:\n        k, actions = result\n        print(k)\n        for action in actions:\n            print(*action)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sorts arrays using cyclic shifts within the constraints provided.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing an integer n and a list of integers representing the array.\n\n    Returns:\n        A list of tuples, each containing an integer k and a list of tuples representing the cyclic shift actions.\n    \"\"\"\n    results = []\n\n    for n, a in test_cases:\n        actions = []\n        sorted_a = sorted(a)\n\n        if a == sorted_a:\n            results.append((0, actions))\n            continue\n\n        # Implement a simple strategy to sort the array using cyclic shifts\n        # This is a naive approach and may not be optimal but will satisfy the constraints\n        for i in range(n - 1):\n            if a[i] > a[i + 1]:\n                # Find the segment to shift\n                l = i + 1\n                r = n\n                d = 1\n\n                # Perform the cyclic shift\n                segment = a[l - 1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                a[l - 1:r] = shifted_segment\n\n                # Record the action\n                actions.append((l, r, d))\n\n                # Check if sorted\n                if a == sorted_a:\n                    break\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n\n    # Call the function\n    results = sort_with_cyclic_shifts(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, actions = result\n        print(k)\n        for action in actions:\n            print(f\"{action[0]} {action[1]} {action[2]}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef cyclic_shift_sort(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sorts arrays using cyclic shifts.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the length of the array and the array itself.\n\n    Returns:\n        A list of tuples, each containing the number of shifts and a list of shift operations.\n    \"\"\"\n    results = []\n\n    for n, array in test_cases:\n        actions = []\n        \n        # Check if the array is already sorted\n        if array == sorted(array):\n            results.append((0, actions))\n            continue\n\n        # Implement a simple strategy to sort the array using cyclic shifts\n        # This is a naive approach and can be optimized\n        for i in range(n - 1):\n            min_index = i\n            for j in range(i + 1, n):\n                if array[j] < array[min_index]:\n                    min_index = j\n            \n            if min_index != i:\n                # Perform a cyclic shift to bring the minimum element to the correct position\n                # Shift the segment [i, min_index] to the left by 1\n                l = i + 1\n                r = min_index + 1\n                d = 1\n                actions.append((l, r, d))\n                \n                # Perform the cyclic shift\n                segment = array[i:r]\n                array[i:r] = segment[d:] + segment[:d]\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        array = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, array))\n    \n    # Call the function and get the result\n    results = cyclic_shift_sort(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        k, actions = result\n        print(k)\n        for action in actions:\n            print(f\"{action[0]} {action[1]} {action[2]}\")\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sorts arrays using cyclic shifts and returns the number of shifts and their details.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the length of the array and the array itself.\n\n    Returns:\n        List[Tuple[int, List[Tuple[int, int, int]]]]: List of results for each test case, where each result contains the number of shifts and the details of each shift.\n    \"\"\"\n    results = []\n\n    for n, array in test_cases:\n        actions = []\n        sorted_array = sorted(array)\n\n        if array == sorted_array:\n            results.append((0, actions))\n            continue\n\n        # Implement a simple strategy to sort the array using cyclic shifts\n        for i in range(n):\n            if array[i] != sorted_array[i]:\n                # Find the segment to shift\n                l = i + 1\n                r = n\n                while r > l and array[r - 1] == sorted_array[r - 1]:\n                    r -= 1\n\n                # Perform a cyclic shift\n                d = 1  # Simple strategy: shift by 1\n                segment = array[l - 1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                array[l - 1:r] = shifted_segment\n\n                actions.append((l, r, d))\n\n                # Check if sorted\n                if array == sorted_array:\n                    break\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    test_cases.append((n, array))\n\n# Output interface\nresults = sort_with_cyclic_shifts(t, test_cases)\nfor result in results:\n    k, actions = result\n    print(k)\n    for action in actions:\n        print(' '.join(map(str, action)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    results = []\n    \n    for n, a in test_cases:\n        if a == sorted(a):\n            results.append((0, []))\n            continue\n        \n        actions = []\n        sorted_a = sorted(a)\n        \n        for i in range(n):\n            if a[i] != sorted_a[i]:\n                # Find the segment to shift\n                l = i + 1\n                r = a.index(sorted_a[i], i) + 1\n                d = r - l\n                \n                # Perform the cyclic shift\n                segment = a[l-1:r]\n                shifted_segment = segment[d:] + segment[:d]\n                a[l-1:r] = shifted_segment\n                \n                # Record the action\n                actions.append((l, r, d))\n                \n                # If we have reached n actions, break\n                if len(actions) >= n:\n                    break\n        \n        results.append((len(actions), actions))\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n    \n    # Call the function\n    results = sort_with_cyclic_shifts(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        k, actions = result\n        print(k)\n        for action in actions:\n            print(' '.join(map(str, action)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sorts arrays using cyclic shifts.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the length of the array and the array itself.\n\n    Returns:\n        A list of tuples, each containing the number of shifts and the details of each shift.\n    \"\"\"\n    results = []\n\n    for n, array in test_cases:\n        actions = []\n        sorted_array = sorted(array)\n\n        if array == sorted_array:\n            results.append((0, actions))\n            continue\n\n        # Strategy: Perform cyclic shifts to sort the array\n        for i in range(n):\n            if array[i] != sorted_array[i]:\n                # Find the correct position of the current element\n                correct_pos = sorted_array.index(array[i])\n                if correct_pos > i:\n                    # Perform a cyclic shift\n                    l = i + 1\n                    r = correct_pos + 1\n                    d = r - l\n                    segment = array[l-1:r]\n                    shifted_segment = segment[d:] + segment[:d]\n                    array[l-1:r] = shifted_segment\n                    actions.append((l, r, d))\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        array = list(map(int, input().split()))\n        test_cases.append((n, array))\n\n    # Call the function\n    results = sort_with_cyclic_shifts(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, actions = result\n        print(k)\n        for action in actions:\n            print(f\"{action[0]} {action[1]} {action[2]}\")\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef sort_with_cyclic_shifts(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[int, List[Tuple[int, int, int]]]]:\n    \"\"\"Sorts arrays using cyclic shifts and returns the number of shifts and their details.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the length of the array and the array itself.\n\n    Returns:\n        A list of tuples, each containing the number of shifts and a list of shift details for each test case.\n    \"\"\"\n    results = []\n\n    for n, a in test_cases:\n        if a == sorted(a):\n            # If the array is already sorted, no shifts are needed.\n            results.append((0, []))\n            continue\n\n        actions = []\n        # We will perform at most n shifts, as allowed by the problem statement.\n        for i in range(n):\n            # Find the first element that is out of order\n            for j in range(n - 1):\n                if a[j] > a[j + 1]:\n                    # Perform a cyclic shift to correct the order\n                    l = j + 1\n                    r = n\n                    d = 1\n                    # Perform the cyclic shift\n                    a = a[:l-1] + a[l:r][d:] + a[l:r][:d] + a[r:]\n                    actions.append((l, r, d))\n                    break\n            else:\n                # If no out-of-order element is found, the array is sorted\n                break\n\n        results.append((len(actions), actions))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n\n    # Call the function\n    results = sort_with_cyclic_shifts(t, test_cases)\n\n    # Output interface\n    for result in results:\n        k, actions = result\n        print(k)\n        for action in actions:\n            print(' '.join(map(str, action)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to sort an array using cyclic shifts within a given number of operations. The solution should handle multiple test cases and provide output in a specified format. The challenge lies in efficiently determining the segments and offsets for cyclic shifts.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Optimize for performance\n- Provide detailed comments and documentation\nWe will implement a function to sort the array using cyclic shifts. The approach involves iterating over the array and performing cyclic shifts to move elements into their correct positions. We will use a simple strategy where we identify segments that need to be shifted and apply the necessary cyclic shifts. The function will handle multiple test cases and output the results in the required format. We will use Python's built-in list operations to perform the cyclic shifts efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sort the array'\n    Explanation: The goal is to rearrange the elements of the array in non-decreasing order using cyclic shifts.\n\n# [phrase showing quantity relationship]\n    'no more than n cyclic shifts'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means we can perform up to n shifts to achieve sorting.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, check if the array is already sorted. If it is, output k = 0.\n    2. If not sorted, identify segments that need shifting to move elements into their correct positions.\n    3. Perform cyclic shifts on identified segments, ensuring each shift moves elements closer to their sorted positions.\n    4. Keep track of the number of shifts and their details (l, r, d).\n    5. Output the number of shifts and their details for each test case.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with all identical elements:\n    Input: [5, 5, 5, 5]\n    Output: 0\n    Explanation: All elements are identical, so the array is trivially sorted.\n\n    Test case with two elements:\n    Input: [2, 1]\n    Output: 1\n    Explanation: A single shift is needed to sort the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle arrays that are already sorted or contain identical elements by checking if the array is sorted before performing any shifts.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within a given constraint of n shifts. The solution should handle multiple test cases and provide output in a specified format. The focus is on efficiency and correctness rather than minimizing the number of shifts.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Ensure solution handles up to 1000 test cases\n- Optimize for performance within n shifts\n- Provide clear output format\n- Consider edge cases and repeated elements\nWe will implement a function to sort arrays using cyclic shifts. The approach will involve selecting segments of the array and performing cyclic shifts to sort the array. We will use Python's list slicing and manipulation capabilities to achieve this. The solution will handle multiple test cases and ensure the output format is correct. We will not focus on minimizing the number of shifts but ensure the number of shifts does not exceed n.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating elements within a specified segment of an array to the left by a given offset. This operation allows rearranging elements without changing their relative order outside the segment.\n\n    'segment'\n    Explanation: A segment is a contiguous subarray defined by two indices, l and r, within the array. Operations are performed only within this segment.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This ensures that the sorting process is efficient and adheres to constraints.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Parse the input to retrieve the number of test cases and their respective arrays.\n2. For each test case, check if the array is already sorted. If so, output k = 0.\n3. If not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\n4. Perform cyclic shifts on identified segments, ensuring the number of shifts does not exceed n.\n5. Output the number of shifts and their details for each test case.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Expected output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with all identical elements:\n    Input: [5, 5, 5, 5]\n    Expected output: 0\n    Explanation: All elements are identical, so the array is trivially sorted.\n\n    Test case with minimum length:\n    Input: [2, 1]\n    Expected output: 1\n    Explanation: A single shift of the segment [1, 2] will sort the array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can handle arrays that are already sorted or contain identical elements by checking if the array is sorted before performing any shifts.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within a given constraint of n shifts. The solution should handle multiple test cases efficiently and provide the correct output format. The focus is on using cyclic shifts to achieve sorting without minimizing the number of shifts.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Ensure solution handles up to 1000 test cases\n- Optimize for performance within given constraints\n- Provide clear output format for each test case\n- Consider edge cases and repeated elements\nWe will implement a function that sorts an array using cyclic shifts. The function will iterate over the array and perform cyclic shifts to sort the array in ascending order. The approach will ensure that the number of shifts does not exceed the length of the array, n. We will use Python's list slicing capabilities to perform the cyclic shifts efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset. This means that elements are moved from the start of the segment to the end, and the segment is reinserted into the array in its original position.\n\n    'sort using cyclic shifts'\n    Explanation: The task is to sort the array by performing a series of cyclic shifts. The number of shifts should not exceed the length of the array, n.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed n, where n is the length of the array.\n\n# [degree adverb]\n    'any'\n    Explanation: The requirement allows for any method that sorts the array using n or fewer cyclic shifts, meaning there is flexibility in choosing how to achieve the sorted order.\n\n# [code logic]\n1. For each test case, read the integer n and the array a.\n2. Check if the array is already sorted. If it is, output k = 0 and an empty sequence.\n3. If not sorted, identify segments that can be cyclically shifted to move elements closer to their sorted positions.\n4. Use list slicing to perform cyclic shifts on identified segments.\n5. Keep track of each shift operation by recording l, r, and d.\n6. Ensure that the total number of shifts does not exceed n.\n7. Output the number of shifts k and the details of each shift operation.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4, 5]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with all identical elements:\n    Input: [3, 3, 3, 3]\n    Output: 0\n    Explanation: All elements are identical, so the array is trivially sorted.\n\n    Test case with minimum size:\n    Input: [2, 1]\n    Output: 1\n    Explanation: A single shift is needed to sort this two-element array.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic can handle arrays that are already sorted or have identical elements by checking if the array is sorted before performing any shifts.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within a given constraint of n operations. The solution should handle multiple test cases efficiently and provide output in a specified format. The focus is on achieving the task within the allowed number of operations rather than minimizing them.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Ensure solution handles multiple test cases\n- Optimize for large input sizes\n- Provide clear output format\n- Handle edge cases gracefully\nWe will implement a function to sort arrays using cyclic shifts. The approach will involve identifying segments of the array that can be cyclically shifted to move elements into their correct positions. We will use Python's list slicing and manipulation capabilities to perform the cyclic shifts efficiently. The solution will handle multiple test cases and provide output in the specified format. We will ensure the solution is scalable for large inputs by using efficient list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sort using cyclic shifts'\n    Explanation: The task is to sort the array by performing cyclic shifts on segments of the array, with the constraint that the number of shifts should not exceed the length of the array.\n\n# [phrase showing quantity relationship]\n    'no more than n cyclic shifts'\n    Explanation: The number of cyclic shifts performed to sort the array should be less than or equal to the length of the array. This can be implemented by ensuring that the count of shifts does not exceed n during the sorting process.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The indices l and r for selecting segments and the offset d for shifting are chosen freely within their respective constraints, allowing flexibility in how segments are manipulated.\n\n# [code logic]\n1. For each test case, read the array and its length.\n2. Check if the array is already sorted; if so, output 0 and no actions.\n3. If not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\n4. Perform cyclic shifts using list slicing and manipulation.\n5. Keep track of the number of shifts and ensure it does not exceed n.\n6. Output the number of shifts and their descriptions.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with maximum allowed shifts:\n    Input: [4, 3, 2, 1]\n    Output: 4\n    Explanation: Each element needs to be shifted to its correct position, requiring n shifts.\n\n    Test case with repeated elements:\n    Input: [2, 2, 1, 1]\n    Output: 2\n    Explanation: Segments can be shifted to group similar elements together efficiently.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and performing shifts as needed will handle these cases effectively.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within a given constraint of n shifts. The solution should handle multiple test cases and provide output in a specified format. The focus is on efficiency and correctness rather than minimizing the number of shifts.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Ensure output format matches requirements\n- Optimize for performance across multiple test cases\n- Handle edge cases such as already sorted arrays\n- Provide documentation for the algorithm\nWe will implement a function that sorts an array using cyclic shifts. The function will iterate over the array, identify segments that need to be shifted, and perform the necessary cyclic shifts to sort the array. We will use Python's list slicing capabilities to perform the cyclic shifts efficiently. The solution will handle multiple test cases and ensure the output format is correct.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of an array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sort using cyclic shifts'\n    Explanation: The task is to sort the array by performing cyclic shifts on segments of the array, with the constraint that no more than n shifts are allowed.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means we can perform up to n shifts but not more.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the integer n and the array a.\n    2. Check if the array is already sorted. If it is, output k = 0.\n    3. If not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\n    4. Use list slicing to perform cyclic shifts on identified segments.\n    5. Keep track of the number of shifts and their details (l, r, d).\n    6. Ensure the number of shifts does not exceed n.\n    7. Output the number of shifts and their details for each test case.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with maximum allowed shifts:\n    Input: [4, 3, 2, 1]\n    Output: 4\n    Explanation: Each element needs to be shifted to its correct position, requiring n shifts.\n\n    Test case with repeated elements:\n    Input: [2, 2, 1, 1]\n    Output: 2\n    Explanation: The repeated elements need to be shifted to achieve sorting.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should account for arrays that are already sorted and arrays that require maximum shifts.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within the constraints of the problem. The solution should handle multiple test cases efficiently and provide the correct output format. The focus is on using cyclic shifts to achieve sorting without exceeding the number of allowed operations.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Optimize for performance\n- Provide clear documentation\nWe will implement a function that sorts arrays using cyclic shifts. The approach will involve identifying segments of the array that can be cyclically shifted to move elements into their correct positions. We will use a simple strategy that ensures the number of shifts does not exceed the length of the array. The solution will handle multiple test cases efficiently and provide the correct output format.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of the array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'segment'\n    Explanation: A segment is a contiguous subarray defined by two indices, l and r, which can be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The number of cyclic shifts used to sort the array should not exceed the length of the array, n. This means we can use up to n shifts to achieve sorting.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the array and its length.\n    2. Check if the array is already sorted; if so, output k = 0.\n    3. If not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\n    4. Use a strategy to perform cyclic shifts, ensuring the number of shifts does not exceed n.\n    5. Output the number of shifts and the details of each shift.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with minimum length:\n    Input: [2, 1]\n    Output: 1\n    Explanation: A single shift of the segment [1, 2] by offset 1 will sort the array.\n\n    Test case with repeated elements:\n    Input: [3, 3, 2, 2]\n    Output: 2\n    Explanation: Two shifts are needed to sort the array: first shift [3, 3] by offset 1, then shift [2, 2] by offset 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and using up to n shifts will handle these cases effectively.\n", "requirement analysis:\nThe task requires sorting an array using cyclic shifts, with constraints on the number of shifts. The solution must handle multiple test cases and provide output in a specific format. The challenge lies in efficiently determining the segments and shifts needed to sort the array within the given constraints.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Optimize for performance with large arrays\n- Provide detailed comments and documentation\nWe will implement a function that sorts an array using cyclic shifts. The approach involves identifying segments of the array that can be cyclically shifted to move elements into their correct positions. We will use a simple strategy that iteratively selects segments and shifts them until the array is sorted. The solution will handle multiple test cases efficiently by processing each test case independently and outputting the results in the required format.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of an array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'segment'\n    Explanation: A segment is a contiguous subarray defined by two indices, l and r, which can be cyclically shifted.\n\n# [phrase showing quantity relationship]\n    'no more than n'\n    Explanation: The requirement specifies that the array should be sorted using n or fewer cyclic shifts. This means the number of shifts should not exceed the length of the array.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the array and its length.\n    2. Check if the array is already sorted; if so, output 0.\n    3. If not sorted, identify segments that can be cyclically shifted to move elements into their correct positions.\n    4. Perform cyclic shifts on identified segments, keeping track of the number of shifts.\n    5. Ensure the number of shifts does not exceed n.\n    6. Output the number of shifts and the details of each shift.\n\n# [edge case]\n    Input: [1, 1, 1, 1] = 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Input: [5, 4, 3, 2, 1] = 4\n    Explanation: The array is in reverse order, requiring multiple shifts to sort.\n\n    Input: [1, 2, 3, 4, 5] = 0\n    Explanation: The array is already sorted in ascending order, so no shifts are needed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and performing shifts as needed will handle these cases effectively.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within a given number of operations. The solution should handle multiple test cases efficiently and provide the correct output format. The focus is on ensuring the solution is scalable and meets the constraints provided.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Ensure solution handles up to 1000 test cases\n- Optimize for minimal shift usage\n- Provide clear output format\n- Handle edge cases efficiently\nWe will implement a function that sorts an array using cyclic shifts. The function will iterate over the array and perform cyclic shifts to sort the array. We will use a simple approach that ensures the number of shifts does not exceed the length of the array. The solution will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of an array to the left by a specified offset. This operation allows rearranging elements within a specified range without changing the overall size of the array.\n\n    'sort using cyclic shifts'\n    Explanation: The task is to sort the array by performing a series of cyclic shifts, ensuring that the number of shifts does not exceed the length of the array.\n\n# [phrase showing quantity relationship]\n    'no more than n cyclic shifts'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means that if the array has n elements, you can perform up to n shifts.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the integer n and the array a.\n2. Check if the array is already sorted. If it is, output k = 0 and an empty sequence.\n3. If not sorted, perform cyclic shifts:\n   - Identify segments that can be shifted to bring elements closer to their sorted position.\n   - For each segment, determine the optimal l, r, and d values to perform a left cyclic shift.\n   - Record each shift operation.\n4. Ensure that the total number of shifts does not exceed n.\n5. Output the number of shifts k and the details of each shift for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: [1, 1]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case 2:\n    Input: [3, 2, 1]\n    Output: 2\n    Explanation: \n    - Shift segment [1, 3] by 2: [3, 2, 1] -> [1, 3, 2]\n    - Shift segment [2, 3] by 1: [1, 3, 2] -> [1, 2, 3]\n\n    Test case 3:\n    Input: [5, 4, 3, 2, 1]\n    Output: 4\n    Explanation:\n    - Shift segment [1, 5] by 4: [5, 4, 3, 2, 1] -> [1, 5, 4, 3, 2]\n    - Shift segment [2, 5] by 3: [1, 5, 4, 3, 2] -> [1, 2, 5, 4, 3]\n    - Shift segment [3, 5] by 2: [1, 2, 5, 4, 3] -> [1, 2, 3, 5, 4]\n    - Shift segment [4, 5] by 1: [1, 2, 3, 5, 4] -> [1, 2, 3, 4, 5]\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking if the array is already sorted and performing cyclic shifts as needed will handle these cases effectively.\n", "requirement analysis:\nThe task requires sorting an array using cyclic shifts, with constraints on the number of shifts. The solution must handle multiple test cases and provide output in a specific format. The challenge lies in efficiently determining the segments and shifts needed to sort the array within the given constraints.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Optimize for performance within constraints\n- Provide clear documentation and comments\nWe will implement a function that sorts arrays using cyclic shifts. The approach will involve identifying segments that can be shifted to bring elements into their correct positions. We will use a simple strategy that ensures the number of shifts does not exceed the length of the array. The Python standard library will be sufficient for this task, and we will focus on clarity and correctness.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of an array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sort using cyclic shifts'\n    Explanation: The task is to sort the array by performing cyclic shifts on segments of the array, ensuring the number of shifts does not exceed the length of the array.\n\n# [phrase showing quantity relationship]\n    'no more than n cyclic shifts'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means that for an array of length n, you can perform up to n shifts.\n\n# [degree adverb]\n    'any method'\n    Explanation: This indicates flexibility in choosing any method to sort the array as long as it adheres to the constraint of using no more than n cyclic shifts.\n\n# [code logic]\n1. For each test case, check if the array is already sorted. If it is, output 0 and no actions.\n2. If not sorted, identify segments that can be shifted to bring elements into their correct positions.\n3. Use a strategy to perform cyclic shifts on these segments, ensuring the number of shifts does not exceed n.\n4. Output the number of shifts and the details of each shift (l, r, d).\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with maximum possible shifts:\n    Input: [4, 3, 2, 1]\n    Output: 4\n    Explanation: Each element needs to be shifted into its correct position, requiring multiple shifts.\n\n    Test case with repeated elements:\n    Input: [2, 2, 1, 1]\n    Output: 2\n    Explanation: The repeated elements need careful handling to ensure correct sorting.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be able to handle arrays that are already sorted or require maximum shifts by checking if the array is sorted initially and then applying cyclic shifts as needed.\n", "requirement analysis:\nThe requirement is to sort arrays using cyclic shifts within a given number of operations. The solution should handle multiple test cases and provide output in a specified format. The focus is on efficiency and scalability.\nrequirement pool:\n- Implement cyclic shift sorting algorithm\n- Handle multiple test cases efficiently\n- Ensure output format compliance\n- Optimize for performance\n- Provide detailed documentation\nWe will implement a function that sorts an array using cyclic shifts. The function will iterate over the array, identifying segments that can be shifted to bring the array closer to a sorted state. We will use a simple approach that ensures the number of shifts does not exceed the length of the array. The function will handle multiple test cases and output the results in the specified format. We will use Python's built-in list operations to perform the cyclic shifts efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves rotating a segment of an array to the left by a specified offset, effectively rearranging the elements within that segment.\n\n    'sort using cyclic shifts'\n    Explanation: The task is to sort the array by performing cyclic shifts on segments of the array, ensuring the number of shifts does not exceed the length of the array.\n\n# [phrase showing quantity relationship]\n    'no more than n cyclic shifts'\n    Explanation: The number of cyclic shifts performed to sort the array should not exceed the length of the array, n. This means we can perform up to n shifts.\n\n# [degree adverb]\n    'arbitrary'\n    Explanation: The indices l and r for selecting segments and the offset d for shifting are chosen freely within the given constraints.\n\n# [code logic]\n1. For each test case, read the array and its length.\n2. Check if the array is already sorted; if so, output 0 and no actions.\n3. If not sorted, identify segments that can be shifted to move elements closer to their sorted positions.\n4. Perform cyclic shifts on identified segments, keeping track of the number of shifts.\n5. Ensure the number of shifts does not exceed n.\n6. Output the number of shifts and their details for each test case.\n\n# [edge case]\n    Test case with already sorted array:\n    Input: [1, 2, 3, 4]\n    Output: 0\n    Explanation: The array is already sorted, so no shifts are needed.\n\n    Test case with maximum allowed shifts:\n    Input: [4, 3, 2, 1]\n    Output: 4\n    Explanation: Each element needs to be shifted to its correct position, requiring multiple shifts.\n\n    Test case with repeated elements:\n    Input: [2, 2, 1, 1]\n    Output: 2\n    Explanation: The repeated elements need careful handling to ensure correct sorting.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should be able to handle arrays that are already sorted or require maximum shifts by checking if the array is sorted initially and performing shifts accordingly.\n"], "scores": [], "pass_results": [false, false, true, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 360, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain the descriptions of the test cases. \n\nThe first line of each test case description contains an integer n (2 \u2264 n \u2264 50) \u2014 the length of the array. The second line consists of space-separated elements of the array a_i (-10^9 \u2264 a_i \u2264 10^9). Elements of array a may repeat and don't have to be unique.\n\nOutput\n\nPrint t answers to all input test cases. \n\nThe first line of the answer of each test case should contain an integer k (0 \u2264 k \u2264 n) \u2014 the number of actions to sort the array. The next k lines should contain descriptions of the actions formatted as \"l r d\" (without quotes) where l and r (1 \u2264 l < r \u2264 n) are the boundaries of the segment being shifted, while d (1 \u2264 d \u2264 r - l) is the offset value. Please remember that only the cyclic shifts to the left are considered so the chosen segment will be shifted by the offset d to the to the left.\n\nNote that you are not required to find the minimum number of cyclic shifts needed for sorting. Any sorting method where the number of shifts does not exceed n will be accepted.\n\nIf the given array a is already sorted, one of the possible answers is k = 0 and an empty sequence of cyclic shifts.\n\nIf there are several possible answers, you may print any of them.\n\nExample\n\nInput\n\n\n4\n2\n2 1\n3\n1 2 1\n4\n2 4 1 3\n5\n2 5 1 4 3\n\n\nOutput\n\n\n1\n1 2 1\n1\n1 3 2\n3\n2 4 1\n2 3 1\n1 3 2\n4\n2 4 2\n1 5 3\n1 2 1\n1 3 1\n\nNote\n\nExplanation of the fourth data set in the example: \n\n  1. The segment a[2 \u2026 4] is selected and is shifted to the left by 2: [2, \\color{blue}{5, 1, 4}, 3] \\longrightarrow [2, \\color{blue}{4, 5, 1}, 3] \n  2. The segment a[1 \u2026 5] is then selected and is shifted to the left by 3: [\\color{blue}{2, 4, 5, 1, 3}] \\longrightarrow [\\color{blue}{1, 3, 2, 4, 5}] \n  3. After that the segment a[1 \u2026 2] is selected and is shifted to the left by 1: [\\color{blue}{1, 3}, 2, 4, 5] \\longrightarrow [\\color{blue}{3, 1}, 2, 4, 5] \n  4. And in the end the segment a[1 \u2026 3] is selected and is shifted to the left by 1: [\\color{blue}{3, 1, 2}, 4, 5] \\longrightarrow [\\color{blue}{1, 2, 3}, 4, 5] ", "mutate_method": "add_1_sentence_at_end", "parent_index": 177}
