{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. You may assume the values in array b are always derived from such an array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. You may assume the values in array b are always derived from such an array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers. He listed the sums of all non-empty subsequences of this array. Then, he arranged them in ascending order, and got an array b containing 7 integers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. You may assume the values in array b are always derived from such an array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers, he listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a and only has the array b left. Help him to restore the array a. You may assume the values in array b are always derived from such an array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array of three integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers\n    total_sum = b[-1]\n    # The second smallest element minus a1 gives the second integer\n    a2 = b[1] - a1\n    # The third integer can be deduced from the total sum minus a1 and a2\n    a3 = total_sum - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given array 'b' which contains\n    the sums of all non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty\n                       subsequences of the original array 'a'.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array 'a'.\n    \"\"\"\n    # The smallest element in 'b' is one of the elements of 'a'\n    a1 = b[0]\n    # The largest element in 'b' is the sum of all elements in 'a'\n    sum_a = b[-1]\n    # The second smallest element in 'b' is the sum of two elements of 'a'\n    sum_two = b[1]\n    \n    # Deduce the other two elements\n    a2 = sum_two - a1\n    a3 = sum_a - sum_two\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        sum_a = b[-1]\n        # The second smallest element in b is another element of a\n        a2 = b[1]\n        # The third element of a can be deduced by subtracting the first two identified elements from the largest element\n        a3 = sum_a - a1 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted list of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences of the original array.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a.\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    for _ in range(t):\n        # Read the 7 integers for each test case\n        b = list(map(int, input().split()))\n        # Restore the original array\n        result = restore_array_from_sums(b)\n        # Print the result\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array a from the sorted array b of sums of subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing sums of non-empty subsequences of array a.\n\n    Returns:\n        List[int]: The original array a consisting of three positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    sum_a = b[-1]\n    # The second and third elements in b are the other two elements of a\n    a2 = b[1]\n    a3 = sum_a - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest value in b corresponds to the smallest element in array a\n    a1 = b[0]\n    # The second smallest value in b corresponds to the second smallest element in array a\n    a2 = b[1]\n    # The largest value in b is the sum of all three elements in array a\n    a3 = b[-1] - a1 - a2\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        a_3 = b[-1] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array of three integers from the sorted list of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of an array of three integers.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers\n    a1_a2_a3 = b[6]\n    # The second smallest unique sum is a1 + a2\n    a1_a2 = b[1]\n    # The third smallest unique sum is a1 + a3\n    a1_a3 = b[2]\n    \n    # Calculate a2 and a3 using the known sums\n    a2 = a1_a2 - a1\n    a3 = a1_a3 - a1\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to ensure it is in ascending order\n        b.sort()\n        \n        # The smallest element in b is a_1\n        a_1 = b[0]\n        \n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        \n        # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n        sum_all = b[6]\n        \n        # Calculate a_3 using the formula: a_3 = sum_all - a_1 - a_2\n        a_3 = sum_all - a_1 - a_2\n        \n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array 'a' from the sorted array 'b' of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences of array 'a'.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three positive integers of the original array 'a'.\n    \"\"\"\n    # The smallest element in 'b' is the smallest element in 'a'\n    a1 = b[0]\n    # The second smallest element in 'b' is the second smallest element in 'a'\n    a2 = b[1]\n    # The largest element in 'b' is the sum of all elements in 'a'\n    sum_a = b[-1]\n    # Deduce the third element of 'a' by subtracting the smallest and second smallest elements from the largest element\n    a3 = sum_a - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for multiple test cases\n- Handle large integer values without performance degradation\n- Provide clear and correctly formatted output\n- Optimize for both small and large input values\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. Using these observations, we can efficiently compute the original array. We will use Python's built-in capabilities to handle large integers and ensure the solution is scalable for multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the three integers in array a.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums directly.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the original integers in array a.\n    2. Identify the largest element in array b, which is the sum of all three integers in array a.\n    3. Use the second smallest and second largest elements to deduce the other two integers.\n    4. The three integers can be deduced as follows:\n       - Let a1 be the smallest element in b.\n       - Let a3 be the largest element in b minus a1.\n       - Let a2 be the second smallest element in b minus a1.\n    5. Return the three integers as the result for each test case.\n\n# [edge case] \n    Edge cases are not explicitly defined in the requirement, but we can consider:\n    1. b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n       Explanation: All elements are the same, indicating that all original integers are equal.\n    2. b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n       Explanation: The sequence is strictly increasing with no repeated sums.\n    3. b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n       Explanation: Large numbers with repeated sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the other two integers will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be consistent and clear for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output format\n- Optimize for both performance and clarity\nWe will use a simple mathematical approach to restore the original array 'a' from the given array 'b'. Since 'b' contains the sums of all non-empty subsequences of 'a', we can deduce that the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements in 'a'. By subtracting the smallest element from the largest, we can find the sum of the other two elements. Using these deductions, we can efficiently restore the array 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of three positive integers'\n    Explanation: The original array 'a' contains exactly three integers, all of which are positive.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to one of the elements in array 'a'.\n2. Identify the largest element in array 'b', which is the sum of all three elements in array 'a'.\n3. Subtract the smallest element from the largest to find the sum of the other two elements.\n4. Use the second smallest element in 'b' to identify another element of 'a'.\n5. Deduce the third element of 'a' using the known sums and elements.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element of 'a' is 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The sum of the other two elements is 6. Using other elements in 'b', deduce that 'a' is 1, 2, and 4.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each element of 'a' is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sums and subsequences.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which contains sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output format is strictly followed.\nrequirement pool:\n- Restore array a from array b for each test case\n- Ensure output format matches the requirements\n- Optimize for large numbers and multiple test cases\n- Provide clear documentation for the solution\n- Consider edge cases and ensure robustness\nWe will implement a function that takes the array b as input and calculates the original array a. The key observation is that the smallest element in b is one of the elements of a, and the largest element in b is the sum of all elements of a. By using these observations, we can deduce the values of a. We will use Python's built-in capabilities to handle large numbers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of three positive integers'\n    Explanation: The original array a has exactly three positive integers, which means each element is greater than zero.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty subsequences of an array with three elements include individual elements, pairs of elements, and the entire array.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a has exactly three elements, each greater than zero.\n    \n    '7 integers': indicates that the array b has exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the largest element in b, which is the sum of all three elements in a.\n3. Use the smallest and largest elements to deduce the other two elements by considering the sums that include two elements.\n4. The second smallest element in b is another element of a.\n5. The third element of a can be deduced by subtracting the first two identified elements from the largest element.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in b are derived from an array a where all elements are equal to 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The other two elements can be deduced as 2 and 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are derived from an array a where all elements are equal to 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by identifying the smallest and largest elements and deducing the remaining element(s).\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array for each test case.\nrequirement pool:\n- Develop an algorithm to restore the original array from the given sums.\n- Ensure the solution is efficient for up to 5000 test cases.\n- Handle large integer values up to 10^9.\n- Provide clear and accurate output for each test case.\n- Optimize the solution for scalability and performance.\nWe will implement a function that takes the sorted list of sums of non-empty subsequences and deduces the original array of three integers. The smallest three numbers in the sorted list correspond to the individual elements of the original array. We will use Python's built-in capabilities to handle large integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: In the context of this problem, a non-empty subsequence refers to any subset of the array that includes at least one element. For an array of three elements, there are exactly 7 non-empty subsequences.\n\n    'sorted list'\n    Explanation: The array b is a sorted list of sums of all non-empty subsequences of the original array a.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n    1. The smallest element in b is the smallest element in a.\n    2. The second smallest element in b is the second smallest element in a.\n    3. The third smallest element in b is the third smallest element in a.\n    4. The largest element in b is the sum of all three elements of a.\n    5. Use these observations to deduce the original array a from b.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array is simply three identical numbers.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are the elements of the original array, and their sum is the largest number.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of selecting the smallest three numbers and using their sum to verify will naturally handle these cases.\n", "requirement analysis:\nThe task requires restoring the original array from the given sums of its subsequences. The solution must efficiently handle multiple test cases and large numbers, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given sums\n- Handle multiple test cases efficiently\n- Ensure the solution is scalable for large inputs\n- Provide output in the correct format\n- Optimize for speed and accuracy\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of length 7, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a. Specifically, the three smallest elements in b are the individual elements of a, and the largest element is the sum of these three elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. In this context, it refers to all possible sums of non-empty subsequences of the array a.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a consists of exactly three elements, each greater than zero.\n    '7 integers': indicates that the array b consists of exactly seven elements, derived from the sums of subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    'largest': refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest element in b, which corresponds to one of the elements in a.\n    2. Identify the largest element in b, which is the sum of all three elements in a.\n    3. Use the properties of subsequences to deduce the other two elements of a.\n    4. Return the three elements of a for each test case.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, and their sums are consistent with the properties described.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are individual elements of a, and the largest number is their sum.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sums are consistent with the properties described.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to deduce array a from array b based on the properties of subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and consistent output.\nrequirement pool:\n- Develop a function to restore the original array from subsequence sums\n- Ensure the solution can handle up to 5000 test cases efficiently\n- Optimize the algorithm for large integer values\n- Provide clear documentation and output format\n- Implement error handling for invalid inputs\nWe will implement a function to restore the original array from the given sorted list of sums of its non-empty subsequences. The approach involves identifying the smallest, second smallest, and largest values in the list, which correspond to the individual elements and their combinations. The function will be efficient enough to handle up to 5000 test cases and large integer values. We will use basic Python list operations to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'array a'\n    Explanation: The original array consisting of three positive integers from which the sums of all non-empty subsequences are derived.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb]\n    'smallest', 'second smallest', 'largest'\n    Explanation: These terms refer to the values in the sorted array b, which help identify the individual elements and their combinations in the original array a. The smallest value in b corresponds to the smallest element in a, the second smallest value corresponds to the second smallest element, and the largest value corresponds to the sum of all elements in a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest value in b, which corresponds to one of the elements in array a.\n3. Identify the second smallest value in b, which corresponds to another element in array a.\n4. Identify the largest value in b, which is the sum of all three elements in array a.\n5. Use these identified values to reconstruct array a.\n6. Print the reconstructed array a for each test case.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest two values are 1 and 1, and the largest value is 1000000000. The original array can be reconstructed as [999999998, 1, 1].\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All values are equal, indicating that all elements in array a are equal.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest value is 1, second smallest is 2, and largest is 5. The original array can be reconstructed as [1, 2, 2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for reconstructing array a from b inherently handles these cases by identifying the smallest, second smallest, and largest values.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values. The key is to identify the smallest, second smallest, and largest values in the sorted list to reconstruct the original array.\nrequirement pool:\n- Efficiently process up to 5000 test cases\n- Correctly identify the original array from the subsequence sums\n- Optimize for large integer values\n- Ensure the solution is easy to understand and maintain\n- Provide flexibility in output format if multiple solutions exist\nWe will use the properties of the sorted array b to deduce the original array a. The smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. This allows us to deduce a_3 by subtracting a_1 and a_2 from the largest element. This approach is efficient and straightforward, ensuring we can handle up to 5000 test cases with large integer values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums of subsequences.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this is represented by calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to a_1.\n    2. Identify the second smallest element in b, which corresponds to a_2.\n    3. Identify the largest element in b, which is the sum of a_1, a_2, and a_3.\n    4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1 (a_1), second smallest is 2 (a_2), and largest is 7 (sum of a_1 + a_2 + a_3), so a_3 = 7 - 1 - 2 = 4.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical large numbers, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted array b to deduce array a.\n", "requirement analysis:\nThe task requires restoring an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must be strictly followed to ensure compatibility with test case validation.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid solutions if possible\nWe will implement a function that takes the sorted list of sums of non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest element in the list is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently deduce the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of three positive integers'\n    Explanation: The original array a is composed of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any combination of elements from the array, and non-empty means it includes at least one element. The task involves calculating the sum of each possible non-empty subsequence.\n\n# [phrase showing quantity relationship]\n    'three': Refers to the number of integers in the original array a.\n    '7 integers': Refers to the number of sums in array b, which are derived from all possible non-empty subsequences of array a.\n\n# [degree adverb] \n    'smallest': Refers to the smallest element in array b, which corresponds to one of the original integers in array a.\n    'largest': Refers to the largest element in array b, which is the sum of all three integers in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which is one of the integers in array a.\n2. Identify the largest element in array b, which is the sum of all three integers in array a.\n3. Use the smallest and largest elements to deduce the other two integers by considering the structure of sums:\n   - Let a1 be the smallest element.\n   - Let a1 + a2 be the second smallest unique sum.\n   - Let a1 + a3 be another unique sum.\n   - Let a2 + a3 be another unique sum.\n   - Use these relationships to solve for a2 and a3.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest is 8. Using these, we deduce that the original integers are 1, 4, and 3.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. Using these, we deduce that the original integers are 4, 1, and 2.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are multiples of 300000000, indicating that each integer in array a is equal to this value.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles all possible configurations given the constraints.\n", "requirement analysis:\nThe task is to reconstruct the original array of three integers from the given sorted array of sums of all non-empty subsequences. The constraints ensure that the input is always valid, and there is at least one solution. The solution involves identifying the smallest, second smallest, and the largest number in the array b, which correspond to the individual elements of array a and their combinations.\nrequirement pool:\n- The main code should efficiently reconstruct the array a from the given array b.\n- The solution should handle up to 5000 test cases efficiently.\n- The code should be easy to understand and maintain.\n- The solution should be robust against edge cases within the given constraints.\n- The output format should strictly follow the specified format.\nWe will solve the problem by identifying the smallest, second smallest, and the largest number in the array b, which correspond to the individual elements of array a and their combinations. Specifically, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these, we can deduce the values of a_1, a_2, and a_3.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a consisting of three positive integers'\n    Explanation: The original array a has exactly three positive integers, which are used to generate the array b by summing all non-empty subsequences.\n\n    'sums of all non-empty subsequences'\n    Explanation: This means that every possible combination of the elements in array a, including individual elements and their sums, is considered to form array b.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that array a has exactly three elements, each greater than zero.\n    \n    '7 integers': indicates that array b will always have exactly seven elements, derived from the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b, which corresponds to one of the elements in array a (let's call it a_1).\n3. Identify the second smallest element in b, which corresponds to another element in array a (let's call it a_2).\n4. Identify the largest element in b, which is the sum of all three elements in array a (a_1 + a_2 + a_3).\n5. Calculate the third element of array a (a_3) using the formula: a_3 = (largest element in b) - a_1 - a_2.\n6. Output the three elements a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are derived from the same number repeated, so all elements in a are equal.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest numbers are individual elements, and the largest is their sum.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are derived from the same large number repeated, so all elements in a are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements in b and using them to deduce a_1, a_2, and a_3 will handle these cases correctly.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest values in the sorted subsequence sums to deduce the original integers. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Efficiently deduce the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input values.\n- Provide a user-friendly output format.\n- Include error handling for unexpected input formats.\n- Optimize the solution for minimal memory usage.\nWe will use a straightforward approach to deduce the original array 'a' from the given sorted array 'b'. Since 'b' is derived from all non-empty subsequences of 'a', the smallest element in 'b' is the smallest element in 'a'. The second smallest element in 'b' is the second smallest element in 'a'. The largest element in 'b' is the sum of all elements in 'a'. By subtracting the smallest and second smallest elements from the largest element, we can deduce the third element of 'a'. This approach is efficient and handles the constraints well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of three positive integers'\n    Explanation: The original array 'a' has exactly three elements, all of which are positive integers.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to the smallest element in array 'a'.\n2. Identify the second smallest element in array 'b', which corresponds to the second smallest element in array 'a'.\n3. Identify the largest element in array 'b', which is the sum of all elements in array 'a'.\n4. Deduce the third element of array 'a' by subtracting the smallest and second smallest elements from the largest element.\n5. Return the three elements of array 'a'.\n\n# [edge case] \n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element of 'a' is 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest two elements are 1 and 2, and the sum of all elements is 7. Thus, the third element is 4.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each element of 'a' is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the smallest and largest elements and deducing the third element accordingly.\n"], "scores": [], "pass_results": [false, true, true, false, true, true, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 470, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "add_1_sentence_at_end", "parent_index": 296}
