{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp owned an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array. He sorted them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Assist him to recover the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp owned an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array. He sorted them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Assist him to recover the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp owned an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array. He sorted these sums in ascending order. As a result, he obtained an array b of 7 numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Assist him to recover the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp owned an array a consisting of 3 positive integers, calculated the sums of all non-empty subsequences of this array and sorted them in ascending order to obtain an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Assist him to recover the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the sorted array b of subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[-1]\n        # Calculate a_3 using the equation: a_3 = sum_all - (a_1 + a_2)\n        a_3 = sum_all - (a_1 + a_2)\n        # Append the reconstructed array to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    num_cases = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    # Get the results by reconstructing the arrays\n    results = reconstruct_array(num_cases, test_cases)\n    # Print the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef recover_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Recover the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2_a3 = b[5]\n        \n        # Calculate a2 and a3 using the relationships\n        a2 = sum_a2_a3 - a1\n        a3 = sum_a - sum_a2_a3\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = recover_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef recover_original_array(b: List[int]) -> List[int]:\n    \"\"\"Recover the original array of three integers from the sorted list of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # The largest element in b is the sum of all three original integers\n    a1_a2_a3 = b[6]\n    # Calculate the third integer\n    a3 = a1_a2_a3 - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = recover_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef recover_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Recover the original array of three integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in the original array a\n    a1 = b[0]\n    # The second smallest element in b is the second element in the original array a\n    a2 = b[1]\n    # The largest element in b is the sum of all three elements in the original array a\n    sum_all = b[6]\n    # Deduce the third element by subtracting the smallest and second smallest elements from the largest element\n    a3 = sum_all - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input().strip())\n    for _ in range(t):\n        b = list(map(int, input().strip().split()))\n        result = recover_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef reconstruct_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Reconstructs the original array a from the sorted sums array b.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples, each containing the reconstructed array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Identify a1, a2, and a3 based on the sorted array b\n        a1 = b[0]  # The smallest element in b\n        a2 = b[1]  # The second smallest element in b\n        a3 = b[-1] - a1 - a2  # Deduce a3 from the largest element in b\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Call the function to reconstruct arrays\n    results = reconstruct_array(n, test_cases)\n    # Print results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef recover_original_array(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Recover the original array of three integers from the sorted array of sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences\n           of an array of three positive integers.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements.\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = recover_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef recover_original_array(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Recover the original array of three integers from the sorted list of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three positive integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # The largest element in b is the sum of all three original integers\n    sum_all = b[-1]\n    # Deduce the third integer by subtracting a1 and a2 from the sum of all three integers\n    a3 = sum_all - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = recover_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the sorted list b of sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = reconstruct_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef recover_original_array(b: List[int]) -> List[int]:\n    \"\"\"Recover the original array of 3 positive integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of 3 positive integers.\n\n    Returns:\n        List[int]: The original array of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is the smallest element in the original array a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in the original array a\n    a1_a2_a3 = b[6]\n    # The second and third smallest elements in b are the sums of two elements from the original array a\n    # We need to determine which is a1 + a2 and which is a1 + a3\n    a1_a2 = b[1]\n    a1_a3 = b[2]\n    \n    # Calculate a2 and a3\n    a2 = a1_a2 - a1\n    a3 = a1_a3 - a1\n    \n    # Return the original array\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = recover_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef recover_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Recover the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[list[int]]): List of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        list[tuple[int, int, int]]: List of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is a_2 + a_3\n        a_2_plus_a_3 = b[-2]\n        # Deduce a_2 and a_3\n        a_2 = a_2_plus_a_3 - a_1\n        a_3 = sum_a - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = recover_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and the largest sum in the list, which correspond to the individual elements and their combinations.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from b.\n- Optimize the solution to handle the maximum constraints efficiently.\n- Ensure the solution is well-documented and easy to understand.\n- Test the solution against a variety of test cases, including edge cases.\n- Provide a user-friendly interface for input and output.\nWe will leverage the fact that the smallest element in the sorted list b is the smallest element of the original array a. The second smallest element in b is the second smallest element of a. The largest element in b is the sum of all three elements of a. Using these observations, we can reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in ascending order'\n    Explanation: The subsequences' sums are arranged from the smallest to the largest value.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of each possible combination of elements from the array. In code, this involves iterating through combinations and summing their elements.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in the sorted list b corresponds to the smallest element in the original array a. The largest element in b is the sum of all three elements of a.\n\n# [code logic]\n    1. For each test case, read the sorted array b.\n    2. Identify the smallest element in b as one of the elements of a.\n    3. Identify the second smallest element in b as another element of a.\n    4. Identify the largest element in b as the sum of all three elements of a.\n    5. Use these observations to reconstruct the original array a by solving for the third element using the equation: a_3 = largest - (smallest + second smallest).\n    6. Output the reconstructed array a.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest two elements are both 1, and the largest element is 1000000000. Thus, a_3 = 1000000000 - (1 + 1) = 999999998.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, so each element of a is equal to the smallest element in b.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest two elements are 1 and 2, and the largest element is 5. Thus, a_3 = 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by using the properties of sorted subsequences and their sums.\n", "requirement analysis:\nThe problem requires recovering an array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output must be formatted correctly for each test case.\nrequirement pool:\n- Implement the main algorithm to recover the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for performance with large numbers.\n- Validate the solution against edge cases and multiple test cases.\n- Provide clear documentation and comments in the code.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the elements of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in ascending order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in the sorted array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which is the smallest element in a (let's call it a1).\n2. Identify the largest element in b, which is the sum of all elements in a (a1 + a2 + a3).\n3. Identify the second largest element in b, which is the sum of the two largest elements in a (a2 + a3).\n4. Use these relationships to deduce the values of a2 and a3:\n   - a2 = (second largest element) - a1\n   - a3 = (largest element) - (second largest element)\n5. Return the values of a1, a2, and a3.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest number is 1 (a1), the largest number is 8 (a1 + a2 + a3), and the second largest number is 7 (a2 + a3). Thus, a2 = 7 - 1 = 6, and a3 = 8 - 7 = 1. However, since we need to find three numbers that sum up to these values, we can deduce that a = {1, 4, 3}.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest number is 1 (a1), the largest number is 7 (a1 + a2 + a3), and the second largest number is 6 (a2 + a3). Thus, a2 = 6 - 1 = 5, and a3 = 7 - 6 = 1. However, since we need to find three numbers that sum up to these values, we can deduce that a = {4, 1, 2}.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, indicating that each element of a is equal to one-third of the largest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these cases by leveraging the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires recovering the original array of three integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correctly formatted and easy to interpret.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values up to 10^9\n- Ensure output is correctly formatted for multiple test cases\n- Provide clear documentation and examples\n- Optimize for speed and memory usage\nWe will implement a function that takes the sorted list of subsequence sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted list is one of the original integers, and the largest element is the sum of all three integers. Using these observations, we can efficiently recover the original array. We will use Python's built-in capabilities to handle large integers and multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in ascending order'\n    Explanation: The array of sums is arranged from the smallest to the largest value.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The original array consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The resulting array from the sums of all non-empty subsequences contains exactly seven numbers.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the sorted list `b` of 7 integers.\n2. Identify the smallest element in `b`, which is one of the original integers, say `a1`.\n3. Identify the largest element in `b`, which is the sum of all three original integers, say `a1 + a2 + a3`.\n4. The second smallest element in `b` is another original integer, say `a2`.\n5. Calculate the third integer `a3` using the equation: `a3 = (a1 + a2 + a3) - a1 - a2`.\n6. Return the three integers `a1`, `a2`, and `a3`.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest number is 1, which is one of the original integers. The largest number is 8, which is the sum of all three integers. The second smallest number is 3, which is another original integer. The third integer can be calculated as 8 - 1 - 3 = 4.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All numbers are equal, indicating that all original integers are the same.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest number is 1, and the second smallest number is 2. The largest number is 5, which is the sum of all three integers. The third integer can be calculated as 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of all non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted list to deduce the original array. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Implement the main logic to deduce the original array from the sorted sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the code for readability and maintainability.\n- Include comprehensive test cases to validate the solution.\n- Document the solution approach and edge cases considered.\nWe will solve the problem by identifying the smallest, second smallest, and largest elements in the sorted list of sums to deduce the original array. The smallest element in the list is the smallest element of the original array, the second smallest is the second element, and the largest element is the sum of all three elements. This approach is efficient and straightforward, allowing us to handle up to 5000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in ascending order'\n    Explanation: The sums of the subsequences are arranged from the smallest to the largest value.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted list, which corresponds to the smallest element in the original array a.\n    \n    'largest': Refers to the largest element in the sorted list, which corresponds to the sum of all three elements in the original array a.\n\n# [code logic]\n1. For each test case, read the array b consisting of 7 integers.\n2. Identify the smallest element in b, which corresponds to one of the elements in array a.\n3. Identify the second smallest element in b, which corresponds to another element in array a.\n4. Identify the largest element in b, which is the sum of all three elements in array a.\n5. Deduce the third element by subtracting the smallest and second smallest elements from the largest element.\n6. Output the three elements of array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The original array consists of three identical elements.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, second smallest is 2, and largest is 7. Deduce third element as 7 - (1 + 2) = 4.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical large numbers. The original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for identifying elements based on sorted sums inherently handles these cases.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The key is to identify the smallest, second smallest, and largest elements in the sorted list, which correspond to the individual elements of the original array. The solution must handle up to 5000 test cases efficiently.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Optimize the solution for performance with large input sizes.\n- Ensure the solution is easy to read and maintain.\n- Handle edge cases and validate input constraints.\n- Provide detailed comments and documentation for the code.\nWe will solve the problem by identifying the three integers a1, a2, and a3 from the sorted list of sums b. The smallest element in b is a1, the second smallest is a2, and the largest element is the sum of all three, a1 + a2 + a3. We can then deduce a3 by subtracting a1 and a2 from the largest element.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed, but the order of the remaining elements is preserved. Non-empty subsequences mean that at least one element must be present in each subsequence.\n\n    'sorted in ascending order'\n    Explanation: The sums of the subsequences are arranged from the smallest to the largest value.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': This means calculating the sum of each possible combination of elements from the array, excluding the empty set.\n    Implementation: Iterate through all combinations of the array elements and calculate their sums.\n\n# [degree adverb]\n    'largest': Refers to the largest element in the sorted array b, which represents the sum of all three elements in array a.\n    Implementation: Identify the largest element in array b to deduce a1 + a2 + a3.\n\n# [code logic]\n1. For each test case, read the sorted array b of 7 integers.\n2. Identify a1 as the smallest element in b.\n3. Identify a2 as the second smallest element in b.\n4. Identify a1 + a2 + a3 as the largest element in b.\n5. Deduce a3 by subtracting a1 and a2 from a1 + a2 + a3.\n6. Output the values of a1, a2, and a3.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, leading to repeated sums. The smallest element is 1, and the largest sum is 3 (1+1+1).\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Large identical numbers result in repeated sums. The smallest element is 1000000000, and the largest sum is 3000000000 (1000000000+1000000000+1000000000).\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, second smallest is 2, and largest sum is 7 (1+2+4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly identifies a1, a2, and a3 based on the sorted array b.\n", "requirement analysis:\nThe task requires recovering the original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output should be clear and adhere to the specified format.\nrequirement pool:\n- Develop the main algorithm to recover the original array from the sorted sums.\n- Ensure the solution can handle up to 5000 test cases efficiently.\n- Optimize the algorithm for large integer values.\n- Provide clear and formatted output for each test case.\n- Include error handling for invalid input scenarios.\nWe will implement a function that takes the sorted array of sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements. Using these observations, we can efficiently recover the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in ascending order'\n    Explanation: The sums of the subsequences are arranged from the smallest to the largest value.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'largest': The largest number in array b is the sum of all three integers in array a.\n\n# [code logic]\n    - Identify the smallest three numbers in the sorted array b; these correspond to the individual elements of array a.\n    - The largest number in array b is the sum of all three elements of array a.\n    - Use these observations to deduce the original array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical large numbers. The original array consists of three identical large elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for identifying the smallest three numbers and the largest number in array b will naturally handle these cases.\n", "requirement analysis:\nThe task requires recovering the original array of three integers from the sorted list of sums of all non-empty subsequences. Given the constraints, the solution must efficiently handle up to 5000 test cases and large integer values. The approach involves identifying the smallest, second smallest, and largest values in the sorted list to reconstruct the original array.\nrequirement pool:\n- Implement the algorithm to recover the original array from the subsequence sums\n- Optimize the solution to handle the maximum constraints efficiently\n- Design a user-friendly interface for input and output\n- Provide clear instructions for users on input formatting\n- Ensure the solution is robust against edge cases\nWe will implement a function that takes the sorted list of sums of all non-empty subsequences and reconstructs the original array of three integers. The key observation is that the smallest element in the sorted list is one of the original integers, the second smallest is another, and the largest element is the sum of all three original integers. Using these observations, we can efficiently recover the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in ascending order'\n    Explanation: The array of sums is arranged from the smallest to the largest value.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The original array consists of exactly three integers, each greater than zero.\n    \n    '7 numbers': The resulting array from the sums of all non-empty subsequences will always have exactly seven elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in the sorted list `b`, which corresponds to one of the original integers `a1`.\n2. Identify the second smallest element in `b`, which corresponds to another original integer `a2`.\n3. The largest element in `b` is the sum of all three original integers, `a1 + a2 + a3`.\n4. Use these observations to deduce the third integer `a3` by subtracting `a1` and `a2` from the largest element.\n5. Return the three integers as the reconstructed array.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest two numbers are both 1, and the largest number is 1000000000, which is the sum of all three numbers. Thus, a possible original array is [999999998, 1, 1].\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, indicating that each original integer is the same value.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest number is 1, and the second smallest is 2. The largest number is 5, which is the sum of all three numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest two numbers and using them to find the third number from the largest sum will handle all cases correctly.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a sorted list of sums of its non-empty subsequences. The constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Optimize the solution for performance with large input sizes.\n- Ensure the solution is well-documented and easy to understand.\n- Include comprehensive test cases to validate the solution.\n- Consider edge cases and handle them appropriately.\nWe will implement a function that reconstructs the array a from the sorted list b of sums of its non-empty subsequences. The key observation is that the smallest three numbers in b are the elements of a, and the largest number in b is the sum of all three elements of a. This allows us to deduce the values of a directly from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n# [phrase showing quantity relationship]\n    'sum': The sum of elements in a subsequence. In code, this is implemented using the addition operator.\n\n# [degree adverb]\n    'sorted': The array b is sorted in ascending order, meaning each element is less than or equal to the next. This can be implemented using Python's built-in sorting functions.\n\n# [code logic]\n    1. Identify the smallest three numbers in b, which correspond to the individual elements of a.\n    2. Identify the largest number in b, which is the sum of all three elements of a.\n    3. Use these observations to reconstruct the array a:\n       - Let a1 be the smallest element in b.\n       - Let a2 be the second smallest element in b.\n       - Let a3 be the largest element minus the sum of a1 and a2.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each element in a is 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers. Each element in a is 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number will suffice for all cases.\n", "requirement analysis:\nThe task requires recovering the original array of three integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and clear output for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large integer values and multiple test cases\n- Ensure output clarity and accuracy\n- Optimize for performance with large inputs\n- Provide detailed documentation for the solution\nWe will leverage the properties of subsequences and their sums to recover the original array. Given the sorted array b of 7 numbers, the smallest number is the smallest element of the original array a. The largest number is the sum of all elements of a. By using these properties, we can deduce the original array efficiently. We will use Python's built-in capabilities to handle large integers and multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in ascending order'\n    Explanation: The array b is sorted in increasing order, which helps in identifying the smallest and largest sums directly.\n\n# [phrase showing quantity relationship]\n    '3 positive integers'\n    Explanation: The original array a consists of exactly three positive integers.\n\n    '7 numbers'\n    Explanation: The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest number in array b is the smallest element in array a.\n\n    'largest'\n    Explanation: The largest number in array b is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the sorted array b of 7 integers.\n2. Identify the smallest element of a as the first element of b.\n3. Identify the sum of all elements of a as the last element of b.\n4. Use the properties of subsequences to deduce the remaining elements:\n   - Let a1 be the smallest element (b[0]).\n   - Let a1 + a2 be one of the next smallest sums (b[1] or b[2]).\n   - Let a1 + a3 be another small sum (b[1] or b[2], whichever is not used for a1 + a2).\n   - Calculate a2 and a3 using these sums.\n5. Output the three integers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest sum is 8. Using these, we deduce that the original array is {1, 4, 3}.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array consists of three identical elements.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, and using the properties of subsequences, we deduce that the original array is {1, 2, 2}.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles all possible configurations due to the constraints and properties of subsequences.\n", "requirement analysis:\nThe problem requires recovering the original array of three integers from the sorted sums of its non-empty subsequences. Given the constraints, the solution must efficiently handle up to 5000 test cases and large integer values. The output must be formatted correctly to match the expected results.\nrequirement pool:\n- Recover the original array from the sorted subsequence sums\n- Ensure the solution is efficient for large numbers and multiple test cases\n- Format the output correctly for each test case\n- Optimize the solution for scalability\n- Provide clear documentation for the solution\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'sorted in ascending order'\n    Explanation: The array b is sorted such that its elements are in increasing order, which helps in identifying the smallest and largest sums.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in array b represents the sum of all elements in array a. This helps us identify the total sum of the original array.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b is the smallest element of array a. This is crucial for reconstructing the original array.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Use the properties of subsequences to deduce the remaining elements of a:\n   - The second smallest element in b can be either a_1 + a_2 or a_1 + a_3.\n   - The second largest element in b can be either a_2 + a_3 or a_1 + a_2 + a_3.\n4. Deduce a_2 and a_3 using these relationships.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest element is 1, and the largest element is 1000000000. The second smallest element is also 1, indicating repetition. The second largest element is 999999999, which helps deduce the other elements.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, indicating that all elements of a are the same.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = [1, 2, 2]\n    Explanation: The smallest element is 1 and the largest is 5. The repetition of sums helps identify the other elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing elements from sorted subsequences inherently handles these cases.\n"], "scores": [], "pass_results": [true, true, false, true, true, false, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 693, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 347}
