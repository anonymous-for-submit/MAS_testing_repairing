{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya has received an intriguing flower, and being a busy individual, he occasionally forgets to water it, and you are given n days from Petya's life to ascertain what occurred with his flower in the end. The flower grows as follows: * If the flower isn't watered for two consecutive days, it dies. * If the flower is watered on the i-th day, it increases by 1 centimeter in height. * If the flower is watered on the i-th and on the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. * If the flower is not watered on the i-th day, it does not grow. At the beginning of the 1-st day, the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya has received an intriguing flower, and being a busy individual, he occasionally forgets to water it, and you are given n days from Petya's life to ascertain what occurred with his flower in the end. The flower grows as follows: * If the flower isn't watered for two consecutive days, it dies. * If the flower is watered on the i-th day, it increases by 1 centimeter in height. * If the flower is watered on the i-th and on the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. * If the flower is not watered on the i-th day, it does not grow. At the beginning of the 1-st day, the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has received an intriguing flower, and being a busy individual, he occasionally forgets to water it. You are given n days from Petya's life to ascertain what occurred with his flower in the end. The flower grows as follows: * If the flower isn't watered for two consecutive days, it dies. * If the flower is watered on the i-th day, it increases by 1 centimeter in height. * If the flower is watered on the i-th and on the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. * If the flower is not watered on the i-th day, it does not grow. At the beginning of the 1-st day, the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya has received an intriguing flower, and being a busy individual, he occasionally forgets to water it, and you are given n days from Petya's life to ascertain what occurred with his flower in the end. The flower grows as follows: * If the flower isn't watered for two consecutive days, it dies. * If the flower is watered on the i-th and on the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. * If the flower is not watered on the i-th day, it does not grow. At the beginning of the 1-st day, the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(case)):\n            if case[i] == 1:\n                if i > 0 and case[i-1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1\n        died = False\n        n = len(days)\n        \n        for i in range(n):\n            if i > 0 and days[i] == 0 and days[i-1] == 0:\n                height = -1\n                died = True\n                break\n            elif i > 0 and days[i] == 1 and days[i-1] == 1:\n                height += 4\n            elif days[i] == 1:\n                height += 1\n        \n        results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the height of the flower after n days based on watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing n followed by n integers representing watering days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = case[0]\n        watering_days = case[1:]\n        \n        height = 1  # Initial height of the flower\n        consecutive_watering = False  # Track if the previous day was watered\n        consecutive_no_water = 0  # Track consecutive days without water\n        \n        for day in watering_days:\n            if day == 1:\n                if consecutive_watering:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_watering = True\n                consecutive_no_water = 0\n            else:\n                consecutive_no_water += 1\n                if consecutive_no_water == 2:\n                    height = -1\n                    break\n                consecutive_watering = False\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_days = list(map(int, input().split()))\n        test_cases.append([n] + watering_days)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of integers\n                    representing the watering pattern over n days.\n\n    Returns:\n        A list of integers where each integer is the final height of the flower\n        after n days, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False\n        flower_dead = False\n        \n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n            else:\n                if not previous_day_watered:\n                    flower_dead = True\n                    break\n                previous_day_watered = False\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower after n days based on the watering pattern.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0  # Counter for consecutive unwatered days\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Increase by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Increase by 1 cm if watered on a single day\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    number_of_test_cases = int(input())\n    test_cases = []\n    \n    for _ in range(number_of_test_cases):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(number_of_test_cases, test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_watered = False\n        flower_dead = False\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5\n                else:\n                    height += 1\n                consecutive_days_watered = True\n            else:\n                if i > 0 and watering_pattern[i - 1] == 0:\n                    flower_dead = True\n                    break\n                consecutive_days_watered = False\n        \n        if flower_dead:\n            results.append(-1)\n        else:\n            results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Growth by 5 cm for consecutive watering\n                else:\n                    height += 1  # Growth by 1 cm for single day watering\n                consecutive_days_without_water = 0\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n\n        for day in case:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                previous_day_watered = True\n            else:\n                if not previous_day_watered:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    flower_died = True\n                    break\n                previous_day_watered = False\n\n        results.append(height)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n\n    # Output interface\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case.\n                   If the flower dies, the height is -1.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i in range(len(watering_pattern)):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower based on watering conditions over a series of days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n, days = case[0], case[1]\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if days[i] == 1:\n                if i > 0 and days[i-1] == 1:\n                    height += 5  # Growth due to consecutive watering\n                else:\n                    height += 1  # Growth due to single day watering\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append([n, a])\n    \n    # Call the function and print results\n    results = flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower over n days based on watering patterns. The key challenge is to accurately calculate the height or determine if the flower dies, while efficiently handling multiple test cases.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program can handle up to 100 test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the algorithm for edge cases like consecutive days without watering.\n- Enhance user experience with intuitive input and output handling.\nWe will implement a function to simulate the growth of a flower over n days based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use a simple loop to handle the sequence of days and conditions to check for consecutive days without watering, which results in the flower dying. The solution will efficiently handle up to 100 test cases as specified.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules, and it can die if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates that if the flower is not watered for two days in a row, it dies. In code, this can be implemented by checking if two consecutive elements in the list are 0.\n    'increases by 1 centimeter': When watered on a single day, the flower grows by 1 cm. This can be implemented by adding 1 to the height when a 1 is encountered in the list.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1. This can be implemented by checking if two consecutive elements are 1 and adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start.\n    - Iterate through each test case:\n        - For each day in the test case:\n            - If the current day and the previous day are both watered (both 1), increase height by 5 cm.\n            - If only the current day is watered, increase height by 1 cm.\n            - If two consecutive days are not watered (both 0), set height to -1 and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, causing it to die. The output is -1.\n\n    Test case: [1, 1, 0, 0] = -1\n    Explanation: The flower grows by 5 cm on the first two days due to consecutive watering but dies after two consecutive days without water. The output is -1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering leading to the flower's death.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over n days based on watering patterns. The key challenge is to accurately calculate the height of the flower while efficiently handling multiple test cases. The program must also account for scenarios where the flower dies due to consecutive days without watering.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering patterns.\n- Ensure the program can handle multiple test cases efficiently.\n- Provide clear output indicating the flower's height or if it dies.\n- Optimize the code for performance with large inputs.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower over n days based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use simple list operations to handle the input and output efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days.\n\n    'consecutive days'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list of watering patterns.\n    \n    'increases by 1 centimeter': If the flower is watered on a single day, it grows by 1 cm. This can be implemented by adding 1 to the height for each day with a value of 1.\n    \n    'grows by 5 centimeters': If the flower is watered on two consecutive days, it grows by 5 cm instead of 1. This can be implemented by checking for consecutive ones and adding 5 to the height.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start.\n2. Iterate through each test case:\n   - For each day in the test case, check the watering pattern.\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a single day, increase the height by 1 cm.\n   - If the flower is watered on two consecutive days, increase the height by 5 cm.\n3. Output the final height for each test case.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower is watered on the first two days (grows by 5 cm), not watered on the third day, and watered again on the fourth day (grows by 1 cm), resulting in a total height of 8 cm.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef simulate_flower_growth(test_cases):\n    results = []\n    for n, days in test_cases:\n        height = 1\n        died = False\n        for i in range(n):\n            if i > 0 and days[i] == 0 and days[i-1] == 0:\n                height = -1\n                died = True\n                break\n            elif i > 0 and days[i] == 1 and days[i-1] == 1:\n                height += 4\n            elif days[i] == 1:\n                height += 1\n        results.append(height)\n    return results\n```\n", "requirement analysis:\nThe problem requires calculating the height of a flower over a series of days based on watering patterns. The key conditions are: the flower dies if not watered for two consecutive days, grows by 1 cm if watered on a single day, and grows by 5 cm if watered on consecutive days. The solution must handle multiple test cases and provide the correct height or indicate if the flower dies.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering pattern.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the solution for performance with maximum constraints.\n- Validate input to ensure it meets the problem constraints.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to calculate the height of the flower based on the watering pattern over n days. The function will iterate through the list of watering days, updating the height according to the rules provided. We will use simple list operations and conditionals to handle the logic efficiently. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not, with specific rules for consecutive watering days and consecutive non-watering days.\n\n    'consecutive days'\n    Explanation: This refers to two or more days in a row. In this context, it affects both the growth and potential death of the flower.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential zeros in the input list.\n    \n    'increases by 1 centimeter': If watered on a single day, the height increases by 1 cm.\n    \n    'increases by 5 centimeters': If watered on two consecutive days, the height increases by 5 cm instead of 1 cm.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm.\n2. Iterate through each test case:\n   - For each day in the test case, check if the flower is watered (a_i = 1) or not (a_i = 0).\n   - If a_i = 0 and the previous day was also 0, set the height to -1 (flower dies) and break out of the loop.\n   - If a_i = 1 and the previous day was also 1, increase the height by 5 cm.\n   - If a_i = 1 and the previous day was not 1, increase the height by 1 cm.\n3. After processing all days in a test case, store the final height or -1 if the flower died.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: [0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 0] = -1\n    Explanation: The flower grows to 6 cm after two consecutive watering days but dies after two consecutive non-watering days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days leading to the flower's death and handles single-day watering correctly.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately calculate the height of the flower while considering the conditions that lead to its death. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement logic to calculate flower height based on watering pattern.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating flower height or death.\n- Optimize performance for large number of test cases.\n- Enhance user interface for better input and output readability.\nWe will implement a function that simulates the growth of a flower over n days based on the watering pattern provided. The function will iterate through each day, updating the flower's height according to the rules specified. If the flower is not watered for two consecutive days, it will be marked as dead, and the function will return -1 for that test case. We will use a simple loop to process each test case and maintain a list to store the results. The solution will be efficient enough to handle the maximum constraints given the problem size.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules, and it can die if not watered properly.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with no watering (0, 0) in the list.\n    'increases by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case:\n        - If the flower is watered (a_i = 1), check if it was also watered the previous day:\n          - If yes, increase height by 5 cm.\n          - If no, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0), check if it was also not watered the previous day:\n          - If yes, mark the flower as dead and return -1 for this test case.\n      - Store the final height or -1 in the results list.\n    - Return the results for all test cases.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the first day, but it doesn't die because it requires two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day, but then not watered for two consecutive days, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering, then doesn't grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements specify a need to calculate the flower's height based on watering patterns over n days. The solution must handle multiple test cases and provide accurate results, including identifying when the flower dies due to consecutive days without watering.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the solution for edge cases like consecutive days without watering.\n- Provide clear output format as specified in the requirements.\n- Enhance user experience with informative error messages if input is invalid.\nWe will implement a function to calculate the flower's height based on the watering pattern over n days. The function will iterate through each test case, checking the watering pattern and updating the flower's height accordingly. If the flower is not watered for two consecutive days, it will be marked as dead. We will use a simple loop and conditionals to handle the logic, ensuring the solution is efficient for up to 100 test cases. The function will return the final height or -1 if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on its watering pattern over a series of days. The flower's height changes depending on whether it is watered or not.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is either watered or not. Specifically, if the flower is not watered for two consecutive days, it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two successive zeros in the watering pattern.\n    \n    'increases by 1 centimeter': If the flower is watered on a single day, it grows by 1 cm. This can be implemented by adding 1 to the height when a 1 is encountered in the pattern.\n    \n    'increases by 5 centimeters': If the flower is watered on two consecutive days, it grows by 5 cm instead of 1. This can be implemented by checking for two successive ones and adding 5 to the height.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the watering pattern:\n   - If the current day and the previous day are both watered (i.e., both are 1), increase the height by 5 cm.\n   - If only the current day is watered, increase the height by 1 cm.\n   - If two consecutive days are not watered, mark the flower as dead and break out of the loop.\n3. After processing all days, if the flower is not dead, return its final height; otherwise, return -1.\n\n# [edge case] \n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0 0\n    Output: -1\n    Explanation: The flower grows by 5 cm on the first two days but dies after not being watered for two consecutive days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without water and handles them appropriately.\n", "requirement analysis:\nThe task requires implementing a function to simulate the growth of a flower over n days based on watering patterns. The flower's growth rules are straightforward but require careful handling of consecutive days without watering, which results in the flower's death. The solution must efficiently handle up to 100 test cases, each with up to 100 days of data.\nrequirement pool:\n- Implement the flower growth simulation algorithm.\n- Ensure the program handles multiple test cases correctly.\n- Optimize the solution for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\n- Include additional test cases for edge scenarios.\nWe will implement a function to simulate the flower's growth over n days based on the watering pattern provided. The function will iterate through each test case, checking the watering status for each day and applying the growth rules accordingly. If the flower is not watered for two consecutive days, it will be marked as dead. The function will handle multiple test cases efficiently using loops and conditional statements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (represented by 1) or not watered (represented by 0).\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This means checking for two successive zeros in the watering pattern.\n    Implementation: Use a loop to check if there are two consecutive zeros in the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the height of the flower to 1 cm at the start.\n    2. Iterate through each test case:\n        - For each day in the test case, check the watering status.\n        - If the flower is watered on consecutive days, increase height by 5 cm.\n        - If watered on a single day, increase height by 1 cm.\n        - If not watered for two consecutive days, mark the flower as dead and set height to -1.\n    3. Return the final height for each test case.\n\n# [edge case]\n    Test case with all zeros: [0, 0, 0] = -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case with alternating pattern: [1, 0, 1, 0] = 3\n    Explanation: The flower grows by 1 cm on each watered day, no consecutive watering occurs.\n\n    Test case with single day: [0] = 1\n    Explanation: The flower is not watered but does not die as there are no two consecutive days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive zeros and handling single days appropriately.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over n days. The key challenge is to accurately determine the flower's height or its demise due to consecutive days without water. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the growth calculation logic based on watering patterns.\n- Ensure the program handles multiple test cases efficiently.\n- Provide clear output indicating the flower's height or death.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the watering pattern over n days. The function will iterate through the days, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The solution will be implemented in a single file, main.py, using basic Python constructs without any additional libraries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not. It grows by 1 cm if watered on a single day, by 5 cm if watered on two consecutive days, and does not grow if not watered. If not watered for two consecutive days, it dies.\n\n    'consecutive days'\n    Explanation: This refers to two days in a row. If the flower is not watered for two consecutive days, it dies.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': This indicates a sequence of two days in a row. In code, this can be checked by iterating through the list of days and checking pairs of consecutive elements.\n    \n    'grows by 5 centimeters instead of 1': This means that if the flower is watered on two consecutive days, the growth is 5 cm instead of the usual 1 cm. In code, this can be implemented by checking if both the current and previous day are watered and then adding 5 to the height.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start.\n2. Iterate through each test case:\n   - For each day in the test case, check if the flower is watered.\n   - If watered on a single day, increase height by 1 cm.\n   - If watered on two consecutive days, increase height by 5 cm.\n   - If not watered for two consecutive days, set height to -1 (flower dies) and break out of the loop.\n3. Output the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered on the only day, but it does not die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 1 0\n    Output: 2\n    Explanation: The flower is watered on the first day (grows to 2 cm) and not watered on the second day, but it does not die because it needs two consecutive days without water to die.\n\n    Test case: 3\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for two consecutive days without water and adjusting the height accordingly.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on specific watering rules. The main challenge is to correctly implement the growth and death conditions and handle multiple test cases efficiently. The output must strictly follow the specified format, and edge cases such as consecutive non-watering days leading to the flower's death must be handled accurately.\nrequirement pool:\n- Implement the flower growth algorithm based on watering rules.\n- Ensure the program can handle multiple test cases.\n- Optimize the algorithm for performance with maximum input size.\n- Provide clear and formatted output as specified.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of a flower over a series of days based on specific watering rules. The function will handle multiple test cases efficiently by iterating through each test case and applying the growth rules. We will use simple list operations to track the watering pattern and calculate the flower's height. The function will also check for consecutive non-watering days to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern over n days. It grows by 5 cm if watered on consecutive days, by 1 cm if watered on a single day, and does not grow if not watered. It dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower is not watered for two consecutive days, it dies. This can be implemented by checking pairs of days in the list.\n    'grows by 5 centimeters instead of 1': If watered on consecutive days, the flower grows by 5 cm instead of the usual 1 cm. This requires checking for consecutive 1s in the list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case, check the watering pattern:\n        - If the current day and previous day are both watered (1), increase height by 5 cm.\n        - If only the current day is watered, increase height by 1 cm.\n        - If the current day is not watered, check if the previous day was also not watered. If so, set height to -1 (flower dies) and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it does not die because there are no two consecutive unwatered days.\n    \n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n    \n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive unwatered days and adjusts growth accordingly.\n", "requirement analysis:\nThe task requires implementing a function to calculate the height of a flower over a series of days based on watering patterns. The function must handle multiple test cases and account for conditions where the flower dies if not watered for two consecutive days. The output must be formatted correctly for each test case.\nrequirement pool:\n- Implement the main logic to calculate flower height based on watering pattern.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the solution for performance with maximum constraints.\n- Validate input to ensure it meets the specified constraints.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function that iterates through the watering pattern for each test case. The function will track the height of the flower and check for consecutive days without watering to determine if the flower dies. We will use a simple loop and conditionals to handle the growth and death conditions. The function will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by the watering pattern over n days. It grows by 5 cm if watered on consecutive days, by 1 cm if watered on a single day, and does not grow if not watered. It dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower is not watered for two consecutive days, it dies. This can be implemented by checking if two consecutive elements in the list are 0.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm. This can be implemented by checking if two consecutive elements in the list are 1.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm. This can be implemented by checking if an element in the list is 1 and the previous day was not watered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start of each test case.\n    - Iterate through the list of watering patterns:\n        - If two consecutive days are not watered (two 0s in a row), set height to -1 and break the loop.\n        - If two consecutive days are watered (two 1s in a row), increase height by 5 cm.\n        - If a single day is watered (1), increase height by 1 cm.\n    - Return the final height for each test case.\n\n# [edge case]\n    Input: 1\n           0\n    Output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but it does not die because there is only one day.\n\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower dies because it is not watered for two consecutive days.\n\n    Input: 3\n           1 0 0\n    Output: -1\n    Explanation: The flower grows to 2 cm on the first day but dies because it is not watered for two consecutive days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking consecutive days without watering and adjusting the height accordingly.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The main challenge is to correctly implement the growth rules and handle cases where the flower dies due to consecutive days without water. The solution must efficiently process multiple test cases and provide accurate results.\nrequirement pool:\n- Implement the flower growth simulation based on watering rules.\n- Handle multiple test cases and provide correct output for each.\n- Optimize the solution for performance with up to 100 test cases.\n- Ensure the code is easy to read and maintain.\n- Include comments to explain the logic and flow of the program.\nWe will implement a function to simulate the flower's growth based on the given watering rules. The function will iterate over the days, updating the flower's height according to whether it is watered or not. We will use a simple loop to handle multiple test cases efficiently. The function will check for consecutive days without water to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering conditions over a series of days.\n\n    'consecutive days'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two consecutive days': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list of days.\n    \n    'increases by 1 centimeter': If watered on a single day, the flower grows by 1 cm. Implemented by adding 1 to the height when a 1 is encountered.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1. Implemented by adding 5 to the height when two consecutive 1s are encountered.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start.\n    - Iterate through each test case:\n        - For each day, check if the flower is watered (1) or not (0).\n        - If watered, check if the previous day was also watered to determine growth (5 cm if consecutive, otherwise 1 cm).\n        - If not watered, check if the previous day was also not watered to determine if the flower dies (-1).\n        - Continue updating the height based on these conditions.\n    - Return the final height or -1 if the flower dies.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it does not die because there are no two consecutive days without water.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), does not grow on the third day, and grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers consecutive days without water and handles them appropriately.\n"], "scores": [], "pass_results": [true, false, false, false, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 739, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "rephrase_one", "parent_index": 469}
