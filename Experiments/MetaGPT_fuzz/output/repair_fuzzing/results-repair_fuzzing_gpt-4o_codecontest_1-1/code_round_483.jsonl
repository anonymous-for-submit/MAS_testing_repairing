{"name": "1591_F. Non-equal Neighbours", "description": "You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that: \n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and \n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). \n\n\n\nThe number of such arrays can be very large, so print it modulo 998 244 353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].", "tags": ["combinatorics", "data structures", "dp", "math"], "difficulty": 12, "id": 1591, "sample_io": [{"input": "3\n1 1 1\n", "output": ["0"]}, {"input": "2\n2 3\n", "output": ["4"]}, {"input": "3\n2 2 2\n", "output": ["2"]}], "test_list": [{"input": "1\n1000000000\n", "output": ["1755647"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["558513243"]}, {"input": "10\n10 10 7 9 8 3 3 10 7 3\n", "output": ["24763644"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["718512763\n"]}, {"input": "3\n2 1 1\n", "output": ["0\n"]}, {"input": "3\n4 2 2\n", "output": ["6\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["87686619\n"]}, {"input": "3\n2 2 1\n", "output": ["1\n"]}, {"input": "3\n4 2 3\n", "output": ["12\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["285122535\n"]}, {"input": "3\n4 2 6\n", "output": ["30\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["545014433\n"]}, {"input": "3\n1 2 6\n", "output": ["5\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["360285379\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["89495517\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["469650540\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["370736857\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["445730939\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["921294799\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["414690183\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["51240613\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["141209239\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["200471450\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 170 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["100240726\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["228126328\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 59 1 96 87 83 29 21 41 22\n", "output": ["213571064\n"]}, {"input": "10\n10 10 7 9 8 3 3 10 7 5\n", "output": ["41385816\n"]}, {"input": "2\n2 5\n", "output": ["8\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 143 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["653041901\n"]}, {"input": "3\n8 2 2\n", "output": ["14\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["705001937\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["673298806\n"]}, {"input": "3\n7 2 6\n", "output": ["60\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["902014388\n"]}, {"input": "3\n1 4 6\n", "output": ["15\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["779349856\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["106830678\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["729851078\n"]}, {"input": "100\n23 39 85 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["292419933\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 40 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["97463527\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["289738077\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["882495350\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["483820379\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["5228742\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["920479892\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 170 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 6 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["315849739\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["469671321\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 59 1 96 87 83 29 21 41 22\n", "output": ["372540891\n"]}, {"input": "10\n10 10 7 9 4 3 3 10 7 5\n", "output": ["17787600\n"]}, {"input": "2\n2 10\n", "output": ["18\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["598608508\n"]}, {"input": "3\n8 2 4\n", "output": ["42\n"]}, {"input": "100\n23 39 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["728085744\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["852869444\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["732213280\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["958631168\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["642492635\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 102 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["991595446\n"]}, {"input": "100\n23 39 85 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["967606999\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["455851978\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["208172902\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["822724779\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["192155988\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["844774035\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["248900717\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["555539977\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 22\n", "output": ["988554467\n"]}, {"input": "10\n10 10 7 15 4 3 3 10 7 5\n", "output": ["32729184\n"]}, {"input": "2\n2 6\n", "output": ["10\n"]}, {"input": "3\n1 3 2\n", "output": ["3\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["461278736\n"]}, {"input": "3\n8 2 5\n", "output": ["56\n"]}, {"input": "100\n23 39 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["329813604\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["516900758\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["713610799\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["901058285\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["588482740\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["633885419\n"]}, {"input": "100\n23 39 85 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["81997207\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 54 29 21 41 22\n", "output": ["480680032\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 97 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["227236709\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["605941910\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["317837051\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["133389964\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["419760254\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["934658563\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 22\n", "output": ["855852873\n"]}, {"input": "10\n10 10 7 15 4 3 3 7 7 5\n", "output": ["20656944\n"]}, {"input": "3\n1 5 2\n", "output": ["7\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 41 22\n", "output": ["153546810\n"]}, {"input": "3\n7 2 5\n", "output": ["48\n"]}, {"input": "100\n23 39 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["505050061\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["182671371\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["224288551\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["867164784\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 44 22\n", "output": ["332591913\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["731679464\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["146916844\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 54 29 21 41 22\n", "output": ["944706563\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 97 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["184873325\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 63 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["111563089\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["995650057\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["935655766\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["88170853\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 15 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["254096928\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 22\n", "output": ["571291489\n"]}, {"input": "10\n10 10 7 14 4 3 3 7 7 5\n", "output": ["19085220\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["355306089\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["688465638\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 5 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["678152365\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["976792414\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 93 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["322011901\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["412651438\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 42 30 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["198537403\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 108 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["565839205\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 54 29 21 41 22\n", "output": ["867302506\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["484215409\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 63 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["375600460\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 96 161 111 29 21 41 22\n", "output": ["895087751\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 40 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["584645713\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["709282325\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 70 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["670242821\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["90409100\n"]}, {"input": "10\n10 10 7 14 4 3 3 7 11 5\n", "output": ["33956820\n"]}, {"input": "2\n7 6\n", "output": ["36\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["553775197\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 18 8 40 24 61 12 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["107399434\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 5 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["973852033\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 83 29 21 41 22\n", "output": ["998126790\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["965895703\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["666165613\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["24264123\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["372619075\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["7807144\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 24 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["649696079\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 63 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["600170187\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 20 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["961023126\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 97 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["951846570\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 35 1 96 161 83 29 4 41 22\n", "output": ["331922767\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["287740311\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 37 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["399115642\n"]}, {"input": "10\n10 13 7 14 4 3 3 7 11 5\n", "output": ["46533420\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["129191858\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 4 8 40 24 61 12 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["694511358\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 5 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["410344351\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 83 29 21 41 22\n", "output": ["637412028\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["770297946\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["720547620\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["184835118\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["647251059\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["78683600\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 8 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["724006256\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 81 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["627339548\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 3 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["434521061\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 62 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["812802852\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 86 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 18 1 96 161 83 29 4 41 22\n", "output": ["584894763\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 7 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 29 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["538125641\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 74 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["242550124\n"]}, {"input": "10\n14 13 7 14 4 3 3 7 11 5\n", "output": ["65398320\n"]}, {"input": "100\n23 39 85 46 97 113 41 70 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["292664386\n"]}, {"input": "100\n23 44 85 46 97 72 41 47 37 4 8 40 24 61 20 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["622951499\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 9 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["894004123\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 120 29 21 41 22\n", "output": ["557821120\n"]}, {"input": "100\n23 39 85 46 118 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["178410744\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 38 51 86 37 42 58 47 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["827890758\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 11 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["953441508\n"]}, {"input": "100\n23 39 20 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 53 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["95715949\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 82 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 14 61 18 24 21 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["255131888\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 57 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 8 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["71115463\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 81 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 63 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["408733195\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 15 6 68 24 97 61 31 78 18 45 88 6 43 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 3 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["672398298\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 62 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 36 57 3 37 15 24 74 32 3 71 93 4 66 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["410977795\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 87 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 18 1 96 161 83 29 4 41 22\n", "output": ["383288115\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 7 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 31 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 17 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["930102680\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 74 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 3 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 83 29 21 41 32\n", "output": ["470391907\n"]}, {"input": "10\n14 13 7 14 4 5 3 7 11 5\n", "output": ["141696360\n"]}, {"input": "2\n12 3\n", "output": ["33\n"]}, {"input": "100\n23 39 85 46 97 113 41 59 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["760404853\n"]}, {"input": "100\n23 44 85 46 97 72 41 20 37 4 8 40 24 61 20 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 93 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["639299422\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 92 61 66 85 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 9 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["616383833\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 8 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 120 29 21 41 22\n", "output": ["609137950\n"]}, {"input": "100\n23 39 85 46 118 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 71 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["650617595\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 48 51 86 37 42 58 47 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 87 22\n", "output": ["613223673\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 11 91 82 56 10 6 68 24 97 27 31 78 18 45 88 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["50873118\n"]}, {"input": "100\n23 39 33 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 53 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["123748946\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 77 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 14 61 18 24 21 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["652065060\n"]}, {"input": "100\n23 39 85 46 60 72 41 70 37 18 8 57 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 26 30 14 91 82 56 10 6 68 24 184 61 51 78 18 45 88 6 37 38 51 86 37 32 58 30 79 56 50 14 61 18 8 20 57 6 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 47 31 8 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["237513219\n"]}, {"input": "100\n23 39 85 46 97 72 38 70 37 18 8 40 24 81 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 4 23 48 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 43 37 32 58 30 79 56 50 14 61 18 24 20 108 3 93 15 24 74 63 3 71 93 4 66 20 82 75 10 86 41 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["137738047\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 26 19 30 14 14 82 56 15 6 68 24 97 61 31 78 18 45 88 6 16 38 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 3 71 93 4 127 3 82 51 10 86 82 30 31 6 49 15 33 100 35 1 98 161 111 29 21 41 22\n", "output": ["550954013\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 20 61 12 79 51 148 61 66 85 62 7 14 70 47 100 47 15 40 24 52 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 7 32 58 30 79 56 50 14 61 18 24 36 57 3 37 15 24 74 32 3 71 93 4 77 20 82 37 10 86 82 19 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["679579369\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 22 61 12 79 51 148 61 66 85 97 36 14 70 47 100 40 15 40 23 10 19 30 14 14 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 37 51 87 7 32 58 30 79 56 50 14 107 18 24 20 57 3 37 15 24 74 32 3 71 93 4 66 20 60 75 10 86 64 30 31 6 49 15 33 100 18 1 96 161 83 29 4 41 22\n", "output": ["621068200\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 7 79 51 148 61 66 85 169 78 14 30 47 100 40 15 40 23 52 19 30 14 14 82 56 10 6 68 39 97 61 20 78 18 45 170 6 37 9 51 86 7 32 58 30 79 56 50 14 61 18 24 20 57 3 16 22 24 74 32 3 71 93 4 66 20 17 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["781759080\n"]}, {"input": "100\n23 39 85 46 174 72 41 70 74 18 8 40 33 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 29 51 86 37 70 58 30 79 56 50 14 61 18 13 20 57 3 93 15 36 74 32 21 71 93 3 66 25 75 75 10 86 82 30 31 6 49 15 55 100 59 1 96 87 18 29 21 41 32\n", "output": ["398371399\n"]}, {"input": "2\n4 3\n", "output": ["9\n"]}, {"input": "100\n23 39 85 46 97 113 41 59 37 24 8 40 51 61 12 79 51 78 61 66 143 97 78 14 70 47 100 47 15 40 61 52 19 54 14 91 82 56 10 6 73 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 6 1 96 87 83 29 21 40 22\n", "output": ["547643049\n"]}, {"input": "100\n23 44 85 46 97 72 41 20 37 4 8 40 24 61 20 79 51 78 61 66 95 97 78 14 126 47 100 40 15 40 61 52 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 86 37 42 58 30 79 43 50 14 61 18 24 20 57 3 122 20 24 74 32 21 71 93 2 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 87 83 29 21 41 22\n", "output": ["361956682\n"]}, {"input": "100\n23 39 85 46 97 56 41 70 37 18 8 40 24 61 12 79 51 92 61 66 114 97 78 14 70 47 110 40 15 40 61 52 19 30 14 91 82 56 10 6 68 29 97 9 31 78 18 45 88 8 37 38 51 86 37 42 58 30 79 56 50 14 61 18 24 20 57 3 142 15 24 74 32 21 71 93 2 66 25 75 75 10 86 119 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["335779619\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 61 52 19 30 9 91 82 56 10 6 68 24 100 61 31 78 18 45 11 6 37 38 48 86 37 42 58 30 79 56 50 14 61 18 8 20 57 3 93 15 24 74 47 21 71 93 4 66 25 75 75 10 86 82 30 31 6 49 19 33 110 35 1 96 161 120 29 21 41 3\n", "output": ["739351648\n"]}, {"input": "100\n23 39 85 46 118 72 41 70 9 18 8 14 24 61 12 79 51 78 61 66 85 97 78 14 70 47 100 40 15 40 21 18 19 30 14 91 82 56 10 6 68 24 97 61 31 78 18 45 88 6 37 38 51 71 37 42 58 30 79 56 50 14 104 18 24 20 57 3 93 15 24 74 32 21 71 93 8 66 25 75 75 10 86 82 30 31 6 49 15 33 100 35 1 100 161 83 29 21 41 22\n", "output": ["905581936\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 78 61 66 85 97 53 14 70 47 100 40 15 40 23 52 19 30 14 116 82 56 10 6 68 24 97 14 31 78 18 8 88 6 37 48 51 86 37 42 58 47 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 29 71 93 4 66 20 75 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 58 21 87 22\n", "output": ["732799412\n"]}, {"input": "100\n23 39 85 46 97 72 41 68 37 18 8 40 24 61 12 79 96 78 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 11 91 82 56 10 6 68 24 97 27 31 78 18 45 77 6 37 38 51 86 21 42 42 60 79 102 50 14 61 21 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 96 161 83 29 21 41 22\n", "output": ["649493278\n"]}, {"input": "100\n23 39 33 46 127 72 41 70 37 18 8 40 24 61 12 79 51 148 61 66 85 97 78 14 70 47 100 40 15 40 23 52 19 30 6 91 82 56 10 6 68 24 97 61 31 136 18 45 88 6 37 38 51 86 37 42 66 30 79 56 50 14 61 18 24 20 57 3 93 15 24 74 32 21 71 93 4 66 20 82 70 10 86 108 30 31 6 49 15 33 100 35 1 96 161 63 29 21 41 22\n", "output": ["773258548\n"]}, {"input": "100\n23 39 85 46 97 72 41 70 37 18 8 40 24 61 12 79 51 148 39 66 85 97 78 14 40 47 100 40 15 40 23 50 19 30 14 91 77 56 10 6 68 24 97 37 31 78 18 45 88 6 37 38 51 86 37 42 18 30 79 56 50 20 61 18 24 21 57 3 93 15 24 74 32 3 71 93 4 66 20 82 75 10 86 82 30 31 6 49 15 33 100 35 1 78 161 54 29 21 41 22\n", "output": ["428412692\n"]}], "task_id": "codecontest/50", "prompt": "You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that:\n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n\nThe number of such arrays can be very large, so print it modulo 998 244 353. Note that each b_i must be chosen independently and satisfy the given constraints.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].", "repair_prompt": ["You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that:\n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n\nThe number of such arrays can be very large, so print it modulo 998 244 353. Note that each b_i must be chosen independently and satisfy the given constraints.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "You are given an array of n positive integers a_1, a_2, \u2026, a_n. Your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that:\n\n  * 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n  * b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n\nThe number of such arrays can be very large, and because it can be very large, you should print it modulo 998 244 353. Note that each b_i must be chosen independently and satisfy the given constraints.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "You are given an array of n positive integers a_1, a_2, \u2026, a_n, and your task is to calculate the number of arrays of n positive integers b_1, b_2, \u2026, b_n such that 1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n) and b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1). The number of such arrays can be very large, so print it modulo 998 244 353. Note that each b_i must be chosen independently and satisfy the given constraints.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n    \n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n    \n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    # Initialize the DP table\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Base case: Fill the first row of the DP table\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n    \n    # Fill the DP table\n    for i in range(1, n):\n        for j in range(1, a[i] + 1):\n            dp[i][j] = sum(dp[i-1][k] for k in range(1, a[i-1] + 1) if k != j) % MODULO\n    \n    # Sum up all valid configurations for the last element\n    result = sum(dp[n-1][j] for j in range(1, a[n-1] + 1)) % MODULO\n    \n    return result\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = count_valid_arrays(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n    \n    Args:\n        n: The length of the array a.\n        a: A list of integers representing the maximum value for each b_i.\n    \n    Returns:\n        The number of valid arrays modulo 998244353.\n    \"\"\"\n    # Initialize dp array\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Base case: for the first element, any value from 1 to a[0] is valid\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n    \n    # Fill the dp array\n    for i in range(1, n):\n        # Calculate prefix sums for the previous row to optimize the transition\n        prefix_sum = [0] * (max(a) + 1)\n        for j in range(1, max(a) + 1):\n            prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n        \n        # Update dp for the current row\n        for j in range(1, a[i] + 1):\n            # Total valid configurations for dp[i][j] is the sum of all dp[i-1][k] where k != j\n            dp[i][j] = (prefix_sum[a[i - 1]] - prefix_sum[j] + dp[i - 1][j - 1]) % MOD\n    \n    # Sum up all valid configurations for the last element\n    result = sum(dp[n - 1][j] for j in range(1, a[n - 1] + 1)) % MOD\n    \n    return result\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\nresult = count_valid_arrays(n, a)\n\n# Output interface\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n    \n    Args:\n        n: The length of the array a.\n        a: A list of positive integers representing the constraints for each b_i.\n    \n    Returns:\n        The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # If there's only one element, the number of valid arrays is simply a_1\n        return a[0] % MODULO\n    \n    # Initialize the total number of valid arrays\n    total_valid_arrays = 1\n    \n    # Iterate through each element a_i in the array\n    for i in range(n):\n        # Calculate the number of valid choices for b_i\n        valid_choices = a[i]\n        \n        # If it's not the first element, ensure b_i \u2260 b_{i-1}\n        if i > 0:\n            valid_choices -= 1\n        \n        # Multiply the number of choices for each b_i to get the total number of arrays\n        total_valid_arrays *= valid_choices\n        total_valid_arrays %= MODULO\n    \n    return total_valid_arrays\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = count_valid_arrays(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n    \n    Args:\n        n: The length of the array a.\n        a: A list of integers representing the array a.\n    \n    Returns:\n        The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        return 0\n\n    # Initialize a list to keep track of the number of valid arrays ending with each possible value for b_i\n    dp = [0] * (max(a) + 1)\n    \n    # Initialize the first element possibilities\n    for b1 in range(1, a[0] + 1):\n        dp[b1] = 1\n\n    # Iterate through each element a_i in the array a\n    for i in range(1, n):\n        new_dp = [0] * (max(a) + 1)\n        for bi in range(1, a[i] + 1):\n            # Calculate the number of valid arrays that can end with bi\n            for bj in range(1, a[i-1] + 1):\n                if bi != bj:\n                    new_dp[bi] = (new_dp[bi] + dp[bj]) % MODULO\n        dp = new_dp\n\n    # Sum up all valid configurations for the final result\n    result = sum(dp) % MODULO\n    return result\n\n# Provide the Interface using input() and print(), DO NOT use stdin\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays based on given constraints.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # Edge case: Only one element, return the element itself modulo MOD\n        return a[0] % MOD\n\n    # Initialize the DP table\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n\n    # Initialize the first row of the DP table\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n\n    # Fill the DP table\n    for i in range(1, n):\n        prefix_sum = [0] * (max(a) + 1)\n        for j in range(1, max(a) + 1):\n            prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n\n        for j in range(1, a[i] + 1):\n            dp[i][j] = (prefix_sum[a[i - 1]] - prefix_sum[j - 1]) % MOD\n\n    # Sum up all valid configurations\n    result = sum(dp[n - 1][j] for j in range(1, a[n - 1] + 1)) % MOD\n    return result\n\n# Input and output interface\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b given constraints on array a.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n\n    Returns:\n        int: The number of valid arrays b modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # Edge case: Only one element, all choices are valid\n        return a[0] % MOD\n\n    # Initialize the result with the number of choices for the first element\n    result = a[0]\n\n    # Iterate through each pair of consecutive elements in the array a\n    for i in range(1, n):\n        # Calculate the number of valid choices for b_i considering b_{i-1}\n        result = (result * (a[i] - 1)) % MOD\n\n    return result\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = count_valid_arrays(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\"\"\"\n    # Initialize a dynamic programming table\n    dp = [0] * (max(a) + 1)\n    \n    # Base case: for the first element, all values from 1 to a[0] are valid\n    for b in range(1, a[0] + 1):\n        dp[b] = 1\n    \n    # Iterate through each element of the array a\n    for i in range(1, n):\n        # Temporary array to store new dp values\n        new_dp = [0] * (max(a) + 1)\n        \n        # Calculate the number of valid arrays ending with each possible value of b_i\n        for b in range(1, a[i] + 1):\n            # Sum up all dp values except for the current b to ensure b_i \u2260 b_{i+1}\n            new_dp[b] = sum(dp[1:a[i-1]+1]) - dp[b]\n            new_dp[b] %= MODULO\n        \n        # Update dp with new_dp values\n        dp = new_dp\n    \n    # Sum up the counts for all valid arrays and return the result modulo 998244353\n    result = sum(dp[1:a[n-1]+1]) % MODULO\n    return result\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = count_valid_arrays(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMOD = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"\n    Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n)\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1)\n    The result is returned modulo 998244353.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of positive integers.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # Edge case: With only one element, there are no valid arrays.\n        return 0\n\n    # Initialize the total number of valid arrays with the number of choices for the first element\n    total_valid_arrays = a[0]\n\n    # Iterate through each element of the input array starting from the second element\n    for i in range(1, n):\n        # Calculate the number of valid choices for b_i\n        # If b_{i-1} is equal to a[i], we have a[i] - 1 choices for b_i\n        # Otherwise, we have a[i] choices for b_i\n        if a[i] > 1:\n            total_valid_arrays = (total_valid_arrays * (a[i] - 1)) % MOD\n        else:\n            total_valid_arrays = (total_valid_arrays * a[i]) % MOD\n\n    return total_valid_arrays\n\n# Input interface\nn = int(input())\na = list(map(int, input().split()))\n\n# Output interface\nresult = count_valid_arrays(n, a)\nprint(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that 1 \u2264 b_i \u2264 a_i and b_i \u2260 b_{i+1}.\n\n    Args:\n        n (int): The length of the array a.\n        a (List[int]): The array of integers a_1, a_2, ..., a_n.\n\n    Returns:\n        int: The number of valid arrays modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # If there's only one element, all values from 1 to a_1 are valid\n        return a[0] % MODULO\n\n    # Initialize dp array\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n\n    # Base case: fill dp for the first position\n    for b1 in range(1, a[0] + 1):\n        dp[0][b1] = 1\n\n    # Fill dp for subsequent positions\n    for i in range(1, n):\n        prefix_sum = [0] * (max(a) + 1)\n        \n        # Calculate prefix sums for the previous position\n        for b_prev in range(1, a[i-1] + 1):\n            prefix_sum[b_prev] = (prefix_sum[b_prev - 1] + dp[i-1][b_prev]) % MODULO\n\n        # Calculate dp for the current position\n        for b_curr in range(1, a[i] + 1):\n            # Total valid sequences ending with b_curr\n            dp[i][b_curr] = (prefix_sum[a[i-1]] - prefix_sum[b_curr] + MODULO) % MODULO\n\n    # Sum up all valid sequences for the last position\n    result = sum(dp[n-1][b] for b in range(1, a[n-1] + 1)) % MODULO\n    return result\n\n# Input and output interface\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\nMODULO = 998244353\n\ndef count_valid_arrays(n: int, a: List[int]) -> int:\n    \"\"\"Calculate the number of valid arrays b such that:\n    1 \u2264 b_i \u2264 a_i for every i (1 \u2264 i \u2264 n), and\n    b_i \u2260 b_{i+1} for every i (1 \u2264 i \u2264 n - 1).\n    \n    Args:\n        n: The length of the array a.\n        a: A list of integers representing the array a.\n    \n    Returns:\n        The number of valid arrays b modulo 998244353.\n    \"\"\"\n    if n == 1:\n        # If there's only one element, the only valid array is itself\n        return a[0] % MODULO\n\n    # Initialize a dynamic programming table\n    dp = [0] * (max(a) + 1)\n    for i in range(1, a[0] + 1):\n        dp[i] = 1\n\n    for i in range(1, n):\n        new_dp = [0] * (max(a) + 1)\n        prefix_sum = 0\n        for j in range(1, a[i] + 1):\n            prefix_sum = (prefix_sum + dp[j]) % MODULO\n            new_dp[j] = prefix_sum\n        dp = new_dp\n\n    # Sum up all valid sequences for the final result\n    result = sum(dp) % MODULO\n    return result\n\ndef main():\n    \"\"\"Main function to read input and output the result.\"\"\"\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    result = count_valid_arrays(n, a)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return results modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution works within the given constraints of n and a_i.\n- Optimize the solution for time complexity.\n- Include comprehensive test cases to validate the solution.\n- Document the solution approach and edge cases.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a DP table where dp[i][j] represents the number of valid arrays ending with b_i = j. We will iterate through each element and update the DP table based on the constraints. The solution will handle large inputs efficiently and return results modulo 998 244 353.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The elements of the array are all positive integers, meaning they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result of the calculation should be given modulo 998 244 353, which is a common modulus used in competitive programming to prevent overflow and ensure results fit within standard integer limits.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i'\n    Explanation: Each element b_i in the array b must be greater than or equal to 1 and less than or equal to the corresponding element a_i in array a. This can be implemented by iterating through each element and ensuring b_i is within this range.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a DP table where dp[i][j] represents the number of valid arrays ending with b_i = j.\n    - Iterate through each element of the array a.\n    - For each possible value of b_i (from 1 to a_i), update the DP table based on the constraints.\n    - Ensure that b_i \u2260 b_{i+1} by checking adjacent elements.\n    - Sum up all valid configurations for the last element and return the result modulo 998 244 353.\n\n# [edge case]\n    Input: [1]\n    Output: 1\n    Explanation: Only one possible array [1] satisfies the conditions.\n\n    Input: [1, 1, 1]\n    Output: 0\n    Explanation: No valid arrays can be formed since all elements must be different from their neighbors.\n\n    Input: [2, 2, 2]\n    Output: 2\n    Explanation: Possible arrays are [1, 2, 1] and [2, 1, 2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using dynamic programming inherently handles these cases by ensuring constraints are met during DP table updates.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must efficiently handle large input sizes and return the result modulo 998 244 353.\nrequirement pool:\n- Implement the main algorithm to calculate valid arrays.\n- Ensure the solution is optimized for large inputs.\n- Handle edge cases where all elements are the same.\n- Implement modulo operation correctly.\n- Provide detailed comments and documentation.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The idea is to maintain a dp array where dp[i][j] represents the number of valid arrays ending with b_i = j. We will iterate through each element and update the dp array based on the constraints. The modulo operation will be applied to keep the numbers manageable.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that all elements in the array are positive integers, which means they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result of the calculation should be taken modulo 998 244 353 to ensure the number remains within manageable limits.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i'\n    Explanation: Each element b_i in the array b must be greater than or equal to 1 and less than or equal to the corresponding element a_i in the array a. This can be implemented by iterating through each element and ensuring the value of b_i falls within this range.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a dp array where dp[i][j] represents the number of valid arrays ending with b_i = j.\n    - Iterate through each element of the array a.\n    - For each element a_i, iterate through possible values of b_i from 1 to a_i.\n    - Update dp[i][j] based on the constraints that b_i \u2260 b_{i+1}.\n    - Apply modulo 998 244 353 to each update to keep numbers manageable.\n    - Sum up all valid configurations for the last element to get the final result.\n\n# [edge case]\n    Input: [1]\n    Output: 1\n    Explanation: The only possible array is [1], which satisfies all conditions.\n\n    Input: [2, 2, 2]\n    Output: 2\n    Explanation: Possible arrays are [1, 2, 1] and [2, 1, 2], both satisfying the conditions.\n\n    Input: [1, 1, 1]\n    Output: 0\n    Explanation: No valid arrays can be formed since b_i must be different from b_{i+1}, and all elements are constrained to be 1.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using dynamic programming inherently handles these cases by ensuring constraints are met during iteration.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range specified by a_i and consecutive elements are not equal. The solution must efficiently handle large input sizes and provide results modulo 998 244 353.\nrequirement pool:\n- Efficiently compute the number of valid arrays\n- Ensure output is modulo 998 244 353\n- Optimize for large input sizes\n- Handle edge cases effectively\n- Provide clear documentation\nWe will use dynamic programming to efficiently compute the number of valid arrays. The approach will involve calculating the number of ways to choose each element b_i such that it satisfies the constraints, and using a modulo operation to ensure the result is within the required range. We will leverage Python's built-in capabilities for handling large integers and use the modulo operation to manage large numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The elements of the array are all positive integers, meaning they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result should be given modulo 998 244 353, which means the remainder when the result is divided by 998 244 353.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i': This indicates that each element b_i must be greater than or equal to 1 and less than or equal to the corresponding element a_i.\n    Implementation: This can be implemented by iterating through each element and ensuring b_i is within the specified range.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a variable to store the total number of valid arrays.\n    - Iterate through each element a_i in the array.\n    - For each a_i, calculate the number of valid choices for b_i (which is a_i).\n    - Use dynamic programming to ensure b_i \u2260 b_{i+1} for every i.\n    - Multiply the number of choices for each b_i to get the total number of arrays.\n    - Apply modulo 998 244 353 to the result to ensure it fits within the required range.\n    - Return the final result.\n\n# [edge case]\n    Input: [1]\n    Output: 1\n    Explanation: There is only one element, so b_1 can only be 1.\n\n    Input: [1, 1]\n    Output: 0\n    Explanation: Both elements are 1, so b_1 and b_2 cannot be different.\n\n    Input: [10^9, 10^9]\n    Output: Large number modulo 998 244 353\n    Explanation: Each element has a large number of choices, but must be calculated modulo 998 244 353.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using dynamic programming and modulo operation will handle these cases correctly.\n", "requirement analysis:\nThe problem requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must efficiently handle large input sizes and provide results modulo 998 244 353.\nrequirement pool:\n- Implement the main algorithm to calculate valid arrays\n- Ensure the solution handles edge cases like all elements being 1\n- Optimize the algorithm for performance\n- Validate the solution against multiple test cases\n- Document the code for clarity\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a count of valid arrays ending with each possible value for b_i, ensuring that consecutive elements are not equal. We will use modulo arithmetic to handle large numbers and ensure the result is within the required range.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that all elements in the array are positive integers, which means they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result of the calculation should be taken modulo 998 244 353 to ensure it fits within the constraints of typical integer sizes in programming.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i'\n    Explanation: Each element b_i in the array b must be greater than or equal to 1 and less than or equal to the corresponding element a_i in the array a. This can be implemented by iterating through each element and ensuring the value of b_i is within this range.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a list to keep track of the number of valid arrays ending with each possible value for b_i.\n    - Iterate through each element a_i in the array a.\n    - For each possible value of b_i (from 1 to a_i), calculate the number of valid arrays that can end with b_i.\n    - Ensure that b_i \u2260 b_{i+1} by maintaining separate counts for each possible ending value.\n    - Use modulo arithmetic to keep the result within the required range.\n    - Sum up all valid configurations for the final result.\n\n# [edge case]\n    Input: 1\n           1\n    Output: 0\n    Explanation: With only one element, there are no consecutive elements to compare, so no valid arrays can be formed.\n\n    Input: 2\n           1 2\n    Output: 2\n    Explanation: Possible arrays are [1, 2] and [2, 1]. Both satisfy the condition b_i \u2260 b_{i+1}.\n\n    Input: 3\n           3 3 3\n    Output: 12\n    Explanation: There are multiple combinations where consecutive elements are not equal, considering all possible values for b_i within the given range.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating through each element and checking constraints will naturally handle these cases.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and provide results modulo 998 244 353.\nrequirement pool:\n- Efficient computation for large n\n- Correct implementation of modulo operation\n- Optimization for performance\n- Memory usage management\n- Code readability and maintainability\nWe will use dynamic programming to efficiently compute the number of valid arrays. The key is to maintain a DP table where dp[i][j] represents the number of valid arrays ending with b_i = j. We will iterate over each element and update the DP table based on the constraints. The modulo operation will be applied at each step to ensure the result does not exceed 998 244 353.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array of n positive integers'\n    Explanation: This refers to a sequence of numbers where each number is greater than zero, and the sequence has a length of n.\n\n    'b_i \u2260 b_{i+1}'\n    Explanation: This means that in the array b, no two consecutive elements can be the same.\n\n    'modulo 998 244 353'\n    Explanation: This is a mathematical operation that finds the remainder when one number is divided by another. It is used here to ensure the result fits within a certain range, which is important for large numbers.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i': This means that each element b_i in the array b must be greater than or equal to 1 and less than or equal to the corresponding element a_i in the array a. In code, this can be implemented using a loop to check each element of b against the corresponding element of a.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a DP table where dp[i][j] represents the number of valid arrays ending with b_i = j.\n    2. Iterate over each element of the array a.\n    3. For each element, update the DP table based on the constraints:\n       - Ensure that b_i is within the range [1, a_i].\n       - Ensure that b_i \u2260 b_{i+1}.\n    4. Use modulo 998 244 353 at each step to keep numbers manageable.\n    5. Sum up all valid configurations from the DP table to get the final result.\n\n# [edge case] \n    Edge case 1: n = 1, a = [1] = 1\n    Explanation: With only one element, there is only one possible array b, which is [1]. The output is 1.\n\n    Edge case 2: n = 3, a = [1, 1, 1] = 0\n    Explanation: Since all elements are 1, no valid array b can be formed where consecutive elements are different. The output is 0.\n\n    Edge case 3: n = 2, a = [1000000000, 1000000000] = (1000000000 * (1000000000 - 1)) % 998244353\n    Explanation: For each element in b, there are 1000000000 choices for b_1 and 999999999 choices for b_2 (since b_2 cannot be equal to b_1). The result is taken modulo 998244353.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef calculate_valid_arrays(n, a):\n    MOD = 998244353\n    if n == 1:\n        return a[0] % MOD\n\n    dp = [[0] * (max(a) + 1) for _ in range(n)]\n    \n    # Initialize the first row of dp table\n    for j in range(1, a[0] + 1):\n        dp[0][j] = 1\n    \n    # Fill the dp table\n    for i in range(1, n):\n        prefix_sum = [0] * (max(a) + 1)\n        for j in range(1, max(a) + 1):\n            prefix_sum[j] = (prefix_sum[j - 1] + dp[i - 1][j]) % MOD\n        \n        for j in range(1, a[i] + 1):\n            dp[i][j] = (prefix_sum[a[i - 1]] - prefix_sum[j - 1]) % MOD\n    \n    # Sum up all valid configurations\n    result = sum(dp[n - 1][j] for j in range(1, a[n - 1] + 1)) % MOD\n    return result\n```\n\n", "requirement analysis:\nThe problem requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and no two consecutive elements are equal. The solution must efficiently handle large input sizes and provide the result modulo 998 244 353.\nrequirement pool:\n- Implement the main algorithm to calculate valid arrays.\n- Ensure the solution is optimized for large input sizes.\n- Handle edge cases where all elements are the same.\n- Provide clear and concise output formatting.\n- Include comments and documentation for code clarity.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The key idea is to maintain a table that tracks the number of ways to form valid arrays up to each index, considering the constraints. We will leverage the modulo operation to handle large numbers and ensure the solution is optimized for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The array consists of positive integers, meaning each element is greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result should be given modulo 998 244 353 to handle large numbers and prevent overflow.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i': This means each element b_i in the array b must be at least 1 and at most equal to the corresponding element a_i in the array a.\n    \n    'b_i \u2260 b_{i+1}': This means consecutive elements in the array b must not be equal.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    1. Initialize a variable to store the result, starting with 1.\n    2. Iterate through each element of the array a.\n    3. For each element, calculate the number of valid choices for b_i, which is a_i.\n    4. Multiply the result by the number of valid choices for b_i, and take modulo 998 244 353.\n    5. Adjust for the constraint b_i \u2260 b_{i+1} by subtracting invalid cases where b_i = b_{i+1}.\n    6. Return the final result modulo 998 244 353.\n\n# [edge case] \n    Edge Case 1: n = 1, a = [1]\n    Expected Output: 1\n    Explanation: There is only one possible array [1].\n\n    Edge Case 2: n = 2, a = [1, 1]\n    Expected Output: 0\n    Explanation: The only possible arrays are [1, 1], which violates the condition b_1 \u2260 b_2.\n\n    Edge Case 3: n = 3, a = [2, 2, 2]\n    Expected Output: 2\n    Explanation: The possible arrays are [1, 2, 1] and [2, 1, 2].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should account for these scenarios by ensuring that the constraints are applied correctly during the calculation process.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is independently chosen within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return results modulo 998 244 353.\nrequirement pool:\n- Efficiently compute the number of valid arrays\n- Ensure results are modulo 998 244 353\n- Optimize for large input sizes\n- Minimize memory usage\n- Handle edge cases accurately\nWe will use dynamic programming to efficiently compute the number of valid arrays. The key idea is to maintain a count of valid arrays ending with each possible value for b_i, ensuring that consecutive elements are not equal. We will use modulo arithmetic to handle large numbers and ensure results are within the specified constraints. The approach will be optimized for performance and memory usage, leveraging Python's built-in capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that all elements in the array are positive integers, which means they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result of the calculation should be taken modulo 998 244 353 to ensure it fits within typical integer limits and handles large numbers.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i'\n    Explanation: Each element b_i in the array b must be greater than or equal to 1 and less than or equal to the corresponding element a_i in array a. This can be implemented by iterating through each element and ensuring the constraints are met.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a dynamic programming table to keep track of valid arrays ending with each possible value for b_i.\n    - Iterate through each element of the array a.\n    - For each element, calculate the number of valid arrays that can end with each possible value of b_i, ensuring b_i \u2260 b_{i+1}.\n    - Use modulo arithmetic to keep the results within the specified constraints.\n    - Sum up the counts for all valid arrays and return the result modulo 998 244 353.\n\n# [edge case]\n    Input: [1]\n    Output: 1\n    Explanation: There is only one element, so the only valid array is [1].\n\n    Input: [10^9, 10^9]\n    Output: Large number modulo 998 244 353\n    Explanation: With maximum values, there are many possible arrays, but the result should be computed modulo 998 244 353.\n\n    Input: [1, 1, 1]\n    Output: 0\n    Explanation: Since all elements are 1, no valid array can be formed where consecutive elements are different.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using dynamic programming and modulo arithmetic will naturally handle these cases.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement the main algorithm to calculate the number of valid arrays.\n- Ensure the solution is optimized for large input sizes.\n- Include detailed comments and documentation for clarity.\n- Test the solution against multiple test cases for accuracy.\n- Consider edge cases and handle them appropriately.\nWe will use dynamic programming to efficiently calculate the number of valid arrays. The approach involves iterating through the array and maintaining a count of valid sequences ending at each position, ensuring that consecutive elements are not equal. We will utilize the modulo operation to handle large numbers and ensure the result is within the specified range. The solution will be optimized for large input sizes by using a single pass through the array and maintaining necessary state information.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that all elements in the array are positive integers, which means they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result of the calculation should be taken modulo 998 244 353 to ensure it fits within the constraints of typical integer sizes and to handle large numbers.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i'\n    Explanation: Each element b_i in the resulting array must be greater than or equal to 1 and less than or equal to the corresponding element a_i in the input array. This can be implemented by iterating through each element and ensuring the value of b_i is within this range.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a variable to store the total number of valid arrays.\n    - Iterate through each element of the input array.\n    - For each element, calculate the number of valid choices for b_i (which is a_i - 1, since b_i must be different from b_{i+1}).\n    - Multiply the number of choices for each element to get the total number of valid arrays.\n    - Use modulo operation to keep the result within the specified range.\n    - Return the final count.\n\n# [edge case]\n    Input: 1\n           1\n    Output: 0\n    Explanation: With only one element, there are no valid arrays since b_i cannot be equal to itself.\n\n    Input: 2\n           1 2\n    Output: 2\n    Explanation: Possible arrays are [1, 2] and [2, 1].\n\n    Input: 3\n           3 3 3\n    Output: 6\n    Explanation: Possible arrays are [1, 2, 1], [1, 3, 1], [2, 1, 2], [2, 3, 2], [3, 1, 3], and [3, 2, 3].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers the constraints and uses modulo operation to handle large numbers.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b such that each element b_i is within the range [1, a_i] and consecutive elements are not equal. The solution must handle large input sizes efficiently and return the result modulo 998 244 353.\nrequirement pool:\n- Implement an efficient algorithm to calculate the number of valid arrays.\n- Ensure the solution works within the given constraints of n and a_i.\n- Optimize for both time and space complexity.\n- Provide clear documentation and comments within the code.\n- Include edge case handling and validation.\nWe will use a dynamic programming approach to efficiently calculate the number of valid arrays. The key is to iterate over the array and maintain a count of valid sequences ending with each possible value, ensuring that consecutive elements are not equal. We will use the modulo operation to handle large numbers as required.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The array consists of positive integers, meaning each element is greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result should be given as the remainder when divided by 998,244,353 to handle large numbers.\n\n    'b_i \u2260 b_{i+1}'\n    Explanation: Consecutive elements in the array b must not be equal.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i': Each element b_i must be at least 1 and at most equal to the corresponding a_i.\n    \n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize a list `dp` where `dp[i]` will store the number of valid arrays ending with each possible value for the i-th position.\n2. Set the initial values of `dp` for the first position based on the range [1, a_1].\n3. Iterate over each position from 2 to n:\n   - For each possible value of b_i, calculate the number of valid arrays by summing up the valid arrays from the previous position that do not end with the same value.\n   - Use modulo 998,244,353 to keep numbers manageable.\n4. Sum up all values in `dp[n]` to get the total number of valid arrays.\n5. Return the result modulo 998,244,353.\n\n# [edge case] \n    Input: 1\n           1\n    Output: 1\n    Explanation: Only one possible array [1].\n\n    Input: 2\n           1 1\n    Output: 0\n    Explanation: No valid arrays since b_1 and b_2 cannot be equal.\n\n    Input: 3\n           2 1 2\n    Output: 4\n    Explanation: Possible arrays are [1, 1, 2], [2, 1, 1], [2, 1, 2], and [1, 1, 1].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using dynamic programming inherently handles these cases by considering all constraints and using modulo operations.\n", "requirement analysis:\nThe task requires calculating the number of valid arrays b given constraints on each element. The solution must efficiently handle large input sizes and ensure results are computed modulo 998 244 353. Edge cases such as arrays with all elements equal or minimal values must be considered.\nrequirement pool:\n- Efficiently compute the number of valid arrays b\n- Ensure results are modulo 998 244 353\n- Optimize for large input sizes\n- Handle edge cases gracefully\n- Provide clear and correct output formatting\nWe will use dynamic programming to efficiently compute the number of valid arrays b. The key idea is to maintain a count of valid sequences ending with each possible value of b_i, ensuring b_i \u2260 b_{i+1}. We will utilize the modulo operation to handle large numbers and ensure results are within the required range. The solution will be optimized for performance and memory usage, considering edge cases such as arrays with all elements equal.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'positive integers'\n    Explanation: The requirement specifies that all elements in the array are positive integers, which means they are greater than zero.\n\n    'modulo 998 244 353'\n    Explanation: The result of the calculation should be taken modulo 998 244 353 to ensure it fits within the constraints of typical integer sizes and to handle large numbers.\n\n# [phrase showing quantity relationship]\n    '1 \u2264 b_i \u2264 a_i'\n    Explanation: Each element b_i in the array b must be greater than or equal to 1 and less than or equal to the corresponding element a_i in array a. This can be implemented by iterating through each element and ensuring the value of b_i is within this range.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize a dynamic programming table to store the count of valid sequences ending with each possible value of b_i.\n    - Iterate through each element of array a.\n    - For each possible value of b_i, update the count of sequences ensuring b_i \u2260 b_{i+1}.\n    - Use modulo operation to keep the count within the required range.\n    - Sum up all valid sequences for the final result and apply modulo 998 244 353.\n\n# [edge case]\n    Input: 1\n           1\n    Output: 1\n    Explanation: There is only one possible array [1] since b_1 must be equal to a_1.\n\n    Input: 3\n           1 1 1\n    Output: 0\n    Explanation: No valid array can be formed since all elements are equal, violating the condition b_i \u2260 b_{i+1}.\n\n    Input: 2\n           10^9 10^9\n    Output: Large number modulo 998 244 353\n    Explanation: With large values, many combinations are possible, but the result should be taken modulo 998 244 353.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using dynamic programming and modulo operation will naturally handle these cases.\n"], "scores": [], "pass_results": [true, false, true, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 483, "examples": "\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the answer modulo 998 244 353 in a single line.\n\nExamples\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n2\n\nInput\n\n\n2\n2 3\n\n\nOutput\n\n\n4\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case possible arrays are [1, 2, 1] and [2, 1, 2].\n\nIn the second test case possible arrays are [1, 2], [1, 3], [2, 1] and [2, 3].", "mutate_method": "add_1_sentence_at_end", "parent_index": 20}
