{"name": "1591_A. Life of a Flower", "description": "Petya has got an interesting flower. Petya is a busy person, so he sometimes forgets to water it. You are given n days from Petya's live and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days in a row, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\n\n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "tags": ["implementation"], "difficulty": 7, "id": 1591, "sample_io": [{"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}], "test_list": [{"input": "1\n10\n1 1 1 1 1 1 1 1 1 1\n", "output": ["47\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n7\n3\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 1 0\n", "output": ["33\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 1\n", "output": ["29\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n-1\n8\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 0 1 1 1 1 1\n", "output": ["24\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["7\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["3\n12\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n7\n8\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["7\n-1\n8\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 0 1 1\n", "output": ["20\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["12\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n0\n", "output": ["-1\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["12\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 1 1 1\n1\n1\n", "output": ["3\n7\n12\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 1\n1\n0\n", "output": ["3\n3\n17\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 1 1\n4\n1 0 1 1\n1\n0\n", "output": ["7\n7\n8\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 0\n", "output": ["28\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n7\n17\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["2\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["7\n-1\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["3\n3\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 1 0\n1\n1\n", "output": ["3\n7\n3\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n1 1 1\n4\n1 0 0 1\n1\n0\n", "output": ["12\n12\n-1\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 1\n4\n0 1 1 1\n1\n0\n", "output": ["-1\n3\n12\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 0 1\n", "output": ["15\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n1\n", "output": ["3\n-1\n17\n2\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 1 1\n", "output": ["42\n"]}, {"input": "4\n3\n0 0 1\n3\n1 1 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n12\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 1 0\n1\n0\n", "output": ["3\n-1\n3\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n2\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["3\n2\n8\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n1 0 1 1\n1\n1\n", "output": ["2\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["3\n2\n-1\n2\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["3\n3\n8\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["12\n-1\n17\n1\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 0\n", "output": ["19\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n1\n", "output": ["3\n-1\n7\n2\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n2\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n3\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 0 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n3\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 0\n1\n0\n", "output": ["-1\n7\n3\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n0 1 1 0\n1\n1\n", "output": ["-1\n-1\n7\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 1\n4\n1 1 1 1\n1\n1\n", "output": ["-1\n12\n17\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n3\n12\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n3\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n7\n17\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["12\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 0\n1\n1\n", "output": ["3\n-1\n12\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 1 0 1\n1\n0\n", "output": ["3\n2\n8\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n7\n-1\n2\n"]}, {"input": "4\n3\n0 1 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["2\n12\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["12\n7\n-1\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n1 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n3\n12\n1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["12\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 1 1 1\n1\n0\n", "output": ["-1\n7\n17\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 1 1\n4\n0 0 0 1\n1\n0\n", "output": ["-1\n12\n-1\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 1 1 1 1 1\n", "output": ["38\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 1\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 0\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n1 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 1 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n2\n8\n1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 1\n", "output": ["38\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 0\n1\n1\n", "output": ["3\n7\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 0 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 1 1 0 1\n", "output": ["33\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 1\n4\n1 0 0 1\n1\n0\n", "output": ["-1\n-1\n-1\n1\n"]}, {"input": "4\n3\n0 0 0\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["3\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 0 1\n1\n1\n", "output": ["-1\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n7\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 1 1 2 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 1 1 1\n1\n0\n", "output": ["3\n-1\n17\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n1 0 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n-1\n8\n2\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 0\n3\n0 0 0\n4\n1 1 1 0\n1\n0\n", "output": ["-1\n-1\n12\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 0 0\n4\n1 0 1 1\n1\n0\n", "output": ["-1\n-1\n8\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["3\n-1\n-1\n2\n"]}, {"input": "1\n10\n0 1 1 0 1 0 1 1 1 1\n", "output": ["24\n"]}, {"input": "1\n10\n0 1 0 1 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 2 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n1 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n2 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 0 0 2 0 -1 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["3\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 1\n", "output": ["29\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 1 0\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 1 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n1 0 1\n3\n1 0 0\n4\n1 0 0 1\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "4\n3\n1 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 0\n4\n1 0 1 1\n1\n1\n", "output": ["-1\n2\n8\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n0 1 1 0\n1\n0\n", "output": ["3\n-1\n7\n1\n"]}, {"input": "1\n10\n1 1 1 1 1 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 1\n", "output": ["-1\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 1\n4\n0 0 1 0\n1\n0\n", "output": ["3\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 1\n3\n0 0 1\n4\n1 0 0 1\n1\n1\n", "output": ["7\n-1\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 1 1 1 0 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 1 1\n3\n0 0 1\n4\n1 1 1 0\n1\n0\n", "output": ["12\n-1\n12\n1\n"]}, {"input": "1\n10\n0 1 0 1 0 1 0 0 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 1 1 0 1\n", "output": ["24\n"]}, {"input": "4\n3\n1 0 1\n3\n0 0 0\n4\n1 1 0 0\n1\n0\n", "output": ["3\n-1\n-1\n1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 0 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 1 1 1 0 1 0 1\n", "output": ["15\n"]}, {"input": "1\n10\n1 0 0 1 0 2 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 1 0 0 1 1 1 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 1 0 1 1 1 1 1 1\n", "output": ["33\n"]}, {"input": "1\n10\n0 1 0 0 1 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 2 0 1 0 0 0 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n0 1 0 0 3 1 0 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 -1 0 1 0 1 0 0 -1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 1 2 0 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 1 1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 1 1 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 1 1 0 0 1 1 0 0\n", "output": ["-1\n"]}, {"input": "1\n7\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n10\n4 0 0 1 0 0 -1 0 -1 2\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 1 0 1 0 0 0\n", "output": ["-1\n"]}, {"input": "1\n3\n0 0 2 1 -1 0 2 0 0 -1\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 1\n3\n0 1 1\n4\n1 1 0 1\n1\n0\n", "output": ["-1\n7\n8\n1\n"]}, {"input": "1\n10\n1 1 0 1 0 0 1 1 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n0 0 0\n3\n0 1 1\n4\n1 1 0 0\n1\n0\n", "output": ["-1\n7\n-1\n1\n"]}, {"input": "4\n3\n0 1 0\n3\n0 0 1\n4\n0 0 0 1\n1\n1\n", "output": ["2\n-1\n-1\n2\n"]}, {"input": "4\n3\n1 0 1\n3\n0 1 0\n4\n1 0 0 0\n1\n0\n", "output": ["3\n2\n-1\n1\n"]}, {"input": "1\n10\n1 1 1 1 0 1 1 1 0 0\n", "output": ["-1\n"]}, {"input": "4\n3\n1 1 1\n3\n0 1 1\n4\n0 0 0 0\n1\n1\n", "output": ["12\n7\n-1\n2\n"]}, {"input": "1\n10\n1 1 0 0 1 1 2 1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 0 0 1 0 0 0 0 1 1\n", "output": ["-1\n"]}, {"input": "1\n10\n0 0 0 1 0 1 0 -1 1 2\n", "output": ["-1\n"]}, {"input": "1\n10\n1 1 0 1 1 0 1 1 1 0\n", "output": ["24\n"]}, {"input": "1\n10\n1 1 0 1 1 1 0 0 0 0\n", "output": ["-1\n"]}], "task_id": "codecontest/45", "prompt": "Petya possesses a fascinating flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live, and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days consecutively, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "repair_prompt": ["Petya possesses a fascinating flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live, and you have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days consecutively, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya possesses a fascinating flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's life. You have to determine what happened with his flower in the end.\n\nThe flower grows as follows: \n\n  * If the flower isn't watered for two days consecutively, it dies. \n  * If the flower is watered in the i-th day, it grows by 1 centimeter. \n  * If the flower is watered in the i-th and in the (i-1)-th day (i > 1), then it grows by 5 centimeters instead of 1. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "Petya possesses a fascinating flower, but as a busy person, he sometimes forgets to water it. You are given n days from Petya's live, and you have to determine what happened with his flower in the end. The flower grows as follows: \n\n  * If the flower isn't watered for two days consecutively, it dies. \n  * If watered in the i-th day and the (i-1)-th day (i > 1), the flower grows by 5 centimeters; otherwise, it grows by 1 centimeter on the i-th day. \n  * If the flower is not watered in the i-th day, it does not grow. \n\nAt the beginning of the 1-st day the flower is 1 centimeter tall. What is its height after n days?\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1"], "completions": ["from typing import List\n## main.py\n\ndef calculate_flower_height(t: int, test_cases: list) -> list:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of days and the watering pattern.\n\n    Returns:\n        list: List of integers representing the final height of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for n, watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_no_water_days = 0  # Track consecutive days without water\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                consecutive_no_water_days = 0  # Reset no water days counter\n            else:\n                consecutive_no_water_days += 1\n                if consecutive_no_water_days == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append((n, watering_pattern))\n    \n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of watering patterns for each test case.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        n = len(case)\n        if n == 0:\n            results.append(1)\n            continue\n        \n        height = 1\n        died = False\n        \n        for i in range(n):\n            if i > 0 and case[i] == 0 and case[i-1] == 0:\n                height = -1\n                died = True\n                break\n            elif case[i] == 1:\n                if i > 0 and case[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        \n        results.append(height if not died else -1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef simulate_flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over a series of days based on the watering pattern.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_watered = False  # Track if the previous day was watered\n        consecutive_unwatered_days = 0  # Track consecutive unwatered days\n        \n        for day in days:\n            if day == 1:\n                if consecutive_watered:\n                    height += 5  # Grow by 5 cm if watered consecutively\n                else:\n                    height += 1  # Grow by 1 cm if watered\n                consecutive_watered = True\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                consecutive_watered = False\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n\n    # Output interface\n    results = simulate_flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days = 0  # Track consecutive non-watering days\n        \n        for i, watered in enumerate(case):\n            if watered == 1:\n                if i > 0 and case[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_days = 0  # Reset consecutive non-watering days\n            else:\n                consecutive_days += 1\n                if consecutive_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\n# Read number of test cases\nt = int(input())\n\n# Read each test case\n# Each test case consists of n and a list of n integers\n# Store all test cases in a list\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append(a)\n\n# Call the function and get results\nresults = calculate_flower_height(t, test_cases)\n\n# Output interface\n# Print each result for the test cases\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_days_without_water = 0\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Growth by 5 cm for consecutive watering\n                else:\n                    height += 1  # Growth by 1 cm for single day watering\n                consecutive_days_without_water = 0  # Reset the counter\n            else:\n                consecutive_days_without_water += 1\n                if consecutive_days_without_water == 2:\n                    height = -1  # Flower dies\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print the results\n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_flower_height(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the final height of the flower for each test case.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers representing watering pattern.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for days in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0  # Track consecutive unwatered days\n        previous_day_watered = False  # Track if the previous day was watered\n        \n        for day in days:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5\n                else:\n                    height += 1\n                previous_day_watered = True\n                consecutive_unwatered_days = 0\n            else:\n                consecutive_unwatered_days += 1\n                previous_day_watered = False\n                if consecutive_unwatered_days == 2:\n                    height = -1\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        days = list(map(int, input().split()))\n        test_cases.append(days)\n    \n    results = calculate_flower_height(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower based on watering patterns over a series of days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i, watered in enumerate(watering_pattern):\n            if watered == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered but not on consecutive days\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower based on watering patterns.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing a list of integers\n                    representing the watering pattern over several days.\n\n    Returns:\n        A list of integers representing the final height of the flower for each test case,\n        or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        height = 1  # Initial height of the flower\n        n = len(case)\n        flower_died = False\n        \n        for i in range(n):\n            if i > 0 and case[i] == 0 and case[i-1] == 0:\n                # Flower dies if not watered for two consecutive days\n                height = -1\n                flower_died = True\n                break\n            elif i > 0 and case[i] == 1 and case[i-1] == 1:\n                # Flower grows by 5 cm if watered on consecutive days\n                height += 5\n            elif case[i] == 1:\n                # Flower grows by 1 cm if watered on a single day\n                height += 1\n        \n        results.append(height)\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        watering_pattern = list(map(int, input().strip().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef simulate_flower_growth(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over a series of days based on watering patterns.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing the number of days\n                                      followed by a list of integers representing the watering pattern.\n\n    Returns:\n        List[int]: A list of integers representing the final height of the flower for each test case,\n                   or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = case[0]\n        watering_pattern = case[1:]\n        \n        height = 1  # Initial height of the flower\n        consecutive_unwatered_days = 0\n        \n        for i in range(n):\n            if watering_pattern[i] == 1:\n                if i > 0 and watering_pattern[i - 1] == 1:\n                    height += 5  # Grow by 5 cm if watered on consecutive days\n                else:\n                    height += 1  # Grow by 1 cm if watered on a single day\n                consecutive_unwatered_days = 0  # Reset unwatered days counter\n            else:\n                consecutive_unwatered_days += 1\n                if consecutive_unwatered_days == 2:\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append([n] + watering_pattern)\n    \n    # Call the function and print results\n    results = simulate_flower_growth(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef flower_growth_simulation(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Simulates the growth of a flower over a series of days based on watering patterns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing a list of integers\n                                      representing the watering pattern over n days.\n\n    Returns:\n        List[int]: List of final heights of the flower for each test case, or -1 if the flower dies.\n    \"\"\"\n    results = []\n    \n    for watering_pattern in test_cases:\n        height = 1  # Initial height of the flower\n        previous_day_watered = False  # Track if the previous day was watered\n        flower_died = False  # Flag to check if the flower dies\n        \n        for day in watering_pattern:\n            if day == 1:\n                if previous_day_watered:\n                    height += 5  # Increase height by 5 cm if watered consecutively\n                else:\n                    height += 1  # Increase height by 1 cm if watered\n                previous_day_watered = True\n            else:\n                if previous_day_watered:\n                    previous_day_watered = False\n                else:\n                    flower_died = True\n                    height = -1  # Flower dies if not watered for two consecutive days\n                    break\n        \n        results.append(height)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        n = int(input())\n        watering_pattern = list(map(int, input().split()))\n        test_cases.append(watering_pattern)\n    \n    # Call the function and print results\n    results = flower_growth_simulation(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirements focus on simulating the growth of a flower based on watering patterns over a series of days. The key challenge is to accurately track the growth and determine if the flower dies due to consecutive days without water. The solution must efficiently handle multiple test cases and provide clear output for each scenario.\nrequirement pool:\n- Implement the flower growth logic based on watering patterns.\n- Ensure the solution handles multiple test cases efficiently.\n- Provide clear output indicating the flower's final height or if it dies.\n- Optimize the code for performance with large input sizes.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the watering pattern over n days. The function will iterate through the list of watering days, updating the flower's height according to the rules provided. We will use simple list operations and conditional statements to achieve this. The solution will handle multiple test cases efficiently by processing each test case independently. We will use Python's built-in input() and print() functions for interaction.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules depending on whether it is watered or not.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two consecutive zeros in the list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case:\n      - For each day in the test case, check the watering pattern:\n        - If the flower is watered (a_i = 1), check if it was watered the previous day:\n          - If yes, increase height by 5 cm.\n          - If no, increase height by 1 cm.\n        - If the flower is not watered (a_i = 0), check if it was not watered the previous day:\n          - If yes, and this is the second consecutive day, set height to -1 (flower dies).\n          - If no, continue without changing height.\n    - Print the final height for each test case.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, but it doesn't die because it needs two consecutive days without water to die. The height remains 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the second and third days consecutively, causing it to die.\n\n    Test case: [1, 1, 0, 1] = 8\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering, then grows by 1 cm on the fourth day. Total height is 1 + 5 + 1 = 8 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive days without watering and adjusts the height accordingly.\n", "requirement analysis:\nThe requirements specify a simulation of flower growth over a series of days, with specific rules for growth and death. The solution must handle multiple test cases efficiently and provide accurate results based on the input conditions.\nrequirement pool:\n- Implement the flower growth logic based on watering rules.\n- Support multiple test cases in a single execution.\n- Optimize performance for handling up to 100 test cases.\n- Ensure clear and correct output format for each test case.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to simulate the growth of the flower based on the given rules. The function will iterate through each test case, process the watering pattern, and calculate the final height or determine if the flower dies. We will use simple list operations to handle the input and output efficiently. The solution will be implemented in a single Python file, 'main.py', and will use basic input and output functions to interact with the user.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's growth is determined by whether it is watered or not, and specific rules dictate how much it grows or if it dies.\n\n    'watering pattern'\n    Explanation: The sequence of days on which the flower is watered (represented by 1) or not watered (represented by 0).\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two consecutive zeros in the watering pattern.\n    Implementation: Iterate through the list and check for two consecutive zeros.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm.\n2. Iterate through each test case:\n   - For each test case, iterate through the watering pattern:\n     - If two consecutive days are not watered, set height to -1 and break the loop.\n     - If a day is watered, check if the previous day was also watered:\n       - If yes, increase height by 5 cm.\n       - If no, increase height by 1 cm.\n3. Print the final height for each test case.\n\n# [edge case]\n    Test case with all zeros: \n    Input: 1\n           0\n    Output: 1\n    Explanation: The flower is not watered at all, but since it's only one day, it doesn't die.\n\n    Test case with two consecutive zeros:\n    Input: 3\n           1 0 0\n    Output: -1\n    Explanation: The flower dies because it wasn't watered for two consecutive days.\n\n    Test case with alternating watering:\n    Input: 4\n           1 0 1 0\n    Output: 3\n    Explanation: The flower grows by 1 cm on the first day, doesn't grow on the second day, grows by 1 cm on the third day, and doesn't grow on the fourth day.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1 and a[0] == 0:\n            print(1)\n            continue\n        height = 1\n        for i in range(n):\n            if i > 0 and a[i] == 0 and a[i-1] == 0:\n                height = -1\n                break\n            elif a[i] == 1:\n                if i > 0 and a[i-1] == 1:\n                    height += 5\n                else:\n                    height += 1\n        print(height)\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The simulation must handle multiple test cases and provide the final height of the flower or indicate if it dies. The solution should efficiently process up to 100 test cases with each having up to 100 days.\nrequirement pool:\n- Implement the flower growth simulation logic\n- Handle multiple test cases as per input format\n- Optimize for performance with large input sizes\n- Ensure clear and correct output formatting\n- Consider edge cases such as all days unwatered\nWe will implement a function to simulate the growth of the flower over a series of days based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use a simple list to store the watering pattern and process each test case independently. The function will handle up to 100 test cases efficiently by iterating through each day's watering status and applying the growth or death rules. We will use basic Python data structures and control flow to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not, with specific rules for consecutive watering.\n\n    'consecutive days'\n    Explanation: The flower's growth or death depends on whether it is watered on consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with no watering.\n    \n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    \n    'grows by 5 centimeters': If watered on two consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If the flower is watered on a given day:\n     - Check if it was also watered the previous day. If so, increase the height by 5 cm.\n     - Otherwise, increase the height by 1 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower starts at 1 cm and is not watered, but since it's only one day, it doesn't die.\n\n    Test case: 2\n    Input: 0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0 1\n    Output: 8\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), then grows by 1 cm on the fourth day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and handles them appropriately by setting the height to -1.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately track the growth or death of the flower based on consecutive days without water and to handle multiple test cases efficiently. The solution must be robust to handle edge cases and provide clear output for each test case.\nrequirement pool:\n- Implement the main algorithm to calculate flower height based on watering pattern.\n- Ensure the program can handle up to 100 test cases efficiently.\n- Optimize the code for performance with large input sizes.\n- Provide detailed error messages for invalid inputs.\n- Include a user-friendly interface for input and output.\nWe will implement a function to simulate the growth of the flower based on the given watering pattern for multiple test cases. The function will iterate through each test case, track the growth or death of the flower, and return the final height or -1 if the flower dies. We will use simple list operations and condition checks to achieve this. The solution will be efficient enough to handle up to 100 test cases with a maximum of 100 days each.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth pattern of a flower based on watering conditions over a series of days.\n\n    'consecutive days'\n    Explanation: The flower dies if it is not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This can be implemented by checking if there are two consecutive zeros in the list.\n    \n    'grows by 1 centimeter': If the flower is watered on a single day, it grows by 1 cm. This can be implemented by adding 1 to the height for each day with a value of 1.\n    \n    'grows by 5 centimeters': If the flower is watered on two consecutive days, it grows by 5 cm instead of 1 cm. This can be implemented by checking pairs of consecutive days and adding 5 to the height if both are 1.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n    - Initialize the height of the flower to 1 cm at the start of each test case.\n    - Iterate through each day in the test case:\n        - If the current day and the previous day are both watered (value of 1), increase height by 5 cm.\n        - If only the current day is watered, increase height by 1 cm.\n        - If two consecutive days are not watered (value of 0), set height to -1 and break out of the loop.\n    - Return the final height for each test case.\n\n# [edge case] \n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Input: 3\n           1 1 0\n    Output: 6\n    Explanation: The flower grows by 5 cm on the first two days and does not grow on the third day.\n\n    Input: 4\n           0 1 0 1\n    Output: 3\n    Explanation: The flower grows by 1 cm on the second and fourth days, totaling a height of 3 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and adjusts the height accordingly.\n", "requirement analysis:\nThe problem requires simulating the growth of a flower over a series of days based on whether it is watered or not. The key conditions to handle are consecutive days without watering leading to the flower's death, and the increased growth rate when watered on consecutive days. The solution must efficiently handle up to 100 test cases, each with up to 100 days.\nrequirement pool:\n- Implement the flower growth simulation logic.\n- Ensure the program handles multiple test cases correctly.\n- Optimize the solution for performance with maximum input size.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth over a series of days based on the watering pattern provided. The function will iterate through each test case, checking the watering status for each day and updating the flower's height accordingly. We will use simple list operations to track the watering pattern and calculate the height. The function will also check for consecutive days without watering to determine if the flower dies.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on a given watering pattern over several days. The flower's growth is determined by whether it is watered and the pattern of watering.\n\n    'consecutive days'\n    Explanation: This refers to the condition where the flower is not watered for two days in a row, which results in the flower dying.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': This means that if the flower is not watered for two consecutive days, it dies. In code, this can be implemented by checking if there are two consecutive zeros in the watering pattern.\n    \n    'grows by 1 centimeter': This means that if the flower is watered on a given day, it grows by 1 cm. In code, this can be implemented by adding 1 to the height if the current day's watering status is 1.\n    \n    'grows by 5 centimeters': This means that if the flower is watered on two consecutive days, it grows by 5 cm on the second day. In code, this can be implemented by checking if both the current and previous day's watering status are 1, and then adding 5 to the height.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the watering pattern:\n   - If the current day and the previous day are both watered (1), increase the height by 5 cm.\n   - If only the current day is watered, increase the height by 1 cm.\n   - If there are two consecutive days without watering (0), set the height to -1 and break out of the loop.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case] \n    Test case: 1\n    Input: 2\n           0 0\n    Output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 2\n    Input: 3\n           1 1 0\n    Output: 7\n    Explanation: The flower grows by 5 cm on the second day due to consecutive watering and by 1 cm on the first day.\n\n    Test case: 3\n    Input: 4\n           1 0 1 0\n    Output: 3\n    Explanation: The flower grows by 1 cm on both the first and third days, with no consecutive non-watering days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for consecutive non-watering days and adjusts the height accordingly.\n", "requirement analysis:\nThe task requires implementing a function to simulate the growth of a flower over a series of days based on watering patterns. The function must handle multiple test cases, determine if the flower dies, and calculate the final height accurately.\nrequirement pool:\n- Implement the flower growth simulation algorithm.\n- Ensure the program handles multiple test cases efficiently.\n- Optimize the algorithm for performance with large input sizes.\n- Provide detailed error messages for invalid inputs.\n- Include a user-friendly interface for input and output.\nWe will implement a function that simulates the growth of a flower over a series of days based on the watering pattern provided for each test case. The function will iterate through each day, updating the flower's height according to the rules specified. If the flower is not watered for two consecutive days, it will be marked as dead. The function will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around the growth of a flower based on watering patterns over a series of days. The flower's height changes according to specific rules, and the task is to determine its final height or if it dies.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two successive zeros in the input list.\n    'grows by 1 centimeter': If watered on a single day, the flower grows by 1 cm.\n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm instead of 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - Initialize the flower's height to 1 cm at the start.\n    - Iterate through each test case independently.\n    - For each test case, iterate through the list of days:\n        - If two consecutive days are not watered (two zeros in a row), mark the flower as dead and return -1 for that test case.\n        - If a day is watered (1), check if the previous day was also watered:\n            - If yes, increase height by 5 cm.\n            - If no, increase height by 1 cm.\n    - Return the final height for each test case unless the flower dies.\n\n# [edge case]\n    Input: 2\n           3\n           0 0 1\n           4\n           1 0 0 0\n    Output: -1\n            -1\n    Explanation: \n    - In the first test case, the flower dies after two consecutive days without water.\n    - In the second test case, the flower dies after three consecutive days without water.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already checks for two consecutive days without water and handles it by marking the flower as dead.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on watering patterns. The main challenge is to accurately track the growth or death of the flower based on consecutive watering days and handle multiple test cases efficiently. The output must clearly indicate the final height or if the flower dies.\nrequirement pool:\n- Implement the flower growth logic based on watering patterns.\n- Support multiple test cases with efficient input handling.\n- Ensure the output format is clear and matches the requirements.\n- Optimize the solution for performance with large inputs.\n- Provide detailed error messages for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the given watering pattern for each test case. The function will iterate through the days, updating the flower's height according to the rules provided. We will use simple list operations to handle the input and output efficiently. The solution will be optimized for performance by minimizing unnecessary computations and using straightforward logic to determine the flower's state each day.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on whether it is watered or not over a series of days.\n\n    'consecutive days'\n    Explanation: The flower's growth or death depends on whether it is watered on consecutive days or not.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two successive days with no watering.\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm.\n    \n    'grows by 1 centimeter': If watered but not on consecutive days, it grows by 1 cm.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If watered on consecutive days, increase the height by 5 cm.\n   - If watered but not on consecutive days, increase the height by 1 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: 2\n    Input: 1 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n    Test case: 3\n    Input: 1 1 0\n    Expected output: 7\n    Explanation: The flower is watered on the first two days (grows by 5 cm) and then not watered on the third day (grows by 1 cm), resulting in a total height of 7 cm.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower is not watered for two consecutive days or when it is watered in different patterns.\n", "requirement analysis:\nThe requirements focus on simulating the growth of a flower over a series of days based on watering patterns. The key challenge is to accurately track the growth or death of the flower based on consecutive days of watering or lack thereof. The solution must handle multiple test cases efficiently and provide clear output for each scenario.\nrequirement pool:\n- Implement the flower growth algorithm based on watering patterns.\n- Ensure the program can handle up to 100 test cases efficiently.\n- Optimize the solution for performance with maximum input sizes.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth based on the watering pattern provided for each test case. The function will iterate through the days, updating the flower's height according to the rules specified. We will use simple list operations to track the watering pattern and calculate the height efficiently. The solution will handle multiple test cases by iterating over each test case and applying the growth logic. We will ensure the program is optimized for performance by minimizing unnecessary computations and using efficient list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The requirement revolves around simulating the growth of a flower based on a watering schedule over several days. The flower's growth is determined by whether it is watered on consecutive days or not.\n\n    'consecutive days'\n    Explanation: This refers to the sequence of days where the flower is watered or not. It affects the growth rate and survival of the flower.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with no watering (0, 0).\n    \n    'grows by 5 centimeters': If watered on consecutive days, the flower grows by 5 cm. This means checking for two sequential days with watering (1, 1).\n\n    'grows by 1 centimeter': If watered on a day but not consecutively, it grows by 1 cm. This means checking for a single day of watering (1) not preceded by another day of watering.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the height of the flower to 1 cm at the start.\n2. Iterate through each test case:\n   - For each day in the test case, check the watering pattern.\n   - If two consecutive days are not watered (0, 0), set height to -1 and break out of the loop.\n   - If two consecutive days are watered (1, 1), increase height by 5 cm.\n   - If a single day is watered (1) and not preceded by another watering day, increase height by 1 cm.\n3. After processing all days in a test case, store the result.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: [0] = 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: [1, 0, 0] = -1\n    Explanation: The flower is watered on the first day but not on the next two consecutive days, so it dies.\n\n    Test case: [1, 1, 0, 1] = 7\n    Explanation: The flower grows by 5 cm on the first two days (consecutive watering), does not grow on the third day (no watering), and grows by 1 cm on the fourth day (single watering).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for scenarios where the flower dies or grows based on consecutive watering patterns.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on watering patterns. The flower's growth is conditional on consecutive watering, and it can die if not watered for two consecutive days. The solution must handle multiple test cases efficiently and provide the correct height or indicate if the flower dies.\nrequirement pool:\n- Implement the flower growth simulation logic.\n- Ensure the program handles multiple test cases.\n- Optimize for performance with large input sizes.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the flower's growth over n days based on the watering pattern provided. The function will iterate through each day's watering status, updating the flower's height accordingly and checking for consecutive days without watering to determine if the flower dies. We will use simple list operations and conditionals to achieve this, ensuring efficient handling of multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not. It grows by 5 cm if watered on consecutive days, by 1 cm if watered on a single day, and does not grow if not watered. If not watered for two consecutive days, it dies.\n\n    'consecutive days'\n    Explanation: This refers to two days in a row. If the flower is not watered for two consecutive days, it dies.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': This means the flower must not be watered for two days in a row for it to die. In code, this can be checked using a loop to see if there are two consecutive zeros in the watering pattern.\n    \n    'grows by 5 centimeters': This means the flower's height increases by 5 cm if watered on consecutive days. In code, this can be implemented by checking if both the current and previous day are watered (both are 1).\n\n    'grows by 1 centimeter': This means the flower's height increases by 1 cm if watered on a single day without the previous day being watered. In code, this can be implemented by checking if the current day is watered (1) and the previous day is not (0).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day's watering status:\n   - If the flower is not watered for two consecutive days, set the height to -1 and break out of the loop.\n   - If watered on consecutive days, increase the height by 5 cm.\n   - If watered on a single day, increase the height by 1 cm.\n3. After processing all days, store the final height for each test case.\n4. Output the results for all test cases.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Expected output: 1\n    Explanation: The flower is not watered on the only day, so it remains at its initial height of 1 cm.\n\n    Test case: 2\n    Input: 1 0\n    Expected output: 2\n    Explanation: The flower is watered on the first day (grows to 2 cm) and not watered on the second day (no growth), but it does not die.\n\n    Test case: 3\n    Input: 0 0\n    Expected output: -1\n    Explanation: The flower is not watered for two consecutive days, so it dies.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by checking for consecutive unwatered days and adjusting growth accordingly.\n", "requirement analysis:\nThe task requires simulating the growth of a flower over a series of days based on whether it is watered or not. The key conditions to handle are the growth increments based on consecutive watering and the death condition if not watered for two consecutive days. The solution must efficiently handle up to 100 test cases, each with up to 100 days.\nrequirement pool:\n- Implement the flower growth simulation based on watering conditions.\n- Ensure the program can handle multiple test cases efficiently.\n- Optimize the solution for performance with large input sizes.\n- Provide clear and concise output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function to simulate the growth of the flower over a series of days based on the given watering pattern. The function will iterate through each test case, checking the watering conditions for each day. It will update the flower's height according to the rules provided and check for the death condition if the flower is not watered for two consecutive days. The solution will handle multiple test cases efficiently by processing each one independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'flower growth'\n    Explanation: The flower's height changes based on whether it is watered or not, with specific rules for consecutive watering.\n\n    'consecutive days'\n    Explanation: The condition where the flower dies if not watered for two consecutive days.\n\n# [phrase showing quantity relationship]\n    'two days consecutively': If the flower isn't watered for two consecutive days, it dies. This means checking for two sequential days with no watering (0, 0).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize the flower's height to 1 cm at the start of each test case.\n2. Iterate through each day in the test case:\n   - If the flower is watered (a_i = 1):\n     - Check if the previous day was also watered. If so, increase height by 5 cm; otherwise, increase by 1 cm.\n   - If the flower is not watered (a_i = 0):\n     - Check if the previous day was also not watered. If so, the flower dies, and set height to -1.\n3. If the flower dies, break out of the loop for that test case.\n4. Output the final height for each test case.\n\n# [edge case]\n    Test case: 1\n    Input: 0\n    Output: 1\n    Explanation: The flower is not watered on the first day, but it does not die because it needs two consecutive days without water to die.\n\n    Test case: 2\n    Input: 1 0 0\n    Output: -1\n    Explanation: The flower is watered on the first day but not on the second and third days, leading to its death.\n\n    Test case: 3\n    Input: 1 1 0\n    Output: 7\n    Explanation: The flower is watered on the first and second days (grows by 5 cm), and not watered on the third day, so it does not die.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for checking consecutive days without watering and handles multiple test cases independently.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 9, "round": 348, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains the only integer n (1 \u2264 n \u2264 100).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (a_i = 0 or a_i = 1). If a_i = 1, the flower is watered in the i-th day, otherwise it is not watered.\n\nOutput\n\nFor each test case print a single integer k \u2014 the flower's height after n days, or -1, if the flower dies.\n\nExample\n\nInput\n\n\n4\n3\n1 0 1\n3\n0 1 1\n4\n1 0 0 1\n1\n0\n\n\nOutput\n\n\n3\n7\n-1\n1", "mutate_method": "rephrase_one", "parent_index": 64}
