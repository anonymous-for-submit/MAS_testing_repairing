{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of three positive integers with each integer being distinct, ensuring no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. Unfortunately, Polycarp lost the array a, but he only has the array b left, so help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of three positive integers with each integer being distinct, ensuring no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. Unfortunately, Polycarp lost the array a, but he only has the array b left, so help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers with each integer being distinct, ensuring no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order. By this method, he got an array b containing 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. Unfortunately, Polycarp lost the array a, but he only has the array b left, so help him to restore the array a. Assume that each integer in the array a is distinct.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of three positive integers with each integer being distinct, ensuring no repeated values. He listed the sums of all non-empty subsequences of this array, arranged them in ascending order, and got an array b containing 7 integers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. Unfortunately, Polycarp lost the array a, but he only has the array b left, so help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The second smallest element in b is the second smallest number in a\n        a2 = b[1]\n        # The largest element in b is the sum of all three elements in a\n        sum_a = b[6]\n        # Calculate the third element in a\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three distinct integers from the given array of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A list of lists, where each inner list contains the three integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The second smallest element in b is another original integer\n        a2 = b[1]\n        # The largest element in b is the sum of all three original integers\n        sum_all = b[-1]\n        # Calculate the third integer\n        a3 = sum_all - (a1 + a2)\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty subsequences of array a.\n\n    Returns:\n        Tuple[int, int, int]: A tuple containing the three distinct integers of the original array a.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of array a.\n    a1, a2, a3 = b[0], b[1], b[2]\n    # The largest number in b is the sum of all three elements of a.\n    sum_a = b[6]\n    # Reconstruct the original array a using the properties.\n    return (a1, a2, sum_a - a1 - a2)\n\ndef main():\n    \"\"\"Main function to handle multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three distinct positive integers from the given sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sums of non-empty subsequences.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The sum of the other two elements in a\n        sum_a2_a3 = sum_a - a1\n        \n        # Find the other two elements\n        # We know that b[1] is either a1 + a2 or a1 + a3\n        # We know that b[2] is either a1 + a2 or a1 + a3\n        # We know that b[3] is either a2 + a3\n        # We can deduce a2 and a3 from these values\n        a2 = b[1] - a1\n        a3 = sum_a2_a3 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the sorted array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three elements in b are the individual elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest element in b is the sum of all three elements in a\n        sum_a = b[6]\n        # Deduce the original array a\n        a = [a1, a2, sum_a - a1 - a2]\n        results.append(a)\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    result = restore_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the given sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2_a3 = b[-2]\n        \n        # Deduce the original array a\n        a3 = sum_a - a1\n        a2 = sum_a2_a3 - a3\n        \n        # Append the result for the current test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = restore_array(n, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is the smallest number in a\n        a1 = b[0]\n        # The largest element is the sum of all elements in a\n        a1_plus_a2_plus_a3 = b[6]\n        # The second largest element is the sum of the two largest numbers in a\n        a2_plus_a3 = b[5]\n        \n        # Deduce the original elements of array a\n        a3 = a1_plus_a2_plus_a3 - a2_plus_a3\n        a2 = a2_plus_a3 - a3\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\ndef restore_array_from_sums(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' of sums.\n\n    Args:\n        b (list[int]): A list of 7 integers representing the sums of all non-empty\n                       subsequences of the original array 'a', sorted in ascending order.\n\n    Returns:\n        tuple[int, int, int]: A tuple containing the three integers of the original array 'a'.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a.\n    # The largest number in b is the sum of all three elements of a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest number in array a\n        a1 = b[0]\n        # The second smallest element in b is the second smallest number in array a\n        a2 = b[1]\n        # The largest element in b is the sum of all three numbers in array a\n        sum_a = b[6]\n        # Calculate the third number in array a\n        a3 = sum_a - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    n = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    # Get the results\n    results = restore_original_array(test_cases)\n    # Print each result\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of reconstructed arrays a for each test case.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array b to identify the smallest three numbers and the largest number\n        sorted_case = sorted(case)\n        \n        # The smallest three numbers are the individual elements of array a\n        a1 = sorted_case[0]\n        a2 = sorted_case[1]\n        a3 = sorted_case[2]\n        \n        # The largest number in b is the sum of all three elements of a\n        # We don't need to use it directly as we already have a1, a2, a3\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = reconstruct_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three distinct integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is consistent and correct for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format consistency\n- Optimize for large integer values\n- Provide clear documentation and examples\nWe will solve the problem by leveraging the properties of the sums of non-empty subsequences of a three-element array. Given the sorted array b of 7 elements, the smallest element is the smallest number in the original array a, and the largest element is the sum of all three numbers. The second smallest element in b is the second smallest number in a. By using these properties, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, with no repeated values.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n    'sorted array b': means that the array b is arranged in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a consists of exactly three elements, each greater than zero.\n    '7 integers': refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    'largest': refers to the largest element in array b, which is the sum of all three elements in array a.\n\n# [code logic]\n1. For each test case, read the 7 integers from array b.\n2. Identify the smallest element in b as the smallest element in a (let's call it a1).\n3. Identify the largest element in b as the sum of all three elements in a (let's call it sum_a).\n4. The second smallest element in b is the second smallest number in a (let's call it a2).\n5. Calculate the third element in a (a3) using the formula: a3 = sum_a - a1 - a2.\n6. Output the three elements a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 2 999999998 999999999 999999999 1000000000 = 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest is 1000000000. The third element is calculated as 1000000000 - 1 - 1 = 999999998.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a is equal to one of these values.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 5. The third element is calculated as 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a given list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide clear and correct output for each test case.\n- Include comments in the code to explain the logic.\n- Optimize the solution for performance with large inputs.\nWe will use the property that the smallest element in the array b is one of the original integers, and the largest element is the sum of all three original integers. By analyzing the sorted array b, we can deduce the original array a by using the smallest, second smallest, and largest values from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': means calculating the sum of each possible combination of elements in array a.\n    'arranged in ascending order': means sorting the sums from smallest to largest.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the original integers in array a.\n    2. Identify the largest element in array b, which is the sum of all three integers in array a.\n    3. Use the second smallest element in array b to deduce another integer from array a.\n    4. Calculate the third integer by subtracting the smallest and second smallest elements from the largest element.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the largest is 1000000000, and the second smallest is also 1. The third integer is calculated as 1000000000 - (1 + 1) = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each integer in array a is 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the largest is 5, and the second smallest is 2. The third integer is calculated as 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements from array b will suffice to deduce array a correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from the given sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed.\nrequirement pool:\n- Implement the main algorithm to restore the original array from subsequence sums\n- Ensure the solution handles large input values efficiently\n- Optimize the code for scalability across multiple test cases\n- Validate the output format for each test case\n- Provide documentation for the solution approach\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n    'ascending order': means the array b is sorted from smallest to largest.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': means we need to calculate the sum of each possible combination of elements in array a.\n    'arranged in ascending order': means the array b is sorted from smallest to largest.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n    3. Identify the largest number in b, which is the sum of all three elements of a.\n    4. Use these properties to reconstruct the original array a.\n    5. Print the reconstructed array a for each test case.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: The smallest three numbers are 1, and the largest number is 3, which is the sum of all three elements.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3, and the largest number is 7, which is the sum of all three elements.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: The smallest three numbers are all equal to 300000000, and the largest number is 900000000, which is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number in b will handle these cases correctly.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three distinct integers from the sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The integers are large, so the solution must be optimized for performance and accuracy.\nrequirement pool:\n- Develop an algorithm to restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and maintainable code.\n- Include comments and documentation for better understanding.\nWe will use a simple mathematical approach to reconstruct the original array from the given sums. The smallest number in the array b is the smallest element of the original array a. The largest number in array b is the sum of all elements of a. By subtracting the smallest element from the largest, we can find the sum of the other two elements. Using these insights, we can efficiently determine the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': Each integer in the array a is unique, meaning no repeated values.\n    'non-empty subsequences': These are all possible combinations of the elements in array a, excluding the empty set.\n    'sums of all non-empty subsequences': This refers to the sum of each possible non-empty combination of elements from array a.\n\n# [phrase showing quantity relationship]\n    'three positive integers': This indicates that array a consists of exactly three elements, each greater than zero.\n    '7 integers': This indicates that array b contains exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': The smallest number in array b is the smallest element in array a.\n    'largest': The largest number in array b is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n2. Identify the largest element in array b, which is the sum of all elements in array a.\n3. Subtract the smallest element from the largest to find the sum of the other two elements in array a.\n4. Use the remaining elements in array b to deduce the individual values of the other two elements in array a.\n5. Return the three elements of array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, and their sums match the pattern described.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The sum of the other two elements is 6, which can be split into 2 and 4.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, and their sums match the pattern described.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by identifying the smallest and largest values and deducing the remaining values accordingly.\n", "requirement analysis:\nThe problem requires restoring the original array of three distinct integers from the given sums of all non-empty subsequences. The key is to identify the smallest elements in the sorted array b, which correspond to the individual elements of array a, and then use the largest element in b to deduce the sum of all three elements in a.\nrequirement pool:\n- Implement the main logic to restore array a from array b\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the solution for large integer values\n- Validate the output format for each test case\n- Provide documentation for the solution approach\nWe will implement a function that takes the sorted array b and deduces the original array a. The smallest three elements in b are the individual elements of a, and the largest element in b is the sum of all three elements in a. By subtracting the smallest elements from the largest, we can restore the original array. This approach is efficient and handles up to 5000 test cases as required.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': Each integer in the array a is unique, meaning no repeated values.\n    'non-empty subsequences': These are combinations of the array elements where at least one element is included.\n    'sorted array b': The array b is the result of summing all non-empty subsequences of array a and sorting them in ascending order.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three integers.\n    '7 integers': The array b contains exactly seven integers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest elements in the sorted array b, which correspond to the individual elements of a.\n    'largest': Refers to the largest element in the sorted array b, which is the sum of all three elements in a.\n\n# [code logic]\n1. For each test case, read the sorted array b of 7 integers.\n2. Identify the smallest three elements in b, which are the individual elements of a.\n3. Identify the largest element in b, which is the sum of all three elements in a.\n4. Use the largest element to verify and deduce the original array a by subtracting the smallest elements from it.\n5. Return or print the deduced array a.\n\n# [edge case]\n    Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element in a is 1.\n    \n    Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three elements are 1, 2, and 3. The largest element is 7, which is the sum of all three elements.\n    \n    Case 3: b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical; hence each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three elements and using the largest element to deduce a will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three distinct integers from a given array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that each test case is processed accurately and quickly. The constraints on the input guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Provide clear and accurate output for each test case\n- Optimize the solution for large integer values\n- Allow flexibility in output format if multiple solutions exist\nWe will implement a function that takes the array b and deduces the original array a by leveraging the properties of the sums of non-empty subsequences. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these properties, we can efficiently restore the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': Each integer in the array a is unique, meaning no repeated values.\n    'non-empty subsequences': These are subsets of the array a that contain at least one element.\n    'sums of all non-empty subsequences': This refers to the sum of each possible non-empty subset of the array a.\n\n# [phrase showing quantity relationship]\n    'three positive integers': The array a consists of exactly three integers, all greater than zero.\n    '7 integers': The array b contains exactly seven integers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified values to deduce the original array a:\n   - Let a1 be the smallest element in b.\n   - Let a3 be the largest element in b minus a1.\n   - Let a2 be the second largest element in b minus a3.\n5. Return the array [a1, a2, a3].\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1], and they match the pattern described.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the largest is 7 (sum of all), and the second largest is 6 (sum of two largest).\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are sums of subsequences of [1000000000, 1000000000, 1000000000].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by leveraging the properties of subsequence sums.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases, each with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the solution for speed and memory usage.\n- Provide detailed comments and documentation for the code.\n- Include additional test cases to verify edge cases.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 elements, the smallest element is the smallest number in a, the largest element is the sum of all elements in a, and the second largest element is the sum of the two largest numbers in a. By using these properties, we can deduce the original array a efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, with no repeated values.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n    'arranged in ascending order': means that the array b is sorted from smallest to largest.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a consists of exactly three integers, each greater than zero.\n    '7 integers': refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n2. Identify the largest element in array b, which is the sum of all elements in array a.\n3. Identify the second largest element in array b, which is the sum of the two largest elements in array a.\n4. Use these identified values to deduce the original elements of array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so the original array a consists of three identical numbers.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest number is 1, the largest sum is 7, and the second largest sum is 6. Thus, a = [1, 2, 4].\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so the original array a consists of three identical numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these scenarios by leveraging the properties of sums and distinctness.\n", "requirement analysis:\nThe problem requires restoring an original array of three distinct integers from the sums of its non-empty subsequences. The key is to identify the smallest three numbers in the sorted array b, which correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a.\nrequirement pool:\n- Implement the algorithm to restore array a from array b\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the solution for large integer values\n- Validate the output format for each test case\n- Provide documentation for the solution approach\nWe will solve the problem by identifying the three smallest numbers in the sorted array b, which correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a. By using these properties, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in array a is unique, no repeated values.\n    'non-empty subsequences': refers to all possible combinations of elements from array a, excluding the empty set.\n\n# [phrase showing quantity relationship]\n    'sum': indicates the addition of elements in the subsequences to form array b.\n    'arranged in ascending order': means the elements in array b are sorted from smallest to largest.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest three numbers in array b, which correspond to the individual elements of array a.\n    2. The largest number in array b is the sum of all three elements of array a.\n    3. Use these properties to reconstruct array a for each test case.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = a = [999999998, 1, 1]\n    Explanation: The smallest three numbers are 1, 1, and 2. The largest number is the sum of all three elements.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = a = [300000000, 300000000, 300000000]\n    Explanation: All elements are the same in this case. The largest number is the sum of all three elements.\n    \n    b = [1, 2, 2, 3, 3, 4, 5] = a = [1, 2, 2]\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using the largest number as the sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three distinct integers from the given sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid outputs if possible\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 elements, the smallest element is the smallest number in the original array a, and the largest element is the sum of all three numbers in a. The second smallest element in b is the second smallest number in a. By using these properties, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique, with no repeated values.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n    'arranged in ascending order': means that the array b is sorted from smallest to largest.\n\n# [phrase showing quantity relationship]\n    'three positive integers': indicates that the array a consists of exactly three integers, each greater than zero.\n    '7 integers': refers to the number of elements in array b, which corresponds to the number of non-empty subsequences of a three-element array.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b as the smallest number in array a.\n3. Identify the largest element in b as the sum of all three numbers in array a.\n4. The second smallest element in b is the second smallest number in array a.\n5. Calculate the third number in array a by subtracting the sum of the first two identified numbers from the largest element in b.\n6. Output the three numbers of array a for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, and their sums are consistent with the properties of subsequences.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest, second smallest, and largest elements are used to reconstruct array a.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, and their sums are consistent with the properties of subsequences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic is sufficient to reconstruct array a from b by leveraging the properties of subsequences and their sums.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Develop an algorithm to reconstruct the array a from array b\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the solution for large integer values\n- Provide clear and concise output for each test case\n- Consider edge cases and ensure robustness\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of array a. The largest number in b is the sum of all three elements of a. By using these properties, we can efficiently reconstruct the array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'distinct': means that each integer in the array a is unique and not repeated.\n    'non-empty subsequences': refers to all possible combinations of the elements in array a, excluding the empty set.\n    Explanation: The requirement involves reconstructing an array of three distinct integers from a given array of sums of its non-empty subsequences.\n\n# [phrase showing quantity relationship]\n    'sum': refers to the addition of elements in the array a to form subsequences.\n    Explanation: The largest number in array b is the sum of all three elements in array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest three numbers in the sorted array b, which correspond to the individual elements of array a.\n    Explanation: The smallest numbers in b are the individual elements of a.\n\n# [code logic]\n    1. For each test case, sort the array b.\n    2. Identify the smallest three numbers in b as the individual elements of array a.\n    3. The largest number in b is the sum of all three elements of a.\n    4. Return the three integers as array a.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest three numbers are 1, 1, and 999999998. The largest number is the sum of these three numbers.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sum is the largest number.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is their sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and selecting elements will handle all cases correctly.\n"], "scores": [], "pass_results": [true, false, true, false, true, true, false, true, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 651, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 399}
