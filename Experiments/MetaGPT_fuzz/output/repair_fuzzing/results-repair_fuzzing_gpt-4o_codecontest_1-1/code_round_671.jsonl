{"name": "1579_F. Array Stabilization (AND version)", "description": "You are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only. Note that in this problem, unlike the others, the array indexes are numbered from zero, not from one.\n\nIn one step, the array a is replaced by another array of length n according to the following rules: \n\n  1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells. The elements of this array can be defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n. \n\nIt means that the whole array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$\n\n  2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. \n\n\n\nFor example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1].\n\nThe process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.", "tags": ["brute force", "graphs", "math", "number theory", "shortest paths"], "difficulty": 12, "id": 1579, "sample_io": [{"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n3\n-1\n0\n"]}], "test_list": [{"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 0 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n3\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["-1\n1\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 1 0\n1 1\n0\n", "output": ["1\n2\n1\n2\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 3\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 4\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n1\n-1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 2\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["-1\n1\n2\n1\n0\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 0 0 1\n1 1\n0\n", "output": ["-1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 0 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n0\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 3\n0 1 0\n5 3\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n-1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n1\n1\n-1\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 0 0 1\n1 1\n0\n", "output": ["-1\n1\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 3\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 2\n1 1 1 1 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n4\n1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["-1\n1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n1\n2\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 2\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n0\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 0\n5 2\n1 0 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n3\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["0\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 2\n1 0 0 0 0\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["1\n1\n1\n0\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 0 0 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n2\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 3\n0 1 0\n5 3\n1 1 0 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n-1\n3\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 3\n1 1 1 0 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n-1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 2\n1 1 1 1 0\n4 2\n0 0 0 1\n1 1\n0\n", "output": ["1\n0\n4\n1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 1\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["-1\n2\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 1\n5 2\n1 1 0 0 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n2\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 1\n0 1 0 0\n1 1\n1\n", "output": ["1\n-1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n3\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 1 1\n1 1\n0\n", "output": ["1\n2\n1\n3\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 4\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n3\n1\n0\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["-1\n1\n2\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 1 0\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 4\n1 1 1 1 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n-1\n-1\n0\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 2\n0 0 0 1\n1 1\n0\n", "output": ["-1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 0 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n0\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 1\n5 2\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 3\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n1\n", "output": ["1\n2\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 3\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n2\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["0\n-1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 2\n1 1 1 1 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n-1\n4\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 4\n1 1 0 0 0\n4 3\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n2\n2\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n1 1 0 0\n1 1\n0\n", "output": ["0\n1\n1\n2\n0\n"]}, {"input": "5\n2 1\n1 0\n3 3\n0 1 0\n5 3\n1 1 0 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["1\n-1\n3\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 3\n1 1 1 0 0\n4 1\n0 1 0 1\n1 1\n1\n", "output": ["0\n-1\n2\n1\n-1\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 1 1 1 0\n4 1\n0 1 0 0\n1 1\n1\n", "output": ["0\n-1\n4\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 1\n0 0 0 0\n1 1\n1\n", "output": ["1\n-1\n1\n0\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 1 1\n1 1\n0\n", "output": ["1\n1\n1\n3\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n1 1 0\n5 3\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n2\n2\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["0\n-1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 1 0\n5 2\n1 1 1 0 1\n4 2\n0 0 0 0\n1 1\n0\n", "output": ["1\n1\n4\n0\n0\n"]}, {"input": "5\n2 2\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 1\n0 0 0 0\n1 1\n1\n", "output": ["-1\n-1\n1\n0\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 1\n1 1 0 0 0\n4 3\n0 1 1 1\n1 1\n0\n", "output": ["1\n1\n2\n3\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 4\n1 1 0 0 0\n4 2\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n2\n1\n-1\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 1 1\n1 1\n0\n", "output": ["-1\n1\n1\n3\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n3\n1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 2\n0 1 0\n5 3\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["-1\n1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 0 0\n5 3\n0 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["-1\n0\n1\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 4\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n1\n-1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 2\n1 1 1 0 1\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["-1\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n1 1 0\n5 4\n1 1 1 1 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n-1\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 5\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n-1\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 0 0\n5 2\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["0\n0\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 3\n1 1 1 1 0\n4 4\n0 1 0 0\n1 1\n1\n", "output": ["1\n-1\n4\n-1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 4\n0 0 0 0 0\n4 3\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n0\n2\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 1\n5 4\n1 1 0 0 0\n4 2\n1 1 0 0\n1 1\n1\n", "output": ["-1\n2\n2\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 1\n5 3\n1 0 0 0 0\n4 4\n1 1 0 0\n1 1\n1\n", "output": ["-1\n2\n1\n-1\n-1\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 5\n1 1 1 1 0\n4 1\n0 1 0 0\n1 1\n0\n", "output": ["0\n-1\n-1\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 1\n1 1 1\n5 4\n1 1 0 0 0\n4 2\n1 1 0 0\n1 1\n1\n", "output": ["1\n-1\n2\n1\n-1\n"]}, {"input": "5\n2 2\n0 1\n3 3\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n1 1 0 1\n1 1\n0\n", "output": ["-1\n-1\n1\n3\n0\n"]}, {"input": "5\n2 2\n1 0\n3 3\n0 1 0\n5 5\n1 1 1 1 0\n4 1\n0 1 0 0\n1 1\n0\n", "output": ["-1\n-1\n-1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 1\n1 1 0 0 0\n4 1\n0 1 0 1\n1 1\n1\n", "output": ["1\n0\n2\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 1\n1 1 0 0 0\n4 1\n0 1 1 1\n1 1\n1\n", "output": ["1\n0\n2\n3\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 1\n1 1 0 0 0\n4 1\n0 1 1 1\n1 1\n0\n", "output": ["1\n0\n2\n3\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 0 0\n5 1\n1 1 0 0 0\n4 1\n0 1 1 1\n1 1\n0\n", "output": ["0\n0\n2\n3\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 3\n1 1 1 1 0\n4 1\n1 1 0 1\n1 1\n0\n", "output": ["1\n1\n4\n3\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 0 0 1\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["0\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n1 0 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["0\n2\n1\n1\n0\n"]}, {"input": "5\n2 2\n1 0\n3 3\n0 1 0\n5 1\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["-1\n-1\n4\n1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n1 1 0 1\n1 1\n1\n", "output": ["-1\n1\n1\n3\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 0\n5 1\n1 0 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n2\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 0 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["0\n0\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 0 0\n5 2\n1 0 0 0 0\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["1\n0\n1\n0\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 1\n5 2\n1 1 0 0 1\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n2\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 0 1 1 0\n4 1\n1 1 0 1\n1 1\n0\n", "output": ["0\n-1\n2\n3\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 1 0\n4 1\n0 1 0 0\n1 1\n1\n", "output": ["1\n-1\n3\n1\n-1\n"]}, {"input": "5\n2 2\n0 0\n3 2\n0 1 1\n5 4\n1 1 0 0 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n3\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 1\n1 1 0 0 0\n4 3\n0 1 1 0\n1 1\n0\n", "output": ["1\n2\n2\n2\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n1 1 0\n5 4\n1 1 0 0 0\n4 3\n1 1 0 0\n1 1\n1\n", "output": ["-1\n2\n2\n2\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 0\n5 1\n1 1 0 0 0\n4 3\n1 1 0 0\n1 1\n0\n", "output": ["0\n1\n2\n2\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 1\n1 1 0 0 0\n4 3\n0 1 1 1\n1 1\n1\n", "output": ["1\n1\n2\n3\n-1\n"]}, {"input": "5\n2 2\n0 1\n3 3\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["-1\n-1\n1\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 3\n1 1 1 0 0\n4 1\n1 1 0 0\n1 1\n0\n", "output": ["0\n-1\n2\n2\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 0 0\n5 3\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n1\n", "output": ["1\n0\n1\n1\n-1\n"]}, {"input": "5\n2 2\n1 0\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["-1\n-1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 3\n1 1 1 1 0\n4 4\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 1 0\n5 2\n1 1 1 0 0\n4 1\n0 0 0 0\n1 1\n0\n", "output": ["1\n1\n2\n0\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n-1\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 0 0\n5 1\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n0\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 1\n1 1 0 0 1\n4 1\n0 1 0 1\n1 1\n1\n", "output": ["1\n0\n3\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 3\n0 1 0\n5 4\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["-1\n-1\n3\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 1\n0 1 0\n5 5\n0 0 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n0\n1\n-1\n"]}, {"input": "5\n2 1\n1 0\n3 1\n1 1 0\n5 4\n1 1 1 1 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n-1\n-1\n0\n"]}, {"input": "5\n2 2\n1 0\n3 2\n1 1 1\n5 4\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["-1\n-1\n2\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 3\n1 1 0 1 0\n4 4\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n3\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 0\n5 1\n1 0 1 0 0\n4 2\n0 1 0 1\n1 1\n1\n", "output": ["0\n1\n1\n-1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 1\n5 3\n0 0 1 0 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n0 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["0\n1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 3\n0 0 0\n5 3\n1 0 0 0 0\n4 3\n0 1 0 1\n1 1\n1\n", "output": ["0\n0\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 1\n1 1 0\n5 2\n1 0 0 1 1\n4 3\n0 1 1 0\n1 1\n0\n", "output": ["0\n2\n2\n2\n0\n"]}, {"input": "5\n2 1\n1 0\n3 1\n1 1 0\n5 4\n1 1 1 1 1\n4 2\n0 1 1 0\n1 1\n0\n", "output": ["1\n2\n-1\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n1 1 0\n5 2\n1 0 0 1 1\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["1\n2\n2\n0\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n1 1 0\n5 2\n1 0 0 1 1\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["0\n2\n2\n0\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["1\n-1\n1\n0\n0\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 0 0 1\n1 1\n1\n", "output": ["-1\n1\n3\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 1 0 1\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n4\n1\n-1\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 1 1 1 0\n4 1\n1 1 0 1\n1 1\n0\n", "output": ["0\n-1\n4\n3\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 0 0\n5 3\n1 1 1 0 0\n4 1\n0 1 0 1\n1 1\n1\n", "output": ["0\n0\n2\n1\n-1\n"]}, {"input": "5\n2 2\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 3\n1 1 1 0\n1 1\n0\n", "output": ["-1\n2\n1\n3\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 3\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 4\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 2\n1 0 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 3\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 0 1 1 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 3\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 1\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 2\n1 0\n3 2\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["-1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 0 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 1 0 1\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n4\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 3\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n-1\n4\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 1 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n-1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 1 1 0\n4 1\n0 0 0 1\n1 1\n0\n", "output": ["0\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 1\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 1 0\n4 4\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n3\n-1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["-1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 1 0\n5 2\n1 1 1 0 0\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 0 1 1 1\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 0 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 3\n1 1 1 1 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n4\n1\n0\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 3\n0 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["-1\n1\n1\n1\n-1\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 1 1 1 0\n4 1\n0 1 0 0\n1 1\n0\n", "output": ["0\n-1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 2\n0 1 0\n5 2\n1 1 1 1 0\n4 2\n0 0 0 1\n1 1\n0\n", "output": ["0\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 1\n5 2\n1 1 0 0 0\n4 1\n0 1 0 0\n1 1\n0\n", "output": ["1\n-1\n1\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 1\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 0 1 1 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["0\n-1\n2\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 1\n0 1 0\n5 2\n0 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 2\n0 1 1\n5 2\n1 1 0 0 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n2\n2\n-1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 1\n0 1 0\n5 2\n0 1 0 0 0\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["1\n1\n1\n0\n0\n"]}, {"input": "5\n2 2\n0 0\n3 2\n0 0 1\n5 2\n1 1 0 0 1\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["0\n1\n2\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 1 1\n1 1\n0\n", "output": ["1\n1\n3\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 0 0\n4 2\n0 1 1 1\n1 1\n0\n", "output": ["1\n1\n1\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 0 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 3\n1 1 1 0\n1 1\n0\n", "output": ["1\n2\n1\n3\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 2\n1 1 0 1 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n0 0 0 0\n1 1\n0\n", "output": ["1\n1\n1\n0\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n1 1 0\n5 2\n1 0 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n-1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n0\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 3\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 3\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n0\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 1 0\n5 2\n1 1 1 1 0\n4 2\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n4\n-1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 0 0\n5 2\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n0\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 1\n5 2\n1 1 0 0 0\n4 1\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 1 0\n5 2\n1 1 1 0 1\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 0 1\n5 2\n1 1 0 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n1 0\n3 1\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n1\n1\n0\n"]}, {"input": "5\n2 2\n0 0\n3 3\n0 1 0\n5 1\n1 0 1 1 0\n4 1\n0 1 0 1\n1 1\n1\n", "output": ["0\n-1\n2\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 1 0\n1 1\n0\n", "output": ["1\n1\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n1\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n1 1 0\n5 2\n1 0 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n2\n1\n1\n0\n"]}, {"input": "5\n2 1\n1 0\n3 2\n0 0 0\n5 2\n1 1 1 1 0\n4 3\n0 1 0 0\n1 1\n0\n", "output": ["1\n0\n4\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n1\n", "output": ["1\n1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 3\n0 1 0\n5 3\n1 1 1 1 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n-1\n4\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 4\n1 0 0 0 0\n4 3\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n1\n2\n-1\n"]}, {"input": "5\n2 1\n0 1\n3 2\n1 0 0\n5 2\n1 1 0 0 1\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 0\n5 2\n1 1 0 0 0\n4 3\n1 0 0 0\n1 1\n0\n", "output": ["0\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n0 0 1\n5 2\n1 1 1 0 0\n4 3\n0 1 0 0\n1 1\n1\n", "output": ["1\n1\n2\n1\n-1\n"]}, {"input": "5\n2 1\n1 0\n3 1\n0 1 0\n5 2\n1 1 1 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 1\n1 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 0\n1 1\n0\n", "output": ["1\n2\n3\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 3\n1 1 1 0 0\n4 3\n0 1 0 1\n1 1\n1\n", "output": ["1\n1\n2\n1\n-1\n"]}, {"input": "5\n2 1\n1 1\n3 1\n0 1 0\n5 4\n1 0 0 0 0\n4 2\n1 1 0 0\n1 1\n1\n", "output": ["-1\n1\n1\n1\n-1\n"]}, {"input": "5\n2 1\n0 0\n3 1\n0 1 0\n5 3\n1 1 0 0 0\n4 3\n1 0 0 0\n1 1\n0\n", "output": ["0\n1\n1\n1\n0\n"]}, {"input": "5\n2 1\n0 1\n3 2\n0 1 0\n5 1\n1 1 0 0 0\n4 3\n0 1 0 1\n1 1\n0\n", "output": ["1\n1\n2\n1\n0\n"]}], "task_id": "codecontest/18", "prompt": "You are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only, noting that in this problem, unlike the others, the array indexes are numbered from zero, not from one. In one step, the array a is replaced by another array of length n according to the following rules: 1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells, with elements defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n; hence, the array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$ 2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. For example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1]. The process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.", "repair_prompt": ["You are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only, noting that in this problem, unlike the others, the array indexes are numbered from zero, not from one. In one step, the array a is replaced by another array of length n according to the following rules: 1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells, with elements defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n; hence, the array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$ 2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. For example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1]. The process ends when the array stops changing. For a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.", "You are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only, noting that in this problem, unlike the others, the array indexes are numbered from zero, not from one. In one step, the array a is replaced by another array of length n according to the following rules: 1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells. The elements in this new array are defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}. Here, (i + n - d) mod n is the remainder of integer division of i + n - d by n; hence, the array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$ 2. Then each element of the array a_i is replaced by a_i  \\&  a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. For example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0  \\&  1, 0  \\&  0, 1  \\&  0, 1  \\&  1], that is [0, 0, 0, 1]. The process ends when the array stops changing. For a given array a, you need to determine whether it will consist of only zeros at the end of the process. If yes, you should also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.", "You are given an array a[0 \u2026 n - 1] = [a_0, a_1, \u2026, a_{n - 1}] of zeroes and ones only, noting that in this problem, unlike the others, the array indexes are numbered from zero, not from one. In one step, the array a is replaced by another array of length n according to the following rules: 1. First, a new array a^{\u2192 d} is defined as a cyclic shift of the array a to the right by d cells, with elements defined as a^{\u2192 d}_i = a_{(i + n - d) mod n}, where (i + n - d) mod n is the remainder of integer division of i + n - d by n; hence, the array a^{\u2192 d} can be represented as a sequence $$$a^{\u2192 d} = [a_{n - d}, a_{n - d + 1}, \u2026, a_{n - 1}, a_0, a_1, \u2026, a_{n - d - 1}]$$$ 2. Then each element of the array a_i is replaced by a_i \\& a^{\u2192 d}_i, where \\& is a logical \"AND\" operator. For example, if a = [0, 0, 1, 1] and d = 1, then a^{\u2192 d} = [1, 0, 0, 1] and the value of a after the first step will be [0 \\& 1, 0 \\& 0, 1 \\& 0, 1 \\& 1], that is [0, 0, 0, 1]. The process ends when the array stops changing, and for a given array a, determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef steps_to_all_zeros(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the number of steps required for each test case to make the array all zeros.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples, each containing:\n            - n (int): Size of the array.\n            - d (int): Cyclic shift offset.\n            - a (List[int]): The array of zeroes and ones.\n\n    Returns:\n        List[int]: List of results for each test case, where each result is the number of steps\n                   required to make the array all zeros, or -1 if it is not possible.\n    \"\"\"\n    results = []\n    \n    for n, d, a in test_cases:\n        if all(x == 0 for x in a):\n            results.append(0)\n            continue\n        \n        steps = 0\n        while True:\n            # Perform cyclic shift\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            # Apply logical AND operation\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            \n            if new_a == a:\n                results.append(-1)\n                break\n            \n            a = new_a\n            steps += 1\n            \n            if all(x == 0 for x in a):\n                results.append(steps)\n                break\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().strip().split())\n        a = list(map(int, input().strip().split()))\n        test_cases.append((n, d, a))\n    \n    # Call the function and print results\n    results = steps_to_all_zeros(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_test_cases(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Processes multiple test cases to determine the number of steps required for an array to become all zeros.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int]]]): List of test cases, each containing:\n            - n (int): Size of the array.\n            - d (int): Cyclic shift offset.\n            - a (List[int]): Array of zeroes and ones.\n\n    Returns:\n        List[int]: List of results for each test case, indicating the number of steps required or -1 if impossible.\n    \"\"\"\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            # Perform cyclic shift\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            # Perform logical AND operation\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            # Check if the array has become all zeros\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            # Check if no changes occur in an iteration\n            if new_a == a:\n                results.append(-1)\n                break\n            a = new_a\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n    \n    results = process_test_cases(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_steps_to_all_zeros(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Determine the number of steps required for each test case to make the array consist of only zeros.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int]]]): List of test cases, each containing:\n            - n (int): Size of the array.\n            - d (int): Cyclic shift offset.\n            - a (List[int]): The array of zeros and ones.\n\n    Returns:\n        List[int]: List of results for each test case, where each result is the number of steps\n                   required to make the array all zeros, or -1 if it is not possible.\n    \"\"\"\n    results = []\n    \n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            # Check if the array is already all zeros\n            if all(x == 0 for x in a):\n                results.append(steps)\n                break\n            \n            # Perform the cyclic shift\n            shifted_a = [a[(i + n - d) % n] for i in range(n)]\n            \n            # Apply the logical AND operation\n            new_a = [a[i] & shifted_a[i] for i in range(n)]\n            \n            # Check if the array has not changed\n            if new_a == a:\n                results.append(-1)\n                break\n            \n            # Update the array and increment the step counter\n            a = new_a\n            steps += 1\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().strip().split())\n        a = list(map(int, input().strip().split()))\n        test_cases.append((n, d, a))\n    \n    # Call the function and print results\n    results = find_steps_to_all_zeros(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_steps_to_zero(t: int, test_cases: List[tuple]) -> List[int]:\n    \"\"\"Find the number of steps required for each test case to make the array all zeros.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[tuple]): List of tuples, each containing:\n            - n (int): Size of the array.\n            - d (int): Cyclic shift offset.\n            - a (List[int]): The array of binary values.\n\n    Returns:\n        List[int]: List of results for each test case, where each result is the number of steps\n                   to make the array all zeros, or -1 if it cannot be done.\n    \"\"\"\n    results = []\n\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            # Perform cyclic shift\n            shifted_a = [a[(i + n - d) % n] for i in range(n)]\n            \n            # Apply logical AND operation\n            new_a = [a[i] & shifted_a[i] for i in range(n)]\n            \n            # Check if the array is all zeros\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            \n            # Check if the array has not changed\n            if new_a == a:\n                results.append(-1)\n                break\n            \n            # Update the array and increment step counter\n            a = new_a\n            steps += 1\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n    \n    # Call the function and print results\n    results = find_steps_to_zero(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_array(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Process each test case to determine the number of steps required for the array to become all zeros.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int]]]): List of test cases, each containing:\n            - n (int): Size of the array.\n            - d (int): Cyclic shift offset.\n            - a (List[int]): The array of zeroes and ones.\n\n    Returns:\n        List[int]: List of results for each test case, where each result is the number of steps\n                   required for the array to become all zeros, or -1 if it never becomes all zeros.\n    \"\"\"\n    results = []\n    \n    for n, d, a in test_cases:\n        if all(x == 0 for x in a):\n            results.append(0)\n            continue\n        \n        steps = 0\n        original_a = a[:]\n        while True:\n            steps += 1\n            # Perform cyclic shift\n            shifted_a = a[-d:] + a[:-d]\n            # Compute logical AND\n            new_a = [a[i] & shifted_a[i] for i in range(n)]\n            \n            if new_a == a:\n                results.append(-1)\n                break\n            \n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            \n            a = new_a\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n    \n    # Output interface\n    results = process_array(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_array(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Processes each test case to determine the number of steps required for the array to become all zeros.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: The size of the array.\n            - d: The cyclic shift offset.\n            - a: The array of zeroes and ones.\n\n    Returns:\n        A list of integers where each integer represents the number of steps required for the corresponding test case\n        to make the array consist of only zeros. If the array cannot become all zeros, returns -1 for that test case.\n    \"\"\"\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            # Perform cyclic shift\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            # Perform logical AND operation\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            # Check if the array is all zeros\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            # Check if no changes occur\n            if new_a == a:\n                results.append(-1)\n                break\n            # Update the array for the next iteration\n            a = new_a\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n    \n    results = process_array(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_array(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Processes each test case to determine the number of steps required for the array to become all zeros.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: The size of the array.\n            - d: The cyclic shift offset.\n            - a: The array of zeroes and ones.\n\n    Returns:\n        A list of integers where each integer represents the number of steps required for the array to become all zeros.\n        If the array cannot become all zeros, returns -1 for that test case.\n    \"\"\"\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            # Perform cyclic shift\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            # Apply logical AND operation\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            # Check if the array has stopped changing\n            if new_a == a:\n                results.append(-1)\n                break\n            # Check if the array is all zeros\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            # Update the array for the next iteration\n            a = new_a\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n    \n    result = process_array(t, test_cases)\n    for res in result:\n        print(res)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_array(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Processes each test case to determine the number of steps required for the array to become all zeros.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, List[int]]]): A list of tuples, each containing:\n            - n (int): The size of the array.\n            - d (int): The cyclic shift offset.\n            - a (List[int]): The array of zeroes and ones.\n\n    Returns:\n        List[int]: A list of integers where each integer is the number of steps required for the array to become all zeros,\n                   or -1 if it will never become all zeros.\n    \"\"\"\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            # Perform the cyclic shift\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            # Perform the logical AND operation\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            # Check if the array is all zeros\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            # Check if no changes occur\n            if new_a == a:\n                results.append(-1)\n                break\n            # Update the array for the next iteration\n            a = new_a\n    return results\n\ndef main():\n    \"\"\"Main function to read input, process test cases, and print results.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().strip().split())\n        a = list(map(int, input().strip().split()))\n        test_cases.append((n, d, a))\n    \n    # Call the function and print results\n    results = process_array(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_steps_to_all_zeros(t: int, test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Find the number of steps required for each test case to make the array consist of only zeros.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int]]]): List of test cases, each containing:\n            - n (int): Size of the array.\n            - d (int): Cyclic shift offset.\n            - a (List[int]): Array of zeroes and ones.\n\n    Returns:\n        List[int]: List of results for each test case, where each result is the number of steps\n        required to make the array consist of only zeros, or -1 if it is impossible.\n    \"\"\"\n    results = []\n\n    for n, d, a in test_cases:\n        if all(x == 0 for x in a):\n            results.append(0)\n            continue\n\n        steps = 0\n        while True:\n            # Perform cyclic shift\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            # Apply logical AND operation\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n\n            if new_a == a:\n                results.append(-1)\n                break\n\n            a = new_a\n\n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n\n    # Call the function and print results\n    results = find_steps_to_all_zeros(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef process_test_cases(test_cases: List[Tuple[int, int, List[int]]]) -> List[int]:\n    \"\"\"Process each test case to determine the number of steps required for the array to become all zeros.\n\n    Args:\n        test_cases: A list of tuples, each containing:\n            - n: The size of the array.\n            - d: The cyclic shift offset.\n            - a: The binary array.\n\n    Returns:\n        A list of integers where each integer represents the number of steps required for the corresponding test case\n        to make the array all zeros, or -1 if it is not possible.\n    \"\"\"\n    results = []\n    \n    for n, d, a in test_cases:\n        steps = 0\n        while any(a):\n            # Perform cyclic shift\n            shifted_a = [a[(i + n - d) % n] for i in range(n)]\n            \n            # Apply logical AND operation\n            a = [a[i] & shifted_a[i] for i in range(n)]\n            \n            steps += 1\n            \n            # Check if the array is all zeros\n            if not any(a):\n                results.append(steps)\n                break\n        else:\n            # If the loop completes without breaking, it means the array never became all zeros\n            results.append(-1)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        test_cases.append((n, d, a))\n    \n    results = process_test_cases(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires simulating a process where an array of binary values undergoes cyclic shifts and logical AND operations until it stabilizes. The challenge is to determine the number of steps required for the array to become all zeros or to identify if it never will. The solution must efficiently handle large arrays up to 10^6 elements, ensuring that the operations are performed within acceptable time limits.\nrequirement pool:\n- Implement the cyclic shift and AND operation efficiently.\n- Ensure the solution handles edge cases, such as arrays that never become all zeros.\n- Optimize the algorithm to reduce unnecessary computations.\n- Provide detailed comments and documentation for the code.\n- Include additional test cases to verify the solution's robustness.\nWe will implement a function that simulates the cyclic shift and logical AND operation on the array. The function will iterate until the array becomes all zeros or it is determined that it will never become all zeros. We will use efficient list operations to handle the cyclic shift and logical AND operations. The solution will be optimized to handle the maximum constraints efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to rotating the elements of the array to the right by a specified number of positions, wrapping around the end of the array back to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: This is a bitwise operation where each element of the array is combined with the corresponding element of the shifted array using the AND operation, resulting in a new array.\n\n# [phrase showing quantity relationship]\n    'number of steps'\n    Explanation: This refers to counting how many iterations are needed for the array to become all zeros or to determine that it will never become all zeros.\n\n# [degree adverb]\n    'only zeros'\n    Explanation: The requirement is to check if the array eventually consists entirely of zeros, which is the condition for stopping the process.\n\n# [code logic]\n1. Parse the input to get the number of test cases and details for each test case.\n2. For each test case, perform the following:\n   - Initialize a counter for steps.\n   - While the array contains any ones:\n     - Perform a cyclic shift on the array.\n     - Apply the logical AND operation between the original and shifted arrays.\n     - Increment the step counter.\n     - If the array does not change in an iteration, break and return -1.\n   - If the array becomes all zeros, return the step count.\n\n# [edge case]\n    Test case with an already zero array:\n    1 1\n    0\n    Expected output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Test case with no possible change:\n    3 1\n    1 1 1\n    Expected output: -1\n    Explanation: The cyclic shift and AND operation will not change any elements to zero.\n\n    Test case with minimal size and shift:\n    2 2\n    1 0\n    Expected output: 1\n    Explanation: After one step, the array becomes [0, 0].\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where the array is already all zeros or does not change:\n```python\ndef process_test_cases(test_cases):\n    results = []\n    for n, d, a in test_cases:\n        if all(x == 0 for x in a):\n            results.append(0)\n            continue\n        \n        steps = 0\n        while True:\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            \n            if new_a == a:\n                results.append(-1)\n                break\n            \n            a = new_a\n            steps += 1\n            \n            if all(x == 0 for x in a):\n                results.append(steps)\n                break\n    \n    return results\n```\n", "requirement analysis:\nThe problem requires an efficient algorithm to determine the number of steps needed for an array of zeros and ones to become all zeros after a series of transformations. The transformation involves cyclic shifts and logical AND operations. The solution must handle up to 10^6 elements across multiple test cases, ensuring performance and accuracy.\nrequirement pool:\n- Implement the main algorithm to perform cyclic shifts and logical AND operations.\n- Optimize the solution to handle large input sizes efficiently.\n- Ensure the solution provides correct output for all test cases.\n- Handle edge cases where the array does not change.\n- Document the code for better understanding and maintenance.\nWe will implement a function that performs the cyclic shift and logical AND operations iteratively until the array becomes all zeros or no further changes occur. The function will handle multiple test cases efficiently by processing each test case independently and using modular arithmetic for the cyclic shift. We will ensure the solution is optimized to handle the maximum constraints by using efficient data structures and minimizing unnecessary computations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to rotating the elements of the array to the right by a specified number of positions, wrapping around the end of the array to the beginning.\n\n    'logical AND'\n    Explanation: This is a bitwise operation where each bit of the output is 1 if the corresponding bits of both operands are 1, otherwise it is 0.\n\n# [phrase showing quantity relationship]\n    'number of steps': This refers to the count of iterations required for the array to become all zeros or to determine that it will never become all zeros.\n\n# [degree adverb] \n    'only': This indicates that the array must consist entirely of zeros for the process to be considered complete.\n\n# [code logic]\n1. For each test case, read the values of n (array size) and d (cyclic shift offset).\n2. Initialize a counter for steps.\n3. Perform the cyclic shift and logical AND operation iteratively:\n   - Compute the cyclic shift of the array.\n   - Perform element-wise logical AND between the original and shifted arrays.\n   - Check if the resulting array is all zeros.\n   - If yes, record the number of steps and break.\n   - If no changes occur in an iteration, break and return -1.\n4. Output the number of steps for each test case.\n\n# [edge case] \n    Case 1: n = 1, d = 1, a = [0] = 0\n    Explanation: The array is already all zeros, so no steps are needed. The expected output is 0.\n\n    Case 2: n = 3, d = 3, a = [1, 0, 1] = -1\n    Explanation: The cyclic shift will not change the array, and logical AND will not reduce any 1s to 0s. The expected output is -1.\n\n    Case 3: n = 5, d = 2, a = [1, 1, 0, 0, 0] = 2\n    Explanation: After two iterations, the array becomes all zeros. The expected output is 2.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where no changes occur in an iteration.\n    \n```python\ndef process_test_cases(test_cases):\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            if new_a == a:\n                results.append(-1)\n                break\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            a = new_a\n    return results\n```\nThis code handles each test case by performing cyclic shifts and logical AND operations until the array becomes all zeros or no changes occur.\n", "requirement analysis:\nThe problem requires simulating a process where an array of binary values is cyclically shifted and updated using a logical AND operation. The goal is to determine the number of steps required for the array to become all zeros or to identify if it never will. The constraints involve handling large input sizes efficiently, ensuring the solution is both time and space efficient.\nrequirement pool:\n- Implement the cyclic shift and AND operation efficiently.\n- Ensure the solution handles up to 10^6 elements within time limits.\n- Optimize the algorithm to minimize the number of steps required.\n- Provide clear and concise output for each test case.\n- Document the code for better understanding and maintenance.\nWe will implement a function that simulates the cyclic shift and logical AND operation on the array. The function will iterate until the array becomes all zeros or it is determined that it will never become all zeros. We will use efficient list operations to handle the cyclic shift and logical AND, ensuring the solution can handle the maximum constraints efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to rotating the array elements to the right by a specified number of positions, wrapping around the end of the array back to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: This is a bitwise operation where each element of the array is combined with the corresponding element of the shifted array using the AND operation, resulting in a new array.\n\n# [phrase showing quantity relationship]\n    'only zeros'\n    Explanation: The requirement is to determine if the array will eventually consist entirely of zeros after performing the operations. This means checking if all elements are zero at the end of the process.\n\n# [degree adverb]\n    'only'\n    Explanation: This indicates that the final array must consist entirely of zeros, with no ones remaining.\n\n# [code logic]\n    1. Parse the input to get the number of test cases and details for each test case.\n    2. For each test case, perform the following:\n        - Initialize a counter for steps.\n        - While the array contains any ones:\n            - Perform a cyclic shift on the array.\n            - Apply the logical AND operation between the original and shifted arrays.\n            - Increment the step counter.\n            - If the array does not change after a step, break and return -1.\n        - If the array becomes all zeros, return the step count.\n\n# [edge case]\n    Test case: [1, 0, 0, 0, 0] with d = 1\n    Expected output: 0\n    Explanation: The array already consists of only zeros except for one element, and shifting will not change this. The process ends immediately.\n\n    Test case: [0, 0, 0, 0] with d = 2\n    Expected output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Test case: [1, 1, 1, 1] with d = 4\n    Expected output: -1\n    Explanation: The cyclic shift will not change the array as it is a full rotation, and AND operation will keep it unchanged. Thus, it will never become all zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the array is already all zeros or cannot change:\n```python\ndef process_array(t, test_cases):\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            if all(x == 0 for x in a):\n                results.append(steps)\n                break\n            shifted_a = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & shifted_a[i] for i in range(n)]\n            if new_a == a:\n                results.append(-1)\n                break\n            a = new_a\n            steps += 1\n    return results\n```\n", "requirement analysis:\nThe problem requires implementing a cyclic shift and logical AND operation on an array of binary values. The solution must efficiently handle up to 10^6 elements across multiple test cases, ensuring that the process terminates when the array becomes all zeros or remains unchanged. The challenge lies in optimizing the algorithm to minimize the number of steps and handle edge cases where the array does not change.\nrequirement pool:\n- Implement the cyclic shift and AND operation efficiently.\n- Ensure the solution handles large input sizes within constraints.\n- Optimize the algorithm to minimize computational steps.\n- Provide clear and correct output for each test case.\n- Test the solution against various edge cases for robustness.\nWe will implement a function that performs a cyclic shift and logical AND operation on an array of binary values. The function will iterate until the array becomes all zeros or remains unchanged. We will use efficient list operations to handle large input sizes within constraints. The algorithm will be optimized to minimize computational steps by checking for early termination when the array does not change.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves moving elements of an array to the right by a specified number of positions, wrapping around the end of the array to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: The logical \"AND\" operator compares two binary values and returns 1 if both are 1, otherwise returns 0.\n\n# [phrase showing quantity relationship]\n    'only zeros'\n    Explanation: The requirement is to determine if the array will consist entirely of zeros after a series of operations. This can be implemented by checking if all elements in the array are zero.\n\n# [degree adverb]\n    'first time'\n    Explanation: The requirement is to find the number of steps it takes for the array to become all zeros for the first time. This involves tracking the number of iterations until the condition is met.\n\n# [code logic]\n    1. Parse the input to extract the number of test cases and details for each test case.\n    2. For each test case, perform the following:\n        - Initialize a counter for steps.\n        - While the array contains any 1s:\n            - Perform a cyclic shift on the array.\n            - Apply the logical \"AND\" operation between the original and shifted arrays.\n            - Increment the step counter.\n            - Check if the array has changed; if not, break and return -1.\n        - If the array becomes all zeros, return the step count.\n    3. Output the result for each test case.\n\n# [edge case]\n    Case 1: n = 1, d = 1, a = [0]\n    Expected output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Case 2: n = 2, d = 2, a = [1, 1]\n    Expected output: -1\n    Explanation: The cyclic shift will not change the array, and it will never become all zeros.\n\n    Case 3: n = 3, d = 1, a = [1, 0, 0]\n    Expected output: 1\n    Explanation: After one step, the array becomes [0, 0, 0].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for arrays that are initially all zeros or do not change after shifts.\n", "requirement analysis:\nThe problem requires simulating a process where an array of binary values is cyclically shifted and modified using a logical AND operation. The goal is to determine the number of steps required for the array to become all zeros or to identify if it never will. The constraints on input size necessitate an efficient algorithm, likely involving careful management of array operations and possibly leveraging mathematical insights to predict outcomes without exhaustive simulation.\nrequirement pool:\n- Implement the cyclic shift and AND operation efficiently.\n- Ensure the solution handles the maximum input size within time limits.\n- Optimize the algorithm to minimize unnecessary computations.\n- Provide clear documentation and comments within the code.\n- Include additional test cases to cover edge scenarios.\nWe will implement a function that simulates the cyclic shift and logical AND operation on the array. The function will iterate until the array becomes all zeros or it is determined that it will never become all zeros. We will use efficient list operations to handle the cyclic shift and logical AND operations. The solution will be optimized to handle large inputs by minimizing unnecessary computations and leveraging Python's built-in capabilities for list manipulation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to rotating the elements of the array to the right by a specified number of positions, wrapping around the end of the array to the beginning.\n\n    'logical AND'\n    Explanation: This is a bitwise operation where each bit of the output is 1 if the corresponding bits of both operands are 1, otherwise it is 0.\n\n# [phrase showing quantity relationship]\n    'number of steps': This refers to the count of iterations required for the array to become all zeros or to determine that it will never become all zeros.\n\n# [degree adverb] \n    'only': This indicates that the array must consist entirely of zeros, with no ones remaining.\n\n# [code logic]\n1. For each test case, read the values of n and d, and the array a.\n2. Initialize a counter for steps.\n3. While the array contains any 1s:\n   - Perform a cyclic shift of the array by d positions.\n   - Compute the logical AND of the original array and the shifted array.\n   - Increment the step counter.\n   - If the array does not change after an iteration, break and return -1.\n4. If the array becomes all zeros, return the step counter.\n\n# [edge case] \n    Case 1: n = 1, d = 1, a = [0] = 0\n    Explanation: The array is already all zeros, so no steps are needed. The expected output is 0.\n\n    Case 2: n = 3, d = 3, a = [1, 0, 1] = -1\n    Explanation: The cyclic shift by n results in no change, so the array will never become all zeros. The expected output is -1.\n\n    Case 3: n = 5, d = 2, a = [1, 0, 0, 0, 0] = 1\n    Explanation: After one shift and AND operation, the array becomes all zeros. The expected output is 1.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the array is already all zeros or when a full cycle results in no change.\n    \n```python\ndef process_test_cases(test_cases):\n    results = []\n    for n, d, a in test_cases:\n        if all(x == 0 for x in a):\n            results.append(0)\n            continue\n        \n        steps = 0\n        original_a = a[:]\n        while True:\n            steps += 1\n            shifted_a = a[-d:] + a[:-d]\n            new_a = [a[i] & shifted_a[i] for i in range(n)]\n            \n            if new_a == a:\n                results.append(-1)\n                break\n            \n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            \n            a = new_a\n        \n    return results\n```\nThis code handles edge cases by checking if the array is already all zeros at the start and by detecting when no further changes occur after an iteration.\n", "requirement analysis:\nThe problem requires an efficient algorithm to determine the number of steps needed for an array of binary values to become all zeros after cyclic shifts and logical AND operations. The solution must handle large inputs up to 10^6 elements and provide clear output for each test case.\nrequirement pool:\n- Develop an efficient algorithm to handle up to 10^6 elements.\n- Ensure the solution provides correct and clear output for each test case.\n- Optimize the algorithm to minimize computational steps.\n- Include detailed comments and documentation for clarity.\n- Implement additional test cases to ensure robustness.\nWe will implement a function that performs cyclic shifts and logical AND operations on the array until it becomes all zeros or stops changing. The function will efficiently handle large inputs using list operations and modular arithmetic. We will use Python's built-in capabilities without additional libraries, as they are sufficient for this task.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to rotating the elements of the array to the right by a specified number of positions, wrapping around the end of the array back to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: This is a bitwise operation where each element of the array is combined with the corresponding element of the shifted array using the AND operation, resulting in a new array.\n\n# [phrase showing quantity relationship]\n    'number of steps'\n    Explanation: This refers to counting how many iterations are needed for the array to become all zeros or stop changing. In code, this can be implemented by a loop that continues until the array is all zeros or no changes occur.\n\n# [degree adverb]\n    'only zeros'\n    Explanation: This means that the final array should consist entirely of zeros. In code, this can be checked by verifying if all elements in the array are zero.\n\n# [code logic]\n1. Initialize a counter for steps.\n2. Perform cyclic shift and logical AND operation on the array.\n3. Check if the array is all zeros; if yes, return the step count.\n4. If no changes occur in an iteration, return -1.\n5. Repeat until one of the above conditions is met.\n\n# [edge case]\n    Case 1: n = 1, d = 1, a = [0] => Expected output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Case 2: n = 3, d = 3, a = [1, 0, 1] => Expected output: -1\n    Explanation: The cyclic shift will not change the array, and logical AND will not reduce any 1s to 0s.\n\n    Case 3: n = 5, d = 1, a = [1, 1, 1, 1, 1] => Expected output: 5\n    Explanation: Each step reduces one 1 to 0 until all are zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef process_array(t, test_cases):\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            if new_a == a:\n                results.append(-1)\n                break\n            a = new_a\n    return results\n```\n", "requirement analysis:\nThe requirements focus on processing arrays of zeroes and ones with cyclic shifts and logical operations. The solution must efficiently handle large arrays and provide accurate results for multiple test cases. Performance optimization is crucial due to high input limits.\nrequirement pool:\n- Efficiently process arrays with cyclic shifts\n- Ensure accurate results for all test cases\n- Optimize performance for high input limits\n- Handle edge cases effectively\n- Provide clear documentation for the solution\nWe will implement a function that processes the array using cyclic shifts and logical AND operations until the array becomes all zeros or stops changing. We will use efficient list operations to handle large arrays and ensure the solution is optimized for performance. The function will iterate over the array, applying the cyclic shift and logical AND operation, and track the number of steps until the array becomes all zeros or stops changing.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves moving elements of an array to the right by a specified number of positions, wrapping around the end of the array to the beginning.\n\n    'logical AND'\n    Explanation: The logical AND operation compares two binary values and returns 1 if both are 1, otherwise returns 0.\n\n# [phrase showing quantity relationship]\n    'number of steps': Refers to the count of iterations required for the array to become all zeros or stop changing.\n    'greater than': Used in the context of checking if elements are still equal to 1 after the process ends.\n\n# [degree adverb]\n    'only': Indicates that the array should consist entirely of zeros for a successful outcome.\n\n# [code logic]\n1. Initialize a counter to track the number of steps.\n2. Perform cyclic shift on the array by d positions.\n3. Apply logical AND operation between original and shifted arrays.\n4. Check if the resulting array is all zeros.\n5. If yes, return the number of steps; if no change occurs, return -1.\n6. Repeat until the array becomes all zeros or stops changing.\n\n# [edge case]\n    Input: 1 1\n           0\n    Output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Input: 3 3\n           1 0 1\n    Output: -1\n    Explanation: The cyclic shift will not change the array as each element will be ANDed with itself, resulting in no change.\n\n    Input: 4 1\n           1 1 1 1\n    Output: -1\n    Explanation: The cyclic shift by one position will keep the array unchanged as each element will be ANDed with itself.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef process_array(t, test_cases):\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            if new_a == a:\n                results.append(-1)\n                break\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            a = new_a\n    return results\n\n# Example usage:\nt = 5\ntest_cases = [\n    (2, 1, [0, 1]),\n    (3, 2, [0, 1, 0]),\n    (5, 2, [1, 1, 0, 1, 0]),\n    (4, 2, [0, 1, 0, 1]),\n    (1, 1, [0])\n]\nprint(process_array(t, test_cases))\n```\n", "requirement analysis:\nThe problem requires an efficient algorithm to determine the number of steps needed for an array of binary values to become all zeros after cyclic shifts and logical AND operations. The solution must handle large inputs efficiently and provide clear output for each test case.\nrequirement pool:\n- Implement the main algorithm to perform cyclic shifts and logical AND operations.\n- Optimize the algorithm to handle up to 10^6 elements efficiently.\n- Ensure the solution covers all edge cases.\n- Provide clear and concise output for each test case.\n- Document the solution for better understanding and maintenance.\nWe will implement a function that performs cyclic shifts and logical AND operations on the array. The function will iterate until the array becomes all zeros or no further changes occur. We will use efficient list operations to handle large inputs up to 10^6 elements. The approach will focus on minimizing computational steps by checking for early termination conditions.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to rotating the elements of the array to the right by a specified number of positions, wrapping around the end of the array back to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: This is a bitwise operation where each element of the array is combined with its corresponding element in the shifted array using the AND operation, resulting in a new array.\n\n# [phrase showing quantity relationship]\n    'number of steps'\n    Explanation: This refers to counting how many iterations are needed for the array to become all zeros or to determine that it will never become all zeros. In code, this can be implemented by a loop that continues until the array is all zeros or no changes occur.\n\n# [degree adverb]\n    'only zeros'\n    Explanation: This means that the final state of the array should consist entirely of zero elements. In code, this can be checked by verifying if all elements in the array are zero.\n\n# [code logic]\n1. Initialize a counter for steps.\n2. Perform cyclic shift and logical AND operations on the array.\n3. Check if the array is all zeros after each step.\n4. If the array becomes all zeros, return the number of steps.\n5. If no changes occur and the array is not all zeros, return -1.\n\n# [edge case]\n    Input: 1 1\n           0\n    Output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Input: 3 1\n           1 0 1\n    Output: -1\n    Explanation: The cyclic shift and AND operation will not change the array to all zeros.\n\n    Input: 4 4\n           1 1 1 1\n    Output: 1\n    Explanation: After one step, the array will become all zeros due to the AND operation with itself.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef process_array(t, test_cases):\n    results = []\n    for n, d, a in test_cases:\n        steps = 0\n        while True:\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            if all(x == 0 for x in new_a):\n                results.append(steps)\n                break\n            if new_a == a:\n                results.append(-1)\n                break\n            a = new_a\n    return results\n\n# Example usage:\nt = 5\ntest_cases = [\n    (2, 1, [0, 1]),\n    (3, 2, [0, 1, 0]),\n    (5, 2, [1, 1, 0, 1, 0]),\n    (4, 2, [0, 1, 0, 1]),\n    (1, 1, [0])\n]\nprint(process_array(t, test_cases))\n```\n", "requirement analysis:\nThe problem requires simulating a process where an array of binary values is cyclically shifted and modified using a logical AND operation. The goal is to determine the number of steps required for the array to become all zeros or to identify if it never will. The solution must efficiently handle large input sizes, up to 10^6 elements, and provide accurate results for multiple test cases.\nrequirement pool:\n- Efficiently handle large input sizes up to 10^6 elements.\n- Correctly determine the number of steps for the array to become all zeros.\n- Return -1 if the array never becomes all zeros.\n- Ensure the solution is easy to understand and maintain.\n- Pass all provided test cases with correct output.\nWe will implement a function that simulates the process of cyclically shifting the array and applying the logical AND operation until the array becomes all zeros or it is determined that it will never become all zeros. The function will handle multiple test cases efficiently by iterating over the array and using modular arithmetic to perform the cyclic shift. The solution will be optimized to handle the maximum input size constraint by avoiding unnecessary operations and using efficient data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: This refers to the process of moving elements of the array to the right by a specified number of positions, wrapping around the end of the array to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: This is a bitwise operation that results in 1 if both operands are 1, and 0 otherwise. It is used here to combine elements of the original array and the shifted array.\n\n# [phrase showing quantity relationship]\n    'number of steps'\n    Explanation: This refers to the count of iterations required for the array to become all zeros. It is implemented by counting each cycle until the condition is met or determined impossible.\n\n# [degree adverb]\n    'only zeros'\n    Explanation: This means that the final array should consist entirely of zeros. The implementation checks if all elements are zero after each step.\n\n# [code logic]\n    1. Parse the input to extract the number of test cases and details for each test case.\n    2. For each test case, initialize a counter for steps and a flag to track changes.\n    3. Perform cyclic shifts and logical AND operations iteratively:\n        - Compute the cyclic shift using modular arithmetic.\n        - Apply the logical AND operation between the original and shifted arrays.\n        - Check if the array becomes all zeros; if so, record the step count.\n        - If no changes occur in a cycle, break and return -1.\n    4. Output the result for each test case.\n\n# [edge case]\n    Case 1: n = 1, d = 1, a = [0] => Expected output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Case 2: n = 3, d = 3, a = [1, 1, 1] => Expected output: -1\n    Explanation: The cyclic shift will not change the array, and logical AND will not reduce any 1s to 0s.\n\n    Case 3: n = 5, d = 1, a = [0, 0, 0, 0, 1] => Expected output: 1\n    Explanation: After one shift and AND operation, the array becomes all zeros.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if all(x == 0 for x in a):\n            return 0\n        steps = 0\n        while True:\n            a_shifted = [a[(i + n - d) % n] for i in range(n)]\n            new_a = [a[i] & a_shifted[i] for i in range(n)]\n            steps += 1\n            if all(x == 0 for x in new_a):\n                return steps\n            if new_a == a:\n                return -1\n            a = new_a\n", "requirement analysis:\nThe problem requires implementing an algorithm that performs cyclic shifts and logical operations on binary arrays. The key challenge is to efficiently determine the number of steps required for the array to become all zeros or to identify if it will never reach that state. The solution must handle up to 10^6 elements across multiple test cases, ensuring optimal performance.\nrequirement pool:\n- Implement the cyclic shift and logical AND operation efficiently.\n- Ensure the solution handles edge cases, such as arrays that never become all zeros.\n- Optimize the algorithm to minimize the number of computational steps.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge case handling.\nWe will implement a function that performs cyclic shifts and logical AND operations on binary arrays. The function will iterate until the array becomes all zeros or it is determined that it will never become all zeros. We will use efficient list operations to handle the cyclic shift and logical AND operations. The solution will be optimized to handle up to 10^6 elements across multiple test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'cyclic shift'\n    Explanation: A cyclic shift involves moving elements of an array to the right by a specified number of positions, wrapping around the end of the array back to the beginning.\n\n    'logical \"AND\" operator'\n    Explanation: The logical \"AND\" operator compares two binary values and returns 1 if both are 1, otherwise returns 0.\n\n# [phrase showing quantity relationship]\n    'only zeros'\n    Explanation: The requirement is to determine if the array will consist entirely of zeros after a series of operations. This can be implemented by checking if all elements in the array are zero.\n\n# [degree adverb]\n    'first time'\n    Explanation: The requirement is to find the number of steps needed for the array to become all zeros for the first time. This means tracking the number of iterations until the condition is met.\n\n# [code logic]\n1. Parse the input to get the number of test cases and details for each test case.\n2. For each test case, perform the following:\n   - Initialize a counter for steps.\n   - While the array contains any 1s:\n     - Perform a cyclic shift on the array.\n     - Apply the logical \"AND\" operation between the original and shifted arrays.\n     - Increment the step counter.\n     - If the array becomes all zeros, record the step count and break.\n   - If the array never becomes all zeros, record -1.\n3. Output the results for each test case.\n\n# [edge case]\n    Test case with an already zero array:\n    1 1\n    0\n    Expected output: 0\n    Explanation: The array is already all zeros, so no steps are needed.\n\n    Test case with no possible zero outcome:\n    3 1\n    1 1 1\n    Expected output: -1\n    Explanation: The cyclic shift and AND operation will never result in all zeros.\n\n    Test case with minimal size and shift:\n    2 2\n    1 0\n    Expected output: 1\n    Explanation: After one step, the array becomes [0, 0].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these scenarios by checking if the array is already zero or if it can never become zero.\n"], "scores": [], "pass_results": [false, false, true, false, true, true, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 4, "round": 671, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases. \n\nThe first line of each test case description contains two integers: n (1 \u2264 n \u2264 10^6) \u2014 array size and d (1 \u2264 d \u2264 n) \u2014 cyclic shift offset. The second line of the description contains n space-separated integers a_i (0 \u2264 a_i \u2264 1) \u2014 elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print -1.\n\nExample\n\nInput\n\n\n5\n2 1\n0 1\n3 2\n0 1 0\n5 2\n1 1 0 1 0\n4 2\n0 1 0 1\n1 1\n0\n\n\nOutput\n\n\n1\n1\n3\n-1\n0\n\nNote\n\nIn the third sample test case the array will change as follows: \n\n  1. At the beginning a = [1, 1, 0, 1, 0], and a^{\u2192 2} = [1, 0, 1, 1, 0]. Their element-by-element \"AND\" is equal to $$$[1  \\&  1, 1  \\&  0, 0  \\&  1, 1  \\&  1, 0  \\&  0] = [1, 0, 0, 1, 0]$$$ \n  2. Now a = [1, 0, 0, 1, 0], then a^{\u2192 2} = [1, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  1, 0  \\&  0, 0  \\&  1, 1  \\&  0, 0  \\&  0] = [1, 0, 0, 0, 0]$$$ \n  3. And finally, when a = [1, 0, 0, 0, 0] we get a^{\u2192 2} = [0, 0, 1, 0, 0]. Their element-by-element \"AND\" equals to $$$[1  \\&  0, 0  \\&  0, 0  \\&  1, 0  \\&  0, 0  \\&  0] = [0, 0, 0, 0, 0]$$$ \n\nThus, the answer is 3 steps.\n\nIn the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0  \\&  0 or 1  \\&  1 thus not changing its value. So the answer is -1, the array will never contain only zeros.", "mutate_method": "condense_two2one", "parent_index": 393}
