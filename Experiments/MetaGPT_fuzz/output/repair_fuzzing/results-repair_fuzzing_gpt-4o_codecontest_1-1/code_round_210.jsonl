{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes which was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Make sure to consider edge cases where the values might be zero or negative. Consider constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes which was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Make sure to consider edge cases where the values might be zero or negative. Consider constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. This new song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Make sure to consider edge cases where the values might be zero or negative. Consider constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town, and in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes which was added to his repertoire so that he could perform it in the rest of the cities, hence for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible. Make sure to consider edge cases where the values might be zero or negative. Consider constraints and optimize your solution accordingly.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoires for singers in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the total concert durations in each town.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by\n            the sequence of initial repertoires.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_sum = sum(b)\n        \n        # Check if the sum of b_i is divisible by n\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the initial repertoire a_i for each singer\n        a = [0] * n\n        possible = True\n        \n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        # Verify if the calculated sequence satisfies the conditions for all towns\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence\n            or \"NO\" if no valid sequence can be found.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Initialize the sequence a with zeros\n        a = [0] * n\n        valid = True\n        \n        # Attempt to reconstruct sequence a\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_a = total_sum // (n * (n + 1) // 2)\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_a) % n != 0 or (diff - total_a) // n <= 0:\n                valid = False\n                break\n            a[i] = (diff - total_a) // n\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        # Check if the sum of b is divisible by n\n        if sum(b) % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the average total duration per town\n        avg_duration = sum(b) // n\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate the initial repertoire for each singer\n        for i in range(n):\n            # Calculate the initial repertoire for the i-th singer\n            # We need to find a valid sequence a such that the sum of concert durations matches b\n            # This requires solving a system of equations based on the circular arrangement\n            a[i] = (b[i] - avg_duration) // n\n            if a[i] <= 0 or (b[i] - avg_duration) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and get the result\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport typing\n\ndef reconstruct_sequence(t: int, test_cases: typing.List[typing.Tuple[int, typing.List[int]]]) -> typing.List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoires for singers or determines if it's impossible.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and a list of total concert durations.\n\n    Returns:\n        A list of strings, each being 'YES' followed by the sequence of initial repertoires or 'NO' if impossible.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        # Attempt to reconstruct the sequence\n        sequence = [0] * n\n        valid = True\n        \n        # Calculate the initial repertoire for each singer\n        for i in range(n):\n            if b[i] % n != 0:\n                valid = False\n                break\n            sequence[i] = b[i] // n\n        \n        # Validate the sequence against the given concert durations\n        if valid:\n            for i in range(n):\n                expected_duration = sum((k + 1) * sequence[(i + k) % n] for k in range(n))\n                if expected_duration != b[i]:\n                    valid = False\n                    break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, sequence)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoires for singers in towns.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list `b` of total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence of initial repertoires if possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_sum = sum(b)\n        \n        # Check if the sum of durations is divisible by the number of towns\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        a = []\n        current_sum = 0\n        valid = True\n        \n        for i in range(n):\n            if (b[i] - current_sum) % n != 0:\n                valid = False\n                break\n            a_i = (b[i] - current_sum) // n\n            a.append(a_i)\n            current_sum += a_i\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    results = []\n    \n    for n, b in test_cases:\n        # Check for edge cases where any concert duration is non-positive\n        if any(b_i <= 0 for b_i in b):\n            results.append((\"NO\", []))\n            continue\n        \n        # Initialize the sequence of initial repertoire durations\n        a = [0] * n\n        \n        # Calculate the initial repertoire durations using modular arithmetic\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append((\"NO\", []))\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        valid = True\n        for i in range(n):\n            # Calculate a_i using the formula derived from the problem statement\n            a_i = (b[i] - b[i - 1]) // n + total_a_sum\n            if a_i <= 0 or (b[i] - b[i - 1]) % n != 0:\n                valid = False\n                break\n            a[i] = a_i\n        \n        if valid:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n    \n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and get results\n    results = reconstruct_sequence(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for each singer based on concert durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and concert durations.\n\n    Returns:\n        List[Tuple[str, List[int]]]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Initialize the sequence of initial repertoire durations\n        sequence_a = [0] * n\n        valid_sequence_found = True\n\n        # Attempt to derive a valid sequence using mathematical reasoning\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            valid_sequence_found = False\n        else:\n            total_repertoire = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n                if (total_repertoire - diff) % n != 0 or (total_repertoire - diff) // n <= 0:\n                    valid_sequence_found = False\n                    break\n                sequence_a[i] = (total_repertoire - diff) // n\n\n        # Append results based on whether a valid sequence was found\n        if not valid_sequence_found:\n            results.append((\"NO\", []))\n        else:\n            results.append((\"YES\", sequence_a))\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers based on concert durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n    \n    for case_index in range(t):\n        n, b = test_cases[case_index]\n        \n        # Edge case for single town\n        if n == 1:\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Initialize the sequence array\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoires\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        # Check if the sequence is valid\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the initial repertoire durations for singers in towns arranged in a circle.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing the number of towns `n` and a list `b` of total concert durations.\n\n    Returns:\n        A list of strings, each representing the result for a test case. \"YES\" followed by the sequence of initial\n        repertoire durations if a valid sequence is found, otherwise \"NO\".\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        if n == 1:\n            # Edge case for single town\n            results.append(\"YES\")\n            results.append(str(b[0]))\n            continue\n\n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n\n        # Calculate initial values for a\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_a_sum = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                a[i] = (b[i] - b[i - 1]) // n + total_a_sum\n                if a[i] <= 0 or (b[i] - b[i - 1]) % n != 0:\n                    possible = False\n                    break\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        # Check for edge cases where reconstruction is impossible\n        if any(b_i <= 0 for b_i in b):\n            results.append(\"NO\")\n            continue\n        \n        # Initialize the array to store the initial repertoire durations\n        a = [0] * n\n        \n        # Calculate the initial repertoire using the given pattern\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        total_repertoire = total_sum // (n * (n + 1) // 2)\n        \n        valid = True\n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            if (diff - total_repertoire) % n != 0 or (diff - total_repertoire) // n <= 0:\n                valid = False\n                break\n            a[i] = (diff - total_repertoire) // n\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        b = list(map(int, input().strip().split()))\n        test_cases.append((n, b))\n    \n    # Call the function and print the result\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the solution is efficient given the large possible input size. The solution must handle edge cases such as when no valid sequence exists and provide a clear output format.\nrequirement pool:\n- Develop an efficient algorithm to reconstruct the sequence.\n- Ensure the solution handles edge cases and large inputs.\n- Provide clear and concise output for each test case.\n- Optimize the solution for performance.\n- Document the solution for maintainability.\nWe will use a mathematical approach to reconstruct the sequence. The key observation is that the sum of the durations in each town should be divisible by the number of towns, n. If not, it's impossible to reconstruct the sequence. If it is divisible, we can calculate the initial repertoire of each singer by dividing the total duration by n. This approach ensures efficiency even for large inputs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the tour.\n\n    'concert duration'\n    Explanation: The time each singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': The concert duration in the next town is twice the initial repertoire.\n    Explanation: This indicates a multiplicative relationship where the concert duration increases by a factor of the number of towns visited.\n\n    '(k + 2) \u22c5 a_i': The concert duration increases by (k + 2) times the initial repertoire.\n    Explanation: This shows how the concert duration grows as the singer visits more towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, check if the sum of b_i is divisible by n. If not, print \"NO\".\n2. If divisible, calculate the initial repertoire a_i for each singer by dividing b_i by n.\n3. Verify if the calculated sequence satisfies the conditions for all towns.\n4. If valid, print \"YES\" and the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and one singer, the sequence is trivially valid with a_1 = 1.\n\n    Test case with n = 3 and b_1 = b_2 = b_3 = 3\n    Explanation: Each town has equal concert duration, which might suggest equal initial repertoires.\n\n    Test case with n = 4 and b_1 = 4, b_2 = 8, b_3 = 12, b_4 = 16\n    Explanation: The increasing pattern might suggest a specific sequence of initial repertoires.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n```python\ndef solve(test_cases):\n    for n, b in test_cases:\n        total_sum = sum(b)\n        if total_sum % n != 0:\n            print(\"NO\")\n            continue\n        \n        a = [0] * n\n        possible = True\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            print(\"YES\")\n            print(\" \".join(map(str, a)))\n        else:\n            print(\"NO\")\n```\nThis code checks divisibility and calculates potential initial repertoires while considering edge cases.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the solution is efficient given the large input size constraints. Edge cases such as zero or negative values need to be considered, although the problem guarantees positive integers.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence a.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the solution for performance.\n- Provide clear and concise output as per the requirements.\n- Document the solution approach and edge cases considered.\nWe will use a mathematical approach to reconstruct the sequence a from the given sequence b. The key observation is that the sum of the sequence a multiplied by the respective coefficients should match the sequence b. We will iterate over each test case and attempt to derive a valid sequence a. If a valid sequence cannot be derived, we will output 'NO'. We will ensure the solution is efficient by leveraging mathematical properties and constraints given in the problem.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'concert duration'\n    Explanation: The duration of each concert increases as the singer visits more towns, based on their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` which contains total concert durations for each town.\n2. Initialize an empty list `a` to store the initial repertoire for each singer.\n3. For each town, calculate the possible initial repertoire `a_i` by considering the total concert duration `b_i` and the pattern of increasing concert durations.\n4. Check if the calculated sequence `a` satisfies all conditions for each town.\n5. If a valid sequence `a` is found, print \"YES\" followed by the sequence. If not, print \"NO\".\n\n# [edge case]\n    Test case with minimum values: \n    1\n    1\n    1\n    = YES\n    Explanation: With only one town and one singer, the initial repertoire can be directly equal to the total concert duration.\n\n    Test case with maximum values:\n    1\n    4\n    1000000000 1000000000 1000000000 1000000000\n    = NO\n    Explanation: The maximum possible values might not allow a valid sequence due to constraints on increasing concert durations.\n\n    Test case with alternating values:\n    1\n    4\n    10 20 10 20\n    = YES\n    Explanation: A valid sequence can be found by alternating initial repertoires that match the pattern of total durations.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where the sequence might not be valid due to constraints.\n    \n```python\ndef solve_test_case(n, b):\n    # Attempt to reconstruct sequence a\n    a = [0] * n\n    for i in range(n):\n        # Calculate potential a_i based on b_i and previous values\n        # This is a simplified example; actual logic will depend on mathematical derivation\n        a[i] = b[i] // n  # Simplified assumption for illustration\n\n    # Validate if this sequence a is correct\n    valid = True\n    for i in range(n):\n        total_duration = sum((j + 1) * a[(i + j) % n] for j in range(n))\n        if total_duration != b[i]:\n            valid = False\n            break\n\n    if valid:\n        print(\"YES\")\n        print(\" \".join(map(str, a)))\n    else:\n        print(\"NO\")\n\n# Example usage for multiple test cases\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    solve_test_case(n, b)\n```\nThis code provides a basic structure to handle edge cases by validating potential sequences against given constraints.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. The solution must handle large inputs efficiently and provide correct outputs for all test cases.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers a.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the solution to minimize execution time.\n- Provide clear and concise output as per the problem statement.\n- Document the solution for ease of understanding and maintenance.\nWe will iterate over each test case and attempt to reconstruct the sequence of integers a. The key observation is that the sum of the sequence a for each town should match the given total duration b. We will use a mathematical approach to derive the sequence a by leveraging the properties of arithmetic progressions and modular arithmetic. If a valid sequence cannot be constructed, we will output 'NO'. Otherwise, we will output 'YES' followed by the sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'concert duration progression'\n    Explanation: The duration of concerts increases in a specific pattern as the singer moves from town to town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This shows the progression of concert duration as the singer moves to subsequent towns.\n    Implementation: Use arithmetic progression to calculate concert durations based on initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Attempt to reconstruct the sequence of initial repertoires (a_i) for each singer.\n    3. Use modular arithmetic to handle the circular arrangement of towns.\n    4. Check if the sum of calculated concert durations matches the given total durations (b_i).\n    5. If a valid sequence is found, print 'YES' followed by the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Test case with minimum values:\n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Test case with maximum values:\n    Input: 1\n           4\n           1000000000 1000000000 1000000000 1000000000\n    Output: NO\n    Explanation: It's impossible to distribute such large concert durations evenly among singers in a circular arrangement.\n\n    Test case with zero possibility:\n    Input: 1\n           3\n           1 2 3\n    Output: NO\n    Explanation: The progression of concert durations does not match any possible initial repertoires.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be constructed.\n        if sum(b) % n != 0:\n            print(\"NO\")\n        else:\n            # Attempt to reconstruct sequence a\n            # If reconstruction fails, print \"NO\"\n            # Otherwise, print \"YES\" followed by sequence a\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle up to 200,000 total cities across all test cases, ensuring that the output is correct and formatted as specified. Edge cases, such as minimum and maximum values, must be considered to ensure robustness.\nrequirement pool:\n- Develop an efficient algorithm to reconstruct the sequence of integers.\n- Ensure the solution handles edge cases and large inputs effectively.\n- Provide clear and correct output for each test case.\n- Optimize the solution to run within the given constraints.\n- Consider multiple possible solutions and output any valid one.\nWe will use a mathematical approach to reconstruct the sequence of integers. The key observation is that the sum of the durations in each town is a result of the arithmetic progression of the singer's repertoire. We will iterate over each test case, and for each town, we will calculate the initial repertoire of the singer by dividing the total duration by the number of towns. If the calculated initial repertoire is not a positive integer, it is impossible to reconstruct the sequence, and we will return 'NO'. Otherwise, we will return 'YES' and the sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire', 'concert', 'sequence'\n    Explanation: The repertoire refers to the initial duration of songs each singer has. The concert duration in each town is influenced by the singer's repertoire and the new song inspired in each town. The sequence is the list of initial durations for each singer that needs to be reconstructed.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i', '(k + 2) \u22c5 a_i', 'n \u22c5 a_i'\n    Explanation: These phrases indicate the multiplication of the initial repertoire by a factor that increases as the singer moves from town to town. The concert duration in each town is a multiple of the initial repertoire, which increases sequentially.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations.\n    - For each town, calculate the possible initial repertoire by dividing the total duration by the number of towns.\n    - Check if the calculated repertoire is a positive integer.\n    - If all towns have valid repertoires, print 'YES' and the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Test case with minimum values: \n    1\n    1\n    1\n    Expected output: YES\n    Explanation: With only one town and one concert duration, the initial repertoire can be directly equal to the concert duration.\n\n    Test case with maximum values:\n    1\n    40000\n    1000000000 (repeated 40000 times)\n    Expected output: NO\n    Explanation: The maximum concert duration repeated for all towns may not allow a valid sequence due to constraints.\n\n    Test case with mixed values:\n    3\n    10 20 30\n    Expected output: NO\n    Explanation: The sum of concert durations does not allow for a valid sequence of initial repertoires.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement checks to ensure calculated repertoires are positive integers.\n        - Handle cases where division results in non-integer values or negative values.\n        (other code)\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers representing the initial repertoire of singers based on the total concert durations in each town. The solution must handle multiple test cases efficiently, considering constraints on input size and values. Edge cases such as zero or negative values must be addressed, and the solution should be optimized for large inputs.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Reconstruct sequence of singers' repertoire\n- Optimize for large input sizes\n- Handle edge cases and constraints\n- Provide clear output format\nWe will use a mathematical approach to reconstruct the sequence of singers' repertoire. The key observation is that the sum of the durations in each town should be divisible by the number of towns, n, to form a valid sequence. We will iterate over each test case, check divisibility, and reconstruct the sequence using modular arithmetic. We will use Python's built-in capabilities for handling large integers and efficient list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they visit each town, with the duration of their concert increasing by a multiple of their initial repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    Implementation: Use multiplication in code to calculate the concert duration for each town.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Check if the sum of `b` is divisible by `n`. If not, print \"NO\" and continue to the next test case.\n3. If divisible, calculate the initial repertoire `a` for each singer using modular arithmetic:\n   - Initialize an empty list `a`.\n   - For each town, calculate `a_i` as `(b[i] - sum_of_previous_concerts) / n`.\n   - Append `a_i` to the list `a`.\n4. Print \"YES\" and the list `a`.\n\n# [edge case]\n    Test case with n = 1 and b = [1] = YES, 1\n    Explanation: With only one town, the initial repertoire must equal the total concert duration.\n\n    Test case with n = 3 and b = [3, 3, 3] = NO\n    Explanation: The sum of b is 9, which is divisible by 3, but no valid sequence a can be formed as each town would require a different initial repertoire.\n\n    Test case with n = 4 and b = [4, 8, 12, 16] = YES, 1 2 3 4\n    Explanation: The sum of b is 40, which is divisible by 4. A valid sequence a can be formed with increasing initial repertoires.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def solve(test_cases):\n        for n, b in test_cases:\n            total_sum = sum(b)\n            if total_sum % n != 0:\n                print(\"NO\")\n                continue\n            \n            a = []\n            current_sum = 0\n            valid = True\n            for i in range(n):\n                if (b[i] - current_sum) % n != 0:\n                    valid = False\n                    break\n                a_i = (b[i] - current_sum) // n\n                a.append(a_i)\n                current_sum += a_i\n            \n            if valid:\n                print(\"YES\")\n                print(\" \".join(map(str, a)))\n            else:\n                print(\"NO\")\n    ```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations for singers based on the total concert durations in each town. The solution must handle multiple test cases efficiently, considering constraints such as large input sizes and edge cases. The output should clearly indicate whether a valid sequence is possible and provide one if it exists.\nrequirement pool:\n- Efficiently handle up to 10^3 test cases\n- Ensure solution works for n up to 4 \u22c5 10^4\n- Optimize for large values of b_i up to 10^9\n- Handle edge cases where sequences might be impossible\n- Provide clear output format for each test case\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the durations for each town can be expressed as a linear combination of the initial durations. We will use modular arithmetic to handle the circular arrangement of towns and ensure the solution is efficient for large inputs. We will also check for edge cases where no valid sequence is possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting the concerts.\n\n    'modular arithmetic'\n    Explanation: Used to handle the circular arrangement, ensuring indices wrap around correctly.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire duration.\n    'k + 2 \u22c5 a_i': means the concert duration increases linearly with each town visited.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Initialize an array to store the initial repertoire durations for each singer.\n    3. Use modular arithmetic to calculate the initial repertoire durations based on the total concert durations.\n    4. Check if a valid sequence is possible by ensuring all calculated durations are positive integers.\n    5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum values: \n    Input: 1\n           1\n           1\n    Expected output: YES\n                     1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Test case with maximum values:\n    Input: 1\n           4\n           10^9 10^9 10^9 10^9\n    Expected output: NO\n    Explanation: The maximum possible concert duration cannot be achieved with valid initial repertoire values due to constraints.\n\n    Test case with zero or negative values:\n    Input: 1\n           3\n           -1 -1 -1\n    Expected output: NO\n    Explanation: Negative values for concert durations are invalid, making it impossible to reconstruct a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if any(b_i <= 0 for b_i in b):\n            print(\"NO\")\n            continue\n        (other code)\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. The solution must handle large inputs efficiently and provide a clear output format.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence.\n- Ensure the solution handles edge cases such as minimum and maximum input values.\n- Optimize the solution for performance given the constraints.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge cases considered.\nWe will implement a function to reconstruct the sequence of integers based on the given constraints. The approach involves iterating over each test case, analyzing the total duration of concerts in each town, and attempting to derive a valid sequence of initial repertoire durations for each singer. We will use mathematical reasoning to determine if a valid sequence is possible and handle edge cases where the sequence cannot be reconstructed. The solution will be optimized to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': indicates that the concert duration doubles as the singer moves to the next town.\n    '(k + 2) \u22c5 a_i': shows that the concert duration increases by a factor of (k + 2) as the singer moves to the k-th town.\n    'n \u22c5 a_i': indicates that the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations.\n    - Initialize an array to store the initial repertoire durations for each singer.\n    - Use mathematical reasoning to derive possible values for a_i based on b_i values.\n    - Check if the derived sequence satisfies all conditions for concert durations.\n    - If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Explanation: The only possible value for a_1 is 1, which satisfies the condition. Expected output is \"YES\" followed by \"1\".\n    \n    Test case with n = 3 and b = [1, 2, 3]: \n    Explanation: No valid sequence can satisfy these concert durations. Expected output is \"NO\".\n    \n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]: \n    Explanation: A valid sequence is possible with values [5, 5, 4, 1, 4, 5]. Expected output is \"YES\" followed by \"5 5 4 1 4 5\".\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be derived.\n        if not valid_sequence_found:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(*sequence_a)\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle large inputs and edge cases, ensuring that the output format is strictly followed. The challenge lies in determining if a valid sequence exists and providing it or indicating impossibility.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the solution for performance.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge cases considered.\nWe will implement a function to reconstruct the sequence of integers based on the given constraints. The approach involves iterating over each test case, calculating the possible sequence of initial durations for each singer, and checking if the sequence satisfies the conditions. If a valid sequence is found, it will be returned; otherwise, 'NO' will be printed. The solution will handle edge cases and optimize for large inputs using efficient iteration and calculation techniques.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they visit each town, adding a new song of a_i minutes to their repertoire.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that in the (i + 1)-th town, the concert duration is twice the initial repertoire of the singer.\n    'k + 2 \u22c5 a_i': This indicates that in the ((i + k) mod n + 1)-th town, the concert duration is (k + 2) times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Initialize an array `a` to store the initial repertoire durations for each singer.\n3. For each town, calculate the possible initial repertoire `a_i` by considering the total concert duration `b_i` and the growth pattern.\n4. Check if the calculated sequence `a` satisfies all conditions for each town.\n5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The only possible sequence is [1], which satisfies the condition.\n\n    Test case with n = 3 and b = [3, 3, 3]\n    Explanation: Each singer can have an initial repertoire of 1, leading to a valid sequence [1, 1, 1].\n\n    Test case with n = 4 and b = [10, 10, 10, 10]\n    Explanation: It is impossible to find a valid sequence because no combination of initial repertoires can satisfy all conditions.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence exists.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for _ in range(t):\n        n, b = test_cases[_]\n        if n == 1:\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        a = [0] * n\n        possible = True\n        \n        # Calculate initial repertoires\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\nprint(reconstruct_sequence(t, test_cases))\n```\n\nThis code handles edge cases by checking if each `b_i` is divisible by `n`, which is necessary for a valid sequence. If not divisible, it returns \"NO\".\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations for singers based on the total concert durations in each town. The solution must handle multiple test cases efficiently, considering constraints such as large input sizes and edge cases. The output must be formatted correctly, providing either a valid sequence or indicating impossibility.\nrequirement pool:\n- Efficiently handle large input sizes and multiple test cases\n- Correctly reconstruct the sequence of initial repertoire durations\n- Consider edge cases like zero or negative values\n- Ensure output format matches the requirements\n- Optimize the solution for better performance\nWe will iterate over each test case and attempt to reconstruct the sequence of initial repertoire durations for each singer. The key challenge is to ensure that the sum of the concert durations in each town matches the given total durations. We will use a mathematical approach to derive the initial durations from the given totals, considering the circular nature of the towns. If a valid sequence is found, we will output it; otherwise, we will output 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire of a_i minutes'\n    Explanation: Each singer starts with a repertoire of a_i minutes, which increases as they visit more towns.\n\n    'concert duration calculation'\n    Explanation: The duration of each concert increases as the singer visits more towns, specifically by multiplying the initial repertoire by the number of towns visited so far.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate the possible initial repertoire `a_i` by considering the total concert duration and the circular nature of the towns.\n4. Check if the calculated sequence `a` satisfies all conditions for each town's total concert duration.\n5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case] \n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town, the initial repertoire must equal the total concert duration, so a_1 = 1.\n\n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: It's impossible to find a valid sequence because the increasing pattern cannot be satisfied with these totals.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence exists as shown in the example output.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or where no valid sequence can be found.\n    \n```python\ndef solve():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    results = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        \n        if n == 1:\n            # Edge case for single town\n            results.append(\"YES\")\n            results.append(str(b[0]))\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate initial values for a\n        for i in range(n):\n            if b[i] < n:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))\n\n```\n", "requirement analysis:\nThe problem involves reconstructing a sequence of integers that represent the initial repertoire of singers in a circular arrangement of towns. The challenge is to determine if such a sequence exists based on the total concert durations provided for each town. The solution must handle large inputs efficiently and consider edge cases where reconstruction is impossible.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence of initial repertoire durations.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Optimize the algorithm for performance given the constraints.\n- Provide clear and concise output as per the specified format.\n- Consider multiple valid outputs if possible and choose any.\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the concert durations in each town follows a specific pattern based on the initial repertoire. We will leverage this pattern to deduce the possible values of the initial repertoire. The solution will involve iterating over the towns and calculating the possible initial repertoire using modular arithmetic and the given constraints. We will ensure the solution handles edge cases efficiently, such as when reconstruction is impossible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time each singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Initialize an array to store the initial repertoire durations for each singer.\n    3. Use modular arithmetic to calculate possible initial repertoire values based on the given total concert durations.\n    4. Check if the calculated values satisfy all constraints and are positive integers.\n    5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Input: 1\n           1\n           1\n    Output: YES\n            1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Input: 2\n           2\n           1 1\n    Output: NO\n    Explanation: It's impossible to have two towns with equal concert durations and reconstruct a valid sequence.\n\n    Input: 3\n           3\n           0 0 0\n    Output: NO\n    Explanation: Concert durations cannot be zero, making it impossible to reconstruct a valid sequence.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where reconstruction is impossible due to constraints like zero or negative values.\n        if any(b_i <= 0 for b_i in b):\n            print(\"NO\")\n            continue\n"], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 210, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "add_1_sentence_at_end", "parent_index": 85}
