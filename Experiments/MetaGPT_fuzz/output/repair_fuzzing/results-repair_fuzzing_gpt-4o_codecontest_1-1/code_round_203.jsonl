{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp possessed an array a consisting of 3 positive numbers. He noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5. He also wrote 1 + 3 = 4 and 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp possessed an array a consisting of 3 positive numbers. He noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5. He also wrote 1 + 3 = 4 and 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of 3 positive numbers. He noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers.\n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5. He also wrote 1 + 3 = 4 and 4 + 3 = 7. Additionally, he wrote 1 + 4 + 3 = 8. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Your task is to determine the correct array a using the properties of the given array b. Assume all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp possessed an array a consisting of 3 positive numbers and noted down the totals of all non-empty subsequences of this array, arranged them in ascending order, and produced an array b consisting of 7 numbers. For example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4 and 4 + 3 = 7, 1 + 4 + 3 = 8, and after sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. Unfortunately, Polycarp lost the array a, so he only has the array b left, and your task is to determine the correct array a using the properties of the given array b, assuming all elements in array a are distinct and in increasing order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is a_1 + a_2 + a_3\n        largest = b[-1]\n        # Calculate a_3\n        a_3 = largest - a_1 - a_2\n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef reconstruct_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing an array 'b' of 7 integers.\n\n    Returns:\n        A list of reconstructed arrays 'a', each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements of a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements of a\n        sum_a = b[-1]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_plus_a3 = b[-2]\n        # Deduce the elements of a\n        a2 = a2_plus_a3 - a1\n        a3 = sum_a - a1 - a2\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    result = reconstruct_array(n, test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array 'b'.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array 'a'.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Sort the array b to ensure it is in ascending order\n        b.sort()\n        \n        # Identify a_1, a_2, and a_3 based on the sorted array b\n        a_1 = b[0]  # The smallest element in b\n        a_2 = b[1]  # The second smallest element in b\n        a_3 = b[6] - a_1 - a_2  # The largest element in b minus a_1 and a_2\n        \n        # Append the result as a tuple\n        results.append((a_1, a_2, a_3))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[-1]\n        # Calculate a_3 by subtracting a_1 and a_2 from the sum of all elements\n        a_3 = sum_a - a_1 - a_2\n        # Append the restored array a to the results\n        results.append([a_1, a_2, a_3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output the results\n    for res in result:\n        print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    restored_arrays = []\n    \n    for b in test_cases:\n        # Sort the array b to ensure the smallest three numbers are the elements of a\n        b_sorted = sorted(b)\n        \n        # The elements of a are the first element, the second element, and the difference\n        # between the largest element and the sum of the first two elements\n        a1 = b_sorted[0]\n        a2 = b_sorted[1]\n        a3 = b_sorted[-1] - a1 - a2\n        \n        # Append the restored array a to the result list\n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    \n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Restore the arrays\n    result = restore_array(n, test_cases)\n    \n    # Output the restored arrays\n    for res in result:\n        print(' '.join(map(str, res)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # Sort the array b to ensure it is in ascending order\n        case.sort()\n        \n        # The smallest element in b is a_1\n        a1 = case[0]\n        \n        # The second smallest element in b is a_2\n        a2 = case[1]\n        \n        # The largest element in b is a_1 + a_2 + a_3\n        largest = case[-1]\n        \n        # Calculate a_3 by subtracting a_1 and a_2 from the largest element\n        a3 = largest - a1 - a2\n        \n        # Append the result as a tuple (a_1, a_2, a_3)\n        results.append((a1, a2, a3))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Function call\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef find_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Determine the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_a2_a3 = b[5]\n        \n        # Calculate a2 and a3 using the relationships\n        a2 = sum_a2_a3 - a1\n        a3 = sum_a - sum_a2_a3\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = find_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef deduce_original_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Deduce the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the deduced array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of all elements in a (a_1 + a_2 + a_3)\n        sum_all = b[-1]\n        # Calculate a_3 using the formula: a_3 = (sum of all elements) - a_1 - a_2\n        a_3 = sum_all - a_1 - a_2\n        # Append the result as a tuple (a_1, a_2, a_3)\n        results.append((a_1, a_2, a_3))\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = deduce_original_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef find_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Reconstructs the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, where each test case is a list of 7 integers\n                    representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the\n        reconstructed array a in increasing order.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a1 = b[0]\n        # The second largest element in b is a_2 + a_3\n        a2_plus_a3 = b[5]\n        # The largest element in b is a_1 + a_2 + a_3\n        a1_plus_a2_plus_a3 = b[6]\n        \n        # Calculate a2 and a3\n        a2 = a2_plus_a3 - a1\n        a3 = a1_plus_a2_plus_a3 - (a1 + a2)\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Call the function and print results\n    results = find_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the given array 'b' for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays 'a', each containing 3 integers.\n    \"\"\"\n    result = []\n    for b in test_cases:\n        # Step 1: Identify the smallest element in b, which corresponds to a_1.\n        a_1 = b[0]\n        \n        # Step 2: Identify the second smallest element in b, which corresponds to a_2.\n        a_2 = b[1]\n        \n        # Step 3: Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n        sum_a = b[-1]\n        \n        # Step 4: Calculate a_3 by subtracting a_1 and a_2 from the largest element in b.\n        a_3 = sum_a - a_1 - a_2\n        \n        # Step 5: Append the result for this test case.\n        result.append([a_1, a_2, a_3])\n    \n    return result\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is formatted correctly. The constraints on the input ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure output format matches requirements\n- Handle large numbers and multiple test cases\n- Provide clear documentation for the solution\n- Optimize for scalability and performance\nWe will leverage the properties of the array b, which is the sorted list of all non-empty subsequences of array a. Since a consists of 3 distinct positive numbers, the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. By subtracting the smallest and second smallest elements from the largest, we can find a_3. This approach is efficient and straightforward, ensuring scalability for multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that array a consists of exactly three elements.\n    '7 numbers': indicates that array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    'largest': refers to the largest element in array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b as a_1.\n3. Identify the second smallest element in b as a_2.\n4. Identify the largest element in b as the sum a_1 + a_2 + a_3.\n5. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n6. Return the array a = [a_1, a_2, a_3].\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest two numbers are both 1, and the largest number is 1000000000. Subtracting 1 + 1 from 1000000000 gives 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in array a is 300000000.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest number is 1, second smallest is 2, and largest is 5. Subtracting gives the third element as 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by correctly identifying the smallest, second smallest, and largest elements in array b to reconstruct array a.\n", "requirement analysis:\nThe problem requires reconstructing an array of three distinct positive integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases, ensuring that the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main algorithm to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Validate the input to ensure it meets the problem constraints.\n- Format the output correctly for each test case.\n- Optimize the solution for performance improvements.\nWe will implement a function that reconstructs the array 'a' from the given array 'b'. The key observation is that the smallest element in 'b' is one of the elements of 'a', and the largest element in 'b' is the sum of all elements of 'a'. By using these properties, we can deduce the elements of 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty means that at least one element is present in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest number in array 'b' is the sum of all elements in array 'a'. This helps identify one of the key elements in reconstructing array 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in array 'b', which corresponds to one of the elements in array 'a'.\n    2. Identify the largest element in array 'b', which is the sum of all elements in array 'a'.\n    3. Use the properties of array 'b' to deduce the remaining elements of array 'a'.\n    4. Since there are multiple possible answers, any valid reconstruction of array 'a' can be returned.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so the only possible reconstruction is three identical numbers.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7 (sum of all elements). The reconstruction can be deduced from these properties.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are identical and large numbers. The reconstruction follows directly from the properties.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic suffices to reconstruct array 'a' from array 'b'.\n", "requirement analysis:\nThe task requires determining the original array of three distinct positive numbers from the given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle up to 5000 test cases with large integer values\n- Ensure output is correctly formatted for each test case\n- Optimize for both speed and memory usage\n- Provide a user-friendly interface for input and output\nWe will use a simple mathematical approach to deduce the original array 'a' from the given array 'b'. Since 'b' contains all possible sums of non-empty subsequences of 'a', we can identify the elements of 'a' by recognizing that the smallest element in 'b' is 'a_1', the second smallest element is 'a_2', and the largest element in 'b' is the sum of all elements in 'a'. This allows us to compute 'a_3' as the difference between the largest element and the sum of 'a_1' and 'a_2'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array 'a' are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array 'a' consists of exactly three elements, each greater than zero.\n    \n    '7 numbers': The array 'b' consists of exactly seven elements, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array 'b', which corresponds to the smallest element in array 'a', denoted as `a_1`.\n2. Identify the second smallest element in array 'b', which corresponds to the second smallest element in array 'a', denoted as `a_2`.\n3. Identify the largest element in array 'b', which is the sum of all elements in array 'a' (i.e., `a_1 + a_2 + a_3`).\n4. Calculate `a_3` as the difference between the largest element and the sum of `a_1` and `a_2`.\n5. Return the elements `a_1`, `a_2`, and `a_3`.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in 'b' are sums of subsequences of three identical numbers, so each number in 'a' is 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two numbers are 1 and 2, and the largest number is 7. Therefore, `a_3` is calculated as 7 - (1 + 2) = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in 'b' are sums of subsequences of three identical large numbers, so each number in 'a' is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly handles these scenarios by identifying the smallest, second smallest, and largest elements to deduce the original array 'a'.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is formatted correctly. The constraints ensure that there is always a valid array a for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle up to 5000 test cases\n- Ensure output format is correct\n- Optimize for large numbers\n- Provide multiple valid solutions if possible\nWe will implement a function that takes the array b and deduces the original array a by leveraging the properties of the sums of non-empty subsequences. The smallest element in b is a_1, the second smallest is a_2, and the largest element in b is the sum of all elements in a. Using these properties, we can efficiently restore the array a. We will use Python's built-in list operations to handle the input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three numbers, all greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a (a_1).\n2. Identify the second smallest element in b, which corresponds to the second smallest element in a (a_2).\n3. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in b.\n5. Return the elements a_1, a_2, and a_3 as the restored array a.\n\n# [edge case]\n    1 1 2 3 3 4 5 = 1 1 2\n    Explanation: The smallest two elements are 1 and 1, and the largest element is 5. Thus, a_3 = 5 - 1 - 1 = 3.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest two elements are 1 and 2, and the largest element is 5. Thus, a_3 = 5 - 1 - 2 = 2.\n\n    999999998 1 1 999999999 999999999 1000000000 = 999999998 1 1\n    Explanation: The smallest two elements are both 1, and the largest element is 1000000000. Thus, a_3 = 1000000000 - 1 - 1 = 999999998.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by using the properties of the sums of non-empty subsequences.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and provide the correct output format. The constraints ensure that there is always a valid array a for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure output format matches the requirements\n- Handle large numbers and multiple test cases\n- Optimize for scalability and performance\n- Provide clear documentation and user guidance\nWe will implement a function that takes the array b and deduces the original array a. The key observation is that the smallest three numbers in b are the elements of a, and the largest number in b is the sum of all elements in a. This approach is efficient and straightforward, leveraging the properties of subsequences.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the elements in array a.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: This refers to the total sum of the three numbers in array a, which is represented by the largest number in array b. In code, this can be implemented by identifying the largest number in b and using it to deduce the sum of a.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest three numbers in array b are the individual elements of array a. This can be implemented by selecting the first three numbers from the sorted array b.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to the elements of a.\n    3. Identify the largest number in b, which is the sum of all elements in a.\n    4. Use these observations to deduce and print the original array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: The smallest three numbers are 1, and the largest number is 3, which is the sum of three ones.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: The smallest three numbers are 1000000000, and the largest number is 3000000000, which is the sum of three identical numbers.\n    \n    b = [5, 5, 5, 10, 10, 10, 15] = 5 5 5\n    Explanation: The smallest three numbers are 5, and the largest number is 15, which is the sum of three fives.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers and using the largest number as their sum inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output format is correct. The constraints on the input ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Handle multiple test cases\n- Ensure output format is correct\n- Optimize for large numbers\n- Provide clear documentation\nWe will solve the problem by leveraging the properties of the array b. Since b contains all possible sums of non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element in b is a_1 + a_2 + a_3. By subtracting the smallest and second smallest elements from the largest, we can find a_3. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Non-empty means that at least one element is included in the subsequence.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, all of which are positive integers.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to a_1.\n    'largest': Refers to the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n\n# [code logic]\n1. For each test case, identify the smallest element in array b, which corresponds to a_1.\n2. Identify the second smallest element in array b, which corresponds to a_2.\n3. Identify the largest element in array b, which corresponds to the sum a_1 + a_2 + a_3.\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element.\n5. Return the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so the smallest and second smallest are both 1, and the largest is 3. Thus, a_3 = 3 - 1 - 1 = 1.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so the smallest and second smallest are both 1000000000, and the largest is 3000000000. Thus, a_3 = 3000000000 - 1000000000 - 1000000000 = 1000000000.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 4\n    Explanation: The smallest is 1, second smallest is 2, and largest is 7. Thus, a_3 = 7 - 1 - 2 = 4.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases correctly by identifying the smallest, second smallest, and largest elements in array b.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently and provide clear output for each test case.\nrequirement pool:\n- Determine the original array a from array b\n- Handle up to 5000 test cases efficiently\n- Ensure output clarity and accuracy\n- Optimize for performance and scalability\n- Provide documentation for the solution\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. By using these properties, we can efficiently reconstruct the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which will be the smallest element in a (a_1).\n2. Identify the largest element in b, which will be the sum of all elements in a (a_1 + a_2 + a_3).\n3. Identify the second largest element in b, which will be the sum of the two largest elements in a (a_2 + a_3).\n4. Use these relationships to solve for a_2 and a_3:\n   - a_2 = (second largest element) - a_1\n   - a_3 = (largest element) - (second largest element)\n5. Return the elements a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each element in a is equal to the smallest element in b.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the second largest is 6 (2+4), and the largest is 7 (1+2+4).\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of array b to deduce array a.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid array a exists for each test case.\nrequirement pool:\n- Implement the main algorithm to deduce array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large input values.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness.\nWe will use the properties of the array b to deduce the original array a. Since b contains the sums of all non-empty subsequences of a, we can determine a by using the smallest, second smallest, and largest elements of b. Specifically, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all elements in a, which allows us to deduce a_3.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, all of which are positive integers.\n\n    '7 numbers': The array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the minimum value in the array b, which corresponds to the smallest element in array a.\n\n    'largest': Refers to the maximum value in the array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b as a_1.\n3. Identify the second smallest element in b as a_2.\n4. Identify the largest element in b as the sum of all elements in a (a_1 + a_2 + a_3).\n5. Calculate a_3 using the formula: a_3 = (sum of all elements) - a_1 - a_2.\n6. Return the elements a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each element is equal to 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest is 1, second smallest is 2, and the sum is 7, so a_3 = 7 - 1 - 2 = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each element is equal to 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of the sorted array b.\n", "requirement analysis:\nThe task requires determining the original array a from the given array b, which consists of sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently, ensuring that all elements in array a are distinct and in increasing order.\nrequirement pool:\n- Develop a function to extract array a from array b\n- Ensure the solution handles large numbers efficiently\n- Optimize the solution for scalability across multiple test cases\n- Validate the solution against edge cases\n- Provide clear documentation for the solution\nWe will solve the problem by leveraging the properties of the array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. By using these properties, we can efficiently reconstruct the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three elements, all of which are positive integers.\n    \n    '7 numbers': The array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a (a_1).\n2. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n3. Identify the second largest element in b, which is the sum of the two largest elements in a (a_2 + a_3).\n4. Use these relationships to solve for a_1, a_2, and a_3:\n   - a_1 is the smallest element in b.\n   - a_2 can be found by subtracting a_1 from the second largest element in b.\n   - a_3 can be found by subtracting (a_1 + a_2) from the largest element in b.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so each element in a is equal to the smallest element in b.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and using the logic above, we find that a_2 = 2 and a_3 = 4.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each element in a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these cases by correctly identifying the relationships between elements in arrays a and b.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle multiple test cases efficiently and ensure the output is formatted correctly. The constraints on the input ensure that a valid array a exists for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure output format matches requirements\n- Handle large numbers and multiple test cases\n- Optimize for scalability and performance\n- Provide clear documentation and examples\nWe will use a simple mathematical approach to restore the array a from array b. Given the properties of array b, the smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all elements in a. This allows us to deduce a_3 by subtracting a_1 and a_2 from the largest element in b. This approach is efficient and handles large numbers well without requiring complex data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'distinct and in increasing order'\n    Explanation: The elements of array a are unique and sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three numbers, all greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to a_1.\n2. Identify the second smallest element in b, which corresponds to a_2.\n3. Identify the largest element in b, which is the sum of all elements in a (a_1 + a_2 + a_3).\n4. Calculate a_3 by subtracting a_1 and a_2 from the largest element in b.\n5. Return the elements a_1, a_2, and a_3.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of subsequences of [1, 1, 1]. The smallest element is 1, the second smallest is also 1, and the largest is 3 (1+1+1).\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of subsequences of [1000000000, 1000000000, 1000000000]. The smallest element is 1000000000, the second smallest is also 1000000000, and the largest is 3000000000 (1000000000+1000000000+1000000000).\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 7 (1+2+4). The elements of a are distinct and in increasing order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of array b to deduce array a.\n"], "scores": [], "pass_results": [true, false, true, true, true, false, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 203, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 117}
