{"name": "1607_A. Linear Keyboard", "description": "You are given a keyboard that consists of 26 keys. The keys are arranged sequentially in one row in a certain order. Each key corresponds to a unique lowercase Latin letter.\n\nYou have to type the word s on this keyboard. It also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "tags": ["implementation", "strings"], "difficulty": 7, "id": 1607, "sample_io": [{"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}], "test_list": [{"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjmnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjkcanc\n", "output": ["164\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanc\n", "output": ["166\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjkcanj\n", "output": ["157\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n70\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nbbdes\n", "output": ["17\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n6\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeeb\n", "output": ["25\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nacsacnkcanscjanjlcanj\n", "output": ["159\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["13\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n68\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "1\naycdefbhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n70\n0\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n52\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadfb\n", "output": ["27\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodefcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["13\n0\n50\n0\n48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzywwsutvrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["171\n"]}, {"input": "1\nzgxovudsrqpcnljklihyfetwba\nsedba\n", "output": ["48\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n50\n0\n35\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdea\n", "output": ["38\n"]}, {"input": "1\nzywwsutvrqponmlcjihgfedkba\njnacljnajcsnackncasca\n", "output": ["173\n"]}, {"input": "1\nzgxwdutsrqponmjklihbfeucya\nsfdba\n", "output": ["50\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n6\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["153\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ncodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n50\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naasccnkianscjanjlcanb\n", "output": ["163\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdfa\n", "output": ["39\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nehllo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["10\n0\n49\n0\n35\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\naatccnkianscjanjlcanb\n", "output": ["165\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccanb\n", "output": ["147\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n54\n6\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n80\n0\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n36\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofecod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n69\n18\n74\n"]}, {"input": "1\nabcdefyhilkjmponsrwtuvqxhz\nbedsa\n", "output": ["33\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngdlln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqpqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n36\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponclljihgfedmba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwfrtyuhopasdfghjklzxcvbnm\nabcabab\n", "output": ["14\n0\n54\n6\n65\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n18\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\nteaae\n", "output": ["23\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n65\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\naacddfghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzxcvbnj\nabacaba\n", "output": ["15\n0\n80\n0\n74\n"]}, {"input": "1\naccdehgsilkilnopqqftuvwxxz\nseaae\n", "output": ["11\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponmlkjihgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n6\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n24\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcse\nnnbvcxzlkjhgfdsapnjuytrewq\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n80\n15\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihggedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghzjmlmnopqrstuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nrqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\naaacaba\n", "output": ["16\n0\n65\n27\n48\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nzqxwvutsryponmlkiihgfedcba\ncoeeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n80\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjklzxcvbnn\npqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabcaaba\n", "output": ["15\n0\n82\n15\n52\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdllo\nzyxvvutsrqponilkjmhgfddcaa\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n82\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["15\n0\n80\n15\n26\n"]}, {"input": "5\nabcdefghijilmnopqrstuvwxyz\nhdllo\naacddfghmjklinopqrstuvvxyz\nj\nabcdefghiiklmnopvrstuywxqz\ncoeeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacaa\n", "output": ["15\n0\n80\n15\n24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhlelo\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["21\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacjkjanscnanjlcanb\n", "output": ["169\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n3\n74\n"]}, {"input": "1\nabcdefghijklmonpqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["170\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncoacljnajcsnajkncasca\n", "output": ["168\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n18\n61\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsaeea\n", "output": ["26\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanscjanjlcanj\n", "output": ["200\n"]}, {"input": "1\nnbcdefyhilkjmaopqrstuvwxgz\nsfdba\n", "output": ["29\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforbes\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n70\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwerbyuiopasdfghjklzxcvtnm\nabacaba\n", "output": ["12\n0\n68\n18\n46\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n18\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncatca\n", "output": ["161\n"]}, {"input": "5\nzyxwvutsrqponmakjihgfedcbl\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["19\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["12\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\ncsdea\n", "output": ["36\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nkelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["18\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuuterqponmjklihbfsdcya\nsfdba\n", "output": ["12\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjldanb\n", "output": ["195\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\nasdae\n", "output": ["40\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabbcaba\n", "output": ["11\n0\n68\n18\n52\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnzpqrstuvwxyo\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n106\n18\n74\n"]}, {"input": "1\nzyxwjvtsrqponmlkvihgfedcba\nnnacljnajcrcajkncasca\n", "output": ["211\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbscfa\n", "output": ["41\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n66\n18\n74\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlnlhe\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n6\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\neholl\nabcdefghijklmnopqrstuvwyyz\ni\nabcdefohijllmngpqrstuvwxyz\ndodefordes\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbbacaaa\n", "output": ["13\n0\n49\n0\n35\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljihgfedcba\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqpqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabcabaa\n", "output": ["14\n0\n68\n24\n52\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnlleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nscerofedod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n67\n18\n74\n"]}, {"input": "1\ndfxwvutsrqponmlkjihgfyzcba\naatccnkiansljanjccana\n", "output": ["148\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nzyxwvutsrqponmlkjihgfedcba\ni\nzypwvutsrqxonmlljihgfedcba\ncodeforces\nmnbvcxylkjhgfdsapoiuztrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyugopasdfihjklzxcvbnm\nbbacaba\n", "output": ["11\n0\n68\n18\n61\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmleh\nabcxefghijklmnupqrstovwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\nseeqofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n63\n18\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolleh\naacdefghijklmnopqrstuvvxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeefoqcse\nqwertyujnpasdfghjklzxcvbnn\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n78\n0\n74\n"]}, {"input": "1\nabcdehgsilkilnopqrftuvwxyz\naeate\n", "output": ["42\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmlfh\nabchefxgijklmnupqrstovwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["10\n0\n65\n18\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmelh\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["20\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhem\nabchefxgijklmnupqrstouwdyz\ni\nabcdefghhjmlmnopqrstuvwxyz\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["17\n0\n65\n24\n74\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nnmhel\nabchefxgijklmnupqrstouwdyz\ni\nabcdsfghzjmlmnopqretuvwxyh\nseerofccod\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqq\nqwtreyuiopasefghjklzxcvbnm\nabacaba\n", "output": ["16\n0\n53\n24\n74\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nolldh\nzyxvvutsrqponilkjmhgfddcaa\ni\nabcdefghiiklmnopqrstuvwxyz\ncoeeforcsf\nnnbvcxzlkjhgfdsapnjuytrewq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqdertyuiopaswfghmklzwcvbnj\nabacaba\n", "output": ["15\n0\n79\n6\n74\n"]}, {"input": "1\nzxxwvutfqqponlekljshhiccca\nteaae\n", "output": ["30\n"]}, {"input": "1\nztxwvuxfqqponlikcjshieccma\neaaet\n", "output": ["28\n"]}, {"input": "5\nabcdefghijjlmnopqrstuvwxyz\nhdlln\naacddfghmjklinopqrstuvvxyz\nj\nzqxwyutsrvponmlkiihgfedcba\ncodeforcse\nqwertyujnpasdfghjknzxcvbnl\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqrqqqqqp\nqdertyuiobaswfghmklzwcvpnj\nabaacba\n", "output": ["14\n0\n82\n15\n26\n"]}, {"input": "1\narcdeffhilkjmnopqbstuvwxyz\nabdes\n", "output": ["46\n"]}, {"input": "1\nzyxwvutsrqponclkjihgeedmba\nacsacnkjanscjanjlcanc\n", "output": ["144\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqr\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n9\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nccacljnajcsnajknoasca\n", "output": ["146\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnnjcacaska\n", "output": ["145\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nbaacaba\n", "output": ["12\n0\n68\n24\n61\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhemln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabababa\n", "output": ["14\n0\n68\n0\n78\n"]}, {"input": "1\nzyxwautsrqponmlkjihgfedcbv\nacsacnkcanrcjanjlcanj\n", "output": ["198\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhdllo\nabcdezghijklmnopqrstuvwxyf\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaaa\n", "output": ["15\n0\n68\n0\n48\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nabdes\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxzz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnackjnajcsnajkncasca\n", "output": ["164\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nabdfs\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabcdefyhilkjlnopqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxxz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nacsacnkjanscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nasdeb\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzjxwvutsrqponmhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nabcdefyhilkhmnopqrstuvwxjz\nbeesa\n", "output": ["35\n"]}, {"input": "1\nabcdefjhilkglnopqrstuvwxyz\nabdes\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxgz\nsfdba\n", "output": ["18\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabodefyhilkjlncpqrstuvwxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\nsedaa\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvwxyz\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcsnajkncasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbedsa\n", "output": ["37\n"]}, {"input": "5\nabcdekghijflmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "1\nzhxwvutsrqponmjklihyfedcba\nsadeb\n", "output": ["25\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nzyxwvutsrqponmlljhhgfedcba\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrqpnomhklihyfedcba\nasedb\n", "output": ["35\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\nbeesa\n", "output": ["35\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzyxwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcsnajkncasca\n", "output": ["166\n"]}, {"input": "1\nabwdefyhilkjlncpqrstuvoxgz\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nbnacljnajcsnaikncasca\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmnopqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabacaba\n", "output": ["14\n0\n68\n6\n74\n"]}, {"input": "1\nabcdefzhijklmnopqrstuvwxgz\nbnacljnajcnnajkscasca\n", "output": ["167\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\naedsb\n", "output": ["37\n"]}, {"input": "5\nzyxwvutsrqponmlfjihgkedcba\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsrpponmhklihyfedcba\naseeb\n", "output": ["35\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabdet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzywwvutsrqponmlkjihgfedcba\njnacljnajcsnackncasca\n", "output": ["159\n"]}, {"input": "1\nzgxwvutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "1\nabcdefghijklmnopqrstvvwxyz\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\nzgxovutsrqpcnljklihyfedwba\nsedba\n", "output": ["18\n"]}, {"input": "1\ndyxwvutsrqponmlkjihgfezcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "1\nabcdefyhilkjmponqrstuvwxhz\naades\n", "output": ["18\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghijklmnopqrstuvvxyz\nacsacnkianscjanjclanb\n", "output": ["181\n"]}, {"input": "1\nzhxwvuusrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhelln\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nabcdefghilkjlnopqrstuvwxyz\nabeet\n", "output": ["19\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\nolleh\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghiiklmnopqrstuvwxyz\ncodeforces\nqwertyujnpasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["13\n0\n68\n0\n74\n"]}, {"input": "1\nzgxwuutsrqponmjklihbfedcya\nsfdba\n", "output": ["24\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\niello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodffcroes\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nababcba\n", "output": ["14\n0\n70\n0\n56\n"]}, {"input": "1\nzyxwvvtsrqponmlkjihgfedcba\ncnacljnajcrnajkncasca\n", "output": ["164\n"]}, {"input": "1\ndexwvutsrqponmlkjihgfyzcba\nacsacnkianscjanjlcanb\n", "output": ["167\n"]}, {"input": "5\nzyxwvutsrqponmlkjihgfedcba\ngelln\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnoxqrstuvwpyz\ncodeforces\nmnbvcxzlkjhgfdsapoiuytrewq\nqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\newqrtyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["11\n0\n68\n18\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nhenll\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijllmnopqrstuvwxyz\ncodeforces\nmnbvcxzljjhefdsapoiuytrgwq\nqqqqqqqqqqqrqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuhopasdfghjklzxcvbnm\nabaacba\n", "output": ["14\n0\n68\n6\n52\n"]}, {"input": "1\nzhxwvuvsrqponmjklihyfedcba\nbsdea\n", "output": ["37\n"]}, {"input": "5\nzyxwvttsrqponmlfjihgkedcba\nlelhn\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforces\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghiklzxcvbnm\nabacaba\n", "output": ["24\n0\n68\n0\n74\n"]}, {"input": "5\nabcdefghijklmnopqrstuvwxyz\nnlleh\nabcxefghijklmnopqrstuvwdyz\ni\nabcdefghhjllmnopqrstuvwxyz\ncodeforecs\nmnbvcxzlkjhefdsapoiuytrgwq\nqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n", "output": ["12\n0\n68\n18\n74\n"]}, {"input": "1\nzjxwvutsroponmhklihyfedcba\nbseeb\n", "output": ["34\n"]}, {"input": "1\nzyxwvutsrqponljklihgfedcba\nabeet\n", "output": ["19\n"]}], "task_id": "codecontest/98", "prompt": "You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one and to type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "repair_prompt": ["You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one and to type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard. The word s also consists only of lowercase Latin letters.\n\nTo type a word, you need to type all its letters consecutively one by one. To type each letter you must position your hand exactly over the corresponding key and press it.\n\nMoving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). No time is spent on pressing the keys and on placing your hand over the first letter of the word.\n\nFor example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order. The letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". \n\nDetermine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "You are given a keyboard that consists of 26 keys, arranged sequentially in one row in a certain order, where each key corresponds to a unique lowercase Latin letter. You have to type the word s on this keyboard, which also consists only of lowercase Latin letters. To type a word, you need to type all its letters consecutively one by one, and to type each letter, you must position your hand exactly over the corresponding key and press it. Moving the hand between the keys takes time which is equal to the absolute value of the difference between positions of these keys (the keys are numbered from left to right). For example, consider a keyboard where the letters from 'a' to 'z' are arranged in consecutive alphabetical order; the letters 'h', 'e', 'l' and 'o' then are on the positions 8, 5, 12 and 15, respectively. Therefore, it will take |5 - 8| + |12 - 5| + |12 - 12| + |15 - 12| = 13 units of time to type the word \"hello\". Determine how long it will take to print the word s.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time required to type each word on the given keyboard layout.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a mapping of each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to zero\n        total_time = 0\n        \n        # Iterate through the word and calculate the time taken to move between consecutive letters\n        for i in range(1, len(word)):\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    number_of_cases = int(input().strip())\n    test_cases = []\n    \n    for _ in range(number_of_cases):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal typing time for each test case.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Iterate through the word to calculate the typing time\n        for i in range(1, len(word)):\n            # Calculate the absolute difference in positions between consecutive letters\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\ndef main():\n    number_of_cases = int(input().strip())\n    test_cases = []\n    \n    for _ in range(number_of_cases):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Output interface\n    results = calculate_typing_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time to type each word on a given keyboard layout.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the minimal time to type each word.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        char_to_position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to zero\n        total_time = 0\n        \n        # Iterate through the word and calculate the time taken to type it\n        for i in range(1, len(word)):\n            # Calculate the absolute difference between consecutive character positions\n            total_time += abs(char_to_position[word[i]] - char_to_position[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read the number of test cases\n    t = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times for all test cases\n    results = calculate_typing_time(test_cases)\n    \n    # Print the results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time to type each word on a custom keyboard layout.\n\n    Args:\n        test_cases (List[Tuple[str, str]]): A list of tuples where each tuple contains\n                                            a keyboard layout and a word to type.\n\n    Returns:\n        List[int]: A list of integers representing the minimal time to type each word.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to 0\n        total_time = 0\n        \n        # Calculate the time taken to type the word\n        for i in range(1, len(word)):\n            # Calculate the absolute difference in positions between consecutive characters\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for this test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\nnumber_of_cases = int(input().strip())\ntest_cases = []\n\nfor _ in range(number_of_cases):\n    keyboard = input().strip()\n    word = input().strip()\n    test_cases.append((keyboard, word))\n\n# Output interface\nresults = calculate_typing_time(test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time to type each word on a given keyboard layout.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word.\n\n    Returns:\n        A list of integers representing the time taken to type each word.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Create a dictionary to map each character to its position on the keyboard\n        char_position = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to zero\n        total_time = 0\n        \n        # Iterate over the word to calculate the typing time\n        for i in range(1, len(word)):\n            # Calculate the absolute difference between consecutive characters\n            total_time += abs(char_position[word[i]] - char_position[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times for all test cases\n    results = calculate_typing_time(test_cases)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time required to type each word on the given keyboard layout.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word to be typed.\n\n    Returns:\n        A list of integers representing the typing time for each test case.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Map each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize typing time to 0\n        time = 0\n        \n        # Iterate through the word and calculate the typing time\n        for i in range(1, len(word)):\n            # Calculate the absolute difference between consecutive letters\n            time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times for all test cases\n    results = calculate_typing_time(test_cases)\n    \n    # Output the results\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time required to type each word on a custom keyboard layout.\n\n    Args:\n        test_cases: A list of tuples, each containing a keyboard layout and a word to type.\n\n    Returns:\n        A list of integers representing the minimal time required for each test case.\n    \"\"\"\n    results = []\n    for keyboard, word in test_cases:\n        # Create a dictionary mapping each character to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to zero\n        total_time = 0\n        \n        # Iterate through the word to calculate the total typing time\n        for i in range(1, len(word)):\n            # Calculate the absolute difference between consecutive characters\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input().strip())\n    test_cases = []\n    \n    # Read each test case\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Calculate typing times for all test cases\n    results = calculate_typing_time(test_cases)\n    \n    # Output results for each test case\n    for result in results:\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_typing_time(test_cases: List[Tuple[str, str]]) -> List[int]:\n    \"\"\"Calculate the minimal time to type each word on a custom keyboard layout.\n\n    Args:\n        test_cases (List[Tuple[str, str]]): A list of tuples where each tuple contains\n                                            a keyboard layout and a word to type.\n\n    Returns:\n        List[int]: A list of integers representing the minimal time to type each word.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary mapping each character to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total time to 0\n        total_time = 0\n        \n        # Iterate through the word to calculate the total typing time\n        for i in range(1, len(word)):\n            # Calculate the absolute difference between consecutive character positions\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input().strip())\n    test_cases = []\n    \n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    results = calculate_typing_time(test_cases)\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_typing_time(keyboard: str, word: str) -> int:\n    \"\"\"Calculate the minimal typing time for a given word based on a custom keyboard layout.\n\n    Args:\n        keyboard (str): A string of 26 unique lowercase Latin letters representing the keyboard layout.\n        word (str): The word to be typed using the keyboard layout.\n\n    Returns:\n        int: The minimal time required to type the word.\n    \"\"\"\n    # Create a mapping from each letter to its position on the keyboard\n    position_map = {letter: index for index, letter in enumerate(keyboard)}\n    \n    # Initialize total typing time\n    total_time = 0\n    \n    # Iterate through the word and calculate the typing time\n    for i in range(1, len(word)):\n        # Calculate the absolute difference between consecutive letters\n        total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n    \n    return total_time\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    # Read the number of test cases\n    t = int(input().strip())\n    \n    for _ in range(t):\n        # Read the keyboard layout\n        keyboard = input().strip()\n        \n        # Read the word to be typed\n        word = input().strip()\n        \n        # Calculate the typing time for the current test case\n        result = calculate_typing_time(keyboard, word)\n        \n        # Print the result\n        print(result)\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef calculate_typing_time(test_cases: List[tuple]) -> List[int]:\n    \"\"\"Calculate the typing time for each test case based on the given keyboard layout and word.\n\n    Args:\n        test_cases (List[tuple]): A list of tuples where each tuple contains a keyboard layout and a word.\n\n    Returns:\n        List[int]: A list of integers representing the typing time for each test case.\n    \"\"\"\n    results = []\n    \n    for keyboard, word in test_cases:\n        # Create a dictionary to map each letter to its position on the keyboard\n        position_map = {char: idx for idx, char in enumerate(keyboard)}\n        \n        # Initialize total typing time\n        total_time = 0\n        \n        # Iterate through the word to calculate the typing time\n        for i in range(1, len(word)):\n            # Calculate the time taken to move from the previous letter to the current letter\n            total_time += abs(position_map[word[i]] - position_map[word[i - 1]])\n        \n        # Append the result for the current test case\n        results.append(total_time)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        keyboard = input().strip()\n        word = input().strip()\n        test_cases.append((keyboard, word))\n    \n    # Output interface\n    results = calculate_typing_time(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to calculate the time taken to type a word on a custom keyboard layout. The main challenge is to efficiently compute the time by determining the position of each letter in the custom layout and calculating the movement time between consecutive letters. The solution must handle up to 1000 test cases and words of up to 50 characters efficiently.\nrequirement pool:\n- Implement the main algorithm to calculate typing time based on keyboard layout.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the algorithm for faster execution.\n- Provide detailed error messages for invalid inputs.\n- Include additional features like visualizing the keyboard layout.\nWe will implement a function that calculates the time taken to type a word on a custom keyboard layout. The function will first map each character in the keyboard layout to its position. Then, for each test case, it will calculate the total time by summing the absolute differences between the positions of consecutive characters in the word. This approach ensures efficient computation even for the maximum constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key position. The layout determines the position of each letter for typing.\n\n    'absolute value of the difference'\n    Explanation: This refers to the time taken to move between keys, calculated as the absolute difference between their positions on the keyboard.\n\n# [phrase showing quantity relationship]\n    'difference between positions'\n    Explanation: This indicates the calculation of time taken to move from one key to another, which is implemented as `abs(position1 - position2)` in code.\n\n# [degree adverb]\n    'minimal time'\n    Explanation: The requirement is to calculate the least amount of time needed to type the word, which involves summing the absolute differences between consecutive key positions.\n\n# [code logic]\n    1. Parse the number of test cases.\n    2. For each test case:\n        a. Create a mapping of each letter to its position based on the given keyboard layout.\n        b. Initialize a variable to store the total time.\n        c. Iterate through the word, calculating the time taken to move from one letter to the next using the absolute difference in their positions.\n        d. Output the total time for each test case.\n\n# [edge case]\n    abacaba on keyboard abcdefghijklmnopqrstuvwxyz = 6\n    Explanation: The word \"abacaba\" involves moving back and forth between 'a' and 'b', resulting in a total time of 6 units.\n\n    i on keyboard abcdefghijklmnopqrstuvwxyz = 0\n    Explanation: Typing a single letter requires no movement, so the expected output is 0.\n\n    qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq on keyboard qwertyuiopasdfghjklzxcvbnm = 0\n    Explanation: Repeatedly typing the same letter requires no movement, so the expected output is 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for cases where no movement is required (e.g., single letter or repeated letters).\n", "requirement analysis:\nThe requirements focus on calculating the time taken to type a word on a custom keyboard layout. The solution must handle multiple test cases efficiently and provide accurate results. Edge cases such as single-letter words and varying keyboard layouts must be considered.\nrequirement pool:\n- Implement the main function to calculate typing time.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the algorithm for performance with large inputs.\n- Validate input to ensure correct format and constraints.\n- Provide clear and formatted output for user understanding.\nWe will implement a function to calculate the typing time based on the given keyboard layout and word. The function will iterate through the word, calculate the absolute difference in positions between consecutive letters, and sum these differences to determine the total typing time. We will use a dictionary to map each letter to its position on the keyboard for efficient lookup.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key position. The layout determines the position of each letter for calculating typing time.\n\n    'absolute value of the difference'\n    Explanation: This refers to the calculation of the time taken to move between keys, which is the absolute difference between their positions on the keyboard.\n\n# [phrase showing quantity relationship]\n    'difference between positions'\n    Explanation: This indicates the calculation of time based on the positional difference between consecutive letters in the word. In code, this can be implemented using `abs(position1 - position2)`.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to find the minimal time to type the word, which means calculating the exact time based on the given keyboard layout without any additional delays.\n\n# [code logic]\n    1. Parse the number of test cases.\n    2. For each test case, read the keyboard layout and the word to be typed.\n    3. Create a dictionary mapping each letter to its position in the keyboard layout.\n    4. Initialize a variable to store the total typing time.\n    5. Iterate through the word, calculate the absolute difference in positions between consecutive letters, and add these differences to the total typing time.\n    6. Output the total typing time for each test case.\n\n# [edge case]\n    Test case with a single letter word:\n    Input: \n    abcdefghijklmnopqrstuvwxyz\n    i\n    Expected output: 0\n    Explanation: No movement is needed as there is only one letter.\n\n    Test case with repeated letters:\n    Input:\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n    Expected output: 0\n    Explanation: All letters are the same, so no movement is needed.\n\n    Test case with maximum length word:\n    Input:\n    qwertyuiopasdfghjklzxcvbnm\n    abacaba\n    Expected output: 74\n    Explanation: Calculate based on given positions in 'qwertyuiopasdfghjklzxcvbnm'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for cases where no movement is needed (single letter or repeated letters).\n", "requirement analysis:\nThe task requires calculating the time taken to type a word on a custom keyboard layout. The main challenge is to efficiently compute the time based on the positions of letters on the keyboard for multiple test cases. The solution should handle up to 1000 test cases and words of length up to 50.\nrequirement pool:\n- Implement the main algorithm to calculate typing time.\n- Optimize the solution for performance with large inputs.\n- Ensure the solution handles edge cases, such as single-letter words.\n- Provide clear output format as specified in the requirements.\n- Include comments and documentation for code clarity.\nWe will implement a function that calculates the time taken to type a word on a custom keyboard layout. The function will first map each character of the keyboard to its position using a dictionary for O(1) lookup time. Then, for each word, it will calculate the total time by summing the absolute differences between consecutive character positions. This approach ensures efficient handling of up to 1000 test cases with words of length up to 50.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': A sequence of 26 unique lowercase Latin letters representing the layout of keys.\n    'word s': A sequence of lowercase Latin letters that needs to be typed using the given keyboard layout.\n    'time': The total time taken to type the word, calculated based on the movement between keys.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference': This refers to the non-negative difference between positions of two keys, which is used to calculate the time taken to move between them.\n\n# [degree adverb] \n    'minimal': This implies that the time calculated should be the least possible based on the given keyboard layout and word.\n\n# [code logic]\n1. Parse the number of test cases, t.\n2. For each test case:\n   - Read the keyboard layout and map each character to its position using a dictionary.\n   - Read the word s.\n   - Initialize a variable to keep track of the total time.\n   - Iterate through the word s, calculating the absolute difference in positions between consecutive characters and summing these values to get the total time.\n   - Output the total time for each test case.\n\n# [edge case] \n    Test case 1: \n    Input: \n    abcdefghijklmnopqrstuvwxyz\n    a\n    Expected Output: 0\n    Explanation: Since there is only one letter, no movement is needed, resulting in zero time.\n\n    Test case 2:\n    Input: \n    zyxwvutsrqponmlkjihgfedcba\n    zzzzz\n    Expected Output: 0\n    Explanation: All characters are the same, so no movement is needed between keys.\n\n    Test case 3:\n    Input: \n    qwertyuiopasdfghjklzxcvbnm\n    qazwsxedc\n    Expected Output: 20\n    Explanation: The time is calculated based on the specific positions of each character in the custom keyboard layout.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute differences between consecutive character positions will naturally handle these cases.\n", "requirement analysis:\nThe requirement is to calculate the time taken to type a word on a custom keyboard layout. The main challenge is to efficiently compute the time by determining the position of each letter in the custom layout and calculating the movement time between consecutive letters. The solution should handle up to 1000 test cases and words of up to 50 characters efficiently.\nrequirement pool:\n- Implement the main algorithm to calculate typing time based on keyboard layout.\n- Optimize the algorithm for performance with large input sizes.\n- Ensure the solution handles edge cases, such as single-letter words, correctly.\n- Provide clear and concise output for each test case.\n- Consider user interface improvements for better input handling.\nWe will implement a function that calculates the time taken to type a word on a custom keyboard layout. The function will first map each character of the keyboard to its position using a dictionary for O(1) lookup time. Then, for each test case, it will compute the total time by summing the absolute differences between the positions of consecutive characters in the word. This approach ensures efficient handling of up to 1000 test cases and words of up to 50 characters.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': A sequence of 26 unique lowercase Latin letters representing the layout of keys.\n    'word s': A sequence of lowercase Latin letters that needs to be typed using the given keyboard layout.\n    Explanation: The task involves calculating the time taken to type a word on a custom keyboard layout by moving between keys.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference': This refers to the non-negative difference between the positions of two keys on the keyboard.\n    Implementation: Use `abs(position1 - position2)` in code to calculate the time taken to move between two keys.\n\n# [degree adverb]\n    'minimal': Refers to the least amount of time required to type the word, which is achieved by calculating the sum of absolute differences between consecutive key positions.\n    Implementation: Ensure that the calculation of time is done by summing up all necessary movements without any additional operations.\n\n# [code logic]\n1. Parse the number of test cases, `t`.\n2. For each test case:\n   - Read the keyboard layout and map each character to its position using a dictionary.\n   - Initialize a variable to store the total time.\n   - For each character in the word (except the first one), calculate the absolute difference in positions with the previous character and add it to the total time.\n   - Output the total time for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    abcdefghijklmnopqrstuvwxyz\n    a\n    Expected Output: 0\n    Explanation: No movement is needed as there is only one character.\n\n    Test case 2:\n    Input:\n    zyxwvutsrqponmlkjihgfedcba\n    zzzzz\n    Expected Output: 0\n    Explanation: All characters are the same, so no movement is needed.\n\n    Test case 3:\n    Input:\n    qwertyuiopasdfghjklzxcvbnm\n    qwerty\n    Expected Output: 25\n    Explanation: Calculate the sum of absolute differences between consecutive characters in \"qwerty\" based on their positions in the given keyboard layout.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute differences and summing them up will naturally handle these cases correctly.\n", "requirement analysis:\nThe requirement is to calculate the time taken to type a word on a custom keyboard layout. The solution should efficiently handle up to 1000 test cases, each with a unique keyboard layout and word. The focus is on calculating the movement time between keys, which is determined by the absolute difference in their positions on the keyboard.\nrequirement pool:\n- Implement the main algorithm to calculate typing time based on keyboard layout.\n- Optimize the solution for performance with large input sizes.\n- Ensure the solution handles edge cases, such as minimal and maximal word lengths.\n- Provide clear and concise output for each test case.\n- Develop a user-friendly interface for input and output.\nWe will implement a function that calculates the time taken to type a word on a custom keyboard layout. The function will first map each character of the keyboard to its position using a dictionary for O(1) access time. Then, for each word, it will calculate the total time by summing up the absolute differences between the positions of consecutive characters. This approach ensures efficient handling of up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': A sequence of 26 unique lowercase Latin letters representing the layout of keys.\n    'word s': A sequence of lowercase Latin letters that needs to be typed using the given keyboard layout.\n    'time': The total time taken to type the word, calculated as the sum of absolute differences between positions of consecutive letters on the keyboard.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference': This refers to the non-negative difference between two positions on the keyboard, which can be implemented using the `abs()` function in Python.\n\n# [degree adverb]\n    'minimal': This implies that the calculation should be efficient and direct, focusing on the shortest path between consecutive keys, which is inherently handled by summing absolute differences.\n\n# [code logic]\n1. Parse the number of test cases, `t`.\n2. For each test case:\n   - Read the keyboard layout and map each character to its position using a dictionary.\n   - Read the word `s`.\n   - Initialize a variable to track the total time.\n   - Iterate over each character in the word `s` starting from the second character:\n     - Calculate the absolute difference between the current character's position and the previous character's position.\n     - Add this difference to the total time.\n   - Output the total time for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output: \n    0\n    Explanation: Since there is only one letter, no movement is required, resulting in zero time.\n\n    Test case 2:\n    Input: \n    1\n    zyxwvutsrqponmlkjihgfedcba\n    z\n    Output: \n    0\n    Explanation: Similar to the first case, a single letter requires no movement.\n\n    Test case 3:\n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    az\n    Output: \n    25\n    Explanation: The positions of 'a' and 'z' are 0 and 25 respectively, so |25 - 0| = 25.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles cases with single letters or any sequence of letters by calculating differences only when there are at least two letters.\n", "requirement analysis:\nThe requirement is to calculate the time taken to type a word on a custom keyboard layout. The solution should efficiently handle up to 1000 test cases, each with a unique keyboard layout and word. The output should be the minimal time for each test case, considering the absolute positional differences between consecutive letters in the word.\nrequirement pool:\n- Efficiently calculate typing time for each test case.\n- Handle up to 1000 test cases in a single execution.\n- Support custom keyboard layouts for each test case.\n- Provide clear and concise output for each test case.\n- Optimize for performance with large input sizes.\nWe will implement a function that calculates the typing time for each test case by mapping each letter to its position on the given keyboard layout. The function will iterate through the word, calculate the absolute difference in positions between consecutive letters, and sum these differences to get the total typing time. We will use Python's built-in data structures for efficient mapping and calculation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': A string of 26 unique lowercase Latin letters representing the layout of keys.\n    'word s': A string of lowercase Latin letters that needs to be typed using the given keyboard layout.\n    Explanation: The task involves calculating the time taken to type a word on a custom keyboard layout by moving between keys.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference': This refers to the non-negative difference between the positions of two keys on the keyboard.\n    Implementation: Use `abs(position1 - position2)` in code to calculate the time taken to move between two keys.\n\n# [degree adverb]\n    'minimal': Refers to the least amount of time required to type the word, which is achieved by calculating the sum of absolute differences between consecutive key positions.\n    Implementation: Ensure that the sum of absolute differences is calculated correctly for each test case.\n\n# [code logic]\n1. Parse the number of test cases, `t`.\n2. For each test case:\n   - Read the keyboard layout and map each letter to its position.\n   - Read the word `s` to be typed.\n   - Initialize a variable `time` to 0.\n   - Iterate through the word `s`:\n     - For each pair of consecutive letters, calculate the absolute difference in their positions using the mapped positions.\n     - Add this difference to `time`.\n   - Output the total `time` for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    abcdefghijklmnopqrstuvwxyz\n    a\n    Expected Output: 0\n    Explanation: Only one letter, no movement required.\n\n    Test case 2:\n    Input:\n    zyxwvutsrqponmlkjihgfedcba\n    az\n    Expected Output: 25\n    Explanation: The positions are 25 and 0, so |25 - 0| = 25.\n\n    Test case 3:\n    Input:\n    qwertyuiopasdfghjklzxcvbnm\n    qqqqq\n    Expected Output: 0\n    Explanation: All letters are the same, no movement required.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating absolute differences and summing them will naturally handle these cases.\n", "requirement analysis:\nThe requirements focus on calculating the time taken to type a word on a custom keyboard layout. The solution must handle multiple test cases efficiently and provide accurate results. Edge cases such as single-letter words and maximum word length must be considered. The output format is crucial for user understanding.\nrequirement pool:\n- Accurate calculation of typing time based on keyboard layout\n- Efficient handling of up to 1000 test cases\n- Graceful handling of edge cases\n- Clear and concise output format\n- Optimization for maximum input size\nWe will implement a function that calculates the time taken to type a word on a custom keyboard layout. The function will iterate through each test case, map each character of the keyboard to its position, and then compute the total time by summing the absolute differences between consecutive characters in the word. This approach ensures efficient handling of up to 1000 test cases. We will use Python's built-in functions and data structures to keep the implementation simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard': A string of 26 unique lowercase Latin letters representing the layout of the keyboard.\n    'word s': The word to be typed using the given keyboard layout.\n    Explanation: The task is to calculate the time taken to type a word on a custom keyboard layout by moving between keys.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference': This refers to the non-negative difference between the positions of two keys on the keyboard.\n    Implementation: Use `abs(position1 - position2)` in code to calculate the time taken to move between two keys.\n\n# [degree adverb]\n    'minimal': Refers to the least amount of time required to type the word, which is inherently calculated by summing the absolute differences between consecutive key positions.\n    Implementation: The logic inherently calculates this by summing the required movements.\n\n# [code logic]\n1. For each test case, read the keyboard layout and the word to be typed.\n2. Create a dictionary mapping each character in the keyboard to its position.\n3. Initialize a variable to keep track of the total time.\n4. Iterate through each character in the word:\n   - Calculate the absolute difference in positions between consecutive characters.\n   - Add this difference to the total time.\n5. Output the total time for each test case.\n\n# [edge case]\n    Test case 1: keyboard = \"abcdefghijklmnopqrstuvwxyz\", word = \"a\" = 0\n    Explanation: Typing a single letter requires no movement, so the time is 0.\n\n    Test case 2: keyboard = \"zyxwvutsrqponmlkjihgfedcba\", word = \"abc\" = 4\n    Explanation: The positions are 25, 24, and 23 respectively, so |24-25| + |23-24| = 1 + 1 = 2.\n\n    Test case 3: keyboard = \"qwertyuiopasdfghjklzxcvbnm\", word = \"mnbvcxz\" = 10\n    Explanation: The positions are 25, 24, 23, 22, 21, 20, so |24-25| + |23-24| + |22-23| + |21-22| + |20-21| = 1 + 1 + 1 + 1 + 1 = 5.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by calculating the absolute differences between consecutive key positions.\n", "requirement analysis:\nThe requirement is to calculate the minimal time to type a given word on a custom keyboard layout. The solution must handle multiple test cases efficiently and provide accurate results for each. The keyboard layout is unique for each test case, and the word length varies from 1 to 50 characters.\nrequirement pool:\n- Implement the main function to calculate typing time.\n- Ensure the solution handles up to 1000 test cases efficiently.\n- Optimize the algorithm for performance with large inputs.\n- Validate input to ensure correct format and constraints.\n- Provide clear documentation and comments in the code.\nWe will implement a function that calculates the minimal time to type a given word on a custom keyboard layout. The function will first map each character of the keyboard to its position using a dictionary for O(1) access time. Then, for each test case, it will compute the total time by summing the absolute differences between consecutive character positions in the word. This approach ensures efficient handling of up to 1000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key position. The layout determines the position of each letter for typing.\n\n    'absolute value of the difference'\n    Explanation: This refers to the time taken to move between keys, calculated as the absolute difference in their positions on the keyboard.\n\n# [phrase showing quantity relationship]\n    'difference between positions'\n    Explanation: This indicates the calculation of time taken to move from one key to another, implemented as `abs(position1 - position2)` in code.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to calculate the minimal time needed to type the word, which involves summing the absolute differences between consecutive key positions.\n\n# [code logic]\n    1. Parse the number of test cases.\n    2. For each test case:\n        - Create a dictionary mapping each character in the keyboard layout to its position.\n        - Initialize a variable to store the total time.\n        - Iterate through the word, calculating the absolute difference between consecutive character positions and adding it to the total time.\n    3. Print the total time for each test case.\n\n# [edge case]\n    Test case with a single character word:\n    Input: 'abcdefghijklmnopqrstuvwxyz', 'i'\n    Output: 0\n    Explanation: No movement is needed as there is only one character.\n\n    Test case with repeated characters:\n    Input: 'qwertyuiopasdfghjklzxcvbnm', 'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq'\n    Output: 0\n    Explanation: All characters are the same, so no movement is needed.\n\n    Test case with maximum length word:\n    Input: 'qwertyuiopasdfghjklzxcvbnm', 'abacaba'\n    Output: 74\n    Explanation: The calculation involves multiple movements between different keys.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles single and repeated characters naturally by calculating zero movement when consecutive characters are the same.\n", "requirement analysis:\nThe task requires calculating the time taken to type a word on a custom keyboard layout. The main challenge is to efficiently compute the time by determining the position of each letter on the keyboard and summing the absolute differences between consecutive letters. The solution must handle up to 1000 test cases with words up to 50 characters long.\nrequirement pool:\n- Implement the main algorithm to calculate typing time based on keyboard layout.\n- Optimize the solution for performance with large input sizes.\n- Ensure the solution handles edge cases, such as single-letter words.\n- Provide clear and concise output for each test case.\n- Consider user interface improvements for better usability.\nWe will implement a function that calculates the typing time for a given word based on a custom keyboard layout. The function will map each letter to its position on the keyboard and compute the total time by summing the absolute differences between consecutive letter positions. We will use Python's built-in data structures for efficient mapping and calculation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key on the keyboard. The position of each letter in this string determines its position on the keyboard.\n\n    'typing time'\n    Explanation: Typing time is calculated as the sum of the absolute differences between the positions of consecutive letters in the word on the given keyboard layout.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference'\n    Explanation: This refers to the non-negative difference between the positions of two keys. In code, this can be implemented using the `abs()` function in Python.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to calculate the exact time based on the given keyboard layout, which inherently ensures minimal time as it directly uses the provided positions.\n\n# [code logic]\n1. Parse the number of test cases, `t`.\n2. For each test case:\n   - Read the keyboard layout and map each letter to its position.\n   - Read the word to be typed.\n   - Initialize a variable to store the total typing time.\n   - Iterate through the word, calculating the absolute difference in positions between consecutive letters and add it to the total typing time.\n   - Print the total typing time for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: \n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    Output: \n    0\n    Explanation: Typing a single letter requires no movement, hence the time is 0.\n\n    Test case 2:\n    Input:\n    1\n    zyxwvutsrqponmlkjihgfedcba\n    az\n    Output:\n    25\n    Explanation: The position difference between 'a' and 'z' is 25 in this reversed keyboard layout.\n\n    Test case 3:\n    Input:\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qwerty\n    Output:\n    5\n    Explanation: The word \"qwerty\" is typed sequentially on this custom layout, requiring minimal movement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles all cases by calculating position differences for any given keyboard layout and word.\n", "requirement analysis:\nThe task requires calculating the time taken to type a word on a custom keyboard layout. The main challenge is efficiently mapping each letter to its position on the keyboard and computing the total time based on the movement between consecutive letters. The solution must handle up to 1000 test cases and words of varying lengths, ensuring performance and accuracy.\nrequirement pool:\n- Implement the function to calculate typing time based on keyboard layout and word.\n- Optimize the solution for performance with large input sizes.\n- Ensure the solution handles edge cases, such as single-letter words.\n- Provide clear and formatted output for each test case.\n- Include error handling for invalid inputs.\nWe will implement a function that calculates the typing time based on the given keyboard layout and word. The function will map each letter to its position on the keyboard using a dictionary for quick lookup. We will iterate through the word, calculating the time taken to move between consecutive letters. The solution will handle multiple test cases efficiently by processing each test case independently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'keyboard layout'\n    Explanation: The keyboard layout is a string of 26 unique lowercase Latin letters, each representing a key position. The layout determines the position of each letter for typing.\n\n    'typing time'\n    Explanation: Typing time is calculated based on the movement between keys, which is the absolute difference in their positions on the keyboard.\n\n# [phrase showing quantity relationship]\n    'absolute value of the difference'\n    Explanation: This phrase indicates that the time taken to move between keys is calculated using the absolute difference between their positions. In code, this can be implemented using the `abs()` function in Python.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement asks for the minimal time to type the word, meaning we need to calculate the exact time based on the given keyboard layout without any additional delays.\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case:\n   - Read the keyboard layout and map each letter to its position using a dictionary.\n   - Read the word to be typed.\n   - Initialize a variable to store the total typing time.\n   - Iterate through the word, calculating the time taken to move between consecutive letters using their positions from the dictionary.\n   - Output the total typing time for each test case.\n\n# [edge case]\n    Test case with a single letter word:\n    Input: \n    ```\n    1\n    abcdefghijklmnopqrstuvwxyz\n    a\n    ```\n    Expected Output: 0\n    Explanation: No movement is needed as there is only one letter.\n\n    Test case with repeated letters:\n    Input:\n    ```\n    1\n    qwertyuiopasdfghjklzxcvbnm\n    qqq\n    ```\n    Expected Output: 0\n    Explanation: No movement is needed as all letters are the same.\n\n    Test case with maximum length word:\n    Input:\n    ```\n    1\n    abcdefghijklmnopqrstuvwxyz\n    zyxwvutsrqponmlkjihgfedcba\n    ```\n    Expected Output: 49\n    Explanation: The word requires moving from one end of the keyboard to the other, resulting in maximum movement.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by calculating movement only when there is a change in position between consecutive letters.\n"], "scores": [], "pass_results": [true, true, true, true, true, true, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 10, "round": 540, "examples": "\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe next 2t lines contain descriptions of the test cases.\n\nThe first line of a description contains a keyboard \u2014 a string of length 26, which consists only of lowercase Latin letters. Each of the letters from 'a' to 'z' appears exactly once on the keyboard.\n\nThe second line of the description contains the word s. The word has a length from 1 to 50 letters inclusive and consists of lowercase Latin letters.\n\nOutput\n\nPrint t lines, each line containing the answer to the corresponding test case. The answer to the test case is the minimal time it takes to type the word s on the given keyboard.\n\nExample\n\nInput\n\n\n5\nabcdefghijklmnopqrstuvwxyz\nhello\nabcdefghijklmnopqrstuvwxyz\ni\nabcdefghijklmnopqrstuvwxyz\ncodeforces\nqwertyuiopasdfghjklzxcvbnm\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\nqwertyuiopasdfghjklzxcvbnm\nabacaba\n\n\nOutput\n\n\n13\n0\n68\n0\n74", "mutate_method": "condense_two2one", "parent_index": 33}
