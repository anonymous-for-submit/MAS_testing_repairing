{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "prompt": "Kawasiro Nitori is excellent in engineering. Because of her outstanding skills, she is very reliable. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "repair_prompt": ["Kawasiro Nitori is excellent in engineering. Because of her outstanding skills, she is very reliable. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering. Because of her outstanding skills, she is very reliable. As a result, her team members trust her skills. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is excellent in engineering, and because of her outstanding skills, she is very reliable; thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the working days and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple\n            containing the operation type (1 for add, 2 for remove) and the train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_count = []  # List to store the number of trains in maintenance each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:\n            # Add a train of model k\n            x, y = train_cycles[k - 1]\n            train_state[k] = {'day_in_cycle': 1, 'in_maintenance': False, 'x': x, 'y': y}\n        elif op == 2:\n            # Remove a train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Update the state of all active trains\n        current_maintenance_count = 0\n        for model, state in train_state.items():\n            # Increment the day count in their cycle\n            state['day_in_cycle'] += 1\n\n            # Check if they are in maintenance\n            if state['in_maintenance']:\n                if state['day_in_cycle'] > state['y']:\n                    # Transition from maintenance to working\n                    state['day_in_cycle'] = 1\n                    state['in_maintenance'] = False\n            else:\n                if state['day_in_cycle'] > state['x']:\n                    # Transition from working to maintenance\n                    state['day_in_cycle'] = 1\n                    state['in_maintenance'] = True\n\n            # Count trains in maintenance\n            if state['in_maintenance']:\n                current_maintenance_count += 1\n\n        # Append the current day's maintenance count to the result list\n        maintenance_count.append(current_maintenance_count)\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations provided.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers x_i and y_i.\n                                              x_i is the number of days a train model works, and y_i is the number of days it is in maintenance.\n        operations (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers op and k.\n                                            op indicates the operation (1 for add, 2 for remove), and k is the train model index.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the number of trains in maintenance on that day.\n    \"\"\"\n    # Dictionary to track the status of each train model\n    train_status = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:\n            # Add a train of model k\n            x_i, y_i = train_cycles[k - 1]\n            train_status[k] = {'status': 'working', 'days_remaining': x_i}\n        elif op == 2:\n            # Remove a train of model k\n            if k in train_status:\n                del train_status[k]\n\n        # Update the status of all trains\n        maintenance_count = 0\n        for model in list(train_status.keys()):\n            train = train_status[model]\n            train['days_remaining'] -= 1\n\n            if train['days_remaining'] == 0:\n                if train['status'] == 'working':\n                    # Switch to maintenance\n                    train['status'] = 'maintenance'\n                    train['days_remaining'] = train_cycles[model - 1][1]\n                else:\n                    # Switch to working\n                    train['status'] = 'working'\n                    train['days_remaining'] = train_cycles[model - 1][0]\n\n            if train['status'] == 'maintenance':\n                maintenance_count += 1\n\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Output interface\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for maintenance_count in result:\n        print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains the working days and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple containing the operation type and train model.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize a dictionary to track the state of each train model\n    train_state = {}\n    maintenance_count = [0] * m\n\n    # Iterate through each operation\n    for day in range(m):\n        op, model = operations[day]\n        if op == 1:  # Add train\n            x, y = train_cycles[model - 1]\n            train_state[model] = {'start_day': day, 'working_days': x, 'maintenance_days': y}\n        elif op == 2:  # Remove train\n            if model in train_state:\n                del train_state[model]\n\n        # Calculate the number of trains in maintenance for the current day\n        for state in train_state.values():\n            cycle_length = state['working_days'] + state['maintenance_days']\n            days_since_start = day - state['start_day']\n            if days_since_start >= state['working_days'] and (days_since_start % cycle_length) < state['maintenance_days']:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Dictionary to track the current cycle day for each train model\n    train_status = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_count = []\n\n    # Iterate through each operation\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:\n            # Add train of model k\n            train_status[k] = 0  # Start working\n        elif op == 2:\n            # Remove train of model k\n            if k in train_status:\n                del train_status[k]\n\n        # Update cycle day for each train model in the dictionary\n        for model in list(train_status.keys()):\n            x_i, y_i = train_cycles[model - 1]\n            train_status[model] += 1\n            # If the train is in maintenance\n            if train_status[model] > x_i:\n                # Check if it is still in maintenance\n                if train_status[model] <= x_i + y_i:\n                    continue\n                else:\n                    # Reset the cycle to start working again\n                    train_status[model] = 1\n\n        # Count how many trains are in maintenance\n        count_in_maintenance = sum(1 for model in train_status if train_status[model] > train_cycles[model - 1][0])\n        maintenance_count.append(count_in_maintenance)\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Output interface\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for maintenance_count in result:\n        print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains two integers x_i and y_i,\n                                              representing the work and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n                                            If op=1, a train of model k is added; if op=2, a train of model k is removed.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the number of trains in maintenance on that day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to store the state of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:\n            # Add a train of model k\n            train_state[k] = (day, x_i, y_i)  # Store the day it was added and its cycles\n        elif op == 2:\n            # Remove a train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for model, (start_day, work_days, maintenance_days) in train_state.items():\n            # Calculate the cycle length\n            cycle_length = work_days + maintenance_days\n            # Calculate the current cycle day\n            current_cycle_day = (day - start_day) % cycle_length\n\n            # Check if the train is in maintenance\n            if current_cycle_day >= work_days:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for maintenance_count in result:\n        print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the number of working days and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of tuples where each tuple contains\n            an operation (1 for add, 2 for remove) and the train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}\n    # Initialize the list to keep track of maintenance counts for each day\n    maintenance_counts = []\n\n    for day in range(m):\n        op, model_index = operations[day]\n        x_i, y_i = train_cycles[model_index - 1]  # Get the cycle for the train model\n\n        if op == 1:  # Add train\n            train_state[model_index] = {'cycle_position': 0, 'in_maintenance': False}\n        elif op == 2:  # Remove train\n            if model_index in train_state:\n                del train_state[model_index]\n\n        # Update cycle positions and maintenance status\n        for model in train_state:\n            train_info = train_state[model]\n            model_x_i, model_y_i = train_cycles[model - 1]  # Get the specific cycle for the train model\n            train_info['cycle_position'] += 1\n\n            # Determine if the train is in maintenance\n            if train_info['cycle_position'] > model_x_i:\n                train_info['in_maintenance'] = True\n            if train_info['cycle_position'] > model_x_i + model_y_i:\n                train_info['cycle_position'] = 1\n                train_info['in_maintenance'] = False\n\n        # Count trains in maintenance\n        maintenance_count = sum(1 for train in train_state.values() if train['in_maintenance'])\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the working days and maintenance days for each train model.\n        operations (List[Tuple[int, int]]): List of tuples where each tuple contains\n            the operation type (1 for add, 2 for remove) and the train model index.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance\n            for each day.\n    \"\"\"\n    # Initialize the dictionary to track the status of each train model\n    train_status = {}\n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_counts = [0] * m\n\n    # Iterate over each operation\n    for day in range(m):\n        op, model = operations[day]\n        if op == 1:\n            # Add train of model 'model'\n            x, y = train_cycles[model - 1]\n            train_status[model] = (day, x, y)\n        elif op == 2:\n            # Remove train of model 'model'\n            if model in train_status:\n                del train_status[model]\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_count = 0\n        for start_day, x, y in train_status.values():\n            cycle_length = x + y\n            days_since_start = day - start_day\n            if days_since_start >= x and (days_since_start % cycle_length) < y:\n                maintenance_count += 1\n\n        maintenance_counts[day] = maintenance_count\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add/remove train).\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the dictionary to track train status and cycle day\n    train_status = {}\n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]\n\n        if op == 1:  # Add train\n            train_status[k] = {'status': 'working', 'cycle_day': 1}\n        elif op == 2:  # Remove train\n            if k in train_status:\n                del train_status[k]\n\n        # Update the status and cycle day for each train\n        maintenance_count = 0\n        for model, info in train_status.items():\n            if info['status'] == 'working':\n                if info['cycle_day'] < x_i:\n                    info['cycle_day'] += 1\n                else:\n                    info['status'] = 'maintenance'\n                    info['cycle_day'] = 1\n            elif info['status'] == 'maintenance':\n                maintenance_count += 1\n                if info['cycle_day'] < y_i:\n                    info['cycle_day'] += 1\n                else:\n                    info['status'] = 'working'\n                    info['cycle_day'] = 1\n\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_cycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = calculate_maintenance_days(n, m, train_cycles, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations provided.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        cycles (List[Tuple[int, int]]): List of tuples where each tuple contains two integers x_i and y_i,\n                                        representing the number of days a train works and is in maintenance.\n        operations (List[Tuple[int, int]]): List of tuples where each tuple contains two integers op and k,\n                                            representing the operation type and the train model.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the number of trains in maintenance on that day.\n    \"\"\"\n    # Dictionary to store the state and cycle information for each train model\n    train_state = {}\n    # List to keep track of the number of trains in maintenance each day\n    maintenance_count = [0] * m\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x, y = cycles[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Calculate the first day the train will enter maintenance\n            maintenance_start_day = day + x\n            # Store the train's cycle information\n            train_state[k] = (maintenance_start_day, x, y)\n        elif op == 2:  # Remove train of model k\n            if k in train_state:\n                # Remove the train from the state dictionary\n                del train_state[k]\n\n        # Update the maintenance count for the current day\n        for model, (start_day, work_days, maintenance_days) in train_state.items():\n            # Check if the current day is within a maintenance period\n            if (day >= start_day) and ((day - start_day) % (work_days + maintenance_days) < maintenance_days):\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ncycles = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and output the result\nresult = calculate_maintenance_days(n, m, cycles, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state and cycle timing of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]  # Get the operational and maintenance days for the train model\n\n        if op == 1:  # Add a train\n            # Set the initial state to operational and start its cycle\n            train_state[k] = (day, x_i, y_i)  # (start_day, operational_days, maintenance_days)\n        elif op == 2:  # Remove a train\n            # Ensure it is not counted in maintenance on the removal day\n            if k in train_state:\n                del train_state[k]\n\n        # Update the state of each train and count how many are in maintenance\n        for model, (start_day, operational_days, maintenance_days) in train_state.items():\n            # Calculate the current cycle day\n            cycle_length = operational_days + maintenance_days\n            days_since_start = day - start_day\n            current_cycle_day = days_since_start % cycle_length\n\n            # Check if the train is in maintenance\n            if operational_days <= current_cycle_day < cycle_length:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Call the function and print the result\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n"], "plans": ["requirement analysis:\nThe solution must efficiently track the maintenance status of trains based on their operational and maintenance cycles. It should handle up to 200,000 operations and integrate seamlessly with existing systems.\nrequirement pool:\n- Implement train maintenance tracking logic.\n- Ensure scalability for large input sizes.\n- Provide integration capabilities with existing systems.\n- Develop user-friendly interface for train managers.\n- Include detailed documentation for developers.\nWe will implement a function to track the maintenance status of trains using a dictionary to store the state of each train model. We will use a list to keep track of the number of trains in maintenance each day. The function will iterate over the operations, updating the state of each train model and calculating the number of trains in maintenance accordingly. This approach efficiently handles up to 200,000 operations by leveraging dictionary operations for quick access and updates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains, each identified by a unique model number. Each model can have at most one train in operation or maintenance at any time.\n\n    'maintenance cycle'\n    Explanation: Each train model has a specific cycle of working days (x_i) followed by maintenance days (y_i). This cycle repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that for each train model, there can be no more than one train present at any time. In code, this can be managed by ensuring that operations on a train model are only performed if no other train of the same model is currently active.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model, including the current day in its cycle and whether it is in maintenance.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. Iterate over each operation:\n   - If a train is added (op=1), set its initial state and start its cycle.\n   - If a train is removed (op=2), remove it from the tracking dictionary.\n4. For each day, update the state of all active trains:\n   - Increment the day count in their cycle.\n   - Check if they are in maintenance based on their cycle and update the maintenance count accordingly.\n5. Append the current day's maintenance count to the result list.\n6. Output the result list.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, then goes into maintenance for 1 day. Since it is removed on the same day it goes into maintenance, it is not counted as in maintenance.\n\n    Input: 2 2\n           1 1000000000\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: The first train works for a very long time before going into maintenance, and the second train is removed before it can enter maintenance.\n\n    Input: 3 3\n           2 2\n           1 2\n           1 1\n           1 3\n           2 3\n    Output: 0\n    Explanation: The first two trains are added and work without entering maintenance, and the third train is removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's cycle and updating their state daily will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that trains are correctly tracked for their working and maintenance cycles. The input and output formats must be strictly followed to ensure compatibility with existing data processing systems.\nrequirement pool:\n- Efficiently track train maintenance cycles.\n- Handle up to 200,000 operations efficiently.\n- Provide accurate daily maintenance counts.\n- Ensure seamless integration with existing systems.\n- Offer a user-friendly interface for train managers.\nWe will use a dictionary to track the status of each train model, and a list to store the number of trains in maintenance for each day. The dictionary will map train models to their current status (working or maintenance) and the remaining days in that status. We will iterate through the operations, updating the status of each train model and calculating the number of trains in maintenance for each day. This approach efficiently handles up to 200,000 operations by leveraging dictionary operations for quick updates and lookups.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have different working and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced. The requirement is to calculate how many trains are in this state each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Ensures that there is only one train of each model at any given time, simplifying the tracking of train status.\n\n    'works for x_i days', 'maintenance for y_i days'\n    Explanation: Defines the cycle of operation and maintenance for each train model. This needs to be implemented by tracking the days a train is working and the days it is in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the status (working or maintenance) and remaining days for each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. Iterate through each day's operation:\n        - If a train is added, set its status to working with x_i days remaining.\n        - If a train is removed, delete its entry from the dictionary.\n        - Update the status of all trains in the dictionary:\n            - Decrement the remaining days for their current status.\n            - Switch status from working to maintenance or vice versa when days reach zero.\n        - Count and record the number of trains in maintenance for the day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n    Explanation: Train model 3 is added and removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train status and updating daily counts will naturally handle these scenarios.\n", "requirement analysis:\nThe solution needs to efficiently track the maintenance status of trains based on their operational and maintenance cycles. It should handle up to 200,000 operations and provide accurate daily counts of trains in maintenance. The system must be robust and integrate well with existing train management systems.\nrequirement pool:\n- Implement efficient tracking of train maintenance cycles.\n- Ensure accurate daily maintenance counts.\n- Integrate with existing train management systems.\n- Handle large datasets efficiently.\n- Provide user-friendly interface for data visualization.\nWe will implement a function to efficiently track the maintenance status of trains using a dictionary to store the state of each train model. We will use the datetime module to handle the days and cycles of operation and maintenance. The function will iterate through the operations, updating the state of each train model and calculating the number of trains in maintenance each day.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Each train model is unique, and the department can have at most one train of each model at any time.\n\n    'maintenance cycle'\n    Explanation: Each train has a cycle of working days followed by maintenance days, which repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model in the department at any time.\n    Implementation: Use a dictionary to track the presence of each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the state (working or maintenance) of each train model.\n    2. Iterate through the operations for each day:\n        - If a train is added, set its initial state to working and calculate when it will enter maintenance.\n        - If a train is removed, update the dictionary to reflect its removal.\n    3. For each day, count the number of trains currently in maintenance and store the result.\n    4. Output the count of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: The train is added and removed on consecutive days, never entering maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n    Output: 0\n    Explanation: Both trains are added but removed before entering maintenance.\n\n    Input: 3 3\n           5 5\n           1 1\n           1 2\n           1 3\n    Output: 0\n    Explanation: All trains are added but none enter maintenance within the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train states and counting maintenance days will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, alternating between adding and removing trains. Each train has a specific work and maintenance cycle, and the system must accurately track these cycles to provide daily maintenance counts. The input and output formats are crucial for ensuring data integrity and must be strictly followed.\nrequirement pool:\n- Efficiently process up to 200,000 operations.\n- Accurately track train maintenance cycles.\n- Provide clear and consistent input/output formats.\n- Integrate seamlessly with existing train management systems.\n- Offer scalability for future expansion.\nWe will use a dictionary to track the status of each train model, and a list to keep track of the number of trains in maintenance each day. The dictionary will store the current cycle day for each train model, allowing us to efficiently update and query the maintenance status. We will iterate through the operations, updating the dictionary and list accordingly. This approach ensures that we can handle up to 200,000 operations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains, each with its own cycle of working and maintenance days.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model at any given time.\n    Implementation: Use a dictionary to track the presence of each train model.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance.\n    Implementation: Use a cycle counter to track the current status (working or maintenance) of each train model.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to store the current cycle day for each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. Iterate through each operation:\n        - If a train is added, set its cycle day to 0 (indicating it starts working).\n        - If a train is removed, delete its entry from the dictionary.\n        - Update the cycle day for each train model in the dictionary.\n        - Count how many trains are in maintenance based on their cycle day and update the list.\n    4. Output the list showing the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed before it enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 1\n           1 2\n           1 3\n    Output: 0\n            0\n            0\n    Explanation: All trains are added but none enter maintenance within the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic efficiently handles adding and removing trains while tracking their maintenance status.\n", "requirement analysis:\nThe system needs to efficiently manage the addition and removal of trains, track their operational and maintenance cycles, and provide daily updates on the number of trains in maintenance. The solution must handle up to 200,000 operations and large cycle durations efficiently.\nrequirement pool:\n- Implement the core algorithm to track train maintenance cycles.\n- Optimize the system for handling up to 200,000 operations.\n- Develop a user-friendly interface for displaying maintenance data.\n- Ensure real-time performance for daily updates.\n- Provide detailed logging for system operations.\nWe will implement an efficient algorithm to track the maintenance cycles of trains using a dictionary to store the state of each train model. We will use a list to keep track of the number of trains in maintenance each day. The algorithm will iterate over the operations, updating the state of each train model and calculating the number of trains in maintenance for each day. This approach ensures that we can handle up to 200,000 operations efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department can manage, with each model having specific work and maintenance cycles.\n\n    'work and maintenance cycles'\n    Explanation: Each train model has a defined period during which it operates (work) and a period during which it undergoes maintenance. These cycles repeat until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days' and 'y_i days'\n    Explanation: These represent the number of days a train is in operation and in maintenance, respectively. In code, this can be implemented by tracking the current day and checking if it falls within the work or maintenance period for each train.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to store the state of each train model, including whether it is currently in operation or maintenance and the day it was added.\n2. Initialize a list to keep track of the number of trains in maintenance for each day.\n3. Iterate over each operation:\n   - If a train is added, calculate its work and maintenance schedule based on the current day and update its state in the dictionary.\n   - If a train is removed, update its state to reflect removal.\n   - For each day, check the state of all trains to count how many are in maintenance and update the list.\n4. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    1. Input: 1 1\n       1 1\n       1 1\n       Output: 0\n       Explanation: A single train is added and works for one day, so no train is in maintenance.\n\n    2. Input: 2 2\n       1 1000000000\n       1 1\n       1 1\n       2 1\n       Output: 0\n       Explanation: The first train works for a very long time before maintenance, and the second train is removed immediately after being added.\n\n    3. Input: 3 3\n       2 2\n       2 2\n       1 1\n       1 2\n       2 1\n       Output: 0\n       Explanation: Both trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's work and maintenance cycle will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on calculating the number of trains in maintenance each day based on the addition and removal of trains and their maintenance cycles. The solution must efficiently handle large input sizes and provide accurate results.\nrequirement pool:\n- Implement efficient algorithm to track maintenance cycles.\n- Ensure accurate counting of trains in maintenance.\n- Optimize for large input sizes.\n- Provide clear output format.\n- Maintain code readability and ease of maintenance.\nWe will implement an efficient algorithm to track the maintenance cycles of trains using a dictionary to store the state of each train model. We will use a list to keep track of the number of trains in maintenance for each day. The algorithm will iterate over the operations, updating the state of each train model and calculating the number of trains in maintenance accordingly. This approach ensures that we handle large input sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance cycle'\n    Explanation: Each train model has a cycle of working days followed by maintenance days. The task is to track how many trains are in maintenance on each day based on these cycles.\n\n    'operation'\n    Explanation: Each day involves an operation of either adding or removing a train, which affects the count of trains in maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any time, but not more than one.\n\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5'\n    Explanation: This indicates the maximum number of train models and operations, which suggests the need for an efficient algorithm due to potentially large input sizes.\n\n    '1 \u2264 x_i,y_i \u2264 10^9'\n    Explanation: This indicates the range for the number of working and maintenance days, which can be very large, affecting how we calculate cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to store the state of each train model, including its current cycle position and whether it is in maintenance.\n2. Initialize a list to keep track of the number of trains in maintenance for each day.\n3. Iterate over each operation:\n   - If a train is added, set its cycle position to 0 (start of working days).\n   - If a train is removed, remove it from the dictionary.\n   - For each train in the dictionary, update its cycle position and check if it is in maintenance.\n4. Count the number of trains in maintenance and store it for the current day.\n5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so it is not in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           2 2\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for trains being added and removed without entering maintenance.\n", "requirement analysis:\nThe system needs to efficiently track the maintenance status of trains over a series of days, handling operations of adding and removing trains while calculating maintenance periods based on given cycles.\nrequirement pool:\n- Implement efficient data structure to track train status.\n- Develop algorithm to calculate maintenance days accurately.\n- Ensure system scalability for large input sizes.\n- Integrate with existing train management systems.\n- Provide user-friendly interface for data input and output.\nWe will use a dictionary to track the status of each train model, and a list to keep track of the number of trains in maintenance each day. The algorithm will efficiently update the maintenance status based on the train's work and maintenance cycle using modulo arithmetic. This approach ensures scalability for large input sizes and provides accurate daily maintenance counts.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Each train model has a unique cycle of working and maintenance days, and the department can have at most one train of each model at any time.\n\n    'maintenance'\n    Explanation: A train is considered in maintenance during its maintenance days, and it is not counted as in maintenance on the day it is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that for each train model, there can be zero or one train present in the department at any given time.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the status (working or maintenance) of each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. For each operation (add or remove), update the status of the train model in the dictionary.\n    4. Use modulo arithmetic to determine if a train is in maintenance based on its cycle of working and maintenance days.\n    5. Update the list with the count of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 1\n           1 2\n           1 3\n           2 2\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that no train enters maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using modulo arithmetic and tracking train status will handle these cases correctly.\n", "requirement analysis:\nThe solution must efficiently track the maintenance status of trains over a series of days, handling up to 200,000 operations. It should ensure that trains are correctly added and removed, and accurately calculate maintenance periods based on the given cycles.\nrequirement pool:\n- Implement efficient data structures to track train status.\n- Ensure accurate calculation of maintenance days.\n- Optimize for performance with large input sizes.\n- Provide clear and concise output format.\n- Develop a user-friendly interface for input and output.\nWe will use a dictionary to track the status of each train model, whether it is in operation or maintenance. We will also use a list to keep track of the number of trains in maintenance each day. The approach will involve iterating over the operations and updating the status of each train model accordingly. We will use efficient data structures to ensure that the solution can handle the maximum input size efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Each train model is unique, and there can be at most one train of each model at any time.\n\n    'maintenance cycle'\n    Explanation: Each train has a cycle of working for x days and then being in maintenance for y days.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These represent the number of days a train is in operation and in maintenance, respectively.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the status (working or maintenance) and cycle day of each train model.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. Iterate over each day's operation:\n   - If a train is added, set its status to working and start its cycle.\n   - If a train is removed, remove it from the tracking dictionary.\n   - For each train in the dictionary, update its cycle day and status (switch between working and maintenance as needed).\n   - Count the number of trains currently in maintenance and store it in the list.\n4. Output the list of maintenance counts for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so it is never in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 2 3\n           2 2\n           1 1\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Both trains are added but neither enters maintenance before being removed.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the status and cycle day of each train model will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to develop a system that can efficiently track and report the number of trains in maintenance on a daily basis. The system should handle up to 200,000 operations and support large values for work and maintenance cycles. The solution must be optimized for performance and accuracy.\nrequirement pool:\n- Implement the core logic to track train maintenance cycles.\n- Optimize the solution for handling large input sizes efficiently.\n- Develop a user-friendly interface for input and output operations.\n- Ensure the system can handle edge cases and large values for x_i and y_i.\n- Provide detailed logging for maintenance operations.\nWe will implement a function to track the maintenance cycles of trains using a dictionary to store the state of each train model. The function will efficiently handle the addition and removal of trains, updating their maintenance status based on the given cycles. We will use a list to keep track of the number of trains in maintenance each day. The solution will be optimized to handle up to 200,000 operations by using efficient data structures and algorithms.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance cycle'\n    Explanation: This refers to the alternating periods of operation and maintenance for each train model. A train works for a specified number of days and then undergoes maintenance for another specified number of days, repeating this cycle until removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': This means that there can be zero or one train of each model at any time, but not more than one.\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5': This indicates the maximum number of train models and operations, which affects the efficiency requirements of the solution.\n    '1 \u2264 x_i,y_i \u2264 10^9': This specifies the range for the number of days a train works and is in maintenance, which impacts how we track the cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to store the state (working or maintenance) and cycle information for each train model.\n    2. Initialize a list to keep track of the number of trains in maintenance each day.\n    3. For each operation (add or remove), update the dictionary to reflect the current state of the train model.\n    4. For an add operation, calculate when the train will enter maintenance based on its cycle and update the list accordingly.\n    5. For a remove operation, ensure the train is not counted as in maintenance on the day it is removed.\n    6. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           2 2\n           1 1\n           1 1\n           1 2\n           2 2\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for trains being added and removed without entering maintenance.\n", "requirement analysis:\nThe requirements focus on calculating the number of trains in maintenance each day based on their operational and maintenance cycles. The solution must handle up to 200,000 operations efficiently, ensuring accurate tracking and reporting.\nrequirement pool:\n- Implement efficient data structures to track train states.\n- Develop algorithms to calculate maintenance schedules accurately.\n- Ensure the solution integrates seamlessly with existing systems.\n- Provide user-friendly output for daily maintenance counts.\n- Optimize performance for large-scale operations.\nWe will use a dictionary to track the state of each train model, whether it is in operation or maintenance. We will also use a list to keep track of the number of trains in maintenance for each day. The algorithm will iterate over the operations, updating the state of each train model and calculating the number of trains in maintenance accordingly. This approach ensures efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model': Refers to the different types of trains, each with unique operational and maintenance cycles.\n    'maintenance': The period during which a train is not operational and is being serviced.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    'x_i days': The number of days a train is operational before going into maintenance.\n    'y_i days': The number of days a train is in maintenance before becoming operational again.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state (operational or maintenance) and cycle timing for each train model.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation (add or remove a train):\n   - If adding a train, set its initial state to operational and start its cycle.\n   - If removing a train, ensure it is not counted in maintenance on the removal day.\n4. For each day, update the state of each train based on its cycle and count how many are in maintenance.\n5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and is operational for 1 day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 2 3\n           2 2\n           1 1\n           1 2\n           2 2\n           1 2\n    Output: 0\n            0\n            0\n    Explanation: The train added on the first day is removed before it can enter maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking the state and cycle timing of each train model will naturally handle these scenarios.\n"], "scores": [], "pass_results": [true, false, false, false, false, true, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 612, "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "expand_one2two", "parent_index": 60}
