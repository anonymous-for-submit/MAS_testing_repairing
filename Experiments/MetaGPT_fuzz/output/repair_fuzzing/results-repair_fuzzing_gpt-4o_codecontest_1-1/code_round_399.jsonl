{"name": "1580_C. Train Maintenance", "description": "Kawasiro Nitori is excellent in engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains, at each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), then it is in maintenance for y_i days, then in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "tags": ["brute force", "data structures", "implementation"], "difficulty": 9, "id": 1580, "sample_io": [{"input": "3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "test_list": [{"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "3 4\n10 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "3 4\n23 15\n14 10\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n2 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n5\n4\n3\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n2\n3\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 2\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n"]}, {"input": "20 7\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n4 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n3 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n"]}, {"input": "3 2\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n2 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n1 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n2\n2\n2\n1\n3\n4\n4\n4\n4\n5\n5\n4\n3\n4\n6\n8\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 2\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 6\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n6\n5\n6\n7\n7\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n1 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n14 9\n14 19\n7 19\n2 9\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n4\n3\n4\n7\n8\n"]}, {"input": "3 4\n16 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n10 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n10 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 1\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 0\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n13 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n467159628 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 0\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n21 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n13 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n369260158 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 16\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n26 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n23 15\n14 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n17 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n2 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000101 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 7\n15 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 4\n16 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n9 15\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 5\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n5 15\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 8\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10001011 100000000\n998244353 1\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1166046831 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n26 15\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1425917046 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 11\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "20 20\n1 4\n864803385 801909796\n17 4\n12 1\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n15 15\n7 3\n19 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 1\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 8\n12 25\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1011185365 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000001\n733475792 0\n2 2\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n2 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n16 15\n12 15\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000011 000000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 1\n9 15\n12 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n9 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n10 18\n12 10\n2 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n733475792 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n22 15\n12 10\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 169535970\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n657453515 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n1258790837 0\n3 0\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n657453515 173113793\n3 10\n16 6\n2 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 6\n450441171 733598623\n2 9\n3 10\n433415385 169535970\n3 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n16 21\n10 17\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 4\n9 6\n12 9\n1 1\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n0\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 241782432\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 38795044\n7 8\n17 12\n2 8\n15 9\n14 19\n7 19\n2 13\n15 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n3\n4\n5\n7\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n2 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 18\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n4 1\n10000011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 1\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10010011 100000000\n1258790837 0\n3 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n1 2\n10000011 100000000\n998244353 0\n2 4\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000001 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "5 4\n3 1\n10000011 100000000\n211018821 0\n4 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n3 1\n10000011 101000000\n211018821 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "20 20\n1 4\n864803385 772221280\n17 4\n12 3\n8 2\n15 4\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n15 9\n14 19\n7 19\n2 9\n4 29\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n3\n3\n4\n4\n3\n2\n4\n6\n7\n"]}, {"input": "3 4\n14 15\n12 13\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 1\n10000001 100000000\n998244353 1\n3 1\n1 3\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 0\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "3 4\n14 15\n10 9\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 1\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n9 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 2\n10000001 100000000\n1258790837 0\n5 1\n1 4\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n8 2\n15 1\n6 17\n16 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n5\n4\n3\n5\n7\n8\n"]}, {"input": "5 2\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "3 4\n16 21\n10 17\n2 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n0\n1\n0\n"]}, {"input": "5 4\n1 1\n00000001 000010000\n1683854825 0\n3 1\n2 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n0\n"]}, {"input": "5 4\n1 1\n11000001 100000000\n998244353 -1\n4 1\n1 10\n1 5\n2 5\n1 5\n1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n5 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "5 1\n1 0\n10000001 100000000\n1632524008 1\n2 1\n1 2\n1 5\n3 5\n1 5\n1 1\n", "output": ["0\n"]}, {"input": "3 4\n16 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 1\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "5 1\n1 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 2\n1 2\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 2\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "5 4\n1 0\n10000001 000010000\n998244353 0\n3 1\n1 2\n1 5\n2 5\n1 5\n1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n0 0\n430995384 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 2\n1 1\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 9\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 4\n1 12\n12 22\n1 2\n1 3\n1 1\n2 1\n2 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n1908812372 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "5 1\n2 1\n10000101 100000000\n1632524008 1\n2 0\n1 2\n1 5\n2 5\n1 5\n2 1\n", "output": ["0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n1 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n0 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n188952235 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n2 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n8\n"]}, {"input": "5 2\n1 2\n10000000 100010000\n998244353 1\n2 1\n1 1\n1 5\n2 5\n1 4\n1 1\n", "output": ["0\n0\n"]}, {"input": "10 7\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n9 11\n430995384 733598623\n1 13\n2 10\n657453515 169535970\n3 10\n8 6\n10 6\n7 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 8\n", "output": ["0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 1\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 6\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 7\n3 10\n9 6\n529113291 733598623\n2 9\n5 10\n433415385 169535970\n3 10\n8 6\n3 4\n3 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 1\n2 9\n1 1\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "3 1\n9 15\n12 9\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 7\n3 10\n-1 0\n140846265 733598623\n2 9\n5 13\n433415385 217146891\n3 10\n8 6\n3 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 169535970\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "20 20\n1 4\n864803385 423778809\n12 4\n12 3\n15 2\n15 1\n6 17\n13 11\n292159474 273519822\n7 8\n17 12\n2 7\n5 9\n14 19\n7 19\n3 9\n49 15\n7 3\n15 7\n7 17\n1 11\n1 8\n1 1\n1 20\n1 9\n1 18\n1 13\n1 12\n1 6\n1 4\n1 19\n1 7\n1 14\n1 10\n1 5\n1 2\n1 15\n1 16\n1 17\n1 3\n", "output": ["0\n0\n0\n1\n1\n1\n1\n0\n1\n2\n3\n4\n4\n5\n6\n5\n4\n5\n7\n7\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n1 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 2\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n2 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 5\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n12 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "3 1\n9 15\n16 11\n4 4\n1 3\n0 1\n0 2\n2 3\n", "output": ["0\n"]}, {"input": "10 10\n3 10\n17 0\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "10 10\n3 10\n17 -1\n752625088 733598623\n2 9\n5 10\n890580799 237879025\n3 10\n16 6\n10 9\n9 6\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n1 2\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}, {"input": "10 10\n3 10\n9 6\n430995384 733598623\n2 9\n5 10\n433415385 169535970\n0 10\n8 6\n10 6\n7 8\n1 1\n2 1\n1 8\n2 8\n1 9\n1 4\n2 9\n1 3\n1 5\n1 6\n", "output": ["0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n"]}, {"input": "5 4\n2 1\n10000001 100000000\n998244353 0\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n", "output": ["0\n0\n0\n1\n"]}], "task_id": "codecontest/22", "prompt": "Kawasiro Nitori is outstanding at engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "repair_prompt": ["Kawasiro Nitori is outstanding at engineering. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is outstanding at engineering. She is recognized for her exceptional skills and problem-solving abilities, which makes her a great engineer. Thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days. After the maintenance, it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "Kawasiro Nitori is outstanding at engineering and thus she has been appointed to help maintain trains.\n\nThere are n models of trains, and Nitori's department will only have at most one train of each model at any moment. In the beginning, there are no trains. At each of the following m days, one train will be added, or one train will be removed. When a train of model i is added at day t, it works for x_i days (day t inclusive), and then it is in maintenance for y_i days, after which it is in work for x_i days again, and so on until it is removed.\n\nIn order to make management easier, Nitori wants you to help her calculate how many trains are in maintenance in each day.\n\nOn a day a train is removed, it is not counted as in maintenance.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef train_maintenance(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations provided.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}\n    # Initialize the result list to store the number of trains in maintenance each day\n    maintenance_count = [0] * m\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Calculate the day it will enter maintenance\n            maintenance_start_day = day + x_i\n            # Calculate the day it will exit maintenance\n            maintenance_end_day = maintenance_start_day + y_i\n            # Update the train state with its maintenance cycle\n            train_state[k] = (maintenance_start_day, maintenance_end_day)\n        elif op == 2:  # Remove train of model k\n            # Remove the train from the state\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for start, end in train_state.values():\n            if start <= day < end:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = train_maintenance(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations (add or remove train).\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_days = []  # List to store the number of trains in maintenance each day\n\n    # Process each operation\n    for day in range(m):\n        op, k = operations[day]\n        if op == 1:\n            # Add train of model k\n            x_i, y_i = train_models[k - 1]\n            train_state[k] = (day, x_i, y_i)  # Store the day it was added and its cycle\n        elif op == 2:\n            # Remove train of model k\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        maintenance_count = 0\n        for start_day, x_i, y_i in train_state.values():\n            # Calculate the cycle position for the current day\n            cycle_length = x_i + y_i\n            days_since_added = day - start_day\n            cycle_position = days_since_added % cycle_length\n\n            # Check if the train is in maintenance\n            if cycle_position >= x_i:\n                maintenance_count += 1\n\n        maintenance_days.append(maintenance_count)\n\n    return maintenance_days\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the status dictionary to track the status of each train model\n    train_status = {i: None for i in range(1, n + 1)}\n    \n    # Initialize the list to store the number of trains in maintenance for each day\n    maintenance_count = [0] * m\n    \n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train of model k\n            x_i, y_i = train_models[k - 1]\n            train_status[k] = {'work_days': x_i, 'maintenance_days': y_i, 'current_day': 0}\n        \n        elif op == 2:  # Remove train of model k\n            train_status[k] = None\n        \n        # Update the count of trains in maintenance for the current day\n        for model, status in train_status.items():\n            if status is not None:\n                status['current_day'] += 1\n                if status['current_day'] > status['work_days']:\n                    maintenance_count[day] += 1\n                    if status['current_day'] == status['work_days'] + status['maintenance_days']:\n                        status['current_day'] = 0  # Reset cycle\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains op and k.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the dictionary to track train status and cycle timing\n    train_status = {}\n    maintenance_counts = [0] * m\n\n    # Iterate over each day's operation\n    for day in range(m):\n        op, k = operations[day]\n        \n        if op == 1:  # Add train\n            x_i, y_i = train_models[k - 1]\n            train_status[k] = {'status': 'working', 'work_days': x_i, 'maintenance_days': y_i, 'current_day': 0}\n        \n        elif op == 2:  # Remove train\n            if k in train_status:\n                del train_status[k]\n        \n        # Update the status of all trains based on their cycle timing\n        maintenance_count = 0\n        for model, status_info in train_status.items():\n            status_info['current_day'] += 1\n            if status_info['status'] == 'working':\n                if status_info['current_day'] >= status_info['work_days']:\n                    status_info['status'] = 'maintenance'\n                    status_info['current_day'] = 0\n            elif status_info['status'] == 'maintenance':\n                maintenance_count += 1\n                if status_info['current_day'] >= status_info['maintenance_days']:\n                    status_info['status'] = 'working'\n                    status_info['current_day'] = 0\n        \n        # Record the number of trains in maintenance for the day\n        maintenance_counts[day] = maintenance_count\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations performed.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Dictionary to store the status of each train model\n    train_status = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_counts = []\n\n    # Iterate over each operation\n    for op, k in operations:\n        if op == 1:\n            # Add a train of model k\n            x_i, y_i = train_cycles[k - 1]\n            # Initialize the train status with work cycle\n            train_status[k] = {'cycle': 'work', 'days_left': x_i}\n        elif op == 2:\n            # Remove a train of model k\n            if k in train_status:\n                del train_status[k]\n\n        # Count trains in maintenance\n        maintenance_count = 0\n        for model, status in train_status.items():\n            if status['cycle'] == 'maintenance':\n                maintenance_count += 1\n\n            # Update the cycle status\n            status['days_left'] -= 1\n            if status['days_left'] == 0:\n                if status['cycle'] == 'work':\n                    status['cycle'] = 'maintenance'\n                    status['days_left'] = train_cycles[model - 1][1]\n                else:\n                    status['cycle'] = 'work'\n                    status['days_left'] = train_cycles[model - 1][0]\n\n        # Append the count of trains in maintenance for the current day\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Output interface\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations provided.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = [None] * (n + 1)  # None means no train of that model is present\n    maintenance_count = [0] * m  # To store the number of trains in maintenance each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train of model k\n            # Calculate the day it will start maintenance\n            start_maintenance_day = day + x_i\n            train_state[k] = (day, start_maintenance_day, x_i, y_i)\n        elif op == 2:  # Remove train of model k\n            train_state[k] = None\n\n        # Calculate the number of trains in maintenance for the current day\n        for state in train_state:\n            if state is not None:\n                add_day, start_maintenance_day, x_i, y_i = state\n                # Check if the current day is within a maintenance period\n                if start_maintenance_day <= day < start_maintenance_day + y_i:\n                    maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains x_i and y_i for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each tuple contains op and k.\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize a dictionary to track the status of each train model\n    train_status = {}\n    maintenance_counts = []\n\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train\n            # Calculate the next maintenance start day\n            maintenance_start_day = day + x_i\n            train_status[k] = maintenance_start_day\n        elif op == 2:  # Remove train\n            # Remove the train from the tracking dictionary\n            if k in train_status:\n                del train_status[k]\n\n        # Count how many trains are in maintenance\n        maintenance_count = sum(1 for start_day in train_status.values() if start_day <= day < start_day + y_i)\n        maintenance_counts.append(maintenance_count)\n\n    return maintenance_counts\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_cycles: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations provided.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_cycles (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Dictionary to track the state of each train model\n    train_state = {}\n    # List to store the number of trains in maintenance for each day\n    maintenance_count = []\n\n    # Iterate through each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_cycles[k - 1]  # Get the cycle for the train model k\n\n        if op == 1:  # Add train\n            # Calculate the current day in the cycle\n            current_day_in_cycle = day % (x_i + y_i)\n            # Determine if the train is in maintenance\n            if current_day_in_cycle >= x_i:\n                train_state[k] = 'maintenance'\n            else:\n                train_state[k] = 'working'\n        elif op == 2:  # Remove train\n            # Remove the train model from the dictionary\n            if k in train_state:\n                del train_state[k]\n\n        # Count the number of trains in maintenance\n        count_in_maintenance = sum(1 for state in train_state.values() if state == 'maintenance')\n        maintenance_count.append(count_in_maintenance)\n\n    return maintenance_count\n\n# Input interface\ndef main():\n    n, m = map(int, input().split())\n    train_cycles = [tuple(map(int, input().split())) for _ in range(n)]\n    operations = [tuple(map(int, input().split())) for _ in range(m)]\n\n    # Output interface\n    result = calculate_maintenance_days(n, m, train_cycles, operations)\n    for count in result:\n        print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Calculate the number of trains in maintenance for each day based on operations.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): List of tuples where each tuple contains (x_i, y_i) for each train model.\n        operations (List[Tuple[int, int]]): List of operations where each operation is a tuple (op, k).\n\n    Returns:\n        List[int]: List of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train\n            # Update the state of the train model\n            train_state[k] = (day, x_i, y_i)\n        elif op == 2:  # Remove train\n            # Remove the train model from the state\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for start_day, x, y in train_state.values():\n            # Calculate the cycle position\n            cycle_length = x + y\n            days_since_start = day - start_day\n            if days_since_start >= x and (days_since_start % cycle_length) < y:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Call the function and print the result\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor maintenance_count in result:\n    print(maintenance_count)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef calculate_maintenance_days(n: int, m: int, train_models: List[Tuple[int, int]], operations: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"\n    Calculate the number of trains in maintenance for each day based on the operations provided.\n\n    Args:\n        n (int): Number of train models.\n        m (int): Number of operations.\n        train_models (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers x_i and y_i.\n        operations (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers op and k.\n\n    Returns:\n        List[int]: A list of integers representing the number of trains in maintenance for each day.\n    \"\"\"\n    # Initialize the state of each train model\n    train_state = {}  # Dictionary to track the state of each train model\n    maintenance_count = [0] * m  # List to store the number of trains in maintenance for each day\n\n    # Iterate over each operation\n    for day in range(m):\n        op, k = operations[day]\n        x_i, y_i = train_models[k - 1]\n\n        if op == 1:  # Add train\n            # Start the working cycle for the train model\n            train_state[k] = (day, x_i, y_i)\n        elif op == 2:  # Remove train\n            # Remove the train model from the dictionary\n            if k in train_state:\n                del train_state[k]\n\n        # Calculate the number of trains in maintenance for the current day\n        for start_day, work_days, maintenance_days in train_state.values():\n            # Calculate the cycle length\n            cycle_length = work_days + maintenance_days\n            # Calculate the current cycle day\n            current_cycle_day = (day - start_day) % cycle_length\n            # Check if the train is in maintenance\n            if current_cycle_day >= work_days:\n                maintenance_count[day] += 1\n\n    return maintenance_count\n\n# Input interface\nn, m = map(int, input().split())\ntrain_models = [tuple(map(int, input().split())) for _ in range(n)]\noperations = [tuple(map(int, input().split())) for _ in range(m)]\n\n# Output interface\nresult = calculate_maintenance_days(n, m, train_models, operations)\nfor count in result:\n    print(count)\n"], "plans": ["requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that no train model is duplicated and accurately tracking maintenance schedules. The input and output format must be strictly followed to ensure compatibility with existing systems.\nrequirement pool:\n- Efficiently handle up to 200,000 operations\n- Accurately track and report daily maintenance counts\n- Ensure no train model is duplicated in the system\n- Provide a user-friendly interface for train management\n- Integrate seamlessly with existing train management systems\nWe will implement a function to manage the train maintenance schedule using a dictionary to track the state of each train model. The function will iterate over the operations, updating the state of each train model and counting the number of trains in maintenance each day. This approach ensures efficient handling of up to 200,000 operations by leveraging dictionary operations for quick access and updates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Each train model is unique, and at most one train of each model can be present at any time.\n\n    'maintenance cycle'\n    Explanation: Each train has a cycle of working days followed by maintenance days, which repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means there can be zero or one train of each model at any time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model.\n2. For each operation (add or remove a train), update the state of the train model in the dictionary.\n3. For each day, calculate the number of trains in maintenance by checking the state of each train model.\n4. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so it is not in maintenance on the first day.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that none enter maintenance during the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the state of each train model and calculating maintenance status will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to develop a system that can efficiently track and report the number of trains in maintenance each day based on a series of operations. The system must handle large input sizes and provide accurate daily counts, ensuring that it integrates well with existing train management systems.\nrequirement pool:\n- Efficiently track train maintenance schedules\n- Handle large input sizes effectively\n- Provide clear and concise output\n- Ensure seamless integration with existing systems\n- User-friendly interface for train managers\nWe will use a simple simulation approach to track the state of each train model over the days. We will maintain a dictionary to keep track of the current state (working or maintenance) of each train model and update it based on the operations provided. This approach is efficient for handling large input sizes as it only requires updating the state of trains based on the operations, and calculating the number of trains in maintenance each day.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific working and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced. The requirement is to calculate how many trains are in maintenance each day.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be no more than one train of a particular model at any given time. This means the department can have zero or one train per model.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it remains in maintenance. This cycle repeats until the train is removed.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the state (working or maintenance) of each train model.\n    2. For each operation (add or remove), update the state of the train model accordingly.\n    3. For each day, calculate the number of trains in maintenance by checking the state of each train model.\n    4. Print the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it works for one day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: Train model 1 is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           1 1\n           1 2\n           1 3\n           1 1\n           2 2\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Train models are added and removed without entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of updating the state based on operations and calculating maintenance trains each day will handle these cases correctly.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations of adding and removing trains while keeping track of their maintenance schedules. It should provide accurate daily reports of trains in maintenance and ensure that the operations are performed seamlessly without any delays.\nrequirement pool:\n- Efficient handling of train addition and removal operations\n- Accurate daily maintenance reporting\n- Scalability to handle up to 200,000 operations\n- Integration with existing train management systems\n- User-friendly interface for train managers\nWe will implement a function to manage the train operations using a dictionary to track the status of each train model. We will use a list to store the number of trains in maintenance for each day. The function will iterate over the operations, updating the status of each train model and calculating the number of trains in maintenance accordingly. This approach ensures efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have at most one train at any time.\n\n    'maintenance cycle'\n    Explanation: Each train model has a specific cycle of working days (x_i) followed by maintenance days (y_i). This cycle repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train'\n    Explanation: There can be no more than one train of each model in the department at any given time.\n\n    'x_i days' and 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it stays in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the status of each train model (whether it's working or in maintenance).\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. Iterate over each operation:\n   - If a train is added (op=1), calculate its maintenance schedule based on x_i and y_i.\n   - If a train is removed (op=2), update the status to reflect its removal.\n4. For each day, update the count of trains in maintenance based on their current status.\n5. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so it is not in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed the next day, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           2 2\n           1 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed such that none are in maintenance during the operations.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Ensure that when a train is added, its working and maintenance schedule is correctly initialized.\n        - When a train is removed, ensure its status is updated to reflect removal, preventing it from being counted in maintenance.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that trains are accurately tracked for maintenance. The input and output format must be strictly followed to ensure compatibility with existing systems. The solution should be optimized for performance given the large possible range of x_i and y_i values.\nrequirement pool:\n- Efficiently track and update train maintenance status.\n- Handle up to 200,000 operations without performance degradation.\n- Provide clear and accurate daily maintenance counts.\n- Ensure compatibility with existing train management systems.\n- Offer a user-friendly interface for train managers.\nWe will use a dictionary to track the status of each train model, whether it is working or in maintenance. We will also use a list to keep track of the number of trains in maintenance each day. The approach will involve iterating over the operations and updating the status of each train model accordingly. We will use efficient data structures to ensure that the solution can handle up to 200,000 operations without performance degradation.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model'\n    Explanation: Refers to the different types of trains that Nitori's department manages. Each model can have specific working and maintenance cycles.\n\n    'maintenance'\n    Explanation: The period during which a train is not operational and is being serviced or repaired.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be no more than one train of each model at any given time in the department.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it remains in maintenance. This cycle repeats until the train is removed.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the status (working or maintenance) and cycle timing for each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. Iterate over each day's operation:\n        - If a train is added (op=1), set its status to working and start its cycle.\n        - If a train is removed (op=2), remove its entry from the dictionary.\n        - Update the status of all trains based on their cycle timing.\n        - Count and record the number of trains in maintenance for the day.\n    4. Output the list of maintenance counts for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n    Explanation: The train is added and removed on consecutive days, never entering maintenance.\n\n    Input: 2 3\n           1 1\n           1 1\n           1 2\n           1 2\n           2 2\n    Output: 0\n    Explanation: Both trains are added but removed before entering maintenance.\n\n    Input: 3 5\n           2 2\n           1 1\n           1 3\n           1 2\n           2 3\n           2 2\n    Output: 0\n    Explanation: Trains are added and removed without overlapping maintenance periods.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking train status and cycles will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of trains, calculate maintenance periods, and provide daily counts of trains in maintenance. It should handle up to 200,000 operations and support large maintenance cycles.\nrequirement pool:\n- Implement efficient data structures to track train operations and maintenance cycles.\n- Develop algorithms to calculate daily maintenance counts accurately.\n- Ensure the system can handle the maximum input constraints smoothly.\n- Provide clear and concise output for daily maintenance counts.\n- Optimize for performance to minimize processing time.\nWe will use a dictionary to track the status of each train model, and a list to keep track of the number of trains in maintenance each day. The dictionary will store the cycle information for each train model, and the list will be updated based on the operations performed each day. This approach ensures efficient handling of up to 200,000 operations and supports large maintenance cycles.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train model': Refers to the different types of trains, each with its own work and maintenance cycle.\n    'work for x_i days': The number of consecutive days a train model is operational.\n    'maintenance for y_i days': The number of consecutive days a train model is under maintenance.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model': Indicates that there can be zero or one train of each model at any time.\n    '1 \u2264 n,m \u2264 2 \u22c5 10^5': Specifies the maximum number of train models and operations, indicating the need for efficient handling.\n    '1 \u2264 x_i,y_i \u2264 10^9': Specifies the range for work and maintenance days, indicating potentially large cycles.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to store the status of each train model, including its current cycle position (work or maintenance) and the remaining days in that cycle.\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. For each operation:\n   - If a train is added (op=1), update its status in the dictionary to start its work cycle.\n   - If a train is removed (op=2), remove its entry from the dictionary.\n   - For each day, iterate through the dictionary to update the cycle status of each train and count how many are in maintenance.\n4. Append the count of trains in maintenance to the list for each day.\n5. Output the list of maintenance counts.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and works for 1 day, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and removed on consecutive days, so no train is in maintenance.\n\n    Input: 3 3\n           2 2\n           2 2\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added and removed without entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles adding and removing trains efficiently, ensuring that maintenance counts are updated correctly based on the current status of each train model.\n", "requirement analysis:\nThe requirement is to develop a system that can efficiently track and manage the maintenance schedules of train models. The system should handle the addition and removal of trains, calculate the number of trains in maintenance each day, and ensure no duplicate models are in operation. The solution must be scalable to handle up to 200,000 operations and support large maintenance cycles.\nrequirement pool:\n- Implement train addition and removal functionality\n- Calculate daily maintenance counts accurately\n- Optimize for large-scale operations\n- Ensure no duplicate train models are in operation\n- Provide a user-friendly interface for train management\nWe will implement a function to track the maintenance schedule of trains using a dictionary to store the state of each train model. We will use efficient data structures to handle up to 200,000 operations and ensure that the maintenance cycle is accurately calculated. The function will iterate through the operations, updating the state of each train model and calculating the number of trains in maintenance each day.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with its own maintenance and operational schedule.\n\n    'maintenance cycle'\n    Explanation: The period during which a train is not operational and is undergoing maintenance. This cycle alternates between working days and maintenance days.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: There can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance. These are used to calculate the maintenance cycle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model, including whether it is currently operational or in maintenance.\n2. For each operation (add or remove a train), update the state of the train model in the dictionary.\n3. For an add operation, calculate the start of the maintenance period based on the current day and the operational days (x_i).\n4. For a remove operation, ensure the train is no longer counted in maintenance.\n5. Iterate through each day, updating the count of trains in maintenance based on their current state.\n6. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and immediately starts working, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed before it enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking the state of each train model and updating based on operations will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of train models, calculate maintenance periods, and provide daily counts of trains in maintenance. It must handle large input sizes and ensure accurate outputs.\nrequirement pool:\n- Implement train addition and removal functionality\n- Calculate maintenance periods accurately\n- Optimize for large input sizes\n- Ensure accurate daily maintenance counts\n- Integrate with existing train management systems\nWe will implement a function to manage train models and calculate maintenance periods using efficient data structures. The function will track the addition and removal of trains, and calculate the number of trains in maintenance each day. We will use Python's built-in data structures such as dictionaries and lists to efficiently handle the operations and ensure scalability for large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages, with each model having specific operational and maintenance cycles.\n\n    'maintenance period'\n    Explanation: The period during which a train is not operational and is undergoing maintenance. This is determined by the y_i days specified for each train model.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be no more than one train of a particular model in the department at any time.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train is operational, and y_i represents the number of days it is in maintenance. These are used to calculate the train's cycle.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to keep track of the current status (operational or maintenance) of each train model.\n2. For each day, process the operation:\n   - If op = 1 (add train), calculate the next maintenance start day based on x_i and update the status.\n   - If op = 2 (remove train), remove the train from the tracking dictionary.\n3. For each day, count how many trains are in maintenance and store the result.\n4. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and is operational on the first day, so no trains are in maintenance.\n\n    Input: 2 2\n           1 1\n           1 2\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: The first train is added and operational on day one, then removed on day two, so no trains are in maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           2 2\n           1 3\n    Output: 0\n            0\n            0\n    Explanation: The first train is added and operational, then removed, and another train is added but not yet in maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking operational and maintenance periods using dictionaries will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently handle up to 200,000 operations, ensuring that trains are correctly added and removed from the schedule. It must accurately track the maintenance cycle of each train model and provide daily counts of trains in maintenance. The solution should be scalable and integrate seamlessly with existing train management systems.\nrequirement pool:\n- Efficiently handle up to 200,000 operations\n- Accurately track maintenance cycles\n- Provide daily maintenance counts\n- Seamless integration with existing systems\n- User-friendly interface for train management\nWe will use a dictionary to track the state of each train model, whether it is in maintenance or not. We will iterate through the operations and update the state accordingly. The use of a dictionary allows efficient access and update operations, which is crucial given the constraints of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'maintenance'\n    Explanation: In the requirement, maintenance refers to the period when a train is not operational and is undergoing repairs or checks. The task is to calculate how many trains are in this state each day.\n\n    'model'\n    Explanation: A model refers to a specific type or design of a train. Each model can have different operational and maintenance cycles.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These phrases describe the cycle of operation and maintenance for each train model. A train works for x_i days and then is in maintenance for y_i days. This cycle repeats until the train is removed.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to keep track of the state (working or maintenance) of each train model.\n    2. Iterate through the m operations:\n        - If op = 1 (add train), calculate the current day in the cycle (working or maintenance) based on x_i and y_i.\n        - Update the dictionary to reflect the current state of the train model.\n        - If op = 2 (remove train), remove the train model from the dictionary.\n    3. For each day, count the number of trains in maintenance based on the dictionary state and print the result.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n           Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n           Output: 0\n    Explanation: A train is added and then removed on consecutive days, so it never enters maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           Output: 0\n    Explanation: All trains are added but none enter maintenance within the given days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's state using a dictionary will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of trains, ensuring that maintenance periods are accurately calculated and reported. It should handle up to 200,000 operations and support large values for work and maintenance periods.\nrequirement pool:\n- Implement train addition and removal logic\n- Calculate maintenance periods accurately\n- Optimize for large input sizes\n- Ensure output format consistency\n- Provide user-friendly error messages\nWe will implement a function to manage the train addition and removal operations, and track the maintenance periods using a dictionary to store the state of each train model. We will use a list to keep track of the number of trains in maintenance for each day. The function will iterate over the operations, updating the state of each train model and calculating the maintenance status accordingly. This approach ensures efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to the different types of trains that Nitori's department manages, with each model having specific operational and maintenance cycles.\n\n    'maintenance cycle'\n    Explanation: Each train model has a cycle of working days followed by maintenance days, which repeats until the train is removed.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: This means that there can be zero or one train of each model at any given time, but not more than one.\n\n    'x_i days', 'y_i days'\n    Explanation: These represent the number of days a train is operational and in maintenance, respectively. In code, this can be implemented by tracking the current day and checking if it falls within the maintenance period.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a dictionary to track the state of each train model (whether it's added and its current cycle position).\n2. Initialize a list to store the number of trains in maintenance for each day.\n3. Iterate over each operation:\n   - If a train is added, update its state in the dictionary with its starting day and cycle.\n   - If a train is removed, remove its entry from the dictionary.\n   - For each day, calculate how many trains are in their maintenance period by checking their cycle position.\n4. Output the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: A single train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed the next day, so no train enters maintenance.\n\n    Input: 3 3\n           2 2\n           2 2\n           1 1\n           1 2\n           2 1\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of tracking each train's cycle and updating their state based on operations will naturally handle these scenarios.\n", "requirement analysis:\nThe system needs to efficiently track the addition and removal of train models, ensuring accurate maintenance scheduling. It should handle up to 200,000 operations and provide daily maintenance counts without errors.\nrequirement pool:\n- Implement train addition and removal functionality\n- Calculate daily maintenance counts accurately\n- Ensure no overlap in train model operations\n- Optimize for high volume operations\n- Provide user-friendly interface for train managers\nWe will implement a function to manage the addition and removal of train models, and calculate the number of trains in maintenance each day. We will use a dictionary to track the state of each train model and a list to store the maintenance status for each day. The function will iterate over the operations, updating the state of each train model and calculating the maintenance count accordingly. This approach ensures efficient handling of up to 200,000 operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'train models'\n    Explanation: Refers to different types of trains, each with unique working and maintenance cycles.\n\n    'maintenance'\n    Explanation: A period during which a train is not operational and is being serviced.\n\n# [phrase showing quantity relationship]\n    'at most one train of each model'\n    Explanation: Indicates that there can be zero or one train of each model at any given time.\n\n    'x_i days', 'y_i days'\n    Explanation: x_i represents the number of days a train works before going into maintenance, and y_i represents the number of days it remains in maintenance.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a dictionary to track the state (working or maintenance) of each train model.\n    2. Initialize a list to store the number of trains in maintenance for each day.\n    3. Iterate over the m operations:\n        - If op=1 (add train), update the dictionary to start the working cycle for the train model.\n        - If op=2 (remove train), remove the train model from the dictionary.\n    4. For each day, calculate the number of trains in maintenance based on their current state and update the list.\n    5. Output the list containing the number of trains in maintenance for each day.\n\n# [edge case]\n    Input: 1 1\n           1 1\n           1 1\n    Output: 0\n    Explanation: Only one train is added and it starts working immediately, so no train is in maintenance.\n\n    Input: 2 2\n           1 1\n           1 1\n           1 1\n           2 1\n    Output: 0\n            0\n    Explanation: A train is added and then removed before it goes into maintenance.\n\n    Input: 3 3\n           2 2\n           1 1\n           1 2\n           1 3\n           2 3\n    Output: 0\n            0\n            0\n    Explanation: Trains are added but removed before entering maintenance.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles these scenarios by checking the state of each train model and updating accordingly.\n"], "scores": [], "pass_results": [true, true, true, false, true, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 399, "examples": "\nInput\n\nThe first line contains two integers n, m (1 \u2264 n,m \u2264 2 \u22c5 10^5).\n\nThe i-th of the next n lines contains two integers x_i,y_i (1 \u2264 x_i,y_i \u2264 10^9).\n\nEach of the next m lines contains two integers op, k (1 \u2264 k \u2264 n, op = 1 or op = 2). If op=1, it means this day's a train of model k is added, otherwise the train of model k is removed. It is guaranteed that when a train of model x is added, there is no train of the same model in the department, and when a train of model x is removed, there is such a train in the department.\n\nOutput\n\nPrint m lines, The i-th of these lines contains one integers, denoting the number of trains in maintenance in the i-th day.\n\nExamples\n\nInput\n\n\n3 4\n10 15\n12 10\n1 1\n1 3\n1 1\n2 1\n2 3\n\n\nOutput\n\n\n0\n1\n0\n0\n\n\nInput\n\n\n5 4\n1 1\n10000000 100000000\n998244353 1\n2 1\n1 2\n1 5\n2 5\n1 5\n1 1\n\n\nOutput\n\n\n0\n0\n0\n1\n\nNote\n\nConsider the first example:\n\nThe first day: Nitori adds a train of model 3. Only a train of model 3 is running and no train is in maintenance.\n\nThe second day: Nitori adds a train of model 1. A train of model 1 is running and a train of model 3 is in maintenance.\n\nThe third day: Nitori removes a train of model 1. The situation is the same as the first day.\n\nThe fourth day: Nitori removes a train of model 3. There are no trains at all.", "mutate_method": "rephrase_one", "parent_index": 60}
