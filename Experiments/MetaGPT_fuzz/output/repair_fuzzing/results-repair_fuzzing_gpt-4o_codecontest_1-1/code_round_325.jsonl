{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp was in possession of an array a consisting of 3 positive numbers. He computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp was in possession of an array a consisting of 3 positive numbers. He computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp was in possession of an array a consisting of 3 positive numbers. He computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting the sums listed before, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\} from them.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp was in possession of an array a consisting of 3 positive numbers, and he computed the sums of all non-empty subsequences of this array, arranged them in ascending order to obtain an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array a of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted sums of non-empty subsequences of array a.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        sum_two_largest = b[5]\n        \n        # Calculate the other two elements of a\n        a2 = sum_all - sum_two_largest\n        a3 = sum_all - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Since b is sorted, the smallest element is one of the original elements of a\n        a1 = b[0]\n        # The second smallest element is another original element of a\n        a2 = b[1]\n        # The largest element in b is the sum of all elements in a\n        a3 = b[-1] - a1 - a2\n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The smallest number in b is one of the original numbers in a\n        a1 = b[0]\n        # The largest number in b is the sum of all three numbers in a\n        a1_a2_a3 = b[6]\n        # The second smallest number in b is the sum of the smallest number and another number in a\n        a1_a2 = b[1]\n        \n        # Deduce the other two numbers\n        a2 = a1_a2 - a1\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive numbers from the sorted array of subsequence sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted\n                    sums of all non-empty subsequences of an array of three positive numbers.\n\n    Returns:\n        A list of tuples, each containing three integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from the properties of b\n        a1 = b[0]  # The smallest element in b is the smallest element in a\n        a2 = b[-1] - b[-2]  # The second largest element in b is the sum of the two largest elements in a\n        a3 = b[-2] - a1  # The second largest element in b minus the smallest element gives the third element\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input().strip())\n    test_cases = [list(map(int, input().strip().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given array 'b'.\n    \n    Args:\n        b: A list of 7 integers representing the sums of all non-empty subsequences of array 'a'.\n    \n    Returns:\n        A list of 3 integers representing the original array 'a'.\n    \"\"\"\n    # The largest number in 'b' is the sum of all elements in 'a'.\n    sum_all_elements = b[-1]\n    \n    # The smallest three numbers in 'b' are the individual elements of 'a'.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = sum_all_elements - a1 - a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the original array.\n    \"\"\"\n    restored_arrays = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - (a1 + a2)  # The largest number in b is the sum of all three elements of a\n        restored_arrays.append([a1, a2, a3])\n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    result = restore_original_array(test_cases)\n    for res in result:\n        print(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted array b.\n\n    Args:\n        test_cases: A list of test cases, each containing a sorted array b of 7 integers.\n\n    Returns:\n        A list of tuples, each containing the restored array a of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a_1 = b[0]\n        a_2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Call the function\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_array(t: int, test_cases: list[list[int]]) -> list[tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of array a.\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a.\n        a3 = b[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    number_of_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(number_of_cases)]\n    \n    # Process each test case and get the results\n    results = restore_array(number_of_cases, test_cases)\n    \n    # Output each restored array\n    for result in results:\n        print(*result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of three positive numbers from the given subsequence sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing\n                                      the sums of all non-empty subsequences of an array of three positive numbers.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the three integers of the original array.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest three numbers in the sorted array are the individual elements of the original array.\n        # The largest number is the sum of all three elements.\n        a1 = case[0]\n        a2 = case[1]\n        a3 = case[6] - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Compute results\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three numbers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure the solution is easy to understand and maintain\n- Provide clear and concise output for each test case\n- Optimize for performance with large integer values\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these insights, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means the elements are arranged from the smallest to the largest.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': means that the array a consists of three numbers, each greater than zero.\n    \n    'sum of all non-empty subsequences': means that we need to calculate the sum of all possible combinations of the elements in array a, excluding the empty set.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, identify the smallest three numbers in the sorted array b. These correspond to the individual elements of array a.\n    2. The largest number in array b is the sum of all three elements of array a.\n    3. Use these insights to reconstruct array a by selecting the smallest three numbers from b.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and the sum of all three elements is the largest number in b.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is the sum of these three numbers.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical large numbers, and the sum of all three elements is the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of selecting the smallest three numbers and using the largest number as their sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three numbers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct and formatted output for each test case.\nrequirement pool:\n- Restore the original array a from the given array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for large integer values.\n- Provide clear documentation and comments in the code.\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these insights, we can efficiently reconstruct the array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements from the array except the empty set.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a consists of exactly three elements, all greater than zero.\n    '7 numbers': indicates that the array b consists of exactly seven elements, which are sums of non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to the smallest element in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these insights to reconstruct the array a:\n       - Let a1 be the smallest element in b.\n       - Let a2 be the difference between the largest element and the second largest element in b.\n       - Let a3 be the difference between the largest element and a1 and a2.\n\n# [edge case]\n    b = [1, 3, 4, 4, 5, 7, 8] = [1, 4, 3]\n    Explanation: The smallest element is 1, which is a1. The largest element is 8, which is the sum of all elements. The second largest element is 7, which is the sum of two largest elements (4 + 3). Thus, a = [1, 4, 3].\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = [999999998, 1, 1]\n    Explanation: The smallest element is 1. The largest element is 1000000000. The second largest element is 999999999. Thus, a = [999999998, 1, 1].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by leveraging the sorted nature and properties of array b.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large number handling\n- Provide multiple solutions if possible\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all elements in a. By using these observations, we can deduce the original array a by selecting the smallest, second smallest, and the difference between the largest and the sum of the two smallest elements in b. This approach is efficient and works well within the constraints.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums directly.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in array b represents the sum of all elements in array a. This helps in deducing one of the original numbers by subtracting other known sums.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b is one of the original elements of array a.\n\n    'largest'\n    Explanation: The largest element in array b is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the elements in array a.\n2. Identify the second smallest element in array b, which corresponds to another element in array a.\n3. Calculate the third element of array a by subtracting the sum of the two smallest elements from the largest element in array b.\n4. Return these three elements as the restored array a.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, the second smallest is also 1, and the largest element is 1000000000. The third element is calculated as 1000000000 - (1 + 1) = 999999998.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array consists of three identical elements.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest element is 5. The third element is calculated as 5 - (1 + 2) = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by using the sorted nature of array b and simple arithmetic operations to deduce array a.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring the output format is strictly followed. The problem constraints guarantee the existence of at least one valid solution for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large numbers efficiently\n- Provide output in the correct format\n- Optimize for clarity and simplicity\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original numbers, and the largest element in b is the sum of all three original numbers. By using these observations, we can efficiently restore the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible sums of non-empty subsequences of the array a.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a consists of exactly three numbers, all greater than zero.\n    '7 numbers': indicates that the array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'ascending order': means that the array b is sorted from the smallest to the largest number.\n\n# [code logic]\n    1. Identify the smallest number in array b, which corresponds to one of the original numbers in array a.\n    2. Identify the largest number in array b, which is the sum of all three numbers in array a.\n    3. Use the properties of subsequences to deduce the other two numbers in array a.\n    4. Return the three numbers as the restored array a.\n\n# [edge case]\n    b = [1, 3, 4, 4, 5, 7, 8] = a = [1, 4, 3]\n    Explanation: The smallest number is 1, and the largest number is 8. The other two numbers can be deduced from the remaining sums.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = a = [300000000, 300000000, 300000000]\n    Explanation: All numbers are equal, so each element in a is equal to the smallest number in b.\n\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = a = [999999998, 1, 1]\n    Explanation: The smallest number is 1 and the largest number is 1000000000. The other two numbers can be deduced from the remaining sums.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the array a from b for all valid inputs.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format must strictly adhere to the specified requirements.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize for large integer values\n- Provide output in the correct format\n- Consider multiple valid outputs if applicable\nWe will solve the problem by leveraging the properties of the sorted array b. The smallest element in b is the smallest element of a, the largest element in b is the sum of all elements of a, and the second largest element in b is the sum of the two largest elements of a. Using these properties, we can deduce the original array a efficiently. This approach ensures that we handle up to 5000 test cases and large integer values efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations except the empty set.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums derived from the original array a.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a consists of exactly three elements, all of which are positive integers.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    \n    'largest': refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Deduce the three elements of a using these properties:\n   - a_1 = b[0] (smallest element)\n   - a_2 = b[-1] - b[-2] (second largest element subtracted from the largest)\n   - a_3 = b[-2] - a_1 (second largest element subtracted by smallest)\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, so each subsequence sum is straightforward.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers with equal values, ensuring handling of large integer values.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The sequence is straightforward with distinct values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases efficiently by leveraging the sorted nature of array b and its properties.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is consistent and correct for all valid inputs. The algorithm should be optimized for both speed and accuracy, especially when dealing with large numbers.\nrequirement pool:\n- Develop the main algorithm to restore the original array from subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the algorithm for large numbers\n- Maintain consistent output format\n- Provide documentation for the solution\nWe will use a straightforward approach to restore the original array 'a' from the given array 'b'. The largest number in 'b' is the sum of all elements in 'a'. The smallest three numbers in 'b' are the individual elements of 'a'. This approach is efficient and works well within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the array 'a'.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array 'a' consists of exactly three elements, all of which are positive integers.\n    '7 numbers': indicates that the array 'b' consists of exactly seven elements, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    'largest': refers to the largest number in array 'b', which is the sum of all elements in array 'a'.\n    'smallest': refers to the smallest numbers in array 'b', which correspond to individual elements of array 'a'.\n\n# [code logic]\n    1. Identify the largest number in array 'b', which is the sum of all elements in array 'a'.\n    2. Identify the smallest three numbers in array 'b', which are the individual elements of array 'a'.\n    3. Return these three numbers as the restored array 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = a = [1, 1, 1]\n    Explanation: The smallest three numbers are 1, and the largest number is 3, which is the sum of all elements.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = a = [1000000000, 1000000000, 1000000000]\n    Explanation: The smallest three numbers are 1000000000, and the largest number is 3000000000, which is the sum of all elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = a = [4, 1, 2]\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly identifies the elements of array 'a' from array 'b'.\n", "requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large numbers\n- Provide multiple valid outputs if possible\nWe will use a simple mathematical approach to restore the original array from the given sorted sums of its non-empty subsequences. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of the original array a. The largest number in b is the sum of all three elements of a. This allows us to efficiently deduce the original array a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences': This indicates that we need to calculate the sum of all possible combinations of the elements in array a, excluding the empty set.\n\n# [degree adverb]\n    'ascending order': This means that the array b is sorted from the smallest to the largest value.\n\n# [code logic]\n    1. Identify the smallest three numbers in array b, which correspond to the individual elements of array a.\n    2. The largest number in array b is the sum of all three elements of array a.\n    3. Use these observations to deduce the values of a_1, a_2, and a_3.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, and their sum is the largest number in b.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is the sum of these three numbers.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sum is the largest number in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and using the largest number as their sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring the output format is strictly followed. The constraints guarantee the existence of at least one valid array for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large number handling\n- Provide multiple valid outputs if possible\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Therefore, the three elements of a can be derived as follows: a_1 = b[0], a_2 = b[1], and a_3 = b[6] - a_1 - a_2. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The array a consists of exactly three numbers, each greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest three numbers in the sorted array b, which correspond to the individual elements of the original array a.\n2. The largest number in b is the sum of all three elements of a.\n3. Assign a_1 = b[0], a_2 = b[1], and calculate a_3 = b[6] - a_1 - a_2.\n4. Return the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are sums of the same number, indicating that all elements in a are equal.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements. Therefore, a_3 = 7 - 1 - 2 = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are sums of the same number, indicating that all elements in a are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted arrays and subsequences.\n", "requirement analysis:\nThe problem requires restoring an array of three positive integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The constraints ensure that a valid solution always exists.\nrequirement pool:\n- Develop a function to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Provide clear and maintainable code.\n- Consider edge cases and provide multiple correct outputs if possible.\nWe will solve the problem by recognizing that the smallest three numbers in the sorted array b are the individual elements of array a. The largest number in b is the sum of all three elements of a. Therefore, the three elements of a can be derived as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2. This approach is efficient and straightforward, ensuring that we handle up to 5000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of 3 positive numbers'\n    Explanation: The original array a has exactly three elements, all of which are positive integers.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': Indicates that the array a has exactly three elements, all greater than zero.\n    \n    '7 numbers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Recognize that the smallest three numbers in b are the individual elements of array a.\n3. The largest number in b is the sum of all three elements of a.\n4. Derive the elements of a as follows:\n   - a1 = b[0] (smallest element)\n   - a2 = b[1] (second smallest element)\n   - a3 = b[6] - a1 - a2 (since b[6] is the sum of all three elements)\n5. Output the three integers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements in b are either individual elements or sums of two or three identical elements. The original array a must be [1, 1, 1].\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements. Therefore, a3 = 7 - 1 - 2 = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are either individual elements or sums of two or three identical elements. The original array a must be [1000000000, 1000000000, 1000000000].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by correctly identifying the smallest elements and using the largest element to compute the third element.\n", "requirement analysis:\nThe task requires restoring the original array from the given subsequence sums. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring the output is clear and concise. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output clarity and conciseness\n- Optimize for large number handling\n- Provide multiple valid solutions if possible\nWe will use a simple mathematical approach to restore the original array from the given subsequence sums. The key observation is that the smallest three numbers in the sorted array b correspond to the individual elements of array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently compute the original array for each test case. This approach is straightforward and leverages the constraints provided in the problem statement.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array of 3 positive numbers'\n    Explanation: The original array a consists of exactly three positive integers.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': This indicates that the array a has exactly three elements, all of which are positive integers.\n\n    '7 numbers': This indicates that the array b has exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n3. Identify the largest number in b, which is the sum of all three elements of a.\n4. Use these observations to deduce the original array a:\n   - Let a1, a2, and a3 be the smallest three numbers in b.\n   - The largest number in b is a1 + a2 + a3.\n5. Return the three integers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest three numbers are 1, 3, and 4. The largest number is 8, which is the sum of 1, 4, and 3.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is 5, which is the sum of 1, 2, and 2.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest three numbers and using them to deduce the original array will naturally handle these cases.\n"], "scores": [], "pass_results": [true, false, true, false, true, false, false, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 6, "round": 325, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "rephrase_one", "parent_index": 43}
