{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and sorted these values from smallest to largest, resulting in an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and sorted these values from smallest to largest, resulting in an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array, made sure to organize them systematically in non-decreasing order, and got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and sorted these values from smallest to largest, resulting in an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers, wrote out the sums of all non-empty subsequences of this array and, after sorting them in non-decreasing order, got an array b of 7 integers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8 and sorted these values from smallest to largest, resulting in an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' of sums of non-empty subsequences.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: List of restored arrays 'a' for each test case.\n    \"\"\"\n    result = []\n    for b in test_cases:\n        # The smallest element in 'b' is one of the elements of 'a'\n        a1 = b[0]\n        # The second smallest element in 'b' is another element of 'a'\n        a2 = b[1]\n        # The largest element in 'b' is the sum of all three elements of 'a'\n        sum_a = b[-1]\n        # Deduce the third element of 'a'\n        a3 = sum_a - a1 - a2\n        # Append the restored array 'a' to the result list\n        result.append([a1, a2, a3])\n    return result\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresult = restore_array(n, test_cases)\nfor res in result:\n    print(' '.join(map(str, res)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array of three integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three positive integers.\n\n    Returns:\n        Tuple[int, int, int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is another original integer\n    a2 = b[1]\n    # The largest element in b is the sum of all three original integers\n    a3 = b[6] - a1 - a2\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_original_array(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 positive integers from the given sorted array of subsequence sums.\n\n    Args:\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums of all non-empty subsequences of an array of 3 positive integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        a2_a3 = b[5]\n        \n        # Calculate a3\n        a3 = a1_a2_a3 - a2_a3\n        # Calculate a2\n        a2 = a2_a3 - a3\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing array b.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a3 = b[-1] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is a_1\n        a_1 = b[0]\n        # The second smallest element in b is a_2\n        a_2 = b[1]\n        # The largest element in b is the sum of a_1, a_2, and a_3\n        sum_a = b[-1]\n        # Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2\n        a_3 = sum_a - (a_1 + a_2)\n        # Append the result for this test case\n        results.append([a_1, a_2, a_3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process the test cases\n    results = restore_original_array(test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of subsequence sums.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of the original array.\n\n    Returns:\n        A list of 3 integers representing the restored original array.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The largest element in b is the sum of all three original integers\n    sum_all = b[-1]\n    # The second smallest element in b is the sum of two of the original integers\n    sum_two = b[1]\n    # Deduce the other two integers using the known sums\n    a2 = sum_two - a1\n    a3 = sum_all - sum_two\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a of 3 integers from the sorted array b of 7 integers.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of results, each containing the restored array a of 3 integers.\n    \"\"\"\n    results = []\n    \n    for b in test_cases:\n        # The smallest element in b is one of the elements in a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements in a\n        a1_a2_a3 = b[6]\n        # The second smallest element in b is another element in a or a sum of two elements\n        a2 = b[1]\n        # Deduce the third element\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [list(map(int, input().split())) for _ in range(n)]\n\n# Call the function\nresults = restore_array(n, test_cases)\n\n# Output interface\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the three integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original integers\n        a1 = b[0]\n        # The largest element in b is the sum of all three integers\n        sum_all = b[-1]\n        # The second smallest element in b is the sum of two of the original integers\n        sum_two = b[1]\n        # Deduce the other two integers\n        a2 = sum_two - a1\n        a3 = sum_all - sum_two\n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given sorted array b of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # The largest number in b is the sum of all three elements of a\n        a3 = b[6] - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        List[int]: A list of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of array a\n    a1 = b[0]\n    a2 = b[1]\n    # The largest number in b is the sum of all three elements\n    sum_a = b[-1]\n    # Deduce a3 by subtracting the sum of the smallest two numbers from the largest number\n    a3 = sum_a - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output format is crucial and must be adhered to strictly.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for speed and accuracy\nWe will use a simple mathematical approach to deduce the original array 'a' from the sorted array 'b'. Since 'b' contains the sums of all non-empty subsequences of 'a', the smallest element in 'b' is one of the elements of 'a', the second smallest is another, and the largest element in 'b' is the sum of all elements in 'a'. This allows us to easily deduce the three elements of 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array 'a' consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array 'b' consists of exactly seven integers, which are the sums of all non-empty subsequences of 'a'.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array 'b', which corresponds to one of the elements in 'a'.\n    \n    'largest': Refers to the largest element in the sorted array 'b', which is the sum of all elements in 'a'.\n\n# [code logic]\n1. For each test case, read the array 'b' of 7 integers.\n2. Identify the smallest element in 'b' as one of the elements of 'a'.\n3. Identify the second smallest element in 'b' as another element of 'a'.\n4. Identify the largest element in 'b' as the sum of all three elements of 'a'.\n5. Deduce the third element of 'a' by subtracting the first two identified elements from the largest element.\n6. Output the three elements of 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, so each element in 'a' is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest elements are 1 and 2, and the largest sum is 7. The third element is deduced as 4.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each element in 'a' is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the elements of 'a' based on the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Develop an algorithm to restore the original array from subsequence sums.\n- Ensure the solution can handle the maximum constraints efficiently.\n- Optimize the algorithm for speed and memory usage.\n- Provide clear documentation and examples for users.\n- Implement additional test cases to ensure robustness.\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sums obtained by adding up all possible combinations of the elements in the array, excluding the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The resulting array of sums is sorted from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the original array has exactly three elements, each greater than zero.\n    \n    '7 integers': Refers to the number of elements in the sorted array of sums, which corresponds to the number of non-empty subsequences of a 3-element array.\n\n# [degree adverb]\n    'smallest': Refers to the first element in the sorted array, which is one of the original integers.\n    \n    'largest': Refers to the last element in the sorted array, which is the sum of all three original integers.\n\n# [code logic]\n1. For each test case, read the sorted array `b` of 7 integers.\n2. Identify `a1` as the smallest element in `b`.\n3. Identify `a3` as the largest element in `b`.\n4. Calculate `a2` as `b[1]` (the second smallest element) since it must be one of the original integers.\n5. Return `a1`, `a2`, and `a3 - a1 - a2` as the original array.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, so each integer in the original array is 1.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large, so each integer in the original array is 1000000000.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest element is 2, which helps deduce the original array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format is crucial for successful validation.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for performance\nWe will use a straightforward approach to restore the original array from the given sorted array of subsequence sums. The smallest element in the array b is the smallest element in the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. By using these properties, we can efficiently deduce the original array a from b. This approach is simple and efficient, making it suitable for handling up to 5000 test cases with large integer values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sum of every possible combination of the elements in the array, excluding the empty set.\n\n    'sorted them in non-decreasing order'\n    Explanation: The resulting sums are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the array a consists of exactly three elements, each greater than zero.\n    \n    '7 integers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    'smallest': Refers to the minimum value in the sorted array b, which corresponds to the smallest element in array a.\n    \n    'largest': Refers to the maximum value in the sorted array b, which is the sum of all elements in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which is the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified values to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 8, which is `a1 + a2 + a3`. The second largest is 7, which is `a2 + a3`. Solving these gives `a1 = 1`, `a2 = 4`, and `a3 = 3`.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 5, which is `a1 + a2 + a3`. The second largest is 4, which is `a2 + a3`. Solving these gives `a1 = 1`, `a2 = 2`, and `a3 = 2`.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a must be equal to the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by using the properties of sorted subsequence sums.\n", "requirement analysis:\nThe problem requires restoring an array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must handle up to 5000 test cases efficiently, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Implement the main logic to restore array a from array b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large input sizes.\n- Provide clear and correct output for each test case.\n- Handle edge cases and ensure robustness.\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements. This allows us to deduce the original array a by selecting the first element, the second element, and the difference between the largest element and the sum of the first two elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted array'\n    Explanation: The array b is organized in non-decreasing order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this can be implemented by calculating the sum of combinations of elements from array a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b represents the sum of all elements in array a. This helps in deducing the original array a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify the smallest three numbers in b, which correspond to the individual elements of array a.\n    3. Identify the largest number in b, which is the sum of all three elements of array a.\n    4. Deduce the third element of array a by subtracting the sum of the first two identified elements from the largest number.\n    5. Output the three elements of array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are 1, and the largest number is 3, which is the sum of all three identical elements.\n    \n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is 5, which is the sum of these three numbers.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are identical and large. The smallest three numbers are identical, and the largest number is their sum.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these cases by selecting the smallest three numbers and using the largest number for deduction.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Restore the original array from the given subsequence sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Format the output correctly for each test case.\n- Optimize the solution for large integer values.\n- Provide a user-friendly interface for input and output.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The second smallest element in b is the second smallest element of a, and the largest element in b is the sum of all elements in a. Using these observations, we can deduce the original array a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: This refers to the total sum of all elements in the array a. In the context of this problem, it is represented by the largest element in array b.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b corresponds to the smallest element in array a.\n\n    'largest'\n    Explanation: The largest element in array b is the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest element in b as a_1.\n3. Identify the second smallest element in b as a_2.\n4. Identify the largest element in b as the sum of a_1, a_2, and a_3.\n5. Calculate a_3 as the difference between the largest element and the sum of a_1 and a_2.\n6. Output a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so a_1, a_2, and a_3 are all equal to 1.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest elements are 1 and 2, and the largest is 7, so a_3 is calculated as 7 - (1 + 2) = 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so a_1, a_2, and a_3 are all equal to 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted subsequences and their sums.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given array of subsequence sums. The solution must efficiently handle up to 5000 test cases and provide accurate results. The constraints ensure that a valid original array exists for each test case, simplifying the problem to finding a consistent method to derive the original array from the sorted subsequence sums.\nrequirement pool:\n- Develop a function to restore the original array from subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Optimize the algorithm for large integer values\n- Maintain consistent output format for clarity\n- Provide documentation for the solution approach\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest element in the subsequence sums array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently restore the original array. We will use basic Python operations without any additional libraries, as the problem is straightforward and does not require complex data structures or algorithms.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. In this context, it refers to all possible sums of non-empty subsequences of the array a.\n\n    'non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over combinations of elements and summing them.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest integer in array b represents the sum of all three integers in array a.\n\n# [code logic]\n    1. Identify the smallest element in array b, which corresponds to one of the integers in array a.\n    2. Identify the largest element in array b, which corresponds to the sum of all three integers in array a.\n    3. Use the second smallest and second largest elements in array b to deduce the other two integers in array a.\n    4. Return the three integers as the restored array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, indicating that each integer in array a is 1.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest and second largest help deduce the other two integers.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are multiples of a large number indicating identical integers in array a.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic inherently handles these scenarios by using sorted properties and basic arithmetic operations.\n", "requirement analysis:\nThe task requires restoring the original array a from the given array b, which represents the sums of all non-empty subsequences of a. The solution must handle up to 5000 test cases efficiently and provide accurate results for each test case. The constraints ensure that there is always a valid array a for each test case.\nrequirement pool:\n- Restore array a from array b efficiently\n- Ensure solution scalability for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide output in the correct format\n- Optimize for performance and accuracy\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is always one of the elements of a, and the largest element in b is the sum of all three elements of a. By using these observations, we can efficiently determine the values of a. We will use Python's built-in capabilities to handle large integers and ensure the solution is efficient for up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of 3 elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum for each possible combination of elements from array a. For an array of 3 elements, these sums are: a_1, a_2, a_3, a_1 + a_2, a_1 + a_3, a_2 + a_3, and a_1 + a_2 + a_3.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest element in array b is the sum of all three elements of array a (a_1 + a_2 + a_3).\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the elements in a.\n    2. Identify the largest element in b, which is the sum of all three elements in a.\n    3. Use the second smallest and second largest elements in b to deduce the other two elements of a.\n    4. Return the three elements of a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Similar to the previous case but with large numbers; each element in a is equal to the smallest element in b.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is one of the elements in a; the largest element is the sum of all three elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will correctly deduce the values of array a from array b.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide multiple valid solutions if possible\nWe will implement a function that takes the sorted array of sums of all non-empty subsequences and deduces the original array of three integers. The key observation is that the smallest element in the sorted array is one of the original integers, and the largest element is the sum of all three integers. By using these observations, we can efficiently reconstruct the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of each possible combination of elements from the original array a. For an array of three elements, there are 7 possible non-empty subsequences.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in array b corresponds to one of the original integers, and the largest element corresponds to the sum of all three integers.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the integers in array a.\n2. Identify the largest element in array b, which is the sum of all three integers in array a.\n3. Use the second smallest and second largest elements to deduce the other two integers.\n4. Return the three integers as array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, indicating that each integer in array a is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest and second largest help deduce the other two integers.\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are multiples of a large number, indicating that each integer in array a is identical.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic can deduce the correct integers for any valid input array b.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must handle up to 5000 test cases efficiently, ensuring that the output is correct and formatted as specified.\nrequirement pool:\n- Implement the algorithm to restore the original array a from array b.\n- Ensure the solution can handle the maximum constraints efficiently.\n- Format the output correctly for each test case.\n- Optimize the code for readability and maintainability.\n- Include comments and documentation for clarity.\nWe will implement a function that takes the sorted array b of 7 integers and returns the original array a of 3 integers. The key observation is that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements of a. Using these observations, we can deduce the values of a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each subsequent element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b represents the sum of all three elements in array a.\n\n# [code logic]\n    1. Identify the smallest three numbers in array b, which correspond to the individual elements of array a.\n    2. Identify the largest number in array b, which is the sum of all three elements of array a.\n    3. Use these observations to deduce the values of a by solving for each element using the known sums.\n\n# [edge case]\n    Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element in a is 1.\n\n    Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n\n    Case 3: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are the same large number, so each element in a is that number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number will suffice to deduce the values of array a correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring that the output is correct and adheres to the input-output format.\nrequirement pool:\n- Efficiently compute the original array from the given subsequence sums.\n- Ensure the solution is optimized for large input sizes.\n- Provide clear and concise output for each test case.\n- Handle edge cases and ensure robustness.\n- Optimize for readability and maintainability of the code.\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of array a, and the largest number is the sum of all three elements. This allows us to deduce the original array a by selecting the smallest, second smallest, and the difference between the largest and the sum of the smallest two numbers.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from array a, excluding the empty set. In code, this means iterating over all combinations of the elements in a and summing them.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest and largest values in array b help identify the individual elements of array a and their total sum, respectively. In code, this involves accessing the first and last elements of the sorted array b.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest three numbers in b as potential candidates for a_1, a_2, and a_3.\n3. Use the largest number in b as the sum of a_1, a_2, and a_3.\n4. Deduce a_3 by subtracting the sum of the smallest two numbers from the largest number.\n5. Output the three integers a_1, a_2, and a_3.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest numbers are 1, 3, and 4. The largest number is 8, which is the sum of all three elements (1 + 4 + 3).\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest numbers are 1, 2, and 2. The largest number is 5, which is the sum of all three elements (1 + 2 + 2).\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so any combination of three will satisfy the condition.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the properties of sorted arrays and sums.\n"], "scores": [], "pass_results": [false, true, true, true, false, true, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 912, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 491}
