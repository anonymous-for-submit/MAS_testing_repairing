{"name": "1598_E. Staircases", "description": "You are given a matrix, consisting of n rows and m columns. The rows are numbered top to bottom, the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it: \n\n  * starts and ends in the free cell; \n  * visits only free cells; \n  * has one of the two following structures: \n    1. the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; \n    2. the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on. \n\n\n\nIn particular, a path, consisting of a single cell, is considered to be a staircase.\n\nHere are some examples of staircases:\n\n<image>\n\nInitially all the cells of the matrix are free.\n\nYou have to process q queries, each of them flips the state of a single cell. So, if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000", "tags": ["brute force", "combinatorics", "data structures", "dfs and similar", "dp", "implementation", "math"], "difficulty": 11, "id": 1598, "sample_io": [{"input": "3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n"]}, {"input": "1000 1000 2\n239 634\n239 634\n", "output": ["1332632508\n1333333000\n"]}, {"input": "2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n", "output": ["5\n10\n5\n2\n5\n3\n1\n0\n"]}], "test_list": [{"input": "1 1 1\n1 1\n", "output": ["0\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 3\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n238\n233\n222\n207\n186\n180\n162\n140\n151\n144\n137\n144\n137\n111\n109\n91\n82\n77\n87\n78\n76\n83\n81\n"]}, {"input": "3 3 10\n1 2\n1 3\n2 2\n2 2\n2 2\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n12\n23\n12\n8\n13\n23\n19\n15\n"]}, {"input": "1 1 2\n1 1\n1 1\n", "output": ["0\n1\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n114\n111\n91\n89\n77\n86\n81\n91\n82\n80\n86\n84\n"]}, {"input": "3 4 10\n1 4\n1 2\n2 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n35\n25\n39\n19\n14\n12\n9\n11\n10\n"]}, {"input": "2 2 8\n1 1\n1 1\n1 1\n2 1\n1 1\n1 2\n2 1\n1 1\n", "output": ["5\n10\n5\n3\n6\n2\n6\n3\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n102\n99\n79\n77\n65\n74\n71\n77\n68\n66\n72\n70\n"]}, {"input": "3 4 10\n1 4\n1 2\n3 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n35\n31\n45\n25\n17\n15\n12\n14\n16\n"]}, {"input": "3 4 10\n2 4\n1 2\n3 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["43\n31\n27\n39\n25\n17\n14\n12\n15\n17\n"]}, {"input": "3 3 10\n1 2\n1 3\n2 2\n2 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n12\n23\n19\n9\n6\n10\n12\n8\n"]}, {"input": "3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 1\n3 1\n", "output": ["49\n35\n24\n29\n49\n39\n31\n23\n16\n14\n"]}, {"input": "1000 1000 2\n252 634\n239 634\n", "output": ["1332594366\n1331893874\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n114\n111\n91\n89\n77\n74\n69\n79\n70\n68\n74\n72\n"]}, {"input": "3 4 10\n1 4\n1 3\n2 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n41\n31\n21\n13\n8\n9\n6\n5\n4\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n102\n98\n78\n76\n64\n77\n74\n80\n71\n69\n75\n73\n"]}, {"input": "3 3 10\n1 2\n1 3\n2 2\n1 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n12\n14\n12\n8\n13\n23\n31\n27\n"]}, {"input": "1000 1000 2\n59 634\n239 634\n", "output": ["1333160628\n1332460136\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n162\n140\n135\n124\n111\n104\n117\n114\n94\n92\n80\n77\n85\n101\n92\n90\n96\n94\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n102\n98\n90\n76\n64\n77\n74\n80\n69\n67\n71\n69\n"]}, {"input": "3 3 10\n1 2\n1 3\n1 2\n1 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n23\n19\n9\n6\n10\n12\n8\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n23\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 3\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n35\n"]}, {"input": "3 3 4\n1 2\n1 1\n1 2\n1 3\n1 3\n3 2\n2 2\n2 2\n3 3\n3 1\n", "output": ["25\n20\n26\n22\n"]}, {"input": "5 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["112\n96\n83\n88\n112\n78\n70\n56\n62\n56\n"]}, {"input": "1000 1000 2\n239 634\n418 634\n", "output": ["1332632508\n1331406830\n"]}, {"input": "2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 2\n1 1\n", "output": ["5\n10\n5\n2\n5\n3\n6\n3\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 2\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n102\n99\n79\n77\n65\n74\n71\n74\n65\n63\n69\n67\n"]}, {"input": "3 3 10\n1 2\n1 3\n2 2\n2 2\n2 3\n3 2\n2 1\n3 2\n2 3\n3 1\n", "output": ["25\n23\n12\n23\n19\n9\n4\n9\n13\n11\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n260\n218\n213\n202\n180\n165\n159\n127\n122\n115\n108\n101\n108\n105\n91\n90\n78\n75\n70\n80\n71\n69\n75\n72\n"]}, {"input": "3 4 1\n1 4\n1 3\n2 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n"]}, {"input": "1000 1000 2\n59 323\n239 634\n", "output": ["1333014458\n1332313966\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n196\n173\n158\n152\n142\n137\n126\n116\n109\n103\n99\n91\n77\n65\n78\n73\n79\n68\n66\n70\n69\n"]}, {"input": "5 4 10\n1 4\n1 2\n1 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["112\n96\n92\n104\n86\n52\n54\n49\n47\n41\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n260\n218\n213\n202\n185\n170\n164\n129\n126\n115\n108\n101\n108\n105\n98\n97\n85\n82\n77\n87\n74\n72\n66\n63\n"]}, {"input": "2 4 1\n1 4\n1 3\n2 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["22\n"]}, {"input": "1000 1000 2\n59 323\n239 999\n", "output": ["1333014458\n1333011116\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n222\n204\n181\n166\n160\n150\n145\n134\n124\n113\n107\n103\n95\n81\n69\n82\n77\n83\n72\n70\n74\n73\n"]}, {"input": "6 3 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["79\n77\n85\n89\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n290\n261\n219\n212\n201\n184\n169\n158\n135\n132\n121\n114\n105\n112\n109\n102\n101\n89\n83\n78\n88\n75\n73\n67\n70\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n267\n225\n228\n208\n185\n170\n164\n154\n149\n138\n124\n113\n123\n119\n111\n97\n85\n98\n88\n80\n69\n67\n71\n70\n"]}, {"input": "5 10 30\n5 3\n5 10\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n381\n399\n372\n349\n331\n287\n245\n237\n226\n209\n194\n183\n154\n151\n138\n130\n121\n129\n126\n119\n118\n106\n100\n95\n105\n92\n90\n76\n79\n"]}, {"input": "6 3 4\n1 2\n1 3\n1 2\n2 3\n1 3\n1 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["79\n77\n85\n77\n"]}, {"input": "5 10 30\n5 3\n5 10\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n5 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n381\n399\n372\n349\n331\n287\n245\n237\n226\n209\n199\n184\n155\n152\n139\n131\n122\n130\n123\n116\n115\n109\n101\n96\n106\n93\n95\n81\n84\n"]}, {"input": "6 3 4\n1 2\n1 3\n2 2\n2 3\n1 3\n1 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["79\n77\n63\n61\n"]}, {"input": "2 1 2\n1 1\n1 1\n", "output": ["1\n3\n"]}, {"input": "3 4 10\n1 4\n1 3\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n41\n27\n23\n31\n21\n25\n18\n15\n13\n"]}, {"input": "1000 1000 2\n341 634\n239 634\n", "output": ["1332333240\n1331632748\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n3 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n119\n116\n109\n112\n109\n83\n81\n69\n78\n73\n83\n74\n72\n77\n75\n"]}, {"input": "3 4 10\n1 4\n1 2\n2 1\n1 2\n2 3\n3 1\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n35\n25\n39\n19\n17\n15\n12\n14\n16\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n3 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n264\n216\n213\n202\n179\n163\n157\n135\n130\n119\n112\n108\n103\n100\n80\n78\n64\n73\n70\n76\n67\n65\n71\n69\n"]}, {"input": "3 5 10\n1 2\n1 3\n2 2\n2 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["56\n47\n35\n47\n38\n28\n25\n29\n35\n31\n"]}, {"input": "3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 4\n3 4\n1 1\n3 1\n", "output": ["49\n35\n24\n29\n49\n39\n43\n33\n26\n24\n"]}, {"input": "1000 1000 2\n252 634\n239 877\n", "output": ["1332594366\n1332358004\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n2 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n320\n293\n277\n248\n206\n201\n190\n165\n150\n144\n176\n171\n144\n122\n115\n137\n134\n114\n112\n100\n97\n92\n102\n93\n91\n97\n87\n"]}, {"input": "3 4 10\n1 4\n1 3\n2 1\n1 3\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n41\n31\n39\n19\n14\n12\n9\n11\n10\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 7\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n234\n229\n218\n195\n188\n186\n164\n144\n133\n126\n119\n114\n111\n91\n89\n71\n62\n59\n65\n56\n54\n60\n58\n"]}, {"input": "3 3 10\n1 2\n2 3\n2 2\n1 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n20\n11\n14\n18\n14\n25\n35\n25\n21\n"]}, {"input": "1000 1000 2\n59 634\n239 35\n", "output": ["1333160628\n1332948862\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n139\n134\n123\n110\n103\n116\n123\n103\n101\n89\n83\n91\n107\n98\n96\n102\n100\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 3\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n348\n332\n303\n261\n256\n240\n211\n196\n190\n168\n163\n152\n143\n136\n128\n124\n116\n98\n86\n99\n96\n90\n68\n64\n68\n66\n"]}, {"input": "3 3 4\n1 2\n2 3\n1 2\n1 3\n1 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n20\n25\n23\n"]}, {"input": "2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n2 2\n2 2\n1 1\n", "output": ["5\n10\n5\n2\n5\n10\n5\n2\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 6\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n260\n218\n213\n202\n180\n165\n159\n127\n122\n115\n108\n101\n108\n105\n91\n90\n78\n75\n70\n80\n71\n69\n78\n75\n"]}, {"input": "1000 1000 2\n59 323\n448 634\n", "output": ["1333014458\n1331700760\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n2 1\n4 5\n3 8\n1 7\n2 1\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n196\n173\n158\n152\n170\n165\n150\n122\n115\n109\n105\n97\n83\n71\n84\n79\n85\n74\n72\n76\n73\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n1 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n260\n218\n213\n202\n185\n170\n164\n129\n126\n115\n108\n101\n108\n105\n98\n97\n85\n82\n77\n87\n74\n72\n74\n71\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 2\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n222\n204\n181\n166\n160\n150\n145\n134\n124\n113\n107\n103\n95\n81\n69\n82\n77\n80\n69\n67\n71\n70\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n5 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n290\n261\n219\n212\n201\n184\n169\n158\n135\n132\n121\n114\n105\n112\n109\n102\n101\n89\n83\n78\n88\n83\n81\n72\n75\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n2 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n267\n225\n228\n208\n185\n170\n164\n154\n149\n138\n144\n133\n143\n139\n127\n113\n101\n114\n104\n92\n81\n79\n83\n82\n"]}, {"input": "5 10 30\n5 3\n5 10\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n5 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 6\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n381\n399\n372\n349\n331\n287\n245\n237\n226\n209\n199\n184\n155\n152\n139\n131\n122\n130\n123\n116\n115\n102\n94\n89\n99\n112\n122\n102\n105\n"]}, {"input": "3 4 10\n2 4\n1 3\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["43\n38\n26\n22\n28\n18\n21\n17\n14\n12\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n3 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n3 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n208\n197\n174\n159\n153\n131\n126\n113\n110\n121\n124\n121\n95\n93\n81\n90\n85\n95\n86\n84\n89\n87\n"]}, {"input": "3 4 10\n1 4\n2 2\n2 1\n1 2\n2 3\n3 1\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n29\n25\n19\n11\n9\n8\n5\n6\n8\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n3 9\n2 6\n4 10\n3 1\n1 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n264\n216\n213\n202\n197\n181\n175\n152\n157\n139\n132\n128\n123\n120\n97\n93\n79\n93\n90\n96\n81\n79\n73\n71\n"]}, {"input": "3 5 10\n1 2\n1 3\n2 2\n2 2\n2 3\n3 2\n2 2\n3 2\n2 4\n3 1\n", "output": ["56\n47\n35\n47\n38\n28\n25\n29\n21\n17\n"]}, {"input": "1000 1000 2\n142 634\n239 877\n", "output": ["1332917106\n1332680744\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n2 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 5\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n320\n293\n277\n248\n206\n201\n190\n165\n150\n144\n176\n171\n144\n122\n115\n137\n134\n114\n110\n98\n95\n90\n100\n93\n91\n98\n88\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n2 9\n2 7\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n277\n236\n229\n218\n195\n182\n180\n158\n138\n127\n120\n117\n112\n111\n91\n89\n69\n60\n57\n63\n54\n52\n58\n56\n"]}, {"input": "1000 1000 2\n59 634\n239 24\n", "output": ["1333160628\n1333015896\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n135\n130\n121\n93\n86\n114\n121\n141\n127\n115\n109\n117\n133\n122\n120\n127\n119\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 3\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 2\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n348\n332\n303\n261\n256\n240\n211\n196\n190\n168\n163\n152\n143\n136\n128\n124\n116\n119\n107\n120\n117\n111\n81\n77\n81\n78\n"]}, {"input": "3 3 4\n1 1\n2 3\n1 2\n1 3\n1 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["26\n18\n15\n14\n"]}, {"input": "2 3 8\n1 1\n1 1\n1 1\n2 2\n1 1\n2 2\n2 2\n1 1\n", "output": ["12\n18\n12\n7\n10\n18\n10\n7\n"]}, {"input": "3 3 4\n1 3\n1 3\n1 2\n1 3\n2 3\n3 3\n2 2\n5 2\n2 3\n3 1\n", "output": ["31\n35\n25\n23\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n1 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n1 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n283\n235\n223\n212\n195\n169\n163\n128\n125\n114\n107\n101\n108\n105\n98\n97\n83\n80\n75\n85\n72\n70\n72\n69\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n2 2\n3 10\n5 2\n2 8\n4 7\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n267\n225\n228\n208\n185\n170\n164\n154\n149\n138\n144\n133\n143\n139\n120\n108\n105\n116\n106\n94\n88\n86\n93\n92\n"]}, {"input": "5 10 30\n5 3\n5 10\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n5 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 6\n2 8\n4 1\n5 3\n4 6\n5 8\n2 5\n1 1\n", "output": ["399\n381\n399\n372\n349\n331\n287\n245\n237\n226\n209\n199\n184\n155\n152\n139\n131\n122\n130\n123\n116\n115\n102\n94\n89\n99\n112\n122\n127\n130\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n3 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n264\n216\n213\n202\n180\n164\n158\n135\n132\n114\n107\n103\n98\n95\n87\n85\n71\n76\n73\n79\n66\n64\n58\n56\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n2 9\n2 7\n4 10\n3 1\n4 5\n3 8\n1 1\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n277\n236\n229\n218\n195\n182\n174\n158\n138\n127\n120\n117\n112\n111\n91\n89\n69\n60\n57\n63\n54\n52\n58\n60\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 1\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n135\n130\n121\n93\n86\n114\n121\n141\n133\n121\n115\n123\n139\n124\n122\n129\n137\n"]}, {"input": "2 5 8\n1 1\n1 1\n1 1\n2 2\n1 1\n2 2\n2 2\n1 1\n", "output": ["28\n34\n28\n23\n26\n34\n26\n23\n"]}, {"input": "6 3 4\n1 1\n1 3\n1 2\n2 3\n1 3\n1 5\n2 2\n3 3\n2 3\n3 1\n", "output": ["79\n75\n71\n67\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 1\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 2\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n135\n130\n121\n93\n86\n114\n121\n141\n133\n121\n115\n123\n139\n124\n122\n129\n132\n"]}, {"input": "2 5 8\n1 1\n1 1\n1 1\n2 2\n1 1\n2 4\n2 2\n1 1\n", "output": ["28\n34\n28\n23\n26\n17\n25\n19\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n2 9\n2 7\n4 10\n3 1\n4 5\n3 8\n1 1\n2 2\n1 5\n2 3\n3 2\n3 9\n5 4\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n277\n236\n229\n218\n195\n182\n174\n158\n138\n127\n120\n117\n113\n112\n92\n90\n70\n61\n56\n61\n52\n50\n56\n58\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 1\n4 8\n2 8\n4 1\n5 3\n4 6\n5 10\n4 5\n1 2\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n135\n130\n121\n93\n86\n114\n121\n141\n133\n121\n115\n123\n139\n124\n126\n133\n136\n"]}, {"input": "3 4 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 3\n4 2\n7 2\n2 3\n3 0\n", "output": ["39\n33\n43\n53\n"]}, {"input": "6 3 4\n1 1\n2 3\n1 2\n2 3\n1 3\n1 5\n2 2\n4 3\n2 3\n3 1\n", "output": ["79\n71\n68\n73\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n5 2\n3 10\n3 2\n2 7\n2 4\n1 1\n4 8\n2 8\n4 1\n5 3\n4 6\n5 10\n4 5\n1 2\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n135\n130\n121\n118\n111\n83\n90\n110\n107\n95\n89\n94\n100\n85\n87\n94\n97\n"]}, {"input": "3 6 4\n1 1\n2 3\n1 2\n1 3\n1 3\n3 4\n2 2\n5 2\n2 3\n3 1\n", "output": ["79\n59\n56\n50\n"]}, {"input": "12 3 4\n1 2\n1 3\n1 2\n1 3\n1 5\n6 3\n3 4\n3 3\n2 3\n1 1\n", "output": ["187\n185\n193\n197\n"]}, {"input": "2 5 1\n1 4\n1 6\n2 1\n1 3\n4 4\n3 3\n0 3\n0 4\n1 3\n3 1\n", "output": ["26\n"]}, {"input": "12 3 4\n1 2\n1 3\n1 1\n1 3\n1 5\n6 3\n3 4\n3 3\n2 3\n1 1\n", "output": ["187\n185\n179\n181\n"]}, {"input": "12 3 4\n2 2\n1 3\n1 1\n1 3\n1 5\n6 3\n3 4\n3 3\n2 3\n1 1\n", "output": ["177\n173\n170\n174\n"]}, {"input": "2 5 1\n1 2\n1 6\n2 1\n1 3\n4 1\n3 2\n0 3\n0 4\n1 3\n3 1\n", "output": ["25\n"]}, {"input": "1 2 1\n1 1\n", "output": ["1\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 3\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n267\n244\n239\n225\n210\n189\n183\n165\n143\n154\n145\n138\n147\n140\n114\n112\n94\n85\n82\n74\n65\n63\n70\n68\n"]}, {"input": "3 4 10\n1 4\n1 4\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n53\n33\n28\n39\n29\n23\n17\n22\n20\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n5 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n116\n123\n120\n100\n98\n86\n95\n90\n100\n91\n89\n95\n93\n"]}, {"input": "3 4 10\n1 4\n1 2\n1 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n35\n30\n39\n22\n14\n12\n9\n11\n9\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n2 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n272\n251\n209\n205\n194\n171\n164\n159\n137\n132\n121\n114\n107\n102\n100\n80\n78\n66\n75\n72\n78\n69\n67\n73\n71\n"]}, {"input": "3 4 10\n2 1\n1 2\n3 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["43\n29\n27\n41\n21\n17\n13\n10\n14\n15\n"]}, {"input": "3 4 10\n2 4\n1 2\n3 1\n1 2\n2 3\n3 4\n1 3\n3 4\n1 3\n3 1\n", "output": ["43\n31\n27\n39\n25\n23\n20\n22\n25\n29\n"]}, {"input": "3 3 10\n1 2\n1 3\n2 2\n2 2\n2 3\n2 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n12\n23\n19\n10\n19\n9\n13\n11\n"]}, {"input": "3 4 10\n1 4\n1 2\n2 3\n1 2\n2 2\n3 2\n1 3\n3 4\n1 1\n3 1\n", "output": ["49\n35\n24\n29\n18\n14\n12\n9\n6\n4\n"]}, {"input": "1000 1000 2\n494 634\n239 634\n", "output": ["1331884338\n1331183846\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n2 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n121\n114\n107\n114\n111\n91\n111\n99\n96\n91\n101\n86\n84\n91\n89\n"]}, {"input": "3 4 6\n1 4\n1 3\n2 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n41\n31\n21\n13\n8\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 9\n2 3\n3 2\n3 10\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n131\n120\n113\n107\n102\n98\n78\n74\n62\n82\n79\n85\n76\n74\n80\n78\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n184\n169\n163\n140\n137\n119\n106\n99\n112\n109\n101\n99\n87\n84\n92\n108\n95\n93\n87\n85\n"]}, {"input": "3 3 10\n1 2\n1 3\n1 2\n1 2\n2 3\n3 2\n2 1\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n23\n19\n9\n4\n9\n13\n11\n"]}, {"input": "5 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 1\n1 3\n3 4\n1 3\n3 1\n", "output": ["112\n96\n83\n88\n112\n96\n88\n74\n80\n96\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 2\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n260\n218\n213\n202\n180\n165\n159\n127\n122\n115\n108\n101\n96\n93\n79\n78\n66\n75\n72\n75\n66\n64\n70\n67\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n5 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n260\n218\n213\n202\n180\n170\n160\n128\n123\n116\n109\n102\n109\n102\n88\n87\n81\n76\n71\n81\n72\n74\n80\n77\n"]}, {"input": "3 3 3\n1 2\n1 3\n1 2\n1 3\n2 3\n3 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n"]}, {"input": "5 4 10\n1 4\n1 2\n1 3\n1 2\n2 3\n5 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["112\n96\n92\n104\n86\n76\n78\n73\n71\n57\n"]}, {"input": "1000 1000 2\n59 323\n239 587\n", "output": ["1333014458\n1332224196\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 2\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n222\n204\n181\n166\n160\n150\n145\n134\n124\n113\n107\n103\n95\n81\n69\n82\n78\n82\n71\n69\n73\n72\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 7\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n290\n261\n219\n212\n201\n184\n169\n158\n135\n132\n121\n114\n105\n112\n109\n112\n110\n98\n91\n86\n96\n81\n79\n72\n75\n"]}, {"input": "5 10 30\n5 3\n5 10\n5 10\n1 3\n5 7\n1 1\n4 9\n2 6\n4 10\n3 1\n2 5\n5 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n1 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n381\n399\n372\n349\n331\n287\n245\n237\n226\n209\n199\n184\n155\n152\n139\n131\n122\n130\n144\n137\n136\n129\n109\n104\n114\n101\n103\n89\n92\n"]}, {"input": "3 4 10\n1 1\n1 3\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["43\n33\n22\n20\n28\n20\n26\n19\n14\n12\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n3 3\n3 3\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n119\n132\n125\n118\n115\n89\n87\n75\n84\n79\n87\n78\n76\n83\n81\n"]}, {"input": "1000 1000 2\n252 412\n239 877\n", "output": ["1332147258\n1331910896\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n2 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 2\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n320\n293\n277\n248\n206\n201\n188\n163\n148\n142\n159\n154\n127\n155\n148\n120\n117\n97\n95\n83\n80\n72\n80\n71\n69\n75\n70\n"]}, {"input": "3 3 10\n1 2\n2 3\n1 2\n1 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n20\n25\n20\n25\n15\n10\n14\n11\n7\n"]}, {"input": "1000 1000 2\n59 722\n239 35\n", "output": ["1333201988\n1332990222\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n3 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n139\n134\n123\n110\n103\n116\n123\n103\n101\n89\n83\n91\n81\n72\n70\n75\n73\n"]}, {"input": "3 3 4\n1 2\n2 3\n1 2\n2 3\n1 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n20\n25\n35\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 1\n1 3\n3 2\n2 2\n2 2\n0 3\n3 1\n", "output": ["25\n23\n31\n22\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 6\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 6\n1 1\n", "output": ["399\n373\n355\n328\n305\n282\n259\n227\n220\n209\n187\n174\n166\n134\n130\n123\n116\n107\n114\n111\n97\n96\n84\n78\n73\n83\n74\n72\n81\n78\n"]}, {"input": "9 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n1 5\n1 1\n", "output": ["1027\n857\n829\n783\n664\n648\n619\n565\n560\n549\n532\n517\n511\n476\n473\n462\n455\n448\n455\n452\n445\n444\n420\n417\n404\n470\n457\n447\n449\n446\n"]}, {"input": "6 3 4\n1 2\n1 3\n1 3\n1 3\n1 3\n3 3\n2 2\n3 3\n2 3\n3 1\n", "output": ["79\n77\n79\n77\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n2 1\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n267\n225\n228\n208\n185\n170\n164\n154\n149\n138\n146\n135\n145\n141\n131\n117\n105\n118\n108\n94\n83\n81\n85\n83\n"]}, {"input": "6 3 4\n1 2\n1 3\n1 1\n1 3\n1 3\n1 3\n2 2\n3 1\n2 3\n3 1\n", "output": ["79\n77\n71\n73\n"]}, {"input": "6 3 4\n2 2\n1 3\n1 2\n2 3\n1 3\n1 5\n2 2\n3 2\n2 3\n3 1\n", "output": ["69\n65\n63\n61\n"]}, {"input": "3 4 10\n2 4\n1 3\n2 3\n1 2\n2 3\n3 2\n1 2\n3 4\n1 3\n3 1\n", "output": ["43\n38\n26\n22\n28\n18\n28\n22\n27\n25\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 10\n2 6\n3 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n3 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n278\n230\n223\n212\n189\n163\n157\n135\n130\n117\n114\n121\n124\n121\n95\n93\n79\n88\n83\n93\n84\n82\n87\n85\n"]}, {"input": "3 5 10\n1 2\n1 3\n2 2\n2 2\n2 1\n3 2\n2 2\n3 2\n2 4\n3 1\n", "output": ["56\n47\n35\n47\n37\n32\n28\n31\n20\n18\n"]}, {"input": "1000 1000 2\n63 634\n239 24\n", "output": ["1333148892\n1333004160\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 6\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n135\n130\n121\n93\n86\n114\n121\n141\n137\n125\n120\n128\n144\n129\n127\n134\n126\n"]}, {"input": "3 3 4\n1 3\n2 3\n1 2\n1 3\n1 3\n3 2\n2 2\n2 2\n0 3\n3 1\n", "output": ["31\n23\n19\n20\n"]}, {"input": "3 3 4\n1 2\n1 2\n1 2\n1 3\n1 3\n3 3\n4 2\n5 2\n2 3\n3 1\n", "output": ["25\n35\n25\n23\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n1 9\n2 6\n4 2\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n1 5\n1 1\n", "output": ["399\n373\n355\n328\n305\n289\n283\n235\n222\n217\n200\n169\n163\n128\n125\n114\n109\n99\n104\n101\n94\n93\n79\n76\n73\n78\n65\n63\n65\n62\n"]}, {"input": "2 4 1\n2 4\n1 6\n2 1\n1 2\n4 3\n3 2\n1 3\n0 4\n1 3\n3 1\n", "output": ["20\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 3\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n2 2\n3 10\n5 2\n2 8\n4 7\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n264\n216\n231\n220\n197\n158\n152\n145\n140\n129\n132\n121\n131\n127\n108\n96\n90\n101\n91\n87\n81\n79\n86\n85\n"]}, {"input": "6 4 4\n1 2\n1 3\n1 2\n2 3\n1 3\n1 5\n2 2\n3 3\n2 3\n3 1\n", "output": ["132\n126\n138\n120\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n2 9\n2 7\n4 10\n3 1\n4 5\n3 8\n1 1\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 7\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n277\n236\n229\n218\n195\n182\n174\n158\n138\n127\n120\n117\n112\n111\n91\n89\n69\n60\n57\n63\n56\n54\n66\n68\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 10\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 1\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n350\n334\n290\n248\n242\n234\n205\n190\n183\n151\n146\n137\n109\n102\n130\n137\n163\n155\n143\n137\n145\n161\n131\n127\n134\n142\n"]}, {"input": "2 5 8\n1 1\n1 1\n1 1\n2 4\n1 1\n2 2\n2 2\n1 1\n", "output": ["28\n34\n28\n19\n25\n17\n25\n19\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n2 9\n3 7\n4 10\n3 1\n4 5\n3 8\n1 1\n2 2\n1 5\n2 3\n3 2\n3 9\n5 2\n2 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n277\n223\n213\n202\n179\n161\n153\n137\n126\n115\n108\n105\n100\n96\n76\n74\n66\n59\n56\n62\n53\n51\n57\n59\n"]}, {"input": "2 4 1\n1 2\n1 6\n2 1\n1 3\n4 4\n3 3\n0 3\n0 4\n1 3\n3 1\n", "output": ["17\n"]}, {"input": "12 3 4\n1 2\n1 3\n1 2\n1 2\n1 5\n6 3\n3 4\n3 3\n2 3\n1 1\n", "output": ["187\n185\n193\n185\n"]}, {"input": "3 4 10\n1 4\n1 4\n2 3\n1 3\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["49\n53\n33\n29\n43\n33\n43\n33\n25\n23\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 8\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n5 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n346\n323\n306\n290\n246\n212\n206\n195\n172\n157\n151\n129\n124\n113\n106\n104\n111\n108\n88\n86\n82\n91\n86\n96\n87\n89\n95\n93\n"]}, {"input": "6 4 10\n1 4\n1 2\n1 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["144\n128\n120\n130\n110\n78\n76\n71\n73\n65\n"]}, {"input": "3 8 10\n2 1\n1 2\n3 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["115\n100\n98\n113\n90\n86\n79\n74\n81\n82\n"]}, {"input": "3 4 10\n2 4\n1 2\n3 1\n1 2\n2 3\n1 4\n1 3\n3 4\n1 3\n3 1\n", "output": ["43\n31\n27\n39\n25\n23\n21\n19\n21\n25\n"]}, {"input": "1000 1000 2\n494 749\n239 634\n", "output": ["1332338588\n1331638096\n"]}, {"input": "5 10 15\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n2 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n132\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 9\n2 3\n3 2\n3 10\n5 2\n1 8\n2 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n203\n180\n165\n159\n137\n131\n120\n113\n107\n102\n106\n86\n82\n70\n90\n87\n93\n84\n82\n88\n86\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 4\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n184\n169\n163\n140\n137\n119\n104\n97\n84\n81\n78\n76\n64\n61\n69\n79\n68\n66\n63\n61\n"]}, {"input": "3 4 10\n1 2\n1 3\n1 2\n1 2\n2 3\n3 2\n2 1\n3 2\n2 3\n3 1\n", "output": ["39\n33\n43\n33\n25\n15\n10\n15\n23\n21\n"]}, {"input": "3 3 4\n1 2\n1 3\n2 2\n1 3\n2 3\n3 3\n2 2\n3 2\n2 3\n0 1\n", "output": ["25\n23\n12\n14\n"]}, {"input": "5 7 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 1\n1 3\n3 4\n1 3\n3 1\n", "output": ["243\n216\n187\n192\n243\n227\n209\n162\n168\n184\n"]}, {"input": "5 10 30\n5 3\n5 8\n5 10\n1 3\n5 7\n1 8\n4 9\n2 6\n4 10\n3 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n5 2\n2 7\n2 4\n1 4\n4 8\n2 6\n4 1\n5 2\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n372\n354\n328\n313\n297\n268\n234\n229\n218\n180\n165\n159\n124\n119\n112\n104\n97\n92\n89\n75\n74\n70\n79\n76\n79\n70\n72\n86\n83\n"]}, {"input": "3 4 4\n1 4\n1 3\n1 2\n1 3\n1 3\n3 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["49\n41\n31\n35\n"]}, {"input": "5 4 10\n1 4\n1 2\n1 3\n1 2\n2 3\n5 2\n1 3\n3 4\n1 3\n5 1\n", "output": ["112\n96\n92\n104\n86\n76\n78\n73\n71\n69\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 4\n3 2\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 2\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n222\n204\n181\n166\n160\n150\n145\n119\n109\n98\n92\n88\n79\n77\n65\n78\n74\n78\n69\n67\n70\n69\n"]}, {"input": "6 4 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 3\n2 2\n3 4\n2 3\n3 1\n", "output": ["132\n126\n138\n148\n"]}, {"input": "6 3 4\n1 2\n1 3\n1 2\n3 3\n1 3\n1 3\n2 2\n3 2\n2 3\n2 1\n", "output": ["79\n77\n85\n71\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n2 2\n5 7\n1 8\n4 9\n2 6\n4 10\n3 2\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 10\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n320\n293\n277\n248\n206\n201\n188\n163\n148\n142\n159\n154\n127\n155\n148\n120\n117\n97\n95\n83\n78\n70\n78\n69\n67\n73\n68\n"]}, {"input": "3 3 10\n1 2\n2 3\n1 2\n1 2\n2 3\n3 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n20\n25\n20\n25\n18\n11\n8\n6\n4\n"]}, {"input": "5 10 28\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n3 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n183\n168\n161\n139\n134\n123\n110\n103\n116\n123\n103\n101\n89\n83\n91\n81\n72\n70\n"]}, {"input": "9 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n4 9\n2 10\n4 10\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n1 5\n1 1\n", "output": ["1027\n857\n829\n783\n664\n648\n619\n611\n606\n595\n548\n527\n521\n486\n480\n469\n462\n458\n465\n458\n451\n450\n420\n417\n404\n470\n457\n447\n450\n447\n"]}, {"input": "5 10 30\n5 2\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n5 10\n2 1\n4 5\n3 8\n1 7\n2 2\n1 5\n2 3\n2 1\n3 10\n5 2\n2 8\n4 4\n1 4\n4 8\n2 6\n4 1\n5 3\n4 6\n5 8\n4 9\n1 1\n", "output": ["405\n379\n361\n338\n312\n296\n267\n225\n228\n208\n185\n170\n164\n154\n149\n138\n146\n135\n145\n141\n131\n117\n105\n118\n108\n94\n83\n81\n89\n87\n"]}, {"input": "6 3 4\n1 3\n1 3\n1 1\n1 3\n1 3\n1 3\n2 2\n3 1\n2 3\n3 1\n", "output": ["85\n89\n79\n75\n"]}, {"input": "3 4 10\n2 4\n1 3\n2 3\n1 2\n2 3\n3 2\n1 2\n3 4\n1 1\n3 1\n", "output": ["43\n38\n26\n22\n28\n18\n28\n22\n15\n13\n"]}, {"input": "3 5 10\n1 2\n1 3\n2 2\n2 4\n2 1\n3 2\n2 2\n3 2\n2 4\n3 1\n", "output": ["56\n47\n35\n24\n20\n17\n21\n26\n37\n35\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 7\n1 8\n4 9\n2 6\n4 10\n4 1\n5 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 6\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n306\n290\n261\n219\n214\n206\n228\n213\n206\n171\n166\n151\n119\n112\n144\n151\n174\n170\n158\n153\n161\n177\n154\n152\n137\n128\n"]}, {"input": "6 10 30\n5 3\n5 5\n5 10\n1 3\n5 7\n1 8\n1 9\n2 6\n4 2\n3 1\n2 5\n3 8\n1 7\n2 2\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 4\n4 8\n2 8\n4 1\n5 3\n4 6\n5 8\n1 5\n1 1\n", "output": ["536\n474\n446\n413\n358\n342\n336\n280\n267\n262\n245\n214\n208\n173\n170\n159\n154\n144\n149\n146\n139\n138\n116\n113\n108\n121\n108\n102\n104\n101\n"]}, {"input": "5 10 30\n5 3\n5 5\n5 10\n1 2\n5 10\n1 8\n4 9\n2 6\n4 10\n4 1\n4 5\n3 8\n2 7\n2 4\n1 5\n2 3\n3 2\n3 10\n3 2\n2 7\n2 4\n1 1\n4 3\n2 8\n4 1\n5 3\n4 6\n5 8\n4 5\n1 1\n", "output": ["399\n373\n355\n332\n350\n334\n290\n248\n242\n234\n205\n190\n183\n151\n146\n137\n109\n102\n130\n137\n163\n155\n136\n130\n138\n144\n114\n102\n109\n114\n"]}, {"input": "2 5 8\n1 1\n1 1\n1 1\n2 4\n1 2\n2 2\n2 2\n1 1\n", "output": ["28\n34\n28\n19\n14\n11\n14\n17\n"]}, {"input": "6 3 4\n1 1\n1 3\n2 2\n2 3\n1 3\n1 8\n2 2\n4 3\n2 3\n3 1\n", "output": ["79\n75\n62\n60\n"]}, {"input": "12 3 3\n1 2\n1 3\n1 2\n1 2\n1 5\n6 3\n3 4\n3 3\n2 3\n1 1\n", "output": ["187\n185\n193\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 2\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n35\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 2\n2 2\n2 2\n2 3\n3 1\n", "output": ["25\n23\n31\n35\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 2\n2 2\n2 2\n3 3\n3 1\n", "output": ["25\n23\n31\n35\n"]}, {"input": "3 3 4\n1 2\n1 1\n1 2\n1 3\n1 3\n3 2\n3 2\n2 2\n3 3\n3 1\n", "output": ["25\n20\n26\n22\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 3\n2 3\n3 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n35\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 3\n1 3\n3 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["25\n23\n31\n35\n"]}, {"input": "2 4 1\n1 4\n1 6\n2 1\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n", "output": ["22\n"]}, {"input": "6 3 4\n1 2\n1 3\n1 2\n1 3\n1 3\n1 3\n2 2\n3 2\n2 3\n3 1\n", "output": ["79\n77\n85\n89\n"]}, {"input": "3 3 4\n1 2\n1 3\n1 2\n1 2\n2 3\n3 2\n2 2\n3 2\n2 3\n3 0\n", "output": ["25\n23\n31\n23\n"]}], "task_id": "codecontest/62", "prompt": "You are given a matrix, consisting of n rows and m columns, where the rows are numbered top to bottom and the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it: \n\n  * starts and ends in the free cell; \n  * visits only free cells; \n  * has one of the two following structures: \n    1. the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; \n    2. the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on.\n\nIn particular, a path, consisting of a single cell, is considered to be a staircase.\n\nHere are some examples of staircases:\n\n<image>\n\nInitially all the cells of the matrix are free.\n\nYou have to process q queries, each of them flips the state of a single cell, so if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000", "repair_prompt": ["You are given a matrix, consisting of n rows and m columns, where the rows are numbered top to bottom and the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it: \n\n  * starts and ends in the free cell; \n  * visits only free cells; \n  * has one of the two following structures: \n    1. the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; \n    2. the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on.\n\nIn particular, a path, consisting of a single cell, is considered to be a staircase.\n\nHere are some examples of staircases:\n\n<image>\n\nInitially all the cells of the matrix are free.\n\nYou have to process q queries, each of them flips the state of a single cell, so if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a matrix, consisting of n rows and m columns. The rows are numbered top to bottom and the columns are numbered left to right.\n\nEach cell of the matrix can be either free or locked.\n\nLet's call a path in the matrix a staircase if it: \n\n  * starts and ends in the free cell; \n  * visits only free cells; \n  * has one of the two following structures: \n    1. the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on; \n    2. the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on.\n\nIn particular, a path, consisting of a single cell. Such a path is considered to be a staircase.\n\nHere are some examples of staircases:\n\n<image>\n\nInitially all the cells of the matrix are free.\n\nYou have to process q queries, each of them flips the state of a single cell, so if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free.\n\nPrint the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.", "You are given a matrix, consisting of n rows and m columns, where the rows are numbered top to bottom and the columns are numbered left to right. Each cell of the matrix can be either free or locked. Let's call a path in the matrix a staircase if it starts and ends in the free cell, visits only free cells, and has one of the two following structures: the second cell is 1 to the right from the first one, the third cell is 1 to the bottom from the second one, the fourth cell is 1 to the right from the third one, and so on, or the second cell is 1 to the bottom from the first one, the third cell is 1 to the right from the second one, the fourth cell is 1 to the bottom from the third one, and so on. In particular, a path, consisting of a single cell, is considered to be a staircase. Here are some examples of staircases: <image> Initially all the cells of the matrix are free. You have to process q queries, each of them flips the state of a single cell, so if a cell is currently free, it makes it locked, and if a cell is currently locked, it makes it free. Print the number of different staircases after each query. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef count_staircases(n: int, m: int, queries: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Count the number of different staircases in a matrix after each query.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (List[Tuple[int, int]]): List of queries where each query flips the state of a cell.\n\n    Returns:\n        List[int]: List of integers representing the number of different staircases after each query.\n    \"\"\"\n    # Initialize the matrix with all cells free (True)\n    matrix = [[True] * m for _ in range(n)]\n    \n    # Initialize a 2D list to track the number of staircases ending at each cell\n    staircases_count = [[0] * m for _ in range(n)]\n    \n    # Function to update the staircase count for a specific cell\n    def update_staircase_count(x: int, y: int):\n        if matrix[x][y]:  # If the cell is free\n            # Count staircases ending at (x, y) based on its neighbors\n            staircases_count[x][y] = 1  # Single cell staircase\n            if x > 0 and y > 0:\n                staircases_count[x][y] += staircases_count[x-1][y-1]\n            if x > 0 and y < m - 1:\n                staircases_count[x][y] += staircases_count[x-1][y+1]\n            if x < n - 1 and y > 0:\n                staircases_count[x][y] += staircases_count[x+1][y-1]\n            if x < n - 1 and y < m - 1:\n                staircases_count[x][y] += staircases_count[x+1][y+1]\n        else:\n            staircases_count[x][y] = 0  # Locked cell cannot be part of a staircase\n\n    # Function to calculate total staircases in the matrix\n    def calculate_total_staircases() -> int:\n        total_staircases = 0\n        for i in range(n):\n            for j in range(m):\n                total_staircases += staircases_count[i][j]\n        return total_staircases\n\n    # Initialize staircases count for all cells\n    for i in range(n):\n        for j in range(m):\n            update_staircase_count(i, j)\n\n    results = []\n    for x, y in queries:\n        # Flip the state of the cell (x-1, y-1) because input is 1-based index\n        matrix[x-1][y-1] = not matrix[x-1][y-1]\n        \n        # Update the staircase count for the affected cell and its neighbors\n        update_staircase_count(x-1, y-1)\n        if x > 1:\n            update_staircase_count(x-2, y-1)\n        if x < n:\n            update_staircase_count(x, y-1)\n        if y > 1:\n            update_staircase_count(x-1, y-2)\n        if y < m:\n            update_staircase_count(x-1, y)\n\n        # Calculate the total number of staircases after the query\n        results.append(calculate_total_staircases())\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m, q = map(int, input().split())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n\n    # Output interface\n    results = count_staircases(n, m, queries)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef count_staircases(n: int, m: int, queries: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Counts the number of distinct staircases in a matrix after each query.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (List[Tuple[int, int]]): List of queries where each query flips the state of a cell.\n\n    Returns:\n        List[int]: List of integers representing the number of distinct staircases after each query.\n    \"\"\"\n    # Initialize the matrix with all cells free\n    matrix = [[True] * m for _ in range(n)]\n    \n    # Initialize a set to track free cells\n    free_cells = set((i, j) for i in range(n) for j in range(m))\n    \n    # Function to count staircases starting from a given cell\n    def count_staircases_from_cell(x: int, y: int) -> int:\n        # Use dynamic programming to count staircases\n        dp = [[0] * m for _ in range(n)]\n        dp[x][y] = 1  # A single cell is a staircase\n        \n        # Explore paths in zigzag pattern\n        for i in range(x, n):\n            for j in range(y, m):\n                if (i, j) in free_cells:\n                    if i > 0 and j < m - 1 and (i - 1, j) in free_cells and (i, j + 1) in free_cells:\n                        dp[i][j] += dp[i - 1][j + 1]\n                    if i < n - 1 and j > 0 and (i + 1, j) in free_cells and (i, j - 1) in free_cells:\n                        dp[i][j] += dp[i + 1][j - 1]\n        \n        # Sum all possible staircases starting from (x, y)\n        return sum(dp[i][j] for i in range(n) for j in range(m) if dp[i][j] > 0)\n    \n    results = []\n    \n    for x, y in queries:\n        # Flip the state of the cell\n        if (x - 1, y - 1) in free_cells:\n            free_cells.remove((x - 1, y - 1))\n            matrix[x - 1][y - 1] = False\n        else:\n            free_cells.add((x - 1, y - 1))\n            matrix[x - 1][y - 1] = True\n        \n        # Count staircases after the query\n        total_staircases = 0\n        for i in range(n):\n            for j in range(m):\n                if (i, j) in free_cells:\n                    total_staircases += count_staircases_from_cell(i, j)\n        \n        results.append(total_staircases)\n    \n    return results\n\n# Input interface\ndef main():\n    n, m, q = map(int, input().split())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    \n    # Output interface\n    results = count_staircases(n, m, queries)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nimport numpy as np\n\ndef count_staircases(n: int, m: int, queries: list[tuple[int, int]]) -> list[int]:\n    \"\"\"Counts the number of unique staircases in a matrix after each query.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (list[tuple[int, int]]): List of queries to toggle cells.\n\n    Returns:\n        list[int]: List of counts of unique staircases after each query.\n    \"\"\"\n    # Initialize matrix with all cells free (True)\n    matrix = np.ones((n, m), dtype=bool)\n    results = []\n\n    for x, y in queries:\n        # Toggle the cell state\n        matrix[x-1, y-1] = not matrix[x-1, y-1]\n\n        # Set to track unique staircases\n        unique_staircases = set()\n\n        # Check each cell as a potential start of a staircase\n        for i in range(n):\n            for j in range(m):\n                if matrix[i, j]:  # If the cell is free\n                    # Check right-down-right pattern\n                    if j + 1 < m and i + 1 < n and matrix[i, j+1] and matrix[i+1, j+1]:\n                        unique_staircases.add(((i, j), (i, j+1), (i+1, j+1)))\n                    # Check down-right-down pattern\n                    if i + 1 < n and j + 1 < m and matrix[i+1, j] and matrix[i+1, j+1]:\n                        unique_staircases.add(((i, j), (i+1, j), (i+1, j+1)))\n\n        # Add single-cell staircases\n        for i in range(n):\n            for j in range(m):\n                if matrix[i, j]:\n                    unique_staircases.add(((i, j),))\n\n        # Append the count of unique staircases to results\n        results.append(len(unique_staircases))\n\n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n, m, q = map(int, input().split())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n\n    # Call the function and print results\n    results = count_staircases(n, m, queries)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef count_staircases(n: int, m: int, queries: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Process queries to flip cell states in a matrix and count distinct staircases.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (List[Tuple[int, int]]): List of queries where each query is a tuple (x, y)\n                                         representing the cell to flip.\n\n    Returns:\n        List[int]: List of integers representing the number of distinct staircases after each query.\n    \"\"\"\n    # Initialize matrix with all cells free (True)\n    matrix = [[True] * m for _ in range(n)]\n\n    def is_valid(x: int, y: int) -> bool:\n        \"\"\"Check if a cell is within the matrix bounds and free.\"\"\"\n        return 0 <= x < n and 0 <= y < m and matrix[x][y]\n\n    def count_staircases_from(x: int, y: int, direction: int) -> int:\n        \"\"\"Count staircases starting from a given cell in a specific direction.\n\n        Args:\n            x (int): Starting row index.\n            y (int): Starting column index.\n            direction (int): Direction of the staircase (0 for right-down, 1 for down-right).\n\n        Returns:\n            int: Number of staircases starting from the given cell.\n        \"\"\"\n        count = 0\n        if is_valid(x, y):\n            count += 1  # Single cell is a valid staircase\n            if direction == 0:  # Right-Down\n                if is_valid(x, y + 1) and is_valid(x + 1, y + 1):\n                    count += count_staircases_from(x + 1, y + 1, 0)\n            else:  # Down-Right\n                if is_valid(x + 1, y) and is_valid(x + 1, y + 1):\n                    count += count_staircases_from(x + 1, y + 1, 1)\n        return count\n\n    def count_all_staircases() -> int:\n        \"\"\"Count all distinct staircases in the current matrix state.\"\"\"\n        total_staircases = 0\n        for i in range(n):\n            for j in range(m):\n                total_staircases += count_staircases_from(i, j, 0)\n                total_staircases += count_staircases_from(i, j, 1)\n        return total_staircases\n\n    results = []\n    for x, y in queries:\n        # Flip the state of the cell (x-1, y-1)\n        matrix[x - 1][y - 1] = not matrix[x - 1][y - 1]\n        # Count staircases after this query\n        results.append(count_all_staircases())\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n, m, q = int(data[0]), int(data[1]), int(data[2])\n    queries = [(int(data[i * 2 + 3]), int(data[i * 2 + 4])) for i in range(q)]\n    \n    # Output interface\n    results = count_staircases(n, m, queries)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\ndef process_queries(n: int, m: int, queries: list[tuple[int, int]]) -> list[int]:\n    \"\"\"Process queries to toggle cell states and count staircases.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (list[tuple[int, int]]): List of queries to toggle cells.\n\n    Returns:\n        list[int]: List of staircase counts after each query.\n    \"\"\"\n    # Initialize the matrix with all cells free\n    matrix = [[True] * m for _ in range(n)]\n    # Initialize a set to track free cells\n    free_cells = set((i, j) for i in range(n) for j in range(m))\n    \n    # Function to count staircases\n    def count_staircases() -> int:\n        # Dynamic programming table to store the number of staircases ending at each cell\n        dp_right = [[0] * m for _ in range(n)]\n        dp_down = [[0] * m for _ in range(n)]\n        \n        total_staircases = 0\n        \n        for i in range(n):\n            for j in range(m):\n                if (i, j) in free_cells:\n                    # Single cell is a staircase\n                    dp_right[i][j] = 1\n                    dp_down[i][j] = 1\n                    total_staircases += 1\n                    \n                    # Check for right-down staircases\n                    if j > 0 and (i, j-1) in free_cells:\n                        dp_right[i][j] += dp_down[i][j-1]\n                        total_staircases += dp_down[i][j-1]\n                    \n                    # Check for down-right staircases\n                    if i > 0 and (i-1, j) in free_cells:\n                        dp_down[i][j] += dp_right[i-1][j]\n                        total_staircases += dp_right[i-1][j]\n        \n        return total_staircases\n\n    results = []\n    \n    for x, y in queries:\n        # Convert to zero-based index\n        x -= 1\n        y -= 1\n        \n        # Toggle the state of the cell\n        if (x, y) in free_cells:\n            free_cells.remove((x, y))\n        else:\n            free_cells.add((x, y))\n        \n        # Recalculate the number of staircases\n        results.append(count_staircases())\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    m = int(data[1])\n    q = int(data[2])\n    \n    queries = []\n    index = 3\n    for _ in range(q):\n        x = int(data[index])\n        y = int(data[index + 1])\n        queries.append((x, y))\n        index += 2\n    \n    # Call the function and print results\n    results = process_queries(n, m, queries)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef flip_cell(matrix: np.ndarray, x: int, y: int) -> None:\n    \"\"\"Toggle the state of a cell in the matrix.\n    \n    Args:\n        matrix: A 2D numpy array representing the matrix.\n        x: The row index of the cell to flip.\n        y: The column index of the cell to flip.\n    \"\"\"\n    matrix[x, y] = not matrix[x, y]\n\ndef count_staircases(matrix: np.ndarray) -> int:\n    \"\"\"Count the number of different staircases in the matrix.\n    \n    Args:\n        matrix: A 2D numpy array representing the matrix.\n    \n    Returns:\n        The number of different staircases.\n    \"\"\"\n    n, m = matrix.shape\n    dp = np.zeros((n, m, 2), dtype=int)\n    \n    # Initialize DP for single cell staircases\n    for i in range(n):\n        for j in range(m):\n            if matrix[i, j]:\n                dp[i, j, 0] = 1\n                dp[i, j, 1] = 1\n    \n    # Calculate staircases using dynamic programming\n    for i in range(n):\n        for j in range(m):\n            if matrix[i, j]:\n                if i > 0 and j > 0:\n                    dp[i, j, 0] += dp[i-1, j-1, 1]\n                if i > 0 and j < m - 1:\n                    dp[i, j, 1] += dp[i-1, j+1, 0]\n    \n    # Sum up all possible staircases\n    total_staircases = np.sum(dp)\n    return total_staircases\n\ndef count_staircases_queries(n: int, m: int, queries: list[tuple[int, int]]) -> list[int]:\n    \"\"\"Process queries and count staircases after each query.\n    \n    Args:\n        n: Number of rows in the matrix.\n        m: Number of columns in the matrix.\n        queries: A list of queries where each query is a tuple (x, y).\n    \n    Returns:\n        A list of integers representing the number of staircases after each query.\n    \"\"\"\n    matrix = np.ones((n, m), dtype=bool)\n    results = []\n    \n    for x, y in queries:\n        flip_cell(matrix, x-1, y-1)\n        results.append(count_staircases(matrix))\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m, q = map(int, input().split())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    \n    # Call the function and print results\n    results = count_staircases_queries(n, m, queries)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef count_staircases(n: int, m: int, queries: list[tuple[int, int]]) -> list[int]:\n    \"\"\"Count the number of unique staircases after each query.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (list[tuple[int, int]]): List of queries to flip the state of cells.\n\n    Returns:\n        list[int]: Number of unique staircases after each query.\n    \"\"\"\n    # Initialize the matrix with all cells free\n    matrix = np.ones((n, m), dtype=bool)\n    free_cells = set((i, j) for i in range(n) for j in range(m))\n    \n    def dfs(x, y, direction, visited):\n        \"\"\"Perform DFS to find staircases starting from (x, y).\n\n        Args:\n            x (int): Current row index.\n            y (int): Current column index.\n            direction (int): Current direction (0 for right, 1 for down).\n            visited (set): Set of visited cells.\n\n        Returns:\n            int: Number of staircases found.\n        \"\"\"\n        if (x, y) not in free_cells or (x, y) in visited:\n            return 0\n        \n        visited.add((x, y))\n        count = 1  # Count the current cell as a staircase\n        \n        if direction == 0:  # Move right then down\n            if y + 1 < m:\n                count += dfs(x, y + 1, 1, visited)\n            if x + 1 < n:\n                count += dfs(x + 1, y, 0, visited)\n        else:  # Move down then right\n            if x + 1 < n:\n                count += dfs(x + 1, y, 0, visited)\n            if y + 1 < m:\n                count += dfs(x, y + 1, 1, visited)\n        \n        return count\n    \n    def count_unique_staircases():\n        \"\"\"Count all unique staircases in the current matrix state.\n\n        Returns:\n            int: Total number of unique staircases.\n        \"\"\"\n        visited = set()\n        total_staircases = 0\n        \n        for x, y in free_cells:\n            if (x, y) not in visited:\n                total_staircases += dfs(x, y, 0, visited)\n                total_staircases += dfs(x, y, 1, visited)\n        \n        return total_staircases\n    \n    results = []\n    for x, y in queries:\n        # Flip the state of the cell (x-1, y-1) because input is 1-based\n        if matrix[x-1, y-1]:\n            matrix[x-1, y-1] = False\n            free_cells.remove((x-1, y-1))\n        else:\n            matrix[x-1, y-1] = True\n            free_cells.add((x-1, y-1))\n        \n        # Count staircases after each query\n        results.append(count_unique_staircases())\n    \n    return results\n\n# Input interface\nn, m, q = map(int, input().split())\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Output interface\nresults = count_staircases(n, m, queries)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef count_staircases(n: int, m: int, queries: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Counts the number of unique staircases in a matrix after each query.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (List[Tuple[int, int]]): List of queries where each query is a tuple (x, y) indicating the cell to flip.\n\n    Returns:\n        List[int]: List of integers where each integer is the number of unique staircases after each query.\n    \"\"\"\n    # Initialize the matrix with all cells free (True)\n    matrix = [[True] * m for _ in range(n)]\n    \n    # Function to check if a cell is within bounds and free\n    def is_free(x: int, y: int) -> bool:\n        return 0 <= x < n and 0 <= y < m and matrix[x][y]\n\n    # Function to count staircases starting from a given cell\n    def count_staircases_from(x: int, y: int) -> int:\n        if not is_free(x, y):\n            return 0\n        # A single cell is a staircase\n        count = 1\n        # Check for staircases starting right then down\n        i, j = x, y\n        while is_free(i, j + 1) and is_free(i + 1, j + 1):\n            count += 1\n            i += 1\n            j += 1\n        # Check for staircases starting down then right\n        i, j = x, y\n        while is_free(i + 1, j) and is_free(i + 1, j + 1):\n            count += 1\n            i += 1\n            j += 1\n        return count\n\n    # List to store the number of staircases after each query\n    results = []\n\n    # Process each query\n    for x, y in queries:\n        # Flip the state of the cell\n        matrix[x - 1][y - 1] = not matrix[x - 1][y - 1]\n        \n        # Recalculate the number of staircases\n        total_staircases = 0\n        for i in range(n):\n            for j in range(m):\n                total_staircases += count_staircases_from(i, j)\n        \n        # Append the result for this query\n        results.append(total_staircases)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n, m, q = map(int, input().split())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    \n    # Output results\n    results = count_staircases(n, m, queries)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nimport numpy as np\n\ndef count_staircases(n: int, m: int, queries: list) -> list:\n    \"\"\"Process queries to count the number of unique staircases in a matrix.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (list): List of queries, each query is a tuple (x, y) indicating\n                        the cell to toggle between free and locked.\n\n    Returns:\n        list: A list of integers where each integer represents the number of\n              unique staircases after processing each query.\n    \"\"\"\n    # Initialize the matrix with all cells free (True)\n    matrix = np.ones((n, m), dtype=bool)\n    \n    # Function to count staircases using dynamic programming\n    def count_staircases_dp():\n        # Initialize DP tables for zigzag patterns\n        dp_right_down = np.zeros((n, m), dtype=int)\n        dp_down_right = np.zeros((n, m), dtype=int)\n        \n        # Base case: each free cell itself is a staircase\n        for i in range(n):\n            for j in range(m):\n                if matrix[i, j]:\n                    dp_right_down[i, j] = 1\n                    dp_down_right[i, j] = 1\n        \n        # Fill the DP tables\n        for i in range(n):\n            for j in range(m):\n                if matrix[i, j]:\n                    if i > 0 and j > 0:\n                        # Zigzag pattern: right then down\n                        dp_right_down[i, j] += dp_down_right[i-1, j]\n                        # Zigzag pattern: down then right\n                        dp_down_right[i, j] += dp_right_down[i, j-1]\n        \n        # Sum all values in the DP tables to get the total number of staircases\n        return np.sum(dp_right_down) + np.sum(dp_down_right)\n    \n    results = []\n    \n    # Process each query\n    for x, y in queries:\n        # Toggle the state of the cell (x-1, y-1) because input is 1-based\n        matrix[x-1, y-1] = not matrix[x-1, y-1]\n        \n        # Recalculate the number of unique staircases\n        num_staircases = count_staircases_dp()\n        \n        # Append the result for this query\n        results.append(num_staircases)\n    \n    return results\n\n# Input interface\nn, m, q = map(int, input().split())\nqueries = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Call the function and print results\nresults = count_staircases(n, m, queries)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef count_staircases(n: int, m: int, queries: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Counts the number of different staircases in a matrix after each query.\n\n    Args:\n        n (int): Number of rows in the matrix.\n        m (int): Number of columns in the matrix.\n        queries (List[Tuple[int, int]]): List of queries where each query flips the state of a cell.\n\n    Returns:\n        List[int]: List of integers representing the number of different staircases after each query.\n    \"\"\"\n    # Initialize the matrix with all cells free\n    matrix = [[True] * m for _ in range(n)]\n    \n    # Function to check if a cell is free\n    def is_free(x: int, y: int) -> bool:\n        return matrix[x][y]\n    \n    # Function to flip the state of a cell\n    def flip_cell(x: int, y: int):\n        matrix[x][y] = not matrix[x][y]\n    \n    # Function to count staircases using dynamic programming\n    def count_staircases_in_matrix() -> int:\n        # Use dynamic programming to count staircases\n        dp_right = [[0] * m for _ in range(n)]\n        dp_down = [[0] * m for _ in range(n)]\n        \n        total_staircases = 0\n        \n        for i in range(n):\n            for j in range(m):\n                if is_free(i, j):\n                    # Single cell staircase\n                    dp_right[i][j] = 1\n                    dp_down[i][j] = 1\n                    total_staircases += 1\n                    \n                    # Pattern 1: right then down\n                    if j > 0 and i > 0 and is_free(i, j - 1) and is_free(i - 1, j):\n                        dp_right[i][j] += dp_down[i - 1][j - 1]\n                        total_staircases += dp_down[i - 1][j - 1]\n                    \n                    # Pattern 2: down then right\n                    if i > 0 and j > 0 and is_free(i - 1, j) and is_free(i, j - 1):\n                        dp_down[i][j] += dp_right[i - 1][j - 1]\n                        total_staircases += dp_right[i - 1][j - 1]\n        \n        return total_staircases\n    \n    results = []\n    for x, y in queries:\n        # Adjust indices to be zero-based\n        x -= 1\n        y -= 1\n        # Flip the cell state\n        flip_cell(x, y)\n        # Count staircases after the query\n        results.append(count_staircases_in_matrix())\n    \n    return results\n\n# Input interface\ndef main():\n    n, m, q = map(int, input().split())\n    queries = [tuple(map(int, input().split())) for _ in range(q)]\n    \n    # Output interface\n    results = count_staircases(n, m, queries)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires efficiently processing a series of queries that flip the state of cells in a matrix and then counting the number of unique staircases. The solution must handle large matrices and a high number of queries, ensuring both accuracy and performance. The challenge lies in dynamically updating the count of staircases as the matrix changes.\nrequirement pool:\n- Implement a function to process matrix queries and update cell states.\n- Develop an algorithm to count unique staircases in the matrix.\n- Optimize the solution for performance with large inputs.\n- Ensure the solution is scalable and can handle up to 10,000 queries efficiently.\n- Provide clear and formatted output for each query result.\nWe will use a dynamic programming approach to efficiently count staircases in the matrix. The matrix will be represented as a 2D list, and we will maintain a separate 2D list to track the number of staircases ending at each cell. For each query, we will update the matrix and recalculate the number of staircases using the precomputed values. This approach ensures that we can handle large matrices and numerous queries efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a 2D array consisting of rows and columns. In this problem, each cell in the matrix can be either free or locked, and the task involves finding paths (staircases) within this matrix.\n\n    'staircase'\n    Explanation: A staircase is a path in the matrix that starts and ends in a free cell, visits only free cells, and follows one of two specific structures: alternating right and down movements or alternating down and right movements.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of the staircase paths. In code, this can be implemented by checking adjacent cells in the matrix for free status and following the specified movement pattern.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a matrix to represent the free/locked status of each cell.\n    2. Initialize a 2D list to track the number of staircases ending at each cell.\n    3. For each query, flip the state of the specified cell.\n    4. Recalculate the number of staircases using dynamic programming:\n        - For each cell, check if it can be part of a staircase based on its neighbors.\n        - Update the staircase count for each cell based on its neighbors' counts.\n    5. After processing each query, output the total number of different staircases.\n\n# [edge case]\n    Edge Case 1: A matrix with all cells initially locked.\n    Explanation: No staircases can exist, so the output for each query will be 0.\n\n    Edge Case 2: A matrix with only one row or one column.\n    Explanation: Staircases can only move in one direction (either right or down), limiting the possible paths.\n\n    Edge Case 3: A query that repeatedly flips the same cell.\n    Explanation: The number of staircases will alternate between two values as the cell's state changes.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Check if all cells are locked initially and return 0 for all queries.\n        - Handle matrices with only one row or column by limiting movement checks.\n        - Implement logic to efficiently update staircase counts when a cell's state is repeatedly flipped.\n", "requirement analysis:\nThe task requires efficiently processing a series of queries that flip the state of cells in a matrix and calculating the number of unique staircases after each query. The solution must handle large matrices and a high number of queries, ensuring performance and accuracy. The output must be formatted correctly to match the expected results for each query.\nrequirement pool:\n- Efficiently process each query to update the matrix state.\n- Accurately count the number of different staircases after each query.\n- Optimize the solution for large matrices and numerous queries.\n- Ensure the output format matches the expected results.\n- Provide a user-friendly interface for input and output.\nWe will use a matrix to represent the grid and a set to track the free cells. For each query, we will flip the state of the specified cell and update the set of free cells. To efficiently count the number of staircases, we will use a dynamic programming approach to explore possible paths starting from each free cell, ensuring scalability for large matrices and numerous queries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': A grid-like structure consisting of rows and columns.\n    'free or locked': Each cell in the matrix can either be accessible (free) or inaccessible (locked).\n    'staircase': A path in the matrix that follows a specific zigzag pattern, starting and ending in free cells.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom': These phrases describe the movement pattern of the staircase path, indicating a step-by-step traversal either horizontally or vertically by one cell at a time.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a matrix to represent the grid and a set to track free cells.\n    2. For each query, flip the state of the specified cell (free to locked or locked to free).\n    3. Use dynamic programming to explore possible staircase paths starting from each free cell.\n    4. Count and print the number of distinct staircases after each query.\n\n# [edge case]\n    Edge Case 1: Matrix with all cells initially free, and queries flip cells back and forth.\n    Explanation: This tests the ability to handle repeated state changes without errors.\n    \n    Edge Case 2: Matrix with only one row or one column.\n    Explanation: This tests the handling of minimal dimensions where staircases are limited.\n\n    Edge Case 3: Matrix with maximum size (1000x1000) and queries affecting central cells.\n    Explanation: This tests performance and correctness under maximum constraints.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently, especially for large matrices.\n        - Implement memoization or caching to avoid redundant calculations for staircase paths.\n        - Optimize the dynamic programming approach to handle large matrices within time constraints.\n", "requirement analysis:\nThe task requires processing a matrix with dynamic updates and efficiently counting unique staircase paths after each update. The solution must handle large matrices and numerous queries, ensuring both performance and accuracy.\nrequirement pool:\n- Efficiently process each query to update the matrix state.\n- Accurately count the number of different staircases after each query.\n- Ensure the solution is scalable for large matrices and many queries.\n- Provide clear and correct output for each query.\n- Optimize the algorithm for performance improvements.\nWe will use a dynamic programming approach to efficiently count the number of unique staircases after each query. The matrix will be updated using a simple toggle mechanism for each cell, and we will maintain a data structure to track the number of staircases. The algorithm will leverage numpy for efficient matrix operations and will be optimized to handle large matrices and numerous queries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': A grid-like structure consisting of rows and columns.\n    'free or locked': Each cell in the matrix can either be accessible (free) or inaccessible (locked).\n    'staircase': A path in the matrix that follows a specific pattern, either right-down-right-down or down-right-down-right.\n\n# [phrase showing quantity relationship]\n    '1 to the right': Move one column to the right.\n    '1 to the bottom': Move one row down.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Initialize a matrix of size n x m with all cells marked as free.\n2. For each query, toggle the state of the specified cell (free to locked or locked to free).\n3. After each query, count the number of unique staircases:\n   - Use dynamic programming to track possible staircases starting from each free cell.\n   - For each free cell, check if it can be the start of a staircase and follow the two possible patterns.\n   - Use a set to store unique staircases based on their cell positions.\n4. Output the count of unique staircases after each query.\n\n# [edge case] \n    1. A matrix with all cells initially locked: After any query, only single-cell staircases can exist.\n       Explanation: If all cells are locked, no multi-cell staircases can form. Only single-cell staircases are possible when a cell is toggled to free.\n    2. A matrix with only one row or one column: Only single-cell staircases can exist.\n       Explanation: With only one row or column, no multi-step staircases can be formed.\n    3. A query that toggles a cell back to its original state: The number of staircases should revert to the previous count before the first toggle.\n       Explanation: Toggling a cell twice returns it to its original state, so the staircase count should reflect this.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement checks for single-row or single-column matrices to handle them separately.\n    - Use a set to track unique staircases and ensure that toggling a cell twice correctly updates the count.\n\n```python\nimport numpy as np\n\ndef count_staircases(n, m, queries):\n    # Initialize matrix\n    matrix = np.ones((n, m), dtype=bool)  # True for free, False for locked\n    results = []\n\n    for x, y in queries:\n        # Toggle the cell\n        matrix[x-1, y-1] = not matrix[x-1, y-1]\n\n        # Count unique staircases\n        unique_staircases = set()\n        \n        # Check each cell as a potential start of a staircase\n        for i in range(n):\n            for j in range(m):\n                if matrix[i, j]:  # If the cell is free\n                    # Check right-down-right pattern\n                    if j + 1 < m and i + 1 < n and matrix[i, j+1] and matrix[i+1, j+1]:\n                        unique_staircases.add(((i, j), (i, j+1), (i+1, j+1)))\n                    # Check down-right-down pattern\n                    if i + 1 < n and j + 1 < m and matrix[i+1, j] and matrix[i+1, j+1]:\n                        unique_staircases.add(((i, j), (i+1, j), (i+1, j+1)))\n        \n        # Add single-cell staircases\n        for i in range(n):\n            for j in range(m):\n                if matrix[i, j]:\n                    unique_staircases.add(((i, j),))\n        \n        results.append(len(unique_staircases))\n\n    return results\n```\n\n", "requirement analysis:\nThe requirements focus on processing queries to flip cell states in a matrix and counting distinct staircases. The solution must efficiently handle up to 1000x1000 matrices and 10^4 queries, ensuring accurate staircase differentiation after each query.\nrequirement pool:\n- Efficiently process matrix queries\n- Accurately count distinct staircases\n- Optimize for large matrix sizes\n- Ensure scalability for high query volumes\n- Provide clear output format\nWe will use a combination of matrix manipulation and pathfinding algorithms to efficiently process queries and count distinct staircases. The key challenge is to update the matrix state and recalculate the number of staircases after each query. We will leverage numpy for efficient matrix operations and use a custom algorithm to track and count staircases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A grid-like structure with rows and columns where each cell can be either free or locked.\n\n    'staircase'\n    Explanation: A path in the matrix that starts and ends in a free cell, visits only free cells, and follows a specific zigzag pattern.\n\n    'query'\n    Explanation: An operation that flips the state of a single cell in the matrix from free to locked or vice versa.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of the staircase path. In code, this can be implemented by adjusting the indices of the matrix to move right (increment column index) or down (increment row index).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a matrix of size n x m with all cells marked as free.\n2. For each query, flip the state of the specified cell.\n3. After each query, recalculate the number of distinct staircases:\n   - Use a pathfinding algorithm to explore all possible staircase paths starting from each free cell.\n   - Count paths that meet the staircase criteria.\n4. Output the number of distinct staircases after each query.\n\n# [edge case]\n    Edge Case 1: A 1x1 matrix with a single query flipping the only cell.\n    Expected Output: 0\n    Explanation: The single cell is flipped to locked, leaving no free cells for a staircase.\n\n    Edge Case 2: A 2x2 matrix with all cells initially free and no queries.\n    Expected Output: 5\n    Explanation: There are 5 possible staircases: each individual cell and two zigzag paths.\n\n    Edge Case 3: A 3x3 matrix with all cells initially locked and one query unlocking a corner cell.\n    Expected Output: 1\n    Explanation: Only the single unlocked cell can form a staircase.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement logic to handle matrices with minimal dimensions (e.g., 1x1).\n    - Ensure that pathfinding correctly identifies single-cell staircases.\n    \n```python\ndef process_queries(n, m, queries):\n    # Initialize matrix with all cells free\n    matrix = [[True] * m for _ in range(n)]\n    \n    def count_staircases():\n        # Implement pathfinding and counting logic here\n        # This is a placeholder for the actual implementation\n        return 0\n    \n    results = []\n    for x, y in queries:\n        # Flip the state of the cell (x-1, y-1)\n        matrix[x-1][y-1] = not matrix[x-1][y-1]\n        # Count staircases after this query\n        results.append(count_staircases())\n    \n    return results\n```\n\n", "requirement analysis:\nThe requirements focus on processing matrix queries efficiently and accurately counting staircases. The solution must handle large matrices and numerous queries, ensuring scalability and robustness. The output format must be strictly followed to pass all test cases.\nrequirement pool:\n- Implement efficient query processing for matrix state updates\n- Develop algorithm to accurately count staircases\n- Ensure scalability for large matrices and high query volumes\n- Optimize performance for real-time query handling\n- Design user-friendly input and output interface\nWe will use a matrix to represent the grid and a set to track the free cells. For each query, we will toggle the state of the specified cell and then recalculate the number of staircases. To efficiently count staircases, we will use a dynamic programming approach to track possible paths and update them as cells are toggled. This approach ensures scalability and efficiency, even for large matrices and numerous queries.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A matrix is a two-dimensional array consisting of rows and columns. In this requirement, it represents a grid where each cell can be either free or locked.\n\n    'staircase'\n    Explanation: A staircase is a path in the matrix that starts and ends in a free cell, visits only free cells, and follows one of two specific structures: alternating right and down movements or alternating down and right movements.\n\n    'query'\n    Explanation: A query is an operation that flips the state of a single cell in the matrix, changing it from free to locked or vice versa.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of the staircase path. \"1 to the right\" means moving horizontally to the next column, and \"1 to the bottom\" means moving vertically to the next row. In code, this can be implemented by adjusting indices in a loop or recursive function.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize a matrix to represent the grid and a set to track free cells.\n    2. For each query, toggle the state of the specified cell.\n    3. Use dynamic programming to efficiently count staircases by tracking possible paths and updating them as cells are toggled.\n    4. After each query, calculate and print the number of different staircases.\n\n# [edge case]\n    Edge Case 1: Matrix with all cells initially locked\n    Explanation: If all cells are initially locked, no staircases can exist. The expected output after any query would be 0 unless a cell is toggled to free.\n\n    Edge Case 2: Single cell matrix\n    Explanation: A single cell matrix can only have one staircase if the cell is free. The expected output would be 1 if the cell is free and 0 if it is locked.\n\n    Edge Case 3: Matrix with alternating free and locked cells\n    Explanation: This configuration can create complex paths where staircases may be limited or numerous depending on the specific pattern. The expected output will vary based on the initial configuration and subsequent queries.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if n == 1 and m == 1:\n            return 1 if matrix[0][0] == 'free' else 0\n        elif all(matrix[i][j] == 'locked' for i in range(n) for j in range(m)):\n            return 0\n        # Additional logic for handling alternating free and locked cells\n        # (other code)\n", "requirement analysis:\nThe task requires efficiently processing a series of queries that flip the state of cells in a matrix and recalculating the number of unique staircases after each query. The solution must handle large matrices and a high number of queries, ensuring both performance and accuracy.\nrequirement pool:\n- Efficiently process each query to update the matrix state.\n- Accurately count the number of different staircases after each query.\n- Optimize the solution for large matrices and numerous queries.\n- Ensure the solution is scalable and performs well under maximum constraints.\n- Provide clear and correct output for each query.\nWe will use a combination of matrix manipulation and dynamic programming to efficiently count staircases. The key challenge is to update the matrix state and recalculate the number of staircases after each query. We will use NumPy for efficient matrix operations and implement a custom algorithm to track and count staircases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix': A grid structure consisting of rows and columns where each cell can be either free or locked.\n    'staircase': A path in the matrix that follows a specific zigzag pattern, starting and ending in free cells.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom': These phrases describe the movement pattern of the staircase path. In code, this can be implemented by adjusting indices in a loop or recursive function to move right or down by one step.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Initialize the matrix with all cells marked as free.\n    2. For each query, flip the state of the specified cell (free to locked or locked to free).\n    3. After each query, recalculate the number of different staircases:\n        - Use dynamic programming to track possible staircase paths.\n        - Update paths based on the current state of the matrix.\n        - Count paths that meet the staircase criteria.\n    4. Output the count after each query.\n\n# [edge case]\n    Edge Case 1: A matrix with all cells initially locked (e.g., 2x2 matrix with all cells locked).\n    Expected Output: 0\n    Explanation: No staircases can exist because all cells are locked.\n\n    Edge Case 2: A single cell matrix (1x1) with one query flipping its state.\n    Expected Output: 1\n    Explanation: A single free cell is considered a staircase.\n\n    Edge Case 3: A matrix with alternating free and locked cells in a checkerboard pattern.\n    Expected Output: Depends on the specific queries, but initially, no staircases can exist due to locked cells blocking paths.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where recalculating staircases is necessary after each query.\n        def flip_cell(matrix, x, y):\n            matrix[x][y] = not matrix[x][y]\n\n        def count_staircases(matrix):\n            # Implement dynamic programming logic to count staircases\n            pass\n\n        for query in queries:\n            flip_cell(matrix, query[0], query[1])\n            print(count_staircases(matrix))\n", "requirement analysis:\nThe requirements focus on processing a series of queries that flip the state of cells in a matrix and counting the number of unique staircases after each query. The solution must efficiently handle large matrices and a high number of queries, ensuring accurate results and scalability.\nrequirement pool:\n- Implement efficient query processing to update matrix state\n- Develop algorithm to accurately count staircases\n- Optimize for large matrix and query handling\n- Ensure output format consistency with examples\n- Provide clear input instructions for users\nWe will use a matrix to represent the grid and a set to track the free cells. For each query, we will flip the state of the specified cell and update the set of free cells. We will then count the number of unique staircases using a depth-first search (DFS) approach, ensuring efficient traversal by marking visited cells. The DFS will alternate directions to form staircases as described. Given the constraints, we will use NumPy for efficient matrix operations and manage the queries using simple list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A grid-like structure with rows and columns where each cell can be either free or locked.\n\n    'staircase'\n    Explanation: A path in the matrix that starts and ends in a free cell, visits only free cells, and follows a specific zigzag pattern (either right then down or down then right).\n\n    'query'\n    Explanation: An operation that flips the state of a specified cell in the matrix from free to locked or vice versa.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of the staircase path. In code, this can be implemented by adjusting the indices of the matrix to move right (increment column index) or down (increment row index).\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a matrix to represent the grid and a set to track free cells.\n2. For each query, flip the state of the specified cell and update the set of free cells.\n3. Use a depth-first search (DFS) to count unique staircases:\n   - Start from each free cell and attempt to form staircases by alternating directions.\n   - Mark visited cells to avoid recounting.\n4. After processing each query, output the number of unique staircases.\n\n# [edge case]\n    Edge Case 1: A matrix with all cells initially locked.\n    Explanation: No staircases can be formed, so the output should be 0 after each query.\n\n    Edge Case 2: A single cell matrix (1x1).\n    Explanation: The only possible staircase is the single cell itself, so the output should be 1 if the cell is free.\n\n    Edge Case 3: A matrix with alternating free and locked cells in a checkerboard pattern.\n    Explanation: Depending on the query, staircases may be limited due to blocked paths, requiring careful tracking of free paths.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where all cells are initially locked or when dealing with very small matrices.\n    \n```python\ndef handle_edge_cases(matrix, queries):\n    # Check if all cells are initially locked\n    if all(cell == 'locked' for row in matrix for cell in row):\n        return [0] * len(queries)\n    \n    # Handle single cell matrix\n    if len(matrix) == 1 and len(matrix[0]) == 1:\n        return [1 if matrix[0][0] == 'free' else 0 for _ in queries]\n    \n    # Implement logic for checkerboard pattern or other complex patterns\n    # This may involve additional checks or optimizations in the DFS logic\n```\n\n", "requirement analysis:\nThe requirements focus on processing matrix queries efficiently and accurately counting staircases. The challenge lies in optimizing performance for large matrices and ensuring the correct identification of staircases after each query.\nrequirement pool:\n- Implement efficient matrix query processing.\n- Ensure accurate staircase counting after each query.\n- Optimize performance for large matrices and queries.\n- Develop a user-friendly input and output format.\n- Provide detailed error handling and feedback.\nWe will implement a function to efficiently process matrix queries and count staircases. The challenge is to handle large matrices and queries efficiently. We will use a 2D list to represent the matrix and a set to track unique staircases. The function will update the matrix based on queries and recalculate the number of staircases after each query. We will optimize the counting process by only recalculating affected areas of the matrix.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A grid-like structure consisting of rows and columns where each cell can be either free or locked.\n\n    'staircase'\n    Explanation: A path in the matrix that starts and ends in a free cell, visits only free cells, and follows a specific pattern of movement (either right then down or down then right).\n\n    'query'\n    Explanation: An operation that flips the state of a single cell in the matrix from free to locked or vice versa.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of a staircase path in the matrix. In code, this can be implemented by checking adjacent cells in the specified direction.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a 2D list to represent the matrix, with all cells initially set to free.\n2. For each query, flip the state of the specified cell.\n3. After each query, recalculate the number of unique staircases:\n   - Iterate through each cell in the matrix.\n   - For each free cell, attempt to form a staircase starting from that cell.\n   - Use a set to track unique staircases by storing their paths.\n4. Output the number of unique staircases after each query.\n\n# [edge case]\n    Edge Case 1: A matrix with all cells initially locked.\n    Explanation: No staircases can be formed, so the output should be 0 after each query.\n\n    Edge Case 2: A single cell matrix (1x1).\n    Explanation: The only possible staircase is the single cell itself, so the output should be 1 if the cell is free and 0 if it is locked.\n\n    Edge Case 3: A matrix with alternating free and locked cells in a checkerboard pattern.\n    Explanation: Depending on the query, staircases may be limited due to blocked paths, requiring careful recalculation.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - For a single cell matrix, directly check if the cell is free or locked and return 1 or 0 accordingly.\n    - For matrices with all cells initially locked, ensure that no staircases are counted unless cells are flipped to free.\n", "requirement analysis:\nThe task requires handling a matrix where each cell can be toggled between free and locked states. The main challenge is to efficiently count the number of unique staircase paths after each query, considering the constraints of large matrix sizes and numerous queries. The solution must be optimized for performance and accuracy.\nrequirement pool:\n- Implement efficient matrix query processing.\n- Develop accurate staircase path counting logic.\n- Optimize for large matrix sizes and high query counts.\n- Ensure the solution is scalable and maintainable.\n- Provide clear documentation and user instructions.\nWe will implement a function to efficiently process matrix queries and count the number of unique staircase paths. The function will maintain a matrix to track free and locked cells and use a dynamic programming approach to count staircases. We will use numpy for efficient matrix operations and handle each query by toggling the cell state and recalculating the staircase count.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A grid-like structure consisting of rows and columns where each cell can be either free or locked.\n\n    'staircase'\n    Explanation: A path in the matrix that starts and ends in a free cell, visits only free cells, and follows a specific zigzag pattern (either right then down or down then right).\n\n    'query'\n    Explanation: An operation that flips the state of a specific cell in the matrix from free to locked or vice versa.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of the staircase path, indicating a shift by one cell in the specified direction.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a matrix to track the state (free or locked) of each cell.\n2. For each query, toggle the state of the specified cell.\n3. After each query, recalculate the number of unique staircases:\n   - Use dynamic programming to count paths that follow the staircase pattern.\n   - Consider paths starting from each free cell and check if they can form a valid staircase.\n4. Output the number of unique staircases after each query.\n\n# [edge case]\n    Edge Case 1: A matrix with all cells initially free and a single query that locks one cell.\n    Explanation: The number of staircases will decrease as one potential path is blocked.\n\n    Edge Case 2: A matrix with all cells initially locked and a single query that frees one cell.\n    Explanation: The number of staircases will increase as new paths become possible.\n\n    Edge Case 3: A matrix with alternating free and locked cells, and a query that toggles a central cell.\n    Explanation: Depending on the position, this could significantly alter the number of possible staircases.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement a function to efficiently update the count of staircases after each query.\n        - Use memoization or caching to avoid recalculating paths from scratch after each query.\n        - Consider edge cases where toggling a single cell drastically changes the path count.\n", "requirement analysis:\nThe task requires processing a matrix with dynamic updates and counting specific path structures called staircases. The main challenge is efficiently updating the matrix and recalculating the number of staircases after each query, especially given the constraints on matrix size and number of queries. The solution must handle large inputs and provide accurate results quickly.\nrequirement pool:\n- Implement efficient matrix update and query processing.\n- Develop an algorithm to accurately count staircases after each query.\n- Optimize the solution for large matrices and high query volumes.\n- Ensure the solution is scalable and maintains performance.\n- Provide clear and formatted output for each query result.\nWe will use a combination of data structures to efficiently manage the matrix state and count staircases. A 2D list will represent the matrix, and a set will track the positions of free cells. For each query, we will update the matrix and recalculate the number of staircases by checking possible paths from each free cell. This approach ensures that we can handle large matrices and numerous queries efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'matrix'\n    Explanation: A grid-like structure with rows and columns where each cell can be either free or locked.\n\n    'staircase'\n    Explanation: A path in the matrix that starts and ends in a free cell, visits only free cells, and follows a specific zigzag pattern (either right then down or down then right).\n\n    'query'\n    Explanation: An operation that flips the state of a single cell in the matrix from free to locked or vice versa.\n\n# [phrase showing quantity relationship]\n    '1 to the right', '1 to the bottom'\n    Explanation: These phrases describe the movement pattern of the staircase path. In code, this can be implemented by checking adjacent cells in the specified direction.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Initialize a 2D list to represent the matrix, with all cells initially set to free.\n2. Create a function to count staircases by iterating over each free cell and checking for valid staircase paths.\n3. For each query, flip the state of the specified cell.\n4. After each query, recalculate and print the number of different staircases using the counting function.\n\n# [edge case]\n    Edge Case 1: A matrix with all cells initially locked.\n    Explanation: No staircases can exist, so the output should be 0 after each query.\n\n    Edge Case 2: A single cell matrix (1x1).\n    Explanation: The only possible staircase is the single cell itself if it is free. The output should be 1 if the cell is free and 0 if it is locked.\n\n    Edge Case 3: A matrix with alternating locked and free cells.\n    Explanation: Depending on the pattern, staircases may be limited or non-existent. The output will vary based on the specific configuration after each query.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - For a single cell matrix, directly check if the cell is free or locked.\n    - For a matrix with all cells initially locked, ensure that no staircases are counted.\n    - Implement logic to efficiently handle alternating patterns by checking adjacent cells' states before counting staircases.\n"], "scores": [], "pass_results": [false, false, false, true, false, false, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 136, "examples": "\nInput\n\nThe first line contains three integers n, m and q (1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 10^4) \u2014 the sizes of the matrix and the number of queries.\n\nEach of the next q lines contains two integers x and y (1 \u2264 x \u2264 n; 1 \u2264 y \u2264 m) \u2014 the description of each query.\n\nOutput\n\nPrint q integers \u2014 the i-th value should be equal to the number of different staircases after i queries. Two staircases are considered different if there exists such a cell that appears in one path and doesn't appear in the other path.\n\nExamples\n\nInput\n\n\n2 2 8\n1 1\n1 1\n1 1\n2 2\n1 1\n1 2\n2 1\n1 1\n\n\nOutput\n\n\n5\n10\n5\n2\n5\n3\n1\n0\n\n\nInput\n\n\n3 4 10\n1 4\n1 2\n2 3\n1 2\n2 3\n3 2\n1 3\n3 4\n1 3\n3 1\n\n\nOutput\n\n\n49\n35\n24\n29\n49\n39\n31\n23\n29\n27\n\n\nInput\n\n\n1000 1000 2\n239 634\n239 634\n\n\nOutput\n\n\n1332632508\n1333333000", "mutate_method": "condense_two2one", "parent_index": 27}
