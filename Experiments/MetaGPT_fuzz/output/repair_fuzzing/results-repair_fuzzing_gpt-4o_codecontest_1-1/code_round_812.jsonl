{"name": "1622_B. Berland Music", "description": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song had its predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\n\n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "tags": ["data structures", "greedy", "math", "sortings"], "difficulty": 8, "id": 1622, "sample_io": [{"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}], "test_list": [{"input": "1\n7\n1 2 3 4 5 6 7\n0101010\n", "output": ["1 5 2 6 3 7 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 6 5 8 3 2 4 7\n"]}, {"input": "1\n50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n10101010101010101010101010101010101010101010101010\n", "output": ["26 1 27 2 28 3 29 4 30 5 31 6 32 7 33 8 34 9 35 10 36 11 37 12 38 13 39 14 40 15 41 16 42 17 43 18 44 19 45 20 46 21 47 22 48 23 49 24 50 25\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 5 2 6 3 4 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110001\n", "output": ["2 1\n3 1 2\n5 6 4 8 2 1 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n3 1 2\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["2 1\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1101010\n", "output": ["4 5 1 6 2 7 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n3 1 2\n1 6 5 8 2 7 4 3\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1101000\n", "output": ["5 6 1 7 2 3 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 5 2 6 3 7 4\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 6 2 7 3 4 5\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["1 2\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 1 2\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11110111\n", "output": ["2 1\n3 1 2\n3 4 2 8 1 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11110001\n", "output": ["2 1\n1 6 2 7 3 4 5\n5 6 4 8 2 1 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n1 2 3\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n3 2 1\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n001\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n2 1 3\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 6 2 7 3 4 5\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100010\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 3 4 7 5\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 6 2 7 3 4 5\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00110011\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 2 5 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11100101\n", "output": ["2 1\n3 1 2\n5 6 4 3 1 7 2 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110011\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 5 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01100100\n", "output": ["2 1\n3 2 1\n1 7 6 5 2 8 4 3\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n1 2 3\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 5 2 6 3 4 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n4 5 1 6 2 3 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111001\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 4 5 6 1 2 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n1 2 3\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n1 4 2 5 6 3 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n11010001\n", "output": ["2 1\n3 1 2\n5 6 1 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n00010000\n", "output": ["2 1\n1 5 2 6 3 7 4\n2 3 1 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0001000\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 2 3 7 4 5 6\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11111011\n", "output": ["2 1\n1 6 2 7 3 4 5\n3 4 2 8 5 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 2 1\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 5 6 7 2 3 4\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n4 5 6 7 1 2 3\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n11111111\n", "output": ["2 1\n1 6 2 7 3 4 5\n2 3 1 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n5 6 1 7 2 3 4\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11110100\n", "output": ["2 1\n3 2 1\n5 6 4 8 1 7 3 2\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n2 3 1\n4 5 3 8 6 1 2 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1001000\n", "output": ["6 1 2 7 3 4 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00100001\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 7 6 4 3 5 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n01110100\n", "output": ["2 1\n2 3 1\n1 6 5 8 2 7 4 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01111111\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 3 2 8 5 4 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 5 2 6 3 7 4\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n3 2 1\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111000\n8\n2 3 1 8 5 4 7 6\n11110111\n", "output": ["2 1\n1 5 6 7 2 3 4\n3 4 2 8 1 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n11010010\n", "output": ["2 1\n5 6 1 7 2 3 4\n5 6 1 8 3 2 7 4\n"]}, {"input": "3\n2\n2 1\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111010\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n3 4 5 6 1 7 2\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111100\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 4 5 6 7 1 2\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101000\n8\n2 3 1 8 5 4 7 6\n01110111\n", "output": ["2 1\n1 6 2 7 3 4 5\n1 4 3 8 2 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01111101\n", "output": ["2 1\n3 2 1\n1 4 3 8 6 5 2 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["1 2\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n2 3 4 5 6 1 7\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101010\n8\n2 3 1 8 5 4 7 6\n10010000\n", "output": ["2 1\n1 5 2 6 3 7 4\n7 2 1 8 4 3 6 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0110000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 6 7 2 3 4 5\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n001\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n2 1 3\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101110\n8\n2 3 1 8 5 4 7 6\n01111001\n", "output": ["2 1\n1 4 2 5 6 7 3\n1 5 4 8 6 2 3 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 4 2 5 6 7 3\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0001010\n8\n2 3 1 8 5 4 7 6\n00010001\n", "output": ["2 1\n1 2 3 6 4 7 5\n2 3 1 8 5 4 6 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n010\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n2 3 1\n4 5 3 8 1 6 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110110\n", "output": ["2 1\n3 2 1\n1 5 4 8 2 6 7 3\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101000\n8\n2 3 1 8 5 4 7 6\n10010011\n", "output": ["2 1\n5 6 1 7 2 3 4\n5 2 1 8 4 3 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 2 1\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11010011\n", "output": ["2 1\n3 1 2\n4 5 1 8 3 2 7 6\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n00110001\n", "output": ["2 1\n3 2 1\n1 2 6 8 4 3 5 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n011\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 2 3\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100001\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n1 6 2 3 4 5 7\n1 6 5 8 3 2 4 7\n"]}, {"input": "1\n7\n1 2 3 4 5 6 7\n1100010\n", "output": ["5 6 1 2 3 7 4\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0111010\n8\n2 3 1 8 5 4 7 6\n00110111\n", "output": ["2 1\n1 4 5 6 2 7 3\n1 2 4 8 3 5 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111000\n8\n2 3 1 8 5 4 7 6\n11000011\n", "output": ["2 1\n4 5 6 7 1 2 3\n5 6 1 4 3 2 8 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n10010000\n", "output": ["2 1\n1 4 2 5 3 6 7\n7 2 1 8 4 3 6 5\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1101110\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 4 1 5 6 7 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n110\n8\n2 3 1 8 5 4 7 6\n11110110\n", "output": ["2 1\n3 2 1\n4 5 3 8 1 6 7 2\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11100101\n", "output": ["1 2\n3 1 2\n5 6 4 3 1 7 2 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n1111100\n8\n2 3 1 8 5 4 7 6\n11000011\n", "output": ["2 1\n3 4 5 6 7 1 2\n5 6 1 4 3 2 8 7\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101011\n8\n2 3 1 8 5 4 7 6\n01100001\n", "output": ["2 1\n1 4 2 5 3 6 7\n1 7 6 5 3 2 4 8\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0100000\n8\n2 3 1 8 5 4 7 6\n11110011\n", "output": ["2 1\n1 7 2 3 4 5 6\n4 5 3 8 2 1 7 6\n"]}, {"input": "3\n2\n1 2\n10\n7\n1 2 3 4 5 6 7\n0101001\n8\n2 3 1 8 5 4 7 6\n11011011\n", "output": ["2 1\n1 5 2 6 3 4 7\n3 4 1 8 5 2 7 6\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01110101\n", "output": ["1 2\n3 1 2\n1 5 4 8 2 6 3 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["2 1\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n000\n8\n2 3 1 8 5 4 7 6\n11111001\n", "output": ["2 1\n3 1 2\n4 5 3 8 6 1 2 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01110001\n", "output": ["2 1\n3 1 2\n1 6 5 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n11010001\n", "output": ["2 1\n3 1 2\n5 6 1 8 3 2 4 7\n"]}, {"input": "3\n2\n1 2\n11\n3\n3 1 2\n101\n8\n2 3 1 8 5 4 7 6\n01100101\n", "output": ["1 2\n3 1 2\n1 6 5 4 2 7 3 8\n"]}, {"input": "3\n2\n1 2\n10\n3\n3 1 2\n000\n8\n2 3 1 8 5 4 7 6\n11110101\n", "output": ["2 1\n3 1 2\n4 5 3 8 1 6 2 7\n"]}], "task_id": "codecontest/155", "prompt": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song has a predicted rating. This rating is equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation and each of these predicted ratings is unique. No two predicted ratings are the same.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider exploring efficient algorithms to achieve optimal permutations for large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "repair_prompt": ["Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song has a predicted rating. This rating is equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation and each of these predicted ratings is unique. No two predicted ratings are the same.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider exploring efficient algorithms to achieve optimal permutations for large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module.\n\nSo imagine Monocarp got recommended n songs, numbered from 1 to n. The i-th song has a predicted rating. This predicted rating is equal to p_i. Here 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation and each of these predicted ratings is unique. No two predicted ratings are the same.\n\nAfter listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it.\n\nNow the service has to re-evaluate the song ratings in such a way that:\n\n  * the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once); \n  * every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). \n\nAmong all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x.\n\nPrint the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider exploring efficient algorithms to achieve optimal permutations for large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "Berland Music is a music streaming service built specifically to support Berland local artist, and its developers are currently working on a song recommendation module. So imagine Monocarp got recommended n songs, numbered from 1 to n, where the i-th song has a predicted rating equal to p_i, where 1 \u2264 p_i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation and each of these predicted ratings is unique. After listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s, such that s_i=0 means that he disliked the i-th song, and s_i=1 means that he liked it. Now the service has to re-evaluate the song ratings in such a way that the new ratings q_1, q_2, ..., q_n still form a permutation (1 \u2264 q_i \u2264 n; each integer from 1 to n appears exactly once), and every song that Monocarp liked should have a greater rating than every song that Monocarp disliked (formally, for all i, j such that s_i=1 and s_j=0, q_i>q_j should hold). Among all valid permutations q find the one that has the smallest value of \u2211_{i=1}^n |p_i-q_i|, where |x| is an absolute value of x. Print the permutation q_1, q_2, ..., q_n. If there are multiple answers, you can print any of them. Consider exploring efficient algorithms to achieve optimal permutations for large inputs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user feedback.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of songs.\n            - p: List of predicted ratings (a permutation of numbers from 1 to n).\n            - s: String of likes ('1') and dislikes ('0').\n\n    Returns:\n        A list of lists, where each list contains the re-evaluated ratings for a test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort the predicted ratings\n        sorted_p = sorted(p)\n\n        # Assign the highest available ratings to liked songs\n        liked_ratings = sorted_p[-len(liked_indices):]\n        # Assign the lowest available ratings to disliked songs\n        disliked_ratings = sorted_p[:len(disliked_indices)]\n\n        # Create a new list for re-evaluated ratings\n        q = [0] * n\n\n        # Assign ratings to liked songs\n        for idx, rating in zip(liked_indices, liked_ratings):\n            q[idx] = rating\n\n        # Assign ratings to disliked songs\n        for idx, rating in zip(disliked_indices, disliked_ratings):\n            q[idx] = rating\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user feedback.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings permutation.\n            - s (str): String of likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices based on their predicted ratings\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Assign ratings from n downwards to liked songs and from 1 upwards to disliked songs\n        q = [0] * n\n        current_rating = n\n\n        for index in liked_indices:\n            q[index] = current_rating\n            current_rating -= 1\n\n        for index in disliked_indices:\n            q[index] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        p = list(map(int, input().strip().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on Monocarp's feedback.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of songs.\n            - p: List of predicted ratings (a permutation of numbers from 1 to n).\n            - s: String of feedback ('0' for dislike, '1' for like).\n\n    Returns:\n        A list of lists, where each list contains the re-evaluated ratings for a test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices by their predicted ratings\n        liked_indices.sort(key=lambda i: p[i])\n        disliked_indices.sort(key=lambda i: p[i])\n\n        # Assign new ratings\n        q = [0] * n\n        current_rating = 1\n\n        # Assign lowest ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating += 1\n\n        # Assign highest ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating += 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user likes and dislikes.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Permutation of predicted ratings.\n            - s (str): String representing likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort liked indices in descending order based on their original ratings\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        # Sort disliked indices in ascending order based on their original ratings\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Create a new permutation q\n        q = [0] * n\n        current_rating = n\n\n        # Assign highest ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        # Assign remaining ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on Monocarp's feedback.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings, a permutation of numbers from 1 to n.\n            - s (str): Feedback string where '1' means liked and '0' means disliked.\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort the predicted ratings\n        sorted_p = sorted(p)\n\n        # Assign the highest available ratings to liked songs\n        liked_ratings = sorted_p[-len(liked_indices):]\n        # Assign the lowest available ratings to disliked songs\n        disliked_ratings = sorted_p[:len(disliked_indices)]\n\n        # Create a new list for re-evaluated ratings\n        q = [0] * n\n\n        # Assign ratings to liked songs\n        for idx, rating in zip(liked_indices, liked_ratings):\n            q[idx] = rating\n\n        # Assign ratings to disliked songs\n        for idx, rating in zip(disliked_indices, disliked_ratings):\n            q[idx] = rating\n\n        results.append(q)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Call the function and print the results\n    results = re_evaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user feedback.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Permutation of predicted ratings.\n            - s (str): String representing likes (1) and dislikes (0).\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort indices based on their predicted ratings\n        liked_indices.sort(key=lambda x: p[x])\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Assign new ratings\n        q = [0] * n\n        current_rating = 1\n\n        # Assign ratings to disliked songs first\n        for index in disliked_indices:\n            q[index] = current_rating\n            current_rating += 1\n\n        # Assign ratings to liked songs\n        for index in liked_indices:\n            q[index] = current_rating\n            current_rating += 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    s = input().strip()\n    test_cases.append((n, p, s))\n\n# Output interface\nresults = reevaluate_ratings(t, test_cases)\nfor result in results:\n    print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on user feedback.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of songs.\n            - p: A list of integers representing the predicted ratings.\n            - s: A string representing the like (1) or dislike (0) for each song.\n\n    Returns:\n        A list of lists, where each list contains the re-evaluated ratings for a test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort liked indices by their predicted ratings in descending order\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        # Sort disliked indices by their predicted ratings in ascending order\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Assign the highest available ratings to liked songs and lowest to disliked songs\n        q = [0] * n\n        current_rating = n\n\n        # Assign ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        # Assign ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Call the function and get results\n    results = re_evaluate_ratings(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on likes and dislikes.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Permutation of predicted ratings.\n            - s (str): String representing likes (1) and dislikes (0).\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort liked indices in descending order and disliked indices in ascending order\n        liked_indices.sort(key=lambda x: p[x], reverse=True)\n        disliked_indices.sort(key=lambda x: p[x])\n\n        # Assign ratings\n        q = [0] * n\n        current_rating = n\n\n        # Assign highest ratings to liked songs\n        for i in liked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        # Assign remaining ratings to disliked songs\n        for i in disliked_indices:\n            q[i] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reevaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"\n    Re-evaluate song ratings based on Monocarp's feedback to minimize the sum of absolute differences\n    between predicted and re-evaluated ratings while ensuring liked songs have higher ratings than disliked ones.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings, a permutation of numbers from 1 to n.\n            - s (str): Feedback string where '1' indicates a liked song and '0' indicates a disliked song.\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate indices of liked and disliked songs\n        liked_indices = [i for i in range(n) if s[i] == '1']\n        disliked_indices = [i for i in range(n) if s[i] == '0']\n\n        # Sort the predicted ratings\n        sorted_p = sorted(p)\n\n        # Assign the highest available ratings to liked songs\n        liked_ratings = sorted_p[-len(liked_indices):]\n\n        # Assign the lowest available ratings to disliked songs\n        disliked_ratings = sorted_p[:len(disliked_indices)]\n\n        # Construct the re-evaluated ratings permutation\n        q = [0] * n\n        for i, index in enumerate(liked_indices):\n            q[index] = liked_ratings[i]\n        for i, index in enumerate(disliked_indices):\n            q[index] = disliked_ratings[i]\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        s = input().strip()\n        test_cases.append((n, p, s))\n\n    # Output interface\n    results = reevaluate_ratings(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef re_evaluate_ratings(t: int, test_cases: List[Tuple[int, List[int], str]]) -> List[List[int]]:\n    \"\"\"Re-evaluate song ratings based on likes and dislikes.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int], str]]): List of test cases, each containing:\n            - n (int): Number of songs.\n            - p (List[int]): Predicted ratings, a permutation of numbers from 1 to n.\n            - s (str): String of likes ('1') and dislikes ('0').\n\n    Returns:\n        List[List[int]]: List of re-evaluated ratings for each test case.\n    \"\"\"\n    results = []\n\n    for n, p, s in test_cases:\n        # Separate songs into liked and disliked categories\n        liked = []\n        disliked = []\n\n        for i in range(n):\n            if s[i] == '1':\n                liked.append((p[i], i))\n            else:\n                disliked.append((p[i], i))\n\n        # Sort liked in descending order and disliked in ascending order\n        liked.sort(reverse=True)\n        disliked.sort()\n\n        # Assign the highest available ratings to liked songs and lowest to disliked\n        q = [0] * n\n        current_rating = n\n\n        for _, index in liked:\n            q[index] = current_rating\n            current_rating -= 1\n\n        for _, index in disliked:\n            q[index] = current_rating\n            current_rating -= 1\n\n        results.append(q)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        p = list(map(int, data[index:index + n]))\n        index += n\n        s = data[index]\n        index += 1\n        test_cases.append((n, p, s))\n\n    # Call the function and get results\n    results = re_evaluate_ratings(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. The algorithm should handle large inputs efficiently.\nrequirement pool:\n- Develop the song recommendation algorithm to handle large datasets efficiently.\n- Ensure liked songs have higher ratings than disliked ones.\n- Minimize the sum of absolute differences between predicted and re-evaluated ratings.\n- Support local artists by prioritizing their songs in recommendations.\n- Provide a user-friendly interface for liking and disliking songs.\nWe will use a greedy algorithm to efficiently solve the problem of re-evaluating song ratings based on user feedback. The approach involves sorting the songs into two groups based on Monocarp's likes and dislikes, then assigning the highest available ratings to liked songs and the lowest to disliked songs. This ensures that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. Python's built-in sorting and list manipulation capabilities will be utilized to handle large datasets efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this requirement, it refers to the arrangement of song ratings such that each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value without regard to its sign. In this requirement, it is used to calculate the sum of differences between predicted and re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by ensuring that the ratings assigned to liked songs are numerically higher than those assigned to disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation that minimizes the sum of absolute differences between predicted and re-evaluated ratings. In code, this can be achieved by sorting and assigning ratings in a way that minimizes these differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read the number of songs, predicted ratings, and the like/dislike string.\n3. Separate the indices of liked and disliked songs.\n4. Sort the predicted ratings.\n5. Assign the highest available ratings to liked songs and the lowest to disliked songs.\n6. Ensure the permutation minimizes the sum of absolute differences.\n7. Output the re-evaluated ratings for each test case.\n\n# [edge case]\n    Test case with all songs liked:\n    Input: 3, 3 1 2, 111\n    Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation works, but using the original order minimizes the sum of absolute differences.\n\n    Test case with all songs disliked:\n    Input: 3, 3 1 2, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation works, but using the original order minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 4 1 3 2\n    Explanation: Liked songs (indices 0 and 2) get higher ratings than disliked ones (indices 1 and 3), minimizing the sum of absolute differences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes and dislikes inherently handles these scenarios efficiently.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. The algorithm should handle large inputs efficiently.\nrequirement pool:\n- Develop an algorithm to re-evaluate song ratings based on user feedback.\n- Ensure the algorithm can handle up to 200,000 songs efficiently.\n- Optimize the algorithm to minimize the sum of absolute differences between predicted and re-evaluated ratings.\n- Provide a user interface for liking or disliking songs.\n- Support multiple test cases in a single execution.\nWe will implement an efficient algorithm to re-evaluate song ratings based on user feedback. The algorithm will ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. We will use sorting and indexing techniques to achieve this efficiently, given the constraints on input size.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings are unique and each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value without regard to its sign. Here, it is used to calculate the difference between predicted and re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by ensuring that indices corresponding to liked songs have higher values than those corresponding to disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation that minimizes the sum of absolute differences between predicted and re-evaluated ratings. In code, this can be achieved by sorting and assigning values optimally.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n, the permutation p, and the string s.\n3. Separate indices of liked and disliked songs based on s.\n4. Sort the indices of liked songs in descending order and disliked songs in ascending order.\n5. Assign ratings from n downwards to liked songs and from 1 upwards to disliked songs.\n6. Calculate the permutation q and print it for each test case.\n\n# [edge case]\n    Test case with all songs liked:\n    Input: 3, 3 1 2, 111\n    Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with all songs disliked:\n    Input: 3, 3 1 2, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation works, but assigning ratings in ascending order minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 4 1 3 2\n    Explanation: Liked songs (indices 0 and 2) get higher ratings than disliked ones (indices 1 and 3), minimizing the sum of absolute differences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes and dislikes will handle these cases efficiently.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. The algorithm should be efficient to handle large inputs.\nrequirement pool:\n- Develop the song recommendation algorithm.\n- Ensure the algorithm handles large datasets efficiently.\n- Integrate user feedback to adjust song ratings.\n- Optimize the user interface for better engagement.\n- Conduct user testing to refine recommendation accuracy.\nWe will use a greedy algorithm to solve the problem efficiently. The idea is to separate the songs into two groups based on Monocarp's feedback: liked and disliked. We will assign the highest ratings to the liked songs and the lowest ratings to the disliked songs. This ensures that the condition q_i > q_j holds for all liked songs i and disliked songs j. We will then sort the liked and disliked songs based on their predicted ratings and assign the new ratings in a way that minimizes the sum of absolute differences between predicted and re-evaluated ratings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the predicted ratings are a unique sequence of numbers from 1 to n, and the re-evaluated ratings must also be a unique sequence from 1 to n.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song should have a higher rating than any 'disliked' song in the re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': \n    Explanation: For every liked song, its new rating must be greater than the new rating of any disliked song. This can be implemented by ensuring that all liked songs receive higher numbers in the permutation than disliked songs.\n\n# [degree adverb] \n    'smallest': \n    Explanation: The goal is to find a permutation that minimizes the sum of absolute differences between the predicted and re-evaluated ratings. This can be implemented by sorting and assigning ratings in a way that closely matches the original order.\n\n# [code logic]\n1. For each test case, read the number of songs n, the predicted ratings p, and the feedback string s.\n2. Separate the indices of liked and disliked songs based on s.\n3. Sort the indices of liked and disliked songs by their predicted ratings.\n4. Assign the highest available ratings to liked songs and the lowest to disliked songs.\n5. Construct the new permutation q based on these assignments.\n6. Output the permutation q for each test case.\n\n# [edge case] \n    Case 1: n = 1, p = [1], s = \"1\"\n    Expected output: 1\n    Explanation: With only one song that is liked, the permutation remains unchanged.\n\n    Case 2: n = 3, p = [3, 2, 1], s = \"000\"\n    Expected output: 1 2 3\n    Explanation: All songs are disliked, so they can be assigned any permutation. The smallest sum of differences is achieved by sorting them in ascending order.\n\n    Case 3: n = 3, p = [1, 2, 3], s = \"111\"\n    Expected output: 1 2 3\n    Explanation: All songs are liked, so they can be assigned any permutation. The smallest sum of differences is achieved by keeping them in their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on feedback will naturally handle these cases.\n", "requirement analysis:\nThe requirement focuses on developing a song recommendation module that re-evaluates song ratings based on user feedback. The key challenge is to ensure that liked songs have higher ratings than disliked ones while minimizing the difference between predicted and re-evaluated ratings. Efficient algorithms are necessary to handle large inputs and multiple test cases.\nrequirement pool:\n- Develop the song recommendation algorithm\n- Ensure liked songs have higher ratings than disliked ones\n- Optimize for large input sizes and multiple test cases\n- Integrate the module with existing streaming service\n- Enhance user interface for better user experience\nWe will use a sorting-based approach to efficiently re-evaluate the song ratings. By separating liked and disliked songs, we can assign the highest available ratings to liked songs and the lowest to disliked ones, ensuring the permutation condition is met. This approach leverages Python's built-in sorting capabilities for optimal performance.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings must be rearranged such that each integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its distance from zero on the number line, without considering direction. Here, it is used to minimize the difference between the original and new ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs.\n    'minimum possible': This means we need to find a permutation that minimizes the sum of absolute differences between original and new ratings.\n\n# [degree adverb]\n    'smallest': Refers to finding the permutation with the smallest sum of absolute differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n, the permutation p, and the string s.\n3. Separate the indices of liked and disliked songs based on s.\n4. Sort the indices of liked songs in descending order and disliked songs in ascending order.\n5. Assign the highest available ratings to liked songs and lowest to disliked songs.\n6. Calculate the permutation q and ensure it meets the condition of minimizing \u2211_{i=1}^n |p_i-q_i|.\n7. Print the permutation q for each test case.\n\n# [edge case]\n    Test case with all songs liked:\n    Input: 3, 3 1 2, 111\n    Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation works, but using the original permutation minimizes the sum of absolute differences.\n\n    Test case with all songs disliked:\n    Input: 3, 3 1 2, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation works, but using the original permutation minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 4 1 3 2\n    Explanation: Liked songs (indices 0 and 2) get higher ratings than disliked songs (indices 1 and 3).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting liked and disliked indices and assigning ratings accordingly will handle these cases naturally.\n", "requirement analysis:\nThe main requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. The algorithm should handle large inputs efficiently.\nrequirement pool:\n- Develop an efficient algorithm for song recommendation re-evaluation\n- Ensure liked songs have higher ratings than disliked ones\n- Minimize the sum of absolute differences between predicted and re-evaluated ratings\n- Support scalability for large input sizes\n- Enhance user interface for feedback on song recommendations\nWe will implement a function that processes each test case independently. For each test case, we will separate the songs into two groups based on whether they were liked or disliked. We will then assign the highest available ratings to the liked songs and the lowest available ratings to the disliked songs. This ensures that all liked songs have higher ratings than disliked ones. We will use sorting to efficiently assign ratings while minimizing the sum of absolute differences between predicted and re-evaluated ratings.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the predicted ratings and the re-evaluated ratings are both unique sequences of numbers from 1 to n.\n\n    'liked' and 'disliked'\n    Explanation: These terms refer to Monocarp's feedback on the songs. A 'liked' song should have a higher rating than any 'disliked' song in the re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that the rating of liked songs should be numerically higher than the rating of disliked songs. In code, this can be implemented by ensuring that all liked songs are assigned higher numbers than disliked ones.\n\n# [degree adverb]\n    'smallest': This refers to minimizing the sum of absolute differences between the predicted and re-evaluated ratings. In code, this can be achieved by sorting and assigning ratings in a way that minimizes these differences.\n\n# [code logic]\n1. For each test case, read the number of songs, predicted ratings, and Monocarp's feedback.\n2. Separate the indices of liked and disliked songs.\n3. Sort the predicted ratings.\n4. Assign the highest available ratings to liked songs and the lowest to disliked songs.\n5. Ensure that the sum of absolute differences between predicted and re-evaluated ratings is minimized.\n6. Output the re-evaluated ratings for each test case.\n\n# [edge case]\n    Test case with all songs liked:\n    Input: 3, 1 2 3, 111\n    Output: 1 2 3\n    Explanation: Since all songs are liked, the permutation can remain unchanged, minimizing the sum of absolute differences to zero.\n\n    Test case with all songs disliked:\n    Input: 3, 3 2 1, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, they can be assigned any permutation, but sorting them minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 3 4 1 2\n    Explanation: Liked songs (indices 1 and 3) get higher ratings than disliked ones (indices 2 and 4), while minimizing the sum of absolute differences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes and dislikes inherently handles these cases.\n", "requirement analysis:\nThe main requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback (likes/dislikes) while maintaining a permutation of ratings. The solution should minimize the sum of absolute differences between predicted and re-evaluated ratings. The algorithm must handle large inputs efficiently, as the sum of n across test cases can be up to 200,000.\nrequirement pool:\n- Develop an efficient algorithm for re-evaluating song ratings based on user feedback.\n- Ensure the algorithm maintains a permutation of ratings.\n- Minimize the sum of absolute differences between predicted and re-evaluated ratings.\n- Support scalability for large input sizes.\n- Provide flexibility in output if multiple valid permutations exist.\nWe will use a sorting-based approach to efficiently re-evaluate song ratings based on user feedback. The algorithm will separate liked and disliked songs, sort them, and then assign new ratings while ensuring the permutation condition is met. This approach leverages Python's built-in sorting capabilities for efficiency and scalability.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this requirement, both the predicted ratings and the re-evaluated ratings must form a permutation of numbers from 1 to n.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value without regard to its sign. Here, it is used to calculate the difference between predicted and re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that songs Monocarp liked should have higher ratings than those he disliked. In code, this can be implemented by ensuring that indices corresponding to liked songs have higher values than those corresponding to disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation q that minimizes the sum of absolute differences between p and q. In code, this can be implemented by sorting and assigning values in a way that minimizes these differences.\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case:\n   - Parse n, the number of songs.\n   - Parse the permutation p of predicted ratings.\n   - Parse the string s representing likes and dislikes.\n3. Separate indices of liked and disliked songs based on s.\n4. Sort the indices of liked songs and disliked songs separately.\n5. Assign new ratings such that liked songs have higher ratings than disliked songs while minimizing the sum of absolute differences.\n6. Output the new permutation q for each test case.\n\n# [edge case]\n    Test case with all songs liked:\n    Input: 3, 3 1 2, 111\n    Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with all songs disliked:\n    Input: 3, 3 1 2, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 4 1 3 2\n    Explanation: Liked songs (indices 1 and 3) should have higher ratings than disliked songs (indices 2 and 4).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes and dislikes will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement focuses on developing a song recommendation module that re-evaluates song ratings based on user feedback. The challenge is to ensure liked songs have higher ratings than disliked ones while minimizing the difference between predicted and re-evaluated ratings. Efficient algorithms are necessary to handle large inputs and multiple test cases.\nrequirement pool:\n- Develop the song recommendation algorithm.\n- Ensure liked songs have higher ratings than disliked ones.\n- Optimize for large input sizes and multiple test cases.\n- Minimize the sum of absolute differences between predicted and re-evaluated ratings.\n- Enhance user interface for better engagement.\nWe will implement an efficient algorithm to re-evaluate song ratings based on user feedback. The algorithm will ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. We will use sorting and indexing techniques to achieve this efficiently, given the constraints on input size.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings are unique and every integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its distance from zero on the number line, without considering direction. In this requirement, it is used to calculate the difference between predicted and re-evaluated ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by ensuring that indices corresponding to liked songs have higher values than those corresponding to disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation that minimizes the sum of absolute differences between predicted and re-evaluated ratings. In code, this can be implemented by sorting and assigning values in a way that minimizes these differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n, the permutation p, and the string s.\n3. Separate indices of liked and disliked songs based on s.\n4. Sort the indices of liked songs in descending order and disliked songs in ascending order.\n5. Assign the highest available ratings to liked songs and lowest to disliked songs.\n6. Calculate the permutation q such that the sum of absolute differences is minimized.\n7. Output the permutation q for each test case.\n\n# [edge case]\n    Test case with all songs liked: \n    Input: 3, 3 1 2, 111\n    Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with all songs disliked:\n    Input: 3, 3 1 2, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 4 1 3 2\n    Explanation: Liked songs (indices 0 and 2) should have higher ratings than disliked ones (indices 1 and 3).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic handles all cases by sorting and assigning ratings based on likes and dislikes efficiently.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between original and new ratings. The algorithm should be efficient to handle large inputs, as the sum of n over all test cases can reach up to 200,000.\nrequirement pool:\n- Develop an efficient algorithm to re-evaluate song ratings based on user feedback.\n- Ensure the new ratings form a valid permutation.\n- Minimize the sum of absolute differences between original and new ratings.\n- Optimize the algorithm for large input sizes.\n- Provide multiple valid outputs if possible.\nWe will use a sorting-based approach to efficiently re-evaluate song ratings. By separating liked and disliked songs, we can assign the highest available ratings to liked songs and the lowest to disliked ones, ensuring the permutation condition is met. The algorithm will leverage Python's built-in sorting capabilities to handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the ratings are unique and every integer from 1 to n appears exactly once.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value, regardless of its sign. Here, it is used to calculate the difference between the original and new ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that the new rating for liked songs should be higher than for disliked songs. In code, this can be implemented by ensuring that all liked songs have higher indices in the sorted list than disliked ones.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation that minimizes the sum of absolute differences between the original and new ratings. In code, this can be achieved by sorting and assigning ratings in a way that minimizes these differences.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case:\n   - Read n, the number of songs.\n   - Read the permutation p of predicted ratings.\n   - Read the string s representing likes and dislikes.\n3. Separate the indices of liked and disliked songs based on s.\n4. Sort the indices of liked songs in descending order and disliked songs in ascending order.\n5. Assign the highest available ratings to liked songs and the lowest to disliked ones.\n6. Construct the new permutation q based on these assignments.\n7. Output the permutation q for each test case.\n\n# [edge case]\n    Case 1: \n    Input: 1\n           1\n           1\n           0\n    Output: 1\n    Explanation: With only one song that is disliked, it retains its original rating.\n\n    Case 2:\n    Input: 1\n           3\n           3 2 1\n           000\n    Output: 1 2 3\n    Explanation: All songs are disliked, so they can be assigned any permutation, but the smallest sum of differences is achieved by keeping them in ascending order.\n\n    Case 3:\n    Input: 1\n           3\n           1 2 3\n           111\n    Output: 1 2 3\n    Explanation: All songs are liked, so they retain their original order for minimal difference.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of sorting and assigning ratings based on likes and dislikes inherently handles these scenarios.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The module should ensure that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. Efficient algorithms are necessary to handle large inputs, and the solution should be robust enough to pass multiple test cases.\nrequirement pool:\n- Develop the song recommendation algorithm.\n- Ensure liked songs have higher ratings than disliked ones.\n- Optimize the algorithm for large datasets.\n- Create a visually appealing and responsive UI.\n- Support local artists in the recommendation system.\nWe will use a greedy algorithm to solve the problem efficiently. The idea is to separate the songs into two groups based on Monocarp's feedback: liked and disliked. We will assign the highest available ratings to liked songs and the lowest available ratings to disliked songs. This ensures that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences between predicted and re-evaluated ratings. The algorithm will be implemented using Python, leveraging efficient sorting and list manipulation techniques.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this context, it means that the predicted ratings and the re-evaluated ratings are both unique sequences of numbers from 1 to n.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value. Here, it is used to calculate the difference between predicted and re-evaluated ratings without considering the sign.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that the re-evaluated rating for liked songs should be higher than for disliked songs.\n    'minimum possible': This means we need to find a permutation that minimizes the sum of absolute differences between predicted and re-evaluated ratings.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation with the smallest sum of absolute differences.\n\n# [code logic]\n1. For each test case, read the number of songs, predicted ratings, and Monocarp's feedback.\n2. Separate the indices of liked and disliked songs based on the feedback string.\n3. Sort the predicted ratings.\n4. Assign the highest available ratings to liked songs and the lowest available ratings to disliked songs.\n5. Construct the re-evaluated ratings permutation.\n6. Output the permutation for each test case.\n\n# [edge case]\n    Test case 1: n = 1, p = [1], s = \"0\"\n    Expected output: 1\n    Explanation: With only one song that is disliked, the permutation remains unchanged.\n\n    Test case 2: n = 3, p = [3, 2, 1], s = \"000\"\n    Expected output: 1 2 3\n    Explanation: All songs are disliked, so they can be assigned any permutation. The smallest sum of differences is achieved by sorting them in ascending order.\n\n    Test case 3: n = 3, p = [1, 2, 3], s = \"111\"\n    Expected output: 1 2 3\n    Explanation: All songs are liked, so they can be assigned any permutation. The smallest sum of differences is achieved by keeping them in their original order.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on feedback will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to develop a song recommendation module that re-evaluates song ratings based on user feedback. The solution must ensure that liked songs have higher ratings than disliked ones while minimizing the difference from the original predicted ratings. The algorithm should handle large inputs efficiently.\nrequirement pool:\n- Develop an algorithm to re-evaluate song ratings based on user feedback\n- Ensure the algorithm can handle up to 200,000 songs efficiently\n- Optimize the algorithm to minimize the sum of absolute differences from original ratings\n- Support multiple test cases in a single execution\n- Provide flexibility in output if multiple optimal solutions exist\nWe will implement a function that processes multiple test cases. For each test case, we will separate the songs into liked and disliked categories based on the input string. We will then assign the highest available ratings to the liked songs and the lowest available ratings to the disliked songs. This approach ensures that liked songs have higher ratings than disliked ones while minimizing the sum of absolute differences from the original ratings. We will use sorting and efficient list operations to handle the constraints efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'permutation'\n    Explanation: A permutation is a rearrangement of elements in a particular order. In this requirement, the predicted ratings and the re-evaluated ratings must both be permutations of integers from 1 to n.\n\n    'absolute value'\n    Explanation: The absolute value of a number is its non-negative value without regard to its sign. Here, it is used to calculate the sum of differences between the original and new ratings.\n\n# [phrase showing quantity relationship]\n    'greater than': This indicates that liked songs should have higher ratings than disliked songs. In code, this can be implemented by assigning higher numbers to liked songs and lower numbers to disliked songs.\n\n# [degree adverb]\n    'smallest': This refers to finding the permutation that minimizes the sum of absolute differences between the original and new ratings. In code, this can be achieved by sorting and assigning ratings efficiently.\n\n# [code logic]\n1. Parse the number of test cases.\n2. For each test case:\n   - Parse the number of songs and their predicted ratings.\n   - Parse the like/dislike string.\n   - Separate songs into liked and disliked categories.\n   - Sort the liked songs in descending order and disliked songs in ascending order.\n   - Assign the highest available ratings to liked songs and lowest available ratings to disliked songs.\n   - Ensure the permutation condition is met.\n3. Output the new permutation for each test case.\n\n# [edge case]\n    Test case with all songs liked:\n    Input: 3, 3 1 2, 111\n    Output: 3 1 2\n    Explanation: Since all songs are liked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with all songs disliked:\n    Input: 3, 3 1 2, 000\n    Output: 1 2 3\n    Explanation: Since all songs are disliked, any permutation works, but the one equal to p minimizes the sum of absolute differences.\n\n    Test case with alternating likes and dislikes:\n    Input: 4, 4 3 2 1, 1010\n    Output: 4 1 3 2\n    Explanation: Liked songs (1st and 3rd) get higher ratings than disliked ones (2nd and 4th).\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of sorting and assigning ratings based on likes/dislikes will naturally handle these scenarios.\n"], "scores": [], "pass_results": [false, false, false, false, false, false, true, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 812, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of songs.\n\nThe second line of each testcase contains n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation of the predicted ratings.\n\nThe third line contains a single string s, consisting of n characters. Each character is either a 0 or a 1. 0 means that Monocarp disliked the song, and 1 means that he liked it.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase, print a permutation q \u2014 the re-evaluated ratings of the songs. If there are multiple answers such that \u2211_{i=1}^n |p_i-q_i| is minimum possible, you can print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1 2\n10\n3\n3 1 2\n111\n8\n2 3 1 8 5 4 7 6\n01110001\n\n\nOutput\n\n\n2 1\n3 1 2\n1 6 5 8 3 2 4 7\n\nNote\n\nIn the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1. \u2211_{i=1}^n |p_i-q_i|=|1-2|+|2-1|=2.\n\nIn the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p. Its cost is 0.", "mutate_method": "expand_one2two", "parent_index": 173}
