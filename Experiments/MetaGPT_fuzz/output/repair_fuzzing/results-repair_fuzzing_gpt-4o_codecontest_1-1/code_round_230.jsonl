{"name": "1620_B. Triangles on a Rectangle", "description": "A rectangle with its opposite corners in (0, 0) and (w, h) and sides parallel to the axes is drawn on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that: \n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible. \n\n\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "tags": ["geometry", "greedy", "math"], "difficulty": 8, "id": 1620, "sample_io": [{"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}], "test_list": [{"input": "1\n99 99\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["99\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["25\n70\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "1\n99 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["164\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n42\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n66\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["25\n42\n66\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n91\n42\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n70\n"]}, {"input": "1\n198 164\n2 1 2\n2 3 4\n2 5 6\n2 7 8\n", "output": ["198\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n48\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n70\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n42\n77\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n33\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n117\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n22 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n49\n132\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n42\n66\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 7\n2 2 4\n", "output": ["45\n63\n66\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n182\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n51\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 7\n", "output": ["25\n70\n55\n"]}, {"input": "3\n4 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 4 4\n", "output": ["24\n117\n77\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["25\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 1 5 6\n11 5\n3 1 2 8\n3 2 1 10\n3 0 3 7\n2 2 4\n", "output": ["30\n50\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n56\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n84\n60\n"]}, {"input": "3\n2 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["24\n56\n210\n"]}, {"input": "1\n99 99\n2 1 2\n2 0 4\n2 5 6\n2 7 8\n", "output": ["396\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 7\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["40\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n20 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n60\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["75\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 13\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n156\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["24\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 9\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n54\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 16\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n60\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 6\n", "output": ["32\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 2\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n49\n33\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 1 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 7\n2 2 4\n", "output": ["25\n56\n88\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["50\n42\n77\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 2\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["24\n42\n77\n"]}, {"input": "3\n5 24\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 4\n", "output": ["48\n42\n210\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n49\n66\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 7\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n33\n"]}, {"input": "3\n5 8\n2 1 5\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["32\n91\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 1 3 4\n3 0 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["30\n42\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["24\n70\n44\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n18 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n54\n35\n"]}, {"input": "3\n6 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n21 1\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n42\n63\n"]}, {"input": "3\n9 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 5 8\n2 2 4\n", "output": ["45\n42\n77\n"]}, {"input": "3\n10 8\n2 1 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 2 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["50\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 3\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["25\n63\n33\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n84\n77\n"]}, {"input": "3\n5 8\n2 1 7\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 1\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["48\n42\n35\n"]}, {"input": "3\n5 9\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 3 5 6\n25 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["27\n42\n75\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 2\n3 7 5 6\n9 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n90\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 10\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n60\n182\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 8\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["35\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 16\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["20\n42\n75\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 6\n3 1 4 6\n2 4 5\n0 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["32\n42\n77\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n42\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 12\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n72\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 0 4\n", "output": ["20\n70\n77\n"]}, {"input": "3\n5 8\n2 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n78\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["25\n70\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 8\n2 4 2\n10 7\n2 0 4\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["35\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n84\n72\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 -1 3 4\n2 2 4\n", "output": ["24\n70\n55\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n35\n77\n"]}, {"input": "3\n5 12\n2 2 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 4 16\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n84\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 5\n2 8 5\n10 7\n2 3 9\n2 1 11\n3 1 3 4\n3 8 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 4 4\n2 2 4\n", "output": ["20\n70\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 0\n1 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n16 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n112\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 10\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n26 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["30\n70\n182\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 2 7\n3 1 3 1\n3 4 5 5\n17 5\n3 1 6 8\n3 4 6 8\n3 1 3 3\n2 2 4\n", "output": ["25\n35\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 1\n", "output": ["60\n42\n112\n"]}, {"input": "3\n3 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 2\n3 7 5 6\n21 5\n3 1 6 4\n3 3 6 8\n3 0 3 20\n2 2 3\n", "output": ["24\n56\n420\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 0 4 6\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 5 5\n20 5\n3 2 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["30\n84\n60\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n10 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 4\n", "output": ["40\n49\n80\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 5 9\n2 1 13\n3 1 3 1\n3 4 8 3\n20 5\n3 1 12 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["75\n84\n60\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 16\n2 4 5\n10 7\n2 3 17\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 10 8\n3 1 3 4\n2 2 4\n", "output": ["75\n98\n35\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n33\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 15\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n84\n72\n"]}, {"input": "3\n9 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 4 9\n2 2 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["45\n35\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 11\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n70\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 6\n3 1 6 8\n3 3 6 8\n3 2 2 2\n2 2 4\n", "output": ["32\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 1 3 4\n3 1 4 6\n2 4 0\n10 7\n2 0 9\n2 0 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 7 8\n3 1 3 4\n2 2 7\n", "output": ["25\n63\n55\n"]}, {"input": "1\n53 164\n2 1 2\n2 0 4\n2 5 6\n2 9 8\n", "output": ["656\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 2 4 6\n2 4 5\n1 8\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 3 5\n3 0 3 3\n2 2 4\n", "output": ["24\n48\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n54\n121\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n108\n30\n"]}, {"input": "3\n5 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n56\n39\n"]}, {"input": "3\n5 17\n2 0 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 28\n2 2 7\n3 1 3 4\n3 7 5 6\n12 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["68\n175\n72\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 9\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["40\n98\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 0 3 4\n3 1 4 3\n2 4 7\n10 7\n2 3 4\n2 1 7\n3 1 0 4\n3 1 5 6\n11 5\n3 1 6 8\n3 3 2 8\n3 0 3 3\n2 2 5\n", "output": ["32\n50\n35\n"]}, {"input": "3\n1 12\n2 1 6\n3 2 4 4\n3 1 4 7\n2 4 5\n10 7\n2 3 1\n2 1 7\n3 1 3 4\n3 7 5 6\n16 8\n3 1 6 8\n3 3 11 8\n3 0 3 13\n2 2 1\n", "output": ["60\n42\n208\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n76\n70\n"]}, {"input": "3\n5 8\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["32\n42\n65\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 0\n3 1 4 6\n2 4 1\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n8 4\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 0 4\n", "output": ["25\n42\n32\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 0 6\n2 4 5\n18 7\n2 3 15\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 12\n2 1 4\n", "output": ["36\n84\n121\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 7\n3 4 5 6\n11 5\n3 1 6 0\n3 3 10 8\n3 2 5 4\n2 2 6\n", "output": ["32\n60\n44\n"]}, {"input": "3\n10 8\n2 1 2\n3 3 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 9\n3 1 3 4\n3 4 5 1\n13 5\n3 1 6 2\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["50\n56\n39\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 0 10\n3 0 3 8\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 5\n3 1 3 7\n2 2 4\n", "output": ["25\n80\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 11\n2 8 5\n10 7\n2 3 3\n2 1 15\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 1 4\n2 2 4\n", "output": ["50\n98\n35\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n19 7\n2 3 10\n2 1 7\n3 -1 3 4\n3 4 6 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 4 7\n2 4 4\n", "output": ["25\n95\n70\n"]}, {"input": "3\n5 1\n2 0 4\n3 1 3 4\n3 1 4 9\n2 4 2\n20 7\n2 3 10\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 0 6 8\n3 3 6 8\n3 2 4 4\n2 4 1\n", "output": ["40\n80\n80\n"]}, {"input": "1\n53 202\n2 1 2\n2 0 4\n2 3 6\n2 9 8\n", "output": ["808\n"]}, {"input": "3\n5 4\n2 1 4\n3 0 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 2 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 14\n3 4 6 1\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n65\n"]}, {"input": "3\n5 13\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n4 18\n2 3 9\n2 1 7\n3 2 3 4\n3 4 5 6\n11 5\n3 2 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["39\n108\n30\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 1 4\n3 7 5 6\n16 6\n3 2 6 0\n3 3 11 8\n3 0 3 6\n2 2 1\n", "output": ["36\n42\n96\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 8\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 0\n3 4 5 6\n14 5\n3 1 6 8\n3 4 6 5\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n77\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 17\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 4\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 7 8\n3 3 11 8\n3 1 3 7\n2 2 0\n", "output": ["51\n42\n66\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 6 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 1\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 3\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 2 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 3 5 6\n14 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n42\n"]}, {"input": "3\n5 8\n2 1 1\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 8 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 1 10\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 13\n2 3 7\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n78\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 12\n3 3 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 2 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n2 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n147\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 3\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n70\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 0 6 8\n3 0 3 4\n2 2 0\n", "output": ["25\n42\n44\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 5\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 7\n2 2 2\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 3 4\n3 2 4 6\n2 4 5\n10 7\n2 3 13\n2 1 7\n2 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 4\n2 2 4\n", "output": ["20\n70\n44\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 4 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 6 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 12\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 3\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["25\n42\n77\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 5 9\n2 1 7\n3 1 3 4\n3 4 5 5\n11 5\n3 1 6 8\n3 4 6 8\n3 0 3 3\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 7\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n16 5\n3 1 6 8\n3 3 11 8\n3 0 3 7\n2 2 4\n", "output": ["36\n42\n112\n"]}, {"input": "3\n5 12\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n21 5\n3 1 6 8\n3 3 6 8\n3 0 3 10\n2 2 3\n", "output": ["25\n42\n210\n"]}, {"input": "3\n5 8\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 5\n12 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 6\n3 2 3 4\n2 2 4\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 8\n2 0 2\n3 2 3 4\n3 1 4 6\n2 4 7\n10 7\n2 3 9\n2 1 7\n3 1 0 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 0 3 3\n2 2 5\n", "output": ["25\n42\n35\n"]}, {"input": "3\n5 12\n2 1 4\n3 2 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 7 5 6\n11 5\n3 0 6 8\n3 3 11 8\n3 1 6 7\n2 2 4\n", "output": ["36\n42\n66\n"]}, {"input": "3\n5 8\n2 1 2\n3 2 0 4\n3 1 8 10\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 12\n3 4 6 8\n3 1 3 4\n2 2 4\n", "output": ["45\n42\n55\n"]}, {"input": "3\n5 8\n3 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 14\n3 1 3 5\n3 4 5 11\n11 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n91\n77\n"]}, {"input": "3\n5 8\n2 0 4\n3 2 3 4\n3 0 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 6 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n42\n35\n"]}, {"input": "3\n5 8\n3 1 0\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 3\n2 1 7\n3 1 3 4\n3 4 5 11\n18 5\n3 1 6 8\n3 3 6 8\n3 0 5 7\n2 2 4\n", "output": ["25\n70\n126\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 0 2\n10 7\n2 0 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 2 3 4\n2 2 4\n", "output": ["32\n63\n35\n"]}, {"input": "3\n5 8\n2 0 4\n3 1 3 4\n3 1 4 6\n2 4 2\n10 7\n2 3 9\n2 1 7\n3 0 3 4\n3 4 5 6\n11 10\n3 1 6 8\n3 3 6 8\n3 2 6 4\n2 2 4\n", "output": ["32\n42\n70\n"]}], "task_id": "codecontest/148", "prompt": "A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Make sure that your solution optimally handles each possible configuration of point distribution along the rectangle sides.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "repair_prompt": ["A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Make sure that your solution optimally handles each possible configuration of point distribution along the rectangle sides.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane.\n\nYou are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Additionally, you should note that there are at least two points on every side of a rectangle. Also, there are at least two points on every side of a rectangle.\n\nYour task is to choose three points in such a way that:\n\n  * exactly two of them belong to the same side of a rectangle; \n  * the area of a triangle formed by them is maximum possible.\n\nPrint the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Make sure that your solution optimally handles each possible configuration of point distribution along the rectangle sides.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "A rectangle with its opposite corners at (0, 0) and (w, h) and whose sides are parallel to the axes is sketched on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner, and there are at least two points on every side of a rectangle. Your task is to choose three points in such a way that: * exactly two of them belong to the same side of a rectangle; * the area of a triangle formed by them is maximum possible. Print the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer. Make sure that your solution optimally handles each possible configuration of point distribution along the rectangle sides.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6)."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: List of maximum doubled areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area using two points from the same side and one from another side\n        max_area = 0\n\n        # Check horizontal sides\n        max_area = max(max_area, (x1[-1] - x1[0]) * h)  # Bottom side\n        max_area = max(max_area, (x2[-1] - x2[0]) * h)  # Top side\n\n        # Check vertical sides\n        max_area = max(max_area, (y1[-1] - y1[0]) * w)  # Left side\n        max_area = max(max_area, (y2[-1] - y2[0]) * w)  # Right side\n\n        results.append(max_area)\n\n    return results\n\n# Input interface\ndef main():\n    \"\"\"Main function to read input, process test cases, and output results.\"\"\"\n    # Read number of test cases\n    t = int(input())\n\n    # Initialize list to store test cases\n    test_cases = []\n\n    # Read each test case\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Call the function and print results\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\n# Program entry point\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the doubled maximum area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - horizontal_bottom (List[int]): x-coordinates of points on the bottom side.\n            - horizontal_top (List[int]): x-coordinates of points on the top side.\n            - vertical_left (List[int]): y-coordinates of points on the left side.\n            - vertical_right (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: List of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum base and height for each side configuration\n        max_area = 0\n\n        # Bottom side\n        bottom_base = horizontal_bottom[-1] - horizontal_bottom[0]\n        max_area = max(max_area, bottom_base * h)\n\n        # Top side\n        top_base = horizontal_top[-1] - horizontal_top[0]\n        max_area = max(max_area, top_base * h)\n\n        # Left side\n        left_height = vertical_left[-1] - vertical_left[0]\n        max_area = max(max_area, left_height * w)\n\n        # Right side\n        right_height = vertical_right[-1] - vertical_right[0]\n        max_area = max(max_area, right_height * w)\n\n        results.append(max_area)\n\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        horizontal_bottom = list(map(int, input().split()))[1:]\n        horizontal_top = list(map(int, input().split()))[1:]\n        vertical_left = list(map(int, input().split()))[1:]\n        vertical_right = list(map(int, input().split()))[1:]\n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n\n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the doubled maximum area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: List of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum separation on horizontal sides\n        max_horizontal_area = max(x1[-1] - x1[0], x2[-1] - x2[0]) * h\n        \n        # Calculate maximum separation on vertical sides\n        max_vertical_area = max(y1[-1] - y1[0], y2[-1] - y2[0]) * w\n        \n        # Determine the maximum doubled area\n        max_doubled_area = max(max_horizontal_area, max_vertical_area)\n        \n        results.append(max_doubled_area)\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    results = max_doubled_area(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n\n        # Calculate maximum base for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n\n        # Calculate potential maximum doubled areas\n        max_area_horizontal = max(max_base_bottom, max_base_top) * h\n        max_area_vertical = max(max_base_left, max_base_right) * w\n\n        # Determine the maximum doubled area\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of maximum doubled areas for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base lengths for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n        \n        # Calculate maximum base lengths for vertical sides\n        max_base_left = y1[-1] - y1[0]\n        max_base_right = y2[-1] - y2[0]\n        \n        # Calculate potential maximum doubled areas\n        max_area_horizontal = max(max_base_bottom, max_base_top) * h\n        max_area_vertical = max(max_base_left, max_base_right) * w\n        \n        # Determine the maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        # Append the result for this test case\n        results.append(max_doubled_area)\n    \n    return results\n\n# Input interface\ndef main():\n    # Read number of test cases\n    t = int(input().strip())\n    \n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        w, h = map(int, input().strip().split())\n        k1 = int(input().strip())\n        x1 = list(map(int, input().strip().split()))\n        k2 = int(input().strip())\n        x2 = list(map(int, input().strip().split()))\n        k3 = int(input().strip())\n        y1 = list(map(int, input().strip().split()))\n        k4 = int(input().strip())\n        y2 = list(map(int, input().strip().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Calculate results\n    results = max_doubled_area(t, test_cases)\n    \n    # Output results\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of maximum doubled areas for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum doubled area for horizontal sides\n        max_area_horizontal = max(\n            (x1[-1] - x1[0]) * h,  # Bottom side\n            (x2[-1] - x2[0]) * h   # Top side\n        )\n        \n        # Calculate maximum doubled area for vertical sides\n        max_area_vertical = max(\n            (y1[-1] - y1[0]) * w,  # Left side\n            (y2[-1] - y2[0]) * w   # Right side\n        )\n        \n        # The maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        # Append the result for this test case\n        results.append(max_doubled_area)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): x-coordinates of points on the bottom side.\n            - x2 (List[int]): x-coordinates of points on the top side.\n            - y1 (List[int]): y-coordinates of points on the left side.\n            - y2 (List[int]): y-coordinates of points on the right side.\n\n    Returns:\n        List[int]: A list of integers representing the maximum doubled area for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base for horizontal sides\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n        \n        # Calculate maximum height for vertical sides\n        max_height_left = y1[-1] - y1[0]\n        max_height_right = y2[-1] - y2[0]\n        \n        # Calculate maximum doubled area for each configuration\n        max_area_horizontal = max(max_base_bottom, max_base_top) * h\n        max_area_vertical = max(max_height_left, max_height_right) * w\n        \n        # Determine the maximum doubled area for this test case\n        max_doubled_area = max(max_area_horizontal, max_area_vertical)\n        \n        # Append the result for this test case\n        results.append(max_doubled_area)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = []\nfor _ in range(n):\n    w, h = map(int, input().split())\n    k1 = int(input())\n    x1 = list(map(int, input().split()))\n    k2 = int(input())\n    x2 = list(map(int, input().split()))\n    k3 = int(input())\n    y1 = list(map(int, input().split()))\n    k4 = int(input())\n    y2 = list(map(int, input().split()))\n    test_cases.append((w, h, x1, x2, y1, y2))\n\n# Output interface\nresults = max_doubled_area(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_triangle_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples where each tuple contains:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom side (y=0).\n            - x2 (List[int]): Points on the top side (y=h).\n            - y1 (List[int]): Points on the left side (x=0).\n            - y2 (List[int]): Points on the right side (x=w).\n\n    Returns:\n        List[int]: A list of integers representing the doubled maximum area for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base or height for each side\n        max_base_bottom = x1[-1] - x1[0]\n        max_base_top = x2[-1] - x2[0]\n        max_height_left = y1[-1] - y1[0]\n        max_height_right = y2[-1] - y2[0]\n\n        # Calculate potential doubled areas using these maximum bases and heights\n        max_area_bottom = max_base_bottom * h\n        max_area_top = max_base_top * h\n        max_area_left = max_height_left * w\n        max_area_right = max_height_right * w\n\n        # Find the maximum doubled area for the current test case\n        max_doubled_area = max(max_area_bottom, max_area_top, max_area_left, max_area_right)\n        results.append(max_doubled_area)\n\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n\n    # Output interface\n    results = max_doubled_triangle_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the maximum doubled area of a triangle formed by lattice points on rectangle sides.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            List of test cases, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - x1 (List[int]): Points on the bottom horizontal side.\n            - x2 (List[int]): Points on the top horizontal side.\n            - y1 (List[int]): Points on the left vertical side.\n            - y2 (List[int]): Points on the right vertical side.\n\n    Returns:\n        List[int]: List of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n    \n    for w, h, x1, x2, y1, y2 in test_cases:\n        # Calculate maximum base length for horizontal sides\n        max_base_horizontal_1 = x1[-1] - x1[0]\n        max_base_horizontal_2 = x2[-1] - x2[0]\n        \n        # Calculate maximum base length for vertical sides\n        max_base_vertical_1 = y1[-1] - y1[0]\n        max_base_vertical_2 = y2[-1] - y2[0]\n        \n        # Calculate maximum area for triangles using these bases\n        max_area_horizontal_1 = max_base_horizontal_1 * h\n        max_area_horizontal_2 = max_base_horizontal_2 * h\n        max_area_vertical_1 = max_base_vertical_1 * w\n        max_area_vertical_2 = max_base_vertical_2 * w\n        \n        # Find the maximum area and double it\n        max_area = max(max_area_horizontal_1, max_area_horizontal_2, max_area_vertical_1, max_area_vertical_2)\n        doubled_max_area = max_area * 2\n        \n        results.append(doubled_max_area)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        k1 = int(input())\n        x1 = list(map(int, input().split()))\n        k2 = int(input())\n        x2 = list(map(int, input().split()))\n        k3 = int(input())\n        y1 = list(map(int, input().split()))\n        k4 = int(input())\n        y2 = list(map(int, input().split()))\n        test_cases.append((w, h, x1, x2, y1, y2))\n    \n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef max_doubled_area(t: int, test_cases: List[Tuple[int, int, List[int], List[int], List[int], List[int]]]) -> List[int]:\n    \"\"\"Calculate the doubled maximum area of a triangle formed by three points on the sides of a rectangle.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, List[int], List[int], List[int], List[int]]]): \n            A list of tuples, each containing:\n            - w (int): Width of the rectangle.\n            - h (int): Height of the rectangle.\n            - horizontal_bottom (List[int]): Points on the bottom horizontal side.\n            - horizontal_top (List[int]): Points on the top horizontal side.\n            - vertical_left (List[int]): Points on the left vertical side.\n            - vertical_right (List[int]): Points on the right vertical side.\n\n    Returns:\n        List[int]: A list of doubled maximum areas for each test case.\n    \"\"\"\n    results = []\n\n    for w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right in test_cases:\n        # Calculate maximum area for each side configuration\n        max_area = 0\n\n        # Bottom side\n        if len(horizontal_bottom) >= 2:\n            max_area = max(max_area, (horizontal_bottom[-1] - horizontal_bottom[0]) * h)\n\n        # Top side\n        if len(horizontal_top) >= 2:\n            max_area = max(max_area, (horizontal_top[-1] - horizontal_top[0]) * h)\n\n        # Left side\n        if len(vertical_left) >= 2:\n            max_area = max(max_area, (vertical_left[-1] - vertical_left[0]) * w)\n\n        # Right side\n        if len(vertical_right) >= 2:\n            max_area = max(max_area, (vertical_right[-1] - vertical_right[0]) * w)\n\n        # Append the doubled maximum area\n        results.append(max_area)\n\n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = []\n    for _ in range(n):\n        w, h = map(int, input().split())\n        horizontal_bottom = list(map(int, input().split()[1:]))\n        horizontal_top = list(map(int, input().split()[1:]))\n        vertical_left = list(map(int, input().split()[1:]))\n        vertical_right = list(map(int, input().split()[1:]))\n        test_cases.append((w, h, horizontal_bottom, horizontal_top, vertical_left, vertical_right))\n\n    # Output interface\n    results = max_doubled_area(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires selecting three points on the rectangle's sides such that two points are on the same side, and the area of the triangle formed is maximized. The solution must efficiently handle up to 200,000 points across all test cases, ensuring optimal performance and accuracy.\nrequirement pool:\n- Efficiently process up to 10,000 test cases.\n- Accurately calculate the maximum triangle area.\n- Optimize the solution for large input sizes.\n- Ensure the solution handles edge cases.\n- Provide clear and concise output for each test case.\nWe will implement a function that calculates the maximum doubled area of a triangle formed by three points on the sides of a rectangle. The function will efficiently handle large input sizes by leveraging the properties of lattice points and the geometry of rectangles. We will use Python's built-in functions and data structures to ensure optimal performance and accuracy.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle sides'\n    Explanation: The points are located on the sides of a rectangle, not at the corners, and the task is to form a triangle with maximum area using these points.\n\n    'doubled area'\n    Explanation: The requirement asks for the doubled area of the triangle formed by the points, which is an integer value.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that there are enough points to form a triangle.\n    Implementation: Ensure that each side has at least two points before attempting to form triangles.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the triangle with the largest possible area using the given points.\n    Implementation: Calculate the area for all possible triangles and select the one with the largest area.\n\n# [code logic]\n1. Parse the input to extract rectangle dimensions and points on each side.\n2. For each test case, identify pairs of points on each side.\n3. Calculate potential triangles using two points from one side and one point from another side.\n4. Compute the area of each triangle and keep track of the maximum doubled area found.\n5. Output the maximum doubled area for each test case.\n\n# [edge case]\n    Case 1: Minimum number of points on each side\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 6\n    Explanation: The simplest configuration with minimum points, forming a triangle with maximum area.\n\n    Case 2: All points on one side\n    Input: 5 5\n           5 1 2 3 4 5\n           2 1 4\n           2 1 4\n           2 1 4\n    Expected Output: 20\n    Explanation: Points concentrated on one side, forming a triangle with maximum base length.\n\n    Case 3: Points evenly distributed\n    Input: 6 6\n           3 1 3 5\n           3 1 3 5\n           3 1 3 5\n           3 1 3 5\n    Expected Output: 30\n    Explanation: Points evenly distributed across sides, forming a balanced triangle.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating all possible triangles and selecting the maximum area will naturally handle these scenarios.\n", "requirement analysis:\nThe task requires calculating the maximum possible area of a triangle formed by three points on the sides of a rectangle, with two points on the same side. The solution must handle large input sizes efficiently and ensure accurate calculations. The constraints on the number of points and test cases necessitate an optimized approach.\nrequirement pool:\n- Efficiently handle up to 10^4 test cases.\n- Accurately calculate the maximum triangle area.\n- Optimize performance for input sizes up to 2 \u22c5 10^5 points.\n- Ensure the solution is scalable and maintainable.\n- Provide clear and concise output for each test case.\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is on the opposite side, forming a large base and height. We will iterate over each side and calculate the potential maximum area using the distance between the farthest points on the same side and the distance to the farthest point on the opposite side. This approach ensures efficient handling of large input sizes.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'maximum area'\n    Explanation: The problem involves a rectangle defined by its corners and sides parallel to the axes. Lattice points are integer-coordinate points on the sides of the rectangle. The task is to form a triangle using three points such that two are on the same side, and the area of this triangle is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible': The goal is to find the configuration of points that results in the largest possible area for the triangle.\n    Implementation: Calculate the area using the formula for a triangle, maximizing the base and height.\n\n# [degree adverb]\n    'maximum': Refers to the largest possible area of the triangle formed by the points.\n    Implementation: Use mathematical calculations to determine the largest area by considering the farthest points on one side and the farthest point on the opposite side.\n\n# [code logic]\n    1. For each test case, read the dimensions of the rectangle and the points on each side.\n    2. For each side, calculate the potential maximum area by considering:\n       - The distance between the farthest two points on the same side (base).\n       - The distance to the farthest point on the opposite side (height).\n    3. Use these distances to calculate the area of the triangle.\n    4. Return the doubled maximum area for each test case.\n\n# [edge case]\n    Case 1: Minimum number of points on each side\n    Explanation: With only two points on each side, ensure that calculations handle this scenario correctly.\n    \n    Case 2: All points are equidistant\n    Explanation: Check if equidistant points affect the calculation of maximum area.\n    \n    Case 3: Points form a straight line\n    Explanation: Ensure that when points form a straight line, the area calculation correctly results in zero.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic should handle these scenarios by considering all possible configurations of points and calculating areas accordingly.\n", "requirement analysis:\nThe task requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must efficiently handle up to 200,000 points across multiple test cases, ensuring optimal performance and accuracy.\nrequirement pool:\n- Efficiently handle up to 200,000 points across multiple test cases.\n- Accurately calculate the maximum possible area of a triangle.\n- Optimize the algorithm for performance.\n- Ensure the solution is scalable for large input sizes.\n- Provide clear and concise output for each test case.\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by lattice points on the sides of a rectangle. The key observation is that the maximum area is achieved by selecting two points on the same side with the maximum distance between them and a third point on the opposite side. This can be efficiently calculated by considering the maximum and minimum coordinates on each side. We will use Python's built-in functions to handle input and output efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'maximum area'\n    Explanation: The problem involves a rectangle defined by its corners and sides parallel to the axes. Lattice points are integer-coordinate points lying on the sides of the rectangle. The task is to form a triangle using these points such that two points are on the same side, and the area of the triangle is maximized.\n\n# [phrase showing quantity relationship]\n    'maximum possible': The goal is to find the largest possible area of a triangle formed by the points.\n    Implementation: Calculate the area using the formula for a triangle and maximize it by choosing points with maximum separation on one side and a point on the opposite side.\n\n# [degree adverb]\n    'maximum': Refers to the largest area achievable by any triangle formed under the given conditions.\n    Implementation: Use mathematical calculations to determine the maximum area by evaluating all possible combinations of points.\n\n# [code logic]\n    1. For each test case, read the dimensions of the rectangle and the points on each side.\n    2. For each side, calculate the maximum distance between two points.\n    3. Use these distances to calculate potential triangle areas with a point from an opposite side.\n    4. Return the doubled maximum area for each test case.\n\n# [edge case]\n    Edge Case 1: Minimum number of points on each side (2 points).\n    Explanation: With only two points per side, the maximum area is straightforward to calculate as there are limited combinations.\n    \n    Edge Case 2: All points on one side are equidistant.\n    Explanation: This tests if the code correctly identifies maximum separation even when distances are uniform.\n    \n    Edge Case 3: Large values for w and h with maximum k.\n    Explanation: Tests efficiency and correctness under constraints with large input sizes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating maximum separation and using it to form triangles inherently handles these scenarios efficiently.\n", "requirement analysis:\nThe task requires selecting three points from a set of lattice points on the sides of a rectangle to form a triangle with the maximum possible area. The solution must efficiently handle large input sizes and ensure the output is an integer representing the doubled area of the triangle.\nrequirement pool:\n- Efficiently process up to 10,000 test cases\n- Accurately calculate the maximum triangle area\n- Optimize performance for large input sizes\n- Ensure solution handles edge cases correctly\n- Provide clear and consistent output format\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is on the opposite side, forming a large base and height. We will iterate over each side, calculate potential areas, and keep track of the maximum area found. The solution will efficiently handle large input sizes by leveraging simple arithmetic operations and comparisons.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of the rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed with points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The task is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the list of points on each side.\n2. For each side, calculate the potential maximum area by considering the farthest two points on that side as the base and using a point from the opposite side as the height.\n3. Calculate the area for each configuration and keep track of the maximum area found.\n4. Return the doubled maximum area for each test case.\n\n# [edge case]\n    Edge Case 1: \n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Expected Output: 4\n    Explanation: The largest triangle is formed by points (0, 1), (0, 2), and (3, 2) with a doubled area of 4.\n\n    Edge Case 2:\n    Input: 4 4\n           2 1 3\n           2 1 3\n           2 1 3\n           2 1 3\n    Expected Output: 8\n    Explanation: The largest triangle is formed by points (0, 1), (0, 3), and (4, 3) with a doubled area of 8.\n\n    Edge Case 3:\n    Input: 5 5\n           2 2 4\n           2 2 4\n           2 2 4\n           2 2 4\n    Expected Output: 12\n    Explanation: The largest triangle is formed by points (0, 2), (0, 4), and (5, 4) with a doubled area of 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of calculating maximum areas by considering farthest points on one side and a point from the opposite side inherently handles these cases.\n", "requirement analysis:\nThe requirements focus on calculating the maximum area of a triangle formed by lattice points on the sides of a rectangle. The solution must handle large input sizes efficiently and provide clear output. Edge cases, such as minimal and maximal point distributions, must be considered.\nrequirement pool:\n- Efficiently compute the maximum area of a triangle for large input sizes.\n- Ensure the output format is clear and concise.\n- Handle edge cases effectively.\n- Optimize performance for varying input sizes.\n- Provide detailed documentation for the solution.\nWe will implement a function that calculates the maximum doubled area of a triangle formed by lattice points on the sides of a rectangle. The function will iterate over the points on each side, calculate potential triangle areas, and keep track of the maximum area found. The solution will be optimized to handle large input sizes efficiently by leveraging the properties of the rectangle and the constraints given.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The area of a triangle formed by lattice points is always an integer when doubled. The task is to find the maximum possible doubled area.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed with points from different sides.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: The goal is to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the list of lattice points on each side.\n2. For each side, calculate the potential maximum base length by taking the difference between the largest and smallest x or y coordinates.\n3. Calculate potential maximum height using the opposite sides.\n4. Compute the doubled area for triangles using these maximum base and height values.\n5. Keep track of the maximum doubled area found for each test case.\n6. Output the maximum doubled area for each test case.\n\n# [edge case]\n    Test case 1:\n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Output: 4\n    Explanation: The largest triangle is formed by points (0, 1), (0, 2), and (3, 2) with a doubled area of 4.\n\n    Test case 2:\n    Input: 4 4\n           2 1 3\n           2 1 3\n           2 1 3\n           2 1 3\n    Output: 8\n    Explanation: The largest triangle is formed by points (0, 1), (0, 3), and (4, 3) with a doubled area of 8.\n\n    Test case 3:\n    Input: 5 5\n           3 1 2 4\n           3 1 3 4\n           3 1 3 4\n           3 1 2 4\n    Output: 12\n    Explanation: The largest triangle is formed by points (0, 1), (0, 4), and (5, 3) with a doubled area of 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible configurations of point distribution along the rectangle sides to find the maximum doubled area.\n", "requirement analysis:\nThe task requires selecting three points such that two are on the same side of a rectangle and the area of the triangle formed is maximized. The solution must handle large input sizes efficiently and ensure accurate calculations. The constraints on the number of points and test cases necessitate an optimized approach.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Accurately calculate the maximum doubled area of a triangle.\n- Optimize performance for large input sizes.\n- Ensure the solution is robust against edge cases.\n- Maintain code readability and simplicity.\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is on the opposite side. We will iterate over each side, calculate the potential maximum area for triangles formed with points on the opposite side, and keep track of the maximum area found. This approach ensures efficient handling of large input sizes by leveraging simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of a rectangle but not at the corners.\n\n    'doubled area'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle will have a minimum of two points, ensuring that a triangle can always be formed.\n\n# [degree adverb] \n    'maximum possible'\n    Explanation: The task is to find the configuration of points that results in the largest possible area for the triangle.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the points on each side.\n2. For each side, calculate the potential maximum area of triangles formed with points on the opposite side.\n3. Use the formula for the area of a triangle with base and height to calculate potential areas.\n4. Keep track of the maximum doubled area found.\n5. Output the maximum doubled area for each test case.\n\n# [edge case] \n    Edge Case 1: Minimum width and height with minimum points\n    Input: \n    1\n    3 3\n    2 1 2\n    2 1 2\n    2 1 2\n    2 1 2\n    Expected Output: 6\n    Explanation: The smallest rectangle with minimum points still forms a valid triangle with doubled area 6.\n\n    Edge Case 2: All points on one side\n    Input:\n    1\n    5 5\n    5 1 2 3 4\n    0\n    0\n    0\n    Expected Output: 0\n    Explanation: If all points are on one side, no valid triangle can be formed, resulting in an area of 0.\n\n    Edge Case 3: Maximum width and height with minimum points\n    Input:\n    1\n    1000000 1000000\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    Expected Output: 999999000000\n    Explanation: The largest possible rectangle with minimum points forms a triangle with maximum doubled area.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible configurations of point distribution along the rectangle sides.\n", "requirement analysis:\nThe task requires calculating the maximum possible area of a triangle formed by three points on the sides of a rectangle, with the constraint that exactly two points must be on the same side. The solution must handle large input sizes efficiently and ensure accurate results.\nrequirement pool:\n- Efficiently process up to 10,000 test cases\n- Accurately calculate the maximum triangle area\n- Optimize for performance with large numbers of points\n- Ensure the solution is scalable\n- Provide clear and concise output\nWe will use a straightforward approach to calculate the maximum possible area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved by selecting the two farthest points on one side and the farthest point on the opposite side. This approach ensures that the area is maximized by leveraging the maximum possible base and height of the triangle. We will iterate over each test case, calculate the potential maximum area for each side, and then determine the overall maximum for each test case. This approach is efficient and handles the constraints well.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'doubled area'\n    Explanation: The problem involves a rectangle defined by its corners and sides, lattice points that lie on the sides of the rectangle, and forming a triangle using these points. The goal is to find the maximum possible area of such a triangle and return its doubled value.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side': This means each side of the rectangle has a minimum of two lattice points.\n    'maximum possible': This indicates the need to find the largest area achievable by the triangle formed by the points.\n    Implementation: Use the farthest points on one side and the farthest point on the opposite side to maximize the base and height of the triangle.\n\n# [degree adverb]\n    'maximum': Refers to the largest area that can be achieved by the triangle formed by the points.\n    Implementation: Calculate areas for different configurations and select the largest one.\n\n# [code logic]\n1. Parse input to extract dimensions of the rectangle and coordinates of points on each side.\n2. For each test case, calculate potential maximum areas for triangles formed by:\n   - Two farthest points on one horizontal side and one farthest point on the opposite vertical side.\n   - Two farthest points on one vertical side and one farthest point on the opposite horizontal side.\n3. Compare calculated areas to find the maximum doubled area for each test case.\n4. Output the maximum doubled area for each test case.\n\n# [edge case]\n    Test case with minimum dimensions and points:\n    3 3\n    2 1 2\n    2 1 2\n    2 1 2\n    2 1 2\n    Expected output: 6\n    Explanation: The largest triangle is formed by points (0, 1), (0, 2), and (3, 2) with an area of 3, doubled to 6.\n\n    Test case with all points on one side:\n    5 5\n    5 1 2 3 4\n    2 1 4\n    2 1 4\n    Expected output: 20\n    Explanation: The largest triangle is formed by points (0, 1), (0, 4), and (5, 4) with an area of 10, doubled to 20.\n\n    Test case with maximum dimensions:\n    1000000 1000000\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    2 1 999999\n    Expected output: 1999998000000\n    Explanation: The largest triangle is formed by points (0, 1), (0, 999999), and (1000000, 999999) with an area of 999999000000, doubled to 1999998000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of finding the maximum area using farthest points on opposite sides inherently handles these cases.\n", "requirement analysis:\nThe task requires calculating the maximum possible area of a triangle formed by three points on the sides of a rectangle, with two points on the same side. The solution must efficiently handle up to 10,000 test cases and a total of 200,000 points across all test cases. The algorithm should be optimized for both time and space complexity to ensure quick execution and accurate results.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Accurately calculate the maximum possible triangle area.\n- Optimize the algorithm for large input sizes.\n- Ensure the solution is robust against edge cases.\n- Provide clear and concise output for each test case.\nWe will implement a function that calculates the maximum possible area of a triangle formed by three points on the sides of a rectangle, with two points on the same side. The approach involves iterating over the points on each side of the rectangle and calculating potential triangle areas using the formula for the area of a triangle given its vertices. We will use the properties of lattice points and the rectangle's geometry to optimize the calculation. The solution will efficiently handle up to 10,000 test cases and a total of 200,000 points across all test cases by focusing on the largest possible base and height combinations for the triangles.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of the rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The area of a triangle formed by lattice points is always an integer when doubled. This means we need to calculate the area and multiply it by 2 for the output.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means each side of the rectangle has a minimum of two points, ensuring that a triangle can always be formed.\n\n# [degree adverb]\n    'maximum possible'\n    Explanation: We need to find the largest possible area of a triangle that can be formed under the given conditions.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle and the points on each side.\n2. For each side, calculate the potential maximum base or height by taking the difference between the largest and smallest point coordinates.\n3. Calculate potential triangle areas using these maximum bases and heights with a point from an adjacent side.\n4. The doubled area of the triangle is calculated as base * height.\n5. Return the maximum doubled area found for each test case.\n\n# [edge case]\n    Test case 1: \n    Input: 3 3\n           2 1 2\n           2 1 2\n           2 1 2\n           2 1 2\n    Output: 4\n    Explanation: The maximum triangle is formed by points (0,1), (0,2), and (3,2) with a doubled area of 4.\n\n    Test case 2:\n    Input: 4 4\n           2 1 3\n           2 1 3\n           2 1 3\n           2 1 3\n    Output: 8\n    Explanation: The maximum triangle is formed by points (0,1), (0,3), and (4,3) with a doubled area of 8.\n\n    Test case 3:\n    Input: 5 5\n           3 1 2 4\n           3 1 3 4\n           3 1 3 4\n           3 1 2 4\n    Output: 12\n    Explanation: The maximum triangle is formed by points (0,1), (0,4), and (5,3) with a doubled area of 12.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already considers all possible configurations of point distribution along the rectangle sides to find the maximum possible area.\n", "requirement analysis:\nThe task requires calculating the maximum possible area of a triangle formed by three points on the sides of a rectangle, with two points on the same side. The solution must efficiently handle large input sizes and ensure accurate results across multiple test cases. The algorithm should be optimized for performance and handle edge cases effectively.\nrequirement pool:\n- Efficiently process up to 10,000 test cases\n- Accurately calculate the maximum triangle area\n- Optimize performance for large input sizes\n- Ensure solution handles edge cases correctly\n- Maintain code readability and ease of maintenance\nWe will iterate through each test case and for each side of the rectangle, calculate the maximum possible base length. The maximum area of the triangle is determined by the longest base and the height of the rectangle. We will use the formula for the area of a triangle (base * height / 2) and double it to get the required output. This approach ensures that we efficiently handle large input sizes by focusing on the longest possible base for each side.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'lattice points'\n    Explanation: Lattice points are points with integer coordinates. In this problem, they lie on the sides of the rectangle but not at the corners.\n\n    'doubled area of a triangle'\n    Explanation: The problem requires calculating the area of a triangle formed by three points and then doubling it. This is because the doubled area of any triangle formed by lattice points is always an integer.\n\n# [phrase showing quantity relationship]\n    'at least two points on every side'\n    Explanation: This means that each side of the rectangle has a minimum of two points, ensuring that a triangle can be formed with points from different sides.\n\n    'maximum possible'\n    Explanation: We need to find the configuration of points that results in the largest possible area for the triangle.\n\n# [degree adverb]\n    'maximum'\n    Explanation: The goal is to find the largest possible area for the triangle formed by the points.\n\n# [code logic]\n1. For each test case, read the dimensions of the rectangle (w, h).\n2. For each side, read the number of points and their coordinates.\n3. Calculate the maximum possible base length for each side:\n   - For horizontal sides, the base is the difference between the largest and smallest x-coordinates.\n   - For vertical sides, the base is the difference between the largest and smallest y-coordinates.\n4. Calculate the maximum area for triangles using these bases:\n   - For horizontal sides, use the height of the rectangle as the height of the triangle.\n   - For vertical sides, use the width of the rectangle as the height of the triangle.\n5. Double the maximum area found and store it as the result for that test case.\n6. Output the results for all test cases.\n\n# [edge case]\n    Test case with minimum values:\n    1 1\n    2 0 1\n    2 0 1\n    2 0 1\n    2 0 1\n    = 0\n    Explanation: The rectangle is essentially a line, so no valid triangle can be formed.\n\n    Test case with all points on one side:\n    5 5\n    5 1 2 3 4\n    2 1 4\n    2 1 4\n    2 1 4\n    = 20\n    Explanation: The largest triangle is formed by using two points on one side and one point on an adjacent side.\n\n    Test case with maximum values:\n    1000000 1000000\n    200000 1 ... (200000 points)\n    200000 1 ... (200000 points)\n    200000 1 ... (200000 points)\n    200000 1 ... (200000 points)\n    = Large value (depends on specific coordinates)\n    Explanation: This tests performance and handling of large input sizes.\n\n# [extra code for edge case]\n    We do not need extra code to handle these edge cases. The original logic already considers all possible configurations and calculates the maximum area efficiently.\n", "requirement analysis:\nThe task requires selecting three points from a set of lattice points on the sides of a rectangle to form a triangle with the maximum possible area. The solution must efficiently handle large input sizes and ensure accurate calculations. The doubled area of the triangle must be printed for each test case.\nrequirement pool:\n- Efficiently process up to 10,000 test cases\n- Accurately calculate the maximum area of the triangle\n- Optimize performance for large input sizes\n- Ensure solution handles edge cases correctly\n- Maintain simplicity in implementation\nWe will use a mathematical approach to calculate the maximum possible area of a triangle formed by three points on the sides of a rectangle. The key observation is that the maximum area is achieved when two points are on the same side and the third point is on the opposite side, forming a right triangle. We will iterate over each side and calculate the potential maximum area using the distance between the farthest points on the same side and the length of the opposite side. This approach ensures efficient handling of large input sizes and accurate calculations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'rectangle', 'lattice points', 'triangle', 'maximum area'\n    Explanation: The problem involves a rectangle defined by its corners and sides, lattice points that lie on the sides of the rectangle, and forming a triangle with these points to maximize its area. The lattice points are integer-coordinate points on the rectangle's sides, and the task is to find the maximum possible area of a triangle formed by three such points.\n\n# [phrase showing quantity relationship]\n    'maximum possible': means we need to find the largest area achievable by a triangle formed by the given points.\n    'doubled area': means the output should be twice the actual area of the triangle.\n\n# [degree adverb]\n    'maximum': means we need to find the largest possible area of a triangle formed by the points.\n\n# [code logic]\n    1. For each test case, read the dimensions of the rectangle and the points on each side.\n    2. For each side, calculate the potential maximum area using the farthest distance between two points on the same side and the length of the opposite side.\n    3. Compare areas calculated for all sides and select the maximum.\n    4. Output the doubled maximum area for each test case.\n\n# [edge case]\n    Case 1: Minimum number of points on each side\n    Input: \n    3\n    3 3\n    2 1 2\n    2 1 2\n    2 1 2\n    2 1 2\n    Expected Output: \n    Explanation: With minimum points, the maximum area is formed by using two points on one side and one point on an opposite side, resulting in a small triangle.\n\n    Case 2: All points are equidistant\n    Input:\n    3\n    5 5\n    3 1 3 5\n    3 1 3 5\n    3 1 3 5\n    3 1 3 5\n    Expected Output: \n    Explanation: The equidistant distribution may lead to multiple triangles with similar areas; however, the logic should still find the maximum.\n\n    Case 3: Large number of points with varying distances\n    Input:\n    3\n    10^6 10^6\n    k (2 \u2264 k \u2264 2 \u22c5 10^5) random distribution\n    Expected Output: \n    Explanation: The logic should efficiently handle large input sizes and find the maximum area without performance issues.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic efficiently handles all configurations by iterating over each side and calculating potential maximum areas.\n"], "scores": [], "pass_results": [false, true, false, false, false, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 2, "round": 230, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains two integers w and h (3 \u2264 w, h \u2264 10^6) \u2014 the coordinates of the corner of a rectangle.\n\nThe next two lines contain the description of the points on two horizontal sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers x_1 < x_2 < ... < x_k (0 < x_i < w) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h.\n\nThe next two lines contain the description of the points on two vertical sides. First, an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of points. Then, k integers y_1 < y_2 < ... < y_k (0 < y_i < h) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w.\n\nThe total number of points on all sides in all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.\n\nExample\n\nInput\n\n\n3\n5 8\n2 1 2\n3 2 3 4\n3 1 4 6\n2 4 5\n10 7\n2 3 9\n2 1 7\n3 1 3 4\n3 4 5 6\n11 5\n3 1 6 8\n3 3 6 8\n3 1 3 4\n2 2 4\n\n\nOutput\n\n\n25\n42\n35\n\nNote\n\nThe points in the first testcase of the example: \n\n  * (1, 0), (2, 0); \n  * (2, 8), (3, 8), (4, 8); \n  * (0, 1), (0, 4), (0, 6); \n  * (5, 4), (5, 5). \n\n\n\nThe largest triangle is formed by points (0, 1), (0, 6) and (5, 4) \u2014 its area is 25/2. Thus, the doubled area is 25. Two points that are on the same side are: (0, 1) and (0, 6).", "mutate_method": "add_1_sentence_at_end", "parent_index": 109}
