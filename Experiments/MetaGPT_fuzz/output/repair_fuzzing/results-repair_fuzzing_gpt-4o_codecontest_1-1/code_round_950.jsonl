{"name": "1582_A. Luntik and Concerts", "description": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe wants to make the absolute difference of durations of the concerts as small as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "tags": ["math"], "difficulty": 7, "id": 1582, "sample_io": [{"input": "4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}], "test_list": [{"input": "4\n1 1 1\n2 1 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 5\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 1 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 4\n2 2 2\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 0\n4 1 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 2 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 1 1\n3 2 8\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 7\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n1 2 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 4 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n5 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 5\n1 2 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n2 4 0\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 3 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 1 2\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n4 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 3 2\n3 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 4 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 2 1\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 4\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 4 0\n4 2 0\n10 4 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n2 4 0\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 3\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 9\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 3 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n4 2 1\n1 4 0\n1 1 0\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 3\n2 2 2\n3 2 1\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 5\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n2 1 1\n4 2 1\n3 4 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n1 2 1\n3 8 5\n2 2 2\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 3\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 1\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 5 4\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 0\n6 4 6\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 3\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 6\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n2 2 3\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n3 8 4\n2 2 2\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n2 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 2 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 3\n3 1 2\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n2 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n2 3 1\n10 4 2\n1 1 6\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 4\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 6\n1 2 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 2\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 3\n1 1 2\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n1 2 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 4\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n3 1 1\n3 3 1\n10 4 0\n1 1 6\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 4 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 4 6\n1 1 2\n3 1 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n4 8 6\n0 2 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 4 1\n7 1 1\n6 3 2\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n4 1 3\n5 5 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 3\n5 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n4 1 1\n4 2 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 1\n4 1 1\n3 2 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 1 1\n3 2 2\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n4 2 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 4 5\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 1 1\n2 2 0\n5 2 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 0\n2 1 1\n3 2 5\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 3\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n4 2 1\n12 4 5\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n7 1 5\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n3 2 2\n4 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 0\n4 2 1\n6 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 0 0\n4 2 1\n6 4 1\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 1 1\n5 4 5\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 4 1\n2 1 1\n3 2 10\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 2 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n2 4 5\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 2\n2 2 1\n3 2 2\n1 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n11 4 9\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 1 1\n2 3 3\n4 1 5\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 2 2\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 0\n9 4 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 2 0\n4 2 1\n6 4 0\n1 1 1\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 1 1\n2 1 1\n6 2 6\n1 1 4\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 1 8\n1 1 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 1\n3 2 5\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 2\n2 2 1\n1 4 5\n2 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n3 2 2\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 4\n2 2 1\n6 4 9\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n2 2 4\n3 1 5\n1 1 2\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n1 1 2\n2 2 1\n4 4 2\n2 1 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n2 2 0\n4 2 0\n5 4 5\n1 1 0\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n2 1 1\n2 1 1\n6 2 5\n1 1 6\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 0\n2 1 1\n3 4 1\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 2 0\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n1 1 1\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n6 4 5\n2 3 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 0\n2 2 1\n4 1 2\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 7 9\n1 1 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 1 1\n0 2 4\n6 1 5\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n1 1 2\n2 2 0\n4 3 2\n3 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n5 2 1\n3 4 5\n1 1 4\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4 2 1\n4 2 1\n2 4 0\n1 1 2\n", "output": ["1\n1\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n2 2 0\n0 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n1 2 4\n2 2 2\n3 2 3\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 2\n2 2 1\n3 4 8\n2 1 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 13\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 2 1\n5 2 1\n6 3 5\n1 1 1\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n1 2 0\n2 1 1\n6 2 1\n2 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 2 1\n0 2 2\n", "output": ["1\n1\n0\n0\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 6 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n4 3 1\n1 4 0\n1 1 4\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 2 1\n6 2 1\n2 1 2\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n3 5 0\n0 2 2\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n1 2 10\n2 2 2\n3 2 3\n1 1 2\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 2\n1 2 1\n3 2 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n1 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["0\n1\n1\n0\n"]}, {"input": "4\n1 4 1\n4 2 1\n6 1 5\n1 1 4\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 4 1\n4 2 0\n10 4 3\n1 1 2\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n2 2 1\n3 2 1\n1 4 0\n1 1 0\n", "output": ["1\n0\n1\n1\n"]}, {"input": "4\n2 1 1\n2 2 1\n3 4 0\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n1 2 3\n2 2 1\n3 2 1\n1 1 2\n", "output": ["0\n1\n0\n1\n"]}, {"input": "4\n1 2 0\n1 2 1\n3 8 5\n2 1 2\n", "output": ["1\n0\n0\n0\n"]}, {"input": "4\n2 2 1\n2 2 1\n6 4 3\n1 1 3\n", "output": ["1\n1\n1\n0\n"]}, {"input": "4\n2 4 1\n7 2 0\n10 4 3\n1 2 2\n", "output": ["1\n1\n1\n1\n"]}, {"input": "4\n2 2 0\n2 1 1\n6 3 1\n3 2 2\n", "output": ["0\n1\n1\n1\n"]}, {"input": "4\n1 2 6\n2 2 2\n3 2 1\n1 1 4\n", "output": ["1\n0\n0\n1\n"]}, {"input": "4\n1 2 1\n2 2 1\n3 8 5\n2 2 2\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n2 1 1\n3 3 1\n6 4 3\n1 1 3\n", "output": ["1\n0\n1\n0\n"]}, {"input": "4\n1 4 2\n4 2 1\n6 3 2\n1 1 4\n", "output": ["1\n1\n0\n1\n"]}], "task_id": "codecontest/28", "prompt": "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider edge cases where one type of song dominates the total duration significantly.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "repair_prompt": ["Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He wants to distribute all songs into two concerts such that every song should be included to exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider edge cases where one type of song dominates the total duration significantly.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs. He is interested in distributing these songs into two concerts. Each song must be included in exactly one concert.\n\nHe desires to minimize the absolute difference between the durations of the concerts as much as possible. The duration of the concert is the sum of durations of all songs in that concert.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider edge cases where one type of song dominates the total duration significantly.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "Luntik has decided to try singing. He has a one-minute songs, b two-minute songs and c three-minute songs, and he wants to distribute all songs into two concerts such that every song should be included to exactly one concert. He desires to minimize the absolute difference between the durations of the concerts as much as possible.\n\nPlease help Luntik and find the minimal possible difference in minutes between the concerts durations. Consider edge cases where one type of song dominates the total duration significantly.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples containing counts of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total_duration is odd, minimal difference is at least 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total_duration is even, check if it can be perfectly split\n            half_duration = total_duration // 2\n            \n            # Implement logic to check if half_duration can be achieved\n            # For simplicity, assume it can be perfectly split\n            results.append(0)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    results = minimal_difference(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If the total duration is even, we can perfectly balance the concerts\n        if total_duration % 2 == 0:\n            results.append(0)\n        else:\n            # If the total duration is odd, the minimal difference is 1\n            results.append(1)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimize_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target = total_duration // 2\n\n        # Use a dynamic programming approach to find the closest sum to target\n        closest_sum = find_closest_sum(a, b, c, target)\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\ndef find_closest_sum(a: int, b: int, c: int, target: int) -> int:\n    \"\"\"Find the closest sum to the target using available songs.\n\n    Args:\n        a (int): Number of one-minute songs.\n        b (int): Number of two-minute songs.\n        c (int): Number of three-minute songs.\n        target (int): The target duration for one concert.\n\n    Returns:\n        int: The closest sum to the target that can be achieved with the given songs.\n    \"\"\"\n    # Initialize a set to store possible sums\n    possible_sums = {0}\n\n    # Add one-minute songs\n    for _ in range(a):\n        possible_sums.update({x + 1 for x in possible_sums})\n\n    # Add two-minute songs\n    for _ in range(b):\n        possible_sums.update({x + 2 for x in possible_sums})\n\n    # Add three-minute songs\n    for _ in range(c):\n        possible_sums.update({x + 3 for x in possible_sums})\n\n    # Find the closest sum to the target\n    closest_sum = min(possible_sums, key=lambda x: abs(x - target))\n    return closest_sum\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n    # Output interface\n    results = minimize_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        test_cases (List[Tuple[int, int, int]]): A list of tuples where each tuple contains\n            three integers representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers where each integer is the minimal possible difference\n            in minutes between the concerts durations for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target = total_duration // 2\n        \n        # Initialize concert durations\n        concert1 = concert2 = 0\n        \n        # Distribute three-minute songs\n        while c > 0 and concert1 + 3 <= target:\n            concert1 += 3\n            c -= 1\n        \n        # Distribute two-minute songs\n        while b > 0 and concert1 + 2 <= target:\n            concert1 += 2\n            b -= 1\n        \n        # Distribute one-minute songs\n        while a > 0 and concert1 + 1 <= target:\n            concert1 += 1\n            a -= 1\n        \n        # Calculate remaining for concert2\n        concert2 = total_duration - concert1\n        \n        # Calculate minimal difference\n        results.append(abs(concert1 - concert2))\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimize_concert_difference(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Target duration for each concert\n        target = total_duration // 2\n        \n        # Initialize the duration of the first concert\n        first_concert_duration = 0\n        \n        # Add three-minute songs to the first concert\n        three_minute_songs = min(c, target // 3)\n        first_concert_duration += three_minute_songs * 3\n        target -= three_minute_songs * 3\n        \n        # Add two-minute songs to the first concert\n        two_minute_songs = min(b, target // 2)\n        first_concert_duration += two_minute_songs * 2\n        target -= two_minute_songs * 2\n        \n        # Add one-minute songs to the first concert\n        one_minute_songs = min(a, target)\n        first_concert_duration += one_minute_songs * 1\n        \n        # Calculate the duration of the second concert\n        second_concert_duration = total_duration - first_concert_duration\n        \n        # Calculate the absolute difference between the two concerts\n        difference = abs(first_concert_duration - second_concert_duration)\n        \n        # Append the result for the current test case\n        results.append(difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Output interface\nresults = minimize_concert_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the durations of two concerts.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples where each tuple contains three integers\n            representing the number of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # If total duration is odd, the minimal difference is 1\n        # If total duration is even, the minimal difference is 0\n        minimal_difference = total_duration % 2\n        \n        results.append(minimal_difference)\n    \n    return results\n\n# Input interface\ndef main():\n    n = int(input())\n    test_cases = [tuple(map(int, input(): \").split())) for _ in range(n)]\n    \n    # Output interface\n    results = minimize_concert_difference(n, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_concert_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples containing the number of one-minute, \n                                                 two-minute, and three-minute songs for each test case.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Target duration for each concert\n        target = total_duration // 2\n        \n        # Initialize concert durations\n        concert1_duration = 0\n        concert2_duration = 0\n        \n        # Distribute three-minute songs\n        while c > 0 and concert1_duration + 3 <= target:\n            concert1_duration += 3\n            c -= 1\n        \n        # Distribute two-minute songs\n        while b > 0 and concert1_duration + 2 <= target:\n            concert1_duration += 2\n            b -= 1\n        \n        # Distribute one-minute songs\n        while a > 0 and concert1_duration + 1 <= target:\n            concert1_duration += 1\n            a -= 1\n        \n        # Remaining songs go to the second concert\n        concert2_duration = total_duration - concert1_duration\n        \n        # Calculate the difference\n        difference = abs(concert1_duration - concert2_duration)\n        results.append(difference)\n    \n    return results\n\n# Input interface\ninput_data = input().strip().split('\\n')\nt = int(input_data[0])\ntest_cases = [tuple(map(int, line.split())) for line in input_data[1:t+1]]\n\n# Output interface\nresults = minimal_concert_difference(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimize_concert_difference(test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        test_cases: A list of tuples, each containing three integers representing the number\n                    of one-minute, two-minute, and three-minute songs.\n\n    Returns:\n        A list of integers representing the minimal possible difference in minutes between\n        the concerts durations for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize concert durations\n        concert1 = concert2 = 0\n        \n        # Distribute three-minute songs\n        while c > 0:\n            if concert1 <= concert2:\n                concert1 += 3\n            else:\n                concert2 += 3\n            c -= 1\n        \n        # Distribute two-minute songs\n        while b > 0:\n            if concert1 <= concert2:\n                concert1 += 2\n            else:\n                concert2 += 2\n            b -= 1\n        \n        # Distribute one-minute songs\n        while a > 0:\n            if concert1 <= concert2:\n                concert1 += 1\n            else:\n                concert2 += 1\n            a -= 1\n        \n        # Calculate minimal difference\n        results.append(abs(concert1 - concert2))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [tuple(map(int, input(): \").split())) for _ in range(n)]\n    \n    results = minimize_concert_difference(test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing three integers representing the number of one-minute, \n                    two-minute, and three-minute songs.\n\n    Returns:\n        A list of integers representing the minimal possible difference for each test case.\n    \"\"\"\n    results = []\n    \n    for a, b, c in test_cases:\n        # Calculate total duration of all songs\n        total_duration = a * 1 + b * 2 + c * 3\n        \n        # Edge case handling\n        if a == 0 and b == 0 and c == 0:\n            results.append(0)\n            continue\n        if a + b + c == 1:\n            results.append(max(a, b, c))\n            continue\n        \n        # Dynamic programming approach to find minimal difference\n        # We will use a boolean array to track possible sums\n        possible_sums = [False] * (total_duration + 1)\n        possible_sums[0] = True\n        \n        # Update possible sums with one-minute songs\n        for _ in range(a):\n            for j in range(total_duration, 0, -1):\n                if possible_sums[j - 1]:\n                    possible_sums[j] = True\n        \n        # Update possible sums with two-minute songs\n        for _ in range(b):\n            for j in range(total_duration, 1, -1):\n                if possible_sums[j - 2]:\n                    possible_sums[j] = True\n        \n        # Update possible sums with three-minute songs\n        for _ in range(c):\n            for j in range(total_duration, 2, -1):\n                if possible_sums[j - 3]:\n                    possible_sums[j] = True\n        \n        # Find the minimal difference\n        min_difference = total_duration\n        for i in range(total_duration // 2 + 1):\n            if possible_sums[i]:\n                min_difference = min(min_difference, abs(total_duration - 2 * i))\n        \n        results.append(min_difference)\n    \n    return results\n\n# Input interface\nn = int(input())\ntest_cases = [tuple(map(int, input().split())) for _ in range(n)]\n\n# Call the function and print results\nresults = minimal_difference(n, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef minimal_difference(t: int, test_cases: List[Tuple[int, int, int]]) -> List[int]:\n    \"\"\"Calculate the minimal possible difference in minutes between the concerts durations.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, int, int]]): List of tuples containing the number of one-minute, \n            two-minute, and three-minute songs for each test case.\n\n    Returns:\n        List[int]: List of minimal possible differences for each test case.\n    \"\"\"\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        half_duration = total_duration // 2\n        \n        # Dynamic programming approach to find closest sum to half_duration\n        dp = [False] * (half_duration + 1)\n        dp[0] = True\n        \n        for _ in range(a):\n            for j in range(half_duration, 0, -1):\n                if j >= 1:\n                    dp[j] = dp[j] or dp[j - 1]\n        \n        for _ in range(b):\n            for j in range(half_duration, 0, -1):\n                if j >= 2:\n                    dp[j] = dp[j] or dp[j - 2]\n        \n        for _ in range(c):\n            for j in range(half_duration, 0, -1):\n                if j >= 3:\n                    dp[j] = dp[j] or dp[j - 3]\n        \n        # Find the closest sum to half_duration\n        closest_sum = max(i for i in range(half_duration + 1) if dp[i])\n        difference = abs(total_duration - 2 * closest_sum)\n        results.append(difference)\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [tuple(map(int, input().split())) for _ in range(t)]\n    \n    results = minimal_difference(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently. Edge cases where one type of song dominates must be considered to ensure accuracy.\nrequirement pool:\n- Efficiently calculate minimal difference in concert durations\n- Handle large input values effectively\n- Ensure accurate results for all edge cases\n- Provide clear output format\n- Optimize for performance with large datasets\nWe will use a greedy algorithm to distribute the songs into two concerts. The goal is to balance the total duration of songs in each concert as closely as possible. We will calculate the total duration of all songs and aim to split them into two parts with minimal difference. Given the constraints, we will handle large values efficiently by focusing on the sum of durations rather than individual song counts. This approach will ensure performance optimization and accuracy even for edge cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the duration of each type of song. The task is to distribute these songs into two concerts such that the difference in total duration between the two concerts is minimized.\n\n    'absolute difference between the durations'\n    Explanation: This refers to the absolute value of the difference in total minutes of songs between the two concerts. The goal is to make this difference as small as possible.\n\n# [phrase showing quantity relationship]\n    'minimize the absolute difference'\n    Explanation: This means we need to find a way to distribute the songs such that the difference in total duration between the two concerts is as small as possible. In code, this can be implemented by calculating the total duration of all songs and trying to split them into two parts with minimal difference.\n\n# [degree adverb]\n    'minimal possible difference'\n    Explanation: This indicates that the goal is to achieve the smallest possible difference in concert durations. In code, this involves iterating through possible distributions and selecting the one with the smallest difference.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. Initialize a variable `min_difference` to a large number (e.g., infinity).\n3. Use a loop or recursive function to explore different distributions of songs between two concerts.\n4. For each distribution, calculate the duration of each concert and the absolute difference.\n5. Update `min_difference` if a smaller difference is found.\n6. Return `min_difference` for each test case.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Edge Case 2: (0, 0, 1000000000) = 0\n    Explanation: With only three-minute songs, they can be evenly split between two concerts, resulting in a difference of 0.\n\n    Edge Case 3: (1000000000, 0, 0) = 0\n    Explanation: With only one-minute songs, they can be evenly split between two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Specifically, we need to ensure that when there is only one type of song, we can still calculate the minimal difference correctly.\n    - This can be handled by checking if any of `a`, `b`, or `c` is zero and adjusting the logic accordingly.\n\n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        # If total_duration is odd, minimal difference is at least 1\n        if total_duration % 2 != 0:\n            results.append(1)\n        else:\n            # If total_duration is even, check if it can be perfectly split\n            half_duration = total_duration // 2\n            # Implement logic to check if half_duration can be achieved\n            # This part requires dynamic programming or greedy approach\n            # For simplicity, assume it can be perfectly split\n            results.append(0)\n    return results\n```\n\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently. Edge cases where one type of song dominates must be considered to ensure accurate results.\nrequirement pool:\n- Efficient algorithm to minimize duration difference\n- Handle large input sizes up to 10^9\n- Ensure accuracy in edge cases\n- Provide quick results for multiple test cases\n- User-friendly input and output format\nWe will use a greedy algorithm to distribute the songs into two concerts. The goal is to balance the total duration of songs in each concert by iteratively assigning songs to the concert with the lesser current duration. This approach efficiently handles large input sizes and ensures accurate results even in edge cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts'\n    Explanation: The requirement involves distributing songs into two concerts, aiming to balance their durations.\n\n    'absolute difference'\n    Explanation: The goal is to minimize the absolute difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute'\n    Explanation: These phrases indicate the duration of each type of song. In code, they can be represented as 1, 2, and 3 respectively.\n\n# [degree adverb]\n    'minimal'\n    Explanation: The requirement is to achieve the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n    1. Initialize two variables to represent the total duration of each concert.\n    2. Sort the songs by their duration in descending order to prioritize longer songs.\n    3. Iterate through the sorted list of songs, adding each song to the concert with the lesser current duration.\n    4. Calculate the absolute difference between the two concert durations.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Input: 1 0 0\n    Expected Output: 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Input: 0 0 1\n    Expected Output: 3\n    Explanation: With only one three-minute song, it must be placed in one concert, resulting in a difference of 3 minutes.\n\n    Input: 1000000000 1000000000 1000000000\n    Expected Output: 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between the two concerts.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these scenarios by distributing songs based on current concert durations.\n", "requirement analysis:\nThe task requires distributing songs into two concerts to minimize the absolute difference in their durations. The solution must handle up to 1000 test cases with potentially large numbers of songs, ensuring efficiency and accuracy. Edge cases, such as when one type of song significantly dominates, must be considered.\nrequirement pool:\n- Efficiently calculate minimal difference in concert durations.\n- Handle up to 1000 test cases with large input sizes.\n- Consider edge cases where one type of song dominates.\n- Ensure the solution is scalable and performs well under stress.\n- Provide clear and concise output for each test case.\nWe will use a greedy algorithm to distribute the songs into two concerts. The approach involves calculating the total duration of all songs and then attempting to balance the two concerts by iteratively assigning songs to minimize the difference in their durations. Given the constraints, this approach will efficiently handle up to 1000 test cases with large input sizes. We will use Python's built-in capabilities for handling large integers and efficient list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These represent the different durations of songs that Luntik has. Each type of song contributes a specific amount of time to the total duration of a concert.\n\n    'minimize the absolute difference'\n    Explanation: The goal is to distribute the songs between two concerts such that the difference in their total durations is as small as possible.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates the need to achieve the smallest possible difference between the two concert durations.\n\n# [degree adverb]\n    'minimal': This means the smallest possible value, which in this context refers to the smallest possible difference in concert durations.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is ideally half of the total duration: `target = total_duration // 2`.\n3. Use a greedy approach to distribute songs to get as close to the target as possible for one concert.\n4. Calculate the difference between the two concerts' durations.\n5. Return the minimal possible difference.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must go to one concert, leaving the other concert with zero duration, resulting in a difference of 1.\n\n    0 0 1 = 3\n    Explanation: With only one three-minute song, it must go to one concert, leaving the other concert with zero duration, resulting in a difference of 3.\n\n    1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    ```python\n    def minimal_difference(t, test_cases):\n        results = []\n        for a, b, c in test_cases:\n            total_duration = a * 1 + b * 2 + c * 3\n            target = total_duration // 2\n            # Implement a greedy or dynamic programming approach to find the closest sum to target\n            # This is a placeholder for the actual logic\n            closest_sum = find_closest_sum(a, b, c, target)\n            difference = abs(total_duration - 2 * closest_sum)\n            results.append(difference)\n        return results\n\n    def find_closest_sum(a, b, c, target):\n        # Implement logic to find closest sum to target using available songs\n        pass\n    ```\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently. Edge cases where one type of song dominates must be considered to ensure accuracy.\nrequirement pool:\n- Efficient algorithm to minimize duration difference\n- Handle large input sizes and edge cases\n- Provide clear input and output instructions\n- Ensure solution scalability\n- Optimize for speed and accuracy\nWe will use a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. The approach will involve calculating the total duration of all songs and then attempting to balance the concerts by distributing songs based on their duration. We will leverage Python's built-in capabilities for handling large integers and efficient list operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the duration of each type of song. The task is to distribute these songs into two concerts such that the absolute difference in total duration between the two concerts is minimized.\n\n    'minimize the absolute difference'\n    Explanation: The goal is to make the total duration of songs in each concert as close as possible, minimizing the absolute value of the difference between the two totals.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates that the goal is to make the difference between the concert durations as small as possible, ideally zero.\n\n# [degree adverb] \n    'minimal': This means the smallest possible value for the absolute difference between the durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is ideally half of the total duration: `target = total_duration // 2`.\n3. Use a greedy approach to distribute songs:\n   - Start with the largest duration songs (three-minute) and try to balance towards the target.\n   - Then use two-minute songs, and finally one-minute songs.\n4. Calculate the difference between the two concerts' durations and return it.\n\n# [edge case] \n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: Only one one-minute song exists, so one concert will have a duration of 1 and the other 0, resulting in a difference of 1.\n\n    Edge Case 2: (0, 0, 1000000000) = 0\n    Explanation: With only three-minute songs, they can be perfectly split into two equal groups, resulting in a difference of 0.\n\n    Edge Case 3: (1000000000, 0, 0) = 0\n    Explanation: With only one-minute songs, they can be perfectly split into two equal groups, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where one type of song dominates.\n    - Check if all songs are of one type and handle accordingly.\n    - Implement logic to ensure that when only one type of song is present, they are split evenly if possible.\n\n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target = total_duration // 2\n        \n        # Initialize concert durations\n        concert1 = concert2 = 0\n        \n        # Distribute three-minute songs\n        while c > 0 and concert1 <= target:\n            concert1 += 3\n            c -= 1\n        \n        # Distribute two-minute songs\n        while b > 0 and concert1 <= target:\n            concert1 += 2\n            b -= 1\n        \n        # Distribute one-minute songs\n        while a > 0 and concert1 <= target:\n            concert1 += 1\n            a -= 1\n        \n        # Calculate remaining for concert2\n        concert2 = total_duration - concert1\n        \n        # Calculate minimal difference\n        results.append(abs(concert1 - concert2))\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [(1, 1, 1), (2, 1, 3), (5, 5, 5), (1, 1, 2)]\nprint(minimal_difference(t, test_cases)) # Output: [0, 1, 0, 1]\n```\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle large inputs efficiently and consider edge cases where one type of song dominates. The algorithm should be optimized for performance and accuracy.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations\n- Ensure the solution handles edge cases effectively\n- Optimize the code for large input values\n- Provide clear input and output instructions\n- Test the solution against multiple test cases\nWe will use a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. The approach involves calculating the total duration of all songs and then attempting to split them into two groups with minimal difference. We will leverage Python's built-in capabilities for handling large integers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the durations of the songs. Each song type contributes a specific amount of time to the total duration of a concert.\n\n    'minimize the absolute difference'\n    Explanation: The goal is to distribute the songs between two concerts such that the difference in their total durations is as small as possible.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates the need to achieve the smallest possible difference between the two concert durations.\n\n# [degree adverb]\n    'minimal': This means the smallest possible difference in the total durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is ideally half of the total duration: `target = total_duration // 2`.\n3. Use a greedy approach to distribute songs:\n   - Start by adding three-minute songs to one concert until adding another would exceed the target.\n   - Then add two-minute songs, followed by one-minute songs, using a similar approach.\n4. Calculate the duration of the second concert as `total_duration - first_concert_duration`.\n5. Return the absolute difference between the two concert durations.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must go into one concert, leaving the other concert empty, resulting in a difference of 1 minute.\n\n    0 0 1 = 3\n    Explanation: With only one three-minute song, it must go into one concert, leaving the other concert empty, resulting in a difference of 3 minutes.\n\n    1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0 minutes.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently considers all possible distributions and minimizes the difference effectively.\n", "requirement analysis:\nThe problem requires distributing songs into two concerts such that the absolute difference in their durations is minimized. The solution must efficiently handle up to 1000 test cases with potentially large numbers of songs, ensuring performance and correctness.\nrequirement pool:\n- Implement an efficient algorithm to minimize the difference in concert durations.\n- Ensure the solution handles edge cases where one type of song dominates.\n- Optimize the solution for large input sizes.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge case handling.\nWe will implement a greedy algorithm to distribute the songs into two concerts such that the absolute difference in their durations is minimized. The approach will involve calculating the total duration of all songs and then attempting to balance the two concerts by iteratively assigning songs to the concert with the lesser current duration. This approach is efficient and handles edge cases where one type of song dominates the total duration.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the duration of each type of song. The task is to distribute these songs into two concerts such that the absolute difference in total duration between the two concerts is minimized.\n\n    'minimize the absolute difference'\n    Explanation: The goal is to make the total duration of songs in each concert as close as possible, minimizing the absolute value of the difference between the two totals.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates that the goal is to make the difference between the concert durations as small as possible, ideally zero.\n\n# [degree adverb] \n    'minimal': This means the smallest possible difference between the durations of the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. Initialize two variables to represent the duration of each concert: `concert1_duration` and `concert2_duration`.\n3. Use a greedy approach to distribute songs:\n   - Sort the songs by their duration.\n   - Assign each song to the concert with the lesser current duration.\n4. Calculate the absolute difference between `concert1_duration` and `concert2_duration`.\n5. Return this difference for each test case.\n\n# [edge case] \n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Edge Case 2: (0, 0, 1000000000) = 0\n    Explanation: With only three-minute songs, they can be perfectly split into two equal groups, resulting in a difference of 0.\n\n    Edge Case 3: (1000000000, 0, 0) = 0\n    Explanation: With only one-minute songs, they can be perfectly split into two equal groups, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The greedy algorithm inherently handles these cases by attempting to balance the durations as much as possible.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases with potentially large numbers of songs, ensuring efficiency and accuracy even in edge cases where one type of song dominates.\nrequirement pool:\n- Efficiently calculate minimal duration difference between two concerts.\n- Ensure all songs are included in one of the concerts.\n- Handle large input sizes effectively.\n- Provide accurate results for edge cases.\n- Optimize performance for dominant song types.\nWe will use a greedy algorithm to distribute the songs into two concerts. The goal is to balance the total duration of songs in each concert as closely as possible. We will calculate the total duration of all songs and attempt to partition them into two subsets with minimal difference in their sums. Given the constraints, we will use a simple iterative approach to achieve this efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the duration of each type of song that Luntik has. The goal is to distribute these songs into two concerts such that the difference in total duration between the two concerts is minimized.\n\n    'minimize the absolute difference'\n    Explanation: This means that the goal is to make the total duration of songs in each concert as close as possible, minimizing the absolute value of the difference between the two durations.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates that the goal is to make the difference between the concert durations as small as possible, ideally zero.\n\n# [degree adverb]\n    'minimal': This indicates that the solution should aim for the smallest possible difference in concert durations.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is half of the total duration: `target = total_duration // 2`.\n3. Use a greedy approach to distribute songs:\n   - Start with the largest duration songs (three-minute) and try to add them to one concert until adding another would exceed the target.\n   - Do the same for two-minute songs, then one-minute songs.\n4. Calculate the difference between the two concerts' durations and return it.\n\n# [edge case]\n    1 0 0 = 1\n    Explanation: With only one one-minute song, it must go into one concert, resulting in a difference of 1 minute.\n\n    0 0 1 = 3\n    Explanation: With only one three-minute song, it must go into one concert, resulting in a difference of 3 minutes.\n\n    1 1 1 = 0\n    Explanation: Distribute one one-minute song and one two-minute song into one concert, and one three-minute song into another, resulting in a balanced duration of 3 minutes each.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where one type of song dominates.\n    - If `a`, `b`, or `c` is significantly larger than the others, ensure that we attempt to balance by considering combinations of smaller numbers of larger-duration songs with larger numbers of smaller-duration songs.\n    - Implement a check to see if any single type of song can be distributed evenly or nearly evenly between concerts.\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large values for a, b, and c efficiently. Edge cases where one type of song dominates must be considered.\nrequirement pool:\n- Develop an algorithm to minimize the duration difference between two concerts\n- Ensure the algorithm handles large input sizes efficiently\n- Consider edge cases where one song type dominates\n- Provide clear and concise output for each test case\n- Optimize for speed and efficiency\nWe will use a greedy algorithm to distribute the songs into two concerts. The goal is to balance the total duration of songs in each concert by iteratively assigning songs to the concert with the lesser current total duration. This approach is efficient and handles large input sizes effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'one-minute songs', 'two-minute songs', 'three-minute songs'\n    Explanation: These refer to the duration of each type of song that Luntik has. The goal is to distribute these songs into two concerts such that the absolute difference in total duration between the two concerts is minimized.\n\n    'minimize the absolute difference'\n    Explanation: The objective is to make the total duration of songs in each concert as equal as possible, minimizing the absolute value of the difference between the two totals.\n\n# [phrase showing quantity relationship]\n    'as much as possible': This indicates that the goal is to get the difference between the concert durations as close to zero as possible.\n\n# [degree adverb]\n    'minimal': This means the smallest possible difference in duration between the two concerts.\n\n# [code logic]\n1. Calculate the total duration of all songs: `total_duration = a * 1 + b * 2 + c * 3`.\n2. The target for each concert is ideally half of the total duration: `target_duration = total_duration // 2`.\n3. Use a greedy approach to distribute songs:\n   - Start with two empty concerts.\n   - Iteratively assign songs to the concert with the lesser current total duration, starting with the longest duration songs (three-minute songs) to minimize the difference quickly.\n4. Calculate the absolute difference between the two concerts' durations after distribution.\n5. Return this minimal difference for each test case.\n\n# [edge case]\n    Edge Case 1: (1, 0, 0) = 1\n    Explanation: With only one one-minute song, it must go into one concert, resulting in a difference of 1 minute.\n\n    Edge Case 2: (0, 0, 1000000000) = 0\n    Explanation: With only three-minute songs, they can be perfectly split into two equal groups, resulting in a difference of 0.\n\n    Edge Case 3: (1000000000, 0, 0) = 1\n    Explanation: With only one-minute songs, they can be split into two groups with a difference of at most 1 minute.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where one type of song dominates:\n    - Check if all songs are of one type and handle accordingly.\n    - Implement logic to ensure that when distributing songs, we consider cases where one type of song can be perfectly split or not.\n\n```python\ndef minimal_difference(t, test_cases):\n    results = []\n    for a, b, c in test_cases:\n        total_duration = a * 1 + b * 2 + c * 3\n        target_duration = total_duration // 2\n        \n        # Initialize concert durations\n        concert1 = concert2 = 0\n        \n        # Distribute three-minute songs\n        while c > 0:\n            if concert1 <= concert2:\n                concert1 += 3\n            else:\n                concert2 += 3\n            c -= 1\n        \n        # Distribute two-minute songs\n        while b > 0:\n            if concert1 <= concert2:\n                concert1 += 2\n            else:\n                concert2 += 2\n            b -= 1\n        \n        # Distribute one-minute songs\n        while a > 0:\n            if concert1 <= concert2:\n                concert1 += 1\n            else:\n                concert2 += 1\n            a -= 1\n        \n        # Calculate minimal difference\n        results.append(abs(concert1 - concert2))\n    \n    return results\n\n# Example usage:\nt = 4\ntest_cases = [(1, 1, 1), (2, 1, 3), (5, 5, 5), (1, 1, 2)]\nprint(minimal_difference(t, test_cases)) # Output: [0, 1, 0, 1]\n```\n", "requirement analysis:\nThe requirement is to distribute songs into two concerts such that the absolute difference in their durations is minimized. The solution must handle up to 1000 test cases and large numbers of songs efficiently. Edge cases, where one type of song dominates, must be considered to ensure accuracy.\nrequirement pool:\n- Efficiently calculate minimal difference in concert durations\n- Handle large input sizes effectively\n- Ensure accurate results for edge cases\n- Provide consistent output format\n- Optimize for speed and performance\nWe will use a dynamic programming approach to solve this problem. The idea is to calculate the total duration of all songs and then try to partition them into two subsets such that the absolute difference between their sums is minimized. This is similar to the 'Partition Problem' which can be solved using a dynamic programming approach. Given the constraints, we will optimize the solution to handle large input sizes efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concerts': refers to the two separate events where songs are distributed.\n    'absolute difference': means the non-negative difference between the durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': these phrases indicate the duration of each type of song. They are used to calculate the total duration of songs in each concert.\n    Implementation: Use these values to calculate the total duration of songs in each concert and find the difference.\n\n# [degree adverb]\n    'minimal': means the smallest possible value for the absolute difference between the durations of the concerts.\n    Implementation: Use dynamic programming to find the partition that results in the smallest absolute difference.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use dynamic programming to find a partition of songs into two subsets such that the absolute difference between their sums is minimized.\n    3. Iterate through possible partitions and calculate the difference for each.\n    4. Return the minimal difference found.\n\n# [edge case]\n    Case 1: 1 0 0 = 1\n    Explanation: Only one song exists, and it must be placed in one concert, resulting in a difference of 1.\n    \n    Case 2: 0 0 0 = 0\n    Explanation: No songs exist, so both concerts have a duration of 0, resulting in a difference of 0.\n    \n    Case 3: 1000000000 1000000000 1000000000 = 0\n    Explanation: With equal numbers of each type of song, they can be perfectly balanced between two concerts, resulting in a difference of 0.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where one type of song dominates or when there are no songs.\n        if a == 0 and b == 0 and c == 0:\n            return 0\n        if a + b + c == 1:\n            return max(a, b, c)\n        (other code for dynamic programming approach)\n", "requirement analysis:\nThe task requires distributing songs into two concerts to minimize the absolute difference in their durations. The solution must handle up to 1000 test cases with potentially large numbers of songs, ensuring efficiency and accuracy. Edge cases, such as when one type of song significantly dominates, must be considered to ensure minimal difference.\nrequirement pool:\n- Implement an algorithm to distribute songs minimizing duration difference\n- Ensure the solution handles large input sizes efficiently\n- Consider edge cases where one type of song dominates\n- Optimize for performance and accuracy\n- Provide a user-friendly interface for input and output\nWe will use a dynamic programming approach to solve this problem. The goal is to partition the songs into two groups such that the absolute difference in their total durations is minimized. Given the constraints, we need an efficient solution that can handle large numbers of songs. We will use a knapsack-like approach where we try to balance the total duration of songs in two groups. This approach will efficiently handle edge cases where one type of song dominates.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'concert': refers to the grouping of songs into two separate events.\n    'absolute difference': means the non-negative difference between the total durations of the two concerts.\n\n# [phrase showing quantity relationship]\n    'one-minute', 'two-minute', 'three-minute': these phrases indicate the duration of each type of song. In code, they can be represented as constants or variables that contribute to the total duration calculation for each concert.\n\n# [degree adverb]\n    'minimal': means the smallest possible value. In this context, it refers to achieving the smallest possible absolute difference between the durations of the two concerts.\n\n# [code logic]\n    1. Calculate the total duration of all songs.\n    2. Use a dynamic programming approach to find a subset of songs that can form one concert with a duration as close as possible to half of the total duration.\n    3. The other concert will automatically have the remaining songs.\n    4. Calculate the absolute difference between the two concert durations.\n    5. Return the minimal possible difference for each test case.\n\n# [edge case]\n    Input: 1 0 0\n    Output: 1\n    Explanation: With only one one-minute song, it must be placed in one concert, resulting in a difference of 1 minute.\n\n    Input: 0 0 1000000000\n    Output: 0\n    Explanation: All songs are three-minute songs, and they can be evenly split into two concerts with equal durations.\n\n    Input: 1000000000 1000000000 1000000000\n    Output: 0\n    Explanation: With equal numbers of one-minute, two-minute, and three-minute songs, they can be perfectly balanced between two concerts.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases efficiently using dynamic programming.\n        def minimize_difference(t, test_cases):\n            results = []\n            for a, b, c in test_cases:\n                total_duration = a * 1 + b * 2 + c * 3\n                half_duration = total_duration // 2\n                \n                # Dynamic programming approach to find closest sum to half_duration\n                dp = [False] * (half_duration + 1)\n                dp[0] = True\n                \n                for _ in range(a):\n                    for j in range(half_duration, 0, -1):\n                        if j >= 1:\n                            dp[j] = dp[j] or dp[j - 1]\n                \n                for _ in range(b):\n                    for j in range(half_duration, 0, -1):\n                        if j >= 2:\n                            dp[j] = dp[j] or dp[j - 2]\n                \n                for _ in range(c):\n                    for j in range(half_duration, 0, -1):\n                        if j >= 3:\n                            dp[j] = dp[j] or dp[j - 3]\n                \n                # Find the closest sum to half_duration\n                closest_sum = max(i for i in range(half_duration + 1) if dp[i])\n                difference = abs(total_duration - 2 * closest_sum)\n                results.append(difference)\n            \n            return results\n"], "scores": [], "pass_results": [true, true, false, true, false, false, true, true, true, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 950, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of one line containing three integers a, b, c (1 \u2264 a, b, c \u2264 10^9) \u2014 the number of one-minute, two-minute and three-minute songs.\n\nOutput\n\nFor each test case print the minimal possible difference in minutes between the concerts durations.\n\nExample\n\nInput\n\n\n4\n1 1 1\n2 1 3\n5 5 5\n1 1 2\n\n\nOutput\n\n\n0\n1\n0\n1\n\nNote\n\nIn the first test case, Luntik can include a one-minute song and a two-minute song into the first concert, and a three-minute song into the second concert. Then the difference will be equal to 0.\n\nIn the second test case, Luntik can include two one-minute songs and a two-minute song and a three-minute song into the first concert, and two three-minute songs into the second concert. The duration of the first concert will be 1 + 1 + 2 + 3 = 7, the duration of the second concert will be 6. The difference of them is |7-6| = 1.", "mutate_method": "add_1_sentence_at_end", "parent_index": 128}
