{"name": "1598_C. Delete Two Elements", "description": "Monocarp has got an array a consisting of n integers. Let's denote k as the mathematic mean of these elements (note that it's possible that k is not an integer). \n\nThe mathematic mean of an array of n elements is the sum of elements divided by the number of these elements (i. e. sum divided by n).\n\nMonocarp wants to delete exactly two elements from a so that the mathematic mean of the remaining (n - 2) elements is still equal to k.\n\nYour task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "tags": ["data structures", "dp", "implementation", "math", "two pointers"], "difficulty": 9, "id": 1598, "sample_io": [{"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}], "test_list": [{"input": "1\n3\n228 1337 228\n", "output": ["0\n"]}, {"input": "1\n3\n228 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n2\n3\n"]}, {"input": "4\n4\n8 9 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n34 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["6\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 7\n", "output": ["6\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 1\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["0\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 9\n", "output": ["6\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 10\n5\n1 2 7 0 5\n7\n2 2 3 7 1 4 9\n", "output": ["0\n0\n1\n1\n"]}, {"input": "4\n4\n8 8 0 8\n3\n222 20 6\n5\n1 2 7 0 5\n7\n0 2 3 7 1 4 9\n", "output": ["0\n0\n1\n0\n"]}, {"input": "4\n4\n8 2 2 8\n3\n50 20 10\n5\n1 4 7 0 5\n7\n1 2 3 4 5 6 7\n", "output": ["4\n0\n0\n3\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 28 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n1\n0\n0\n"]}, {"input": "4\n4\n8 8 5 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["0\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n4 2 3 7 1 4 7\n", "output": ["6\n0\n1\n3\n"]}, {"input": "4\n4\n5 8 11 8\n3\n9 24 10\n5\n1 4 2 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["2\n0\n2\n0\n"]}, {"input": "4\n4\n5 8 5 8\n3\n9 34 10\n5\n1 4 4 3 5\n7\n0 2 3 3 5 8 20\n", "output": ["4\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1337 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 4 4 0 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 7 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 18 14\n3\n44 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 8 0 3 5\n7\n-1 2 3 12 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 127\n", "output": ["0\n"]}, {"input": "1\n3\n40 1144 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 7 3 9\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 0 2 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n", "output": ["0\n0\n2\n3\n"]}, {"input": "4\n4\n8 8 8 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 14\n3\n50 25 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 -1 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n342 1512 3\n", "output": ["0\n"]}, {"input": "4\n4\n8 2 2 11\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 0 4 5 6 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n50 25 9\n5\n1 4 7 3 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "1\n1\n228 2063 0\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n1 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 7 3 5\n7\n0 2 -1 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 5\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 2\n", "output": ["0\n"]}, {"input": "4\n4\n8 9 24 8\n3\n89 20 10\n5\n1 8 7 5 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 3 6 3 5\n7\n0 2 3 8 6 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 14 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 8\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 5\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n228 1337 103\n", "output": ["0\n"]}, {"input": "1\n3\n40 270 228\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 10\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["6\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 44\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 37 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 10\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 3\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 25 1\n5\n0 4 6 3 5\n7\n0 2 3 8 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 10\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n228 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 13 5\n3\n50 25 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 13 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 5\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 3 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 2 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n382 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 8\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 4 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 74\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n89 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 2 7 3 5\n7\n0 2 3 4 5 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n50 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 14\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 4 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 10\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 10\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 25 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n298 4021 1\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n93 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 5 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 5\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1337 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 15\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 11\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 8\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "1\n1\n148 1337 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 5 6 5\n", "output": ["0\n0\n0\n3\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 10\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n1 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 0 4 0\n", "output": ["6\n0\n0\n9\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 6 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 5\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 3\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n10 8 13 5\n3\n50 29 6\n5\n0 4 7 2 5\n7\n0 2 0 4 0 4 7\n", "output": ["2\n0\n0\n0\n"]}, {"input": "4\n4\n8 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n141 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 8 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 3 8 8\n3\n50 40 1\n5\n0 4 0 10 5\n7\n-1 2 4 8 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 7 8\n3\n50 40 1\n5\n0 4 0 0 0\n7\n-1 1 3 0 9 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 103\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 4 20\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 14 16\n3\n2 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 11 8\n3\n50 25 7\n5\n1 4 3 3 5\n7\n-1 2 3 8 0 1 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n1\n148 141 93\n", "output": ["0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 20 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 5 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n83 18 1\n5\n1 0 7 3 5\n7\n0 2 3 4 5 4 10\n", "output": ["6\n0\n0\n2\n"]}, {"input": "4\n4\n8 8 13 8\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 4 28\n3\n50 53 10\n5\n1 4 7 3 5\n7\n-1 2 3 4 0 0 5\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n116 20 10\n5\n1 2 7 5 5\n7\n2 2 3 7 1 4 7\n", "output": ["6\n0\n1\n0\n"]}, {"input": "4\n4\n8 8 8 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 3 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n1 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 17 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 8 8\n3\n233 25 1\n5\n0 4 0 6 7\n7\n0 2 3 8 9 4 7\n", "output": ["6\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 9 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 1055 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 5 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 11 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 16\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 8\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n12 8 8 8\n3\n130 20 10\n5\n0 4 7 3 5\n7\n1 2 0 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 13 0\n3\n38 46 4\n5\n1 4 12 3 5\n7\n-1 2 3 4 0 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 6 8\n3\n50 25 3\n5\n1 4 12 3 5\n7\n0 2 4 4 1 4 0\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 9 8\n3\n50 25 19\n5\n0 4 8 6 5\n7\n0 2 7 4 1 4 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 9 15 8\n3\n89 20 18\n5\n0 4 7 5 7\n7\n1 2 3 2 5 6 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n8 8 12 14\n3\n44 2 5\n5\n0 4 7 5 8\n7\n-1 2 3 4 1 0 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n6 1 24 14\n3\n50 45 10\n5\n0 4 7 2 5\n7\n0 2 0 4 0 8 7\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 12 8\n3\n50 25 2\n5\n0 4 0 3 10\n7\n-1 2 3 11 7 3 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "1\n3\n232 461 22\n", "output": ["0\n"]}, {"input": "4\n4\n8 8 8 9\n3\n50 20 7\n5\n1 4 12 3 5\n7\n1 2 3 4 1 5 7\n", "output": ["0\n0\n0\n0\n"]}, {"input": "4\n4\n5 8 8 8\n3\n9 25 10\n5\n1 4 4 3 5\n7\n0 2 3 4 5 8 20\n", "output": ["0\n0\n0\n1\n"]}, {"input": "4\n4\n8 8 14 28\n3\n4 25 10\n5\n1 4 7 3 5\n7\n0 2 3 6 0 8 7\n", "output": ["0\n0\n2\n0\n"]}, {"input": "4\n4\n8 15 2 12\n3\n50 37 10\n5\n1 4 3 3 5\n7\n1 4 3 4 7 6 5\n", "output": ["0\n0\n0\n0\n"]}], "task_id": "codecontest/60", "prompt": "Monocarp has got an array a consisting of n integers. Monocarp wants to delete exactly two elements from a so that the average of the remaining (n - 2) elements is still equal to k. Here, k is the mathematic mean of these elements. It is calculated as sum divided by n. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure your solution is efficient and handles edge cases effectively.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "repair_prompt": ["Monocarp has got an array a consisting of n integers. Monocarp wants to delete exactly two elements from a so that the average of the remaining (n - 2) elements is still equal to k. Here, k is the mathematic mean of these elements. It is calculated as sum divided by n. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure your solution is efficient and handles edge cases effectively.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "Monocarp has got an array a consisting of n integers. Monocarp wants to delete exactly two elements from a so that the average of the remaining (n - 2) elements is still equal to k. Here, k is the mathematic mean of these elements. It is calculated by taking the sum of the elements and dividing it by n. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure your solution is efficient and handles edge cases effectively.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "Monocarp has got an array a consisting of n integers. Monocarp wants to delete exactly two elements so that the average of the remaining (n - 2) elements is still equal to k, which is calculated as sum divided by n. Your task is to calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a). Ensure your solution is efficient and handles edge cases effectively.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef count_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted,\n    the mathematic mean of (n - 2) remaining elements is equal to the mean of the original array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of results for each test case, representing the number of valid pairs.\n    \"\"\"\n    results = []\n\n    for case in test_cases:\n        n = len(case)\n        total_sum = sum(case)\n        mean = total_sum / n\n\n        # Calculate the target sum for the remaining elements after removing two elements\n        target_sum = (n - 2) * mean\n\n        # Use a hashmap to store the frequency of each element\n        frequency: Dict[int, int] = {}\n        for num in case:\n            if num in frequency:\n                frequency[num] += 1\n            else:\n                frequency[num] = 1\n\n        count = 0\n\n        # Iterate through each element to find valid pairs\n        for i in range(n):\n            a_i = case[i]\n            # Calculate the required value to pair with a_i\n            required_value = total_sum - target_sum - a_i\n\n            # Check if the required value exists in the hashmap\n            if required_value in frequency:\n                count += frequency[required_value]\n\n                # If a_i and required_value are the same, we need to decrement the count by 1\n                # because we cannot pair the element with itself\n                if required_value == a_i:\n                    count -= 1\n\n        # Each pair is counted twice, so divide the count by 2\n        results.append(count // 2)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Output interface\n    results = count_pairs(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import defaultdict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] such that removing\n    these elements keeps the average of the remaining elements unchanged.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of valid pairs for each test case.\n    \"\"\"\n    results = []\n\n    for a in test_cases:\n        n = len(a)\n        total_sum = sum(a)\n        k = total_sum / n\n        target_sum = (n - 2) * k\n\n        count_map = defaultdict(int)\n        for num in a:\n            count_map[num] += 1\n\n        valid_pairs = 0\n\n        for num in a:\n            complement = target_sum - (total_sum - num)\n            count_map[num] -= 1\n            if complement in count_map:\n                valid_pairs += count_map[complement]\n            count_map[num] += 1\n\n        results.append(valid_pairs // 2)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Call the function and print results\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] such that removing these elements\n    maintains the average of the remaining elements equal to the original average.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of valid pairs for each test case.\n    \"\"\"\n    results = []\n\n    for a in test_cases:\n        n = len(a)\n        total_sum = sum(a)\n        original_average = total_sum / n\n        target_sum = original_average * (n - 2)\n\n        # Count occurrences of each element using a hashmap\n        element_count: Dict[int, int] = {}\n        for num in a:\n            if num in element_count:\n                element_count[num] += 1\n            else:\n                element_count[num] = 1\n\n        valid_pairs = 0\n\n        # Iterate through each element and calculate the required partner element\n        for i in range(n):\n            required_partner = total_sum - target_sum - a[i]\n            if required_partner in element_count:\n                valid_pairs += element_count[required_partner]\n                # If both elements are the same, decrement the count to avoid double counting\n                if required_partner == a[i]:\n                    valid_pairs -= 1\n\n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append(a)\n\n# Output interface\nresults = count_valid_pairs(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import defaultdict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] such that removing\n    these elements keeps the mean of the remaining elements unchanged.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of results for each test case, indicating the number of valid pairs.\n    \"\"\"\n    results = []\n    \n    for a in test_cases:\n        n = len(a)\n        total_sum = sum(a)\n        original_mean = total_sum / n\n        valid_pairs_count = 0\n        \n        # Use a hashmap to count occurrences of each element\n        element_count = defaultdict(int)\n        for num in a:\n            element_count[num] += 1\n        \n        # Iterate through each element to find valid pairs\n        for i in range(n):\n            # Calculate the required pair value\n            required_value = 2 * original_mean - a[i]\n            \n            # Check if the required pair value exists in the hashmap\n            if required_value in element_count:\n                # If the required value is the same as a[i], we need to ensure there are at least two occurrences\n                if required_value == a[i]:\n                    valid_pairs_count += element_count[required_value] - 1\n                else:\n                    valid_pairs_count += element_count[required_value]\n        \n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs_count // 2)\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Output interface\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef count_valid_pairs(t: int, test_cases: list[tuple[int, list[int]]]) -> list[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] (i < j) such that\n    if the elements on these positions are deleted, the mean of the remaining\n    elements is equal to the original mean.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list[tuple[int, list[int]]]): List of test cases, each containing\n            a tuple with the number of elements and the array of integers.\n\n    Returns:\n        list[int]: List of results for each test case, representing the number of valid pairs.\n    \"\"\"\n    results = []\n\n    for n, a in test_cases:\n        total_sum = sum(a)\n        mean_k = total_sum / n\n        target_sum = 2 * mean_k\n\n        # Dictionary to count occurrences of each element\n        element_count = {}\n        for num in a:\n            if num in element_count:\n                element_count[num] += 1\n            else:\n                element_count[num] = 1\n\n        valid_pairs = 0\n\n        # Iterate through the array to find valid pairs\n        for i in range(n):\n            current_element = a[i]\n            complement = target_sum - current_element\n\n            # Check if the complement exists in the dictionary\n            if complement in element_count:\n                # If complement is the same as current element, we need to ensure\n                # there are at least two occurrences\n                if complement == current_element:\n                    valid_pairs += element_count[complement] - 1\n                else:\n                    valid_pairs += element_count[complement]\n\n            # Decrement the count of the current element to avoid counting the same pair twice\n            element_count[current_element] -= 1\n\n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n\n    return results\n\n# Interface using input() and print()\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] such that removing\n    these elements keeps the average of the remaining elements the same as the original array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of results for each test case, representing the number of valid pairs.\n    \"\"\"\n    results = []\n\n    for case in test_cases:\n        n = len(case)\n        total_sum = sum(case)\n        average = total_sum / n\n        target_sum = 2 * average\n\n        # Dictionary to store the frequency of each element\n        element_count: Dict[int, int] = {}\n        valid_pairs = 0\n\n        for number in case:\n            # Calculate the complement that would sum to target_sum with the current number\n            complement = target_sum - number\n\n            # Check if the complement exists in the dictionary\n            if complement in element_count:\n                valid_pairs += element_count[complement]\n\n            # Update the dictionary with the current number\n            if number in element_count:\n                element_count[number] += 1\n            else:\n                element_count[number] = 1\n\n        results.append(valid_pairs)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Output interface\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] (i < j) such that\n    if the elements on these positions are deleted, the average of the remaining\n    elements is equal to the original average.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of valid pairs for each test case.\n    \"\"\"\n    results = []\n\n    for case in test_cases:\n        n = len(case)\n        total_sum = sum(case)\n        k = total_sum / n\n        target_sum = 2 * k\n\n        # Dictionary to count occurrences of each element\n        count_map: Dict[int, int] = {}\n        for num in case:\n            if num in count_map:\n                count_map[num] += 1\n            else:\n                count_map[num] = 1\n\n        valid_pairs = 0\n\n        for i in range(n):\n            current_value = case[i]\n            target_value = target_sum - current_value\n\n            # Decrease the count of the current element\n            count_map[current_value] -= 1\n\n            # Check if the target value exists in the map\n            if target_value in count_map and count_map[target_value] > 0:\n                valid_pairs += count_map[target_value]\n\n        results.append(valid_pairs)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append(a)\n\n    # Output interface\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\nfrom collections import defaultdict\n\ndef count_valid_pairs(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] (i < j) such that\n    removing these elements maintains the average of the array.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing\n            a tuple with the number of elements and the array itself.\n\n    Returns:\n        List[int]: List of results for each test case, representing the number of valid pairs.\n    \"\"\"\n    results = []\n\n    for n, a in test_cases:\n        total_sum = sum(a)\n        original_average = total_sum / n\n        target_sum = 2 * original_average\n\n        # Use a hashmap to store the frequency of each element\n        frequency_map = defaultdict(int)\n        for num in a:\n            frequency_map[num] += 1\n\n        valid_pairs_count = 0\n\n        # Iterate through each element to find valid pairs\n        for i in range(n):\n            current_value = a[i]\n            required_pair_value = target_sum - current_value\n\n            # Decrease the frequency of the current element\n            frequency_map[current_value] -= 1\n\n            # Check if the required pair value exists in the hashmap\n            if required_pair_value in frequency_map and frequency_map[required_pair_value] > 0:\n                valid_pairs_count += frequency_map[required_pair_value]\n\n        # Append the result for the current test case\n        results.append(valid_pairs_count)\n\n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append((n, a))\n\n    # Output interface\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nfrom collections import defaultdict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] such that removing these elements keeps the average unchanged.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing an array of integers.\n\n    Returns:\n        List[int]: List of integers representing the number of valid pairs for each test case.\n    \"\"\"\n    results = []\n\n    for a in test_cases:\n        n = len(a)\n        total_sum = sum(a)\n        original_average = total_sum / n\n        target_sum = original_average * (n - 2)\n\n        # Frequency map to count occurrences of each element\n        freq_map = defaultdict(int)\n        for num in a:\n            freq_map[num] += 1\n\n        valid_pairs_count = 0\n\n        # Iterate over each element and calculate the needed value\n        for i in range(n):\n            freq_map[a[i]] -= 1  # Decrement frequency of current element\n            needed = target_sum - (total_sum - a[i])\n            if needed in freq_map:\n                valid_pairs_count += freq_map[needed]\n\n        results.append(valid_pairs_count // 2)  # Each pair is counted twice\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    test_cases.append(a)\n\n# Output interface\nresults = count_valid_pairs(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Dict\n\ndef count_valid_pairs(t: int, test_cases: List[List[int]]) -> List[int]:\n    \"\"\"Calculate the number of valid pairs of positions [i, j] (i < j) such that\n    if the elements on these positions are deleted, the mathematic mean of (n - 2)\n    remaining elements is equal to the original mean of n elements.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[int]]): List of test cases, each containing the number\n                                      of elements followed by the elements themselves.\n\n    Returns:\n        List[int]: List of results for each test case, representing the number of valid pairs.\n    \"\"\"\n    results = []\n\n    for case in test_cases:\n        n = case[0]\n        a = case[1:]\n        \n        total_sum = sum(a)\n        k = total_sum / n\n        \n        # Calculate the required sum of the remaining elements after removing two elements\n        required_sum = (n - 2) * k\n        \n        # Use a hashmap to count occurrences of each element\n        element_count: Dict[int, int] = {}\n        for num in a:\n            if num in element_count:\n                element_count[num] += 1\n            else:\n                element_count[num] = 1\n        \n        valid_pairs = 0\n        \n        # Iterate through each element and calculate the required partner element\n        for i in range(n):\n            current_element = a[i]\n            required_partner = total_sum - required_sum - current_element\n            \n            # Check if the required partner exists in the hashmap\n            if required_partner in element_count:\n                # If the required partner is the same as the current element, we need to ensure\n                # there are at least two occurrences of this element\n                if required_partner == current_element:\n                    valid_pairs += element_count[required_partner] - 1\n                else:\n                    valid_pairs += element_count[required_partner]\n        \n        # Each pair is counted twice, so divide by 2\n        results.append(valid_pairs // 2)\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        test_cases.append([n] + a)\n    \n    # Call the function and print the result\n    results = count_valid_pairs(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe task requires identifying pairs of elements whose removal maintains the mean of the array. The solution must efficiently handle up to 10,000 test cases with arrays of size up to 200,000 elements, ensuring edge cases are addressed.\nrequirement pool:\n- Efficient computation for large arrays\n- Correct identification of pairs maintaining the mean\n- Robust handling of edge cases\n- Clear output format\n- Simple implementation\nWe will use a mathematical approach to efficiently determine the pairs of elements whose removal maintains the mean of the array. The key observation is that the sum of the remaining elements after removing two elements should be equal to the sum of the original array minus twice the mean. We will use a hashmap to store the frequency of each element and calculate the required pairs in O(n) time for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average or mean of a set of numbers is the sum of the numbers divided by the count of numbers.\n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means we need to remove precisely two elements from the array.\n    'equal to': The average of the remaining elements must be exactly equal to the original average.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Calculate the sum of the array and determine the mean (k) by dividing the sum by n.\n2. For each test case, iterate through the array and use a hashmap to store the frequency of each element.\n3. For each element a_i, calculate the required value that needs to be paired with it to maintain the mean after removal.\n4. Check if this required value exists in the hashmap and count valid pairs.\n5. Ensure that pairs are counted only once by maintaining i < j condition.\n6. Return the total count of valid pairs for each test case.\n\n# [edge case]\n    Test case 1: [8, 8, 8, 8] = 6\n    Explanation: All elements are equal, so any pair can be removed without changing the mean.\n\n    Test case 2: [50, 20, 10] = 0\n    Explanation: No pair of elements can be removed to maintain the original mean.\n\n    Test case 3: [1, 4, 7, 3, 5] = 2\n    Explanation: Removing elements at positions (1,3) or (4,5) maintains the mean.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles cases where all elements are equal or where no valid pairs exist.\n", "requirement analysis:\nThe problem requires identifying pairs of elements in an array that can be removed while maintaining the average of the remaining elements. The solution must efficiently handle up to 200,000 elements across multiple test cases, ensuring performance and accuracy. Edge cases, such as arrays with identical elements or minimal size, must be considered.\nrequirement pool:\n- Efficiently handle large input sizes up to 200,000 elements\n- Correctly calculate the number of valid pairs for each test case\n- Handle edge cases such as arrays with identical elements\n- Ensure the solution is easy to understand and maintain\n- Optimize for both time and space complexity\nWe will use a mathematical approach to solve this problem efficiently. The key observation is that the sum of the array minus the two elements to be removed should be equal to (n-2) times the average of the original array. This leads to a simple equation that can be solved using a hashmap to count occurrences of each element, allowing us to efficiently find pairs that satisfy the condition.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average (or mean) is calculated as the sum of elements divided by the number of elements. In this problem, the average of the array should remain the same after removing two elements.\n    'pairs of positions [i, j]': Refers to the indices of the two elements that can be removed from the array.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means we need to remove precisely two elements from the array.\n    'sum divided by n': This is the formula for calculating the average, where 'sum' is the total of all elements and 'n' is the number of elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of the array and determine the average (k).\n    2. For each element, calculate what the sum would be if two elements were removed.\n    3. Use a hashmap to count occurrences of each element.\n    4. Iterate through pairs of elements and check if removing them keeps the average unchanged.\n    5. Count valid pairs and return the result.\n\n# [edge case]\n    Input: 3\n           1 1 1\n    Output: 0\n    Explanation: With only three identical elements, removing any two will not change the average, but since n = 3, no valid pairs exist.\n    \n    Input: 4\n           0 0 0 0\n    Output: 6\n    Explanation: All elements are zero, so any pair can be removed without changing the average.\n    \n    Input: 5\n           10 10 10 10 10\n    Output: 10\n    Explanation: All elements are identical, so any pair can be removed without changing the average.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using hashmap and checking pairs will naturally handle these scenarios.\n", "requirement analysis:\nThe requirement is to efficiently compute the number of pairs of elements that can be removed from an array such that the average of the remaining elements remains unchanged. The solution must handle large datasets and edge cases effectively, ensuring accurate results across multiple test cases.\nrequirement pool:\n- Efficient computation for large datasets\n- Correct identification of pairs to delete\n- Robust handling of edge cases\n- Clear and accurate output format\n- Easy to understand and implement solution\nWe will use a mathematical approach to solve this problem efficiently. The key observation is that the sum of the array elements must remain the same after removing two elements for the average to remain unchanged. We will calculate the total sum of the array and the target sum for the remaining elements. Using a hashmap, we will count the occurrences of each element and use this to determine valid pairs that can be removed. This approach ensures that we handle large datasets efficiently and manage edge cases effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average (or mean) of a set of numbers is the sum of the numbers divided by the count of numbers.\n    'mathematic mean': This is another term for the average.\n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means we need to remove precisely two elements from the array.\n    'equal to': This indicates that the average of the remaining elements must be the same as the original average.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Calculate the total sum of the array and determine the original average (k).\n2. For each test case, calculate the target sum for the remaining elements after removing two elements.\n3. Use a hashmap to count occurrences of each element in the array.\n4. Iterate through each element and calculate the required partner element to maintain the target sum.\n5. Check if this partner element exists in the hashmap and count valid pairs.\n6. Ensure that pairs are counted only once and handle cases where both elements are the same.\n\n# [edge case]\n    Test case 1: [8, 8, 8, 8] = 6\n    Explanation: Any pair of elements can be removed since all are equal, maintaining the average.\n\n    Test case 2: [50, 20, 10] = 0\n    Explanation: No pair can be removed to maintain the average since all elements are distinct and do not satisfy the condition.\n\n    Test case 3: [1, 4, 7, 3, 5] = 2\n    Explanation: Removing elements at positions (1, 3) or (4, 5) maintains the average.\n\n# [extra code for edge case]\n    We do not need extra code to handle edge cases. The logic inherently handles cases where no valid pairs exist by returning zero when no pairs meet the criteria.\n", "requirement analysis:\nThe task requires calculating the number of pairs of positions [i, j] such that removing these elements keeps the mean of the remaining elements the same as the original mean. The solution must be efficient due to the constraints on n and the number of test cases. Edge cases, such as arrays with identical elements or minimal size, must be handled correctly.\nrequirement pool:\n- Efficiently calculate the number of valid pairs for each test case.\n- Handle edge cases such as arrays with identical elements.\n- Optimize the algorithm to handle large inputs within constraints.\n- Ensure the solution is tested against a variety of test cases.\n- Provide clear and concise output for each test case.\nWe will calculate the total sum of the array and the mean. For each pair of elements, we will check if removing them keeps the mean of the remaining elements the same. This can be optimized by using a hashmap to count occurrences of each element and using mathematical properties to avoid recalculating sums repeatedly.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average (mean) is calculated by dividing the sum of elements by the number of elements.\n    'delete exactly two elements': We need to remove two elements from the array while maintaining the average of the remaining elements.\n    'pairs of positions [i, j] (i < j)': We are looking for pairs of indices where the first index is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two': We need to remove precisely two elements from the array.\n    'equal to': The average of the remaining elements must be equal to the original average.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Calculate the total sum of the array and the original mean.\n    2. For each pair of elements (i, j), calculate the sum of the remaining elements after removing these two.\n    3. Check if the mean of the remaining elements equals the original mean.\n    4. Use a hashmap to store occurrences of each element to optimize checking pairs.\n    5. Iterate through possible pairs and count valid pairs.\n\n# [edge case]\n    Input: 3\n           3\n           0 0 0\n    Output: 1\n    Explanation: Removing any two elements will keep the mean as 0.\n\n    Input: 4\n           4\n           1 1 1 1\n    Output: 6\n    Explanation: All elements are equal, so any pair can be removed.\n\n    Input: 3\n           3\n           1 2 3\n    Output: 0\n    Explanation: No pair can be removed to keep the mean unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases effectively by checking all possible pairs and using mathematical properties to ensure efficiency.\n", "requirement analysis:\nThe task requires calculating the number of pairs of elements that can be removed from an array such that the average of the remaining elements remains the same. The solution must be efficient due to the constraints on input size and number of test cases. Edge cases, such as arrays with all identical elements or minimal size, must be handled gracefully.\nrequirement pool:\n- Efficiently calculate the number of valid pairs for each test case.\n- Ensure the solution handles the maximum input size within time limits.\n- Provide clear and concise output for each test case.\n- Handle edge cases such as arrays with identical elements.\n- Optimize for readability and maintainability of the code.\nWe will calculate the total sum of the array and the mean k. For each test case, we will iterate through the array to find pairs of elements whose removal keeps the mean of the remaining elements equal to k. This can be achieved by checking if the sum of the two elements equals twice the mean of the array. We will use a dictionary to count occurrences of each element to efficiently find valid pairs.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average (or mean) of a set of numbers is the sum of the numbers divided by the count of numbers.\n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means we need to remove precisely two elements from the array.\n    'equal to': This indicates that the average of the remaining elements must be exactly equal to the original average.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Calculate the total sum of the array and determine the mean k.\n2. For each test case, iterate through the array to find pairs of elements whose removal keeps the mean of the remaining elements equal to k.\n3. This can be achieved by checking if the sum of the two elements equals twice the mean of the array.\n4. Use a dictionary to count occurrences of each element to efficiently find valid pairs.\n5. For each element, calculate the required complement that, when summed with the current element, equals twice the mean.\n6. Check if this complement exists in the dictionary and count valid pairs accordingly.\n7. Ensure that pairs are counted only once and that i < j.\n\n# [edge case]\n    Test case 1: [8, 8, 8, 8] = 6\n    Explanation: All elements are equal, so any pair can be removed without changing the mean.\n\n    Test case 2: [50, 20, 10] = 0\n    Explanation: No pair of elements can be removed to keep the mean unchanged.\n\n    Test case 3: [1, 4, 7, 3, 5] = 2\n    Explanation: Removing elements at positions (1, 3) or (4, 5) keeps the mean unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle edge cases. The original logic accounts for all scenarios by checking if the sum of two elements equals twice the mean.\n", "requirement analysis:\nThe problem requires calculating the number of pairs of elements that can be removed from an array such that the average of the remaining elements remains the same. The solution must be efficient due to the constraints on the number of test cases and the size of the array. Edge cases, such as arrays with all identical elements or arrays where no valid pairs exist, must be handled effectively.\nrequirement pool:\n- Efficiently calculate the number of valid pairs for each test case\n- Handle edge cases such as identical elements or no valid pairs\n- Optimize the algorithm for large input sizes\n- Ensure the solution is easy to understand and maintain\n- Provide detailed comments and documentation for the code\nWe will use a mathematical approach to solve this problem efficiently. The key observation is that for the average of the remaining elements to remain the same after removing two elements, the sum of the two removed elements must equal twice the average of the entire array. We will calculate the total sum of the array and the average, then iterate through the array to find pairs of elements whose sum equals twice the average. This approach ensures that we handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average (or mean) is calculated by dividing the sum of the elements by the number of elements. In this problem, the average of the remaining elements after removing two should be equal to the average of the original array.\n    'pairs of positions [i, j]': Refers to the indices of the elements in the array that can be removed to maintain the average.\n\n# [phrase showing quantity relationship]\n    'twice': The sum of the two removed elements must equal twice the average of the entire array. This means if the average is k, then the sum of the two elements to be removed should be 2 * k.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Calculate the total sum of the array and derive the average (k).\n    2. For each test case, iterate through the array and use a dictionary to store occurrences of each element.\n    3. For each element, calculate the required complement that would sum to twice the average with it.\n    4. Check if this complement exists in the dictionary and count valid pairs.\n    5. Ensure that pairs are counted only once and handle cases where elements are identical.\n\n# [edge case]\n    Input: 4\n           4\n           8 8 8 8\n    Output: 6\n    Explanation: Any pair can be removed since all elements are equal, maintaining the average.\n\n    Input: 3\n           50 20 10\n    Output: 0\n    Explanation: No pair can be removed to maintain the average as no two elements sum to twice the average.\n\n    Input: 5\n           1 4 7 3 5\n    Output: 2\n    Explanation: Removing positions (1,3) or (4,5) maintains the average.\n\n# [extra code for edge case]\n    We do not need extra code to handle edge cases. The logic inherently handles cases where no valid pairs exist or where all elements are identical.\n", "requirement analysis:\nThe task requires calculating the number of pairs of positions [i, j] such that removing these elements keeps the average of the remaining elements the same as the original array. The solution must be efficient due to the constraints on n and t, and it should handle edge cases where elements are equal or where no valid pairs exist.\nrequirement pool:\n- Efficiently calculate the number of valid pairs for each test case.\n- Ensure the solution handles edge cases, such as all elements being equal.\n- Optimize the solution to handle the maximum constraints effectively.\n- Provide clear and concise output for each test case.\n- Implement additional checks for input validation.\nWe will use a mathematical approach to solve this problem efficiently. The key observation is that the sum of the array minus the two elements to be removed should be equal to the average times (n-2). This leads to the equation: sum(a) - a[i] - a[j] = k * (n-2). We can rearrange this to find pairs (i, j) such that a[i] + a[j] = 2 * k. We will use a dictionary to count occurrences of each element and then iterate through the array to find valid pairs. This approach ensures that we handle large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the average of the array elements before and after removing two elements.\n    \n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    \n    'equal to': This indicates that the average of the remaining elements after removing two should be exactly equal to the original average.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Calculate the sum of the array and determine the original average `k` as `sum(a) / n`.\n2. For each test case, calculate `2 * k` since we need pairs (i, j) such that `a[i] + a[j] = 2 * k`.\n3. Use a dictionary to count occurrences of each element in the array.\n4. Iterate through each element in the array:\n   - For each element `a[i]`, calculate `target = 2 * k - a[i]`.\n   - Check if `target` exists in the dictionary and count valid pairs.\n   - Ensure that pairs are counted only once by maintaining a condition `i < j`.\n5. Return the total count of valid pairs for each test case.\n\n# [edge case]\n    Test case 1: [8, 8, 8, 8] = 6\n    Explanation: All elements are equal, so any pair can be removed without changing the average.\n\n    Test case 2: [50, 20, 10] = 0\n    Explanation: No pair of elements can be removed to maintain the original average.\n\n    Test case 3: [1, 4, 7, 3, 5] = 2\n    Explanation: Removing elements at positions (1, 3) or (4, 5) maintains the original average.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles cases where no valid pairs exist or all elements are equal.\n", "requirement analysis:\nThe task requires identifying pairs of elements whose removal maintains the average of the remaining elements. The solution must be efficient due to the large possible input size and should handle edge cases where elements are equal or where no valid pairs exist.\nrequirement pool:\n- Efficiently compute valid pairs of deletions for large datasets.\n- Handle edge cases such as all elements being equal.\n- Ensure the output format is consistent with the requirements.\n- Optimize the algorithm for both time and space complexity.\n- Provide detailed comments and documentation for the code.\nWe will iterate through each test case, calculate the total sum of the array, and then use a hashmap to efficiently find pairs of elements whose removal maintains the average. The key observation is that for the average to remain the same after removing two elements, the sum of the two elements removed must equal twice the average of the original array. This approach ensures efficiency even for large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, it refers to the average of the array before and after removing two elements.\n    \n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means that we need to remove precisely two elements from the array.\n    \n    'equal to': This indicates that the average of the remaining elements must be exactly the same as the original average.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, calculate the total sum of the array and the original average.\n2. Calculate twice the original average (2 * k) since we need to find pairs whose sum equals this value.\n3. Use a hashmap to store the frequency of each element in the array.\n4. Iterate through each element and for each element, calculate the required pair value that would maintain the average.\n5. Check if this required pair value exists in the hashmap and count valid pairs.\n6. Ensure that pairs are counted only once and that i < j.\n\n# [edge case]\n    Test case 1: [8, 8, 8, 8] = 6\n    Explanation: All elements are equal, so any pair can be removed without changing the average.\n\n    Test case 2: [50, 20, 10] = 0\n    Explanation: No pair of elements can be removed to maintain the average.\n\n    Test case 3: [1, 4, 7, 3, 5] = 2\n    Explanation: Removing elements at positions (1, 3) or (4, 5) maintains the average.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of using a hashmap to find pairs whose sum equals twice the average inherently handles all edge cases efficiently.\n", "requirement analysis:\nThe task requires calculating the number of pairs of positions [i, j] such that removing these elements keeps the average of the remaining elements the same as the original array. The solution must be efficient, handling up to 200,000 elements across all test cases, and should consider edge cases like arrays with identical elements.\nrequirement pool:\n- Efficiently calculate the number of valid pairs for each test case\n- Ensure the solution handles the maximum input size within time limits\n- Optimize the algorithm for edge cases\n- Provide clear and concise output\n- Document the solution for better understanding\nWe will use a mathematical approach to determine the number of pairs [i, j] such that removing these elements keeps the average of the remaining elements the same as the original array. The key observation is that the sum of the remaining elements should be equal to the sum of the original array minus the sum of the two removed elements. We will iterate over all pairs and check this condition efficiently using a hashmap to store frequencies of elements.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average of a set of numbers is the sum of the numbers divided by the count of numbers. In this requirement, the average of the remaining elements after removing two elements should be equal to the average of the original array.\n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct positions in the array such that the first position is less than the second.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means we need to remove precisely two elements from the array.\n    'sum divided by n': This refers to calculating the average by dividing the sum of elements by the number of elements.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Calculate the sum of the original array and its average.\n    2. Iterate over all pairs of elements in the array.\n    3. For each pair, calculate the sum of the remaining elements after removing the pair.\n    4. Check if the average of the remaining elements equals the original average.\n    5. Use a hashmap to store frequencies of elements to optimize checking conditions.\n\n# [edge case]\n    Input: 3\n           3\n           1 1 1\n    Output: 0\n    Explanation: With only three identical elements, removing any two will not change the average, but since n = 3, no valid pairs exist.\n\n    Input: 4\n           4\n           0 0 0 0\n    Output: 6\n    Explanation: All elements are zero, so any pair removal will keep the average zero.\n\n    Input: 5\n           5\n           10 10 10 10 10\n    Output: 10\n    Explanation: All elements are identical, so any pair removal will keep the average unchanged.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic efficiently handles all cases by checking conditions for each pair using a hashmap for frequency counting.\n", "requirement analysis:\nThe requirement is to efficiently compute the number of pairs of elements that can be removed from an array such that the average of the remaining elements remains unchanged. The solution must handle large datasets and edge cases effectively, ensuring accurate results.\nrequirement pool:\n- Efficient computation for large datasets\n- Correct identification of pairs of elements to delete\n- Robust handling of edge cases\n- Clear and accurate output\n- Simple implementation\nWe will use a mathematical approach to determine the number of pairs of elements that can be removed while maintaining the average of the remaining elements. The key observation is that the sum of the remaining elements should be equal to the sum of the original array minus twice the average. We will use a hashmap to efficiently count occurrences of required values and handle large datasets.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'average': The average (or mean) of a set of numbers is the sum of the numbers divided by the count of numbers.\n    'mathematic mean': This is another term for the average.\n    'pairs of positions [i, j] (i < j)': This refers to selecting two distinct elements from the array such that their indices satisfy i < j.\n\n# [phrase showing quantity relationship]\n    'exactly two elements': This means we need to remove precisely two elements from the array.\n    'n - 2': This refers to the number of elements remaining after removing two elements from the array.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Calculate the total sum of the array and the average (k) using the formula k = total_sum / n.\n2. For each element in the array, calculate the required sum of the remaining elements after removing two elements.\n3. Use a hashmap to count occurrences of each element.\n4. Iterate through each element and calculate the required partner element that, when removed together, maintains the average.\n5. Use the hashmap to check if the required partner exists and count valid pairs.\n6. Ensure that pairs are counted only once by maintaining i < j.\n\n# [edge case]\n    Case 1: n = 3, a = [1, 1, 1] = 3\n    Explanation: Any pair can be removed since all elements are equal, maintaining the average.\n\n    Case 2: n = 4, a = [0, 0, 0, 0] = 6\n    Explanation: Any pair can be removed since all elements are equal, maintaining the average.\n\n    Case 3: n = 5, a = [1, 2, 3, 4, 5] = 0\n    Explanation: No pair can be removed to maintain the average as all elements are distinct.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic using hashmap and checking for required partners will naturally handle these cases.\n"], "scores": [], "pass_results": [true, false, true, true, true, true, true, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 7, "round": 883, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThe first line of each testcase contains one integer n (3 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in the array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i is the i-th element of the array.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the number of pairs of positions [i, j] (i < j) such that if the elements on these positions are deleted, the mathematic mean of (n - 2) remaining elements is equal to k (that is, it is equal to the mathematic mean of n elements of the original array a).\n\nExample\n\nInput\n\n\n4\n4\n8 8 8 8\n3\n50 20 10\n5\n1 4 7 3 5\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n\n6\n0\n2\n3\n\nNote\n\nIn the first example, any pair of elements can be removed since all of them are equal.\n\nIn the second example, there is no way to delete two elements so the mathematic mean doesn't change.\n\nIn the third example, it is possible to delete the elements on positions 1 and 3, or the elements on positions 4 and 5.", "mutate_method": "rephrase_one", "parent_index": 367}
