{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He sorted them in non-decreasing order and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He sorted them in non-decreasing order and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array. He arranged them in non-decreasing order and got an array b of 7 integers. Polycarp recorded each sum of these non-empty subsequences without omitting any. \n\nFor example, if a = {1, 4, 3}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these values from smallest to largest. After sorting, he got an array b = {1, 3, 4, 4, 5, 7, 8}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. \n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the 3 integers of the original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements\n        a1 = b[0]\n        # The largest element in b is the sum of all original elements\n        sum_all = b[6]\n        # The second largest element in b is the sum of two of the original elements\n        sum_two = b[5]\n        # Deduce the other two elements\n        a2 = sum_two - a1\n        a3 = sum_all - a1 - a2\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    # Process and output results\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"\n    Given a sorted list of 7 integers representing the sums of all non-empty subsequences\n    of an array of 3 positive integers, restore the original array.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers.\n\n    Returns:\n        Tuple[int, int, int]: The original array of 3 positive integers.\n    \"\"\"\n    # The smallest element in b corresponds to the smallest element in a\n    a1 = b[0]\n    # The largest element in b is the sum of all elements in a\n    a3 = b[6] - a1\n    # The second largest element in b is the sum of the two largest elements in a\n    a2 = b[5] - a3\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"\n    Main function to handle input and output for multiple test cases.\n    \"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport typing\n\ndef restore_original_array(t: int, test_cases: typing.List[typing.List[int]]) -> typing.List[typing.Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers representing the sorted array b.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored original array a.\n    \"\"\"\n    results = []\n    for case in test_cases:\n        # The smallest element in b is one of the elements in a\n        a1 = case[0]\n        # The largest element in b is the sum of all elements in a\n        sum_a = case[-1]\n        # Deduce the remaining elements of a\n        a2 = case[1]\n        a3 = sum_a - a1 - a2\n        results.append((a1, a2, a3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the sorted array 'b' which contains\n    the sums of all non-empty subsequences of 'a'.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all\n                       non-empty subsequences of the original array 'a'.\n\n    Returns:\n        List[int]: The original array 'a' consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in 'b' is one of the elements of 'a'\n    a1 = b[0]\n    # The largest element in 'b' is the sum of all elements of 'a'\n    sum_a = b[6]\n    # The second smallest element in 'b' is another element of 'a'\n    a2 = b[1]\n    # Calculate the third element of 'a' using the sum of all elements\n    a3 = sum_a - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[list[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted array of 7 integers.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (list[list[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        list[list[int]]: A list of results, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a.\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest number is the sum of all three elements.\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the restored original array of three integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original numbers\n        a1 = b[0]\n        # The largest element in b is the sum of all three original numbers\n        sum_all = b[6]\n        # The sum of the other two numbers is sum_all - a1\n        sum_two = sum_all - a1\n        # The other two numbers can be deduced from b[1] and b[2]\n        a2 = b[1] - a1\n        a3 = sum_two - a2\n        results.append([a1, a2, a3])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process and output results\n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted array of sums of all non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the elements in a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        a1_a2_a3 = b[6]\n        # The second largest element in b is the sum of the two largest elements of a\n        a2_a3 = b[5]\n        \n        # Deduce the elements of a\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a2_a3\n        \n        # Append the result as a tuple\n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process each test case\n    results = restore_original_array(test_cases)\n    \n    # Output results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three integers from the given sorted sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = b[0]\n        # The largest element in b is the sum of all elements in a\n        a1_a2_a3 = b[6]\n        # The second largest element in b is the sum of the two largest elements in a\n        a2_a3 = b[5]\n        \n        # Calculate the elements of a\n        a2 = a2_a3 - a1\n        a3 = a1_a2_a3 - a2_a3\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Output interface\n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three integers from the sorted array of sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences\n                       of the original array of three integers.\n\n    Returns:\n        List[int]: The original array of three integers.\n    \"\"\"\n    # The smallest element in b is one of the integers in a\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers in a\n    a1_a2_a3 = b[6]\n    # The second smallest element in b is the sum of the two smallest integers in a\n    a1_a2 = b[1]\n    \n    # Deduce the individual integers\n    a2 = a1_a2 - a1\n    a3 = a1_a2_a3 - a1_a2\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of an original array of three positive integers.\n\n    Returns:\n        List[int]: The original array of three positive integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array.\n    # The largest number in b is the sum of all three elements.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    n = int(input())\n    for _ in range(n):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The constraints ensure that the input is valid and there is always a solution. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution is optimized for large inputs and multiple test cases.\n- Provide clear and concise output for each test case.\n- Include error handling for unexpected input formats.\n- Optimize the code for readability and maintainability.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting the appropriate elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in array b represents the sum of all elements in array a. This helps us identify the total sum of the original array.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in array b is the smallest element in array a. This helps us identify one of the original elements directly.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the elements in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Use the properties of subsequences to deduce the remaining elements of a by considering combinations that match the sums found in b.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums match the pattern described.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest element is 1, and the largest sum is 7. The remaining elements can be deduced from the pattern.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sums match the pattern described.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing elements from subsequences inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct output format.\nrequirement pool:\n- Restore the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Provide clear and correct output for each test case.\n- Optimize for large integer values.\n- Consider edge cases and multiple possible solutions.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. The second largest element in b is the sum of the two largest elements in a. Using these observations, we can deduce the original array a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to the smallest element in a, and the largest element in b is the sum of all elements in a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to the smallest element in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these observations to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are equal, so each element of a is equal to the smallest element of b.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second largest is 6, so a possible array a is {1, 2, 4}.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal, so each element of a is equal to the smallest element of b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic already accounts for these scenarios by using the properties of sorted sums and subsequences.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums.\n- Ensure the solution is efficient and handles the maximum constraints.\n- Format the output correctly for each test case.\n- Optimize for both speed and memory usage.\n- Consider edge cases and validate the input constraints.\nWe will leverage the fact that the smallest element in the sorted array b is the smallest element of the original array a. The largest element in b is the sum of all elements in a. By using these properties, we can deduce the original array a by selecting appropriate elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of combinations of elements from the array a. In code, this can be implemented by calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in b corresponds to the smallest element in a.\n    \n    'largest'\n    Explanation: The largest element in b corresponds to the sum of all elements in a.\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the largest element in b, which is the sum of all elements in a.\n3. Use the properties of subsequences to deduce the remaining elements of a:\n   - The second smallest element in b can be another element of a.\n   - The third smallest element in b can be the third element of a.\n4. Return these three elements as the array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest element is 1, and the sum is 3, which can be achieved by three identical elements.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The remaining elements can be deduced from the sequence.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are identical, and their sums are repeated. The smallest element is 300000000, and the sum is 900000000, which can be achieved by three identical elements.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the remaining elements will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and easy to interpret.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Optimize for large integer values\n- Maintain a clear and concise output format\n- Provide documentation for understanding the solution approach\nWe will use a straightforward approach to restore the original array 'a' from the sorted array 'b'. Since 'b' contains the sums of all non-empty subsequences of 'a', the smallest element in 'b' is one of the elements of 'a'. The largest element in 'b' is the sum of all elements of 'a'. By subtracting the smallest element from the largest, we can find the sum of the other two elements. The second smallest element in 'b' is another element of 'a'. Using these insights, we can efficiently determine the three elements of 'a'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array 'b' is sorted in non-decreasing order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: The largest element in 'b' is the sum of all elements in 'a'. This can be implemented in code by identifying the last element of the sorted array 'b'.\n\n# [degree adverb]\n    'smallest'\n    Explanation: The smallest element in 'b' is one of the elements of 'a'. This can be implemented in code by identifying the first element of the sorted array 'b'.\n\n# [code logic]\n1. Identify the smallest element in 'b', which is one of the elements of 'a'.\n2. Identify the largest element in 'b', which is the sum of all elements in 'a'.\n3. Subtract the smallest element from the largest to find the sum of the other two elements.\n4. The second smallest element in 'b' is another element of 'a'.\n5. Use these insights to determine the three elements of 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element of 'a' is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The second smallest is 2.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each element of 'a' is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by identifying the smallest and largest elements and using them to reconstruct 'a'.\n", "requirement analysis:\nThe problem requires restoring an original array of three integers from the sums of its non-empty subsequences. The key observation is that the largest number in the sorted array b is the sum of all three integers. The smallest three numbers in b are the individual elements of the original array. The solution must efficiently handle up to 5000 test cases and large integer values.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution is efficient and scalable\n- Handle large integer values up to 10^9\n- Provide output in the correct format\n- Optimize for multiple test cases\nWe will leverage the observation that the largest number in the sorted array b is the sum of all three integers in the original array a. The smallest three numbers in b are the individual elements of the original array. By using these observations, we can efficiently restore the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in non-decreasing order, meaning each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all three integers'\n    Explanation: The largest number in the sorted array b is the sum of all three integers in the original array a. This can be implemented in code by identifying the last element of b as the sum of a_1, a_2, and a_3.\n\n# [degree adverb]\n    'largest'\n    Explanation: Refers to the greatest value in the array b, which represents the sum of all elements in array a.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the largest number in b, which is the sum of all three integers in a.\n3. The smallest three numbers in b are the individual elements of a.\n4. Assign these smallest numbers to a_1, a_2, and a_3.\n5. Output the values of a_1, a_2, and a_3 for each test case.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: The smallest three numbers are 1, 1, and 1, which are also the individual elements of a.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: The smallest three numbers are 1000000000, which are also the individual elements of a.\n\n    1 2 3 4 5 6 7 = 1 2 3\n    Explanation: The smallest three numbers are 1, 2, and 3, which are also the individual elements of a.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number as the sum will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from the given sums\n- Ensure the solution is efficient for multiple test cases\n- Handle large integer values up to 10^9\n- Provide output in the correct format\n- Optimize for scalability\nWe will use a simple mathematical approach to restore the original array. Given the sorted array b of sums, the smallest element b[0] is one of the original numbers. The largest element b[6] is the sum of all three original numbers. By subtracting b[0] from b[6], we can find the sum of the other two numbers. Using b[1] and b[2], which are the smallest sums of two numbers, we can deduce the remaining numbers. This approach is efficient and straightforward, suitable for handling up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in non-decreasing order, which means each element is less than or equal to the next.\n\n# [phrase showing quantity relationship]\n    'sum of all three original numbers': This refers to the largest number in the sorted array b, which is the sum of all elements in the original array a.\n\n# [degree adverb]\n    'smallest': Refers to the first element in the sorted array b, which is one of the original numbers in array a.\n    \n    'largest': Refers to the last element in the sorted array b, which is the sum of all three original numbers in array a.\n\n# [code logic]\n1. Identify the smallest element in b, which is one of the original numbers in a.\n2. Identify the largest element in b, which is the sum of all three numbers in a.\n3. Subtract the smallest element from the largest to find the sum of the other two numbers.\n4. Use b[1] and b[2], which are the smallest sums of two numbers, to deduce the remaining numbers.\n5. Return the three numbers as the restored array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are identical, so the original array consists of three identical numbers.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest number is 1, and using b[1] and b[2], we deduce that the other numbers are 2 and 4.\n\n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these scenarios by using the properties of sorted sums and basic arithmetic operations.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid solution exists for each test case.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure output format is strictly followed\n- Optimize for handling large numbers efficiently\n- Scalability to handle up to 5000 test cases\n- Provide clear documentation for the solution\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a efficiently. We will iterate over each test case, extract the necessary elements from b, and print the result.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all combinations of the elements in a.\n\n# [degree adverb] \n    'largest'\n    Explanation: The largest element in b is the sum of all three elements of a. This helps in deducing the original array a.\n\n# [code logic]\n1. For each test case, identify the smallest element in b, which corresponds to one of the elements in a.\n2. Identify the largest element in b, which is the sum of all three elements of a.\n3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n4. Use these identified elements to deduce the original array a.\n5. Print the deduced array a for each test case.\n\n# [edge case] \n    Edge Case 1: b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each element in a is 1.\n\n    Edge Case 2: b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7 (sum of all three). The second largest is 6 (sum of two largest).\n\n    Edge Case 3: b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large and equal, so each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, largest, and second largest elements in b will naturally handle these cases.\n", "requirement analysis:\nThe problem requires reconstructing an array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must handle multiple test cases efficiently and ensure the output format is strictly followed.\nrequirement pool:\n- Implement the main logic to reconstruct the array a from b.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for large integer values.\n- Validate the input to ensure it meets the constraints.\n- Provide detailed comments and documentation for the code.\nWe will leverage the fact that the array b is sorted and represents all possible sums of the non-empty subsequences of a three-element array. The smallest element in b is the smallest element in a, the largest element in b is the sum of all elements in a, and the second largest element in b is the sum of the two largest elements in a. Using these observations, we can reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of elements from the array a, excluding the empty set. For an array of three elements, there are 7 non-empty subsequences.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This means calculating the sum of each possible combination of elements from array a. In code, this involves iterating over combinations and summing their elements.\n\n# [degree adverb]\n    'smallest', 'largest', 'second largest'\n    Explanation: These terms refer to specific elements in the sorted array b. The smallest element corresponds to the smallest element in a, the largest element corresponds to the sum of all elements in a, and the second largest element corresponds to the sum of the two largest elements in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to the smallest element in a.\n    2. Identify the largest element in b, which is the sum of all elements in a.\n    3. Identify the second largest element in b, which is the sum of the two largest elements in a.\n    4. Use these observations to reconstruct array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = [1, 1, 1]\n    Explanation: All elements are equal, so the original array consists of three identical elements.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = [4, 1, 2]\n    Explanation: The smallest element is 1, the largest is 7 (sum of all), and second largest is 6 (sum of two largest).\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = [300000000, 300000000, 300000000]\n    Explanation: All elements are equal and large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using sorted properties and sum relationships.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will use a simple mathematical approach to restore the original array from the given sorted array of sums. Since the array a consists of three integers, the sorted array b will have the smallest element as one of the integers in a, and the largest element as the sum of all three integers. The second smallest element in b will be the sum of the two smallest integers in a. This allows us to deduce the original integers efficiently without needing complex algorithms or data structures.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array a. In code, this means calculating all possible sums of combinations of elements from a.\n\n# [degree adverb]\n    'smallest', 'largest'\n    Explanation: The smallest element in b corresponds to one of the integers in a, and the largest element corresponds to the sum of all three integers in a.\n\n# [code logic]\n    1. Identify the smallest element in b, which corresponds to one of the integers in a.\n    2. Identify the largest element in b, which corresponds to the sum of all three integers in a.\n    3. Use the second smallest element in b to find the sum of the two smallest integers in a.\n    4. Deduce the individual integers from these sums.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, leading to repeated sums.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers with repeated values.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The sequence is straightforward with distinct values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements will suffice for deducing the original array a.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values. The output format is crucial for successful testing.\nrequirement pool:\n- Develop the main algorithm to restore the array from subsequence sums\n- Ensure the solution handles large numbers efficiently\n- Optimize the solution for scalability across multiple test cases\n- Implement accurate output formatting for each test case\n- Provide documentation for understanding the solution approach\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three integers. The key observation is that the smallest three numbers in the sorted array are the individual elements of the original array, and the largest number is the sum of all three elements. Using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: A subsequence is any combination of the array's elements, and the task involves calculating the sum of each possible non-empty subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The resulting array of sums is sorted from smallest to largest.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': Indicates that the original array has exactly three elements, all of which are positive.\n\n    '7 integers': Refers to the number of elements in the sorted array of sums, which corresponds to all possible non-empty subsequences of a 3-element array.\n\n# [degree adverb]\n    'smallest': Refers to the smallest element in the sorted array, which is one of the original integers.\n\n    'largest': Refers to the largest element in the sorted array, which is the sum of all three original integers.\n\n# [code logic]\n1. Identify the smallest three numbers in the sorted array `b`, which correspond to the individual elements of the original array `a`.\n2. Identify the largest number in `b`, which is the sum of all three elements of `a`.\n3. Use these observations to deduce the original array `a`:\n   - Let `a1` be the smallest element in `b`.\n   - Let `a2` be the second smallest element in `b`.\n   - Let `a3` be the largest element minus `a1` and `a2`.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, so each element in `a` is 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7, which is the sum of all three elements.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are equal to a large number, so each element in `a` is that large number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic for deducing the original array from the sorted sums inherently handles these cases.\n"], "scores": [], "pass_results": [false, true, false, false, false, true, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 872, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 491}
