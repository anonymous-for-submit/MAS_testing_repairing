{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged those sums in ascending order. He obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; after sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}. Unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp was in possession of an array a consisting of 3 positive numbers, computed the sums of all non-empty subsequences of this array, arranged them in ascending order, and obtained an array b of 7 numbers. For example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8; unfortunately, Polycarp lost the array a, and he only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\ndef restore_original_array(t: int, test_cases: list[list[int]]) -> list[list[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing an array b of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the three integers of the original array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_original_array(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty subsequences of array a.\n\n    Returns:\n        A tuple of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest element in b is one of the original numbers in a\n    a1 = b[0]\n    # The largest element in b is the sum of all three numbers in a\n    a1_a2_a3 = b[6]\n    # The second largest element in b is the sum of the two largest numbers in a\n    a2_a3 = b[5]\n    \n    # Calculate a2 and a3 using the equations derived from the observations\n    a2 = a2_a3 - a1\n    a3 = a1_a2_a3 - (a1 + a2)\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        a1, a2, a3 = restore_array_from_sums(b)\n        print(a1, a2, a3)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums of non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest number in b is one of the original numbers\n        a1 = b[0]\n        # The largest number in b is the sum of all three original numbers\n        a1_a2_a3 = b[6]\n        # The second smallest number in b is either a1 + a2 or a1 + a3\n        a1_a2 = b[1]\n        # The second largest number in b is either a2 + a3 or a1 + a3\n        a2_a3 = b[5]\n        \n        # Deduce the original numbers\n        a2 = a1_a2 - a1\n        a3 = a1_a2_a3 - a1 - a2\n        \n        # Append the result for this test case\n        results.append([a1, a2, a3])\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = [list(map(int, input().split())) for _ in range(t)]\n    # Call the function and get results\n    results = restore_original_array(t, test_cases)\n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array of three numbers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences\n                       of the original array of three numbers.\n\n    Returns:\n        List[int]: The original array of three numbers.\n    \"\"\"\n    # The smallest number in b is one of the original numbers\n    a1 = b[0]\n    # The largest number in b is the sum of all three original numbers\n    a1_a2_a3 = b[6]\n    # The second smallest number in b is the sum of the smallest number and another original number\n    a1_a2 = b[1]\n    # Deduce the second number\n    a2 = a1_a2 - a1\n    # Deduce the third number\n    a3 = a1_a2_a3 - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing\n                    the sorted sums of all non-empty subsequences of an array a.\n\n    Returns:\n        A list of tuples, each containing 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem statement:\n        # a_1 is the smallest element in b (b[0])\n        # a_2 is the second smallest element in b (b[1])\n        # a_3 is the largest element in b (b[6]) minus a_1 and a_2\n        a_1 = b[0]\n        a_2 = b[1]\n        a_3 = b[6] - a_1 - a_2\n        results.append((a_1, a_2, a_3))\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_test_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_test_cases)]\n    results = restore_array_from_sums(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive numbers from the given sorted array of sums.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers representing the sorted sums.\n\n    Returns:\n        A list of lists, where each inner list contains the three integers of the restored original array.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements (a_1)\n        a_1 = b[0]\n        # The largest element in b is the sum of all three original elements (a_1 + a_2 + a_3)\n        a_1_plus_a_2_plus_a_3 = b[6]\n        # The second smallest element in b is another original element (a_2)\n        a_2 = b[1]\n        # The third smallest element in b is another original element (a_3)\n        a_3 = b[2]\n        \n        # Calculate the third element using the sum property\n        a_3 = a_1_plus_a_2_plus_a_3 - a_1 - a_2\n        \n        # Append the restored array to the results\n        results.append([a_1, a_2, a_3])\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(num_cases)]\n    \n    results = restore_original_array(test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array of three positive integers from the sorted array of subsequence sums.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sorted sums of all non-empty subsequences\n                       of the original array of three positive integers.\n\n    Returns:\n        List[int]: The original array of three positive integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of the original array a.\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a.\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef reconstruct_array(b: list[int]) -> tuple[int, int, int]:\n    \"\"\"Reconstructs the original array a from the given array b.\n\n    Args:\n        b (list[int]): A list of 7 integers representing the sums of all non-empty subsequences of array a.\n\n    Returns:\n        tuple[int, int, int]: A tuple containing the three integers of the original array a.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a.\n    a1, a2, a3 = b[0], b[1], b[2]\n    # The largest number in b is the sum of all three elements of a.\n    # We verify that a1 + a2 + a3 equals the largest number in b.\n    assert a1 + a2 + a3 == b[6], \"The sum of a1, a2, and a3 should match the largest number in b.\"\n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    t = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(t):\n        b = list(map(int, data[index:index+7]))\n        index += 7\n        a1, a2, a3 = reconstruct_array(b)\n        results.append(f\"{a1} {a2} {a3}\")\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of test cases, each containing 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains 3 integers representing the restored array a.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The largest number in b is the sum of all three numbers in a\n        a3 = b[-1]\n        # The smallest three numbers in b are the individual elements of a\n        a1 = b[0]\n        a2 = b[1]\n        # Append the result for this test case\n        results.append([a1, a2, a3 - a1 - a2])\n    return results\n\nif __name__ == \"__main__\":\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output the results\n    for result in results:\n        print(' '.join(map(str, result)))\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of all non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of all non-empty subsequences\n                       of a three-element array a.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest element in b is a_1\n    a_1 = b[0]\n    # The second smallest element in b is a_2\n    a_2 = b[1]\n    # The largest element in b is the sum of all three elements a_1 + a_2 + a_3\n    a_3 = b[6] - a_1 - a_2\n    return [a_1, a_2, a_3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The key observation is that the largest number in the array b is the sum of all elements in array a. The smallest number is one of the elements of a. The second smallest number is another element of a. The third smallest number is the third element of a. By using these observations, we can efficiently deduce the original array a.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Provide output in the correct format\n- Optimize the solution for large numbers\n- Consider edge cases and ensure robustness\nWe will leverage the observation that the largest number in the array b is the sum of all elements in array a. The smallest three numbers in b are the individual elements of a. By using these observations, we can efficiently deduce the original array a. This approach is efficient and works well within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of 3 positive numbers'\n    Explanation: The original array a has exactly three positive integers.\n\n    'array b of 7 numbers'\n    Explanation: Array b contains the sums of all non-empty subsequences of array a, sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that array a has exactly three elements, each greater than zero.\n    \n    '7 numbers': indicates that array b has exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b.\n2. The largest number in b is the sum of all three elements of a.\n3. The smallest three numbers in b are the individual elements of a.\n4. Deduce the elements of a by using the smallest three numbers and the largest number in b.\n5. Output the three elements of a for each test case.\n\n# [edge case] \n    Edge cases are not explicitly defined in the requirement, but we can consider:\n    \n    1. b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n       Explanation: All elements are the same, so each element in a is 1.\n       \n    2. b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n       Explanation: The smallest three numbers are 1, 2, and 3. The largest number is 7 (sum of all elements).\n       \n    3. b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n       Explanation: All elements are large and equal, so each element in a is 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic will handle these cases correctly by using the smallest three numbers and the largest number in b to deduce a.\n", "requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is consistent and clear.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Ensure scalability for multiple test cases\n- Handle large integer values efficiently\n- Provide clear and accurate output format\n- Optimize memory usage\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original numbers in array a. The largest element in b is the sum of all three numbers in a. The second largest element in b is the sum of the two largest numbers in a. By using these observations, we can deduce the original array a from b. We will iterate over each test case, extract the necessary elements from b, and reconstruct a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of the elements except the empty set.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a consists of exactly three numbers, all greater than zero.\n    '7 numbers': indicates that the array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which is one of the original numbers in array a.\n    'largest': refers to the largest element in array b, which is the sum of all three numbers in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest element in b, which corresponds to one of the original numbers in a.\n    2. Identify the largest element in b, which is the sum of all three numbers in a.\n    3. Identify the second largest element in b, which is the sum of the two largest numbers in a.\n    4. Use these observations to deduce the original numbers in a:\n       - Let a1 be the smallest element in b.\n       - Let a2 + a3 be the second largest element in b.\n       - Let a1 + a2 + a3 be the largest element in b.\n    5. Calculate a2 and a3 using these equations:\n       - a2 = (a2 + a3) - a1\n       - a3 = (a1 + a2 + a3) - (a1 + a2)\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are equal, indicating that all original numbers are equal.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 4 1 2\n    Explanation: The smallest number is 1, and the largest number is 7. The second largest number is 6, which is the sum of two largest numbers (4 and 2).\n\n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are multiples of 300000000, indicating that all original numbers are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these scenarios by correctly identifying and reconstructing array a from array b.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values efficiently\n- Provide output in the correct format\n- Optimize for edge cases\nWe will implement a function that takes the sorted array of sums of non-empty subsequences and restores the original array of three positive integers. The key observation is that the smallest element in the sorted array b is one of the original numbers, and the largest element is the sum of all three original numbers. Using these observations, we can deduce the original numbers efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which helps in identifying the smallest and largest sums.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The original array a consists of exactly three positive integers.\n    '7 numbers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': The smallest number in array b is one of the original numbers in array a.\n    'largest': The largest number in array b is the sum of all three numbers in array a.\n\n# [code logic]\n1. Identify the smallest number in array b, which corresponds to one of the original numbers in array a.\n2. Identify the largest number in array b, which is the sum of all three numbers in array a.\n3. Use the second smallest and second largest numbers in array b to deduce the other two numbers in array a.\n4. Return the three numbers as the restored array a.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, leading to identical subsequences.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest number is 1, and the largest is 7. Using these, we deduce the original numbers.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are identical, leading to identical subsequences.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the sorted nature of array b and deducing the original numbers from it.\n", "requirement analysis:\nThe problem requires restoring an original array of three positive integers from a given sorted array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring that the output is correct and produced in a timely manner.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the subsequence sums.\n- Ensure the solution is optimized for handling the maximum constraints.\n- Design a user-friendly interface for input and output.\n- Provide clear documentation and instructions for users.\n- Include error handling for invalid inputs.\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three numbers. The key observation is that the smallest number in the sorted array is one of the original numbers, and the largest number is the sum of all three original numbers. By using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a': The original array consisting of 3 positive numbers.\n    'array b': The array of sums of all non-empty subsequences of array a, sorted in ascending order.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': Indicates that the original array a consists of exactly three numbers, all greater than zero.\n    '7 numbers': Refers to the number of elements in array b, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest number in array b, which is one of the original numbers in array a.\n2. Identify the largest number in array b, which is the sum of all three numbers in array a.\n3. Use the smallest and largest numbers to deduce the other two numbers in array a by considering the remaining sums in array b.\n4. Return the three numbers as the restored array a.\n\n# [edge case]\n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are either 1 or sums of 1s, indicating that the original array consists of three 1s.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest number is 1, and the largest is 7. The other two numbers can be deduced as 2 and 4.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are either 1000000000 or sums of it, indicating that the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles these cases by using the smallest and largest values to deduce the original numbers.\n", "requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large numbers, ensuring accurate and clear output for each test case.\nrequirement pool:\n- Efficiently compute the original array from subsequence sums\n- Handle large numbers and multiple test cases\n- Ensure output clarity and accuracy\n- Optimize for performance\n- Provide user-friendly input and output format\nWe will solve the problem by leveraging the properties of the sorted array b. Since b is the sorted list of all non-empty subsequences of a, we can deduce that the smallest element in b is a_1, the second smallest is a_2, and the largest element is a_1 + a_2 + a_3. Using these properties, we can efficiently reconstruct the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a consists of exactly three elements, all of which are positive integers.\n    '7 numbers': indicates that the array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in the sorted array b, which corresponds to one of the elements in array a.\n    'largest': refers to the largest element in the sorted array b, which corresponds to the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, read the array b.\n    2. Identify a_1 as the smallest element in b (b[0]).\n    3. Identify a_2 as the second smallest element in b (b[1]).\n    4. Identify a_3 using the largest element in b (b[6]) and subtracting a_1 and a_2 from it.\n    5. Output the values of a_1, a_2, and a_3.\n\n# [edge case]\n    b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest element is 1, second smallest is also 1, and the largest element is 1000000000. Therefore, a_3 = 1000000000 - 1 - 1 = 999999998.\n    \n    b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n    b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest element is 1, second smallest is 2, and the largest element is 5. Therefore, a_3 = 5 - 1 - 2 = 2.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly handles all possible configurations of array b based on its properties.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three numbers from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring that the output is correct and formatted as specified.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given subsequence sums.\n- Ensure the solution is optimized for handling the maximum constraints.\n- Provide clear and concise output for each test case.\n- Include error handling for unexpected input formats.\n- Optimize the code for readability and maintainability.\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements a_1, a_2, or a_3. The largest element in b is the sum of all three original elements. By using these properties, we can deduce the original array a by selecting the appropriate elements from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted array'\n    Explanation: The array b is sorted in ascending order, which means the elements are arranged from the smallest to the largest.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The original array a consists of exactly three numbers, all of which are greater than zero.\n    \n    '7 numbers': The array b consists of exactly seven numbers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': Refers to the first element in the sorted array b, which is one of the original elements a_1, a_2, or a_3.\n    \n    'largest': Refers to the last element in the sorted array b, which is the sum of all three original elements a_1 + a_2 + a_3.\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. Identify the smallest element in b as one of the original elements (let's call it a_1).\n3. Identify the largest element in b as the sum of all three original elements (a_1 + a_2 + a_3).\n4. Use the properties of sums to deduce the other two elements:\n   - The second smallest element in b is another original element (a_2).\n   - The third smallest element in b is another original element (a_3).\n5. Return these three elements as the restored array a.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, and the largest is 8. The other two elements are deduced from the remaining sums.\n    \n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, and the largest is 7. The other two elements are deduced from the remaining sums.\n    \n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each original element is equal to the smallest element.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic inherently handles all possible configurations due to the constraints provided.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a given sorted array of subsequence sums. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate and clear output for each test case.\nrequirement pool:\n- Develop a function to restore the original array from subsequence sums\n- Ensure the solution can handle up to 5000 test cases efficiently\n- Optimize the algorithm for large integer values\n- Provide clear and concise output for each test case\n- Implement error handling for invalid inputs\nWe will implement a function that takes the sorted array of subsequence sums and deduces the original array of three positive integers. The key observation is that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. Using these observations, we can efficiently restore the original array.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequence'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the array elements.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': The original array consists of exactly three positive integers.\n    '7 numbers': The resulting array from the sums of all non-empty subsequences contains exactly seven numbers.\n\n# [degree adverb]\n    'smallest': The smallest three numbers in the sorted array b are the individual elements of the original array a.\n    'largest': The largest number in b is the sum of all three elements of a.\n\n# [code logic]\n    1. For each test case, read the array b of 7 integers.\n    2. Identify the smallest three numbers in b, which correspond to the individual elements of a.\n    3. Identify the largest number in b, which is the sum of all three elements of a.\n    4. Use these observations to deduce the original array a.\n    5. Print the three integers of array a for each test case.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are equal, and their subsequences sum up to the same values repeatedly.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The smallest three numbers are 1, 2, and 3, and the largest number is the sum of all three, which is 7.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their subsequences sum up to the same values repeatedly.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number in b will suffice to deduce array a correctly.\n", "requirement analysis:\nThe problem requires reconstructing an array of three positive integers from the sums of all its non-empty subsequences. The input constraints ensure that a valid solution always exists. The solution must efficiently handle up to 5000 test cases with large integer values.\nrequirement pool:\n- Implement the main algorithm to reconstruct the array a from b.\n- Optimize the solution to handle the maximum input size efficiently.\n- Ensure the solution is robust and handles edge cases.\n- Provide clear and concise output for each test case.\n- Document the solution approach and edge cases considered.\nWe will implement a function that reconstructs the original array a from the given array b. The key observation is that the smallest three numbers in b are the elements of a, and the largest number in b is the sum of all three elements of a. This allows us to deduce the values of a directly from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'array a consisting of 3 positive numbers'\n    Explanation: The original array a has exactly three elements, all of which are positive integers.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a has exactly three elements, each greater than zero.\n    \n    '7 numbers': indicates that the array b has exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the array b of 7 integers.\n2. The smallest three numbers in b are the individual elements of a.\n3. The largest number in b is the sum of all three elements of a.\n4. To find the original array a, use the following logic:\n   - Let a1, a2, and a3 be the smallest three numbers in b.\n   - The largest number in b is a1 + a2 + a3.\n5. Return the three numbers as the reconstructed array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements in b are either 1 or sums of 1s. The original array a must be [1, 1, 1].\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements in b are either 1000000000 or sums of 1000000000s. The original array a must be [1000000000, 1000000000, 1000000000].\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are 1, 2, and 3. The largest number is their sum (7), so the original array a must be [1, 2, 4].\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of selecting the smallest three numbers and verifying with the largest sum inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring an original array of three positive integers from a given array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases and ensure the output format is strictly followed.\nrequirement pool:\n- Restore the original array from subsequence sums\n- Handle up to 5000 test cases efficiently\n- Ensure output format is correct\n- Optimize for large integer values\n- Provide clear documentation for the solution\nWe will implement a function that takes the array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the largest number in b is the sum of all three numbers in a, and the smallest three numbers in b are the individual elements of a. This allows us to efficiently reconstruct a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where elements are selected without changing their order. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n    'positive numbers'\n    Explanation: All numbers in the array are greater than zero.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array, excluding the empty set. In code, this can be implemented by iterating through combinations of elements and summing them.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array b is the sum of all three numbers in array a. This helps identify the total sum of the original array.\n\n# [code logic]\n    1. Identify the largest number in array b, which represents the sum of all three numbers in array a.\n    2. The smallest three numbers in array b are the individual elements of array a.\n    3. Use these observations to reconstruct array a from array b.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are identical, and their sums are repeated. The smallest three numbers are the individual elements of a.\n    \n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Large identical numbers where each element is repeated. The smallest three numbers are the individual elements of a.\n    \n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are the individual elements of a. The largest number is the sum of all three.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the largest number and smallest three numbers in b suffices to reconstruct a correctly.\n", "requirement analysis:\nThe task requires restoring the original array from the given sorted sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, ensuring that the output format is strictly followed. The constraints guarantee that a valid array exists for each test case, simplifying the restoration process.\nrequirement pool:\n- Restore the original array from the given subsequence sums\n- Ensure the solution handles up to 5000 test cases efficiently\n- Provide output in the correct format for each test case\n- Optimize the solution for large numbers\n- Consider edge cases and ensure robustness\nWe will leverage the fact that the array b is sorted and represents all possible sums of non-empty subsequences of a three-element array a. The smallest element in b is a_1, the second smallest is a_2, and the largest element is the sum of all three elements a_1 + a_2 + a_3. Using these observations, we can deduce the original array a by simple arithmetic operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that we consider all possible combinations of elements except the empty set.\n\n# [phrase showing quantity relationship]\n    '3 positive numbers': indicates that the array a consists of exactly three elements, all of which are positive integers.\n    '7 numbers': indicates that the array b consists of exactly seven elements, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to one of the elements in array a.\n    'largest': refers to the largest element in array b, which is the sum of all three elements in array a.\n\n# [code logic]\n    1. For each test case, read the sorted array b.\n    2. Identify a_1 as the smallest element in b (b[0]).\n    3. Identify a_2 as the second smallest element in b (b[1]).\n    4. Calculate a_3 using the largest element in b: a_3 = b[6] - a_1 - a_2.\n    5. Output the values of a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are identical, and their sums match the pattern described.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large identical numbers, demonstrating handling of large values.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 4 1 2\n    Explanation: The sequence is straightforward with distinct values.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic correctly handles all possible configurations of array b based on its sorted nature and constraints.\n"], "scores": [], "pass_results": [false, true, true, false, false, false, true, true, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 339, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "condense_two2one", "parent_index": 237}
