{"name": "1618_E. Singers' Tour", "description": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n].\n\nEach singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town. In addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities.\n\nHence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes.\n\nYou are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "tags": ["constructive algorithms", "math"], "difficulty": 11, "id": 1618, "sample_io": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n"]}], "test_list": [{"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n4\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["YES\n3 1 3\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n4\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n4\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n2\n3\n1 2 0\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n2\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n19 16 19\n1\n1\n3\n1 0 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 4 2\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 133 105\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 132 75 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n112 75 75 93 93 124\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 75 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n2\n8 37 80 169 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n2\n1 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 19 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 0\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 184 129 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 4 3\n6\n13 75 32 4 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 93 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 93 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 155 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 18 14\n1\n1\n3\n1 2 1\n6\n62 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 93 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n1 1 3\n6\n8 75 75 82 16 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 87\n", "output": ["NO\nYES\n1\nNO\nYES\n5 5 4 1 4 5\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 2 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n8 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n3\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 2 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 6\n6\n8 75 32 50 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 64 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 119 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n6\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n4 16 7\n1\n1\n3\n1 2 3\n6\n14 75 119 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 22\n1\n1\n3\n1 2 2\n6\n81 75 75 93 93 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n1\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 75 32 50 16 2\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 75 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 75 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 75 75 93 93 -1\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 42 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n24 10 3\n1\n1\n3\n2 2 1\n6\n81 138 75 184 93 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n1\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 42 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 75 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n6\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 2 3\n6\n8 75 75 93 21 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 240 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 75 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 84 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 75 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 119 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 93 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 27\n1\n1\n3\n0 0 3\n6\n8 75 75 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 119 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n8 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 3\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 75 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 75 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 0 3\n6\n8 75 112 93 49 15\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 82 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n8 16 4\n1\n2\n3\n1 2 3\n6\n16 75 119 93 93 111\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n22 16 7\n1\n1\n2\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n16 16 14\n1\n1\n3\n2 2 3\n6\n8 39 4 82 133 20\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 3 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 49 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 1\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 24\n1\n1\n3\n0 4 3\n6\n8 75 32 91 3 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 32 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n0 0 3\n6\n2 75 202 179 91 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n2 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 4 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n13 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n10 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n8 75 119 93 15 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 13\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 93 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n13 16 14\n1\n1\n3\n1 1 3\n6\n8 75 104 50 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 19 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 1 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 14\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n2\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n6 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 93 38 140\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 4 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 75 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 2 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n1 2 1\n6\n81 75 75 37 81 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 3\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 62 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 0 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n22 22 7\n1\n1\n3\n1 2 3\n6\n14 75 202 179 49 39\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 47 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 3\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n8 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 3\n6\n3 75 202 179 55 4\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n0 16 6\n1\n2\n3\n0 2 3\n6\n8 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n0 2 3\n6\n13 53 32 2 4 6\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n1\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 88 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 109 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n1 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 75 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n11 16 28\n1\n1\n3\n1 2 3\n6\n14 102 38 179 49 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n11 37 80 8 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 25\n1\n1\n3\n1 0 3\n6\n8 75 143 93 5 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n2 1 4\n6\n12 81 144 82 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n19 16 14\n1\n1\n2\n1 0 3\n6\n10 37 80 169 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 4\n1\n1\n3\n1 1 2\n6\n8 21 119 93 167 111\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 2 1\n6\n8 35 12 41 133 87\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 -1 4\n3\n8 75 75 133 133 133\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n1 1 8\n6\n8 75 76 82 133 117\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n2\n3\n0 6 3\n6\n8 75 32 50 3 169\n", "output": ["YES\n3 1 3\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n2\n3\n1 2 2\n6\n14 75 202 176 57 39\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 10 4\n1\n1\n3\n1 2 2\n6\n81 93 75 93 29 0\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 22\n1\n1\n2\n0 2 3\n6\n13 75 28 91 3 6\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 7\n1\n3\n3\n1 1 1\n6\n2 75 202 179 72 39\n", "output": ["NO\nYES\n3\nNO\nNO\n"]}, {"input": "4\n3\n12 10 14\n1\n2\n3\n0 4 3\n4\n26 75 32 4 3 6\n", "output": ["NO\nYES\n2\nNO\nNO\n"]}, {"input": "4\n3\n12 17 14\n1\n1\n3\n1 2 3\n6\n0 75 75 27 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n14 19 23\n1\n1\n3\n1 2 3\n6\n8 136 80 93 133 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 26 14\n1\n1\n3\n0 2 3\n6\n8 16 119 141 64 87\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 6 14\n1\n1\n3\n2 2 2\n6\n8 42 80 181 133 150\n", "output": ["NO\nYES\n1\nNO\nNO\n"]}, {"input": "4\n3\n12 16 14\n1\n1\n3\n1 0 6\n6\n8 141 75 82 41 77\n", "output": ["YES\n3 1 3\nYES\n1\nNO\nNO\n"]}], "task_id": "codecontest/136", "prompt": "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town; in addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "repair_prompt": ["n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town; in addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially. The towns are numbered from 1 to n in clockwise order. In the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order. They started with the town he lives in and gave exactly one concert in each town; in addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire so that he could perform it in the rest of the cities. Hence, for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "n towns are arranged in a circle sequentially, numbered from 1 to n in clockwise order, and in the i-th town, there lives a singer with a repertoire of a_i minutes for each i \u2208 [1, n]. Each singer visited all n towns in clockwise order, starting with the town he lives in, and gave exactly one concert in each town; in addition, in each town, the i-th singer got inspired and came up with a song that lasts a_i minutes. The song was added to his repertoire for performance in the remaining cities, so for the i-th singer, the concert in the i-th town will last a_i minutes, in the (i + 1)-th town the concert will last 2 \u22c5 a_i minutes, ..., in the ((i + k) mod n + 1)-th town the duration of the concert will be (k + 2) \u22c5 a_i, ..., in the town ((i + n - 2) mod n + 1) \u2014 n \u22c5 a_i minutes. You are given an array of b integer numbers, where b_i is the total duration of concerts in the i-th town. Reconstruct any correct sequence of positive integers a or say that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. "], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case where there is only one town\n            results.append(\"YES\")\n            results.append(f\"{b[0]}\")\n            continue\n        \n        # Initialize the sequence a with zeros\n        a = [0] * n\n        \n        # Attempt to reconstruct the sequence a\n        possible = True\n        for i in range(n):\n            if b[i] % n != 0:\n                possible = False\n                break\n            a[i] = b[i] // n\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or determines if it's impossible.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing the number of towns and a list of total concert durations.\n\n    Returns:\n        A list of strings, each being \"YES\" followed by the sequence or \"NO\" if impossible.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_sum = sum(b)\n        \n        # Check if the total sum of b is divisible by n\n        if total_sum % n != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the sum of initial repertoires\n        sum_a = total_sum // n\n        \n        # Calculate the sequence a\n        a = [0] * n\n        valid = True\n        \n        for i in range(n):\n            if (sum_a - b[i]) % (n - 1) != 0:\n                valid = False\n                break\n            a[i] = (b[i] - (sum_a - b[i]) // (n - 1))\n            if a[i] <= 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either 'YES' followed by the sequence or 'NO'.\n    \"\"\"\n    results = []\n\n    for n, b in test_cases:\n        # Initialize the sequence of initial repertoire durations\n        a = [0] * n\n        possible = True\n\n        # Attempt to reconstruct the sequence\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_a = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n                if (total_a - diff) % n != 0 or total_a - diff <= 0:\n                    possible = False\n                    break\n                a[i] = (total_a - diff) // n\n\n        # Append the result for the current test case\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Read number of test cases\n    t = int(input())\n\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n\n    # Call the function\n    results = reconstruct_sequence(t, test_cases)\n\n    # Output interface\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case: Only one town\n            results.append((\"YES\", [b[0]]))\n            continue\n        \n        # Check if it's possible to find a valid sequence\n        possible = True\n        a = [0] * n\n        \n        # Check if all b[i] % n are the same\n        for i in range(n):\n            if b[i] % n != b[0] % n:\n                possible = False\n                break\n        \n        if not possible:\n            results.append((\"NO\", []))\n            continue\n        \n        # Calculate possible sequence\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append((\"NO\", []))\n            continue\n        \n        total_a_sum = total_sum // (n * (n + 1) // 2)\n        \n        for i in range(n):\n            diff = b[i] - b[i - 1]\n            a[i] = (total_a_sum - diff) // n\n            \n            if a[i] <= 0 or (total_a_sum - diff) % n != 0:\n                possible = False\n                break\n        \n        if possible:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n    \n    return results\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        b = list(map(int, data[index:index + n]))\n        index += n\n        test_cases.append((n, b))\n    \n    results = reconstruct_repertoire(t, test_cases)\n    \n    for result in results:\n        print(result[0])\n        if result[0] == 'YES':\n            print(' '.join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            # Edge case where there is only one town\n            if b[0] > 0:\n                results.append(\"YES\")\n                results.append(f\"{b[0]}\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Attempt to reconstruct the sequence of initial repertoire durations\n        a = [0] * n\n        total_sum = sum(b)\n        \n        # Calculate the sum of the arithmetic progression\n        if total_sum % (n * (n + 1) // 2) != 0:\n            results.append(\"NO\")\n            continue\n        \n        # Calculate the initial sum of durations\n        initial_sum = total_sum // (n * (n + 1) // 2)\n        \n        # Check if a valid sequence can be derived\n        valid = True\n        for i in range(n):\n            a[i] = (b[i] - b[i - 1] + initial_sum) // n\n            if a[i] <= 0 or (b[i] - b[i - 1] + initial_sum) % n != 0:\n                valid = False\n                break\n        \n        if valid:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_repertoire(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial song durations or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence.\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        total_duration = sum(b)\n        \n        # Check if the sum of concert durations is divisible by n\n        if total_duration % n != 0:\n            results.append(\"NO\")\n        else:\n            # Calculate the initial repertoire using sum(b) / n\n            initial_repertoire_sum = total_duration // n\n            a = []\n            valid = True\n            \n            for duration in b:\n                # Calculate a_i using the derived formula\n                a_i = (duration - (total_duration - duration) // (n - 1)) // n\n                if a_i <= 0:\n                    valid = False\n                    break\n                a.append(a_i)\n            \n            if valid and len(a) == n:\n                results.append(\"YES\")\n                results.append(\" \".join(map(str, a)))\n            else:\n                results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            if b[0] == 1:\n                results.append(\"YES\")\n                results.append(\"1\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Initialize the sequence a with zeros\n        a = [0] * n\n        possible = True\n        \n        # Calculate the sequence a\n        for i in range(n):\n            # Calculate the sum of b[i] and b[i-1] (circularly)\n            total = b[i] + b[i - 1 if i > 0 else n - 1]\n            \n            # Check if total is even\n            if total % 2 != 0:\n                possible = False\n                break\n            \n            # Calculate a[i]\n            a[i] = total // 2\n        \n        # Verify the calculated sequence a\n        if possible:\n            valid = True\n            for i in range(n):\n                # Calculate the expected b[i] from a\n                expected_b = a[i] + a[i - 1 if i > 0 else n - 1]\n                if expected_b != b[i]:\n                    valid = False\n                    break\n            \n            if valid:\n                results.append(\"YES\")\n                results.append(\" \".join(map(str, a)))\n            else:\n                results.append(\"NO\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[Tuple[str, List[int]]]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations for singers based on concert durations in towns.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of concert durations.\n\n    Returns:\n        List[Tuple[str, List[int]]]: List of results for each test case, either \"NO\" or \"YES\" followed by the sequence of initial repertoire durations.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n, b = case\n        \n        if n == 1:\n            # Edge case where there is only one town\n            results.append((\"YES\", [b[0]]))\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate a[0] based on b[0] and b[n-1]\n        a[0] = (b[0] - b[n-1] + b[n-2]) // n\n        \n        # Calculate remaining a[i] based on b[i]\n        for i in range(1, n):\n            a[i] = (b[i] - b[i-1] + b[i-2]) // n\n        \n        # Validate if calculated a satisfies all conditions\n        for i in range(n):\n            if a[i] <= 0 or a[i] > 10**9:\n                possible = False\n                break\n        \n        if possible:\n            results.append((\"YES\", a))\n        else:\n            results.append((\"NO\", []))\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result[0])\n        if result[0] == \"YES\":\n            print(\" \".join(map(str, result[1])))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_sequence(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the initial repertoire durations for each test case or determines if it's impossible.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the list of total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n\n    for case in test_cases:\n        n, b = case\n        a = [0] * n\n        possible = True\n\n        # Attempt to reconstruct sequence a\n        total_sum = sum(b)\n        if total_sum % (n * (n + 1) // 2) != 0:\n            possible = False\n        else:\n            total_a = total_sum // (n * (n + 1) // 2)\n            for i in range(n):\n                diff = b[i] - b[i - 1] if i > 0 else b[i] - b[n - 1]\n                if (diff + total_a) % n != 0 or (diff + total_a) <= 0:\n                    possible = False\n                    break\n                a[i] = (diff + total_a) // n\n\n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input().strip())\n    test_cases = []\n    for _ in range(t):\n        n = int(input().strip())\n        b = list(map(int, input().strip().split()))\n        test_cases.append((n, b))\n\n    # Output interface\n    results = reconstruct_sequence(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef reconstruct_repertoire_durations(t: int, test_cases: List[Tuple[int, List[int]]]) -> List[str]:\n    \"\"\"Reconstructs the sequence of initial repertoire durations based on the given total concert durations in each town.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[Tuple[int, List[int]]]): List of test cases, each containing the number of towns and the total concert durations.\n\n    Returns:\n        List[str]: List of results for each test case, either \"YES\" followed by the sequence or \"NO\".\n    \"\"\"\n    results = []\n    \n    for n, b in test_cases:\n        if n == 1:\n            if b[0] == 1:\n                results.append(\"YES\\n1\")\n            else:\n                results.append(\"NO\")\n            continue\n        \n        # Initialize the array to store the initial repertoire durations\n        a = [0] * n\n        \n        # Attempt to reconstruct the sequence\n        valid = True\n        for i in range(n):\n            if b[i] % n != 0:\n                valid = False\n                break\n            a[i] = b[i] // n\n        \n        if valid:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        b = list(map(int, input().split()))\n        test_cases.append((n, b))\n    \n    results = reconstruct_repertoire_durations(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring accurate reconstruction or determining impossibility.\nrequirement pool:\n- Efficiently handle multiple test cases\n- Accurately reconstruct sequence a or determine impossibility\n- Optimize for large input sizes\n- Ensure output format is clear and concise\n- Provide user-friendly input and output handling\nWe will use a mathematical approach to reconstruct the sequence a based on the given constraints. The key is to understand the pattern of how each singer's repertoire grows as they visit each town. We will leverage efficient algorithms to handle large input sizes and ensure the solution is optimized for performance. The solution will involve iterating over the towns and calculating the possible values for a_i using the given b_i values.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting their tour.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': indicates that the concert duration doubles as the singer moves to the next town.\n    '(k + 2) \u22c5 a_i': shows that the concert duration increases by a factor of (k + 2) as the singer moves to the k-th town.\n    'n \u22c5 a_i': indicates that the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns n and the list of total concert durations b.\n    2. Initialize an array a to store the initial repertoire durations for each singer.\n    3. For each town, calculate the possible initial repertoire a_i using the given b_i values.\n    4. Check if the calculated sequence a satisfies all conditions for concert durations in each town.\n    5. If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Output: YES\n    Explanation: With only one town and one singer, the initial repertoire can be exactly 1 minute.\n\n    Test case with n = 3 and b = [1, 2, 3]:\n    Output: NO\n    Explanation: The sequence cannot be reconstructed as no valid initial repertoire satisfies all conditions.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]:\n    Output: YES\n    Explanation: A valid sequence can be reconstructed as shown in the example.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be reconstructed.\n        if n == 1:\n            print(\"YES\")\n            print(b[0])\n        else:\n            # Implement logic to check if a valid sequence can be reconstructed\n            # If not, print \"NO\"\n            # Otherwise, print \"YES\" followed by the sequence a\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle up to 200,000 total cities across all test cases, ensuring that the output is correct and adheres to the specified format. Edge cases, such as minimal and maximal values, must be considered.\nrequirement pool:\n- Develop an efficient algorithm to reconstruct the sequence a from b.\n- Ensure the solution handles the maximum constraints effectively.\n- Provide clear and concise output for each test case.\n- Consider edge cases and ensure robustness of the solution.\n- Optimize the solution for speed and memory usage.\nWe will use a mathematical approach to reconstruct the sequence a from b. The key observation is that the sum of the sequence a_i multiplied by the number of towns should match the total duration b_i for each town. We will iterate over each test case, calculate the possible sequence a, and check if it satisfies the conditions. If it does, we output the sequence; otherwise, we output NO.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the tour.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Calculate the sum of b_i for all towns.\n    3. Check if this sum is divisible by n (number of towns). If not, print \"NO\".\n    4. If divisible, calculate a_i = b_i / n for each town.\n    5. Verify if the calculated sequence satisfies all conditions.\n    6. Print \"YES\" and the sequence if valid; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Expected output: YES, 1\n    Explanation: With only one town, the singer's repertoire matches the total concert duration directly.\n\n    Test case with n = 3 and b = [1, 2, 3]:\n    Expected output: NO\n    Explanation: The sum of b_i is not divisible by n, making it impossible to reconstruct a valid sequence.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]:\n    Expected output: YES, 5 5 4 1 4 5\n    Explanation: The sequence satisfies the condition where each singer's concert duration matches the total duration in each town.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases where the sum of b_i is not divisible by n.\n        if sum(b) % n != 0:\n            print(\"NO\")\n        else:\n            # Calculate and verify sequence logic\n            # (other code)\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the solution is efficient given the large possible input size. The solution must handle edge cases where no valid sequence exists and output 'NO' accordingly. The problem also allows for multiple valid sequences, so the solution should be flexible in its approach.\nrequirement pool:\n- Develop an efficient algorithm to solve the problem for large inputs.\n- Ensure the solution handles edge cases and outputs 'NO' when necessary.\n- Optimize the solution for performance and memory usage.\n- Provide clear and concise output as per the requirements.\n- Document the solution for ease of understanding and maintenance.\nWe will use a mathematical approach to reconstruct the sequence of integers based on the given constraints. The key is to understand the pattern of how the concert durations are calculated and reverse-engineer the sequence. We will iterate over each test case, calculate the possible initial repertoire durations, and check if they satisfy the conditions. If no valid sequence exists, we will output 'NO'. We will use efficient algorithms to handle large inputs and ensure the solution is robust.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the concerts.\n    'concert duration': refers to the total time a singer performs in each town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations for each town.\n    - Initialize an array to store the initial repertoire durations for each singer.\n    - Use mathematical deduction to reverse-engineer the sequence of initial repertoire durations from the given total concert durations.\n    - Check if the calculated sequence satisfies all conditions for each town.\n    - If a valid sequence is found, print 'YES' followed by the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Explanation: The only singer has a repertoire of 1 minute, and since there's only one town, the concert duration matches exactly.\n    \n    Test case with n = 3 and b = [1, 2, 3]:\n    Explanation: It's impossible to find a valid sequence because the concert durations do not match any possible pattern of increasing multiples of initial repertoire.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]:\n    Explanation: A valid sequence exists where each singer's concert durations match the given totals.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be found. This involves checking if the calculated sequence matches the expected pattern for all towns. If not, output 'NO'.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations for singers based on the total concert durations in each town. The solution must handle multiple test cases efficiently, especially given the constraints on input size. The output must clearly indicate whether a solution is possible and provide the sequence if it exists.\nrequirement pool:\n- Implement the main algorithm to reconstruct the sequence of initial repertoire durations.\n- Ensure the solution handles edge cases and large inputs efficiently.\n- Provide clear and correct output format for each test case.\n- Optimize the solution for performance and memory usage.\n- Include comprehensive test cases to validate the solution.\nWe will use a mathematical approach to solve the problem by analyzing the pattern of concert durations. The key is to find a sequence of initial repertoire durations that can generate the given total concert durations in each town. We will iterate over possible values and check if they satisfy the conditions. Given the constraints, the solution should be efficient and handle large inputs. We will use basic Python libraries for input and output handling.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence of towns wraps around. This affects how the concerts are calculated as each singer performs in a circular manner.\n\n    'repertoire growth'\n    Explanation: Each singer's repertoire grows as they perform in each town, adding the duration of their initial repertoire to their total for subsequent performances.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n    Implementation: Use a loop to calculate the concert duration for each town based on the initial repertoire and its growth.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list of total concert durations `b`.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate the possible initial repertoire `a_i` by considering the total concert duration `b_i` and the pattern of growth.\n4. Check if the calculated sequence `a` can generate the given total durations `b` by simulating the concert durations in a circular manner.\n5. If a valid sequence is found, print \"YES\" followed by the sequence `a`. If no valid sequence exists, print \"NO\".\n\n# [edge case]\n    1. Input: 1\n       1\n       Output: YES\n       Explanation: With only one town and one concert duration, any positive integer that matches `b_1` can be used as `a_1`.\n\n    2. Input: 3\n       1 1 1\n       Output: NO\n       Explanation: It's impossible to have a sequence where each town's total duration is 1 with more than one town.\n\n    3. Input: 4\n       4 4 4 4\n       Output: YES\n       Explanation: Each singer can have an initial repertoire of 1, leading to a total duration of 4 in each town.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where it's impossible to find a valid sequence.\n    ```python\n    def solve():\n        import sys\n        input = sys.stdin.read\n        data = input().split()\n        \n        index = 0\n        t = int(data[index])\n        index += 1\n        \n        results = []\n        \n        for _ in range(t):\n            n = int(data[index])\n            index += 1\n            b = list(map(int, data[index:index + n]))\n            index += n\n            \n            if n == 1:\n                results.append(f\"YES\\n{b[0]}\")\n                continue\n            \n            # Check if it's possible to find a valid sequence\n            possible = True\n            a = [0] * n\n            \n            for i in range(n):\n                if b[i] % n != b[0] % n:\n                    possible = False\n                    break\n            \n            if not possible:\n                results.append(\"NO\")\n                continue\n            \n            # Calculate possible sequence\n            total_sum = sum(b)\n            if total_sum % (n * (n + 1) // 2) != 0:\n                results.append(\"NO\")\n                continue\n            \n            total_a_sum = total_sum // (n * (n + 1) // 2)\n            \n            for i in range(n):\n                diff = b[i] - b[i - 1]\n                a[i] = (total_a_sum - diff) // n\n                \n                if a[i] <= 0 or (total_a_sum - diff) % n != 0:\n                    possible = False\n                    break\n            \n            if possible:\n                results.append(f\"YES\\n{' '.join(map(str, a))}\")\n            else:\n                results.append(\"NO\")\n        \n        sys.stdout.write(\"\\n\".join(results) + \"\\n\")\n    ```\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations for singers based on the total concert durations in each town. The solution must efficiently handle up to 200,000 towns across all test cases, ensuring that the constraints are respected. The output must clearly indicate whether a solution is possible and provide the sequence if it exists.\nrequirement pool:\n- Efficiently handle large input sizes within constraints.\n- Provide correct and clear output for each test case.\n- Consider edge cases where no solution is possible.\n- Ensure the solution is optimized for performance.\n- Allow flexibility in the sequence of initial repertoire durations if multiple solutions exist.\nWe will iterate over each test case and attempt to reconstruct the sequence of initial repertoire durations for each singer. The key observation is that the total duration of concerts in each town is the sum of an arithmetic progression. We need to find a sequence of initial durations such that the sum of these progressions matches the given total durations. If such a sequence exists, we output it; otherwise, we output 'NO'. The solution must be efficient to handle the constraints, so we will use a mathematical approach to derive the sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'arithmetic progression'\n    Explanation: The total duration of concerts in each town is the sum of an arithmetic progression, where each singer's concert duration increases by a fixed amount as they move from town to town.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial duration.\n    'k + 2 \u22c5 a_i': This shows that the concert duration increases by a factor of (k + 2) times the initial duration as the singer moves to subsequent towns.\n    Implementation: Use loops and arithmetic operations to calculate the total duration based on these relationships.\n\n# [degree adverb]\n    'total': Refers to the sum of all concert durations in a town.\n    Implementation: Calculate the sum of durations for each singer in each town and compare it with the given total.\n\n# [code logic]\n    - Iterate over each test case.\n    - For each test case, attempt to reconstruct the sequence of initial repertoire durations for each singer.\n    - Use mathematical derivation to find a sequence of initial durations such that the sum of these progressions matches the given total durations.\n    - If a valid sequence is found, output 'YES' followed by the sequence; otherwise, output 'NO'.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Expected output: YES, 1\n    Explanation: With only one town and one singer, the initial duration must be equal to the total duration.\n\n    Test case with n = 3 and b = [1, 2, 3]:\n    Expected output: NO\n    Explanation: It's impossible to find a sequence where the sum of progressions matches these totals.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]:\n    Expected output: YES, 5 5 4 1 4 5\n    Explanation: A valid sequence exists that matches the total durations.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or where no valid sequence can be found.\n        if n == 1:\n            if b[0] > 0:\n                print(\"YES\")\n                print(b[0])\n            else:\n                print(\"NO\")\n        else:\n            # Implement logic to check if a valid sequence can be derived\n            # If not, print \"NO\"\n            # Otherwise, print \"YES\" followed by the sequence\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure the solution is efficient given the large possible input size. The solution must handle multiple test cases and provide a valid sequence or indicate impossibility. The algorithm should be robust to handle edge cases and provide results within the constraints.\nrequirement pool:\n- Develop an efficient algorithm to reconstruct the sequence.\n- Ensure the solution handles the maximum input size within time limits.\n- Provide clear and concise output as per the specified format.\n- Handle edge cases where no valid sequence exists.\n- Optimize the algorithm for better performance.\nWe will use a mathematical approach to reconstruct the sequence of integers. The key observation is that the sum of the durations in each town is a multiple of the sum of the initial durations of the singers. We will use this property to determine if a valid sequence exists and reconstruct it efficiently. We will leverage Python's built-in capabilities for handling large integers and perform calculations to determine the sequence.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before visiting other towns.\n    'concert duration': refers to the total time a singer performs in a town, including newly inspired songs.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    '(k + 2) \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer visits more towns.\n    'n \u22c5 a_i': means the concert duration in the last town is n times the initial repertoire.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of towns and the total concert durations for each town.\n    2. Check if the sum of concert durations is divisible by n, which indicates a possible valid sequence.\n    3. If divisible, reconstruct the sequence using mathematical calculations based on the given relationships.\n    4. If not divisible, print \"NO\" indicating no valid sequence exists.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1: \n    Explanation: The only singer performs for 1 minute, which matches his initial repertoire. Expected output is \"YES\" with sequence \"1\".\n    \n    Test case with n = 3 and b = [1, 2, 3]: \n    Explanation: The sum of b is not divisible by n (6 % 3 != 0), so no valid sequence exists. Expected output is \"NO\".\n    \n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]: \n    Explanation: A valid sequence exists as shown in the example. Expected output is \"YES\" with sequence \"5 5 4 1 4 5\".\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        if sum(b) % n != 0:\n            print(\"NO\")\n        else:\n            # Code to reconstruct sequence a\n            # Example logic:\n            # Calculate initial repertoire using sum(b) / n\n            # Validate and print sequence a if possible\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The solution must efficiently handle multiple test cases and large input sizes, ensuring that the output is correctly formatted and provides a clear answer for each test case.\nrequirement pool:\n- Efficiently handle large input sizes and multiple test cases\n- Ensure accurate reconstruction of sequence a\n- Provide clear and concise output for each test case\n- Optimize performance for high computational efficiency\n- Maintain readability and clarity in code structure\nWe will use a mathematical approach to reconstruct the sequence a based on the given constraints. The key observation is that the sum of the durations in each town is influenced by the initial repertoire of each singer and their subsequent inspirations. We will leverage modular arithmetic to handle the circular arrangement of towns and efficiently compute the sequence a. The solution will iterate over each test case, calculate the possible sequence a, and check if it satisfies the conditions. If not, it will return 'NO'.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'modular arithmetic'\n    Explanation: Used to handle the circular arrangement, ensuring the sequence wraps correctly.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the duration of the concert in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': This indicates that the duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations.\n    - Initialize an array `a` to store the initial repertoire for each singer.\n    - Use modular arithmetic to calculate the initial repertoire based on the total durations and circular arrangement.\n    - Check if the calculated sequence satisfies the conditions for all towns.\n    - If a valid sequence is found, print 'YES' followed by the sequence; otherwise, print 'NO'.\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: With only one town and a total duration of 1, the only possible initial repertoire is 1.\n    \n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: The sequence cannot be reconstructed as no valid initial repertoire satisfies the conditions for all towns.\n    \n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence can be reconstructed as shown in the example output.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be reconstructed.\n        if n == 1:\n            if b[0] == 1:\n                print(\"YES\")\n                print(1)\n            else:\n                print(\"NO\")\n        else:\n            # Implement logic to check if a valid sequence can be reconstructed\n            # If not, print \"NO\"\n            # Otherwise, print \"YES\" followed by the sequence `a`\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the sequence satisfies the conditions for all towns and singers. The solution must handle large inputs efficiently, considering the constraints on n and b_i.\nrequirement pool:\n- Develop an algorithm to reconstruct the sequence of integers a from the given b.\n- Ensure the solution handles edge cases, such as minimum and maximum values of n and b_i.\n- Optimize the solution to run efficiently for large inputs.\n- Provide clear and concise output for each test case, following the specified format.\n- Document the solution approach and any assumptions made during development.\nWe will implement a function to reconstruct the sequence of integers a from the given b. The approach involves iterating over each test case, calculating the possible values of a_i based on the given b_i values, and checking if the sequence satisfies the conditions for all towns and singers. We will use basic arithmetic operations and modular arithmetic to handle the circular arrangement of towns. The solution will be optimized to handle large inputs efficiently by ensuring the operations are linear in terms of n.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning after the last town, the sequence continues from the first town again. This affects how we calculate the concert durations as we need to use modular arithmetic to wrap around the sequence.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour. This is the value we need to reconstruct for each singer.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration in the next town is twice the initial repertoire of the singer.\n    'n \u22c5 a_i': This indicates that the concert duration in the last town of the tour is n times the initial repertoire of the singer.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` which contains total concert durations for each town.\n2. Initialize an empty list `a` to store the initial repertoire for each singer.\n3. For each town, calculate the possible initial repertoire `a_i` for each singer using the given `b_i` values and modular arithmetic to account for the circular arrangement.\n4. Check if the calculated sequence `a` satisfies all conditions for all towns and singers.\n5. If a valid sequence is found, print \"YES\" followed by the sequence `a`. If no valid sequence exists, print \"NO\".\n\n# [edge case] \n    1. Input: 1\n       1\n       1\n       Output: YES\n       Explanation: With only one town and one singer, the initial repertoire must be 1 to satisfy the total duration of 1.\n       \n    2. Input: 3\n       3\n       3 6 9\n       Output: NO\n       Explanation: The total durations do not allow for a consistent initial repertoire across all towns.\n\n    3. Input: 4\n       4\n       10 10 10 10\n       Output: YES\n       Explanation: Each singer can have an initial repertoire of 2.5 (or any consistent value that sums to 10 when multiplied appropriately).\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where n = 1 or where b values do not allow for a consistent sequence.\n    \n```python\ndef reconstruct_sequence(t, test_cases):\n    results = []\n    for case in test_cases:\n        n, b = case\n        if n == 1:\n            results.append(\"YES\\n\" + str(b[0]))\n            continue\n        \n        # Attempt to reconstruct sequence a\n        a = [0] * n\n        possible = True\n        \n        # Calculate a[0] based on b[0] and b[n-1]\n        a[0] = (b[0] - b[n-1] + b[n-2]) // n\n        \n        # Calculate remaining a[i] based on b[i]\n        for i in range(1, n):\n            a[i] = (b[i] - b[i-1] + b[i-2]) // n\n        \n        # Validate if calculated a satisfies all conditions\n        for i in range(n):\n            if a[i] <= 0 or a[i] > 10**9:\n                possible = False\n                break\n        \n        if possible:\n            results.append(\"YES\\n\" + \" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\nprint(reconstruct_sequence(t, test_cases))\n```\n\n", "requirement analysis:\nThe problem requires reconstructing a sequence of integers based on given constraints. The main challenge is to ensure that the solution is efficient given the large possible input size. The solution must handle edge cases where no valid sequence exists and provide a clear output format.\nrequirement pool:\n- Develop an efficient algorithm to solve the problem for large inputs.\n- Ensure the solution handles all edge cases and provides correct outputs.\n- Optimize the solution for performance and memory usage.\n- Implement comprehensive testing to validate the solution.\n- Enhance the user interface for better readability of outputs.\nWe will use a mathematical approach to reconstruct the sequence of initial repertoire durations. The key observation is that the sum of the durations for each town can be expressed as a linear combination of the initial durations. We will leverage this to solve for the initial durations using modular arithmetic and ensure the solution is efficient for large inputs. We will use Python's built-in capabilities for handling large integers and modular arithmetic.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'circular arrangement'\n    Explanation: The towns are arranged in a circle, meaning the sequence wraps around after reaching the last town.\n\n    'repertoire'\n    Explanation: The initial duration of songs each singer has before starting their tour.\n\n    'concert duration'\n    Explanation: The total time a singer performs in a town, which increases as they visit more towns.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': This indicates that the concert duration doubles for the next town after the initial performance.\n    Implementation: Multiply the initial repertoire by 2 for the next town.\n\n    '(k + 2) \u22c5 a_i': This indicates that the concert duration increases by a factor of (k + 2) for subsequent towns.\n    Implementation: Multiply the initial repertoire by (k + 2) for the k-th town.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of towns `n` and the list `b` of total concert durations.\n2. Initialize an empty list `a` to store the initial repertoire durations.\n3. For each town, calculate the initial repertoire `a_i` using the given total durations and the pattern of increasing concert durations.\n4. Use modular arithmetic to handle the circular arrangement of towns.\n5. Check if a valid sequence `a` can be constructed such that all conditions are met.\n6. If a valid sequence is found, print \"YES\" followed by the sequence. Otherwise, print \"NO\".\n\n# [edge case]\n    Test Case 1: \n    Input: 1\n           1\n           1\n    Expected Output: YES\n                     1\n    Explanation: With only one town and one singer, the initial repertoire must be equal to the total concert duration.\n\n    Test Case 2:\n    Input: 3\n           3\n           3 6 9\n    Expected Output: YES\n                     1 2 3\n    Explanation: Each singer's concert duration matches the pattern described, with increasing multiples of their initial repertoire.\n\n    Test Case 3:\n    Input: 2\n           2\n           5 10\n    Expected Output: NO\n    Explanation: It's impossible to find a valid sequence `a` that satisfies the given total durations with the described pattern.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    \n```python\ndef solve_concert_durations(t, test_cases):\n    results = []\n    \n    for case in test_cases:\n        n, b = case\n        a = [0] * n\n        \n        # Attempt to reconstruct sequence a\n        possible = True\n        for i in range(n):\n            if b[i] % (i + 1) != 0:\n                possible = False\n                break\n            a[i] = b[i] // (i + 1)\n        \n        if possible:\n            results.append(\"YES\")\n            results.append(\" \".join(map(str, a)))\n        else:\n            results.append(\"NO\")\n    \n    return \"\\n\".join(results)\n\n# Example usage:\nt = 4\ntest_cases = [\n    (3, [12, 16, 14]),\n    (1, [1]),\n    (3, [1, 2, 3]),\n    (6, [81, 75, 75, 93, 93, 87])\n]\n\nprint(solve_concert_durations(t, test_cases))\n```\n\nThis code attempts to reconstruct the sequence `a` by dividing each total duration by its respective multiplier and checks if it's possible to form a valid sequence.\n", "requirement analysis:\nThe problem requires reconstructing a sequence of initial repertoire durations based on given total concert durations in each town. The solution must handle multiple test cases efficiently and provide clear output indicating whether a solution is possible and the reconstructed sequence if applicable.\nrequirement pool:\n- Reconstruct sequence of initial repertoire durations\n- Handle multiple test cases efficiently\n- Ensure output format is correct\n- Provide clear indication of solution possibility\n- Optimize for large input sizes\nWe will implement a function to reconstruct the sequence of initial repertoire durations based on the given total concert durations in each town. The approach involves iterating over the given durations and calculating the possible initial durations using modular arithmetic. We will ensure the solution is efficient to handle the constraints provided, using Python's built-in capabilities.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'repertoire': refers to the initial duration of songs each singer has before starting the tour.\n    'concert duration': refers to the total time a singer performs in each town, including newly inspired songs.\n\n# [phrase showing quantity relationship]\n    '2 \u22c5 a_i': means the concert duration in the next town is twice the initial repertoire.\n    'k + 2 \u22c5 a_i': means the concert duration increases by a factor of (k + 2) times the initial repertoire as the singer moves to subsequent towns.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    - For each test case, read the number of towns and the total concert durations.\n    - Initialize an array to store the initial repertoire durations.\n    - For each town, calculate the possible initial repertoire using modular arithmetic.\n    - Check if the calculated sequence satisfies the total concert durations for all towns.\n    - If a valid sequence is found, print \"YES\" followed by the sequence; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with n = 1 and b_1 = 1\n    Explanation: The only possible initial repertoire is 1, which matches the total concert duration.\n    \n    Test case with n = 3 and b = [1, 2, 3]\n    Explanation: No valid sequence can satisfy these durations as they do not form a consistent pattern with increasing multiples.\n\n    Test case with n = 6 and b = [81, 75, 75, 93, 93, 87]\n    Explanation: A valid sequence can be found that matches these durations using modular arithmetic.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where no valid sequence can be found.\n        if n == 1:\n            if b[0] == 1:\n                print(\"YES\")\n                print(1)\n            else:\n                print(\"NO\")\n        else:\n            # Implement logic to check for valid sequences using modular arithmetic\n            # If no valid sequence is found, print \"NO\"\n\n"], "scores": [], "pass_results": [false, false, false, false, false, true, false, false, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 1, "round": 238, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases. Then the test cases follow.\n\nEach test case consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 4 \u22c5 10^4) \u2014 the number of cities. The second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^{9}) \u2014 the total duration of concerts in i-th city.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf there is no suitable sequence a, print NO. Otherwise, on the first line print YES, on the next line print the sequence a_1, a_2, ..., a_n of n integers, where a_i (1 \u2264 a_i \u2264 10^{9}) is the initial duration of repertoire of the i-th singer. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n3\n12 16 14\n1\n1\n3\n1 2 3\n6\n81 75 75 93 93 87\n\n\nOutput\n\n\nYES\n3 1 3 \nYES\n1 \nNO\nYES\n5 5 4 1 4 5 \n\nNote\n\nLet's consider the 1-st test case of the example:\n\n  1. the 1-st singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 6 minutes, in the 3-rd \u2014 for 9 minutes; \n  2. the 2-nd singer in the 1-st city will give a concert for 3 minutes, in the 2-nd \u2014 for 1 minute, in the 3-rd - for 2 minutes; \n  3. the 3-rd singer in the 1-st city will give a concert for 6 minutes, in the 2-nd \u2014 for 9 minutes, in the 3-rd \u2014 for 3 minutes. ", "mutate_method": "condense_two2one", "parent_index": 44}
