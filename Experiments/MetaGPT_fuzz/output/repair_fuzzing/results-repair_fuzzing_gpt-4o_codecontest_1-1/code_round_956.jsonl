{"name": "1618_A. Polycarp and Sums of Subsequences", "description": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "tags": ["math", "sortings"], "difficulty": 7, "id": 1618, "sample_io": [{"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}], "test_list": [{"input": "1\n69696868 69696868 69696868 139393736 139393736 139393736 209090604\n", "output": ["69696868 69696868 69696868 \n"]}, {"input": "2\n1 1 2 69696874 69696875 69696875 69696876\n1 1 1 2 2 2 3\n", "output": ["1 1 69696874\n1 1 1\n"]}, {"input": "1\n1 1 2 69696880 69696881 69696881 69696882\n", "output": ["1 1 69696880\n"]}, {"input": "2\n1 1 2 69696967 69696968 69696968 69696969\n1 1 1 2 2 2 3\n", "output": ["1 1 69696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696868 69696869 69696869 69696870\n1 2 3 4 5 6 7\n", "output": ["1 1 69696868\n1 2 4\n"]}, {"input": "2\n1 1 2 696967 696968 696968 696969\n1 1 1 2 2 2 3\n", "output": ["1 1 696967\n1 1 1\n"]}, {"input": "2\n1 1 2 69696873 69696874 69696874 69696875\n1 1 1 2 2 2 3\n", "output": ["1 1 69696873\n1 1 1\n"]}, {"input": "2\n1 1 2 69696889 69696890 69696890 69696891\n1 1 1 2 2 2 3\n", "output": ["1 1 69696889\n1 1 1\n"]}, {"input": "1\n1 2 3 69696875 69696876 69696877 69696878\n", "output": ["1 2 69696875\n"]}, {"input": "2\n1 1 2 69696870 69696871 69696871 69696872\n1 1 1 2 2 2 3\n", "output": ["1 1 69696870\n1 1 1\n"]}, {"input": "2\n1 1 2 69696881 69696882 69696882 69696883\n1 1 1 2 2 2 3\n", "output": ["1 1 69696881\n1 1 1\n"]}, {"input": "2\n1 1 2 598989 598990 598990 598991\n1 3 4 4 5 7 8\n", "output": ["1 1 598989\n1 3 4\n"]}, {"input": "2\n1 1 2 69696875 69696876 69696876 69696877\n1 1 1 2 2 2 3\n", "output": ["1 1 69696875\n1 1 1\n"]}, {"input": "1\n1 1 2 69696884 69696885 69696885 69696886\n", "output": ["1 1 69696884\n"]}, {"input": "1\n1 1 2 69696883 69696884 69696884 69696885\n", "output": ["1 1 69696883\n"]}, {"input": "2\n1 1 2 69696885 69696886 69696886 69696887\n1 1 1 2 2 2 3\n", "output": ["1 1 69696885\n1 1 1\n"]}, {"input": "2\n1 1 2 69696879 69696880 69696880 69696881\n1 1 1 2 2 2 3\n", "output": ["1 1 69696879\n1 1 1\n"]}, {"input": "5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n", "output": ["1 3 4\n1 2 4\n300000000 300000000 300000000\n1 1 999999998\n1 2 2\n"]}, {"input": "2\n1 1 2 69696886 69696887 69696887 69696888\n1 1 1 2 2 2 3\n", "output": ["1 1 69696886\n1 1 1\n"]}, {"input": "2\n1 1 2 69696869 69696870 69696870 69696871\n1 1 1 2 2 2 3\n", "output": ["1 1 69696869\n1 1 1\n"]}, {"input": "2\n1 1 2 69696887 69696888 69696888 69696889\n1 1 1 2 2 2 3\n", "output": ["1 1 69696887\n1 1 1\n"]}, {"input": "2\n1 1 2 69696877 69696878 69696878 69696879\n1 1 1 2 2 2 3\n", "output": ["1 1 69696877\n1 1 1\n"]}, {"input": "2\n1 1 2 69696871 69696872 69696872 69696873\n1 1 1 2 2 2 3\n", "output": ["1 1 69696871\n1 1 1\n"]}, {"input": "2\n1 1 2 69696882 69696883 69696883 69696884\n1 1 1 2 2 2 3\n", "output": ["1 1 69696882\n1 1 1\n"]}, {"input": "1\n1 2 3 69696887 69696888 69696889 69696890\n", "output": ["1 2 69696887\n"]}, {"input": "2\n1 1 2 69696872 69696873 69696873 69696874\n1 1 1 2 2 2 3\n", "output": ["1 1 69696872\n1 1 1\n"]}, {"input": "2\n1 1 2 69696878 69696879 69696879 69696880\n1 1 1 2 2 2 3\n", "output": ["1 1 69696878\n1 1 1\n"]}], "task_id": "codecontest/132", "prompt": "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these sums in non-decreasing order. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "repair_prompt": ["Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these sums in non-decreasing order. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers. He wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, Polycarp wrote out 1, 4, 3. Then, he calculated 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8. He then sorted these sums in non-decreasing order. After sorting, he got an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a. He only has the array b left. Help him to restore the array a. Assume that the integers in the array b are distinct when considering the sums that come from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "Polycarp had an array a of 3 positive integers and wrote out the sums of all non-empty subsequences of this array, sorted them in non-decreasing order, and got an array b of 7 integers.\n\nFor example, if a = \\{1, 4, 3\\}, then Polycarp wrote out 1, 4, 3, 1 + 4 = 5, 1 + 3 = 4, 4 + 3 = 7, 1 + 4 + 3 = 8, and then sorted these sums in non-decreasing order to get an array b = \\{1, 3, 4, 4, 5, 7, 8\\}.\n\nUnfortunately, Polycarp lost the array a, having only the array b left. Help him to restore the array a, assuming that the integers in array b are distinct when considering the sums from the original sequence combinations.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array 'a' from the given sorted array 'b'.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of all non-empty\n           subsequences of the original array 'a'.\n\n    Returns:\n        A list of 3 integers representing the original array 'a'.\n    \"\"\"\n    # The smallest three numbers in 'b' correspond to individual elements of 'a'\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in 'b' is the sum of all elements in 'a'\n    \n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_original_array(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array of three integers from the sorted list of sums of its non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences.\n\n    Returns:\n        A tuple of three integers representing the original array.\n    \"\"\"\n    # The smallest element in b is one of the original integers\n    a1 = b[0]\n    # The second smallest element in b is the sum of the two smallest original integers\n    a2 = b[1] - a1\n    # The largest element in b is the sum of all three original integers\n    a3 = b[6] - (a1 + a2)\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    # Read the number of test cases\n    n = int(input())\n    for _ in range(n):\n        # Read the array b for each test case\n        b = list(map(int, input().split()))\n        # Restore the original array\n        result = restore_original_array(b)\n        # Print the result\n        print(result[0], result[1], result[2])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of three positive integers from the sorted array of sums.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing a sorted array of sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest three numbers in b are the individual elements of a\n        a1, a2, a3 = b[0], b[1], b[2]\n        # The largest number in b is the sum of all three elements\n        S = b[-1]\n        # Restore the original array a\n        results.append([a1, a2, S - a1 - a2])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    results = restore_array(n, test_cases)\n    \n    # Output interface\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(t: int, test_cases: List[List[int]]) -> List[Tuple[int, int, int]]:\n    \"\"\"Restores the original array of 3 integers from the given sorted sums of all non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[Tuple[int, int, int]]: A list of tuples, each containing the restored array of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # The smallest element in b is one of the original elements of a\n        a1 = b[0]\n        # The largest element in b is the sum of all three elements of a\n        sum_all = b[6]\n        # The second largest element in b is the sum of the two largest elements of a\n        sum_two_largest = b[5]\n        \n        # Deduce the original elements\n        a3 = sum_all - a1\n        a2 = sum_two_largest - a3\n        \n        results.append((a1, a2, a3))\n    \n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(t)]\n    results = restore_array_from_sums(t, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(b: List[int]) -> List[int]:\n    \"\"\"Restores the original array a from the sorted array b of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A sorted list of 7 integers representing the sums of non-empty subsequences.\n\n    Returns:\n        List[int]: The original array a of 3 integers.\n    \"\"\"\n    # The smallest element in b is one of the original integers in a\n    a1 = b[0]\n    # The largest element in b is the sum of all three integers in a\n    sum_a = b[-1]\n    # Deduce the other two integers using the sums of pairs\n    a2 = b[1] - a1\n    a3 = sum_a - a1 - a2\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_original_array(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_original_array(test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        test_cases: A list of test cases, each containing a list of 7 integers.\n\n    Returns:\n        A list of lists, where each inner list contains the restored array a of 3 integers.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # According to the problem statement and design, we can deduce:\n        a1 = b[0]  # The smallest element in b is a1\n        a2 = b[1]  # The second smallest element in b is a2\n        a3 = b[6] - a1 - a2  # The largest element in b is the sum of a1, a2, and a3\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    num_cases = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(num_cases)]\n    \n    # Call the function to restore original arrays\n    results = restore_original_array(test_cases)\n    \n    # Print the results for each test case\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array a from the given array b for each test case.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers.\n\n    Returns:\n        List[List[int]]: A list of restored arrays a for each test case.\n    \"\"\"\n    results = []\n    for b in test_cases:\n        # Deduce the original array a from b\n        a1 = b[0]  # The smallest element in b corresponds to the smallest element in a\n        a3 = b[-1] - a1  # The largest element in b minus a1 gives a3\n        a2 = b[-2] - a3  # The second largest element in b minus a3 gives a2\n        results.append([a1, a2, a3])\n    return results\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    n = int(input())\n    test_cases = [list(map(int, input()).split())) for i in range(n)]\n    \n    results = restore_array(n, test_cases)\n    for result in results:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array_from_sums(b: List[int]) -> List[int]:\n    \"\"\"Restore the original array a from the given array b of sums of non-empty subsequences.\n\n    Args:\n        b (List[int]): A list of 7 integers representing the sums of all non-empty subsequences\n                       of an array a of 3 positive integers, sorted in non-decreasing order.\n\n    Returns:\n        List[int]: The original array a consisting of 3 positive integers.\n    \"\"\"\n    # The smallest three numbers in b are the individual elements of a\n    a1 = b[0]\n    a2 = b[1]\n    a3 = b[6] - a1 - a2  # The largest number in b is the sum of all three elements of a\n\n    return [a1, a2, a3]\n\ndef main():\n    \"\"\"Main function to handle input and output for multiple test cases.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef restore_array(t: int, test_cases: List[List[int]]) -> List[List[int]]:\n    \"\"\"Restores the original array of 3 integers from the sorted sums of its non-empty subsequences.\n\n    Args:\n        t (int): The number of test cases.\n        test_cases (List[List[int]]): A list of test cases, each containing 7 integers representing the sorted sums.\n\n    Returns:\n        List[List[int]]: A list of restored arrays, each containing 3 integers.\n    \"\"\"\n    restored_arrays = []\n    \n    for case in test_cases:\n        # The smallest element in b is the smallest element in a\n        a1 = case[0]\n        # The second smallest element in b is the second smallest element in a\n        a2 = case[1]\n        # The largest element in b is the sum of all elements in a\n        total_sum = case[-1]\n        # Calculate the third element in a\n        a3 = total_sum - a1 - a2\n        \n        # Append the restored array to the result list\n        restored_arrays.append([a1, a2, a3])\n    \n    return restored_arrays\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    # Input interface\n    n = int(input())\n    test_cases = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Process the test cases\n    result = restore_array(n, test_cases)\n    \n    # Output interface\n    for res in result:\n        print(' '.join(map(str, res)))\n\n# Entry point for the program\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef restore_array_from_sums(b: List[int]) -> Tuple[int, int, int]:\n    \"\"\"Restore the original array a from the sorted sums of its non-empty subsequences.\n\n    Args:\n        b: A list of 7 integers representing the sorted sums of non-empty subsequences of array a.\n\n    Returns:\n        A tuple of 3 integers representing the original array a.\n    \"\"\"\n    # The smallest element in b is the smallest element in a\n    a1 = b[0]\n    # The second smallest element in b is the second smallest element in a\n    a2 = b[1]\n    # The largest element in b is the sum of all elements in a\n    sum_a = b[6]\n    # Calculate the third element using the sum of all elements minus the first two elements\n    a3 = sum_a - (a1 + a2)\n    \n    return a1, a2, a3\n\ndef main():\n    \"\"\"Main function to handle input and output.\"\"\"\n    t = int(input())\n    for _ in range(t):\n        b = list(map(int, input().split()))\n        result = restore_array_from_sums(b)\n        print(*result)\n\nif __name__ == \"__main__\":\n    main()\n"], "plans": ["requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring the output is correct and formatted as specified.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Ensure the solution handles large integer values effectively.\n- Provide a clear and concise output format.\n- Optimize the solution for speed and performance.\n- Include error handling for invalid inputs.\nWe will use a straightforward approach to restore the original array 'a' from the given sorted array 'b'. The key observation is that the smallest three numbers in 'b' correspond to the individual elements of 'a', and the largest number in 'b' is the sum of all three elements of 'a'. This allows us to deduce the values of 'a' efficiently without complex computations. We will use Python's built-in capabilities to handle large integers and ensure the solution is optimized for speed and clarity.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. Non-empty subsequences mean that at least one element is present in each subsequence.\n\n    'sorted in non-decreasing order'\n    Explanation: The array 'b' is sorted such that each element is greater than or equal to the previous element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to the sum of elements in each possible non-empty subsequence of the array 'a'. In code, this can be implemented by calculating all possible sums of combinations of elements in 'a'.\n\n# [degree adverb]\n    'largest'\n    Explanation: The largest number in array 'b' is the sum of all elements in array 'a'. This helps in identifying the total sum of the original array.\n\n# [code logic]\n    1. Identify the smallest three numbers in array 'b', which correspond to individual elements of array 'a'.\n    2. The largest number in array 'b' is the sum of all three elements of array 'a'.\n    3. Use these observations to deduce the values of 'a'.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, and their sums are repeated. The smallest three numbers are the same, indicating that all elements in 'a' are equal.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest three numbers are distinct and can be directly mapped to elements of 'a'.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: Large numbers with repeated sums indicate equal elements in 'a'.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest three numbers and the largest number suffices to deduce array 'a'.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with large integer values. The output must be formatted correctly, and any valid solution is acceptable if multiple exist.\nrequirement pool:\n- Efficiently restore the original array from the given sums.\n- Handle up to 5000 test cases efficiently.\n- Ensure the solution works with large integer values.\n- Provide clear and correctly formatted output.\n- Optimize for both speed and memory usage.\nWe will implement a simple function to restore the original array of three integers from the given sorted list of sums of its non-empty subsequences. The approach involves using the properties of the sorted sums to deduce the original integers. Specifically, the smallest element in the sorted list is one of the original integers, and the largest element is the sum of all three original integers. The second smallest element is the sum of the two smallest original integers. This allows us to deduce the original integers efficiently without complex operations. We will use basic Python operations and data structures to achieve this.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: This refers to all possible combinations of the elements in the array, excluding the empty set. For an array of three elements, there are 7 such combinations.\n\n    'sorted in non-decreasing order'\n    Explanation: The sums of the subsequences are arranged from smallest to largest.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'smallest': Refers to the first element in the sorted array b, which is one of the original integers.\n    \n    'largest': Refers to the last element in the sorted array b, which is the sum of all three original integers.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to one of the original integers, say a1.\n2. Identify the largest element in array b, which is the sum of all three original integers (a1 + a2 + a3).\n3. The second smallest element in array b is the sum of the two smallest original integers (a1 + a2).\n4. Use these relationships to deduce a2 and a3:\n   - a2 = (second smallest element) - a1\n   - a3 = (largest element) - (a1 + a2)\n5. Return the three integers a1, a2, and a3.\n\n# [edge case] \n    Edge Case 1: b = [1, 1, 2, 999999998, 999999999, 999999999, 1000000000] = 999999998 1 1\n    Explanation: The smallest number is 1, and the largest number is 1000000000. The second smallest number is 1, which means two of the numbers are 1. The third number is derived from the largest number minus twice the smallest number.\n\n    Edge Case 2: b = [300000000, 300000000, 300000000, 600000000, 600000000, 600000000, 900000000] = 300000000 300000000 300000000\n    Explanation: All numbers are equal, so each number in a is equal to the smallest number in b.\n\n    Edge Case 3: b = [1, 2, 2, 3, 3, 4, 5] = 1 2 2\n    Explanation: The smallest number is 1, and the largest number is 5. The second smallest number is 2, which means two of the numbers are 2. The third number is derived from the largest number minus twice the smallest number.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these cases by using the properties of sorted sums and basic arithmetic operations to deduce the original integers.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Ensure scalability for up to 5000 test cases\n- Handle large integer values up to 10^9\n- Provide clear and accurate output for each test case\n- Optimize for performance and memory usage\nWe will implement a function that takes the sorted array b of sums and deduces the original array a of three integers. The key observation is that the smallest three numbers in b are the individual elements of a, and the largest number in b is the sum of all three elements. We can use these observations to efficiently restore the original array. We will use Python's built-in capabilities to handle large integers and ensure the solution is scalable for multiple test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'array a of 3 positive integers'\n    Explanation: The original array consists of exactly three positive integers.\n\n    'sums of all non-empty subsequences'\n    Explanation: This refers to the sums obtained from all possible combinations of the elements in array a, excluding the empty set.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order': \n    Explanation: The array b is sorted such that each subsequent element is greater than or equal to the previous one.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest three numbers in the sorted array b. These correspond to the individual elements of array a.\n2. The largest number in b is the sum of all three elements of a.\n3. Use these observations to deduce the original array a:\n   - Let a1, a2, and a3 be the smallest three numbers in b.\n   - The largest number in b (let's call it S) is the sum of a1, a2, and a3.\n   - Therefore, a1, a2, and a3 can be directly derived from the smallest elements and their combinations.\n\n# [edge case] \n    Input: 1 1 1 2 2 2 3\n    Output: 1 1 1\n    Explanation: All elements are the same, so each element in a is 1.\n\n    Input: 1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000\n    Output: 1000000000 1000000000 1000000000\n    Explanation: Large numbers are handled correctly, and each element in a is the same.\n\n    Input: 1 2 3 4 5 6 7\n    Output: 1 2 4\n    Explanation: The smallest three numbers are used to reconstruct the original array.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of selecting the smallest three numbers and using the largest number as their sum inherently handles these cases.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values. The output should be consistent with the input format and provide a valid solution for each test case.\nrequirement pool:\n- Efficiently compute the original array from the given sums\n- Handle large integer values without performance issues\n- Provide clear input and output instructions\n- Ensure the solution is robust and handles edge cases\n- Optimize for speed and memory usage\nWe will solve the problem by recognizing that the smallest element in the sorted array b is one of the original elements of array a. The largest element in b is the sum of all three elements of a. The second largest element in b is the sum of the two largest elements of a. By using these observations, we can deduce the original array a from b efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the original elements in a.\n2. Identify the largest element in b, which is the sum of all three elements of a.\n3. Identify the second largest element in b, which is the sum of the two largest elements of a.\n4. Use these observations to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is one of the original elements. The largest element is 8, which is the sum of all three elements. The second largest element is 7, which is the sum of two largest elements (4 and 3).\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, which is one of the original elements. The largest element is 7, which is the sum of all three elements. The second largest element is 6, which is the sum of two largest elements (2 and 4).\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element in a is equal to the smallest element in b.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic provided inherently handles these cases by using the properties of sums and sorted order.\n", "requirement analysis:\nThe task requires restoring the original array of three integers from the given sorted sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring accurate restoration of the original array.\nrequirement pool:\n- Implement the main algorithm to restore the original array from the given sums\n- Ensure the solution handles multiple test cases efficiently\n- Optimize the algorithm for large integer values\n- Provide clear and formatted output for each test case\n- Include error handling for edge cases\nWe will implement a function that takes the sorted array b of 7 integers and deduces the original array a of 3 integers. The key observation is that the smallest element in b is one of the original integers, and the largest element in b is the sum of all three original integers. By using these observations, we can efficiently reconstruct the original array a.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all non-empty subsequences'\n    Explanation: This refers to calculating the sum of every possible combination of elements from the array a, excluding the empty set. In code, this involves iterating over all possible combinations of the elements in a and summing them.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in b, which corresponds to one of the original integers in a.\n2. Identify the largest element in b, which is the sum of all three integers in a.\n3. Use the smallest and largest elements to deduce the other two integers by considering the sums of pairs.\n4. Return the three integers as the reconstructed array a.\n\n# [edge case]\n    b = [1, 1, 1, 2, 2, 2, 3] = 1 1 1\n    Explanation: All elements are the same, so each integer in a must be 1.\n\n    b = [1, 2, 3, 4, 5, 6, 7] = 1 2 4\n    Explanation: The smallest element is 1, and the largest is 7. The other two integers can be deduced from the sums.\n\n    b = [1000000000, 1000000000, 1000000000, 2000000000, 2000000000, 2000000000, 3000000000] = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but equal, so each integer in a must be 1000000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest and largest elements and deducing the other integers will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a given sorted array of sums of all non-empty subsequences. The solution must efficiently handle up to 5000 test cases and large integer values, ensuring correct output for each test case.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases.\n- Output the results in the correct format for each test case.\n- Optimize the solution for large integer values.\n- Provide a user-friendly interface for input and output.\nWe will leverage the fact that the smallest element in the sorted array b is one of the original elements a. The largest element in b is the sum of all three elements of a. By using these properties, we can deduce the original array a by simple arithmetic operations. Specifically, the three elements of a can be found as follows: a1 = b[0], a2 = b[1], and a3 = b[6] - a1 - a2.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    'smallest': Refers to the first element in the sorted array b, which is one of the original elements of a.\n    'largest': Refers to the last element in the sorted array b, which is the sum of all three elements of a.\n\n# [code logic]\n1. Identify the smallest element in b, which is a1.\n2. Identify the second smallest element in b, which is a2.\n3. Calculate a3 as the difference between the largest element in b and the sum of a1 and a2.\n4. Return a1, a2, and a3 as the original array a.\n\n# [edge case] \n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, the second smallest is 3, and the largest is 8. Thus, a1 = 1, a2 = 3, and a3 = 8 - 1 - 3 = 4.\n\n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest element is 1, the second smallest is 2, and the largest is 7. Thus, a1 = 1, a2 = 2, and a3 = 7 - 1 - 2 = 4.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: The smallest element is 300000000, the second smallest is also 300000000, and the largest is 900000000. Thus, a1 = a2 = a3 = 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying a1, a2, and calculating a3 from b[6] - a1 - a2 handles all cases correctly.\n", "requirement analysis:\nThe task requires reconstructing an array of three integers from a given array of seven integers, which represent the sums of all non-empty subsequences of the original array. The solution must efficiently handle up to 5000 test cases, ensuring that the output is correctly formatted for each case.\nrequirement pool:\n- Implement the main logic to reconstruct array a from array b.\n- Ensure the solution handles the maximum constraints efficiently.\n- Provide clear and concise output for each test case.\n- Optimize the solution for performance.\n- Include error handling for edge cases.\nWe will leverage the fact that the smallest element in array b is the smallest element in array a, the largest element in array b is the sum of all elements in array a, and the second largest element in array b is the sum of the two largest elements in array a. Using these observations, we can deduce the original array a from b.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is less than or equal to the next element.\n\n# [phrase showing quantity relationship]\n    'sum of all elements'\n    Explanation: This refers to the total sum of all elements in array a, which is represented by the largest element in array b.\n\n    'sum of the two largest elements'\n    Explanation: This refers to the second largest sum in array b, which is the sum of the two largest elements in array a.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n2. Identify the largest element in array b, which is the sum of all elements in array a.\n3. Identify the second largest element in array b, which is the sum of the two largest elements in array a.\n4. Use these observations to deduce the original array a:\n   - Let `a1` be the smallest element in b.\n   - Let `a3` be the largest element in b minus `a1`.\n   - Let `a2` be the second largest element in b minus `a3`.\n5. Return `a1`, `a2`, and `a3`.\n\n# [edge case]\n    1 3 4 4 5 7 8 = 1 4 3\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 8, which is the sum of all elements. The second largest element is 7, which is the sum of `a2` and `a3`. Thus, `a2` and `a3` can be deduced as 4 and 3 respectively.\n\n    1 2 3 4 5 6 7 = 4 1 2\n    Explanation: The smallest element is 1, which is `a1`. The largest element is 7, which is the sum of all elements. The second largest element is 6, which is the sum of `a2` and `a3`. Thus, `a2` and `a3` can be deduced as 4 and 2 respectively.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so each element of a can be deduced as 300000000.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all possible scenarios by leveraging the properties of sums and sorted order.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from the sums of its non-empty subsequences. The input guarantees that such an array exists, and the solution must handle up to 5000 test cases efficiently. The output should be any valid array that matches the given conditions.\nrequirement pool:\n- Implement the main logic to deduce the original array from the given sums.\n- Ensure the solution handles the maximum constraints efficiently.\n- Optimize the code for readability and maintainability.\n- Include comprehensive test cases to validate the solution.\n- Document the code to explain the logic and approach used.\nWe will leverage the fact that the smallest three numbers in the sorted array b are the individual elements of the original array a. The largest number in b is the sum of all three elements of a. By using these properties, we can efficiently deduce the original array a for each test case.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    '3 positive integers': The array a consists of exactly three integers, each greater than zero.\n    \n    '7 integers': The array b consists of exactly seven integers, which are the sums of all non-empty subsequences of array a.\n\n# [degree adverb]\n    'largest': The largest number in array b is the sum of all three elements of array a.\n\n# [code logic]\n1. For each test case, read the array b.\n2. Identify the smallest three numbers in b, which correspond to the individual elements of a.\n3. Identify the largest number in b, which is the sum of all three elements of a.\n4. Use these properties to deduce the original array a:\n   - Let a1, a2, a3 be the smallest three numbers in b.\n   - The largest number in b should be equal to a1 + a2 + a3.\n5. Return the three integers a1, a2, and a3 for each test case.\n\n# [edge case]\n    1 1 2 999999998 999999999 999999999 1000000000 = 999999998 1 1\n    Explanation: The smallest three numbers are 1, 1, and 2. The largest number is 1000000000, which is the sum of 999999998 + 1 + 1.\n\n    300000000 300000000 300000000 600000000 600000000 600000000 900000000 = 300000000 300000000 300000000\n    Explanation: All elements are equal, so the original array consists of three identical numbers.\n\n    1 2 2 3 3 4 5 = 1 2 2\n    Explanation: The smallest three numbers are 1, 2, and 2. The largest number is 5, which is the sum of these three numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The logic of identifying the smallest three numbers and verifying with the largest number inherently handles these cases.\n", "requirement analysis:\nThe problem requires reconstructing an original array of three integers from a given sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases, each with 7 integers. The key is to identify the smallest, second smallest, and largest sums to deduce the original integers.\nrequirement pool:\n- Develop a function to extract the original array from the given sums.\n- Ensure the solution handles up to 5000 test cases efficiently.\n- Optimize the solution for readability and maintainability.\n- Validate the solution against edge cases and large inputs.\n- Document the solution approach and code for future reference.\nWe will use a straightforward approach to deduce the original array from the given sorted sums. The smallest element in the array b is the smallest element of the original array a. The second smallest element in b is the second smallest element of a. The largest element in b is the sum of all elements in a. By using these three values, we can reconstruct the original array a. This approach is efficient and easy to understand, making it suitable for handling up to 5000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'non-empty subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be deleted without changing the order of the remaining elements. Non-empty means that the subsequence must contain at least one element.\n\n    'sorted in non-decreasing order'\n    Explanation: The array b is sorted such that each element is greater than or equal to the previous one.\n\n# [phrase showing quantity relationship]\n    No explicit phrase showing quantity relationship in the requirement.\n\n# [degree adverb] \n    No degree adverb in the requirement.\n\n# [code logic]\n1. Identify the smallest element in array b, which corresponds to the smallest element in array a.\n2. Identify the second smallest element in array b, which corresponds to the second smallest element in array a.\n3. Identify the largest element in array b, which is the sum of all elements in array a.\n4. Use these three values to reconstruct the original array a by solving the equations:\n   - Let a1 be the smallest element.\n   - Let a2 be the second smallest element.\n   - Let a3 be calculated as (sum of all elements) - a1 - a2.\n\n# [edge case] \n    1 1 1 2 2 2 3 = 1 1 1\n    Explanation: All elements are the same, so the original array consists of three identical numbers.\n    \n    1 2 3 4 5 6 7 = 1 2 4\n    Explanation: The smallest two numbers are 1 and 2, and the sum of all elements is 7, so the third number is calculated as 7 - 1 - 2 = 4.\n    \n    1000000000 1000000000 1000000000 2000000000 2000000000 2000000000 3000000000 = 1000000000 1000000000 1000000000\n    Explanation: All elements are large but identical, so the original array consists of three identical large numbers.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of identifying the smallest, second smallest, and largest elements will handle these cases correctly.\n", "requirement analysis:\nThe task requires restoring an original array of three integers from a sorted list of sums of its non-empty subsequences. The solution must efficiently handle up to 5000 test cases with large integer values, ensuring correct and formatted output for each case.\nrequirement pool:\n- Efficiently compute the original array from the given sums.\n- Ensure the solution handles the maximum constraints smoothly.\n- Provide clear and correct output for each test case.\n- Optimize for speed and memory usage.\n- Implement additional checks for edge cases.\nWe will solve the problem by leveraging the properties of the sums of subsequences. Given the sorted array b of 7 integers, the smallest element is the smallest number in the original array a. The largest element in b is the sum of all elements in a. The second smallest element in b is the second smallest number in a. By using these properties, we can deduce the original array a efficiently. We will use Python's built-in capabilities to handle input and output, ensuring the solution is both simple and efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'subsequences'\n    Explanation: A subsequence is a sequence derived from another sequence where some elements may be removed without changing the order of the remaining elements. In this context, it refers to all possible non-empty combinations of the elements in array a.\n\n# [phrase showing quantity relationship]\n    'non-decreasing order': means the array b is sorted such that each element is greater than or equal to the previous one.\n    'sum of all elements': refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [degree adverb]\n    'smallest': refers to the smallest element in array b, which corresponds to the smallest element in array a.\n    'largest': refers to the largest element in array b, which is the sum of all elements in array a.\n\n# [code logic]\n    1. For each test case, identify the smallest element in b (b[0]) as one of the elements in a.\n    2. Identify the largest element in b (b[6]) as the sum of all elements in a.\n    3. Use the second smallest element in b (b[1]) to deduce another element in a.\n    4. Calculate the third element using the formula: a_3 = b[6] - (a_1 + a_2).\n    5. Return the three elements a_1, a_2, and a_3.\n\n# [edge case]\n    Input: 1 1 2 999999998 999999999 999999999 1000000000\n    Output: 999999998 1 1\n    Explanation: The smallest element is 1, and the largest sum is 1000000000. The second smallest element is also 1, indicating two elements are equal. The third element is deduced from the sum.\n\n    Input: 300000000 300000000 300000000 600000000 600000000 600000000 900000000\n    Output: 300000000 300000000 300000000\n    Explanation: All elements are equal, and their sum matches the largest element in b.\n\n    Input: 1 2 2 3 3 4 5\n    Output: 1 2 2\n    Explanation: The smallest element is 1, and the largest sum is 5. The second smallest element is 2, indicating two elements are equal.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic covers all scenarios by leveraging the properties of sorted subsequence sums.\n"], "scores": [], "pass_results": [false, true, false, true, true, true, false, true, false, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 956, "examples": "\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nEach test case consists of one line which contains 7 integers b_1, b_2, ..., b_7 (1 \u2264 b_i \u2264 10^9; b_i \u2264 b_{i+1}). \n\nAdditional constraint on the input: there exists at least one array a which yields this array b as described in the statement.\n\nOutput\n\nFor each test case, print 3 integers \u2014 a_1, a_2 and a_3. If there can be several answers, print any of them.\n\nExample\n\nInput\n\n\n5\n1 3 4 4 5 7 8\n1 2 3 4 5 6 7\n300000000 300000000 300000000 600000000 600000000 600000000 900000000\n1 1 2 999999998 999999999 999999999 1000000000\n1 2 2 3 3 4 5\n\n\nOutput\n\n\n1 4 3\n4 1 2\n300000000 300000000 300000000\n999999998 1 1\n1 2 2\n\nNote\n\nThe subsequence of the array a is a sequence that can be obtained from a by removing zero or more of its elements.\n\nTwo subsequences are considered different if index sets of elements included in them are different. That is, the values of the elements don't matter in the comparison of subsequences. In particular, any array of length 3 has exactly 7 different non-empty subsequences.", "mutate_method": "expand_one2two", "parent_index": 597}
