{"name": "1586_B. Omkar and Heavenly Tree", "description": "Lord Omkar would like to have a tree with n nodes (3 \u2264 n \u2264 10^5) and has asked his disciples to construct the tree. However, Lord Omkar has created m (1 \u2264 m < n) restrictions to ensure that the tree will be as heavenly as possible. \n\nA tree with n nodes is an connected undirected graph with n nodes and n-1 edges. Note that for any two nodes, there is exactly one simple path between them, where a simple path is a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 \u2264 a,b,c \u2264 n). It signifies that node b cannot lie on the simple path between node a and node c. \n\nCan you help Lord Omkar and become his most trusted disciple? You will need to find heavenly trees for multiple sets of restrictions. It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n", "tags": ["brute force", "constructive algorithms", "trees"], "difficulty": 8, "id": 1586, "sample_io": [{"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}], "test_list": [{"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 4 10\n5 6 7\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n12 4\n1 2 3\n6 4 10\n5 6 7\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n14 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 10\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n14 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n2 1\n2 3\n2 4\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 5\n5 6 10\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n6 3\n1 1 0\n4 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n1 1 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n"]}, {"input": "2\n12 4\n2 2 3\n5 4 10\n5 6 7\n6 5 4\n10 0\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n1 1 0\n4 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n10 3\n2 2 0\n5 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n6 3\n1 1 0\n4 1 3\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n10 6 7\n6 5 4\n8 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n"]}, {"input": "2\n12 4\n1 2 3\n6 4 10\n5 6 12\n6 5 4\n6 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 8\n5 6 10\n6 5 4\n5 3\n1 2 -1\n3 5 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n9 4\n1 2 3\n5 4 10\n5 6 12\n6 5 8\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n8 4\n2 2 3\n4 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n10 4\n1 3 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n9 6 10\n6 5 4\n7 3\n1 2 -1\n3 3 4\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n"]}, {"input": "2\n12 4\n1 2 3\n3 1 8\n5 6 10\n6 5 4\n5 3\n1 2 -1\n3 5 4\n3 1 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n7 4\n1 2 6\n3 2 5\n5 6 1\n6 5 4\n6 3\n1 2 0\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n10 6 7\n6 5 1\n7 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n"]}, {"input": "2\n12 4\n2 3 4\n5 1 10\n5 6 7\n6 5 4\n10 0\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n21 4\n1 2 3\n4 4 5\n5 7 10\n4 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 3 7\n5 5 4\n4 3\n2 4 0\n5 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n"]}, {"input": "2\n7 4\n1 1 3\n3 2 5\n6 6 7\n6 5 4\n5 3\n1 2 3\n0 3 4\n3 3 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n21 4\n1 2 3\n4 4 5\n5 7 10\n4 5 4\n5 0\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n2 2 6\n3 4 10\n0 6 7\n6 5 4\n8 3\n1 2 0\n2 2 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n"]}, {"input": "2\n12 4\n2 3 4\n5 1 10\n5 6 7\n6 7 4\n13 0\n1 1 -1\n2 3 4\n3 7 6\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n"]}, {"input": "2\n21 4\n1 2 3\n4 4 2\n5 7 10\n4 5 4\n6 0\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 2\n1 3\n1 4\n1 5\n1 6\n"]}, {"input": "2\n7 4\n1 1 4\n3 6 0\n5 5 7\n5 5 4\n8 3\n2 2 -1\n6 2 4\n3 4 10\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n"]}, {"input": "2\n7 4\n0 1 2\n10 2 5\n6 6 7\n6 5 4\n5 3\n1 1 0\n0 3 4\n3 3 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 2 2\n6 2 10\n7 2 20\n6 3 4\n9 0\n0 1 1\n4 3 4\n2 4 7\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n"]}, {"input": "2\n11 4\n-1 4 1\n3 7 5\n5 2 22\n2 5 1\n10 1\n2 2 1\n5 1 3\n4 2 9\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n26 4\n1 3 3\n4 4 5\n5 6 17\n4 9 4\n6 0\n1 3 0\n2 1 4\n7 0 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 2\n1 3\n1 4\n1 5\n1 6\n"]}, {"input": "2\n11 4\n1 2 3\n6 4 10\n5 6 7\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n23 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 2\n5 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n2 1\n2 3\n2 4\n"]}, {"input": "2\n12 4\n1 2 6\n3 2 5\n5 6 1\n6 5 4\n5 3\n1 2 0\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n9 4\n1 2 3\n5 4 10\n5 6 12\n6 5 8\n5 0\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n13 4\n1 2 3\n6 3 10\n5 6 5\n8 5 4\n10 3\n1 1 -1\n1 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n24 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 3\n5 4 14\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n2 1\n2 3\n2 4\n"]}, {"input": "2\n21 4\n1 2 3\n4 1 5\n5 7 10\n4 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n3 20\n3 21\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 9\n4 6 3\n6 4 4\n4 3\n1 2 1\n2 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n"]}, {"input": "2\n9 4\n2 2 6\n3 4 10\n-1 6 7\n6 5 4\n8 3\n1 4 0\n1 2 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n"]}, {"input": "2\n7 4\n0 2 1\n3 1 5\n5 6 12\n3 5 4\n6 3\n2 1 0\n4 1 3\n4 2 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n9 4\n1 4 3\n3 4 17\n5 6 12\n8 5 8\n9 3\n1 1 0\n3 3 4\n3 5 7\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n"]}, {"input": "2\n9 4\n1 4 3\n3 1 17\n5 6 12\n8 5 15\n5 3\n1 1 0\n3 3 7\n3 5 7\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 1 1\n3 7 5\n5 6 12\n3 5 4\n6 3\n2 1 0\n4 1 3\n4 2 5\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n27 4\n1 3 3\n4 2 2\n5 7 10\n4 9 4\n6 0\n1 2 -1\n2 6 4\n4 1 8\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 2\n1 3\n1 4\n1 5\n1 6\n"]}, {"input": "2\n7 4\n-1 4 1\n3 7 5\n5 2 22\n2 1 4\n10 1\n2 2 0\n4 1 3\n4 2 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n-1 4 1\n3 7 5\n5 1 22\n2 5 1\n10 1\n2 2 0\n4 1 3\n4 2 5\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n9 4\n-1 4 1\n0 7 9\n5 2 22\n2 5 1\n10 1\n4 2 1\n5 1 3\n4 1 9\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n26 4\n1 3 3\n4 4 7\n5 1 17\n4 9 4\n6 0\n1 3 0\n2 1 4\n7 -1 12\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n2 13\n2 14\n2 15\n2 16\n2 17\n2 18\n2 19\n2 20\n2 21\n2 22\n2 23\n2 24\n2 25\n2 26\n1 2\n1 3\n1 4\n1 5\n1 6\n"]}, {"input": "2\n11 4\n0 4 2\n1 10 9\n5 2 22\n2 5 1\n19 1\n4 2 1\n5 1 3\n4 1 9\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n"]}, {"input": "2\n24 4\n1 4 3\n1 4 7\n5 6 17\n1 13 4\n6 0\n1 3 0\n2 1 4\n7 -1 21\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 2\n1 3\n1 4\n1 5\n1 6\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 0\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 12\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 5\n5 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n7 5 4\n5 3\n1 2 0\n2 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n7 6 12\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 5\n5 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n6 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 10\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n2 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n5 4 10\n5 6 7\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n4 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n2 2 3\n5 4 10\n5 6 7\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n4 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n1 1 0\n4 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 5\n5 6 10\n4 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n4 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n1 1 0\n4 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n2 2 0\n4 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n2 2 0\n5 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n6 3\n1 1 0\n4 1 3\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n2 2 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 11\n5 6 7\n5 5 4\n5 3\n2 2 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 3 4\n4 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 3 4\n3 4 3\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 12\n5 6 7\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 2\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 6\n5 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 6\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 0\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 6\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n5 4 10\n5 6 12\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n2 2 3\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 3 10\n5 6 7\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 5\n4 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 -1\n3 3 4\n0 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n12 6 12\n6 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n10 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n6 4 10\n5 6 12\n6 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 2\n5 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n6 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n14 4\n1 2 3\n3 4 10\n5 3 7\n6 5 4\n5 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n5 4 10\n5 6 7\n6 5 4\n10 1\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n9 6 10\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n6 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n6 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 8\n5 6 10\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n4 2 4\n3 4 10\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n0 1 0\n4 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n5 4 5\n5 6 10\n4 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n5 3\n2 2 0\n4 4 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n0 6 12\n6 5 4\n6 3\n1 1 0\n4 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 11\n4 6 7\n5 5 4\n5 3\n2 2 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 1 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 3 5\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 4 0\n2 3 4\n4 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 6\n5 6 7\n6 4 4\n5 3\n1 2 5\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 6\n3 2 5\n5 6 7\n6 5 4\n5 3\n1 2 0\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n2 2 6\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n5 4 10\n5 6 12\n6 5 8\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n2 2 3\n4 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 3 10\n5 6 7\n8 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 5\n4 6 3\n6 4 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n12 6 12\n12 5 4\n5 3\n1 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 6 3\n3 4 2\n5 6 7\n6 4 4\n5 3\n1 2 3\n2 3 4\n6 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 3 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n14 4\n1 2 3\n3 4 10\n5 3 7\n6 5 4\n5 3\n1 1 -1\n2 3 1\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n2 2 3\n5 4 10\n5 6 7\n6 5 4\n10 1\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n9 6 10\n6 5 4\n5 3\n1 2 -1\n3 3 4\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n5 6 7\n5 4 4\n5 3\n1 2 0\n6 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 2\n5 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n"]}, {"input": "2\n12 4\n2 3 3\n5 4 10\n5 6 7\n6 5 4\n10 0\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n1 2 2\n3 6 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n4 2 4\n3 4 10\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 2\n3 2 10\n7 6 12\n6 5 4\n5 3\n0 1 0\n4 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n4 4 5\n5 6 10\n4 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n0 1 0\n4 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 5\n5 5 4\n5 3\n2 2 0\n4 4 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n0 6 7\n6 5 4\n6 3\n1 1 0\n4 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 6 7\n5 5 4\n10 3\n2 4 0\n5 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n12 5 4\n6 3\n1 1 0\n4 1 3\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 11\n4 6 7\n5 5 4\n5 3\n4 2 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 1 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n0 3 4\n3 3 5\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 4 1\n2 3 4\n4 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n4 4 6\n5 6 7\n6 4 4\n5 3\n1 2 5\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 6\n3 2 5\n5 6 1\n6 5 4\n5 3\n1 2 0\n3 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n2 2 6\n3 4 10\n5 6 7\n6 5 4\n5 3\n1 2 0\n2 2 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 3 10\n5 6 5\n8 5 4\n10 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 9\n4 6 3\n6 4 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n12 6 12\n12 5 4\n5 3\n0 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 10\n10 6 7\n6 5 1\n8 3\n1 1 -1\n2 3 2\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n"]}, {"input": "2\n14 4\n1 2 3\n3 4 10\n8 3 7\n6 5 4\n5 3\n1 1 -1\n2 3 1\n3 4 12\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n2 2 3\n5 4 10\n5 6 7\n4 5 4\n10 1\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n0 2 3\n3 4 10\n5 6 7\n5 4 4\n5 3\n1 2 0\n6 2 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 2\n5 4 14\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n"]}, {"input": "2\n12 4\n2 3 4\n5 4 10\n5 6 7\n6 5 4\n10 0\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n1 2 2\n3 6 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n6 2 4\n3 4 10\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 2\n3 2 10\n7 6 12\n6 3 4\n5 3\n0 1 0\n4 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n12 4\n1 2 3\n4 4 5\n5 7 10\n4 5 4\n5 3\n1 2 -1\n3 3 4\n3 1 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n4 1\n4 2\n4 3\n4 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n0 1 0\n4 3 6\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n0 6 11\n6 5 4\n6 3\n1 1 0\n4 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 4 10\n5 3 7\n5 5 4\n10 3\n2 4 0\n5 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n7 4\n0 2 1\n3 2 10\n7 6 12\n12 5 4\n6 3\n1 1 0\n4 1 3\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 2 11\n4 6 7\n5 5 4\n5 3\n4 2 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 1 3\n3 4 5\n6 6 7\n6 5 4\n5 3\n1 2 3\n0 3 4\n3 3 5\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n0 4 1\n2 3 4\n4 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 3 3\n4 4 6\n5 6 7\n6 4 4\n5 3\n1 2 5\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n2 2 6\n3 4 10\n0 6 7\n6 5 4\n5 3\n1 2 0\n2 2 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n9 4\n1 2 3\n5 4 10\n5 6 12\n6 5 8\n5 3\n1 1 0\n2 3 4\n3 5 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n8 4\n2 2 3\n4 4 10\n5 6 7\n6 5 4\n5 3\n1 1 -1\n2 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 2 3\n6 3 10\n5 6 5\n8 5 4\n10 3\n1 1 -1\n1 3 4\n3 4 6\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 9\n4 6 3\n6 4 4\n5 3\n1 2 1\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 1\n3 4 10\n12 6 12\n12 5 4\n5 3\n0 1 0\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n10 4\n1 3 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n2 3 4\n3 5 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n12 4\n1 2 3\n3 4 10\n5 6 7\n6 5 4\n4 3\n1 1 -1\n2 3 3\n5 4 14\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n2 1\n2 3\n2 4\n"]}, {"input": "2\n12 4\n1 2 3\n3 1 8\n5 6 10\n6 5 1\n5 3\n1 2 -1\n3 5 4\n3 1 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 6 10\n5 5 7\n5 5 4\n5 3\n1 2 0\n6 2 4\n3 4 10\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 2\n3 2 10\n7 6 20\n6 3 4\n5 3\n0 1 0\n4 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n6 5 4\n5 3\n0 1 0\n5 3 6\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n0 6 11\n6 5 4\n6 3\n1 1 0\n4 1 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n0 2 1\n3 2 10\n5 6 12\n12 5 4\n6 3\n1 1 0\n4 1 3\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 2 11\n4 6 7\n10 5 4\n5 3\n4 2 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n1 2 3\n3 4 5\n5 6 7\n5 5 4\n5 3\n0 4 1\n2 3 4\n4 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n2 2 6\n3 4 10\n0 6 7\n6 5 4\n4 3\n1 2 0\n2 2 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n"]}, {"input": "2\n9 4\n1 2 3\n5 4 10\n5 6 12\n6 5 8\n5 3\n1 1 0\n2 3 4\n3 5 7\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n1 4 3\n3 4 9\n4 6 3\n6 4 4\n5 3\n1 2 1\n2 1 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n7 4\n1 2 1\n3 4 10\n12 6 12\n12 5 4\n5 3\n0 1 -1\n2 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n10 4\n1 3 3\n3 4 10\n5 6 7\n5 5 4\n5 3\n1 2 0\n2 3 0\n3 5 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n12 4\n2 3 4\n5 1 10\n5 6 7\n6 5 4\n10 0\n1 1 -1\n2 3 4\n3 7 6\n", "output": ["2 1\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n2 11\n2 12\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n"]}, {"input": "2\n12 4\n1 2 6\n3 1 8\n5 6 10\n6 5 1\n5 3\n1 2 -1\n3 5 4\n3 1 5\n", "output": ["3 1\n3 2\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 1\n3 2\n3 4\n3 5\n"]}, {"input": "2\n7 4\n1 2 2\n3 6 10\n5 5 7\n5 5 4\n5 3\n2 2 0\n6 2 4\n3 4 10\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}, {"input": "2\n7 4\n0 2 2\n6 2 10\n7 6 20\n6 3 4\n5 3\n0 1 0\n4 3 4\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n7 6 12\n12 5 4\n5 3\n0 1 0\n5 3 6\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n"]}, {"input": "2\n7 4\n0 2 3\n3 2 10\n0 6 11\n6 5 4\n6 3\n1 1 1\n4 1 5\n3 4 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 1\n2 3\n2 4\n2 5\n2 6\n"]}, {"input": "2\n7 4\n0 2 1\n3 2 18\n5 6 12\n12 5 4\n6 3\n1 1 0\n4 1 3\n3 2 5\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n3 1\n3 2\n3 4\n3 5\n3 6\n"]}, {"input": "2\n7 4\n1 2 2\n3 2 11\n4 6 7\n10 5 4\n5 3\n4 3 0\n10 2 4\n3 4 4\n", "output": ["1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 2\n1 3\n1 4\n1 5\n"]}], "task_id": "codecontest/37", "prompt": "Lord Omkar would like to have a tree with n nodes (3 \u2264 n \u2264 10^5) and has asked his disciples to construct the tree, ensuring m (1 \u2264 m < n) restrictions to ensure that the tree will be as heavenly as possible.\n\nA tree with n nodes is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them, defined as a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 \u2264 a,b,c \u2264 n), signifying that node b cannot lie on the simple path between node a and node c.\n\nCan you help Lord Omkar and become his most trusted disciple by finding heavenly trees for multiple sets of restrictions? It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints. Consider all possible configurations to ensure the most optimal solution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n", "repair_prompt": ["Lord Omkar would like to have a tree with n nodes (3 \u2264 n \u2264 10^5) and has asked his disciples to construct the tree, ensuring m (1 \u2264 m < n) restrictions to ensure that the tree will be as heavenly as possible.\n\nA tree with n nodes is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them, defined as a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 \u2264 a,b,c \u2264 n), signifying that node b cannot lie on the simple path between node a and node c.\n\nCan you help Lord Omkar and become his most trusted disciple by finding heavenly trees for multiple sets of restrictions? It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints. Consider all possible configurations to ensure the most optimal solution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n", "Lord Omkar would like to have a tree with n nodes (3 \u2264 n \u2264 10^5) and has asked his disciples to construct the tree, ensuring m (1 \u2264 m < n) restrictions to ensure that the tree will be as heavenly as possible.\n\nA tree with n nodes is a connected undirected graph with n nodes and n-1 edges. In this configuration, for any two distinct nodes, there is exactly one simple path between them. A simple path is defined as a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 \u2264 a,b,c \u2264 n), signifying that node b cannot lie on the simple path between node a and node c.\n\nCan you help Lord Omkar and become his most trusted disciple by finding heavenly trees for multiple sets of restrictions? It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints. Consider all possible configurations to ensure the most optimal solution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n", "Lord Omkar would like to have a tree with n nodes (3 \u2264 n \u2264 10^5) and has asked his disciples to construct the tree, ensuring m (1 \u2264 m < n) restrictions to ensure that the tree will be as heavenly as possible. A tree with n nodes is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them, defined as a path between two nodes that does not contain any node more than once.\n\nHere is an example of a tree: \n\n<image>\n\nA restriction consists of 3 pairwise distinct integers, a, b, and c (1 \u2264 a,b,c \u2264 n), signifying that node b cannot lie on the simple path between node a and node c. Can you help Lord Omkar and become his most trusted disciple by finding heavenly trees for multiple sets of restrictions? It can be shown that a heavenly tree will always exist for any set of restrictions under the given constraints. Consider all possible configurations to ensure the most optimal solution.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n"], "completions": ["from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) representing a restriction.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize a list to store the edges of the tree\n        edges = []\n\n        # Choose a root node, typically node 1\n        root = 1\n\n        # Create a set to track nodes that cannot be directly connected to the root due to restrictions\n        restricted_nodes = set()\n\n        # Process each restriction\n        for a, b, c in restrictions:\n            # Add the restricted node to the set\n            restricted_nodes.add(b)\n\n        # Connect all nodes to the root, except the restricted ones\n        for node in range(1, n + 1):\n            if node != root and node not in restricted_nodes:\n                edges.append((root, node))\n\n        # Now connect the restricted nodes to any other node that is not restricted\n        for node in restricted_nodes:\n            # Find a node that is not restricted to connect to\n            for potential_connection in range(1, n + 1):\n                if potential_connection != node and potential_connection not in restricted_nodes:\n                    edges.append((node, potential_connection))\n                    break\n\n        # Add the constructed edges to the results\n        results.append(edges)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    test_cases = []\n    \n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        restrictions = []\n        for _ in range(m):\n            a = int(data[index])\n            b = int(data[index + 1])\n            c = int(data[index + 2])\n            index += 3\n            restrictions.append((a, b, c))\n        test_cases.append((n, m, restrictions))\n    \n    # Call the function\n    results = construct_tree(t, test_cases)\n    \n    # Output interface\n    for result in results:\n        for edge in result:\n            print(edge[0], edge[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_heavenly_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: The number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: The number of nodes in the tree.\n            - m: The number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) representing a restriction.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize an empty list to store the edges of the tree\n        edges = []\n        \n        # Choose a root node (e.g., node 1)\n        root = 1\n        \n        # Create a set to track nodes that cannot be directly connected to the root due to restrictions\n        restricted_nodes = set()\n        \n        # Process each restriction to identify restricted nodes\n        for a, b, c in restrictions:\n            if a == root or c == root:\n                restricted_nodes.add(b)\n        \n        # Connect all other nodes to the root, ensuring no restriction is violated\n        for i in range(2, n + 1):\n            if i not in restricted_nodes:\n                edges.append((root, i))\n        \n        # If there are restricted nodes, connect them in a way that respects the restrictions\n        if restricted_nodes:\n            # Connect the first restricted node to the root\n            first_restricted_node = restricted_nodes.pop()\n            edges.append((root, first_restricted_node))\n            \n            # Connect remaining restricted nodes in a chain\n            last_node = first_restricted_node\n            for node in restricted_nodes:\n                edges.append((last_node, node))\n                last_node = node\n        \n        # Append the edges for the current test case to the results\n        results.append(edges)\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n    test_cases.append((n, m, restrictions))\n\n# Output interface\nresults = construct_heavenly_tree(t, test_cases)\nfor result in results:\n    for edge in result:\n        print(edge[0], edge[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_heavenly_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) indicating that node b cannot lie on the simple path between node a and node c.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize a list to store the edges of the tree\n        edges = []\n\n        # We will use a boolean array to mark nodes that are restricted as middle nodes\n        restricted_as_middle = [False] * (n + 1)\n\n        # Mark all nodes that are restricted as middle nodes\n        for a, b, c in restrictions:\n            restricted_as_middle[b] = True\n\n        # Find a node that is not restricted as a middle node to use as the root\n        root = next(i for i in range(1, n + 1) if not restricted_as_middle[i])\n\n        # Connect all other nodes to the root\n        for i in range(1, n + 1):\n            if i != root:\n                edges.append((root, i))\n\n        results.append(edges)\n\n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n    test_cases.append((n, m, restrictions))\n\n# Output interface\nresults = construct_heavenly_tree(t, test_cases)\nfor result in results:\n    for edge in result:\n        print(edge[0], edge[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) representing a restriction.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree for a test case.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize a list to store the edges of the tree\n        edges = []\n\n        # To satisfy the restrictions, we can choose a root node that is not involved in any restriction\n        # as the middle node. We can choose node 1 as the root and connect it to all other nodes.\n        # This ensures that no node b lies on the path between any two other nodes a and c.\n        \n        # Create a set to track nodes that are restricted as middle nodes\n        restricted_nodes = set(b for _, b, _ in restrictions)\n\n        # Find a node that is not restricted to be the root\n        root = next(node for node in range(1, n + 1) if node not in restricted_nodes)\n\n        # Connect the root to all other nodes\n        for node in range(1, n + 1):\n            if node != root:\n                edges.append((root, node))\n\n        results.append(edges)\n\n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n        test_cases.append((n, m, restrictions))\n\n    # Output interface\n    result = construct_tree(t, test_cases)\n    for edges in result:\n        for u, v in edges:\n            print(u, v)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) representing a restriction.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the constructed tree.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize a list to store the edges of the tree\n        edges = []\n\n        # To construct a tree, we can start by connecting all nodes to a central node\n        # that is not part of any restriction as the middle node.\n        # We will use a simple strategy to connect nodes in a linear fashion.\n\n        # Find a node that is not a middle node in any restriction\n        restricted_nodes = set(b for _, b, _ in restrictions)\n        central_node = next(i for i in range(1, n + 1) if i not in restricted_nodes)\n\n        # Connect all other nodes to this central node\n        for i in range(1, n + 1):\n            if i != central_node:\n                edges.append((central_node, i))\n\n        results.append(edges)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    index = 0\n    t = int(data[index])\n    index += 1\n\n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n\n        restrictions = []\n        for _ in range(m):\n            a = int(data[index])\n            b = int(data[index + 1])\n            c = int(data[index + 2])\n            restrictions.append((a, b, c))\n            index += 3\n\n        test_cases.append((n, m, restrictions))\n\n    # Call the function\n    result = construct_tree(t, test_cases)\n\n    # Output interface\n    for edges in result:\n        for u, v in edges:\n            print(u, v)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"\n    Constructs a tree for each test case based on the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples (a, b, c) indicating that node b cannot lie on the simple path between nodes a and c.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the constructed tree.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize adjacency list\n        adj_list = {i: [] for i in range(1, n + 1)}\n\n        # Handle edge cases with no restrictions\n        if m == 0:\n            # Create a simple chain tree\n            edges = [(i, i + 1) for i in range(1, n)]\n            results.append(edges)\n            continue\n\n        # Strategy to construct the tree\n        # We will use a set to track nodes that cannot be on the path between two other nodes\n        restricted_nodes = set()\n        for a, b, c in restrictions:\n            restricted_nodes.add(b)\n\n        # Choose a root node that is not restricted\n        root = next(i for i in range(1, n + 1) if i not in restricted_nodes)\n\n        # Connect the root to all other nodes\n        edges = []\n        for i in range(1, n + 1):\n            if i != root:\n                edges.append((root, i))\n\n        results.append(edges)\n\n    return results\n\n# Input interface\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        m = int(data[index + 1])\n        index += 2\n        \n        restrictions = []\n        for _ in range(m):\n            a = int(data[index])\n            b = int(data[index + 1])\n            c = int(data[index + 2])\n            index += 3\n            restrictions.append((a, b, c))\n        \n        test_cases.append((n, m, restrictions))\n    \n    # Call the function\n    result = construct_tree(t, test_cases)\n    \n    # Output interface\n    for edges in result:\n        for u, v in edges:\n            print(u, v)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_heavenly_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) representing a restriction.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree for each test case.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Choose a root node arbitrarily, here we choose node 1\n        root = 1\n        # Create a star-shaped tree by connecting the root to all other nodes\n        edges = [(root, i) for i in range(2, n + 1)]\n        results.append(edges)\n\n    return results\n\ndef main():\n    # Read number of test cases\n    t = int(input())\n    # Read each test case\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n        test_cases.append((n, m, restrictions))\n\n    # Call the function\n    results = construct_heavenly_tree(t, test_cases)\n\n    # Output interface\n    for result in results:\n        for edge in result:\n            print(edge[0], edge[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\nfrom typing import List, Tuple\n\ndef construct_heavenly_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c).\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree.\n    \"\"\"\n    results = []\n    \n    for n, m, restrictions in test_cases:\n        # Choose node 1 as the root node\n        root = 1\n        # Create a set to track nodes that need to be connected to the root\n        nodes_to_connect = set(range(1, n + 1))\n        nodes_to_connect.remove(root)\n        \n        # For each restriction, ensure node b is not on the path between nodes a and c\n        for a, b, c in restrictions:\n            # Directly connect a and c to the root\n            nodes_to_connect.discard(a)\n            nodes_to_connect.discard(c)\n        \n        # Construct the edges of the tree\n        edges = [(root, node) for node in nodes_to_connect]\n        \n        # Add the edges to the result for this test case\n        results.append(edges)\n    \n    return results\n\ndef main():\n    # Input interface\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n, m = map(int, input().split())\n        restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n        test_cases.append((n, m, restrictions))\n    \n    # Output interface\n    results = construct_heavenly_tree(t, test_cases)\n    for result in results:\n        for edge in result:\n            print(edge[0], edge[1])\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_heavenly_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c) representing a restriction.\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the constructed tree.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize the adjacency list for the tree\n        edges = []\n\n        # Choose a root node (e.g., node 1) and connect it to all other nodes initially\n        # This is a simple star configuration with node 1 as the root\n        root = 1\n        connected_nodes = set(range(2, n + 1))\n\n        # Create initial star configuration\n        for node in connected_nodes:\n            edges.append((root, node))\n\n        # Adjust connections based on restrictions\n        for a, b, c in restrictions:\n            # If b is directly connected to root, we need to adjust\n            if (root, b) in edges or (b, root) in edges:\n                # Find a node that is not involved in the restriction to connect b\n                for node in connected_nodes:\n                    if node != a and node != c:\n                        # Remove the direct connection to root\n                        edges.remove((root, b))\n                        # Connect b to another node\n                        edges.append((node, b))\n                        break\n\n        results.append(edges)\n\n    return results\n\n# Input interface\n# Read number of test cases\nt = int(input())\n# Read each test case\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n    test_cases.append((n, m, restrictions))\n\n# Call the function\nresults = construct_heavenly_tree(t, test_cases)\n\n# Output interface\nfor result in results:\n    for edge in result:\n        print(edge[0], edge[1])\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef construct_tree(t: int, test_cases: List[Tuple[int, int, List[Tuple[int, int, int]]]]) -> List[List[Tuple[int, int]]]:\n    \"\"\"Constructs a tree for each test case that satisfies the given restrictions.\n\n    Args:\n        t: Number of test cases.\n        test_cases: A list of tuples, each containing:\n            - n: Number of nodes in the tree.\n            - m: Number of restrictions.\n            - restrictions: A list of tuples, each containing three integers (a, b, c).\n\n    Returns:\n        A list of lists, where each inner list contains tuples representing the edges of the tree.\n    \"\"\"\n    results = []\n\n    for n, m, restrictions in test_cases:\n        # Initialize the tree with n nodes\n        edges = []\n        \n        # To satisfy the restrictions, we need to ensure that node b is not on the path between a and c.\n        # We can start by choosing a root node and connecting other nodes in a way that avoids restricted paths.\n        \n        # Choose a central node as the root, typically node 1\n        root = 1\n        \n        # Create a set to track nodes that are already connected\n        connected_nodes = set()\n        connected_nodes.add(root)\n        \n        # Create a list to track nodes that need to be connected\n        nodes_to_connect = list(range(2, n + 1))\n        \n        # Connect nodes to the root initially\n        for node in nodes_to_connect:\n            if node not in connected_nodes:\n                edges.append((root, node))\n                connected_nodes.add(node)\n        \n        # Check restrictions and adjust connections if necessary\n        for a, b, c in restrictions:\n            # If b is directly connected to a or c, we need to adjust\n            if (root, b) in edges or (b, root) in edges:\n                # Find an alternative node to connect b\n                for node in nodes_to_connect:\n                    if node != a and node != c and node not in connected_nodes:\n                        edges.remove((root, b))\n                        edges.append((node, b))\n                        connected_nodes.add(node)\n                        break\n        \n        # Ensure we have n-1 edges\n        assert len(edges) == n - 1, \"The number of edges must be n-1 for a valid tree.\"\n        \n        results.append(edges)\n    \n    return results\n\n# Input interface\n# Read number of test cases\nt = int(input())\n\n# Read each test case\n# Each test case consists of n, m, and m restrictions\n# Store them in a list of tuples\ntest_cases = []\nfor _ in range(t):\n    n, m = map(int, input().split())\n    restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n    test_cases.append((n, m, restrictions))\n\n# Call the function and get the result\nresult = construct_tree(t, test_cases)\n\n# Output interface\n# Print the edges for each test case\nfor edges in result:\n    for u, v in edges:\n        print(u, v)\n"], "plans": ["requirement analysis:\nThe main requirement is to construct a tree that satisfies all given restrictions for multiple test cases. The solution must be efficient to handle the upper limits of n and m, ensuring that the sum of n across all test cases does not exceed 10^5. The output must be in a specific format, with n-1 lines representing the edges of the tree.\nrequirement pool:\n- Develop an efficient algorithm to construct the tree with given restrictions.\n- Ensure the solution handles the maximum constraints of n and m effectively.\n- Provide a clear and concise output format for the constructed tree.\n- Optimize the algorithm for speed and scalability.\n- Implement error handling for invalid input cases.\nWe will use a greedy approach to construct the tree. The key idea is to select a root node and connect all other nodes to it, ensuring that the restrictions are satisfied. This approach is efficient and works within the constraints provided. We will use a simple adjacency list to represent the tree and ensure that the restrictions are respected by carefully choosing the root node and the connections.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where there is exactly one simple path between any two nodes.\n\n    'restriction'\n    Explanation: A restriction is a condition where a specific node cannot lie on the simple path between two other nodes.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between the number of nodes and edges in a tree. In a tree with n nodes, there are always n-1 edges.\n    \n    '1 \u2264 m < n': This specifies that the number of restrictions (m) is at least 1 and less than the number of nodes (n).\n\n# [degree adverb]\n    'most optimal': This implies finding the best possible configuration of the tree that satisfies all restrictions.\n\n# [code logic]\n1. For each test case, read the number of nodes (n) and restrictions (m).\n2. Initialize an adjacency list to represent the tree.\n3. Choose a root node (e.g., node 1) and connect all other nodes to it initially.\n4. For each restriction, ensure that the node specified in the restriction does not lie on the path between the other two nodes by adjusting connections if necessary.\n5. Output the edges of the tree for each test case.\n\n# [edge case]\n    Case 1: n = 3, m = 1, restrictions = [(1, 2, 3)]\n    Expected output: 1 3, 3 2\n    Explanation: The only restriction is that node 2 cannot be on the path between nodes 1 and 3. The tree can be constructed as 1-3-2.\n\n    Case 2: n = 4, m = 2, restrictions = [(1, 2, 3), (3, 4, 2)]\n    Expected output: 1 3, 3 4, 4 2\n    Explanation: Node 2 cannot be on the path between nodes 1 and 3, and node 2 cannot be on the path between nodes 3 and 4. The tree can be constructed as 1-3-4-2.\n\n    Case 3: n = 5, m = 0\n    Expected output: Any valid tree with n-1 edges\n    Explanation: With no restrictions, any valid tree structure with n-1 edges is acceptable.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of connecting nodes while respecting restrictions will naturally handle these cases.\n", "requirement analysis:\nThe requirements focus on constructing a tree with specific restrictions, ensuring the tree is connected and undirected. The solution must handle multiple test cases efficiently and provide output in the specified format.\nrequirement pool:\n- Implement the tree construction algorithm that meets all restrictions\n- Ensure the solution is scalable for large values of n\n- Validate the tree structure for connectivity and undirected nature\n- Optimize the algorithm for performance\n- Provide detailed documentation for the solution\nWe will implement a function to construct a tree that satisfies the given restrictions using a simple and efficient approach. The key idea is to select a root node and connect all other nodes to it, ensuring that the restrictions are respected. This approach leverages the fact that a tree with n nodes has exactly n-1 edges and is inherently connected and acyclic. We will use a straightforward algorithm to ensure that the restrictions are met by carefully choosing the root node and connecting other nodes in a way that avoids restricted paths.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them.\n\n    'restriction'\n    Explanation: A restriction consists of three pairwise distinct integers, a, b, and c, signifying that node b cannot lie on the simple path between node a and node c.\n\n# [phrase showing quantity relationship]\n    'n nodes': The tree must have exactly n nodes.\n    'n-1 edges': The tree must have exactly n-1 edges to be a valid tree.\n    '1 \u2264 m < n': The number of restrictions m must be at least 1 and less than n.\n\n# [degree adverb]\n    'most optimal': The solution should ensure the most optimal configuration of the tree while respecting all restrictions.\n\n# [code logic]\n    1. For each test case, read the number of nodes n and the number of restrictions m.\n    2. Initialize an empty list to store the edges of the tree.\n    3. Choose a root node (e.g., node 1) and connect all other nodes to it, ensuring that no restriction is violated.\n    4. For each restriction (a, b, c), ensure that node b is not on the path between nodes a and c by carefully selecting connections.\n    5. Output the n-1 edges for each test case.\n\n# [edge case]\n    Case 1: n = 3, m = 1, restrictions = [(1, 2, 3)]\n    Expected output: [(1, 3), (3, 2)]\n    Explanation: Node 2 cannot be on the path between nodes 1 and 3. Connecting 1 to 3 and then 3 to 2 satisfies this restriction.\n\n    Case 2: n = 4, m = 2, restrictions = [(1, 2, 3), (3, 4, 2)]\n    Expected output: [(1, 3), (3, 4), (4, 2)]\n    Explanation: Node 2 cannot be on the path between nodes 1 and 3, and node 2 cannot be on the path between nodes 3 and 4. Connecting nodes as shown satisfies both restrictions.\n\n    Case 3: n = 5, m = 3, restrictions = [(1, 2, 3), (2, 4, 5), (3, 5, 4)]\n    Expected output: [(1, 3), (3, 5), (5, 4), (4, 2)]\n    Explanation: Each restriction is satisfied by ensuring node b is not on the path between nodes a and c.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        def construct_tree(n, restrictions):\n            edges = []\n            root = 1\n            for i in range(2, n+1):\n                if not any(root == b and (root == a or root == c) for a, b, c in restrictions):\n                    edges.append((root, i))\n            return edges\n\n        # Example usage:\n        test_cases = [\n            (3, [(1, 2, 3)]),\n            (4, [(1, 2, 3), (3, 4, 2)]),\n            (5, [(1, 2, 3), (2, 4, 5), (3, 5, 4)])\n        ]\n        for n, restrictions in test_cases:\n            print(construct_tree(n, restrictions))\n", "requirement analysis:\nThe requirements focus on constructing a tree with specific restrictions, ensuring that the tree is both valid and optimal. The constraints on node placement in paths must be carefully managed to ensure compliance with restrictions. The solution must handle multiple test cases efficiently, given the large possible input size.\nrequirement pool:\n- Efficiently construct a tree that meets all restrictions\n- Ensure the output format is correct for multiple test cases\n- Handle large input sizes without performance degradation\n- Verify the tree structure is correct for each test case\n- Provide clear documentation and examples for understanding restrictions\nWe will implement a function to construct a tree that satisfies the given restrictions using a simple and efficient algorithm. The approach involves selecting a root node and connecting all other nodes to it, ensuring that the restrictions are respected. This method guarantees a valid tree structure while maintaining simplicity and efficiency. We will use basic data structures like lists to store edges and restrictions, and process each test case independently to handle large input sizes effectively.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them.\n\n    'restriction'\n    Explanation: A restriction consists of three distinct integers, a, b, and c, indicating that node b cannot lie on the simple path between node a and node c.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between nodes and edges in a tree. For a tree with n nodes, there must be exactly n-1 edges.\n    Implementation: Ensure that the output contains n-1 edges for each test case.\n\n# [degree adverb]\n    'most optimal solution': This suggests finding a solution that satisfies all restrictions while maintaining the tree structure.\n    Implementation: Ensure that the solution respects all restrictions and forms a valid tree.\n\n# [code logic]\n    1. For each test case, read the number of nodes (n) and restrictions (m).\n    2. Initialize an empty list to store the edges of the tree.\n    3. Choose a root node (e.g., node 1) and connect all other nodes to it, ensuring that restrictions are respected.\n    4. For each restriction, ensure that the path between nodes a and c does not include node b.\n    5. Output the edges for each test case.\n\n# [edge case]\n    Case 1: Minimum nodes and restrictions\n    Input: 3 1\n           1 2 3\n    Expected Output: \n    1 3\n    Explanation: With only three nodes, the simplest tree is to connect node 1 to node 3 directly, avoiding node 2 in the path.\n\n    Case 2: Maximum nodes with no restrictions\n    Input: 100000 0\n    Expected Output: \n    (Output n-1 lines connecting all nodes sequentially)\n    Explanation: With no restrictions, a simple sequential connection of nodes is valid.\n\n    Case 3: All nodes are restricted\n    Input: 4 3\n           1 2 3\n           2 3 4\n           3 4 1\n    Expected Output:\n    (Output edges that respect all restrictions)\n    Explanation: Ensure that no path violates any restriction.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        # Example code snippet for handling restrictions:\n        def construct_tree(n, restrictions):\n            edges = []\n            root = 1\n            for i in range(2, n+1):\n                if not any(root == b and (root == a or root == c) for a, b, c in restrictions):\n                    edges.append((root, i))\n            return edges\n\n        # Process each test case independently\n        for _ in range(t):\n            n, m = map(int, input().split())\n            restrictions = [tuple(map(int, input().split())) for _ in range(m)]\n            result = construct_tree(n, restrictions)\n            for u, v in result:\n                print(u, v)\n", "requirement analysis:\nThe requirements focus on constructing a tree that adheres to specific restrictions. The solution must efficiently handle up to 10^4 test cases and ensure the sum of nodes across all test cases does not exceed 10^5. The output must be formatted correctly to represent the tree structure.\nrequirement pool:\n- Efficiently construct a tree with n nodes and n-1 edges\n- Ensure the tree meets all m restrictions\n- Handle multiple test cases efficiently\n- Provide clear output format for the tree structure\n- Optimize for large values of n and m\nWe will use a graph theory approach to construct the tree. The key challenge is to ensure that the tree satisfies all given restrictions efficiently. We will leverage the NetworkX library, which provides robust graph manipulation capabilities, to construct and validate the tree structure. The algorithm will iterate through each test case, construct a tree, and check the restrictions using simple path checks.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where there is exactly one simple path between any two distinct nodes.\n\n    'restriction'\n    Explanation: A restriction is a condition where a specific node cannot lie on the simple path between two other nodes.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between the number of nodes and edges in a tree. In code, this can be implemented by ensuring the graph has exactly n-1 edges for n nodes.\n\n# [degree adverb]\n    'most optimal solution': This implies finding a solution that satisfies all restrictions while maintaining the tree structure. In code, this can be implemented by iterating through possible configurations and validating them against restrictions.\n\n# [code logic]\n    1. Parse the input to get the number of test cases.\n    2. For each test case, read n and m.\n    3. Initialize a graph with n nodes.\n    4. For each restriction, ensure that the node b does not lie on the path between nodes a and c.\n    5. Construct the tree by adding edges while checking restrictions.\n    6. Output the edges of the tree for each test case.\n\n# [edge case]\n    Test case with minimum nodes and restrictions:\n    Input: 3 1\n           1 2 3\n    Output: \n           1 3\n           3 2\n    Explanation: With only three nodes, the only possible tree structure that satisfies the restriction is to connect node 1 to node 3 and node 3 to node 2.\n\n    Test case with maximum nodes and minimum restrictions:\n    Input: 100000 1\n           1 2 3\n    Output: \n           (A valid tree structure with 100000 nodes and 99999 edges)\n    Explanation: The tree should be constructed such that node 2 does not lie on the path between node 1 and node 3.\n\n    Test case with multiple restrictions:\n    Input: 5 4\n           1 2 3\n           2 3 4\n           3 4 5\n           4 5 1\n    Output:\n           (A valid tree structure satisfying all restrictions)\n    Explanation: The tree should be constructed such that none of the restrictions are violated.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        (Code to ensure that restrictions are checked during tree construction)\n        (Code to handle large input sizes efficiently)\n        (Code to validate the tree structure after construction)\n", "requirement analysis:\nThe requirements focus on constructing a tree that satisfies given restrictions. The solution must handle multiple test cases efficiently, ensuring the tree is connected and meets all constraints. The output format is crucial for validation.\nrequirement pool:\n- Efficiently construct a tree with n nodes and n-1 edges\n- Ensure the tree meets all m restrictions\n- Handle multiple test cases within the input constraints\n- Provide output in the correct format for validation\n- Optimize for large values of n and m\nWe will use a graph-based approach to construct the tree. The key idea is to ensure that the tree satisfies all given restrictions by carefully selecting edges. We will utilize a depth-first search (DFS) algorithm to ensure connectivity and compliance with restrictions. The NetworkX library can be used for efficient graph operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, ensuring exactly one simple path between any two distinct nodes.\n\n    'restriction'\n    Explanation: A restriction is a condition where a specific node cannot lie on the simple path between two other nodes.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between the number of nodes and edges in a tree, which is crucial for maintaining the tree structure.\n    '1 \u2264 m < n': This specifies the range for the number of restrictions, ensuring there are fewer restrictions than nodes.\n\n# [degree adverb]\n    'most optimal': This implies finding the best possible configuration of the tree that satisfies all restrictions.\n\n# [code logic]\n    1. Parse the input to retrieve the number of test cases and details for each test case.\n    2. For each test case, initialize a graph with n nodes.\n    3. Use a depth-first search (DFS) or breadth-first search (BFS) to construct the tree while ensuring that no restriction is violated.\n    4. For each restriction, ensure that the specified node does not lie on the path between the other two nodes.\n    5. Output the edges of the constructed tree for each test case.\n\n# [edge case]\n    Case 1: Minimum nodes and restrictions\n    Input: 3 1\n           1 2 3\n    Expected Output: \n           1 3\n           3 2\n    Explanation: With only three nodes, the tree can be constructed directly without violating the single restriction.\n\n    Case 2: Maximum nodes with no restrictions\n    Input: 100000 0\n    Expected Output: A linear chain from node 1 to node 100000.\n    Explanation: Without restrictions, a simple linear chain satisfies the tree structure.\n\n    Case 3: All nodes are part of restrictions\n    Input: 4 3\n           1 2 3\n           2 3 4\n           3 4 1\n    Expected Output:\n           1 4\n           4 3\n           3 2\n    Explanation: The tree must be constructed such that no node lies on the path between any two other nodes as per restrictions.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where restrictions might make direct path construction challenging.\n        def construct_tree(n, restrictions):\n            # Initialize graph structure\n            graph = {i: [] for i in range(1, n+1)}\n            \n            # Implement logic to add edges while considering restrictions\n            # Example pseudo-code:\n            for i in range(1, n):\n                # Add edge logic ensuring no restriction is violated\n                pass\n            \n            return graph\n\n        # Additional logic to ensure compliance with restrictions during edge addition\n", "requirement analysis:\nThe main requirement is to construct a tree that satisfies all given restrictions for multiple test cases. The solution must be efficient due to the large possible input size and should output the tree in a clear format. The constraints ensure that a valid tree always exists, so the focus is on finding an optimal construction method.\nrequirement pool:\n- Efficiently construct a tree for given restrictions.\n- Ensure the solution handles the maximum input size within time limits.\n- Provide a clear and concise output format.\n- Optimize the algorithm for scalability.\n- Include detailed comments and documentation for the code.\nWe will use a graph-based approach to construct the tree. The key challenge is to ensure that the tree satisfies all given restrictions. We can leverage the properties of trees and graph traversal algorithms to efficiently construct the tree. We will use a simple adjacency list to represent the tree and ensure that the restrictions are met by carefully selecting edges during construction. The networkx library can be used for graph operations, but given the constraints, a custom implementation will be more efficient.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where there is exactly one simple path between any two distinct nodes.\n\n    'simple path'\n    Explanation: A simple path is a path between two nodes that does not contain any node more than once.\n\n    'restriction'\n    Explanation: A restriction specifies that a particular node cannot lie on the simple path between two other nodes.\n\n# [phrase showing quantity relationship]\n    'n-1 edges': This indicates that the tree must have exactly n-1 edges for n nodes.\n    \n    '1 \u2264 m < n': This specifies that the number of restrictions m is at least 1 and less than n.\n\n# [degree adverb]\n    'most optimal': This implies finding the best possible configuration of the tree that satisfies all restrictions.\n\n# [code logic]\n1. Parse the input to get the number of test cases.\n2. For each test case, read n and m.\n3. Initialize an adjacency list to represent the tree.\n4. For each restriction, note the nodes involved.\n5. Use a strategy to construct the tree such that no restricted node lies on the path between the specified nodes.\n6. Output the edges of the constructed tree.\n\n# [edge case]\n    Case 1: n = 3, m = 1, restrictions = [(1, 2, 3)]\n    Expected output: 1 3\n                     3 2\n    Explanation: The only possible tree with 3 nodes and satisfying the restriction is to connect 1 to 3 and 3 to 2.\n\n    Case 2: n = 4, m = 2, restrictions = [(1, 2, 3), (3, 4, 1)]\n    Expected output: 1 3\n                     3 4\n                     4 2\n    Explanation: The tree must be constructed such that node 2 is not on the path between nodes 1 and 3, and node 1 is not on the path between nodes 3 and 4.\n\n    Case 3: n = 5, m = 0\n    Expected output: Any valid tree with 5 nodes and no restrictions, e.g., \n                     1 2\n                     2 3\n                     3 4\n                     4 5\n    Explanation: With no restrictions, any valid tree structure is acceptable.\n\n# [extra code for edge case]\n    We need extra code to handle edge cases where restrictions might conflict or when there are no restrictions.\n    \n```python\ndef construct_tree(n, restrictions):\n    # Initialize adjacency list\n    adj_list = {i: [] for i in range(1, n+1)}\n    \n    # Handle edge cases with no restrictions\n    if not restrictions:\n        for i in range(1, n):\n            print(i, i+1)\n        return\n    \n    # Example logic to handle restrictions (simplified)\n    # This part needs to be expanded based on specific logic to handle restrictions\n    for a, b, c in restrictions:\n        # Ensure b is not on the path between a and c\n        # Example logic: Connect a to c directly if possible\n        if c not in adj_list[a]:\n            adj_list[a].append(c)\n            adj_list[c].append(a)\n    \n    # Output edges from adjacency list\n    for u in adj_list:\n        for v in adj_list[u]:\n            if u < v:\n                print(u, v)\n\n# Example usage:\n# construct_tree(5, [(1, 2, 3), (3, 4, 5)])\n```\nThis code snippet provides a basic framework for constructing a tree while considering restrictions. The actual implementation would need to ensure all restrictions are satisfied while maintaining a valid tree structure.\n", "requirement analysis:\nThe task is to construct a tree with n nodes and n-1 edges that satisfies m restrictions. Each restriction specifies that a particular node cannot be on the path between two other nodes. The solution must handle multiple test cases efficiently, given the constraints on n and m. The problem guarantees that a solution always exists, so the focus is on finding a valid configuration for each test case.\nrequirement pool:\n- The main code should efficiently construct a tree for each test case that satisfies all given restrictions.\n- Ensure the solution handles the maximum constraints efficiently, given the sum of n across all test cases does not exceed 10^5.\n- Implement a function to parse input and output the tree structure correctly.\n- Optimize the algorithm to minimize computational complexity.\n- Include comments and documentation for better code understanding.\nWe will use a greedy approach to construct the tree. The key idea is to select a root node and connect it to all other nodes, ensuring that the restrictions are satisfied. Since a solution is guaranteed to exist, we can choose any node as the root and connect it to all other nodes, which will inherently satisfy the restrictions because the path between any two nodes will not pass through any other node except the root.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them.\n\n    'restriction'\n    Explanation: A restriction is a condition where a specific node cannot lie on the simple path between two other nodes.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between the number of nodes and edges in a tree. In a tree with n nodes, there are always n-1 edges.\n    \n    '1 \u2264 m < n': This specifies that the number of restrictions (m) is at least 1 and less than the number of nodes (n).\n\n# [degree adverb]\n    'most optimal': This implies finding the best possible configuration of the tree that satisfies all restrictions.\n\n# [code logic]\n1. For each test case, read the number of nodes (n) and restrictions (m).\n2. Choose a root node arbitrarily (e.g., node 1).\n3. Connect the root node to all other nodes to form a star-shaped tree.\n4. Verify that this configuration satisfies all restrictions by ensuring that no restricted node lies on the path between any two other nodes.\n5. Output the edges of the tree for each test case.\n\n# [edge case]\n    Case 1: n = 3, m = 1, restriction = (1, 2, 3)\n    Expected output: \n    1 3\n    3 2\n    Explanation: The path between 1 and 3 is direct, and the path between 3 and 2 is direct, satisfying the restriction.\n\n    Case 2: n = 4, m = 2, restrictions = (1, 2, 3), (2, 3, 4)\n    Expected output:\n    1 3\n    3 4\n    4 2\n    Explanation: The paths do not include the restricted nodes on the paths between specified pairs.\n\n    Case 3: n = 5, m = 0\n    Expected output:\n    1 2\n    1 3\n    1 4\n    1 5\n    Explanation: With no restrictions, any valid tree structure is acceptable.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of connecting all nodes to a single root node inherently satisfies all restrictions by ensuring no intermediate nodes on paths between any two other nodes.\n", "requirement analysis:\nThe requirements focus on constructing a tree with specific restrictions on paths between nodes. The solution must handle multiple test cases efficiently and ensure the output format is correct. The constraints on node numbers and restrictions must be carefully managed to ensure optimal performance.\nrequirement pool:\n- Construct a tree that satisfies all given restrictions.\n- Ensure the solution is efficient for large values of n.\n- Provide clear instructions on the output format.\n- Handle multiple test cases efficiently.\n- Optimize the solution for edge cases.\nWe will use a greedy approach to construct the tree. The key idea is to select a root node and connect it to all other nodes, ensuring that the restrictions are satisfied. We can choose any node as the root, but to simplify, we can choose node 1. For each restriction, we ensure that the node b is not on the path between a and c by directly connecting a and c to the root, thus avoiding b being on their path. This approach is efficient and works within the constraints provided.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where for any two nodes there is exactly one simple path between them.\n\n    'restriction'\n    Explanation: A restriction consists of three distinct integers, a, b, and c, indicating that node b cannot lie on the simple path between nodes a and c.\n\n# [phrase showing quantity relationship]\n    'n nodes': The tree must have exactly n nodes.\n    'n-1 edges': The tree must have exactly n-1 edges to be a valid tree.\n    '1 \u2264 m < n': The number of restrictions m must be at least 1 and less than n.\n\n# [degree adverb]\n    'most optimal': The solution should ensure the tree satisfies all restrictions in the most efficient way possible.\n\n# [code logic]\n    - For each test case, read the number of nodes n and restrictions m.\n    - Choose a root node (e.g., node 1) to simplify the construction.\n    - For each restriction, ensure node b is not on the path between nodes a and c by connecting a and c directly to the root.\n    - Output the edges that form the tree for each test case.\n\n# [edge case]\n    Case 1: When n = 3 and m = 1 with restriction (1, 2, 3)\n    Expected output: \n    1 3\n    1 2\n    Explanation: Node 2 cannot be on the path between nodes 1 and 3, so both are directly connected to the root node 1.\n\n    Case 2: When n = 4 and m = 3 with restrictions (1, 2, 3), (2, 3, 4), (3, 4, 1)\n    Expected output:\n    1 3\n    1 4\n    1 2\n    Explanation: Each restriction is satisfied by connecting nodes directly to the root node.\n\n    Case 3: When n = 5 and m = 4 with restrictions (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 1)\n    Expected output:\n    1 3\n    1 4\n    1 5\n    1 2\n    Explanation: All nodes are connected to the root node to satisfy all restrictions.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of connecting nodes directly to a chosen root node ensures all restrictions are satisfied.\n", "requirement analysis:\nThe requirements focus on constructing a tree with specific restrictions, ensuring the tree is connected and undirected, and providing output in the correct format for multiple test cases. The solution must be efficient given the constraints on n and m, and handle up to 10^4 test cases with a total sum of n not exceeding 10^5.\nrequirement pool:\n- Efficiently construct a tree with n nodes and n-1 edges\n- Ensure the tree meets all m restrictions\n- Provide output in the correct format for multiple test cases\n- Verify the tree is connected and undirected\n- Optimize for large values of n and m\nWe will use a greedy approach to construct the tree. The key idea is to select a root node and connect it to all other nodes, ensuring that the restrictions are satisfied. This approach leverages the fact that a tree with n nodes has exactly n-1 edges and is inherently connected. We will use a simple adjacency list to represent the tree and ensure that no restricted node lies on the path between any two specified nodes by carefully choosing the root and its connections.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where there is exactly one simple path between any two nodes.\n\n    'restriction'\n    Explanation: A restriction specifies that a particular node cannot lie on the simple path between two other nodes.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between the number of nodes and edges in a tree. In code, this means ensuring that the graph has exactly n-1 edges for n nodes.\n\n# [degree adverb]\n    'most optimal': This suggests finding a solution that satisfies all restrictions while maintaining the tree structure. In code, this means efficiently constructing the tree without violating any restrictions.\n\n# [code logic]\n1. For each test case, read the number of nodes (n) and restrictions (m).\n2. Initialize an adjacency list to represent the tree.\n3. Choose a root node (e.g., node 1) and connect it to all other nodes initially.\n4. For each restriction, ensure that the restricted node does not lie on the path between the specified nodes by adjusting connections if necessary.\n5. Output the edges of the constructed tree.\n\n# [edge case]\n    Case 1: n = 3, m = 1, restriction = (1, 2, 3)\n    Expected output: 1 3, 3 2\n    Explanation: The only restriction is that node 2 cannot be on the path between nodes 1 and 3. The tree can be constructed as 1 connected to 3 and 3 connected to 2.\n\n    Case 2: n = 4, m = 0\n    Expected output: 1 2, 1 3, 1 4\n    Explanation: With no restrictions, a simple star configuration with node 1 as the root satisfies the tree structure.\n\n    Case 3: n = 5, m = 4, restrictions = (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 1)\n    Expected output: A valid configuration that satisfies all restrictions.\n    Explanation: The tree must be constructed such that no restricted node lies on the specified paths.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n    - Implement logic to adjust connections based on restrictions.\n    - Ensure that no restricted node lies on the path between specified nodes by checking and modifying connections as needed.\n", "requirement analysis:\nThe requirements focus on constructing a tree with specific restrictions, ensuring that the solution is efficient given the constraints of node count and restriction count. The solution must handle multiple test cases and provide output in a specified format.\nrequirement pool:\n- Efficiently construct a tree with n nodes and n-1 edges\n- Ensure all m restrictions are met in the tree structure\n- Handle multiple test cases and provide correct output for each\n- Optimize the algorithm for large values of n and m\n- Provide clear documentation and examples for users\nWe will use a graph theory approach to construct the tree while ensuring all restrictions are met. The key is to identify a central node that can act as a root and connect other nodes in a way that avoids restricted paths. We will utilize depth-first search (DFS) to efficiently build the tree and check restrictions. Libraries like NetworkX can be used for graph operations, but given the constraints, a custom solution is more suitable for handling large inputs efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'tree'\n    Explanation: A tree is a connected undirected graph with n nodes and n-1 edges, where there is exactly one simple path between any two nodes.\n\n    'restriction'\n    Explanation: A restriction consists of three distinct integers, a, b, and c, indicating that node b cannot lie on the simple path between node a and node c.\n\n# [phrase showing quantity relationship]\n    'n nodes and n-1 edges': This indicates the relationship between nodes and edges in a tree. For a tree with n nodes, there must be exactly n-1 edges.\n    Implementation: Ensure that the output contains n-1 edges for each test case.\n\n# [degree adverb]\n    'most optimal solution': This implies finding the best possible configuration of the tree that satisfies all restrictions.\n    Implementation: Use efficient algorithms to construct the tree while checking all restrictions.\n\n# [code logic]\n    1. Parse the input to get the number of test cases.\n    2. For each test case, read n and m, and then read the m restrictions.\n    3. Choose a central node to act as a root for the tree.\n    4. Use depth-first search (DFS) or another graph traversal method to construct the tree.\n    5. Ensure that no restricted paths are violated while constructing the tree.\n    6. Output the n-1 edges for each test case.\n\n# [edge case]\n    Case 1: Minimum nodes and restrictions\n    Input: 3 1\n           1 2 3\n    Expected Output: \n           1 3\n           3 2\n    Explanation: With only three nodes, the tree must connect all nodes without violating the single restriction.\n\n    Case 2: Maximum nodes with no restrictions\n    Input: 100000 0\n    Expected Output: A valid tree with 99999 edges connecting all nodes.\n    Explanation: Without restrictions, any valid tree structure is acceptable.\n\n    Case 3: All nodes are part of restrictions\n    Input: 4 3\n           1 2 3\n           2 3 4\n           3 4 1\n    Expected Output: \n           1 3\n           3 4\n           4 2\n    Explanation: The tree must be constructed such that no restriction is violated.\n\n# [extra code for edge case]\n    We need extra code to handle the edge cases.\n        - Implement logic to handle cases with minimum nodes and restrictions.\n        - Ensure efficient handling of large inputs without restrictions.\n        - Carefully construct trees when all nodes are part of restrictions.\n"], "scores": [], "pass_results": [true, false, false, true, false, false, false, false, false, true], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 3, "round": 756, "examples": "\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains two integers, n and m (3 \u2264 n \u2264 10^5, 1 \u2264 m < n), representing the size of the tree and the number of restrictions.\n\nThe i-th of the next m lines contains three integers a_i, b_i, c_i (1 \u2264 a_i, b_i, c_i \u2264 n, a, b, c are distinct), signifying that node b_i cannot lie on the simple path between nodes a_i and c_i. \n\nIt is guaranteed that the sum of n across all test cases will not exceed 10^5.\n\nOutput\n\nFor each test case, output n-1 lines representing the n-1 edges in the tree. On each line, output two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) signifying that there is an edge between nodes u and v. Given edges have to form a tree that satisfies Omkar's restrictions.\n\nExample\n\nInput\n\n\n2\n7 4\n1 2 3\n3 4 5\n5 6 7\n6 5 4\n5 3\n1 2 3\n2 3 4\n3 4 5\n\n\nOutput\n\n\n1 2\n1 3\n3 5\n3 4\n2 7\n7 6\n5 1\n1 3\n3 2\n2 4\n\nNote\n\nThe output of the first sample case corresponds to the following tree: \n\n<image> For the first restriction, the simple path between 1 and 3 is 1, 3, which doesn't contain 2. The simple path between 3 and 5 is 3, 5, which doesn't contain 4. The simple path between 5 and 7 is 5, 3, 1, 2, 7, which doesn't contain 6. The simple path between 6 and 4 is 6, 7, 2, 1, 3, 4, which doesn't contain 5. Thus, this tree meets all of the restrictions.\n\nThe output of the second sample case corresponds to the following tree: \n", "mutate_method": "add_1_sentence_at_end", "parent_index": 368}
