{"name": "1598_B. Groups", "description": "n students attended the first meeting of the Berland SU programming course (n is even). All students will be divided into two groups. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), and the days chosen for the groups must be different. Furthermore, both groups should contain the same number of students.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. \n\nYour task is to determine if it is possible to choose two different week days to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "tags": ["brute force", "implementation"], "difficulty": 8, "id": 1598, "sample_io": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}], "test_list": [{"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 0 1 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n-1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 0 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n1 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 1 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 0 0 0 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 1\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n1 1 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 0 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n-1 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n1 1 0 0 1\n0 0 0 1 1\n0 0 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 1 1\n1 1 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 1 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 1 0 0\n0 0 0 1 1\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 1 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 1 1\n0 0 0 1 0\n1 1 0 0 0\n2\n-1 0 0 1 0\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n1 1 0 1 0\n2\n0 0 0 0 1\n0 1 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 1\n0 1 0 0 1\n2\n0 1 0 1 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 0 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 0\n0 1 0 1 0\n0 1 0 0 0\n2\n0 0 1 1 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 1 1\n0 0 0 1 0\n0 1 0 0 0\n2\n1 0 0 0 1\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 1 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n1 1 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n1 1 0 1 1\n0 0 1 0 0\n1 0 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n1 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 0 0 0 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 0 0\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 1 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 1\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 1 0 0\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n0 1 1 0 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n1 1 0 1 0\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 0\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 1\n1 0 1 1 1\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 0\n0 0 1 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 1\n0 1 0 0 1\n1 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 1 0 1\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 0 0 1 1\n2\n0 0 0 0 0\n0 0 1 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n0 0 0 1 0\n1 1 0 0 1\n0 0 0 0 0\n0 0 0 1 0\n2\n0 0 0 0 0\n0 0 1 1 1\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 1 1 0\n2\n0 0 0 1 1\n0 1 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 0 0 0 1\n2\n0 0 0 0 1\n0 0 1 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 1 1\n0 0 0 0 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 1 0 0\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n0 0 0 1 0\n0 1 0 0 1\n1 1 0 0 0\n0 1 0 0 0\n2\n0 0 0 1 1\n1 0 0 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 0 0\n2\n0 1 0 0 0\n0 0 1 0 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 0 0 0 1\n0 1 0 1 0\n0 0 0 0 0\n2\n0 0 0 0 1\n0 0 1 1 1\n", "output": ["NO\nYES\n"]}, {"input": "2\n4\n1 1 0 1 0\n0 1 0 0 1\n1 0 0 0 1\n0 1 0 0 1\n2\n0 0 0 1 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 1 1 0\n0 1 0 1 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 0 0 0\n0 0 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 0\n0 1 0 0 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 1 0 1 0\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 0\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 1\n1 1 0 0 1\n0 1 0 1 0\n0 1 0 1 0\n2\n0 1 0 0 1\n0 0 1 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 1 1 1\n0 1 0 0 0\n0 0 0 1 0\n0 0 0 1 1\n2\n0 0 0 0 0\n0 1 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n1 0 0 0 0\n0 1 0 0 1\n0 0 0 1 0\n1 1 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["NO\nNO\n"]}, {"input": "2\n4\n0 0 1 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 0 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 1 1 0\n0 1 1 0 1\n0 0 0 1 0\n1 0 0 1 0\n2\n0 0 0 0 0\n0 0 0 1 0\n", "output": ["YES\nNO\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 1 0 1 0\n1 1 0 0 0\n2\n0 0 0 0 1\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 1 1 1 0\n0 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 1\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n0 0 1 1 0\n1 1 0 0 1\n0 0 0 1 1\n0 1 0 1 0\n2\n1 0 0 0 1\n0 0 0 1 0\n", "output": ["YES\nYES\n"]}, {"input": "2\n4\n1 0 0 1 0\n0 1 0 0 1\n1 0 0 1 0\n1 1 0 1 0\n2\n0 0 1 1 1\n1 0 0 1 1\n", "output": ["YES\nYES\n"]}], "task_id": "codecontest/59", "prompt": "n students attended the initial meeting of the Berland SU programming course (n is an even number), and all students will be divided into two groups with both groups containing the same number of students. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), with the days chosen for the groups being different.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two distinct weekdays to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible. Thoroughly analyze the survey data to ensure optimal group assignment and day selection.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "repair_prompt": ["n students attended the initial meeting of the Berland SU programming course (n is an even number), and all students will be divided into two groups with both groups containing the same number of students. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), with the days chosen for the groups being different.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not.\n\nYour task is to determine if it is possible to choose two distinct weekdays to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible. Thoroughly analyze the survey data to ensure optimal group assignment and day selection.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students attended the initial meeting of the Berland SU programming course (n is an even number), and all students will be divided into two groups with both groups containing the same number of students. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), with the days chosen for the groups being different.\n\nEach student has filled a survey in which they told which days of the week are convenient for them to attend a lesson. They also specified the days which are not convenient for them to attend a lesson.\n\nYour task is to determine if it is possible to choose two distinct weekdays to schedule the lessons for the group (the first group will attend the lesson on the first chosen day, the second group will attend the lesson on the second chosen day), and divide the students into two groups, so the groups have equal sizes, and for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible. Thoroughly analyze the survey data to ensure optimal group assignment and day selection.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "n students attended the initial meeting of the Berland SU programming course (n is an even number), and all students will be divided into two groups with both groups containing the same number of students. Each group will be attending exactly one lesson each week during one of the five working days (Monday, Tuesday, Wednesday, Thursday and Friday), with the days chosen for the groups being different. Each student has filled a survey in which they told which days of the week are convenient for them to attend a lesson, and which are not. Your task is to determine if it is possible to choose two distinct weekdays to schedule the lessons for the group and divide the students into two equal groups, so for each student, the chosen lesson day for their group is convenient. Consider the distribution of convenient days among students and the constraints given carefully while designing your approach. Make sure to account for scenarios where multiple distributions are possible. Thoroughly analyze the survey data to ensure optimal group assignment and day selection.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\n-------\nImportant Note: You must follow the input output format.  The code will be tested against multiple test cases and all the test cases must be passed.\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days."], "completions": ["from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending lessons on distinct weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" if division is possible, otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                both_count = 0\n                \n                # Count students available on day i, day j, and both days\n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        both_count += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if it's possible to divide students into two groups\n                if count_i + both_count >= half_n and count_j + both_count >= half_n and count_i + count_j + both_count == n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport itertools\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for preferences in test_cases:\n        n = len(preferences)\n        half_n = n // 2\n        possible = False\n        \n        # Generate all pairs of distinct weekdays\n        for day1, day2 in itertools.combinations(range(5), 2):\n            group1_count = 0\n            group2_count = 0\n            \n            # Count students who can attend on day1 and day2\n            for student in preferences:\n                if student[day1] == 1:\n                    group1_count += 1\n                if student[day2] == 1:\n                    group2_count += 1\n            \n            # Check if both groups can have equal sizes\n            if group1_count >= half_n and group2_count >= half_n:\n                possible = True\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    preferences = [list(map(int, input().split())) for _ in range(n)]\n    test_cases.append(preferences)\n\n# Output interface\nresults = can_divide_students(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" or \"NO\".\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for i in range(5):\n            for j in range(i + 1, 5):\n                count_i = 0\n                count_j = 0\n                both_count = 0\n                \n                # Count students who can attend on day i, day j, and both days\n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        both_count += 1\n                    elif student[i] == 1:\n                        count_i += 1\n                    elif student[j] == 1:\n                        count_j += 1\n                \n                # Check if we can form two groups of equal size\n                if count_i + both_count >= half_n and count_j + both_count >= half_n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n    \n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with distinct convenient days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students and their availability.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for n, availability in test_cases:\n        # Iterate over all pairs of distinct weekdays\n        possible = False\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                # Count students who can attend on day1 and day2\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                for student in availability:\n                    if student[day1] == 1:\n                        count_day1 += 1\n                    if student[day2] == 1:\n                        count_day2 += 1\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                \n                # Check if we can split students into two groups of n/2 each\n                if count_day1 >= n // 2 and count_day2 >= n // 2 and (count_day1 + count_day2 - both_days) >= n:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Interface using input() and print()\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups with equal sizes\n    such that each group can attend lessons on different convenient weekdays.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, where each test case\n            is a list of student availability for each weekday.\n\n    Returns:\n        List[str]: List of results for each test case, \"YES\" if division is possible,\n            otherwise \"NO\".\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, or both\n                for student in case:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can form two groups of equal size\n                if count_day1 + both_days >= half_n and count_day2 + both_days >= half_n:\n                    if count_day1 + count_day2 + both_days >= n:\n                        possible = True\n                        break\n            if possible:\n                break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    t = int(data[index])\n    index += 1\n    \n    test_cases = []\n    for _ in range(t):\n        n = int(data[index])\n        index += 1\n        availability = []\n        for _ in range(n):\n            availability.append(list(map(int, data[index:index+5])))\n            index += 5\n        test_cases.append(availability)\n    \n    # Call the function and print results\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with equal sizes attending on different convenient days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students and their availability.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for n, availability in test_cases:\n        # Initialize a flag to check if division is possible\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                # Count students who can attend on day i and day j\n                count_i = 0\n                count_j = 0\n                both_days = 0\n                \n                for student in availability:\n                    if student[i] == 1:\n                        count_i += 1\n                    if student[j] == 1:\n                        count_j += 1\n                    if student[i] == 1 and student[j] == 1:\n                        both_days += 1\n                \n                # Check if it's possible to divide students into two groups of equal size\n                if count_i >= n // 2 and count_j >= n // 2 and (count_i + count_j - both_days) >= n:\n                    possible = True\n                    break\n            \n            if possible:\n                break\n        \n        # Append result for the current test case\n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Interface using input() and print()\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List, Tuple\n\ndef can_divide_students(t: int, test_cases: List[Tuple[int, List[List[int]]]]) -> List[str]:\n    results = []\n    \n    for n, availability in test_cases:\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays (i, j)\n        for i in range(5):\n            for j in range(i + 1, 5):\n                group1_count = 0\n                group2_count = 0\n                both_count = 0\n                \n                # Check each student's availability for days i and j\n                for student in availability:\n                    if student[i] == 1 and student[j] == 1:\n                        both_count += 1\n                    elif student[i] == 1:\n                        group1_count += 1\n                    elif student[j] == 1:\n                        group2_count += 1\n                \n                # Calculate the number of students that can be assigned to each group\n                if group1_count + both_count >= n // 2 and group2_count + both_count >= n // 2:\n                    # Check if we can form two groups of equal size\n                    if group1_count <= n // 2 and group2_count <= n // 2:\n                        possible = True\n                        break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\ndef main():\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append((n, availability))\n    \n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n", "from typing import List\n## main.py\n\nimport numpy as np\nfrom itertools import combinations\n\ndef can_divide_students(t: int, test_cases: list) -> list:\n    \"\"\"Determine if students can be divided into two groups with distinct weekdays for lessons.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (list): List of tuples, each containing the number of students and their availability.\n\n    Returns:\n        list: List of strings \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for n, availability in test_cases:\n        # Convert availability to a numpy array for efficient operations\n        availability_array = np.array(availability)\n        \n        # Generate all possible pairs of distinct weekdays (0 to 4 representing Monday to Friday)\n        possible_pairs = combinations(range(5), 2)\n        \n        # Flag to check if a valid division is found\n        found_valid_division = False\n        \n        for day1, day2 in possible_pairs:\n            # Students who can attend on day1\n            can_attend_day1 = availability_array[:, day1] == 1\n            # Students who can attend on day2\n            can_attend_day2 = availability_array[:, day2] == 1\n            \n            # Count students who can attend on each day\n            count_day1 = np.sum(can_attend_day1)\n            count_day2 = np.sum(can_attend_day2)\n            \n            # Check if we can form two groups of size n/2\n            if count_day1 >= n // 2 and count_day2 >= n // 2:\n                # Check if there are enough students who can attend on both days\n                both_days = can_attend_day1 & can_attend_day2\n                count_both_days = np.sum(both_days)\n                \n                # Calculate the number of students needed exclusively for each day\n                needed_day1 = n // 2 - (count_day2 - count_both_days)\n                needed_day2 = n // 2 - (count_day1 - count_both_days)\n                \n                # If the number of students needed exclusively for each day is non-negative, it's possible\n                if needed_day1 <= count_both_days and needed_day2 <= count_both_days:\n                    found_valid_division = True\n                    break\n        \n        if found_valid_division:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nt = int(input())\ntest_cases = []\nfor _ in range(t):\n    n = int(input())\n    availability = [list(map(int, input().split())) for _ in range(n)]\n    test_cases.append((n, availability))\n\n# Output interface\nresults = can_divide_students(t, test_cases)\nfor result in results:\n    print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\nimport itertools\nfrom collections import Counter\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if students can be divided into two groups attending lessons on different days.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing student availability.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for availability in test_cases:\n        n = len(availability)\n        half_n = n // 2\n        possible = False\n        \n        # Generate all combinations of two distinct weekdays (0 to 4)\n        for day1, day2 in itertools.combinations(range(5), 2):\n            count_day1 = 0\n            count_day2 = 0\n            count_both = 0\n            \n            # Count students available on day1, day2, and both\n            for student in availability:\n                if student[day1] and student[day2]:\n                    count_both += 1\n                elif student[day1]:\n                    count_day1 += 1\n                elif student[day2]:\n                    count_day2 += 1\n            \n            # Check if we can split students into two equal groups\n            if count_day1 + count_both >= half_n and count_day2 + count_both >= half_n:\n                # Calculate the number of students needed from those available on both days\n                needed_from_both = max(0, half_n - count_day1) + max(0, half_n - count_day2)\n                if needed_from_both <= count_both:\n                    possible = True\n                    break\n        \n        results.append(\"YES\" if possible else \"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n", "from typing import List\n## main.py\n\nfrom typing import List\n\ndef can_divide_students(t: int, test_cases: List[List[List[int]]]) -> List[str]:\n    \"\"\"Determine if it's possible to divide students into two groups with equal sizes\n    and choose different days for the groups so each student can attend the lesson\n    on the chosen day of their group.\n\n    Args:\n        t (int): Number of test cases.\n        test_cases (List[List[List[int]]]): List of test cases, each containing a list\n            of students' availability for each day of the week.\n\n    Returns:\n        List[str]: List of \"YES\" or \"NO\" for each test case.\n    \"\"\"\n    results = []\n    \n    for case in test_cases:\n        n = len(case)\n        half_n = n // 2\n        possible = False\n        \n        # Iterate over all pairs of distinct weekdays\n        for day1 in range(5):\n            for day2 in range(day1 + 1, 5):\n                count_day1 = 0\n                count_day2 = 0\n                both_days = 0\n                \n                # Count students who can attend on day1, day2, and both\n                for student in case:\n                    if student[day1] == 1 and student[day2] == 1:\n                        both_days += 1\n                    elif student[day1] == 1:\n                        count_day1 += 1\n                    elif student[day2] == 1:\n                        count_day2 += 1\n                \n                # Check if we can form two groups of equal size\n                if count_day1 + both_days >= half_n and count_day2 + both_days >= half_n:\n                    possible = True\n                    break\n            if possible:\n                break\n        \n        if possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Input interface\nif __name__ == \"__main__\":\n    t = int(input())\n    test_cases = []\n    for _ in range(t):\n        n = int(input())\n        availability = [list(map(int, input().split())) for _ in range(n)]\n        test_cases.append(availability)\n\n    # Output interface\n    results = can_divide_students(t, test_cases)\n    for result in results:\n        print(result)\n"], "plans": ["requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend lessons on convenient days. The output should clearly indicate whether a valid division is possible for each test case.\nrequirement pool:\n- Efficiently process up to 10,000 test cases\n- Ensure equal group sizes with distinct weekdays\n- Optimize for large datasets\n- Provide clear and accurate output\n- Handle scenarios with multiple distributions\nWe will implement a function that iterates over all possible pairs of weekdays and checks if it's possible to divide the students into two groups such that each group can attend lessons on one of the chosen days. The function will use a greedy approach to count the number of students available on each day and check if a valid division is possible. This approach ensures that we efficiently handle up to 10,000 test cases.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which means they can be perfectly divided into two equal groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: A day is convenient for a student if they have marked it as 1 in their survey response.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is n/2 for each group.\n    \n    'at least one': Each student can attend lessons on at least one day, meaning there is at least one '1' in each student's availability list.\n\n# [degree adverb] \n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students `n`.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all pairs of distinct weekdays (i, j).\n4. For each pair (i, j), count how many students can attend on day i and how many can attend on day j.\n5. Check if it's possible to divide the students into two groups such that:\n   - One group attends on day i and the other on day j.\n   - Both groups have exactly n/2 students.\n6. If such a division is possible for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case] \n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: With only two students and each available on a different day, it's impossible to form two groups with distinct days.\n\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    = YES\n    Explanation: The first two students can form a group attending on either of the first two days, and the last two students can form a group attending on any of the last three days.\n\n    6\n    1 0 0 0 0\n    1 0 0 0 0\n    1 0 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: All students are only available on either the first or second day, making it impossible to form two groups with distinct days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for possible group divisions inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend lessons on their convenient days. The challenge lies in selecting two distinct weekdays and assigning students to groups such that all constraints are satisfied.\nrequirement pool:\n- Efficiently process up to 10,000 test cases.\n- Ensure each student is assigned to a group with a convenient lesson day.\n- Optimize the algorithm for large datasets.\n- Provide clear and concise output for each test case.\n- Consider multiple possible distributions for flexibility.\nWe will use a combinatorial approach to check all possible pairs of weekdays and attempt to divide students into two groups based on their availability. The algorithm will iterate over all pairs of days and check if a valid division is possible. We will use efficient data structures to handle the constraints and ensure the solution is optimal for large datasets. The itertools library will be used to generate combinations of weekdays.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which allows for an equal division into two groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: A day is convenient for a student if they can attend a lesson on that day, as indicated by a '1' in the input.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is n/2 for each group.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for each weekday.\n3. Iterate over all pairs of distinct weekdays (using combinations from itertools).\n4. For each pair of weekdays, attempt to divide the students into two groups:\n   - Group 1 attends on the first day of the pair.\n   - Group 2 attends on the second day of the pair.\n5. Check if it's possible to assign students to these groups such that each student can attend on their group's day.\n6. If a valid division is found for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Edge Case 1: \n    Input: \n    2\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected Output: NO\n    Explanation: There are only two students, and they cannot attend on the same day, making it impossible to form two groups with different days.\n\n    Edge Case 2:\n    Input:\n    2\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    Expected Output: YES\n    Explanation: The first two students can attend on either Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. A valid division is possible.\n\n    Edge Case 3:\n    Input:\n    2\n    6\n    1 0 0 0 1\n    1 0 0 0 1\n    0 1 0 1 0\n    0 1 0 1 0\n    1 0 0 0 1\n    0 1 0 1 0\n    Expected Output: YES\n    Explanation: The first and last three students can be divided into two groups attending on different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for valid group divisions inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend their group's assigned day. The challenge lies in finding two distinct days that can accommodate all students when divided into two groups.\nrequirement pool:\n- Efficiently process up to 10,000 test cases.\n- Ensure each student can attend their group's assigned day.\n- Optimize the algorithm for large input sizes.\n- Provide clear output for each test case.\n- Consider multiple possible distributions for flexibility.\nWe will use a combinatorial approach to determine if it's possible to divide the students into two groups with equal sizes, each attending on different days. The key is to check for each pair of days if we can split the students such that each group can attend on one of the days. We will iterate over all pairs of days and use a greedy strategy to assign students to groups based on their availability. This approach ensures that we efficiently handle up to 10,000 test cases by leveraging the constraints and properties of the problem.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students, n, is always even, which allows for an equal split into two groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: A day is convenient for a student if they have marked it as 1 in their survey response.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is n/2 for each group.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all pairs of distinct weekdays (i, j).\n4. For each pair (i, j), try to divide the students into two groups:\n   - Group 1 attends on day i.\n   - Group 2 attends on day j.\n5. Check if it's possible to assign n/2 students to each group such that all students in a group can attend on their assigned day.\n6. If a valid division is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Case 1: \n    Input: \n    2\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected Output: NO\n    Explanation: There are only two students, and they are available on different days, making it impossible to form two groups with equal sizes attending on different days.\n\n    Case 2:\n    Input:\n    3\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    Expected Output: YES\n    Explanation: The first two students can form one group attending on either Monday or Tuesday, and the last two can form another group attending on any of Wednesday, Thursday, or Friday.\n\n    Case 3:\n    Input:\n    2\n    4\n    1 0 0 0 1\n    1 0 0 0 1\n    0 1 1 1 0\n    0 1 1 1 0\n    Expected Output: YES\n    Explanation: The first two students can attend on Monday or Friday, and the last two can attend on Tuesday, Wednesday, or Thursday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking for possible group assignments inherently handles these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend their group's chosen day. The challenge lies in finding two distinct days that can accommodate all students when divided into two groups.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student can attend their group's chosen day.\n- Optimize the algorithm for large input sizes.\n- Provide clear and concise output for each test case.\n- Consider multiple possible distributions of students.\nWe will use a combinatorial approach to determine if it's possible to divide the students into two groups such that each group can attend lessons on different days. The key is to iterate over all pairs of days and check if it's possible to split the students into two equal groups where each student can attend the lesson on their group's chosen day. We will use a greedy algorithm to count the number of students available on each day and check if a valid split is possible.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which allows for an equal split into two groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient days'\n    Explanation: Each student has specified which days are convenient for them to attend lessons, and the chosen day for their group must be one of these convenient days.\n\n# [phrase showing quantity relationship]\n    'equal sizes': means that each group must contain exactly half of the students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all pairs of distinct weekdays.\n    2. For each pair, check if it's possible to divide the students into two groups such that:\n        - Each group has n/2 students.\n        - Each student in a group can attend the lesson on the group's chosen day.\n    3. Use a greedy algorithm to count the number of students available on each day and check if a valid split is possible.\n    4. If a valid split is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: There are only two students, and they have no common convenient day to form two groups with different days.\n\n    Test case with all students available on all days:\n    Input: 4\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n           1 1 1 1 1\n    Output: YES\n    Explanation: All students can attend on any day, so it's easy to split them into two groups with different days.\n\n    Test case with one student having only one convenient day:\n    Input: 4\n           1 0 0 0 0\n           0 1 0 0 0\n           0 0 1 0 0\n           0 0 0 1 0\n    Output: NO\n    Explanation: Each student can only attend on one specific day, making it impossible to form two groups with different days.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over pairs of days and checking for valid splits inherently handles these scenarios.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend lessons on a convenient day. The challenge lies in finding two distinct weekdays that allow for such a division, considering the constraints and ensuring optimal group assignment.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student can attend lessons on a convenient day.\n- Optimize the algorithm for large input sizes.\n- Provide clear and concise output for each test case.\n- Consider multiple possible distributions for group assignments.\nWe will use a combinatorial approach to check all possible pairs of weekdays and determine if students can be divided into two equal groups based on their availability. The solution will iterate over all pairs of days and check if it's possible to split students into two groups such that each group can attend lessons on one of the chosen days. We will use efficient data structures to keep track of student availability and ensure the solution handles up to 10,000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which allows them to be divided into two equal groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: A day is convenient for a student if they can attend lessons on that day.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is half of the total number of students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, iterate over all pairs of distinct weekdays.\n    2. For each pair, check if it's possible to divide students into two groups such that:\n       - Each group has n/2 students.\n       - Each student in a group can attend lessons on the group's chosen day.\n    3. Use a combinatorial approach to efficiently check all possible pairs of weekdays.\n    4. If a valid division is found for any pair, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Input: 2\n           2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, it's impossible to find two distinct weekdays that both students can attend.\n\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 0 1 1 1\n           0 0 1 1 1\n    Output: YES\n    Explanation: The first group can attend on Monday or Tuesday, and the second group can attend on Wednesday, Thursday, or Friday.\n\n    Input: 6\n           1 0 0 0 0\n           1 0 0 0 0\n           1 0 0 0 0\n           0 1 1 1 1\n           0 1 1 1 1\n           0 1 1 1 1\n    Output: YES\n    Explanation: The first group can attend on Monday, and the second group can attend on any other day.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for valid group division will naturally handle these cases.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must efficiently handle up to 10,000 test cases and ensure that each student can attend lessons on a convenient day. The challenge lies in selecting two distinct weekdays and ensuring an even distribution of students across these days.\nrequirement pool:\n- Efficiently handle up to 10,000 test cases.\n- Ensure each student can attend lessons on a convenient day.\n- Optimize the algorithm for large input sizes.\n- Provide clear and concise output for each test case.\n- Consider multiple possible distributions of students.\nWe will use a combinatorial approach to determine if it's possible to divide students into two groups with equal sizes based on their availability. The solution will iterate over all possible pairs of days and check if it's feasible to assign students to these days such that each group has the same number of students and all students can attend on their assigned day. This approach ensures that we efficiently handle up to 10,000 test cases by leveraging the constraints and properties of the problem.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which means they can be perfectly divided into two equal groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: A day is convenient for a student if they have marked it as 1 in their survey response.\n\n# [phrase showing quantity relationship]\n    'equal sizes': This means each group must have exactly n/2 students.\n    'at least one': This means each student has at least one day marked as convenient.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students and their availability.\n2. Iterate over all pairs of distinct weekdays (i, j).\n3. For each pair, count how many students can attend on day i and how many can attend on day j.\n4. Check if it's possible to divide the students into two groups of equal size such that one group attends on day i and the other on day j.\n5. If such a division is possible for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students (n=2) where both students have the same availability = NO\n    Explanation: If both students can only attend on the same day, it's impossible to divide them into two groups attending on different days.\n\n    Test case with maximum students (n=1000) where all students have different availability = NO\n    Explanation: If no two students share a convenient day, it's impossible to form groups.\n\n    Test case where all students can attend on all days = YES\n    Explanation: Any two distinct days can be chosen, and students can be divided equally.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of days and checking feasibility covers these scenarios.\n", "requirement analysis:\nThe problem requires dividing students into two equal groups based on their availability for different weekdays. The solution must ensure that each student can attend the lesson on the chosen day for their group. The challenge lies in efficiently analyzing the survey data to find a feasible distribution of students across two distinct weekdays.\nrequirement pool:\n- Efficiently handle up to 10^5 students across test cases.\n- Ensure each student is assigned to a group with a convenient lesson day.\n- Optimize the algorithm for multiple distributions of convenient days.\n- Provide clear and correct output for each test case.\n- Consider edge cases where distribution might be complex.\nWe will use a combinatorial approach to check all possible pairs of weekdays and attempt to divide students into two groups based on their availability. The solution will leverage efficient data structures to handle the constraints and ensure optimal performance. We will use Python's built-in capabilities for list and set operations to manage the data efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number': The number of students is always even, which allows for an equal division into two groups.\n    'distinct weekdays': The two groups must attend lessons on different days.\n    'convenient': A day is convenient for a student if they can attend a lesson on that day.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Each group must have the same number of students, which is n/2.\n    'at least one': Each student can attend lessons on at least one day, meaning there is at least one '1' in each student's availability list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Iterate over all pairs of distinct weekdays (i, j).\n4. For each pair (i, j), attempt to divide the students into two groups:\n   - Group 1 attends on day i.\n   - Group 2 attends on day j.\n5. Check if it's possible to divide the students such that each student can attend on their group's chosen day.\n6. If a valid division is found for any pair of days, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    = NO\n    Explanation: There are only two students, and they have no common convenient days, so it's impossible to divide them into two groups with different days.\n\n    4\n    1 1 0 0 0\n    1 1 0 0 0\n    0 0 1 1 1\n    0 0 1 1 1\n    = YES\n    Explanation: The first two students can attend on either Monday or Tuesday, and the last two can attend on Wednesday, Thursday, or Friday. A valid division is possible.\n\n    6\n    1 0 0 0 1\n    1 0 0 0 1\n    0 1 0 1 0\n    0 1 0 1 0\n    1 0 0 0 1\n    1 0 0 0 1\n    = YES\n    Explanation: The first and last two students can attend on Monday or Friday, and the middle two can attend on Tuesday or Thursday. A valid division is possible.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of iterating over all pairs of weekdays and checking for a valid division inherently handles these cases.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for lessons on different weekdays. The solution must efficiently handle multiple test cases and ensure that each student can attend lessons on convenient days. The constraints include ensuring equal group sizes and selecting distinct weekdays for each group.\nrequirement pool:\n- Efficiently process up to 10,000 test cases.\n- Ensure equal group sizes for each test case.\n- Select distinct weekdays for each group.\n- Optimize for maximum student convenience.\n- Provide clear output for each test case.\nWe will use a combinatorial approach to check all possible pairs of weekdays and determine if students can be divided into two groups such that each group can attend lessons on one of the chosen days. We will utilize the itertools library to generate combinations of weekdays and numpy for efficient array operations.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number': The number of students is always even, which allows for an equal division into two groups.\n    'distinct weekdays': The two groups must attend lessons on different days.\n    'convenient': A day is convenient for a student if they can attend a lesson on that day.\n\n# [phrase showing quantity relationship]\n    'equal sizes': Each group must have the same number of students, which is n/2.\n    'at least one': Each student can attend lessons on at least one day, meaning there is at least one '1' in each student's availability list.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n1. For each test case, read the number of students, n.\n2. For each student, read their availability for the five weekdays.\n3. Use combinations to generate all possible pairs of distinct weekdays.\n4. For each pair of weekdays, check if it's possible to divide the students into two groups such that:\n   - Each group has n/2 students.\n   - All students in a group can attend lessons on the chosen day for that group.\n5. If such a division is possible for any pair of weekdays, print \"YES\". Otherwise, print \"NO\".\n\n# [edge case]\n    2\n    2\n    1 1 0 0 0\n    0 0 1 1 1\n    = NO\n    Explanation: With only two students and no common convenient day, it's impossible to divide them into two groups with distinct lesson days.\n\n    4\n    1 0 0 0 1\n    0 1 0 0 1\n    1 0 0 0 0\n    0 1 0 0 0\n    = YES\n    Explanation: The first and third students can attend on Monday, and the second and fourth on Tuesday.\n\n    6\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    = YES\n    Explanation: All students can attend on any day, so any division is possible.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all combinations of weekdays and ensuring equal group sizes inherently handles these cases.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for different weekdays. The solution must ensure that each student can attend lessons on a convenient day, and the days chosen for the groups must be distinct. The solution should handle multiple test cases efficiently, considering constraints such as the total number of students and their availability.\nrequirement pool:\n- Efficiently divide students into two equal groups based on availability.\n- Ensure optimal day selection for lessons with distinct days for each group.\n- Handle multiple test cases effectively.\n- Consider scenarios where multiple distributions are possible.\n- Thoroughly analyze survey data for optimal group assignment.\nWe will use a combinatorial approach to check all possible pairs of days and verify if students can be divided into two groups such that each group attends lessons on one of the chosen days. We will utilize efficient data structures to handle multiple test cases and ensure optimal performance. The itertools library will be used to generate combinations of days, and collections.Counter will help in counting student availability efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which allows for an equal division into two groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: A day is convenient for a student if they can attend lessons on that day, indicated by a 1 in the survey.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is half of the total number of students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. For each test case, read the number of students and their availability.\n    2. Use combinations to generate all possible pairs of distinct weekdays.\n    3. For each pair of days, check if students can be divided into two groups such that each group attends lessons on one of the chosen days.\n    4. Use a counter to count how many students can attend on each day.\n    5. Verify if it's possible to split students into two equal groups based on their availability for the chosen days.\n    6. If a valid configuration is found, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    Input: 2\n           1 0 0 0 0\n           0 1 0 0 0\n    Output: NO\n    Explanation: With only two students, it's impossible to find two distinct days where both students can attend.\n\n    Test case with all students available on the same day:\n    Input: 4\n           1 0 0 0 0\n           1 0 0 0 0\n           1 0 0 0 0\n           1 0 0 0 0\n    Output: NO\n    Explanation: All students are only available on Monday, so it's impossible to choose two distinct weekdays.\n\n    Test case with multiple valid configurations:\n    Input: 4\n           1 1 0 0 0\n           1 1 0 0 0\n           0 1 1 0 0\n           0 1 1 0 0\n    Output: YES\n    Explanation: Students can be divided into two groups attending Monday and Tuesday or Tuesday and Wednesday.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all combinations of days and verifying group division will naturally handle these scenarios.\n", "requirement analysis:\nThe requirements focus on dividing students into two equal groups based on their availability for lessons on different weekdays. The solution must efficiently handle multiple test cases and ensure that each student can attend lessons on a convenient day. The constraints include ensuring equal group sizes and selecting distinct weekdays for each group.\nrequirement pool:\n- Efficiently divide students into two equal groups based on survey data.\n- Select two distinct weekdays for lessons ensuring maximum student convenience.\n- Handle up to 10,000 test cases efficiently.\n- Ensure the solution is scalable for up to 100,000 students across all test cases.\n- Provide clear output indicating whether the division and scheduling are possible.\nWe will use a combinatorial approach to check all possible pairs of days and see if we can divide the students into two groups such that each group can attend on one of the chosen days. We will iterate over all pairs of days and for each pair, count the number of students who can attend on each day. If we can find a pair of days where the number of students who can attend on each day is at least half of the total number of students, then it is possible to divide the students into two groups. This approach is efficient given the constraints and ensures that we handle up to 10,000 test cases efficiently.\nPlease read and understand the following inteperation before coding\n# [core concept]\n    'even number'\n    Explanation: The number of students is always even, which allows for an equal division into two groups.\n\n    'distinct weekdays'\n    Explanation: The two groups must attend lessons on different days of the week.\n\n    'convenient'\n    Explanation: Each student must be able to attend the lesson on the day chosen for their group.\n\n# [phrase showing quantity relationship]\n    'equal sizes': The two groups must have the same number of students, which is half of the total number of students.\n\n# [degree adverb]\n    No degree adverb\n\n# [code logic]\n    1. Iterate over all pairs of distinct weekdays.\n    2. For each pair, count the number of students who can attend on each day.\n    3. Check if it's possible to divide the students into two groups such that each group can attend on one of the chosen days.\n    4. If a valid pair is found, print \"YES\"; otherwise, print \"NO\".\n\n# [edge case]\n    Test case with minimum students:\n    2\n    1 0 0 0 0\n    0 1 0 0 0\n    Expected output: NO\n    Explanation: It's impossible to divide two students into two groups with different convenient days.\n\n    Test case with all students available on all days:\n    4\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    1 1 1 1 1\n    Expected output: YES\n    Explanation: Any two distinct days can be chosen since all students are available every day.\n\n    Test case with one student available on multiple days:\n    2\n    1 0 0 1 0\n    0 0 0 1 0\n    Expected output: YES\n    Explanation: Both students can attend on Thursday, allowing for a valid division.\n\n# [extra code for edge case]\n    We do not need extra code to handle the edge cases. The original logic of checking all pairs of days and counting student availability will naturally handle these scenarios.\n"], "scores": [], "pass_results": [false, true, true, true, true, false, false, false, true, false], "pass_test_cases_num": [], "passed": true, "pass": true, "pass_num": 5, "round": 519, "examples": "\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of testcases.\n\nThen the descriptions of t testcases follow.\n\nThe first line of each testcase contains one integer n (2 \u2264 n \u2264 1 000) \u2014 the number of students.\n\nThe i-th of the next n lines contains 5 integers, each of them is 0 or 1. If the j-th integer is 1, then the i-th student can attend the lessons on the j-th day of the week. If the j-th integer is 0, then the i-th student cannot attend the lessons on the j-th day of the week. \n\nAdditional constraints on the input: for each student, at least one of the days of the week is convenient, the total number of students over all testcases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase print an answer. If it's possible to divide the students into two groups of equal sizes and choose different days for the groups so each student can attend the lesson in the chosen day of their group, print \"YES\" (without quotes). Otherwise, print \"NO\" (without quotes). \n\nExample\n\nInput\n\n\n2\n4\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 1 0\n0 1 0 1 0\n2\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first testcase, there is a way to meet all the constraints. For example, the first group can consist of the first and the third students, they will attend the lessons on Thursday (the fourth day); the second group can consist of the second and the fourth students, and they will attend the lessons on Tuesday (the second day).\n\nIn the second testcase, it is impossible to divide the students into groups so they attend the lessons on different days.", "mutate_method": "add_1_sentence_at_end", "parent_index": 323}
